
fmc320_u.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015644  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0801587c  0801587c  0002587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d38  08015d38  00025d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d40  08015d40  00025d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015d44  08015d44  00025d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015d48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca9  200001b8  08015f00  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e61  08015f00  00031e61  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041dd4  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009193  00000000  00000000  00071fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002988  00000000  00000000  0007b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002490  00000000  00000000  0007dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040b2d  00000000  00000000  0007ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fb3f  00000000  00000000  000c0a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178506  00000000  00000000  001005dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278ae2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a85c  00000000  00000000  00278b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	08015864 	.word	0x08015864

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	08015864 	.word	0x08015864

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20001680 	.word	0x20001680
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fabc 	bl	800e910 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fae0 	bl	800e960 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001688 	.word	0x20001688
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c88 	.word	0x20001c88

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fb16 	bl	800da94 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d f9f5 	bl	800d85c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001728 	.word	0x20001728
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c88 	.word	0x20001c88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2000172c 	.word	0x2000172c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017bc 	.word	0x200017bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017b0 	.word	0x200017b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001688 	.word	0x20001688
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fc8d 	bl	800e12c <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	0801587c 	.word	0x0801587c
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d ff5a 	bl	800e72c <_txe_thread_create>
                  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d ff44 	bl	800e72c <_txe_thread_create>
                  0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1,
                  TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fe66 	bl	800e57c <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fcd3 	bl	800e26c <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a05 	.word	0x08000a05
 80008d8:	08015890 	.word	0x08015890
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000ab9 	.word	0x08000ab9
 80008e8:	0801589c 	.word	0x0801589c
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	080158ac 	.word	0x080158ac
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	080158c0 	.word	0x080158c0
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fe92 	bl	800b630 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
#ifdef FM_THREADX_LOW_POWER
  uint32_t ticks_to_sleep;

  g_lptim1_start = LPTIM1->CNT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <App_ThreadX_LowPower_Timer_Setup+0x44>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 8000920:	801a      	strh	r2, [r3, #0]
  /*
   * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
   */
  ticks_to_sleep = (32768 / 16) * count;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	60fb      	str	r3, [r7, #12]
  ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <App_ThreadX_LowPower_Timer_Setup+0x4c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>)
 800093c:	f008 fe02 	bl	8009544 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <App_ThreadX_LowPower_Timer_Setup+0x3a>
      RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
  {
    Error_Handler();
 8000946:	f000 fcc3 	bl	80012d0 <Error_Handler>
  }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	46004400 	.word	0x46004400
 8000958:	20000608 	.word	0x20000608
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200014a4 	.word	0x200014a4

08000964 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <App_ThreadX_LowPower_Enter+0x18>)
 800096e:	f003 fcef 	bl	8004350 <HAL_GPIO_WritePin>


  #ifdef FM_THREADX_LOW_POWER
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000972:	2001      	movs	r0, #1
 8000974:	f004 f98a 	bl	8004c8c <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	42020400 	.word	0x42020400

08000980 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
  #ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000984:	f000 f90a 	bl	8000b9c <SystemClock_Config>
  #endif

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <App_ThreadX_LowPower_Exit+0x18>)
 800098e:	f003 fcdf 	bl	8004350 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	42020400 	.word	0x42020400

0800099c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
#ifdef FM_THREADX_LOW_POWER
  static uint16_t cnt_drift = 0;
  ULONG cnt_ret;
  g_lptim1_end = LPTIM1->CNT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009aa:	801a      	strh	r2, [r3, #0]
  cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]
  cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
  cnt_ret += cnt_drift;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
  cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009dc:	801a      	strh	r2, [r3, #0]
  cnt_ret /= 2048;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0adb      	lsrs	r3, r3, #11
 80009e2:	607b      	str	r3, [r7, #4]
  return (cnt_ret);
 80009e4:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	46004400 	.word	0x46004400
 80009f8:	2000060a 	.word	0x2000060a
 80009fc:	20000608 	.word	0x20000608
 8000a00:	200013c0 	.word	0x200013c0

08000a04 <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    static int backlight_cd = 0;
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a0e:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	2264      	movs	r2, #100	; 0x64
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <menu_task_entry+0xa4>)
 8000a1e:	f00d fcf3 	bl	800e408 <_txe_queue_receive>
 8000a22:	6138      	str	r0, [r7, #16]

        if(ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d02d      	beq.n	8000a88 <menu_task_entry+0x84>
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <menu_task_entry+0xa8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d029      	beq.n	8000a88 <menu_task_entry+0x84>
        {
            if(event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d109      	bne.n	8000a4e <menu_task_entry+0x4a>
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <menu_task_entry+0xac>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dd05      	ble.n	8000a4e <menu_task_entry+0x4a>
            {
                backlight_cd--;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <menu_task_entry+0xac>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <menu_task_entry+0xac>)
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e01c      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10d      	bne.n	8000a70 <menu_task_entry+0x6c>
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <menu_task_entry+0xac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dc09      	bgt.n	8000a70 <menu_task_entry+0x6c>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a64:	f003 fc74 	bl	8004350 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <menu_task_entry+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e00b      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next != EVENT_LCD_REFRESH)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d008      	beq.n	8000a88 <menu_task_entry+0x84>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a7e:	f003 fc67 	bl	8004350 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = 10;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <menu_task_entry+0xac>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	601a      	str	r2, [r3, #0]
            }
        }

        if(ret_status == TX_SUCCESS)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d105      	bne.n	8000a9a <menu_task_entry+0x96>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	4610      	mov	r0, r2
 8000a94:	4798      	blx	r3
 8000a96:	6178      	str	r0, [r7, #20]
 8000a98:	e7bc      	b.n	8000a14 <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4798      	blx	r3
 8000aa0:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000aa2:	e7b7      	b.n	8000a14 <menu_task_entry+0x10>
 8000aa4:	080146ad 	.word	0x080146ad
 8000aa8:	20001388 	.word	0x20001388
 8000aac:	080148e9 	.word	0x080148e9
 8000ab0:	200013c4 	.word	0x200013c4
 8000ab4:	42020800 	.word	0x42020800

08000ab8 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <debounce_task_entry+0x78>)
 8000aca:	f00d fded 	bl	800e6a8 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00c f9dd 	bl	800ce90 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000b16:	2015      	movs	r0, #21
 8000b18:	f003 fa26 	bl	8003f68 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000b1c:	2016      	movs	r0, #22
 8000b1e:	f003 fa23 	bl	8003f68 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000b22:	2017      	movs	r0, #23
 8000b24:	f003 fa20 	bl	8003f68 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b28:	2018      	movs	r0, #24
 8000b2a:	f003 fa1d 	bl	8003f68 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000b2e:	e7c9      	b.n	8000ac4 <debounce_task_entry+0xc>
 8000b30:	2000136c 	.word	0x2000136c
 8000b34:	46022000 	.word	0x46022000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fee2 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f82c 	bl	8000b9c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000b44:	f000 f882 	bl	8000c4c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 fac4 	bl	80010d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b4c:	f000 f8aa 	bl	8000ca4 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000b50:	f000 f916 	bl	8000d80 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000b54:	f000 f928 	bl	8000da8 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000b58:	f000 f972 	bl	8000e40 <MX_RTC_Init>
  MX_SPI1_Init();
 8000b5c:	f000 f9fe 	bl	8000f5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 fa6c 	bl	800103c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000b64:	f00e ff6d 	bl	800fa42 <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <main+0x58>)
 8000b70:	f002 ffb4 	bl	8003adc <HAL_ADCEx_Calibration_Start>
  __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <main+0x5c>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <main+0x5c>)
 8000b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  HAL_LPTIM_Counter_Start(&hlptim1);
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <main+0x60>)
 8000b86:	f003 fd5d 	bl	8004644 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b8a:	f7ff febb 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <main+0x56>
 8000b90:	200013c8 	.word	0x200013c8
 8000b94:	46020c00 	.word	0x46020c00
 8000b98:	20001454 	.word	0x20001454

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2260      	movs	r2, #96	; 0x60
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f014 f914 	bl	8014dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f003 ff87 	bl	8004ad4 <HAL_PWREx_ControlVoltageScaling>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bcc:	f000 fb80 	bl	80012d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd0:	f003 ff70 	bl	8004ab4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <SystemClock_Config+0xac>)
 8000bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bda:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <SystemClock_Config+0xac>)
 8000bdc:	f023 0318 	bic.w	r3, r3, #24
 8000be0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000be4:	2314      	movs	r3, #20
 8000be6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be8:	2381      	movs	r3, #129	; 0x81
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000bf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 f95e 	bl	8004ec4 <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000c0e:	f000 fb5f 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	231f      	movs	r3, #31
 8000c14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 f824 	bl	8005c7c <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c3a:	f000 fb49 	bl	80012d0 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3778      	adds	r7, #120	; 0x78
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	46020c00 	.word	0x46020c00

08000c4c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c50:	f004 f848 	bl	8004ce4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c54:	f004 f866 	bl	8004d24 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * SRAM Power Down In Stop Mode Config
   */
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <SystemPower_Config+0x44>)
 8000c5a:	f004 f873 	bl	8004d44 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DCACHE1_FULL_STOP_RETENTION);
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <SystemPower_Config+0x48>)
 8000c60:	f004 f870 	bl	8004d44 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DMA2DRAM_FULL_STOP_RETENTION);
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <SystemPower_Config+0x4c>)
 8000c66:	f004 f86d 	bl	8004d44 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA32RAM_FULL_STOP_RETENTION);
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <SystemPower_Config+0x50>)
 8000c6c:	f004 f86a 	bl	8004d44 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PERIPHRAM_FULL_STOP_RETENTION);
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <SystemPower_Config+0x54>)
 8000c72:	f004 f867 	bl	8004d44 <HAL_PWREx_DisableRAMsContentStopRetention>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c76:	2002      	movs	r0, #2
 8000c78:	f003 ffb8 	bl	8004bec <HAL_PWREx_ConfigSupply>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000c82:	f000 fb25 	bl	80012d0 <Error_Handler>
  }

  /*
   * SRAM4 Fast In Run Mode Config
   */
  HAL_PWREx_EnableSRAM4FastWakeUp();
 8000c86:	f004 f90d 	bl	8004ea4 <HAL_PWREx_EnableSRAM4FastWakeUp>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	00080001 	.word	0x00080001
 8000c94:	00200001 	.word	0x00200001
 8000c98:	00400001 	.word	0x00400001
 8000c9c:	01000001 	.word	0x01000001
 8000ca0:	00800001 	.word	0x00800001

08000ca4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f014 f891 	bl	8014dd8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <MX_ADC1_Init+0xd4>)
 8000cba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d2e:	f001 f9cd 	bl	80020cc <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d38:	f000 faca 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_ADC1_Init+0xd8>)
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2306      	movs	r3, #6
 8000d42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000d44:	2306      	movs	r3, #6
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC1_Init+0xd0>)
 8000d5c:	f001 fe1c 	bl	8002998 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d66:	f000 fab3 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200013c8 	.word	0x200013c8
 8000d78:	42028000 	.word	0x42028000
 8000d7c:	ce080000 	.word	0xce080000

08000d80 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f003 fb2d 	bl	80043e4 <HAL_ICACHE_ConfigAssociativityMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d90:	f000 fa9e 	bl	80012d0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d94:	f003 fb46 	bl	8004424 <HAL_ICACHE_Enable>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d9e:	f000 fa97 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_LPTIM1_Init+0x90>)
 8000db0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dbe:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dce:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_LPTIM1_Init+0x8c>)
 8000df0:	f003 fb28 	bl	8004444 <HAL_LPTIM_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000dfa:	f000 fa69 	bl	80012d0 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <MX_LPTIM1_Init+0x94>)
 8000e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20001454 	.word	0x20001454
 8000e38:	46004400 	.word	0x46004400
 8000e3c:	46020c00 	.word	0x46020c00

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e70:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <MX_RTC_Init+0x118>)
 8000e72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e7a:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e7c:	227f      	movs	r2, #127	; 0x7f
 8000e7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_RTC_Init+0x114>)
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_RTC_Init+0x114>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_RTC_Init+0x114>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eac:	4829      	ldr	r0, [pc, #164]	; (8000f54 <MX_RTC_Init+0x114>)
 8000eae:	f007 fffd 	bl	8008eac <HAL_RTC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000eb8:	f000 fa0a 	bl	80012d0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <MX_RTC_Init+0x114>)
 8000ed4:	f008 fc20 	bl	8009718 <HAL_RTCEx_PrivilegeModeSet>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ede:	f000 f9f7 	bl	80012d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000ee2:	2311      	movs	r3, #17
 8000ee4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <MX_RTC_Init+0x114>)
 8000f00:	f008 f856 	bl	8008fb0 <HAL_RTC_SetTime>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000f0a:	f000 f9e1 	bl	80012d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 8000f12:	2305      	movs	r3, #5
 8000f14:	717b      	strb	r3, [r7, #5]
  sDate.Date = 10;
 8000f16:	230a      	movs	r3, #10
 8000f18:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 8000f1a:	2317      	movs	r3, #23
 8000f1c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <MX_RTC_Init+0x114>)
 8000f26:	f008 f951 	bl	80091cc <HAL_RTC_SetDate>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000f30:	f000 f9ce 	bl	80012d0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_RTC_Init+0x114>)
 8000f3e:	f008 fb01 	bl	8009544 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000f48:	f000 f9c2 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	; 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200014a4 	.word	0x200014a4
 8000f58:	46007800 	.word	0x46007800

08000f5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <MX_SPI1_Init+0xdc>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b30      	ldr	r3, [pc, #192]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f7c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000f80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000f9e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_SPI1_Init+0xd8>)
 8000ffc:	f008 fbba 	bl	8009774 <HAL_SPI_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001006:	f000 f963 	bl	80012d0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800100e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_SPI1_Init+0xd8>)
 800101e:	f008 ffc6 	bl	8009fae <HAL_SPIEx_SetConfigAutonomousMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001028:	f000 f952 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200014d4 	.word	0x200014d4
 8001038:	40013000 	.word	0x40013000

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART2_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART2_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART2_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART2_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001086:	f009 fbbd 	bl	800a804 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f91e 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART2_UART_Init+0x90>)
 8001098:	f00a f896 	bl	800b1c8 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f915 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x90>)
 80010aa:	f00a f8cb 	bl	800b244 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f90c 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART2_UART_Init+0x90>)
 80010ba:	f00a f84c 	bl	800b156 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f904 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20001564 	.word	0x20001564
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <MX_GPIO_Init+0x1a8>)
 80010ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f0:	4a62      	ldr	r2, [pc, #392]	; (800127c <MX_GPIO_Init+0x1a8>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010fa:	4b60      	ldr	r3, [pc, #384]	; (800127c <MX_GPIO_Init+0x1a8>)
 80010fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <MX_GPIO_Init+0x1a8>)
 800110a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <MX_GPIO_Init+0x1a8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <MX_GPIO_Init+0x1a8>)
 800111a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <MX_GPIO_Init+0x1a8>)
 8001128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800112c:	4a53      	ldr	r2, [pc, #332]	; (800127c <MX_GPIO_Init+0x1a8>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <MX_GPIO_Init+0x1a8>)
 8001138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <MX_GPIO_Init+0x1a8>)
 8001146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <MX_GPIO_Init+0x1a8>)
 800114c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001150:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001154:	4b49      	ldr	r3, [pc, #292]	; (800127c <MX_GPIO_Init+0x1a8>)
 8001156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2150      	movs	r1, #80	; 0x50
 8001166:	4846      	ldr	r0, [pc, #280]	; (8001280 <MX_GPIO_Init+0x1ac>)
 8001168:	f003 f8f2 	bl	8004350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2104      	movs	r1, #4
 8001170:	4844      	ldr	r0, [pc, #272]	; (8001284 <MX_GPIO_Init+0x1b0>)
 8001172:	f003 f8ed 	bl	8004350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	4842      	ldr	r0, [pc, #264]	; (8001288 <MX_GPIO_Init+0x1b4>)
 800117e:	f003 f8e7 	bl	8004350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4841      	ldr	r0, [pc, #260]	; (800128c <MX_GPIO_Init+0x1b8>)
 8001188:	f003 f8e2 	bl	8004350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 800118c:	2350      	movs	r3, #80	; 0x50
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4837      	ldr	r0, [pc, #220]	; (8001280 <MX_GPIO_Init+0x1ac>)
 80011a4:	f002 fefc 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <MX_GPIO_Init+0x1bc>)
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4833      	ldr	r0, [pc, #204]	; (800128c <MX_GPIO_Init+0x1b8>)
 80011be:	f002 feef 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 80011c2:	2304      	movs	r3, #4
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	482a      	ldr	r0, [pc, #168]	; (8001284 <MX_GPIO_Init+0x1b0>)
 80011da:	f002 fee1 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4824      	ldr	r0, [pc, #144]	; (8001288 <MX_GPIO_Init+0x1b4>)
 80011f8:	f002 fed2 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_GPIO_Init+0x1bc>)
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_GPIO_Init+0x1b4>)
 8001212:	f002 fec5 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4817      	ldr	r0, [pc, #92]	; (800128c <MX_GPIO_Init+0x1b8>)
 800122e:	f002 feb7 	bl	8003fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	2015      	movs	r0, #21
 8001238:	f002 fe7c 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 800123c:	2015      	movs	r0, #21
 800123e:	f002 fe93 	bl	8003f68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2016      	movs	r0, #22
 8001248:	f002 fe74 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 800124c:	2016      	movs	r0, #22
 800124e:	f002 fe8b 	bl	8003f68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	2017      	movs	r0, #23
 8001258:	f002 fe6c 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 800125c:	2017      	movs	r0, #23
 800125e:	f002 fe83 	bl	8003f68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	2018      	movs	r0, #24
 8001268:	f002 fe64 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800126c:	2018      	movs	r0, #24
 800126e:	f002 fe7b 	bl	8003f68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	46020c00 	.word	0x46020c00
 8001280:	42020000 	.word	0x42020000
 8001284:	42021800 	.word	0x42021800
 8001288:	42020800 	.word	0x42020800
 800128c:	42020400 	.word	0x42020400
 8001290:	10110000 	.word	0x10110000

08001294 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f008 f9c9 	bl	8009634 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012be:	f000 fb4f 	bl	8001960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40001000 	.word	0x40001000

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x30>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x30>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x30>)
 80012f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8001300:	f003 fd00 	bl	8004d04 <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	46020c00 	.word	0x46020c00

08001310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0b6      	sub	sp, #216	; 0xd8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	22c8      	movs	r2, #200	; 0xc8
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f013 fd59 	bl	8014dd8 <memset>
  if(hadc->Instance==ADC1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_ADC_MspInit+0x70>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d122      	bne.n	8001376 <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4618      	mov	r0, r3
 800134a:	f005 f8a5 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8001354:	f7ff ffbc 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_ADC_MspInit+0x74>)
 800135a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_ADC_MspInit+0x74>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001364:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_ADC_MspInit+0x74>)
 800136a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	37d8      	adds	r7, #216	; 0xd8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	42028000 	.word	0x42028000
 8001384:	46020c00 	.word	0x46020c00

08001388 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0b6      	sub	sp, #216	; 0xd8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	22c8      	movs	r2, #200	; 0xc8
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f013 fd1d 	bl	8014dd8 <memset>
  if(hlptim->Instance==LPTIM1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_LPTIM_MspInit+0x80>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d12a      	bne.n	80013fe <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80013b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 f869 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80013cc:	f7ff ff80 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_LPTIM_MspInit+0x84>)
 80013d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013d6:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_LPTIM_MspInit+0x84>)
 80013d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013dc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_LPTIM_MspInit+0x84>)
 80013e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2043      	movs	r0, #67	; 0x43
 80013f4:	f002 fd9e 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80013f8:	2043      	movs	r0, #67	; 0x43
 80013fa:	f002 fdb5 	bl	8003f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	37d8      	adds	r7, #216	; 0xd8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	46004400 	.word	0x46004400
 800140c:	46020c00 	.word	0x46020c00

08001410 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0b6      	sub	sp, #216	; 0xd8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	22c8      	movs	r2, #200	; 0xc8
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f013 fcd9 	bl	8014dd8 <memset>
  if(hrtc->Instance==RTC)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_RTC_MspInit+0x90>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d132      	bne.n	8001496 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001430:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f825 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001454:	f7ff ff3c 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RTC_MspInit+0x94>)
 800145a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_RTC_MspInit+0x94>)
 8001460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001464:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_RTC_MspInit+0x94>)
 800146a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_RTC_MspInit+0x94>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RTC_MspInit+0x94>)
 800147a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2002      	movs	r0, #2
 800148c:	f002 fd52 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001490:	2002      	movs	r0, #2
 8001492:	f002 fd69 	bl	8003f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37d8      	adds	r7, #216	; 0xd8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	46007800 	.word	0x46007800
 80014a4:	46020c00 	.word	0x46020c00

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0bc      	sub	sp, #240	; 0xf0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	22c8      	movs	r2, #200	; 0xc8
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f013 fc85 	bl	8014dd8 <memset>
  if(hspi->Instance==SPI1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_SPI_MspInit+0xc8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d146      	bne.n	8001566 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80014e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 ffd1 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80014fc:	f7ff fee8 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_SPI_MspInit+0xcc>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 800153c:	2382      	movs	r3, #130	; 0x82
 800153e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001554:	2305      	movs	r3, #5
 8001556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_SPI_MspInit+0xd0>)
 8001562:	f002 fd1d 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	37f0      	adds	r7, #240	; 0xf0
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40013000 	.word	0x40013000
 8001574:	46020c00 	.word	0x46020c00
 8001578:	42020000 	.word	0x42020000

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0bc      	sub	sp, #240	; 0xf0
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	22c8      	movs	r2, #200	; 0xc8
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f013 fc1b 	bl	8014dd8 <memset>
  if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_UART_MspInit+0xc4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d144      	bne.n	8001636 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ac:	f04f 0202 	mov.w	r2, #2
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80015b8:	2304      	movs	r3, #4
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 ff69 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80015cc:	f7ff fe80 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_UART_MspInit+0xc8>)
 80015d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_UART_MspInit+0xc8>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0xc8>)
 80015e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0xc8>)
 80015f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_UART_MspInit+0xc8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_MspInit+0xc8>)
 8001600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160c:	230c      	movs	r3, #12
 800160e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001624:	2307      	movs	r3, #7
 8001626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_MspInit+0xcc>)
 8001632:	f002 fcb5 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	37f0      	adds	r7, #240	; 0xf0
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40004400 	.word	0x40004400
 8001644:	46020c00 	.word	0x46020c00
 8001648:	42020000 	.word	0x42020000

0800164c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_InitTick+0xcc>)
 800165e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001662:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <HAL_InitTick+0xcc>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_InitTick+0xcc>)
 800166e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800167a:	f107 0210 	add.w	r2, r7, #16
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fe49 	bl	800631c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800168a:	f004 fe0b 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800168e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_InitTick+0xd0>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3b01      	subs	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_InitTick+0xd4>)
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_InitTick+0xd8>)
 80016a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_InitTick+0xd4>)
 80016a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_InitTick+0xd4>)
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_InitTick+0xd4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_InitTick+0xd4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <HAL_InitTick+0xd4>)
 80016c0:	f008 fcb6 	bl	800a030 <HAL_TIM_Base_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80016ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016d2:	4813      	ldr	r0, [pc, #76]	; (8001720 <HAL_InitTick+0xd4>)
 80016d4:	f008 fd0e 	bl	800a0f4 <HAL_TIM_Base_Start_IT>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80016de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10e      	bne.n	8001704 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d808      	bhi.n	80016fe <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	2031      	movs	r0, #49	; 0x31
 80016f2:	f002 fc1f 	bl	8003f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_InitTick+0xdc>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e002      	b.n	8001704 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001704:	2031      	movs	r0, #49	; 0x31
 8001706:	f002 fc2f 	bl	8003f68 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800170a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800170e:	4618      	mov	r0, r3
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	46020c00 	.word	0x46020c00
 800171c:	431bde83 	.word	0x431bde83
 8001720:	200015f8 	.word	0x200015f8
 8001724:	40001000 	.word	0x40001000
 8001728:	20000004 	.word	0x20000004

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <RTC_IRQHandler+0x10>)
 800175e:	f007 ffc1 	bl	80096e4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200014a4 	.word	0x200014a4

0800176c <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001770:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001774:	f002 fe04 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001780:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001784:	f002 fdfc 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001790:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001794:	f002 fdf4 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a4:	f002 fdec 	bl	8004380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM6_IRQHandler+0x10>)
 80017b2:	f008 fd3f 	bl	800a234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200015f8 	.word	0x200015f8

080017c0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <LPTIM1_IRQHandler+0x10>)
 80017c6:	f002 ff71 	bl	80046ac <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20001454 	.word	0x20001454

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f013 fabe 	bl	8014d84 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200c0000 	.word	0x200c0000
 8001834:	00000400 	.word	0x00000400
 8001838:	20001644 	.word	0x20001644
 800183c:	20001e68 	.word	0x20001e68

08001840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <SystemInit+0x68>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <SystemInit+0x68>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <SystemInit+0x6c>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <SystemInit+0x6c>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <SystemInit+0x6c>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <SystemInit+0x6c>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <SystemInit+0x6c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <SystemInit+0x6c>)
 8001872:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001876:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800187a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <SystemInit+0x6c>)
 800187e:	2200      	movs	r2, #0
 8001880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <SystemInit+0x6c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <SystemInit+0x6c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <SystemInit+0x6c>)
 8001890:	2200      	movs	r2, #0
 8001892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SystemInit+0x68>)
 8001896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189a:	609a      	str	r2, [r3, #8]
  #endif
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	46020c00 	.word	0x46020c00

080018b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b4:	f7ff ffc4 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018c4:	480a      	ldr	r0, [pc, #40]	; (80018f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
	ldr	r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <LoopForever+0x16>)
	cmp	r2, r3
 80018da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f013 fa57 	bl	8014d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e2:	f7ff f929 	bl	8000b38 <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018e8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80018ec:	08015d48 	.word	0x08015d48
	ldr	r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018f4:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 80018f8:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 80018fc:	20001e61 	.word	0x20001e61

08001900 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_IRQHandler>
	...

08001904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_Init+0x4c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_Init+0x4c>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f002 fb02 	bl	8003f1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800191a:	f004 fba1 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_Init+0x50>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	490b      	ldr	r1, [pc, #44]	; (8001958 <HAL_Init+0x54>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_Init+0x58>)
 8001932:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001934:	200f      	movs	r0, #15
 8001936:	f7ff fe89 	bl	800164c <HAL_InitTick>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e002      	b.n	800194a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fcca 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000
 8001954:	46020c00 	.word	0x46020c00
 8001958:	08015ae8 	.word	0x08015ae8
 800195c:	20000000 	.word	0x20000000

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008
 8001984:	20001648 	.word	0x20001648

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20001648 	.word	0x20001648

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_GetREVID+0x18>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	b29b      	uxth	r3, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e0044000 	.word	0xe0044000

08001a04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LL_ADC_SetResolution+0x3c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d104      	bne.n	8001a8c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f023 020c 	bic.w	r2, r3, #12
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	46021000 	.word	0x46021000

08001aac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3360      	adds	r3, #96	; 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3360      	adds	r3, #96	; 0x60
 8001afc:	461a      	mov	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	; 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3360      	adds	r3, #96	; 0x60
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b087      	sub	sp, #28
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3360      	adds	r3, #96	; 0x60
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d002      	beq.n	8001bee <LL_ADC_SetGainCompensation+0x32>
 8001be8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_SetGainCompensation+0x34>
 8001bee:	2200      	movs	r2, #0
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2107      	movs	r1, #7
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d020      	beq.n	8001cbe <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3330      	adds	r3, #48	; 0x30
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	4413      	add	r3, r2
 8001c8e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	211f      	movs	r1, #31
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	f003 011f 	and.w	r1, r3, #31
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001cbc:	e02b      	b.n	8001d16 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	210f      	movs	r1, #15
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	e010      	b.n	8001d08 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	f001 011f 	and.w	r1, r1, #31
 8001d0e:	408b      	lsls	r3, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	46021000 	.word	0x46021000

08001d28 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2201      	movs	r2, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	e015      	b.n	8001d78 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
  return result;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e003      	b.n	8001d6e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2201      	movs	r2, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d042      	beq.n	8001e5a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <LL_ADC_SetChannelSamplingTime+0x28>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	e011      	b.n	8001e0c <LL_ADC_SetChannelSamplingTime+0x4c>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	617b      	str	r3, [r7, #20]
  return result;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e003      	b.n	8001e0a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0e5b      	lsrs	r3, r3, #25
 8001e10:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3314      	adds	r3, #20
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0e5b      	lsrs	r3, r3, #25
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2107      	movs	r1, #7
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	401a      	ands	r2, r3
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	431a      	orrs	r2, r3
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001e58:	e00e      	b.n	8001e78 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0219      	lsls	r1, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	615a      	str	r2, [r3, #20]
}
 8001e78:	bf00      	nop
 8001e7a:	372c      	adds	r7, #44	; 0x2c
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	46021000 	.word	0x46021000

08001e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0318 	and.w	r3, r3, #24
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	000fffff 	.word	0x000fffff

08001ed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6093      	str	r3, [r2, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <LL_ADC_IsEnabled+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_ADC_IsEnabled+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsDisableOngoing+0x18>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsDisableOngoing+0x1a>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002044:	f043 0210 	orr.w	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d101      	bne.n	8002070 <LL_ADC_REG_IsConversionOngoing+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800208e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	609a      	str	r2, [r3, #8]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d101      	bne.n	80020be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e2b3      	b.n	8002654 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a8b      	ldr	r2, [pc, #556]	; (8002328 <HAL_ADC_Init+0x25c>)
 80020fa:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff f903 	bl	8001310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fee9 	bl	8001ef4 <LL_ADC_IsDeepPowerDownEnabled>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fecf 	bl	8001ed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff04 	bl	8001f44 <LL_ADC_IsInternalRegulatorEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d115      	bne.n	800216e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fee8 	bl	8001f1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800214c:	4b77      	ldr	r3, [pc, #476]	; (800232c <HAL_ADC_Init+0x260>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_ADC_Init+0x264>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002160:	e002      	b.n	8002168 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3b01      	subs	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f9      	bne.n	8002162 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fee6 	bl	8001f44 <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff59 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 80021a6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8244 	bne.w	800263e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8240 	bne.w	800263e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fef2 	bl	8001fbc <LL_ADC_IsEnabled>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d140      	bne.n	8002260 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_ADC_Init+0x25c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d028      	beq.n	800223a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_ADC_Init+0x268>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d109      	bne.n	8002206 <HAL_ADC_Init+0x13a>
 80021f2:	4850      	ldr	r0, [pc, #320]	; (8002334 <HAL_ADC_Init+0x268>)
 80021f4:	f7ff fee2 	bl	8001fbc <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e008      	b.n	8002218 <HAL_ADC_Init+0x14c>
 8002206:	4848      	ldr	r0, [pc, #288]	; (8002328 <HAL_ADC_Init+0x25c>)
 8002208:	f7ff fed8 	bl	8001fbc <LL_ADC_IsEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d021      	beq.n	8002260 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a44      	ldr	r2, [pc, #272]	; (8002334 <HAL_ADC_Init+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x15e>
 8002226:	4a44      	ldr	r2, [pc, #272]	; (8002338 <HAL_ADC_Init+0x26c>)
 8002228:	e000      	b.n	800222c <HAL_ADC_Init+0x160>
 800222a:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_ADC_Init+0x270>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7ff fbe6 	bl	8001a04 <LL_ADC_SetCommonClock>
 8002238:	e012      	b.n	8002260 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7ff fc11 	bl	8001a6c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_ADC_Init+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800225a:	4938      	ldr	r1, [pc, #224]	; (800233c <HAL_ADC_Init+0x270>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_ADC_Init+0x25c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d010      	beq.n	800228c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002270:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002276:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800227c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002284:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002286:	4313      	orrs	r3, r2
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	e030      	b.n	80022ee <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7f1b      	ldrb	r3, [r3, #28]
 8002290:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002298:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800229a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Init+0x1de>
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x1e0>
 80022aa:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022ac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80022b2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da04      	bge.n	80022c6 <HAL_ADC_Init+0x1fa>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c4:	e001      	b.n	80022ca <HAL_ADC_Init+0x1fe>
 80022c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80022ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4918      	ldr	r1, [pc, #96]	; (8002334 <HAL_ADC_Init+0x268>)
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d103      	bne.n	80022de <HAL_ADC_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022dc:	e003      	b.n	80022e6 <HAL_ADC_Init+0x21a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80022e6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d12f      	bne.n	8002358 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_ADC_Init+0x25c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	3b01      	subs	r3, #1
 8002308:	045b      	lsls	r3, r3, #17
 800230a:	6a3a      	ldr	r2, [r7, #32]
 800230c:	4313      	orrs	r3, r2
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	e022      	b.n	8002358 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	e018      	b.n	8002358 <HAL_ADC_Init+0x28c>
 8002326:	bf00      	nop
 8002328:	46021000 	.word	0x46021000
 800232c:	20000000 	.word	0x20000000
 8002330:	053e2d63 	.word	0x053e2d63
 8002334:	42028000 	.word	0x42028000
 8002338:	42028308 	.word	0x42028308
 800233c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_ADC_Init+0x4dc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	4313      	orrs	r3, r2
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	4313      	orrs	r3, r2
 800237c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_ADC_Init+0x4e0>)
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	430b      	orrs	r3, r1
 8002390:	60d3      	str	r3, [r2, #12]
 8002392:	e031      	b.n	80023f8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	4313      	orrs	r3, r2
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	4b7e      	ldr	r3, [pc, #504]	; (80025b0 <HAL_ADC_Init+0x4e4>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_ADC_Init+0x4dc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f000 8093 	beq.w	800252a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fe25 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 800240e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe46 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 800241a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d161      	bne.n	80024e6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d15e      	bne.n	80024e6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7f1b      	ldrb	r3, [r3, #28]
 800242c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4960      	ldr	r1, [pc, #384]	; (80025b4 <HAL_ADC_Init+0x4e8>)
 8002434:	428b      	cmp	r3, r1
 8002436:	d102      	bne.n	800243e <HAL_ADC_Init+0x372>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	e002      	b.n	8002444 <HAL_ADC_Init+0x378>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002444:	4313      	orrs	r3, r2
 8002446:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	430b      	orrs	r3, r1
 800245e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f7ff fba2 	bl	8001bbc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800247e:	2b01      	cmp	r3, #1
 8002480:	d11e      	bne.n	80024c0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_ADC_Init+0x4ec>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002496:	0411      	lsls	r1, r2, #16
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024ae:	0892      	lsrs	r2, r2, #2
 80024b0:	430a      	orrs	r2, r1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e007      	b.n	80024d0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10c      	bne.n	8002508 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f023 010f 	bic.w	r1, r3, #15
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
 8002506:	e007      	b.n	8002518 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 020f 	bic.w	r2, r2, #15
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251c:	f023 0303 	bic.w	r3, r3, #3
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002528:	e092      	b.n	8002650 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002530:	2b01      	cmp	r3, #1
 8002532:	d111      	bne.n	8002558 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800253c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002542:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002548:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4313      	orrs	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_ADC_Init+0x4f0>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	69f9      	ldr	r1, [r7, #28]
 8002568:	430b      	orrs	r3, r1
 800256a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	461a      	mov	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f7ff fb43 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	461a      	mov	r2, r3
 8002586:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800258a:	f7ff fb3a 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d114      	bne.n	80025c0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f062 020f 	orn	r2, r2, #15
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
 80025a6:	e024      	b.n	80025f2 <HAL_ADC_Init+0x526>
 80025a8:	46021000 	.word	0x46021000
 80025ac:	fff0c013 	.word	0xfff0c013
 80025b0:	ffde800d 	.word	0xffde800d
 80025b4:	42028000 	.word	0x42028000
 80025b8:	fc00f81e 	.word	0xfc00f81e
 80025bc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c8:	d113      	bne.n	80025f2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	f003 031c 	and.w	r3, r3, #28
 80025dc:	f06f 020f 	mvn.w	r2, #15
 80025e0:	fa02 f103 	lsl.w	r1, r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_ADC_Init+0x590>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	6a3a      	ldr	r2, [r7, #32]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10b      	bne.n	800261a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800260c:	f023 0303 	bic.w	r3, r3, #3
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002618:	e01a      	b.n	8002650 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261e:	f023 0312 	bic.w	r3, r3, #18
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800263c:	e008      	b.n	8002650 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	833ffff3 	.word	0x833ffff3

08002660 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fcf3 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d15d      	bne.n	8002734 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x26>
 8002682:	2302      	movs	r3, #2
 8002684:	e059      	b.n	800273a <HAL_ADC_Start+0xda>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f001 f916 	bl	80038c0 <ADC_Enable>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d145      	bne.n	800272a <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_ADC_Start+0xe4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d011      	beq.n	80026e0 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d106      	bne.n	80026d8 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ce:	f023 0206 	bic.w	r2, r3, #6
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80026d6:	e006      	b.n	80026e6 <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80026de:	e002      	b.n	80026e6 <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	221c      	movs	r2, #28
 80026ec:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <HAL_ADC_Start+0xe4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fc70 	bl	8002008 <LL_ADC_REG_StartConversion>
 8002728:	e006      	b.n	8002738 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002732:	e001      	b.n	8002738 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002734:	2302      	movs	r3, #2
 8002736:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	46021000 	.word	0x46021000

08002748 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Stop+0x16>
 800275a:	2302      	movs	r3, #2
 800275c:	e023      	b.n	80027a6 <HAL_ADC_Stop+0x5e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002766:	2103      	movs	r1, #3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 ffed 	bl	8003748 <ADC_ConversionStop>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 f911 	bl	80039a0 <ADC_Disable>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800278c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d102      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80027c2:	2308      	movs	r3, #8
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e027      	b.n	8002818 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6a      	ldr	r2, [pc, #424]	; (8002978 <HAL_ADC_PollForConversion+0x1c8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d011      	beq.n	80027f6 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0be      	b.n	800296e <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 80027f0:	2304      	movs	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e010      	b.n	8002818 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ac      	b.n	800296e <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002814:	2304      	movs	r3, #4
 8002816:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002818:	f7ff f8b6 	bl	8001988 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800281e:	e021      	b.n	8002864 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d01d      	beq.n	8002864 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002828:	f7ff f8ae 	bl	8001988 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d302      	bcc.n	800283e <HAL_ADC_PollForConversion+0x8e>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e084      	b.n	800296e <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0d6      	beq.n	8002820 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f9dc 	bl	8001c40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06e      	beq.n	800296c <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d169      	bne.n	800296c <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a36      	ldr	r2, [pc, #216]	; (8002978 <HAL_ADC_PollForConversion+0x1c8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02e      	beq.n	8002900 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d111      	bne.n	80028d4 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d104      	bne.n	80028ec <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e03f      	b.n	800296c <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13a      	bne.n	800296c <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e035      	b.n	800296c <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d126      	bne.n	800295c <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fba0 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d112      	bne.n	8002944 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 020c 	bic.w	r2, r2, #12
 800292c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	679a      	str	r2, [r3, #120]	; 0x78
 8002942:	e00b      	b.n	800295c <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	220c      	movs	r2, #12
 800296a:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	46021000 	.word	0x46021000

0800297c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0bc      	sub	sp, #240	; 0xf0
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4aa8      	ldr	r2, [pc, #672]	; (8002c54 <HAL_ADC_ConfigChannel+0x2bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d103      	bne.n	80029be <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x36>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f000 beb5 	b.w	8003738 <HAL_ADC_ConfigChannel+0xda0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fb3c 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 8695 	bne.w	8003712 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a99      	ldr	r2, [pc, #612]	; (8002c54 <HAL_ADC_ConfigChannel+0x2bc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f000 83ea 	beq.w	80031c8 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7a>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	e01d      	b.n	8002a4e <HAL_ADC_ConfigChannel+0xb6>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e004      	b.n	8002a44 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2201      	movs	r2, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	69d1      	ldr	r1, [r2, #28]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f7ff f8fd 	bl	8001c68 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff faf0 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 8002a78:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fb10 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 8002a86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 81ed 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 81e8 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7ff f988 	bl	8001dc0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d046      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae2:	f7fe ffe3 	bl	8001aac <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7ff f811 	bl	8001b1a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	7e9b      	ldrb	r3, [r3, #26]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d11e      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x17e>
 8002b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b14:	e000      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x180>
 8002b16:	2300      	movs	r3, #0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f7ff f834 	bl	8001b86 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x19c>
 8002b2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x19e>
 8002b34:	2300      	movs	r3, #0
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7ff f80a 	bl	8001b50 <LL_ADC_SetOffsetSignedSaturation>
 8002b3c:	e197      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2200      	movs	r2, #0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7ff f81c 	bl	8001b86 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe fff9 	bl	8001b50 <LL_ADC_SetOffsetSignedSaturation>
 8002b5e:	e186      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe ffc1 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1f4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe ffb6 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_ConfigChannel+0x232>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe ffab 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x24a>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	e018      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x27c>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e004      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	f7fe ff42 	bl	8001aac <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ff5d 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x2c0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe ff52 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	e020      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x2fe>
 8002c54:	46021000 	.word	0x46021000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe ff45 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e004      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002c8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x316>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	e018      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x348>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	e004      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f7fe fedc 	bl	8001aac <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fef7 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x388>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe feec 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	e01e      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x3c6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fee1 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x3de>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	e018      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x410>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e004      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	2102      	movs	r1, #2
 8002db8:	f7fe fe78 	bl	8001aac <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fe93 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x450>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2103      	movs	r1, #3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fe88 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	e01a      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x486>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2103      	movs	r1, #3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fe7d 	bl	8001aee <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e004      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x49e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	e011      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4c2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e46:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d107      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	2103      	movs	r1, #3
 8002e6a:	f7fe fe1f 	bl	8001aac <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f8a2 	bl	8001fbc <LL_ADC_IsEnabled>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8456 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f7fe fffb 	bl	8001e88 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9a:	f040 80d6 	bne.w	800304a <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x52a>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	bf94      	ite	ls
 8002eba:	2301      	movls	r3, #1
 8002ebc:	2300      	movhi	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e019      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x55e>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002eda:	2320      	movs	r3, #32
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d04d      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x5fe>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x57e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f14:	e015      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x5aa>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e003      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	069b      	lsls	r3, r3, #26
 8002f3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x5ca>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	e017      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x5fa>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	4313      	orrs	r3, r2
 8002f94:	e04e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x69c>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x61a>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	3301      	adds	r3, #1
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb0:	e015      	b.n	8002fde <HAL_ADC_ConfigChannel+0x646>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e003      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x666>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	e017      	b.n	800302e <HAL_ADC_ConfigChannel+0x696>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e003      	b.n	8003022 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	4313      	orrs	r3, r2
 8003030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	461a      	mov	r2, r3
 8003042:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003046:	f7fe febb 	bl	8001dc0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f280 836c 	bge.w	800372c <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a97      	ldr	r2, [pc, #604]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x6ca>
 800305e:	4b97      	ldr	r3, [pc, #604]	; (80032bc <HAL_ADC_ConfigChannel+0x924>)
 8003060:	e000      	b.n	8003064 <HAL_ADC_ConfigChannel+0x6cc>
 8003062:	4b97      	ldr	r3, [pc, #604]	; (80032c0 <HAL_ADC_ConfigChannel+0x928>)
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fcf3 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 800306a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a91      	ldr	r2, [pc, #580]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d109      	bne.n	800308c <HAL_ADC_ConfigChannel+0x6f4>
 8003078:	488f      	ldr	r0, [pc, #572]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 800307a:	f7fe ff9f 	bl	8001fbc <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e008      	b.n	800309e <HAL_ADC_ConfigChannel+0x706>
 800308c:	488d      	ldr	r0, [pc, #564]	; (80032c4 <HAL_ADC_ConfigChannel+0x92c>)
 800308e:	f7fe ff95 	bl	8001fbc <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8088 	beq.w	80031b4 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a87      	ldr	r2, [pc, #540]	; (80032c8 <HAL_ADC_ConfigChannel+0x930>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d132      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12c      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7e      	ldr	r2, [pc, #504]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d005      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x738>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a7e      	ldr	r2, [pc, #504]	; (80032c4 <HAL_ADC_ConfigChannel+0x92c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	f040 832b 	bne.w	8003726 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a78      	ldr	r2, [pc, #480]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x746>
 80030da:	4a78      	ldr	r2, [pc, #480]	; (80032bc <HAL_ADC_ConfigChannel+0x924>)
 80030dc:	e000      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x748>
 80030de:	4a78      	ldr	r2, [pc, #480]	; (80032c0 <HAL_ADC_ConfigChannel+0x928>)
 80030e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fe fc9d 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f0:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_ADC_ConfigChannel+0x934>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	4a76      	ldr	r2, [pc, #472]	; (80032d0 <HAL_ADC_ConfigChannel+0x938>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003102:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003112:	e308      	b.n	8003726 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_ADC_ConfigChannel+0x93c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d121      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a62      	ldr	r2, [pc, #392]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d005      	beq.n	8003140 <HAL_ADC_ConfigChannel+0x7a8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a62      	ldr	r2, [pc, #392]	; (80032c4 <HAL_ADC_ConfigChannel+0x92c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f040 82f5 	bne.w	800372a <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x7b6>
 800314a:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_ADC_ConfigChannel+0x924>)
 800314c:	e000      	b.n	8003150 <HAL_ADC_ConfigChannel+0x7b8>
 800314e:	4a5c      	ldr	r2, [pc, #368]	; (80032c0 <HAL_ADC_ConfigChannel+0x928>)
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fe fc65 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003160:	e2e3      	b.n	800372a <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5c      	ldr	r2, [pc, #368]	; (80032d8 <HAL_ADC_ConfigChannel+0x940>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 82df 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 82d8 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d005      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x7fa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <HAL_ADC_ConfigChannel+0x92c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f040 82cd 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_ADC_ConfigChannel+0x920>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x808>
 800319c:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_ADC_ConfigChannel+0x924>)
 800319e:	e000      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x80a>
 80031a0:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_ADC_ConfigChannel+0x928>)
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7fe fc3c 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 80031b2:	e2bb      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80031c6:	e2b1      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 80031d0:	f7fe fc0a 	bl	80019e8 <HAL_GetREVID>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	d130      	bne.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3e      	ldr	r2, [pc, #248]	; (80032dc <HAL_ADC_ConfigChannel+0x944>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d103      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_ADC_ConfigChannel+0x948>)
 80031e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ec:	e027      	b.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_ADC_ConfigChannel+0x94c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d103      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_ADC_ConfigChannel+0x950>)
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031fe:	e01e      	b.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a39      	ldr	r2, [pc, #228]	; (80032ec <HAL_ADC_ConfigChannel+0x954>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d103      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_ADC_ConfigChannel+0x958>)
 800320c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003210:	e015      	b.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <HAL_ADC_ConfigChannel+0x95c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_ADC_ConfigChannel+0x960>)
 800321e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003222:	e00c      	b.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a34      	ldr	r2, [pc, #208]	; (80032fc <HAL_ADC_ConfigChannel+0x964>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d103      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_ADC_ConfigChannel+0x95c>)
 8003230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	f000 81a2 	beq.w	800358c <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003250:	d004      	beq.n	800325c <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003256:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <HAL_ADC_ConfigChannel+0x968>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d107      	bne.n	800326c <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fd5f 	bl	8001d28 <LL_ADC_REG_SetSequencerChAdd>
 800326a:	e0c1      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	210f      	movs	r1, #15
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_ADC_ConfigChannel+0x904>
 8003290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	e037      	b.n	800330c <HAL_ADC_ConfigChannel+0x974>
 800329c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d127      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e029      	b.n	800330c <HAL_ADC_ConfigChannel+0x974>
 80032b8:	42028000 	.word	0x42028000
 80032bc:	42028308 	.word	0x42028308
 80032c0:	46021308 	.word	0x46021308
 80032c4:	46021000 	.word	0x46021000
 80032c8:	ce080000 	.word	0xce080000
 80032cc:	20000000 	.word	0x20000000
 80032d0:	053e2d63 	.word	0x053e2d63
 80032d4:	ca040000 	.word	0xca040000
 80032d8:	80000001 	.word	0x80000001
 80032dc:	b6002000 	.word	0xb6002000
 80032e0:	da400000 	.word	0xda400000
 80032e4:	ba004000 	.word	0xba004000
 80032e8:	de800000 	.word	0xde800000
 80032ec:	b2001000 	.word	0xb2001000
 80032f0:	81000001 	.word	0x81000001
 80032f4:	d6200000 	.word	0xd6200000
 80032f8:	d2100000 	.word	0xd2100000
 80032fc:	d7200000 	.word	0xd7200000
 8003300:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	6849      	ldr	r1, [r1, #4]
 8003310:	f001 011f 	and.w	r1, r1, #31
 8003314:	408b      	lsls	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	429a      	cmp	r2, r3
 800332c:	d860      	bhi.n	80033f0 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800332e:	f7fe fb5b 	bl	80019e8 <HAL_GetREVID>
 8003332:	4603      	mov	r3, r0
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d851      	bhi.n	80033de <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800333a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800333e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x9c4>
 8003346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2b13      	cmp	r3, #19
 8003352:	bf8c      	ite	hi
 8003354:	2301      	movhi	r3, #1
 8003356:	2300      	movls	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e016      	b.n	800338a <HAL_ADC_ConfigChannel+0x9f2>
 800335c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	61bb      	str	r3, [r7, #24]
  return result;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	e003      	b.n	8003380 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b13      	cmp	r3, #19
 8003382:	bf8c      	ite	hi
 8003384:	2301      	movhi	r3, #1
 8003386:	2300      	movls	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d027      	beq.n	80033de <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800338e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_ConfigChannel+0xa16>
 800339a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	3b09      	subs	r3, #9
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	e015      	b.n	80033da <HAL_ADC_ConfigChannel+0xa42>
 80033ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	60fb      	str	r3, [r7, #12]
  return result;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3b09      	subs	r3, #9
 80033d4:	2201      	movs	r2, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fe fc3c 	bl	8001c68 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	461a      	mov	r2, r3
 80033fa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80033fe:	f7fe fcdf 	bl	8001dc0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f280 8190 	bge.w	800372c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a97      	ldr	r2, [pc, #604]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0xa82>
 8003416:	4b97      	ldr	r3, [pc, #604]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 8003418:	e000      	b.n	800341c <HAL_ADC_ConfigChannel+0xa84>
 800341a:	4b97      	ldr	r3, [pc, #604]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fb17 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 8003422:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a94      	ldr	r2, [pc, #592]	; (800367c <HAL_ADC_ConfigChannel+0xce4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d126      	bne.n	800347e <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d120      	bne.n	800347e <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a8b      	ldr	r2, [pc, #556]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0xab2>
 8003446:	4a8b      	ldr	r2, [pc, #556]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 8003448:	e000      	b.n	800344c <HAL_ADC_ConfigChannel+0xab4>
 800344a:	4a8b      	ldr	r2, [pc, #556]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fe fae7 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800345c:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_ADC_ConfigChannel+0xce8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	4a88      	ldr	r2, [pc, #544]	; (8003684 <HAL_ADC_ConfigChannel+0xcec>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800346e:	e002      	b.n	8003476 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f9      	bne.n	8003470 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800347c:	e067      	b.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a81      	ldr	r2, [pc, #516]	; (8003688 <HAL_ADC_ConfigChannel+0xcf0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d116      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003490:	2b00      	cmp	r3, #0
 8003492:	d110      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a75      	ldr	r2, [pc, #468]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0xb0a>
 800349e:	4a75      	ldr	r2, [pc, #468]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_ConfigChannel+0xb0c>
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fabb 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 80034b4:	e04b      	b.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a74      	ldr	r2, [pc, #464]	; (800368c <HAL_ADC_ConfigChannel+0xcf4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d116      	bne.n	80034ee <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d110      	bne.n	80034ee <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0xb42>
 80034d6:	4a67      	ldr	r2, [pc, #412]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 80034d8:	e000      	b.n	80034dc <HAL_ADC_ConfigChannel+0xb44>
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fe fa9f 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 80034ec:	e02f      	b.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_ADC_ConfigChannel+0xcf8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d12a      	bne.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d124      	bne.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a62      	ldr	r2, [pc, #392]	; (8003694 <HAL_ADC_ConfigChannel+0xcfc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d11f      	bne.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0xb84>
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 800351a:	e000      	b.n	800351e <HAL_ADC_ConfigChannel+0xb86>
 800351c:	4a56      	ldr	r2, [pc, #344]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fa7e 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800352e:	f7fe fa5b 	bl	80019e8 <HAL_GetREVID>
 8003532:	4603      	mov	r3, r0
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d809      	bhi.n	800354e <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800354e:	f7fe fa4b 	bl	80019e8 <HAL_GetREVID>
 8003552:	4603      	mov	r3, r0
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003558:	f040 80e8 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_ADC_ConfigChannel+0xd00>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f040 80e2 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 80db 	bne.w	800372c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800358a:	e0cf      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_ADC_ConfigChannel+0xd04>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fbf0 	bl	8001d8e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f280 80ba 	bge.w	800372c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0xc2e>
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 80035c4:	e000      	b.n	80035c8 <HAL_ADC_ConfigChannel+0xc30>
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fa41 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 80035ce:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <HAL_ADC_ConfigChannel+0xd08>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d110      	bne.n	80035fe <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0xc52>
 80035e6:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 80035e8:	e000      	b.n	80035ec <HAL_ADC_ConfigChannel+0xc54>
 80035ea:	4a23      	ldr	r2, [pc, #140]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7fe fa17 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 80035fc:	e06d      	b.n	80036da <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_ADC_ConfigChannel+0xd0c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d110      	bne.n	800362a <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0xc7e>
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 8003614:	e000      	b.n	8003618 <HAL_ADC_ConfigChannel+0xc80>
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f7fe fa01 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 8003628:	e057      	b.n	80036da <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_ADC_ConfigChannel+0xcf4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d110      	bne.n	8003656 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0xcaa>
 800363e:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 8003640:	e000      	b.n	8003644 <HAL_ADC_ConfigChannel+0xcac>
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_ADC_ConfigChannel+0xce0>)
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003648:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7fe f9eb 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 8003654:	e041      	b.n	80036da <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <HAL_ADC_ConfigChannel+0xcf8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d13c      	bne.n	80036da <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a02      	ldr	r2, [pc, #8]	; (8003670 <HAL_ADC_ConfigChannel+0xcd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d11e      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0xd10>
 800366a:	4a02      	ldr	r2, [pc, #8]	; (8003674 <HAL_ADC_ConfigChannel+0xcdc>)
 800366c:	e01d      	b.n	80036aa <HAL_ADC_ConfigChannel+0xd12>
 800366e:	bf00      	nop
 8003670:	42028000 	.word	0x42028000
 8003674:	42028308 	.word	0x42028308
 8003678:	46021308 	.word	0x46021308
 800367c:	b6002000 	.word	0xb6002000
 8003680:	20000000 	.word	0x20000000
 8003684:	053e2d63 	.word	0x053e2d63
 8003688:	ba004000 	.word	0xba004000
 800368c:	80000001 	.word	0x80000001
 8003690:	b2001000 	.word	0xb2001000
 8003694:	46021000 	.word	0x46021000
 8003698:	d7200000 	.word	0xd7200000
 800369c:	80000010 	.word	0x80000010
 80036a0:	ce080000 	.word	0xce080000
 80036a4:	ca040000 	.word	0xca040000
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_ADC_ConfigChannel+0xda8>)
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe f9b8 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80036ba:	f7fe f995 	bl	80019e8 <HAL_GetREVID>
 80036be:	4603      	mov	r3, r0
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d809      	bhi.n	80036da <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80036da:	f7fe f985 	bl	80019e8 <HAL_GetREVID>
 80036de:	4603      	mov	r3, r0
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	d122      	bne.n	800372c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_ADC_ConfigChannel+0xdac>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d11d      	bne.n	800372c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d117      	bne.n	800372c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003710:	e00c      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003724:	e002      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003734:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003738:	4618      	mov	r0, r3
 800373a:	37f0      	adds	r7, #240	; 0xf0
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	46021308 	.word	0x46021308
 8003744:	d7200000 	.word	0xd7200000

08003748 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fc7a 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 8003764:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fc9b 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 8003770:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <ADC_ConversionStop+0x38>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8099 	beq.w	80038b2 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02b      	beq.n	80037e6 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003794:	2b01      	cmp	r3, #1
 8003796:	d126      	bne.n	80037e6 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7f1b      	ldrb	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d122      	bne.n	80037e6 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80037a0:	2301      	movs	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037a4:	e014      	b.n	80037d0 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4a44      	ldr	r2, [pc, #272]	; (80038bc <ADC_ConversionStop+0x174>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d90d      	bls.n	80037ca <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	f043 0210 	orr.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e074      	b.n	80038b4 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d1e3      	bne.n	80037a6 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d014      	beq.n	8003816 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fc31 	bl	8002058 <LL_ADC_REG_IsConversionOngoing>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fbee 	bl	8001fe2 <LL_ADC_IsDisableOngoing>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fc0d 	bl	8002030 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d014      	beq.n	8003846 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fc40 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fbd6 	bl	8001fe2 <LL_ADC_IsDisableOngoing>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fc1c 	bl	800207e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d005      	beq.n	8003858 <ADC_ConversionStop+0x110>
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d105      	bne.n	800385e <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003852:	230c      	movs	r3, #12
 8003854:	617b      	str	r3, [r7, #20]
        break;
 8003856:	e005      	b.n	8003864 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003858:	2308      	movs	r3, #8
 800385a:	617b      	str	r3, [r7, #20]
        break;
 800385c:	e002      	b.n	8003864 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 800385e:	2304      	movs	r3, #4
 8003860:	617b      	str	r3, [r7, #20]
        break;
 8003862:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003864:	f7fe f890 	bl	8001988 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 800386a:	e01b      	b.n	80038a4 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800386c:	f7fe f88c 	bl	8001988 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b05      	cmp	r3, #5
 8003878:	d914      	bls.n	80038a4 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1dc      	bne.n	800386c <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	000cdbff 	.word	0x000cdbff

080038c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fb75 	bl	8001fbc <LL_ADC_IsEnabled>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d15a      	bne.n	800398e <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <ADC_Enable+0xd8>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ea:	f043 0210 	orr.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e046      	b.n	8003990 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fb2c 	bl	8001f6c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <ADC_Enable+0x66>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <ADC_Enable+0xdc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d033      	beq.n	800398e <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003926:	f7fe f82f 	bl	8001988 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	e028      	b.n	8003980 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fb42 	bl	8001fbc <LL_ADC_IsEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fb12 	bl	8001f6c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003948:	f7fe f81e 	bl	8001988 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d914      	bls.n	8003980 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d00d      	beq.n	8003980 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003968:	f043 0210 	orr.w	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e007      	b.n	8003990 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d1cf      	bne.n	800392e <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	8000003f 	.word	0x8000003f
 800399c:	46021000 	.word	0x46021000

080039a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fb18 	bl	8001fe2 <LL_ADC_IsDisableOngoing>
 80039b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe faff 	bl	8001fbc <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d047      	beq.n	8003a54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d144      	bne.n	8003a54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030d 	and.w	r3, r3, #13
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10c      	bne.n	80039f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fad9 	bl	8001f94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2203      	movs	r2, #3
 80039e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ea:	f7fd ffcd 	bl	8001988 <HAL_GetTick>
 80039ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f0:	e029      	b.n	8003a46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e023      	b.n	8003a56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a0e:	f7fd ffbb 	bl	8001988 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d914      	bls.n	8003a46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e007      	b.n	8003a56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1dc      	bne.n	8003a0e <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <LL_ADC_StartCalibration>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <LL_ADC_StartCalibration+0x4c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00c      	beq.n	8003a8c <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <LL_ADC_StartCalibration+0x50>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	e009      	b.n	8003aa0 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	46021000 	.word	0x46021000
 8003ab0:	7ffeffc0 	.word	0x7ffeffc0

08003ab4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac8:	d101      	bne.n	8003ace <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_ADCEx_Calibration_Start+0x1e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e133      	b.n	8003d62 <HAL_ADCEx_Calibration_Start+0x286>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff ff4c 	bl	80039a0 <ADC_Disable>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8119 	bne.w	8003d4a <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b20:	f023 0302 	bic.w	r3, r3, #2
 8003b24:	f043 0202 	orr.w	r2, r3, #2
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a8e      	ldr	r2, [pc, #568]	; (8003d6c <HAL_ADCEx_Calibration_Start+0x290>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d150      	bne.n	8003bd8 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0203 	bic.w	r2, r2, #3
 8003b5c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff73 	bl	8003a60 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b7a:	e014      	b.n	8003ba6 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_ADCEx_Calibration_Start+0x294>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d90d      	bls.n	8003ba6 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8e:	f023 0312 	bic.w	r3, r3, #18
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0dd      	b.n	8003d62 <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff82 	bl	8003ab4 <LL_ADC_IsCalibrationOnGoing>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e2      	bne.n	8003b7c <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68d9      	ldr	r1, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd6:	e0af      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_ADCEx_Calibration_Start+0x298>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003be2:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <HAL_ADCEx_Calibration_Start+0x298>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f240 4255 	movw	r2, #1109	; 0x455
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d012      	beq.n	8003c1c <HAL_ADCEx_Calibration_Start+0x140>
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	f240 4276 	movw	r2, #1142	; 0x476
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00d      	beq.n	8003c1c <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f240 4281 	movw	r2, #1153	; 0x481
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_ADCEx_Calibration_Start+0x138>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f240 4282 	movw	r2, #1154	; 0x482
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d16d      	bne.n	8003cf0 <HAL_ADCEx_Calibration_Start+0x214>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1a:	d369      	bcc.n	8003cf0 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fe4f 	bl	80038c0 <ADC_Enable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 8083 	bne.w	8003d38 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003c44:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c4e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fe94 	bl	80039a0 <ADC_Disable>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003c84:	d109      	bne.n	8003c9a <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb0:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cb2:	e014      	b.n	8003cde <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <HAL_ADCEx_Calibration_Start+0x294>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d90d      	bls.n	8003cde <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc6:	f023 0312 	bic.w	r3, r3, #18
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e041      	b.n	8003d62 <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fee6 	bl	8003ab4 <LL_ADC_IsCalibrationOnGoing>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e2      	bne.n	8003cb4 <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003cee:	e023      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff feb2 	bl	8003a60 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cfc:	e014      	b.n	8003d28 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3301      	adds	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_ADCEx_Calibration_Start+0x294>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d90d      	bls.n	8003d28 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d10:	f023 0312 	bic.w	r3, r3, #18
 8003d14:	f043 0210 	orr.w	r2, r3, #16
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e01c      	b.n	8003d62 <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fec1 	bl	8003ab4 <LL_ADC_IsCalibrationOnGoing>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e2      	bne.n	8003cfe <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3c:	f023 0303 	bic.w	r3, r3, #3
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78
 8003d48:	e005      	b.n	8003d56 <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	46021000 	.word	0x46021000
 8003d70:	01ba813f 	.word	0x01ba813f
 8003d74:	e0044000 	.word	0xe0044000
 8003d78:	7ffeffc0 	.word	0x7ffeffc0

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db12      	blt.n	8003e54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	490a      	ldr	r1, [pc, #40]	; (8003e60 <__NVIC_DisableIRQ+0x44>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	3320      	adds	r3, #32
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e48:	f3bf 8f4f 	dsb	sy
}
 8003e4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e4e:	f3bf 8f6f 	isb	sy
}
 8003e52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000e100 	.word	0xe000e100

08003e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	490c      	ldr	r1, [pc, #48]	; (8003eb0 <__NVIC_SetPriority+0x4c>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	440b      	add	r3, r1
 8003e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e8c:	e00a      	b.n	8003ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4908      	ldr	r1, [pc, #32]	; (8003eb4 <__NVIC_SetPriority+0x50>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	761a      	strb	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f1c3 0307 	rsb	r3, r3, #7
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	bf28      	it	cs
 8003ed6:	2304      	movcs	r3, #4
 8003ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d902      	bls.n	8003ee8 <NVIC_EncodePriority+0x30>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3b03      	subs	r3, #3
 8003ee6:	e000      	b.n	8003eea <NVIC_EncodePriority+0x32>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	401a      	ands	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f00:	f04f 31ff 	mov.w	r1, #4294967295
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43d9      	mvns	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	4313      	orrs	r3, r2
         );
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff28 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f42:	f7ff ff3f 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	6978      	ldr	r0, [r7, #20]
 8003f4e:	f7ff ffb3 	bl	8003eb8 <NVIC_EncodePriority>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff82 	bl	8003e64 <__NVIC_SetPriority>
}
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff32 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff42 	bl	8003e1c <__NVIC_DisableIRQ>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003fb2:	e1ba      	b.n	800432a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 81aa 	beq.w	8004324 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_GPIO_Init+0x188>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d15d      	bne.n	8004094 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 0201 	and.w	r2, r3, #1
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004008:	4a48      	ldr	r2, [pc, #288]	; (800412c <HAL_GPIO_Init+0x18c>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004010:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004012:	4a46      	ldr	r2, [pc, #280]	; (800412c <HAL_GPIO_Init+0x18c>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	08da      	lsrs	r2, r3, #3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3208      	adds	r2, #8
 8004026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	4013      	ands	r3, r2
 8004040:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	220b      	movs	r2, #11
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	08da      	lsrs	r2, r3, #3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3208      	adds	r2, #8
 800405e:	69f9      	ldr	r1, [r7, #28]
 8004060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	2203      	movs	r2, #3
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	4013      	ands	r3, r2
 800407a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2202      	movs	r2, #2
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e067      	b.n	8004164 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x104>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d145      	bne.n	8004130 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	08da      	lsrs	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3208      	adds	r2, #8
 80040ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	220f      	movs	r2, #15
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	08da      	lsrs	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3208      	adds	r2, #8
 80040ea:	69f9      	ldr	r1, [r7, #28]
 80040ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	4013      	ands	r3, r2
 8004106:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0203 	and.w	r2, r3, #3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	4313      	orrs	r3, r2
 800411c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e01e      	b.n	8004164 <HAL_GPIO_Init+0x1c4>
 8004126:	bf00      	nop
 8004128:	46020000 	.word	0x46020000
 800412c:	08015b40 	.word	0x08015b40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	4013      	ands	r3, r2
 8004146:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	4313      	orrs	r3, r2
 800415c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00b      	beq.n	8004184 <HAL_GPIO_Init+0x1e4>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004178:	2b11      	cmp	r3, #17
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b12      	cmp	r3, #18
 8004182:	d130      	bne.n	80041e6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	4013      	ands	r3, r2
 800419a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80041ba:	2201      	movs	r2, #1
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0201 	and.w	r2, r3, #1
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d017      	beq.n	800421e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	4013      	ands	r3, r2
 8004204:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4313      	orrs	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07c      	beq.n	8004324 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800422a:	4a47      	ldr	r2, [pc, #284]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3318      	adds	r3, #24
 8004232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004236:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	220f      	movs	r2, #15
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	4013      	ands	r3, r2
 800424c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	0a9a      	lsrs	r2, r3, #10
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <HAL_GPIO_Init+0x3ac>)
 8004254:	4013      	ands	r3, r2
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	f002 0203 	and.w	r2, r2, #3
 800425c:	00d2      	lsls	r2, r2, #3
 800425e:	4093      	lsls	r3, r2
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	4313      	orrs	r3, r2
 8004264:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004266:	4938      	ldr	r1, [pc, #224]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3318      	adds	r3, #24
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004274:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	43db      	mvns	r3, r3
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	4013      	ands	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004298:	4a2b      	ldr	r2, [pc, #172]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80042c2:	4a21      	ldr	r2, [pc, #132]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80042c8:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80042ee:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 80042f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	43db      	mvns	r3, r3
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	4013      	ands	r3, r2
 8004306:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800431c:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_GPIO_Init+0x3a8>)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f ae3d 	bne.w	8003fb4 <HAL_GPIO_Init+0x14>
  }
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	3724      	adds	r7, #36	; 0x24
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	46022000 	.word	0x46022000
 800434c:	002f7f7f 	.word	0x002f7f7f

08004350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
 800435c:	4613      	mov	r3, r2
 800435e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800436c:	e002      	b.n	8004374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800438a:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004396:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	4618      	mov	r0, r3
 80043a0:	f00b fa46 	bl	800f830 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80043b0:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f807 	bl	80043cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	46022000 	.word	0x46022000

080043cc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	e007      	b.n	8004412 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0204 	bic.w	r2, r3, #4
 800440a:	4905      	ldr	r1, [pc, #20]	; (8004420 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40030400 	.word	0x40030400

08004424 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_ICACHE_Enable+0x1c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_ICACHE_Enable+0x1c>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40030400 	.word	0x40030400

08004444 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0e7      	b.n	8004626 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fc ff89 	bl	8001388 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004496:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80044a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fad4 	bl	8004a54 <LPTIM_WaitForFlag>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d101      	bne.n	80044b6 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0b7      	b.n	8004626 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a12      	ldr	r2, [r2, #32]
 80044c6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80044c8:	2110      	movs	r1, #16
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fac2 	bl	8004a54 <LPTIM_WaitForFlag>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d101      	bne.n	80044da <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0a5      	b.n	8004626 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10e      	bne.n	8004506 <HAL_LPTIM_Init+0xc2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_LPTIM_Init+0xc2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d004      	beq.n	8004520 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800451e:	d103      	bne.n	8004528 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 031e 	bic.w	r3, r3, #30
 8004526:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004530:	4293      	cmp	r3, r2
 8004532:	d005      	beq.n	8004540 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800453a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_LPTIM_Init+0x1ec>)
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004550:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8004556:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800455c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004574:	4313      	orrs	r3, r2
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d004      	beq.n	800458e <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800458c:	d107      	bne.n	800459e <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004596:	4313      	orrs	r3, r2
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00a      	beq.n	80045c0 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045b2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80045b8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_LPTIM_Init+0x1f0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_LPTIM_Init+0x198>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a18      	ldr	r2, [pc, #96]	; (8004638 <HAL_LPTIM_Init+0x1f4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
 80045ec:	e00e      	b.n	800460c <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <HAL_LPTIM_Init+0x1f8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_LPTIM_Init+0x1be>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <HAL_LPTIM_Init+0x1fc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d104      	bne.n	800460c <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	ff39f1fe 	.word	0xff39f1fe
 8004634:	46004400 	.word	0x46004400
 8004638:	40009400 	.word	0x40009400
 800463c:	46004800 	.word	0x46004800
 8004640:	46004c00 	.word	0x46004c00

08004644 <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d00c      	beq.n	8004676 <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004664:	d107      	bne.n	8004676 <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004674:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0204 	orr.w	r2, r2, #4
 8004694:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d120      	bne.n	8004704 <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d119      	bne.n	8004704 <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f99c 	bl	8004a2c <HAL_LPTIM_IC_CaptureCallback>
 80046f4:	e002      	b.n	80046fc <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f93e 	bl	8004978 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004712:	d122      	bne.n	800475a <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d11a      	bne.n	800475a <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800472c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f971 	bl	8004a2c <HAL_LPTIM_IC_CaptureCallback>
 800474a:	e002      	b.n	8004752 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f913 	bl	8004978 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d117      	bne.n	800479a <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d10f      	bne.n	800479a <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004782:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f957 	bl	8004a40 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d117      	bne.n	80047da <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b8:	d10f      	bne.n	80047da <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047c2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f937 	bl	8004a40 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d10d      	bne.n	8004804 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d106      	bne.n	8004804 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2202      	movs	r2, #2
 80047fc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8c4 	bl	800498c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d10d      	bne.n	800482e <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d106      	bne.n	800482e <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2204      	movs	r2, #4
 8004826:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8b9 	bl	80049a0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d111      	bne.n	8004860 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b08      	cmp	r3, #8
 8004848:	d10a      	bne.n	8004860 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2208      	movs	r2, #8
 8004850:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8aa 	bl	80049b4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800486e:	d113      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800487e:	d10b      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004888:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f88e 	bl	80049b4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d10d      	bne.n	80048c2 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d106      	bne.n	80048c2 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2210      	movs	r2, #16
 80048ba:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f883 	bl	80049c8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d10d      	bne.n	80048ec <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d106      	bne.n	80048ec <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2220      	movs	r2, #32
 80048e4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f878 	bl	80049dc <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d10d      	bne.n	8004916 <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d106      	bne.n	8004916 <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2240      	movs	r2, #64	; 0x40
 800490e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f86d 	bl	80049f0 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d10d      	bne.n	8004940 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d106      	bne.n	8004940 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f862 	bl	8004a04 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494e:	d10f      	bne.n	8004970 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d107      	bne.n	8004970 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f854 	bl	8004a18 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <LPTIM_WaitForFlag+0x58>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <LPTIM_WaitForFlag+0x5c>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	0b9b      	lsrs	r3, r3, #14
 8004a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	4013      	ands	r3, r2
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d002      	beq.n	8004a9e <LPTIM_WaitForFlag+0x4a>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ec      	bne.n	8004a78 <LPTIM_WaitForFlag+0x24>

  return result;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	d1b71759 	.word	0xd1b71759

08004ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	46020800 	.word	0x46020800

08004ad4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ae4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d10b      	bne.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d905      	bls.n	8004b02 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004af6:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a32      	ldr	r2, [pc, #200]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b00:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e057      	b.n	8004bb6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d90a      	bls.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	60d3      	str	r3, [r2, #12]
 8004b22:	e007      	b.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b2c:	4925      	ldr	r1, [pc, #148]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2232      	movs	r2, #50	; 0x32
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b52:	e002      	b.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f3      	bne.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01b      	beq.n	8004baa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	2232      	movs	r2, #50	; 0x32
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b90:	e002      	b.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f3      	bne.n	8004b92 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	46020800 	.word	0x46020800
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	10624dd3 	.word	0x10624dd3

08004bd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	46020800 	.word	0x46020800

08004bec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004bf4:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <HAL_PWREx_ConfigSupply+0x94>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_PWREx_ConfigSupply+0x98>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	2232      	movs	r2, #50	; 0x32
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <HAL_PWREx_ConfigSupply+0x98>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d113      	bne.n	8004c40 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c1e:	f023 0302 	bic.w	r3, r3, #2
 8004c22:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c24:	e002      	b.n	8004c2c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d116      	bne.n	8004c66 <HAL_PWREx_ConfigSupply+0x7a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f3      	bne.n	8004c26 <HAL_PWREx_ConfigSupply+0x3a>
 8004c3e:	e012      	b.n	8004c66 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c4c:	e002      	b.n	8004c54 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_PWREx_ConfigSupply+0x7a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f3      	bne.n	8004c4e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e000      	b.n	8004c72 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000
 8004c84:	10624dd3 	.word	0x10624dd3
 8004c88:	46020800 	.word	0x46020800

08004c8c <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004cb8:	bf30      	wfi
 8004cba:	e002      	b.n	8004cc2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004cbc:	bf40      	sev
    __WFE();
 8004cbe:	bf20      	wfe
    __WFE();
 8004cc0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a06      	ldr	r2, [pc, #24]	; (8004ce0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	6113      	str	r3, [r2, #16]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	46020800 	.word	0x46020800
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	6113      	str	r3, [r2, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	46020800 	.word	0x46020800

08004d04 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_PWREx_EnableVddA+0x1c>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <HAL_PWREx_EnableVddA+0x1c>)
 8004d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d12:	6113      	str	r3, [r2, #16]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	46020800 	.word	0x46020800

08004d24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	46020800 	.word	0x46020800

08004d44 <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d56:	f000 8090 	beq.w	8004e7a <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 8004d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d5e:	f200 8098 	bhi.w	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d66:	d07c      	beq.n	8004e62 <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 8004d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d6c:	f200 8091 	bhi.w	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d74:	d069      	beq.n	8004e4a <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	f200 808a 	bhi.w	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d82:	d056      	beq.n	8004e32 <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 8004d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d88:	f200 8083 	bhi.w	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d043      	beq.n	8004e1a <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d87c      	bhi.n	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d9c:	d031      	beq.n	8004e02 <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 8004d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004da2:	d876      	bhi.n	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004da8:	d020      	beq.n	8004dec <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 8004daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dae:	d870      	bhi.n	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d003      	beq.n	8004dbe <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 8004db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dba:	d00b      	beq.n	8004dd4 <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR5_SRAM6PDS1) */

    default:
    {
      return;
 8004dbc:	e069      	b.n	8004e92 <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 8004dc6:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4935      	ldr	r1, [pc, #212]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
      break;
 8004dd2:	e05f      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	492e      	ldr	r1, [pc, #184]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
      break;
 8004dea:	e053      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	4929      	ldr	r1, [pc, #164]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
      break;
 8004e00:	e048      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 8004e0a:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	4923      	ldr	r1, [pc, #140]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
      break;
 8004e18:	e03c      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	491d      	ldr	r1, [pc, #116]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
      break;
 8004e30:	e030      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	4917      	ldr	r1, [pc, #92]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
      break;
 8004e48:	e024      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	4911      	ldr	r1, [pc, #68]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
      break;
 8004e60:	e018      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	02db      	lsls	r3, r3, #11
 8004e72:	490b      	ldr	r1, [pc, #44]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
      break;
 8004e78:	e00c      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	4905      	ldr	r1, [pc, #20]	; (8004ea0 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
      break;
 8004e90:	e000      	b.n	8004e94 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 8004e92:	bf00      	nop
      break;
    }
  }
}
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	46020800 	.word	0x46020800

08004ea4 <HAL_PWREx_EnableSRAM4FastWakeUp>:
  *         Stop 0, Stop 1 and Stop 2 modes, and also increases the LPDMA access time
  *         to SRAM4 during Stop modes.
  * @retval None.
  */
void HAL_PWREx_EnableSRAM4FastWakeUp(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_SRAM4FWU);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004eb2:	6053      	str	r3, [r2, #4]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	46020800 	.word	0x46020800

08004ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f000 bec8 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b99      	ldr	r3, [pc, #612]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee8:	4b96      	ldr	r3, [pc, #600]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 816c 	beq.w	80051d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_RCC_OscConfig+0x52>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	f040 80de 	bne.w	80050ca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	f040 80da 	bne.w	80050ca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f000 bea5 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f28:	4b86      	ldr	r3, [pc, #536]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_RCC_OscConfig+0x7a>
 8004f34:	4b83      	ldr	r3, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f3c:	e005      	b.n	8004f4a <HAL_RCC_OscConfig+0x86>
 8004f3e:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d255      	bcs.n	8004ffa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fa17 	bl	800638c <RCC_SetFlashLatencyFromMSIRange>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f000 be82 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f6a:	4b76      	ldr	r3, [pc, #472]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a75      	ldr	r2, [pc, #468]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f74:	6093      	str	r3, [r2, #8]
 8004f76:	4b73      	ldr	r3, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	4970      	ldr	r1, [pc, #448]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f90:	d309      	bcc.n	8004fa6 <HAL_RCC_OscConfig+0xe2>
 8004f92:	4b6c      	ldr	r3, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f023 021f 	bic.w	r2, r3, #31
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4969      	ldr	r1, [pc, #420]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60cb      	str	r3, [r1, #12]
 8004fa4:	e07e      	b.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	da0a      	bge.n	8004fc4 <HAL_RCC_OscConfig+0x100>
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	015b      	lsls	r3, r3, #5
 8004fbc:	4961      	ldr	r1, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60cb      	str	r3, [r1, #12]
 8004fc2:	e06f      	b.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d30a      	bcc.n	8004fe4 <HAL_RCC_OscConfig+0x120>
 8004fce:	4b5d      	ldr	r3, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	4959      	ldr	r1, [pc, #356]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
 8004fe2:	e05f      	b.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
 8004fe4:	4b57      	ldr	r3, [pc, #348]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	03db      	lsls	r3, r3, #15
 8004ff2:	4954      	ldr	r1, [pc, #336]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60cb      	str	r3, [r1, #12]
 8004ff8:	e054      	b.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ffa:	4b52      	ldr	r3, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a51      	ldr	r2, [pc, #324]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	494c      	ldr	r1, [pc, #304]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005020:	d309      	bcc.n	8005036 <HAL_RCC_OscConfig+0x172>
 8005022:	4b48      	ldr	r3, [pc, #288]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f023 021f 	bic.w	r2, r3, #31
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	4945      	ldr	r1, [pc, #276]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005030:	4313      	orrs	r3, r2
 8005032:	60cb      	str	r3, [r1, #12]
 8005034:	e028      	b.n	8005088 <HAL_RCC_OscConfig+0x1c4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	da0a      	bge.n	8005054 <HAL_RCC_OscConfig+0x190>
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	493d      	ldr	r1, [pc, #244]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 800504e:	4313      	orrs	r3, r2
 8005050:	60cb      	str	r3, [r1, #12]
 8005052:	e019      	b.n	8005088 <HAL_RCC_OscConfig+0x1c4>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d30a      	bcc.n	8005074 <HAL_RCC_OscConfig+0x1b0>
 800505e:	4b39      	ldr	r3, [pc, #228]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	4935      	ldr	r1, [pc, #212]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 800506e:	4313      	orrs	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
 8005072:	e009      	b.n	8005088 <HAL_RCC_OscConfig+0x1c4>
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	03db      	lsls	r3, r3, #15
 8005082:	4930      	ldr	r1, [pc, #192]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005084:	4313      	orrs	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	4618      	mov	r0, r3
 8005094:	f001 f97a 	bl	800638c <RCC_SetFlashLatencyFromMSIRange>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f000 bde5 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80050a4:	f001 f8e4 	bl	8006270 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <HAL_RCC_OscConfig+0x284>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fc facd 	bl	800164c <HAL_InitTick>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80050b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 808a 	beq.w	80051d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80050c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c6:	f000 bdd2 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d066      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050de:	f7fc fc53 	bl	8001988 <HAL_GetTick>
 80050e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050e4:	e009      	b.n	80050fa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050e6:	f7fc fc4f 	bl	8001988 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d902      	bls.n	80050fa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	f000 bdba 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0ef      	beq.n	80050e6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 800510c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005110:	6093      	str	r3, [r2, #8]
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	4909      	ldr	r1, [pc, #36]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800512c:	d30e      	bcc.n	800514c <HAL_RCC_OscConfig+0x288>
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f023 021f 	bic.w	r2, r3, #31
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4902      	ldr	r1, [pc, #8]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 800513c:	4313      	orrs	r3, r2
 800513e:	60cb      	str	r3, [r1, #12]
 8005140:	e04a      	b.n	80051d8 <HAL_RCC_OscConfig+0x314>
 8005142:	bf00      	nop
 8005144:	46020c00 	.word	0x46020c00
 8005148:	20000004 	.word	0x20000004
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0a      	bge.n	800516a <HAL_RCC_OscConfig+0x2a6>
 8005154:	4b98      	ldr	r3, [pc, #608]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	015b      	lsls	r3, r3, #5
 8005162:	4995      	ldr	r1, [pc, #596]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005164:	4313      	orrs	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
 8005168:	e036      	b.n	80051d8 <HAL_RCC_OscConfig+0x314>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d30a      	bcc.n	800518a <HAL_RCC_OscConfig+0x2c6>
 8005174:	4b90      	ldr	r3, [pc, #576]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	498d      	ldr	r1, [pc, #564]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
 8005188:	e026      	b.n	80051d8 <HAL_RCC_OscConfig+0x314>
 800518a:	4b8b      	ldr	r3, [pc, #556]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	03db      	lsls	r3, r3, #15
 8005198:	4987      	ldr	r1, [pc, #540]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	60cb      	str	r3, [r1, #12]
 800519e:	e01b      	b.n	80051d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80051a0:	4b85      	ldr	r3, [pc, #532]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a84      	ldr	r2, [pc, #528]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051ac:	f7fc fbec 	bl	8001988 <HAL_GetTick>
 80051b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051b2:	e009      	b.n	80051c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b4:	f7fc fbe8 	bl	8001988 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f000 bd53 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051c8:	4b7b      	ldr	r3, [pc, #492]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ef      	bne.n	80051b4 <HAL_RCC_OscConfig+0x2f0>
 80051d4:	e000      	b.n	80051d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808b 	beq.w	80052fc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_OscConfig+0x334>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d109      	bne.n	8005206 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d106      	bne.n	8005206 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d17d      	bne.n	80052fc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f000 bd34 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x35a>
 8005210:	4b69      	ldr	r3, [pc, #420]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a68      	ldr	r2, [pc, #416]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e041      	b.n	80052a2 <HAL_RCC_OscConfig+0x3de>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005226:	d112      	bne.n	800524e <HAL_RCC_OscConfig+0x38a>
 8005228:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a62      	ldr	r2, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800522e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b60      	ldr	r3, [pc, #384]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5f      	ldr	r2, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800523a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4b5d      	ldr	r3, [pc, #372]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5c      	ldr	r2, [pc, #368]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e029      	b.n	80052a2 <HAL_RCC_OscConfig+0x3de>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005256:	d112      	bne.n	800527e <HAL_RCC_OscConfig+0x3ba>
 8005258:	4b57      	ldr	r3, [pc, #348]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a56      	ldr	r2, [pc, #344]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800525e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b54      	ldr	r3, [pc, #336]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a53      	ldr	r2, [pc, #332]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800526a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a50      	ldr	r2, [pc, #320]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e011      	b.n	80052a2 <HAL_RCC_OscConfig+0x3de>
 800527e:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a4d      	ldr	r2, [pc, #308]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b48      	ldr	r3, [pc, #288]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a47      	ldr	r2, [pc, #284]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800529c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80052aa:	f7fc fb6d 	bl	8001988 <HAL_GetTick>
 80052ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b0:	e009      	b.n	80052c6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b2:	f7fc fb69 	bl	8001988 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b64      	cmp	r3, #100	; 0x64
 80052be:	d902      	bls.n	80052c6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	f000 bcd4 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c6:	4b3c      	ldr	r3, [pc, #240]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <HAL_RCC_OscConfig+0x3ee>
 80052d2:	e013      	b.n	80052fc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80052d4:	f7fc fb58 	bl	8001988 <HAL_GetTick>
 80052d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052da:	e009      	b.n	80052f0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052dc:	f7fc fb54 	bl	8001988 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	; 0x64
 80052e8:	d902      	bls.n	80052f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	f000 bcbf 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052f0:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1ef      	bne.n	80052dc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05f      	beq.n	80053c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2b04      	cmp	r3, #4
 800530c:	d005      	beq.n	800531a <HAL_RCC_OscConfig+0x456>
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d114      	bne.n	800533e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	2b02      	cmp	r3, #2
 8005318:	d111      	bne.n	800533e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f000 bca3 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	4920      	ldr	r1, [pc, #128]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005338:	4313      	orrs	r3, r2
 800533a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800533c:	e044      	b.n	80053c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d024      	beq.n	8005390 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005346:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800534c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005350:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005352:	f7fc fb19 	bl	8001988 <HAL_GetTick>
 8005356:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005358:	e009      	b.n	800536e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535a:	f7fc fb15 	bl	8001988 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d902      	bls.n	800536e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	f000 bc80 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ef      	beq.n	800535a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	490b      	ldr	r1, [pc, #44]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]
 800538e:	e01b      	b.n	80053c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <HAL_RCC_OscConfig+0x4f4>)
 8005396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800539c:	f7fc faf4 	bl	8001988 <HAL_GetTick>
 80053a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053a2:	e00b      	b.n	80053bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a4:	f7fc faf0 	bl	8001988 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d904      	bls.n	80053bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	f000 bc5b 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
 80053b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053bc:	4baf      	ldr	r3, [pc, #700]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ed      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80c8 	beq.w	8005566 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053dc:	4ba7      	ldr	r3, [pc, #668]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80053de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d111      	bne.n	800540e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ea:	4ba4      	ldr	r3, [pc, #656]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80053ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f0:	4aa2      	ldr	r2, [pc, #648]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80053f2:	f043 0304 	orr.w	r3, r3, #4
 80053f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053fa:	4ba0      	ldr	r3, [pc, #640]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80053fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800540e:	4b9c      	ldr	r3, [pc, #624]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d119      	bne.n	800544e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800541a:	4b99      	ldr	r3, [pc, #612]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	4a98      	ldr	r2, [pc, #608]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005426:	f7fc faaf 	bl	8001988 <HAL_GetTick>
 800542a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800542c:	e009      	b.n	8005442 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fc faab 	bl	8001988 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d902      	bls.n	8005442 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	f000 bc16 	b.w	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005442:	4b8f      	ldr	r3, [pc, #572]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ef      	beq.n	800542e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05f      	beq.n	8005516 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005456:	4b89      	ldr	r3, [pc, #548]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800545c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005468:	429a      	cmp	r2, r3
 800546a:	d037      	beq.n	80054dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e3f4      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01b      	beq.n	80054c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800548e:	4b7b      	ldr	r3, [pc, #492]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005494:	4a79      	ldr	r2, [pc, #484]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005496:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800549a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800549e:	f7fc fa73 	bl	8001988 <HAL_GetTick>
 80054a2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fc fa6f 	bl	8001988 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e3da      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054b8:	4b70      	ldr	r3, [pc, #448]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80054ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1ef      	bne.n	80054a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054c6:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4969      	ldr	r1, [pc, #420]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80054dc:	4b67      	ldr	r3, [pc, #412]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80054de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e2:	4a66      	ldr	r2, [pc, #408]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 80054e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80054ec:	f7fc fa4c 	bl	8001988 <HAL_GetTick>
 80054f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fc fa48 	bl	8001988 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e3b3      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005506:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800550c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ef      	beq.n	80054f4 <HAL_RCC_OscConfig+0x630>
 8005514:	e01b      	b.n	800554e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005516:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551c:	4a57      	ldr	r2, [pc, #348]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800551e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005526:	f7fc fa2f 	bl	8001988 <HAL_GetTick>
 800552a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fc fa2b 	bl	8001988 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b05      	cmp	r3, #5
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e396      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005540:	4b4e      	ldr	r3, [pc, #312]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1ef      	bne.n	800552e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800554e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800555c:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800555e:	f023 0304 	bic.w	r3, r3, #4
 8005562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8111 	beq.w	8005796 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d111      	bne.n	80055ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005588:	4b3c      	ldr	r3, [pc, #240]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800558a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558e:	4a3b      	ldr	r2, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005598:	4b38      	ldr	r3, [pc, #224]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d118      	bne.n	80055ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	4a30      	ldr	r2, [pc, #192]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c4:	f7fc f9e0 	bl	8001988 <HAL_GetTick>
 80055c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fc f9dc 	bl	8001988 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e347      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055de:	4b28      	ldr	r3, [pc, #160]	; (8005680 <HAL_RCC_OscConfig+0x7bc>)
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01f      	beq.n	8005636 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005602:	4b1e      	ldr	r3, [pc, #120]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800560a:	f043 0304 	orr.w	r3, r3, #4
 800560e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005622:	e018      	b.n	8005656 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005624:	4b15      	ldr	r3, [pc, #84]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800562a:	4a14      	ldr	r2, [pc, #80]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005634:	e00f      	b.n	8005656 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800563c:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 8005648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800564c:	4a0b      	ldr	r2, [pc, #44]	; (800567c <HAL_RCC_OscConfig+0x7b8>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d057      	beq.n	800570e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800565e:	f7fc f993 	bl	8001988 <HAL_GetTick>
 8005662:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005664:	e00e      	b.n	8005684 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005666:	f7fc f98f 	bl	8001988 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	4293      	cmp	r3, r2
 8005676:	d905      	bls.n	8005684 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e2f8      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
 800567c:	46020c00 	.word	0x46020c00
 8005680:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005684:	4b9c      	ldr	r3, [pc, #624]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0e9      	beq.n	8005666 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01b      	beq.n	80056d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800569e:	4b96      	ldr	r3, [pc, #600]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80056a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056a4:	4a94      	ldr	r2, [pc, #592]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80056a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fc f96a 	bl	8001988 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e2d3      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056c6:	4b8c      	ldr	r3, [pc, #560]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80056c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0ed      	beq.n	80056b0 <HAL_RCC_OscConfig+0x7ec>
 80056d4:	e053      	b.n	800577e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80056d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056dc:	4a86      	ldr	r2, [pc, #536]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80056de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc f94e 	bl	8001988 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e2b7      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056fe:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ed      	bne.n	80056e8 <HAL_RCC_OscConfig+0x824>
 800570c:	e037      	b.n	800577e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800570e:	f7fc f93b 	bl	8001988 <HAL_GetTick>
 8005712:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fc f937 	bl	8001988 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	; 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e2a0      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800572c:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800572e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ed      	bne.n	8005716 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800573a:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800573c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01a      	beq.n	800577e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005748:	4b6b      	ldr	r3, [pc, #428]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800574a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800574e:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005754:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fc f915 	bl	8001988 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e27e      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005770:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ed      	bne.n	800575a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800577e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005782:	2b01      	cmp	r3, #1
 8005784:	d107      	bne.n	8005796 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005786:	4b5c      	ldr	r3, [pc, #368]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578c:	4a5a      	ldr	r2, [pc, #360]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d036      	beq.n	8005810 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d019      	beq.n	80057de <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80057aa:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a52      	ldr	r2, [pc, #328]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80057b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057b6:	f7fc f8e7 	bl	8001988 <HAL_GetTick>
 80057ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057be:	f7fc f8e3 	bl	8001988 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e24e      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x8fa>
 80057dc:	e018      	b.n	8005810 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80057de:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a45      	ldr	r2, [pc, #276]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057ea:	f7fc f8cd 	bl	8001988 <HAL_GetTick>
 80057ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f2:	f7fc f8c9 	bl	8001988 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e234      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005804:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d036      	beq.n	800588a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d019      	beq.n	8005858 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a33      	ldr	r2, [pc, #204]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800582a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005830:	f7fc f8aa 	bl	8001988 <HAL_GetTick>
 8005834:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005838:	f7fc f8a6 	bl	8001988 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e211      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800584a:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0x974>
 8005856:	e018      	b.n	800588a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005864:	f7fc f890 	bl	8001988 <HAL_GetTick>
 8005868:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800586c:	f7fc f88c 	bl	8001988 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1f7      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800587e:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d07f      	beq.n	8005996 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	2b00      	cmp	r3, #0
 800589c:	d062      	beq.n	8005964 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058a8:	6093      	str	r3, [r2, #8]
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	4910      	ldr	r1, [pc, #64]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80058c4:	d309      	bcc.n	80058da <HAL_RCC_OscConfig+0xa16>
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f023 021f 	bic.w	r2, r3, #31
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	4909      	ldr	r1, [pc, #36]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60cb      	str	r3, [r1, #12]
 80058d8:	e02a      	b.n	8005930 <HAL_RCC_OscConfig+0xa6c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da0c      	bge.n	80058fc <HAL_RCC_OscConfig+0xa38>
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	015b      	lsls	r3, r3, #5
 80058f0:	4901      	ldr	r1, [pc, #4]	; (80058f8 <HAL_RCC_OscConfig+0xa34>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60cb      	str	r3, [r1, #12]
 80058f6:	e01b      	b.n	8005930 <HAL_RCC_OscConfig+0xa6c>
 80058f8:	46020c00 	.word	0x46020c00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d30a      	bcc.n	800591c <HAL_RCC_OscConfig+0xa58>
 8005906:	4ba1      	ldr	r3, [pc, #644]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	499d      	ldr	r1, [pc, #628]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005916:	4313      	orrs	r3, r2
 8005918:	60cb      	str	r3, [r1, #12]
 800591a:	e009      	b.n	8005930 <HAL_RCC_OscConfig+0xa6c>
 800591c:	4b9b      	ldr	r3, [pc, #620]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	03db      	lsls	r3, r3, #15
 800592a:	4998      	ldr	r1, [pc, #608]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005930:	4b96      	ldr	r3, [pc, #600]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a95      	ldr	r2, [pc, #596]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005936:	f043 0310 	orr.w	r3, r3, #16
 800593a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800593c:	f7fc f824 	bl	8001988 <HAL_GetTick>
 8005940:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005944:	f7fc f820 	bl	8001988 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e18b      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005956:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0xa80>
 8005962:	e018      	b.n	8005996 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005964:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a88      	ldr	r2, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005970:	f7fc f80a 	bl	8001988 <HAL_GetTick>
 8005974:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005978:	f7fc f806 	bl	8001988 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e171      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800598a:	4b80      	ldr	r3, [pc, #512]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8166 	beq.w	8005c6c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a6:	4b79      	ldr	r3, [pc, #484]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	f000 80f2 	beq.w	8005b98 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	f040 80c5 	bne.w	8005b48 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059be:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a72      	ldr	r2, [pc, #456]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 80059c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059ca:	f7fb ffdd 	bl	8001988 <HAL_GetTick>
 80059ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d2:	f7fb ffd9 	bl	8001988 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e144      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059e4:	4b69      	ldr	r3, [pc, #420]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f0      	bne.n	80059d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f0:	4b66      	ldr	r3, [pc, #408]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d111      	bne.n	8005a22 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a04:	4a61      	ldr	r2, [pc, #388]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a0e:	4b5f      	ldr	r3, [pc, #380]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a22:	4b5b      	ldr	r3, [pc, #364]	; (8005b90 <HAL_RCC_OscConfig+0xccc>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a2e:	d102      	bne.n	8005a36 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a36:	4b56      	ldr	r3, [pc, #344]	; (8005b90 <HAL_RCC_OscConfig+0xccc>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4a55      	ldr	r2, [pc, #340]	; (8005b90 <HAL_RCC_OscConfig+0xccc>)
 8005a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a40:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0212      	lsls	r2, r2, #8
 8005a5a:	4311      	orrs	r1, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a60:	430a      	orrs	r2, r1
 8005a62:	494a      	ldr	r1, [pc, #296]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	628b      	str	r3, [r1, #40]	; 0x28
 8005a68:	4b48      	ldr	r3, [pc, #288]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	4b49      	ldr	r3, [pc, #292]	; (8005b94 <HAL_RCC_OscConfig+0xcd0>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a74:	3a01      	subs	r2, #1
 8005a76:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	0252      	lsls	r2, r2, #9
 8005a82:	b292      	uxth	r2, r2
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	0412      	lsls	r2, r2, #16
 8005a8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	0612      	lsls	r2, r2, #24
 8005a9c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	493a      	ldr	r1, [pc, #232]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005aa8:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005aae:	f023 0310 	bic.w	r3, r3, #16
 8005ab2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab8:	4a34      	ldr	r2, [pc, #208]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005abe:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	4a32      	ldr	r2, [pc, #200]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005ac4:	f043 0310 	orr.w	r3, r3, #16
 8005ac8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005aca:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f023 020c 	bic.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	492d      	ldr	r1, [pc, #180]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d105      	bne.n	8005af0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <HAL_RCC_OscConfig+0xccc>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <HAL_RCC_OscConfig+0xccc>)
 8005aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005af0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afe:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b20:	f7fb ff32 	bl	8001988 <HAL_GetTick>
 8005b24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fb ff2e 	bl	8001988 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e099      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0xc64>
 8005b46:	e091      	b.n	8005c6c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b54:	f7fb ff18 	bl	8001988 <HAL_GetTick>
 8005b58:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fb ff14 	bl	8001988 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e07f      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <HAL_RCC_OscConfig+0xcc8>)
 8005b80:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005b84:	f023 0303 	bic.w	r3, r3, #3
 8005b88:	6293      	str	r3, [r2, #40]	; 0x28
 8005b8a:	e06f      	b.n	8005c6c <HAL_RCC_OscConfig+0xda8>
 8005b8c:	46020c00 	.word	0x46020c00
 8005b90:	46020800 	.word	0x46020800
 8005b94:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005b98:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b9e:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d039      	beq.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0203 	and.w	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d132      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d129      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d122      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11a      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	0a5b      	lsrs	r3, r3, #9
 8005bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c08:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d108      	bne.n	8005c20 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	0e1b      	lsrs	r3, r3, #24
 8005c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e024      	b.n	8005c6e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d01a      	beq.n	8005c6c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	4a0f      	ldr	r2, [pc, #60]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c3c:	f023 0310 	bic.w	r3, r3, #16
 8005c40:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c42:	f7fb fea1 	bl	8001988 <HAL_GetTick>
 8005c46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005c48:	bf00      	nop
 8005c4a:	f7fb fe9d 	bl	8001988 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d0f9      	beq.n	8005c4a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_RCC_OscConfig+0xdb4>)
 8005c66:	f043 0310 	orr.w	r3, r3, #16
 8005c6a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3738      	adds	r7, #56	; 0x38
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	46020c00 	.word	0x46020c00

08005c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e1d9      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c90:	4b9b      	ldr	r3, [pc, #620]	; (8005f00 <HAL_RCC_ClockConfig+0x284>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d910      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9e:	4b98      	ldr	r3, [pc, #608]	; (8005f00 <HAL_RCC_ClockConfig+0x284>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 020f 	bic.w	r2, r3, #15
 8005ca6:	4996      	ldr	r1, [pc, #600]	; (8005f00 <HAL_RCC_ClockConfig+0x284>)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cae:	4b94      	ldr	r3, [pc, #592]	; (8005f00 <HAL_RCC_ClockConfig+0x284>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e1c1      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	4b8c      	ldr	r3, [pc, #560]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d908      	bls.n	8005cee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005cdc:	4b89      	ldr	r3, [pc, #548]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	4986      	ldr	r1, [pc, #536]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d012      	beq.n	8005d20 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	4b81      	ldr	r3, [pc, #516]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d909      	bls.n	8005d20 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d0c:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	497a      	ldr	r1, [pc, #488]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d908      	bls.n	8005d4e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d3c:	4b71      	ldr	r3, [pc, #452]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	496e      	ldr	r1, [pc, #440]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	4b69      	ldr	r3, [pc, #420]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d908      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d6a:	4b66      	ldr	r3, [pc, #408]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 020f 	bic.w	r2, r3, #15
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	4963      	ldr	r1, [pc, #396]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80d2 	beq.w	8005f2e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d143      	bne.n	8005e1e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d110      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005da4:	4b57      	ldr	r3, [pc, #348]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005daa:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005dc6:	f7fb fddf 	bl	8001988 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005dcc:	4b4e      	ldr	r3, [pc, #312]	; (8005f08 <HAL_RCC_ClockConfig+0x28c>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005dda:	f7fb fdd5 	bl	8001988 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e12b      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005dec:	4b46      	ldr	r3, [pc, #280]	; (8005f08 <HAL_RCC_ClockConfig+0x28c>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e04:	4a3f      	ldr	r2, [pc, #252]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e06:	f023 0304 	bic.w	r3, r3, #4
 8005e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d121      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e112      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d115      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e106      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e3e:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e0fa      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0f2      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e5e:	4b29      	ldr	r3, [pc, #164]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f023 0203 	bic.w	r2, r3, #3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4926      	ldr	r1, [pc, #152]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005e70:	f7fb fd8a 	bl	8001988 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d112      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fb fd82 	bl	8001988 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0d6      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e96:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b0c      	cmp	r3, #12
 8005ea0:	d1ee      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x204>
 8005ea2:	e044      	b.n	8005f2e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d112      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eae:	f7fb fd6b 	bl	8001988 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e0bf      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f003 030c 	and.w	r3, r3, #12
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d1ee      	bne.n	8005eae <HAL_RCC_ClockConfig+0x232>
 8005ed0:	e02d      	b.n	8005f2e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d123      	bne.n	8005f22 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005edc:	f7fb fd54 	bl	8001988 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e0a8      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ef2:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <HAL_RCC_ClockConfig+0x288>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1ee      	bne.n	8005edc <HAL_RCC_ClockConfig+0x260>
 8005efe:	e016      	b.n	8005f2e <HAL_RCC_ClockConfig+0x2b2>
 8005f00:	40022000 	.word	0x40022000
 8005f04:	46020c00 	.word	0x46020c00
 8005f08:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0c:	f7fb fd3c 	bl	8001988 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e090      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d1ee      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d010      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d208      	bcs.n	8005f5c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f4a:	4b40      	ldr	r3, [pc, #256]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 020f 	bic.w	r2, r3, #15
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	493d      	ldr	r1, [pc, #244]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b3c      	ldr	r3, [pc, #240]	; (8006050 <HAL_RCC_ClockConfig+0x3d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d210      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b39      	ldr	r3, [pc, #228]	; (8006050 <HAL_RCC_ClockConfig+0x3d4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	4937      	ldr	r1, [pc, #220]	; (8006050 <HAL_RCC_ClockConfig+0x3d4>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b35      	ldr	r3, [pc, #212]	; (8006050 <HAL_RCC_ClockConfig+0x3d4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e05b      	b.n	8006044 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d208      	bcs.n	8005fba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d209      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4919      	ldr	r1, [pc, #100]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d010      	beq.n	800601a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006004:	429a      	cmp	r2, r3
 8006006:	d208      	bcs.n	800601a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	490d      	ldr	r1, [pc, #52]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800601a:	f000 f821 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800601e:	4602      	mov	r2, r0
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_RCC_ClockConfig+0x3d0>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	490a      	ldr	r1, [pc, #40]	; (8006054 <HAL_RCC_ClockConfig+0x3d8>)
 800602a:	5ccb      	ldrb	r3, [r1, r3]
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
 8006030:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_RCC_ClockConfig+0x3dc>)
 8006032:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCC_ClockConfig+0x3e0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f7fb fb07 	bl	800164c <HAL_InitTick>
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]

  return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	46020c00 	.word	0x46020c00
 8006050:	40022000 	.word	0x40022000
 8006054:	08015ae8 	.word	0x08015ae8
 8006058:	20000000 	.word	0x20000000
 800605c:	20000004 	.word	0x20000004

08006060 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006060:	b480      	push	{r7}
 8006062:	b08b      	sub	sp, #44	; 0x2c
 8006064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606e:	4b7b      	ldr	r3, [pc, #492]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006078:	4b78      	ldr	r3, [pc, #480]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x34>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d121      	bne.n	80060d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d11e      	bne.n	80060d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006094:	4b71      	ldr	r3, [pc, #452]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d107      	bne.n	80060b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80060a0:	4b6e      	ldr	r3, [pc, #440]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060a6:	0b1b      	lsrs	r3, r3, #12
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	e005      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80060b0:	4b6a      	ldr	r3, [pc, #424]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	0f1b      	lsrs	r3, r3, #28
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060bc:	4a68      	ldr	r2, [pc, #416]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d110      	bne.n	80060ee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060d0:	e00d      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060d2:	4b62      	ldr	r3, [pc, #392]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060de:	4b61      	ldr	r3, [pc, #388]	; (8006264 <HAL_RCC_GetSysClockFreq+0x204>)
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	e004      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d101      	bne.n	80060ee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060ea:	4b5e      	ldr	r3, [pc, #376]	; (8006264 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	f040 80ac 	bne.w	800624e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80060f6:	4b59      	ldr	r3, [pc, #356]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006100:	4b56      	ldr	r3, [pc, #344]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800610e:	4b53      	ldr	r3, [pc, #332]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800611a:	4b50      	ldr	r3, [pc, #320]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	08db      	lsrs	r3, r3, #3
 8006120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8086 	beq.w	800624a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d003      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0xec>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d022      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x130>
 800614a:	e043      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006156:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006268 <HAL_RCC_GetSysClockFreq+0x208>
 800615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615e:	4b3f      	ldr	r3, [pc, #252]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800616e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006172:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800626c <HAL_RCC_GetSysClockFreq+0x20c>
 8006176:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800617e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006182:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800618e:	e046      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006268 <HAL_RCC_GetSysClockFreq+0x208>
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b2e      	ldr	r3, [pc, #184]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80061b6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800626c <HAL_RCC_GetSysClockFreq+0x20c>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80061d2:	e024      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061fc:	ed97 6a01 	vldr	s12, [r7, #4]
 8006200:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800626c <HAL_RCC_GetSysClockFreq+0x20c>
 8006204:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006208:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800620c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006210:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006218:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800621c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	0e1b      	lsrs	r3, r3, #24
 8006224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006228:	3301      	adds	r3, #1
 800622a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006236:	edd7 6a07 	vldr	s13, [r7, #28]
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006242:	ee17 3a90 	vmov	r3, s15
 8006246:	623b      	str	r3, [r7, #32]
 8006248:	e001      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800624e:	6a3b      	ldr	r3, [r7, #32]
}
 8006250:	4618      	mov	r0, r3
 8006252:	372c      	adds	r7, #44	; 0x2c
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	46020c00 	.word	0x46020c00
 8006260:	08015b00 	.word	0x08015b00
 8006264:	00f42400 	.word	0x00f42400
 8006268:	4b742400 	.word	0x4b742400
 800626c:	46000000 	.word	0x46000000

08006270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006274:	f7ff fef4 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_RCC_GetHCLKFreq+0x28>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	4906      	ldr	r1, [pc, #24]	; (800629c <HAL_RCC_GetHCLKFreq+0x2c>)
 8006284:	5ccb      	ldrb	r3, [r1, r3]
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800628c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800628e:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006290:	681b      	ldr	r3, [r3, #0]
}
 8006292:	4618      	mov	r0, r3
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	46020c00 	.word	0x46020c00
 800629c:	08015ae8 	.word	0x08015ae8
 80062a0:	20000000 	.word	0x20000000

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80062a8:	f7ff ffe2 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4903      	ldr	r1, [pc, #12]	; (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	46020c00 	.word	0x46020c00
 80062c8:	08015af8 	.word	0x08015af8

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80062d0:	f7ff ffce 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4903      	ldr	r1, [pc, #12]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	46020c00 	.word	0x46020c00
 80062f0:	08015af8 	.word	0x08015af8

080062f4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80062f8:	f7ff ffba 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b05      	ldr	r3, [pc, #20]	; (8006314 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	091b      	lsrs	r3, r3, #4
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4903      	ldr	r1, [pc, #12]	; (8006318 <HAL_RCC_GetPCLK3Freq+0x24>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	bd80      	pop	{r7, pc}
 8006314:	46020c00 	.word	0x46020c00
 8006318:	08015af8 	.word	0x08015af8

0800631c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	221f      	movs	r2, #31
 800632a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <HAL_RCC_GetClockConfig+0x68>)
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 0203 	and.w	r2, r3, #3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <HAL_RCC_GetClockConfig+0x68>)
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_RCC_GetClockConfig+0x68>)
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <HAL_RCC_GetClockConfig+0x68>)
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <HAL_RCC_GetClockConfig+0x68>)
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <HAL_RCC_GetClockConfig+0x6c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 020f 	and.w	r2, r3, #15
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	601a      	str	r2, [r3, #0]
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	46020c00 	.word	0x46020c00
 8006388:	40022000 	.word	0x40022000

0800638c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006394:	4b3e      	ldr	r3, [pc, #248]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063a2:	f7fe fc15 	bl	8004bd0 <HAL_PWREx_GetVoltageRange>
 80063a6:	6178      	str	r0, [r7, #20]
 80063a8:	e019      	b.n	80063de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b0:	4a37      	ldr	r2, [pc, #220]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063b2:	f043 0304 	orr.w	r3, r3, #4
 80063b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80063ba:	4b35      	ldr	r3, [pc, #212]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063c8:	f7fe fc02 	bl	8004bd0 <HAL_PWREx_GetVoltageRange>
 80063cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063ce:	4b30      	ldr	r3, [pc, #192]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d4:	4a2e      	ldr	r2, [pc, #184]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063d6:	f023 0304 	bic.w	r3, r3, #4
 80063da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063e4:	d003      	beq.n	80063ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ec:	d109      	bne.n	8006402 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f4:	d202      	bcs.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80063f6:	2301      	movs	r3, #1
 80063f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063fa:	e033      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006400:	e030      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006408:	d208      	bcs.n	800641c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006410:	d102      	bne.n	8006418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006412:	2303      	movs	r3, #3
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	e025      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e035      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006422:	d90f      	bls.n	8006444 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006430:	d902      	bls.n	8006438 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	e015      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006438:	2301      	movs	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e012      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e00f      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644a:	d109      	bne.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006452:	d102      	bne.n	800645a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006454:	2301      	movs	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	e004      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800645a:	2302      	movs	r3, #2
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e001      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006460:	2301      	movs	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 020f 	bic.w	r2, r3, #15
 800646c:	4909      	ldr	r1, [pc, #36]	; (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d001      	beq.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	46020c00 	.word	0x46020c00
 8006494:	40022000 	.word	0x40022000

08006498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b0ba      	sub	sp, #232	; 0xe8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f002 0401 	and.w	r4, r2, #1
 80064bc:	2500      	movs	r5, #0
 80064be:	ea54 0305 	orrs.w	r3, r4, r5
 80064c2:	d00b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064c4:	4bcb      	ldr	r3, [pc, #812]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ca:	f023 0103 	bic.w	r1, r3, #3
 80064ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	4ac7      	ldr	r2, [pc, #796]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 0802 	and.w	r8, r2, #2
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	ea58 0309 	orrs.w	r3, r8, r9
 80064f0:	d00b      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80064f2:	4bc0      	ldr	r3, [pc, #768]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064f8:	f023 010c 	bic.w	r1, r3, #12
 80064fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	4abc      	ldr	r2, [pc, #752]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006504:	430b      	orrs	r3, r1
 8006506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800650a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f002 0a04 	and.w	sl, r2, #4
 8006516:	f04f 0b00 	mov.w	fp, #0
 800651a:	ea5a 030b 	orrs.w	r3, sl, fp
 800651e:	d00b      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006520:	4bb4      	ldr	r3, [pc, #720]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006526:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800652a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	4ab0      	ldr	r2, [pc, #704]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006532:	430b      	orrs	r3, r1
 8006534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 0308 	and.w	r3, r2, #8
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800654e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d00b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006558:	4ba6      	ldr	r3, [pc, #664]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	4aa2      	ldr	r2, [pc, #648]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800656a:	430b      	orrs	r3, r1
 800656c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0310 	and.w	r3, r2, #16
 800657c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006586:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d00b      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006590:	4b98      	ldr	r3, [pc, #608]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800659a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a0:	4a94      	ldr	r2, [pc, #592]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 0320 	and.w	r3, r2, #32
 80065b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80065c8:	4b8a      	ldr	r3, [pc, #552]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ce:	f023 0107 	bic.w	r1, r3, #7
 80065d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d8:	4a86      	ldr	r2, [pc, #536]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80065ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006600:	4b7c      	ldr	r3, [pc, #496]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006606:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800660a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006610:	4a78      	ldr	r2, [pc, #480]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800662e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006638:	4b6e      	ldr	r3, [pc, #440]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006648:	4a6a      	ldr	r2, [pc, #424]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800665c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006666:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006670:	4b60      	ldr	r3, [pc, #384]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a5c      	ldr	r2, [pc, #368]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800669e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80066a8:	4b52      	ldr	r3, [pc, #328]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ae:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80066b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80066cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80066da:	460b      	mov	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	d00b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80066e0:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066e6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80066ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066f0:	4a40      	ldr	r2, [pc, #256]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800670e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006712:	460b      	mov	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	d00b      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006718:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800671a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800671e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006728:	4a32      	ldr	r2, [pc, #200]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672a:	430b      	orrs	r3, r1
 800672c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800673c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006746:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d00c      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800675a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006762:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006764:	430b      	orrs	r3, r1
 8006766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800676a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006776:	67bb      	str	r3, [r7, #120]	; 0x78
 8006778:	2300      	movs	r3, #0
 800677a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800677c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d04f      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d02d      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d827      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006796:	2b60      	cmp	r3, #96	; 0x60
 8006798:	d02e      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800679a:	2b60      	cmp	r3, #96	; 0x60
 800679c:	d823      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d006      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d81f      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x326>
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d011      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80067ae:	e01a      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067b0:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	4a0f      	ldr	r2, [pc, #60]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067bc:	e01d      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c2:	3308      	adds	r3, #8
 80067c4:	4618      	mov	r0, r3
 80067c6:	f002 fa41 	bl	8008c4c <RCCEx_PLL2_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067d0:	e013      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d6:	332c      	adds	r3, #44	; 0x2c
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 facf 	bl	8008d7c <RCCEx_PLL3_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067e4:	e009      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067ec:	e005      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80067ee:	bf00      	nop
 80067f0:	e003      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 80067f2:	bf00      	nop
 80067f4:	46020c00 	.word	0x46020c00
        break;
 80067f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006802:	4bb6      	ldr	r3, [pc, #728]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006808:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800680c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006814:	4ab1      	ldr	r2, [pc, #708]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006816:	430b      	orrs	r3, r1
 8006818:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006822:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006832:	673b      	str	r3, [r7, #112]	; 0x70
 8006834:	2300      	movs	r3, #0
 8006836:	677b      	str	r3, [r7, #116]	; 0x74
 8006838:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d053      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684e:	d033      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006854:	d82c      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800685a:	d02f      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x424>
 800685c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006860:	d826      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006866:	d008      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800686c:	d820      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d011      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006878:	e01a      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800687a:	4b98      	ldr	r3, [pc, #608]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	4a97      	ldr	r2, [pc, #604]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006884:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006886:	e01a      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688c:	3308      	adds	r3, #8
 800688e:	4618      	mov	r0, r3
 8006890:	f002 f9dc 	bl	8008c4c <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800689a:	e010      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800689c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a0:	332c      	adds	r3, #44	; 0x2c
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 fa6a 	bl	8008d7c <RCCEx_PLL3_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068ae:	e006      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068b6:	e002      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80068bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80068c6:	4b85      	ldr	r3, [pc, #532]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068cc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80068d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068d8:	4a80      	ldr	r2, [pc, #512]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068da:	430b      	orrs	r3, r1
 80068dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068e6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80068f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f8:	2300      	movs	r3, #0
 80068fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068fc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d046      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800690e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006912:	d028      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006914:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006918:	d821      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800691a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691e:	d022      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006924:	d81b      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800692a:	d01c      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800692c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006930:	d815      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006936:	d008      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693c:	d80f      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d011      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006946:	d00e      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006948:	e009      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800694a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694e:	3308      	adds	r3, #8
 8006950:	4618      	mov	r0, r3
 8006952:	f002 f97b 	bl	8008c4c <RCCEx_PLL2_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800695c:	e004      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006964:	e000      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006968:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006970:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006976:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006982:	4a56      	ldr	r2, [pc, #344]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006984:	430b      	orrs	r3, r1
 8006986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006990:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069a0:	663b      	str	r3, [r7, #96]	; 0x60
 80069a2:	2300      	movs	r3, #0
 80069a4:	667b      	str	r3, [r7, #100]	; 0x64
 80069a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80069aa:	460b      	mov	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	d03f      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80069b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d81e      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x562>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	08006a03 	.word	0x08006a03
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	080069e7 	.word	0x080069e7
 80069d0:	08006a03 	.word	0x08006a03
 80069d4:	08006a03 	.word	0x08006a03
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d8:	4b40      	ldr	r3, [pc, #256]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80069e4:	e00e      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ea:	332c      	adds	r3, #44	; 0x2c
 80069ec:	4618      	mov	r0, r3
 80069ee:	f002 f9c5 	bl	8008d7c <RCCEx_PLL3_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069f8:	e004      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006a02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10d      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006a0c:	4b33      	ldr	r3, [pc, #204]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a12:	f023 0107 	bic.w	r1, r3, #7
 8006a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	4a2f      	ldr	r2, [pc, #188]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a3e:	2300      	movs	r3, #0
 8006a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d04d      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a58:	d028      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a5e:	d821      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a64:	d024      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a6a:	d81b      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a70:	d00e      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a76:	d815      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a80:	d110      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a82:	4b16      	ldr	r3, [pc, #88]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	4a15      	ldr	r2, [pc, #84]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a8e:	e012      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a94:	332c      	adds	r3, #44	; 0x2c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f970 	bl	8008d7c <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006aaa:	e004      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006aac:	bf00      	nop
 8006aae:	e002      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006ab0:	bf00      	nop
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006ab4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ab6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d110      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad0:	4a02      	ldr	r2, [pc, #8]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006ada:	bf00      	nop
 8006adc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ae4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006af4:	653b      	str	r3, [r7, #80]	; 0x50
 8006af6:	2300      	movs	r3, #0
 8006af8:	657b      	str	r3, [r7, #84]	; 0x54
 8006afa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f000 80b5 	beq.w	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b0c:	4b9d      	ldr	r3, [pc, #628]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d113      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1a:	4b9a      	ldr	r3, [pc, #616]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b20:	4a98      	ldr	r2, [pc, #608]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b22:	f043 0304 	orr.w	r3, r3, #4
 8006b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b2a:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b42:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	4a90      	ldr	r2, [pc, #576]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b4e:	f7fa ff1b 	bl	8001988 <HAL_GetTick>
 8006b52:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b56:	e00b      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b58:	f7fa ff16 	bl	8001988 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d903      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b6e:	e005      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b70:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ed      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006b7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d165      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b84:	4b7f      	ldr	r3, [pc, #508]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d023      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01b      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006baa:	4b76      	ldr	r3, [pc, #472]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bb8:	4b72      	ldr	r3, [pc, #456]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bbe:	4a71      	ldr	r2, [pc, #452]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc8:	4b6e      	ldr	r3, [pc, #440]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bce:	4a6d      	ldr	r2, [pc, #436]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bd8:	4a6a      	ldr	r2, [pc, #424]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d019      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bee:	f7fa fecb 	bl	8001988 <HAL_GetTick>
 8006bf2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf6:	e00d      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf8:	f7fa fec6 	bl	8001988 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d903      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006c12:	e006      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c14:	4b5b      	ldr	r3, [pc, #364]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ea      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006c22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c2a:	4b56      	ldr	r3, [pc, #344]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c3c:	4a51      	ldr	r2, [pc, #324]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c44:	e008      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c4a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006c4e:	e003      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c58:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c60:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c66:	4a47      	ldr	r2, [pc, #284]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c68:	f023 0304 	bic.w	r3, r3, #4
 8006c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7e:	2300      	movs	r3, #0
 8006c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d042      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c98:	d022      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006c9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c9e:	d81b      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ca4:	d011      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006caa:	d815      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d019      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb4:	d110      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cba:	3308      	adds	r3, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 ffc5 	bl	8008c4c <RCCEx_PLL2_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cc8:	e00d      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	4a2d      	ldr	r2, [pc, #180]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006cd6:	e006      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cde:	e002      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006ce4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ce6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006cee:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cf4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d00:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d02:	430b      	orrs	r3, r1
 8006d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d08:	e003      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d0e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d20:	2300      	movs	r3, #0
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
 8006d24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	d032      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	d00b      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d40:	d804      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d52:	e004      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d112      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d78:	4a02      	ldr	r2, [pc, #8]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006d80:	e008      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006d82:	bf00      	nop
 8006d84:	46020c00 	.word	0x46020c00
 8006d88:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d90:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d00c      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006db0:	4b98      	ldr	r3, [pc, #608]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006db2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006db6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dc2:	4a94      	ldr	r2, [pc, #592]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd8:	2300      	movs	r3, #0
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
 8006ddc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d019      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df2:	d105      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006df4:	4b87      	ldr	r3, [pc, #540]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	4a86      	ldr	r2, [pc, #536]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfe:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006e00:	4b84      	ldr	r3, [pc, #528]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e06:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e12:	4a80      	ldr	r2, [pc, #512]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e14:	430b      	orrs	r3, r1
 8006e16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d00c      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006e36:	4b77      	ldr	r3, [pc, #476]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e48:	4972      	ldr	r1, [pc, #456]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
 8006e62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e66:	460b      	mov	r3, r1
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	d00c      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e6c:	4b69      	ldr	r3, [pc, #420]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e7e:	4965      	ldr	r1, [pc, #404]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d00c      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006ea2:	4b5c      	ldr	r3, [pc, #368]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ea8:	f023 0218 	bic.w	r2, r3, #24
 8006eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006eb4:	4957      	ldr	r1, [pc, #348]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	d032      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006edc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee4:	d105      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee6:	4b4b      	ldr	r3, [pc, #300]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	4a4a      	ldr	r2, [pc, #296]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006efa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006efe:	d108      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f04:	3308      	adds	r3, #8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 fea0 	bl	8008c4c <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006f12:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10d      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f2c:	4939      	ldr	r1, [pc, #228]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f3a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d03a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f66:	d00e      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f6c:	d815      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f76:	d110      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f82:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f84:	e00e      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fe5d 	bl	8008c4c <RCCEx_PLL2_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f98:	e004      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006fa2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006fa4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10d      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fbe:	4915      	ldr	r1, [pc, #84]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006fc6:	e003      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fcc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d00c      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ff2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ffe:	4905      	ldr	r1, [pc, #20]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007000:	4313      	orrs	r3, r2
 8007002:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007006:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800700a:	4618      	mov	r0, r3
 800700c:	37e8      	adds	r7, #232	; 0xe8
 800700e:	46bd      	mov	sp, r7
 8007010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007014:	46020c00 	.word	0x46020c00

08007018 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007018:	b480      	push	{r7}
 800701a:	b089      	sub	sp, #36	; 0x24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007020:	4bad      	ldr	r3, [pc, #692]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007028:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800702a:	4bab      	ldr	r3, [pc, #684]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007034:	4ba8      	ldr	r3, [pc, #672]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	3301      	adds	r3, #1
 8007040:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007042:	4ba5      	ldr	r3, [pc, #660]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800704e:	4ba2      	ldr	r3, [pc, #648]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8123 	beq.w	80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d062      	beq.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b03      	cmp	r3, #3
 800707c:	f200 8081 	bhi.w	8007182 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d024      	beq.n	80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d17a      	bne.n	8007182 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a91 	vldr	s13, [pc, #580]	; 80072dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b8e      	ldr	r3, [pc, #568]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80070b2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80072e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80070be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e08f      	b.n	80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070d0:	4b81      	ldr	r3, [pc, #516]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80070dc:	4b7e      	ldr	r3, [pc, #504]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	0f1b      	lsrs	r3, r3, #28
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	e006      	b.n	80070f6 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80070e8:	4b7b      	ldr	r3, [pc, #492]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	4a7b      	ldr	r2, [pc, #492]	; (80072e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80070f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007120:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80072e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713c:	e058      	b.n	80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007148:	eddf 6a64 	vldr	s13, [pc, #400]	; 80072dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800714c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007150:	4b61      	ldr	r3, [pc, #388]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007160:	ed97 6a02 	vldr	s12, [r7, #8]
 8007164:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80072e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007168:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800716c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007174:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007180:	e036      	b.n	80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007182:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800718e:	4b52      	ldr	r3, [pc, #328]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	e006      	b.n	80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800719a:	4b4f      	ldr	r3, [pc, #316]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800719c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	4a4e      	ldr	r2, [pc, #312]	; (80072e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80071aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80072e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d017      	beq.n	800722c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071fc:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	0a5b      	lsrs	r3, r3, #9
 8007202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800720e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007212:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007216:	edd7 6a07 	vldr	s13, [r7, #28]
 800721a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007222:	ee17 2a90 	vmov	r2, s15
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e002      	b.n	8007232 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007232:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d017      	beq.n	800726e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800723e:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007254:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007258:	edd7 6a07 	vldr	s13, [r7, #28]
 800725c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007264:	ee17 2a90 	vmov	r2, s15
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d017      	beq.n	80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007280:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007296:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800729a:	edd7 6a07 	vldr	s13, [r7, #28]
 800729e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a6:	ee17 2a90 	vmov	r2, s15
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072ae:	e00c      	b.n	80072ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
}
 80072b6:	e008      	b.n	80072ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	609a      	str	r2, [r3, #8]
}
 80072ca:	bf00      	nop
 80072cc:	3724      	adds	r7, #36	; 0x24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	46020c00 	.word	0x46020c00
 80072dc:	4b742400 	.word	0x4b742400
 80072e0:	46000000 	.word	0x46000000
 80072e4:	08015b00 	.word	0x08015b00

080072e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b089      	sub	sp, #36	; 0x24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80072f0:	4bad      	ldr	r3, [pc, #692]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80072fa:	4bab      	ldr	r3, [pc, #684]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007304:	4ba8      	ldr	r3, [pc, #672]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	3301      	adds	r3, #1
 8007310:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007312:	4ba5      	ldr	r3, [pc, #660]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800731e:	4ba2      	ldr	r3, [pc, #648]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8123 	beq.w	8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d062      	beq.n	800740e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b03      	cmp	r3, #3
 800734c:	f200 8081 	bhi.w	8007452 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d024      	beq.n	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d17a      	bne.n	8007452 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	eddf 6a91 	vldr	s13, [pc, #580]	; 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800736a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736e:	4b8e      	ldr	r3, [pc, #568]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800737e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007382:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007386:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800738a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800738e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007392:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739e:	e08f      	b.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80073a0:	4b81      	ldr	r3, [pc, #516]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80073ac:	4b7e      	ldr	r3, [pc, #504]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	0f1b      	lsrs	r3, r3, #28
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	e006      	b.n	80073c6 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80073b8:	4b7b      	ldr	r3, [pc, #492]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	0f1b      	lsrs	r3, r3, #28
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a7b      	ldr	r2, [pc, #492]	; (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80073c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	ee07 3a90 	vmov	s15, r3
 80073e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80073f0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80073f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007400:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740c:	e058      	b.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	ee07 3a90 	vmov	s15, r3
 8007414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007418:	eddf 6a64 	vldr	s13, [pc, #400]	; 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800741c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007420:	4b61      	ldr	r3, [pc, #388]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007430:	ed97 6a02 	vldr	s12, [r7, #8]
 8007434:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007438:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800743c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007444:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007450:	e036      	b.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007452:	4b55      	ldr	r3, [pc, #340]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800745e:	4b52      	ldr	r3, [pc, #328]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	0f1b      	lsrs	r3, r3, #28
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	e006      	b.n	8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800746a:	4b4f      	ldr	r3, [pc, #316]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800746c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	0f1b      	lsrs	r3, r3, #28
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	4a4e      	ldr	r2, [pc, #312]	; (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800747a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074be:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80074c0:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074cc:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	0a5b      	lsrs	r3, r3, #9
 80074d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80074de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f2:	ee17 2a90 	vmov	r2, s15
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e002      	b.n	8007502 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d017      	beq.n	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007524:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007528:	edd7 6a07 	vldr	s13, [r7, #28]
 800752c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007534:	ee17 2a90 	vmov	r2, s15
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	605a      	str	r2, [r3, #4]
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007544:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d017      	beq.n	8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007550:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	0e1b      	lsrs	r3, r3, #24
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007566:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800756a:	edd7 6a07 	vldr	s13, [r7, #28]
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	ee17 2a90 	vmov	r2, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800757e:	e00c      	b.n	800759a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
}
 8007586:	e008      	b.n	800759a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
}
 800759a:	bf00      	nop
 800759c:	3724      	adds	r7, #36	; 0x24
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	46020c00 	.word	0x46020c00
 80075ac:	4b742400 	.word	0x4b742400
 80075b0:	46000000 	.word	0x46000000
 80075b4:	08015b00 	.word	0x08015b00

080075b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b089      	sub	sp, #36	; 0x24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80075c0:	4bad      	ldr	r3, [pc, #692]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80075ca:	4bab      	ldr	r3, [pc, #684]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80075d4:	4ba8      	ldr	r3, [pc, #672]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	3301      	adds	r3, #1
 80075e0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80075e2:	4ba5      	ldr	r3, [pc, #660]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80075ee:	4ba2      	ldr	r3, [pc, #648]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8123 	beq.w	8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d062      	beq.n	80076de <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b03      	cmp	r3, #3
 800761c:	f200 8081 	bhi.w	8007722 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d024      	beq.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d17a      	bne.n	8007722 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eddf 6a91 	vldr	s13, [pc, #580]	; 800787c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b8e      	ldr	r3, [pc, #568]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800764e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007652:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800765e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800766e:	e08f      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007670:	4b81      	ldr	r3, [pc, #516]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800767c:	4b7e      	ldr	r3, [pc, #504]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	0f1b      	lsrs	r3, r3, #28
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	e006      	b.n	8007696 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007688:	4b7b      	ldr	r3, [pc, #492]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800768a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800768e:	041b      	lsls	r3, r3, #16
 8007690:	0f1b      	lsrs	r3, r3, #28
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	4a7b      	ldr	r2, [pc, #492]	; (8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80076c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076dc:	e058      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800787c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80076ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f0:	4b61      	ldr	r3, [pc, #388]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007700:	ed97 6a02 	vldr	s12, [r7, #8]
 8007704:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007708:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800770c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007714:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007720:	e036      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007722:	4b55      	ldr	r3, [pc, #340]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800772e:	4b52      	ldr	r3, [pc, #328]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	0f1b      	lsrs	r3, r3, #28
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	e006      	b.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800773a:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800773c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007740:	041b      	lsls	r3, r3, #16
 8007742:	0f1b      	lsrs	r3, r3, #28
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	4a4e      	ldr	r2, [pc, #312]	; (8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800774a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007772:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007790:	4b39      	ldr	r3, [pc, #228]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800779e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a0:	0a5b      	lsrs	r3, r3, #9
 80077a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80077ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c2:	ee17 2a90 	vmov	r2, s15
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80077d2:	4b29      	ldr	r3, [pc, #164]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80077f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007804:	ee17 2a90 	vmov	r2, s15
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	605a      	str	r2, [r3, #4]
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007820:	4b15      	ldr	r3, [pc, #84]	; (8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	0e1b      	lsrs	r3, r3, #24
 8007826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007836:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800783a:	edd7 6a07 	vldr	s13, [r7, #28]
 800783e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007846:	ee17 2a90 	vmov	r2, s15
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800784e:	e00c      	b.n	800786a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	609a      	str	r2, [r3, #8]
}
 8007856:	e008      	b.n	800786a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	609a      	str	r2, [r3, #8]
}
 800786a:	bf00      	nop
 800786c:	3724      	adds	r7, #36	; 0x24
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	46020c00 	.word	0x46020c00
 800787c:	4b742400 	.word	0x4b742400
 8007880:	46000000 	.word	0x46000000
 8007884:	08015b00 	.word	0x08015b00

08007888 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08e      	sub	sp, #56	; 0x38
 800788c:	af00      	add	r7, sp, #0
 800788e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007896:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800789a:	430b      	orrs	r3, r1
 800789c:	d145      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800789e:	4ba7      	ldr	r3, [pc, #668]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80078aa:	4ba4      	ldr	r3, [pc, #656]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d108      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078be:	d104      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80078c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
 80078c6:	f001 b9b3 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80078ca:	4b9c      	ldr	r3, [pc, #624]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d8:	d114      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e0:	d110      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078e2:	4b96      	ldr	r3, [pc, #600]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f0:	d103      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80078f2:	23fa      	movs	r3, #250	; 0xfa
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078f6:	f001 b99b 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80078fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007900:	f001 b996 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007904:	4b8d      	ldr	r3, [pc, #564]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007918:	d103      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800791a:	4b89      	ldr	r3, [pc, #548]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	f001 b987 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
 8007926:	f001 b983 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800792a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007932:	430b      	orrs	r3, r1
 8007934:	d151      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007936:	4b81      	ldr	r3, [pc, #516]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800793c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007940:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d035      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d841      	bhi.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d02a      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	2b60      	cmp	r3, #96	; 0x60
 8007958:	d83b      	bhi.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d009      	beq.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d835      	bhi.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00c      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2b20      	cmp	r3, #32
 8007970:	d012      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007972:	e02e      	b.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fb4d 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007982:	f001 b955 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007986:	f107 0318 	add.w	r3, r7, #24
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fcac 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007994:	f001 b94c 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007998:	f107 030c 	add.w	r3, r7, #12
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fe0b 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079a6:	f001 b943 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079b0:	f001 b93e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079b4:	4b61      	ldr	r3, [pc, #388]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d103      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80079c2:	4b60      	ldr	r3, [pc, #384]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079c6:	f001 b933 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ce:	f001 b92f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d6:	f001 b92b 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80079da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079de:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80079e2:	430b      	orrs	r3, r1
 80079e4:	d158      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80079e6:	4b55      	ldr	r3, [pc, #340]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d03b      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a00:	d846      	bhi.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a08:	d02e      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a10:	d83e      	bhi.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d00b      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d836      	bhi.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d012      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007a30:	e02e      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff faee 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a40:	f001 b8f6 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a44:	f107 0318 	add.w	r3, r7, #24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fc4d 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a52:	f001 b8ed 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fdac 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a64:	f001 b8e4 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a68:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6e:	f001 b8df 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a72:	4b32      	ldr	r3, [pc, #200]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7e:	d103      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007a80:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a84:	f001 b8d4 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a8c:	f001 b8d0 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a94:	f001 b8cc 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	d126      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007aa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	d106      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007ac4:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac8:	f001 b8b2 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007acc:	4b1b      	ldr	r3, [pc, #108]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d107      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d103      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007ae2:	4b19      	ldr	r3, [pc, #100]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae6:	f001 b8a3 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
 8007aee:	f001 b89f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007afa:	430b      	orrs	r3, r1
 8007afc:	d16e      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b04:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b10:	d03d      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b18:	d85c      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b20:	d014      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b28:	d854      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01f      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b36:	d012      	beq.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007b38:	e04c      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b3a:	bf00      	nop
 8007b3c:	46020c00 	.word	0x46020c00
 8007b40:	0007a120 	.word	0x0007a120
 8007b44:	00f42400 	.word	0x00f42400
 8007b48:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fa61 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5a:	f001 b869 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b5e:	f107 0318 	add.w	r3, r7, #24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff fbc0 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b6c:	f001 b860 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007b70:	4ba7      	ldr	r3, [pc, #668]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7c:	d103      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007b7e:	4ba5      	ldr	r3, [pc, #660]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b82:	f001 b855 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b8a:	f001 b851 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b8e:	4ba0      	ldr	r3, [pc, #640]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d118      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b9a:	4b9d      	ldr	r3, [pc, #628]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007ba6:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0e1b      	lsrs	r3, r3, #24
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	e006      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007bb2:	4b97      	ldr	r3, [pc, #604]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	0e1b      	lsrs	r3, r3, #24
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	4a95      	ldr	r2, [pc, #596]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bc8:	f001 b832 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd0:	f001 b82e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd8:	f001 b82a 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007be4:	430b      	orrs	r3, r1
 8007be6:	d17f      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007be8:	4b89      	ldr	r3, [pc, #548]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d165      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007bfa:	4b85      	ldr	r3, [pc, #532]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c00:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c0c:	d034      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c14:	d853      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c1c:	d00b      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c24:	d84b      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d016      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c32:	d009      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007c34:	e043      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff f9ec 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c44:	f000 bff4 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c48:	f107 0318 	add.w	r3, r7, #24
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fb4b 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c56:	f000 bfeb 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007c5a:	4b6d      	ldr	r3, [pc, #436]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c66:	d103      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007c68:	4b6a      	ldr	r3, [pc, #424]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007c6c:	f000 bfe0 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c74:	f000 bfdc 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c78:	4b65      	ldr	r3, [pc, #404]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d118      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c84:	4b62      	ldr	r3, [pc, #392]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007c90:	4b5f      	ldr	r3, [pc, #380]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c9c:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	0e1b      	lsrs	r3, r3, #24
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	4a5b      	ldr	r2, [pc, #364]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007cb2:	f000 bfbd 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cba:	f000 bfb9 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cc2:	f000 bfb5 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ccc:	d108      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff f9a0 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	f000 bfa8 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce4:	f000 bfa4 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cec:	1e51      	subs	r1, r2, #1
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	d136      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007d04:	f7fe fae2 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 8007d08:	6378      	str	r0, [r7, #52]	; 0x34
 8007d0a:	f000 bf91 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d104      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d14:	f7fe f9a4 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007d18:	6378      	str	r0, [r7, #52]	; 0x34
 8007d1a:	f000 bf89 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007d1e:	4b3c      	ldr	r3, [pc, #240]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007d32:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
 8007d36:	f000 bf7b 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007d3a:	4b35      	ldr	r3, [pc, #212]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d107      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d104      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
 8007d54:	f000 bf6c 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5c:	f000 bf68 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d64:	1e91      	subs	r1, r2, #2
 8007d66:	430b      	orrs	r3, r1
 8007d68:	d136      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d70:	f003 030c 	and.w	r3, r3, #12
 8007d74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d7c:	f7fe fa92 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8007d80:	6378      	str	r0, [r7, #52]	; 0x34
 8007d82:	f000 bf55 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d104      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d8c:	f7fe f968 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007d90:	6378      	str	r0, [r7, #52]	; 0x34
 8007d92:	f000 bf4d 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007d96:	4b1e      	ldr	r3, [pc, #120]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da2:	d106      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d103      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007daa:	4b1c      	ldr	r3, [pc, #112]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
 8007dae:	f000 bf3f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007db2:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d107      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	2b0c      	cmp	r3, #12
 8007dc4:	d104      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
 8007dcc:	f000 bf30 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd4:	f000 bf2c 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	1f11      	subs	r1, r2, #4
 8007dde:	430b      	orrs	r3, r1
 8007de0:	d13f      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007df4:	f7fe fa56 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8007df8:	6378      	str	r0, [r7, #52]	; 0x34
 8007dfa:	f000 bf19 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	2b10      	cmp	r3, #16
 8007e02:	d10d      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e04:	f7fe f92c 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007e08:	6378      	str	r0, [r7, #52]	; 0x34
 8007e0a:	f000 bf11 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e0e:	bf00      	nop
 8007e10:	46020c00 	.word	0x46020c00
 8007e14:	02dc6c00 	.word	0x02dc6c00
 8007e18:	08015b00 	.word	0x08015b00
 8007e1c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007e20:	4ba6      	ldr	r3, [pc, #664]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d103      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007e34:	4ba2      	ldr	r3, [pc, #648]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
 8007e38:	f000 befa 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e3c:	4b9f      	ldr	r3, [pc, #636]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d107      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2b30      	cmp	r3, #48	; 0x30
 8007e4e:	d104      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
 8007e56:	f000 beeb 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5e:	f000 bee7 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e66:	f1a2 0108 	sub.w	r1, r2, #8
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	d136      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007e6e:	4b93      	ldr	r3, [pc, #588]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e80:	f7fe fa10 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8007e84:	6378      	str	r0, [r7, #52]	; 0x34
 8007e86:	f000 bed3 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d104      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e90:	f7fe f8e6 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007e94:	6378      	str	r0, [r7, #52]	; 0x34
 8007e96:	f000 becb 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e9a:	4b88      	ldr	r3, [pc, #544]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea6:	d106      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d103      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007eae:	4b84      	ldr	r3, [pc, #528]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb2:	f000 bebd 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007eb6:	4b81      	ldr	r3, [pc, #516]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec8:	d104      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed0:	f000 beae 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	f000 beaa 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee0:	f1a2 0110 	sub.w	r1, r2, #16
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	d139      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007ee8:	4b74      	ldr	r3, [pc, #464]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007efa:	f7fe f9d3 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8007efe:	6378      	str	r0, [r7, #52]	; 0x34
 8007f00:	f000 be96 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0a:	d104      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f0c:	f7fe f8a8 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007f10:	6378      	str	r0, [r7, #52]	; 0x34
 8007f12:	f000 be8d 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007f16:	4b69      	ldr	r3, [pc, #420]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d107      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f2a:	d103      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007f2c:	4b64      	ldr	r3, [pc, #400]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f30:	f000 be7e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f34:	4b61      	ldr	r3, [pc, #388]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d108      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f48:	d104      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f50:	f000 be6e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
 8007f58:	f000 be6a 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f60:	f1a2 0120 	sub.w	r1, r2, #32
 8007f64:	430b      	orrs	r3, r1
 8007f66:	d158      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007f68:	4b54      	ldr	r3, [pc, #336]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007f7a:	f7fe f9bb 	bl	80062f4 <HAL_RCC_GetPCLK3Freq>
 8007f7e:	6378      	str	r0, [r7, #52]	; 0x34
 8007f80:	f000 be56 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d104      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fe f869 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8007f8e:	6378      	str	r0, [r7, #52]	; 0x34
 8007f90:	f000 be4e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007f94:	4b49      	ldr	r3, [pc, #292]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa0:	d106      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d103      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007fa8:	4b45      	ldr	r3, [pc, #276]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
 8007fac:	f000 be40 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007fb0:	4b42      	ldr	r3, [pc, #264]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d107      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d104      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fca:	f000 be31 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007fce:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d11b      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d118      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fe0:	4b36      	ldr	r3, [pc, #216]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007fec:	4b33      	ldr	r3, [pc, #204]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	0e1b      	lsrs	r3, r3, #24
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	e006      	b.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007ff8:	4b30      	ldr	r3, [pc, #192]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ffe:	041b      	lsls	r3, r3, #16
 8008000:	0e1b      	lsrs	r3, r3, #24
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	4a2f      	ldr	r2, [pc, #188]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
 800800e:	f000 be0f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	f000 be0b 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800801a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800801e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008022:	430b      	orrs	r3, r1
 8008024:	d172      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008026:	4b25      	ldr	r3, [pc, #148]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800802c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008030:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008038:	d104      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800803a:	f7fe f811 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800803e:	6378      	str	r0, [r7, #52]	; 0x34
 8008040:	f000 bdf6 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804a:	d108      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800804c:	f107 0318 	add.w	r3, r7, #24
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff f949 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
 800805a:	f000 bde9 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008064:	f7fe f904 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 8008068:	6378      	str	r0, [r7, #52]	; 0x34
 800806a:	f000 bde1 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008074:	d128      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b20      	cmp	r3, #32
 8008080:	d118      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008082:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800808e:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	0e1b      	lsrs	r3, r3, #24
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	e006      	b.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800809a:	4b08      	ldr	r3, [pc, #32]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800809c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	0e1b      	lsrs	r3, r3, #24
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80080aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
 80080b0:	f000 bdbe 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
 80080b8:	f000 bdba 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80080bc:	46020c00 	.word	0x46020c00
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	08015b00 	.word	0x08015b00
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80080c8:	4baf      	ldr	r3, [pc, #700]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d4:	d107      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080dc:	d103      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80080de:	4bab      	ldr	r3, [pc, #684]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
 80080e2:	f000 bda5 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80080e6:	4ba8      	ldr	r3, [pc, #672]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f2:	d107      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080fa:	d103      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80080fc:	4ba3      	ldr	r3, [pc, #652]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008100:	f000 bd96 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
 8008108:	f000 bd92 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800810c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008110:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008114:	430b      	orrs	r3, r1
 8008116:	d158      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008118:	4b9b      	ldr	r3, [pc, #620]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800811a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	2b04      	cmp	r3, #4
 8008128:	d84b      	bhi.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008169 	.word	0x08008169
 8008134:	08008145 	.word	0x08008145
 8008138:	08008157 	.word	0x08008157
 800813c:	08008173 	.word	0x08008173
 8008140:	0800817d 	.word	0x0800817d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe ff65 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008152:	f000 bd6d 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fa2c 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008164:	f000 bd64 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008168:	f7fe f882 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 800816c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800816e:	f000 bd5f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008172:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008178:	f000 bd5a 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800817c:	4b82      	ldr	r3, [pc, #520]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b20      	cmp	r3, #32
 8008186:	d118      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008188:	4b7f      	ldr	r3, [pc, #508]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008194:	4b7c      	ldr	r3, [pc, #496]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	e006      	b.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80081a0:	4b79      	ldr	r3, [pc, #484]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	4a78      	ldr	r2, [pc, #480]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80081b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081b6:	f000 bd3b 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081be:	f000 bd37 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081c6:	f000 bd33 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80081d2:	430b      	orrs	r3, r1
 80081d4:	d167      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80081d6:	4b6c      	ldr	r3, [pc, #432]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081dc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081e8:	d036      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081f0:	d855      	bhi.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081f8:	d029      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008200:	d84d      	bhi.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008208:	d013      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008210:	d845      	bhi.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821e:	d13e      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fef7 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800822e:	f000 bcff 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008232:	f107 030c 	add.w	r3, r7, #12
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff f9be 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008240:	f000 bcf6 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008244:	f7fe f814 	bl	8006270 <HAL_RCC_GetHCLKFreq>
 8008248:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800824a:	f000 bcf1 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800824e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008254:	f000 bcec 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008258:	4b4b      	ldr	r3, [pc, #300]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b20      	cmp	r3, #32
 8008262:	d118      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008264:	4b48      	ldr	r3, [pc, #288]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008270:	4b45      	ldr	r3, [pc, #276]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	0e1b      	lsrs	r3, r3, #24
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	e006      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800827c:	4b42      	ldr	r3, [pc, #264]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800827e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008282:	041b      	lsls	r3, r3, #16
 8008284:	0e1b      	lsrs	r3, r3, #24
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	4a41      	ldr	r2, [pc, #260]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800828c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008292:	f000 bccd 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800829a:	f000 bcc9 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a2:	f000 bcc5 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80082a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082aa:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80082ae:	430b      	orrs	r3, r1
 80082b0:	d14c      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80082b2:	4b35      	ldr	r3, [pc, #212]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fd ffee 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 80082c8:	6378      	str	r0, [r7, #52]	; 0x34
 80082ca:	f000 bcb1 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d4:	d104      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082d6:	f7fd fec3 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 80082da:	6378      	str	r0, [r7, #52]	; 0x34
 80082dc:	f000 bca8 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80082e0:	4b29      	ldr	r3, [pc, #164]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f4:	d103      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80082f6:	4b25      	ldr	r3, [pc, #148]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
 80082fa:	f000 bc99 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80082fe:	4b22      	ldr	r3, [pc, #136]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b20      	cmp	r3, #32
 8008308:	d11c      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008310:	d118      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008312:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800831e:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	0e1b      	lsrs	r3, r3, #24
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	e006      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800832a:	4b17      	ldr	r3, [pc, #92]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800832c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	0e1b      	lsrs	r3, r3, #24
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	4a15      	ldr	r2, [pc, #84]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800833a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833e:	637b      	str	r3, [r7, #52]	; 0x34
 8008340:	f000 bc76 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
 8008348:	f000 bc72 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800834c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008350:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8008354:	430b      	orrs	r3, r1
 8008356:	d153      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800835a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800835e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008362:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800836a:	f7fd ff9b 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800836e:	6378      	str	r0, [r7, #52]	; 0x34
 8008370:	f000 bc5e 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837a:	d10b      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800837c:	f7fd fe70 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8008380:	6378      	str	r0, [r7, #52]	; 0x34
 8008382:	f000 bc55 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008386:	bf00      	nop
 8008388:	46020c00 	.word	0x46020c00
 800838c:	00f42400 	.word	0x00f42400
 8008390:	08015b00 	.word	0x08015b00
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008394:	4ba1      	ldr	r3, [pc, #644]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a0:	d107      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083a8:	d103      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80083aa:	4b9d      	ldr	r3, [pc, #628]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
 80083ae:	f000 bc3f 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80083b2:	4b9a      	ldr	r3, [pc, #616]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d11c      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083c4:	d118      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083c6:	4b95      	ldr	r3, [pc, #596]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80083d2:	4b92      	ldr	r3, [pc, #584]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	0e1b      	lsrs	r3, r3, #24
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	e006      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80083de:	4b8f      	ldr	r3, [pc, #572]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	0e1b      	lsrs	r3, r3, #24
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	4a8d      	ldr	r2, [pc, #564]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80083ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
 80083f4:	f000 bc1c 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	f000 bc18 	b.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008404:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008408:	430b      	orrs	r3, r1
 800840a:	d151      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800840c:	4b83      	ldr	r3, [pc, #524]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800840e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008416:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2bc0      	cmp	r3, #192	; 0xc0
 800841c:	d024      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	2bc0      	cmp	r3, #192	; 0xc0
 8008422:	d842      	bhi.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2b80      	cmp	r3, #128	; 0x80
 8008428:	d00d      	beq.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d83c      	bhi.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d011      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800843c:	e035      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800843e:	f7fd ff59 	bl	80062f4 <HAL_RCC_GetPCLK3Freq>
 8008442:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008444:	e3f4      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008446:	4b75      	ldr	r3, [pc, #468]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008452:	d102      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8008454:	4b72      	ldr	r3, [pc, #456]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008458:	e3ea      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800845e:	e3e7      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008460:	f7fd fdfe 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8008464:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008466:	e3e3      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008468:	4b6c      	ldr	r3, [pc, #432]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b20      	cmp	r3, #32
 8008472:	d117      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008474:	4b69      	ldr	r3, [pc, #420]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008480:	4b66      	ldr	r3, [pc, #408]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	0e1b      	lsrs	r3, r3, #24
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	e006      	b.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800848c:	4b63      	ldr	r3, [pc, #396]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800848e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	0e1b      	lsrs	r3, r3, #24
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	4a62      	ldr	r2, [pc, #392]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800849c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084a2:	e3c5      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084a8:	e3c2      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ae:	e3bf      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80084b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b4:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80084b8:	430b      	orrs	r3, r1
 80084ba:	d147      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80084bc:	4b57      	ldr	r3, [pc, #348]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084ce:	f7fd fee9 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 80084d2:	6378      	str	r0, [r7, #52]	; 0x34
 80084d4:	e3ac      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084dc:	d103      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80084de:	f7fd fdbf 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 80084e2:	6378      	str	r0, [r7, #52]	; 0x34
 80084e4:	e3a4      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80084e6:	4b4d      	ldr	r3, [pc, #308]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f2:	d106      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fa:	d102      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80084fc:	4b48      	ldr	r3, [pc, #288]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008500:	e396      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008502:	4b46      	ldr	r3, [pc, #280]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b20      	cmp	r3, #32
 800850c:	d11b      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008514:	d117      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008516:	4b41      	ldr	r3, [pc, #260]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8008522:	4b3e      	ldr	r3, [pc, #248]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	0e1b      	lsrs	r3, r3, #24
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	e006      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800852e:	4b3b      	ldr	r3, [pc, #236]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	0e1b      	lsrs	r3, r3, #24
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	4a39      	ldr	r2, [pc, #228]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800853e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008542:	637b      	str	r3, [r7, #52]	; 0x34
 8008544:	e374      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	637b      	str	r3, [r7, #52]	; 0x34
 800854a:	e371      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800854c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008550:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008554:	430b      	orrs	r3, r1
 8008556:	d16a      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008558:	4b30      	ldr	r3, [pc, #192]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800855a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800855e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008562:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	2b00      	cmp	r3, #0
 8008568:	d120      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800856a:	4b2c      	ldr	r3, [pc, #176]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b20      	cmp	r3, #32
 8008574:	d117      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8008582:	4b26      	ldr	r3, [pc, #152]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	e006      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800858e:	4b23      	ldr	r3, [pc, #140]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	0e1b      	lsrs	r3, r3, #24
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	4a21      	ldr	r2, [pc, #132]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
 80085a4:	e344      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
 80085aa:	e341      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80085ac:	4b1b      	ldr	r3, [pc, #108]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ba:	d112      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c2:	d10e      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085c4:	4b15      	ldr	r3, [pc, #84]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085d2:	d102      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80085d4:	23fa      	movs	r3, #250	; 0xfa
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085d8:	e32a      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80085da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085e0:	e326      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ee:	d106      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f6:	d102      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
 80085fc:	e318      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b02      	cmp	r3, #2
 800860a:	d10d      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008612:	d109      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8008614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
 800861a:	e309      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800861c:	46020c00 	.word	0x46020c00
 8008620:	00f42400 	.word	0x00f42400
 8008624:	08015b00 	.word	0x08015b00
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
 800862c:	e300      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008636:	430b      	orrs	r3, r1
 8008638:	d164      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800863a:	4ba2      	ldr	r3, [pc, #648]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800863c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d120      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800864c:	4b9d      	ldr	r3, [pc, #628]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b20      	cmp	r3, #32
 8008656:	d117      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008658:	4b9a      	ldr	r3, [pc, #616]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8008664:	4b97      	ldr	r3, [pc, #604]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	0e1b      	lsrs	r3, r3, #24
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	e006      	b.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008670:	4b94      	ldr	r3, [pc, #592]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	0e1b      	lsrs	r3, r3, #24
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	4a92      	ldr	r2, [pc, #584]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
 8008686:	e2d3      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
 800868c:	e2d0      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800868e:	4b8d      	ldr	r3, [pc, #564]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800869c:	d112      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a4:	d10e      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086a6:	4b87      	ldr	r3, [pc, #540]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b4:	d102      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80086b6:	23fa      	movs	r3, #250	; 0xfa
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086ba:	e2b9      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80086bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086c2:	e2b5      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80086c4:	4b7f      	ldr	r3, [pc, #508]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d0:	d106      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d8:	d102      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80086da:	4b7c      	ldr	r3, [pc, #496]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80086dc:	637b      	str	r3, [r7, #52]	; 0x34
 80086de:	e2a7      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80086e0:	4b78      	ldr	r3, [pc, #480]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d107      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086f4:	d103      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80086f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34
 80086fc:	e298      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
 8008702:	e295      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008708:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800870c:	430b      	orrs	r3, r1
 800870e:	d147      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008710:	4b6c      	ldr	r3, [pc, #432]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008716:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800871a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008722:	f7fd fdbf 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8008726:	6378      	str	r0, [r7, #52]	; 0x34
 8008728:	e282      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800872a:	4b66      	ldr	r3, [pc, #408]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800872c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008738:	d112      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008740:	d10e      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008742:	4b60      	ldr	r3, [pc, #384]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008750:	d102      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8008752:	23fa      	movs	r3, #250	; 0xfa
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008756:	e26b      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008758:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800875e:	e267      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008760:	4b58      	ldr	r3, [pc, #352]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876c:	d106      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008774:	d102      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8008776:	4b55      	ldr	r3, [pc, #340]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
 800877a:	e259      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800877c:	4b51      	ldr	r3, [pc, #324]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800877e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b02      	cmp	r3, #2
 8008788:	d107      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008790:	d103      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8008792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008796:	637b      	str	r3, [r7, #52]	; 0x34
 8008798:	e24a      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
 800879e:	e247      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80087a8:	430b      	orrs	r3, r1
 80087aa:	d12d      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80087ac:	4b45      	ldr	r3, [pc, #276]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087b2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80087b8:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c4:	d105      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80087cc:	4b3f      	ldr	r3, [pc, #252]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
 80087d0:	e22e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d8:	d107      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fc1a 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
 80087e8:	e222      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f2:	f107 0318 	add.w	r3, r7, #24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fd76 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	e216      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
 8008806:	e213      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008810:	430b      	orrs	r3, r1
 8008812:	d15d      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008814:	4b2b      	ldr	r3, [pc, #172]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800881a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008826:	d028      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800882e:	d845      	bhi.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008836:	d013      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800883e:	d83d      	bhi.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800884c:	d004      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800884e:	e035      	b.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008850:	f7fd fd3c 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 8008854:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008856:	e1eb      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008858:	f7fd fc02 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800885c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800885e:	e1e7      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008860:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886c:	d102      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800886e:	4b17      	ldr	r3, [pc, #92]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008872:	e1dd      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008878:	e1da      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b20      	cmp	r3, #32
 8008884:	d117      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	0e1b      	lsrs	r3, r3, #24
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	e006      	b.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	0e1b      	lsrs	r3, r3, #24
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	4a06      	ldr	r2, [pc, #24]	; (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80088ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088b4:	e1bc      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ba:	e1b9      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088c0:	e1b6      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80088c2:	bf00      	nop
 80088c4:	46020c00 	.word	0x46020c00
 80088c8:	08015b00 	.word	0x08015b00
 80088cc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80088d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d4:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80088d8:	430b      	orrs	r3, r1
 80088da:	d156      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80088dc:	4ba5      	ldr	r3, [pc, #660]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088e6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088ee:	d028      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088f6:	d845      	bhi.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088fe:	d013      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008906:	d83d      	bhi.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008914:	d004      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8008916:	e035      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008918:	f7fd fcc4 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800891c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800891e:	e187      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008920:	f7fd fb9e 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8008924:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008926:	e183      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008928:	4b92      	ldr	r3, [pc, #584]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008934:	d102      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8008936:	4b90      	ldr	r3, [pc, #576]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800893a:	e179      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008940:	e176      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008942:	4b8c      	ldr	r3, [pc, #560]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b20      	cmp	r3, #32
 800894c:	d117      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800894e:	4b89      	ldr	r3, [pc, #548]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800895a:	4b86      	ldr	r3, [pc, #536]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	0e1b      	lsrs	r3, r3, #24
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	e006      	b.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8008966:	4b83      	ldr	r3, [pc, #524]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	0e1b      	lsrs	r3, r3, #24
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	4a81      	ldr	r2, [pc, #516]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800897c:	e158      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008982:	e155      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008988:	e152      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800898a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008992:	430b      	orrs	r3, r1
 8008994:	d177      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008996:	4b77      	ldr	r3, [pc, #476]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800899c:	f003 0318 	and.w	r3, r3, #24
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	2b18      	cmp	r3, #24
 80089a6:	d86b      	bhi.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	08008a15 	.word	0x08008a15
 80089b4:	08008a81 	.word	0x08008a81
 80089b8:	08008a81 	.word	0x08008a81
 80089bc:	08008a81 	.word	0x08008a81
 80089c0:	08008a81 	.word	0x08008a81
 80089c4:	08008a81 	.word	0x08008a81
 80089c8:	08008a81 	.word	0x08008a81
 80089cc:	08008a81 	.word	0x08008a81
 80089d0:	08008a1d 	.word	0x08008a1d
 80089d4:	08008a81 	.word	0x08008a81
 80089d8:	08008a81 	.word	0x08008a81
 80089dc:	08008a81 	.word	0x08008a81
 80089e0:	08008a81 	.word	0x08008a81
 80089e4:	08008a81 	.word	0x08008a81
 80089e8:	08008a81 	.word	0x08008a81
 80089ec:	08008a81 	.word	0x08008a81
 80089f0:	08008a25 	.word	0x08008a25
 80089f4:	08008a81 	.word	0x08008a81
 80089f8:	08008a81 	.word	0x08008a81
 80089fc:	08008a81 	.word	0x08008a81
 8008a00:	08008a81 	.word	0x08008a81
 8008a04:	08008a81 	.word	0x08008a81
 8008a08:	08008a81 	.word	0x08008a81
 8008a0c:	08008a81 	.word	0x08008a81
 8008a10:	08008a3f 	.word	0x08008a3f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008a14:	f7fd fc6e 	bl	80062f4 <HAL_RCC_GetPCLK3Freq>
 8008a18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a1a:	e109      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a1c:	f7fd fb20 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8008a20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a22:	e105      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a24:	4b53      	ldr	r3, [pc, #332]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a30:	d102      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008a32:	4b51      	ldr	r3, [pc, #324]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a36:	e0fb      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a3c:	e0f8      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a3e:	4b4d      	ldr	r3, [pc, #308]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d117      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a4a:	4b4a      	ldr	r3, [pc, #296]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008a56:	4b47      	ldr	r3, [pc, #284]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	0e1b      	lsrs	r3, r3, #24
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	e006      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008a62:	4b44      	ldr	r3, [pc, #272]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	4a42      	ldr	r2, [pc, #264]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a78:	e0da      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a7e:	e0d7      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a84:	e0d4      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	d155      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008a92:	4b38      	ldr	r3, [pc, #224]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa4:	d013      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aac:	d844      	bhi.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab4:	d013      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008abc:	d83c      	bhi.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d014      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aca:	d014      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008acc:	e034      	b.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ace:	f107 0318 	add.w	r3, r7, #24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fc08 	bl	80072e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008adc:	e0a8      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fa98 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aec:	e0a0      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008aee:	f7fd fab7 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 8008af2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008af4:	e09c      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008af6:	4b1f      	ldr	r3, [pc, #124]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d117      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b02:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008b0e:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	0e1b      	lsrs	r3, r3, #24
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	e006      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008b1a:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b20:	041b      	lsls	r3, r3, #16
 8008b22:	0e1b      	lsrs	r3, r3, #24
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b30:	e07e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b36:	e07b      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b3c:	e078      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b42:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008b46:	430b      	orrs	r3, r1
 8008b48:	d138      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008b56:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d10d      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10a      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b70:	e05e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008b72:	bf00      	nop
 8008b74:	46020c00 	.word	0x46020c00
 8008b78:	00f42400 	.word	0x00f42400
 8008b7c:	08015b00 	.word	0x08015b00
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008b80:	4b2e      	ldr	r3, [pc, #184]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8e:	d112      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b96:	d10e      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b98:	4b28      	ldr	r3, [pc, #160]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba6:	d102      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008ba8:	23fa      	movs	r3, #250	; 0xfa
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bac:	e040      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008bae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bb4:	e03c      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bba:	e039      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	d131      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008bc8:	4b1c      	ldr	r3, [pc, #112]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008bd4:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be0:	d105      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
 8008bec:	e020      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008bee:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	e012      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c16:	d106      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1e:	d102      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
 8008c24:	e004      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2a:	e001      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3738      	adds	r7, #56	; 0x38
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	46020c00 	.word	0x46020c00
 8008c40:	02dc6c00 	.word	0x02dc6c00
 8008c44:	016e3600 	.word	0x016e3600
 8008c48:	00f42400 	.word	0x00f42400

08008c4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008c54:	4b47      	ldr	r3, [pc, #284]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a46      	ldr	r2, [pc, #280]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c60:	f7f8 fe92 	bl	8001988 <HAL_GetTick>
 8008c64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c66:	e008      	b.n	8008c7a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c68:	f7f8 fe8e 	bl	8001988 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e077      	b.n	8008d6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c7a:	4b3e      	ldr	r3, [pc, #248]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008c86:	4b3b      	ldr	r3, [pc, #236]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6811      	ldr	r1, [r2, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6852      	ldr	r2, [r2, #4]
 8008c9a:	3a01      	subs	r2, #1
 8008c9c:	0212      	lsls	r2, r2, #8
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	4934      	ldr	r1, [pc, #208]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008ca6:	4b33      	ldr	r3, [pc, #204]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008caa:	4b33      	ldr	r3, [pc, #204]	; (8008d78 <RCCEx_PLL2_Config+0x12c>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6892      	ldr	r2, [r2, #8]
 8008cb2:	3a01      	subs	r2, #1
 8008cb4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68d2      	ldr	r2, [r2, #12]
 8008cbc:	3a01      	subs	r2, #1
 8008cbe:	0252      	lsls	r2, r2, #9
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	4311      	orrs	r1, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6912      	ldr	r2, [r2, #16]
 8008cc8:	3a01      	subs	r2, #1
 8008cca:	0412      	lsls	r2, r2, #16
 8008ccc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008cd0:	4311      	orrs	r1, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6952      	ldr	r2, [r2, #20]
 8008cd6:	3a01      	subs	r2, #1
 8008cd8:	0612      	lsls	r2, r2, #24
 8008cda:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	4924      	ldr	r1, [pc, #144]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008ce6:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	f023 020c 	bic.w	r2, r3, #12
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	4920      	ldr	r1, [pc, #128]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	491c      	ldr	r1, [pc, #112]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008d06:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a1a      	ldr	r2, [pc, #104]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d0c:	f023 0310 	bic.w	r3, r3, #16
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d12:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	69d2      	ldr	r2, [r2, #28]
 8008d22:	00d2      	lsls	r2, r2, #3
 8008d24:	4913      	ldr	r1, [pc, #76]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d30:	f043 0310 	orr.w	r3, r3, #16
 8008d34:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a0e      	ldr	r2, [pc, #56]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d40:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d42:	f7f8 fe21 	bl	8001988 <HAL_GetTick>
 8008d46:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d48:	e008      	b.n	8008d5c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d4a:	f7f8 fe1d 	bl	8001988 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e006      	b.n	8008d6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <RCCEx_PLL2_Config+0x128>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f0      	beq.n	8008d4a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008d68:	2300      	movs	r3, #0

}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	46020c00 	.word	0x46020c00
 8008d78:	80800000 	.word	0x80800000

08008d7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008d84:	4b47      	ldr	r3, [pc, #284]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a46      	ldr	r2, [pc, #280]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d90:	f7f8 fdfa 	bl	8001988 <HAL_GetTick>
 8008d94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d96:	e008      	b.n	8008daa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d98:	f7f8 fdf6 	bl	8001988 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e077      	b.n	8008e9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008daa:	4b3e      	ldr	r3, [pc, #248]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008db6:	4b3b      	ldr	r3, [pc, #236]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6811      	ldr	r1, [r2, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6852      	ldr	r2, [r2, #4]
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	0212      	lsls	r2, r2, #8
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	4934      	ldr	r1, [pc, #208]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	630b      	str	r3, [r1, #48]	; 0x30
 8008dd6:	4b33      	ldr	r3, [pc, #204]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dda:	4b33      	ldr	r3, [pc, #204]	; (8008ea8 <RCCEx_PLL3_Config+0x12c>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6892      	ldr	r2, [r2, #8]
 8008de2:	3a01      	subs	r2, #1
 8008de4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	68d2      	ldr	r2, [r2, #12]
 8008dec:	3a01      	subs	r2, #1
 8008dee:	0252      	lsls	r2, r2, #9
 8008df0:	b292      	uxth	r2, r2
 8008df2:	4311      	orrs	r1, r2
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6912      	ldr	r2, [r2, #16]
 8008df8:	3a01      	subs	r2, #1
 8008dfa:	0412      	lsls	r2, r2, #16
 8008dfc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008e00:	4311      	orrs	r1, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6952      	ldr	r2, [r2, #20]
 8008e06:	3a01      	subs	r2, #1
 8008e08:	0612      	lsls	r2, r2, #24
 8008e0a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	4924      	ldr	r1, [pc, #144]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008e16:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	f023 020c 	bic.w	r2, r3, #12
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	4920      	ldr	r1, [pc, #128]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	491c      	ldr	r1, [pc, #112]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008e36:	4b1b      	ldr	r3, [pc, #108]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e3c:	f023 0310 	bic.w	r3, r3, #16
 8008e40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e42:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	69d2      	ldr	r2, [r2, #28]
 8008e52:	00d2      	lsls	r2, r2, #3
 8008e54:	4913      	ldr	r1, [pc, #76]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	4a11      	ldr	r2, [pc, #68]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e60:	f043 0310 	orr.w	r3, r3, #16
 8008e64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e72:	f7f8 fd89 	bl	8001988 <HAL_GetTick>
 8008e76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e78:	e008      	b.n	8008e8c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e7a:	f7f8 fd85 	bl	8001988 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <RCCEx_PLL3_Config+0x128>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	46020c00 	.word	0x46020c00
 8008ea8:	80800000 	.word	0x80800000

08008eac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d071      	beq.n	8008fa2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f8 fa9c 	bl	8001410 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ee0:	4b32      	ldr	r3, [pc, #200]	; (8008fac <HAL_RTC_Init+0x100>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	d051      	beq.n	8008f90 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eec:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <HAL_RTC_Init+0x100>)
 8008eee:	22ca      	movs	r2, #202	; 0xca
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <HAL_RTC_Init+0x100>)
 8008ef4:	2253      	movs	r2, #83	; 0x53
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa6d 	bl	80093d8 <RTC_EnterInitMode>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d13f      	bne.n	8008f88 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008f08:	4b28      	ldr	r3, [pc, #160]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	4a27      	ldr	r2, [pc, #156]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f0e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f16:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008f18:	4b24      	ldr	r3, [pc, #144]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6859      	ldr	r1, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4319      	orrs	r1, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	491f      	ldr	r1, [pc, #124]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	041b      	lsls	r3, r3, #16
 8008f3c:	491b      	ldr	r1, [pc, #108]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008f42:	4b1a      	ldr	r3, [pc, #104]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f52:	430b      	orrs	r3, r1
 8008f54:	4915      	ldr	r1, [pc, #84]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa78 	bl	8009450 <RTC_ExitInitMode>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10e      	bne.n	8008f88 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a19      	ldr	r1, [r3, #32]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4319      	orrs	r1, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	430b      	orrs	r3, r1
 8008f82:	490a      	ldr	r1, [pc, #40]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f88:	4b08      	ldr	r3, [pc, #32]	; (8008fac <HAL_RTC_Init+0x100>)
 8008f8a:	22ff      	movs	r2, #255	; 0xff
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f8e:	e001      	b.n	8008f94 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	46007800 	.word	0x46007800

08008fb0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_RTC_SetTime+0x1a>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e088      	b.n	80090dc <HAL_RTC_SetTime+0x12c>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fda:	4b42      	ldr	r3, [pc, #264]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8008fdc:	22ca      	movs	r2, #202	; 0xca
 8008fde:	625a      	str	r2, [r3, #36]	; 0x24
 8008fe0:	4b40      	ldr	r3, [pc, #256]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8008fe2:	2253      	movs	r2, #83	; 0x53
 8008fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f9f6 	bl	80093d8 <RTC_EnterInitMode>
 8008fec:	4603      	mov	r3, r0
 8008fee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008ff0:	7cfb      	ldrb	r3, [r7, #19]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d163      	bne.n	80090be <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008ff6:	4b3b      	ldr	r3, [pc, #236]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009002:	d057      	beq.n	80090b4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d125      	bne.n	8009056 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800900a:	4b36      	ldr	r3, [pc, #216]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fa53 	bl	80094cc <RTC_ByteToBcd2>
 8009026:	4603      	mov	r3, r0
 8009028:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fa4c 	bl	80094cc <RTC_ByteToBcd2>
 8009034:	4603      	mov	r3, r0
 8009036:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009038:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	789b      	ldrb	r3, [r3, #2]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fa44 	bl	80094cc <RTC_ByteToBcd2>
 8009044:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009046:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	78db      	ldrb	r3, [r3, #3]
 800904e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e017      	b.n	8009086 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009056:	4b23      	ldr	r3, [pc, #140]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009074:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800907a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	78db      	ldrb	r3, [r3, #3]
 8009080:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8009086:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800908e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009092:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8009094:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 800909a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800909e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80090a0:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	68d9      	ldr	r1, [r3, #12]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	490d      	ldr	r1, [pc, #52]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f9cb 	bl	8009450 <RTC_ExitInitMode>
 80090ba:	4603      	mov	r3, r0
 80090bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <HAL_RTC_SetTime+0x134>)
 80090c0:	22ff      	movs	r2, #255	; 0xff
 80090c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80090c4:	7cfb      	ldrb	r3, [r7, #19]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80090da:	7cfb      	ldrb	r3, [r7, #19]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd90      	pop	{r4, r7, pc}
 80090e4:	46007800 	.word	0x46007800

080090e8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80090f4:	4b34      	ldr	r3, [pc, #208]	; (80091c8 <HAL_RTC_GetTime+0xe0>)
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80090fc:	4b32      	ldr	r3, [pc, #200]	; (80091c8 <HAL_RTC_GetTime+0xe0>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009108:	d04a      	beq.n	80091a0 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800910a:	4b2f      	ldr	r3, [pc, #188]	; (80091c8 <HAL_RTC_GetTime+0xe0>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8009116:	4b2c      	ldr	r3, [pc, #176]	; (80091c8 <HAL_RTC_GetTime+0xe0>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800911e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009122:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	0c1b      	lsrs	r3, r3, #16
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800912e:	b2da      	uxtb	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913e:	b2da      	uxtb	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914c:	b2da      	uxtb	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	0d9b      	lsrs	r3, r3, #22
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	b2da      	uxtb	r2, r3
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d12a      	bne.n	80091be <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f9cd 	bl	800950c <RTC_Bcd2ToByte>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f9c4 	bl	800950c <RTC_Bcd2ToByte>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	789b      	ldrb	r3, [r3, #2]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f9bb 	bl	800950c <RTC_Bcd2ToByte>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	709a      	strb	r2, [r3, #2]
 800919e:	e00e      	b.n	80091be <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2200      	movs	r2, #0
 80091aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	46007800 	.word	0x46007800

080091cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_RTC_SetDate+0x1a>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e071      	b.n	80092ca <HAL_RTC_SetDate+0xfe>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2202      	movs	r2, #2
 80091f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10e      	bne.n	800921a <HAL_RTC_SetDate+0x4e>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	785b      	ldrb	r3, [r3, #1]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	f023 0310 	bic.w	r3, r3, #16
 8009210:	b2db      	uxtb	r3, r3
 8009212:	330a      	adds	r3, #10
 8009214:	b2da      	uxtb	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d11c      	bne.n	800925a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	78db      	ldrb	r3, [r3, #3]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f951 	bl	80094cc <RTC_ByteToBcd2>
 800922a:	4603      	mov	r3, r0
 800922c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 f94a 	bl	80094cc <RTC_ByteToBcd2>
 8009238:	4603      	mov	r3, r0
 800923a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800923c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	789b      	ldrb	r3, [r3, #2]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f942 	bl	80094cc <RTC_ByteToBcd2>
 8009248:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800924a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e00e      	b.n	8009278 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	78db      	ldrb	r3, [r3, #3]
 800925e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009266:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800926c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009274:	4313      	orrs	r3, r2
 8009276:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009278:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <HAL_RTC_SetDate+0x108>)
 800927a:	22ca      	movs	r2, #202	; 0xca
 800927c:	625a      	str	r2, [r3, #36]	; 0x24
 800927e:	4b15      	ldr	r3, [pc, #84]	; (80092d4 <HAL_RTC_SetDate+0x108>)
 8009280:	2253      	movs	r2, #83	; 0x53
 8009282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f8a7 	bl	80093d8 <RTC_EnterInitMode>
 800928a:	4603      	mov	r3, r0
 800928c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800928e:	7cfb      	ldrb	r3, [r7, #19]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009294:	4a0f      	ldr	r2, [pc, #60]	; (80092d4 <HAL_RTC_SetDate+0x108>)
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800929c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 f8d4 	bl	8009450 <RTC_ExitInitMode>
 80092a8:	4603      	mov	r3, r0
 80092aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ac:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <HAL_RTC_SetDate+0x108>)
 80092ae:	22ff      	movs	r2, #255	; 0xff
 80092b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80092b2:	7cfb      	ldrb	r3, [r7, #19]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80092c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd90      	pop	{r4, r7, pc}
 80092d2:	bf00      	nop
 80092d4:	46007800 	.word	0x46007800

080092d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80092e4:	4b22      	ldr	r3, [pc, #136]	; (8009370 <HAL_RTC_GetDate+0x98>)
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	0c1b      	lsrs	r3, r3, #16
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	b2da      	uxtb	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009314:	b2da      	uxtb	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	0b5b      	lsrs	r3, r3, #13
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	b2da      	uxtb	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11a      	bne.n	8009366 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	78db      	ldrb	r3, [r3, #3]
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f8e9 	bl	800950c <RTC_Bcd2ToByte>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8e0 	bl	800950c <RTC_Bcd2ToByte>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	789b      	ldrb	r3, [r3, #2]
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f8d7 	bl	800950c <RTC_Bcd2ToByte>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	46007800 	.word	0x46007800

08009374 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800937c:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <HAL_RTC_WaitForSynchro+0x60>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <HAL_RTC_WaitForSynchro+0x60>)
 8009382:	f023 0320 	bic.w	r3, r3, #32
 8009386:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009388:	f7f8 fafe 	bl	8001988 <HAL_GetTick>
 800938c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800938e:	e013      	b.n	80093b8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009390:	f7f8 fafa 	bl	8001988 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800939e:	d90b      	bls.n	80093b8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <HAL_RTC_WaitForSynchro+0x60>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10c      	bne.n	80093c6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2203      	movs	r2, #3
 80093b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e008      	b.n	80093ca <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <HAL_RTC_WaitForSynchro+0x60>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0320 	and.w	r3, r3, #32
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0e5      	beq.n	8009390 <HAL_RTC_WaitForSynchro+0x1c>
 80093c4:	e000      	b.n	80093c8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80093c6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	46007800 	.word	0x46007800

080093d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093e4:	4b19      	ldr	r3, [pc, #100]	; (800944c <RTC_EnterInitMode+0x74>)
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d128      	bne.n	8009442 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <RTC_EnterInitMode+0x74>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4a15      	ldr	r2, [pc, #84]	; (800944c <RTC_EnterInitMode+0x74>)
 80093f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80093fc:	f7f8 fac4 	bl	8001988 <HAL_GetTick>
 8009400:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009402:	e013      	b.n	800942c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009404:	f7f8 fac0 	bl	8001988 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009412:	d90b      	bls.n	800942c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <RTC_EnterInitMode+0x74>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10f      	bne.n	8009440 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2203      	movs	r2, #3
 8009428:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800942c:	4b07      	ldr	r3, [pc, #28]	; (800944c <RTC_EnterInitMode+0x74>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <RTC_EnterInitMode+0x6a>
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	2b03      	cmp	r3, #3
 800943c:	d1e2      	bne.n	8009404 <RTC_EnterInitMode+0x2c>
 800943e:	e000      	b.n	8009442 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009440:	bf00      	nop
        }
      }
    }
  }

  return status;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	46007800 	.word	0x46007800

08009450 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <RTC_ExitInitMode+0x78>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009466:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009468:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <RTC_ExitInitMode+0x78>)
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10c      	bne.n	800948e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff7d 	bl	8009374 <HAL_RTC_WaitForSynchro>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01e      	beq.n	80094be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2203      	movs	r2, #3
 8009484:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	e017      	b.n	80094be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800948e:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009494:	f023 0320 	bic.w	r3, r3, #32
 8009498:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff6a 	bl	8009374 <HAL_RTC_WaitForSynchro>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <RTC_ExitInitMode+0x78>)
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <RTC_ExitInitMode+0x78>)
 80094b8:	f043 0320 	orr.w	r3, r3, #32
 80094bc:	6193      	str	r3, [r2, #24]
  }
  return status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	46007800 	.word	0x46007800

080094cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80094de:	e005      	b.n	80094ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	3b0a      	subs	r3, #10
 80094ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	d8f6      	bhi.n	80094e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	b2db      	uxtb	r3, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	091b      	lsrs	r3, r3, #4
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	f003 030f 	and.w	r3, r3, #15
 8009532:	b2db      	uxtb	r3, r3
 8009534:	4413      	add	r3, r2
 8009536:	b2db      	uxtb	r3, r3
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009558:	2b01      	cmp	r3, #1
 800955a:	d101      	bne.n	8009560 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800955c:	2302      	movs	r3, #2
 800955e:	e063      	b.n	8009628 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009570:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009572:	22ca      	movs	r2, #202	; 0xca
 8009574:	625a      	str	r2, [r3, #36]	; 0x24
 8009576:	4b2e      	ldr	r3, [pc, #184]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009578:	2253      	movs	r2, #83	; 0x53
 800957a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800957c:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	4a2b      	ldr	r2, [pc, #172]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009586:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009588:	4b29      	ldr	r3, [pc, #164]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800958a:	2204      	movs	r2, #4
 800958c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800958e:	4b28      	ldr	r3, [pc, #160]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d126      	bne.n	80095e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 800959a:	f7f8 f9f5 	bl	8001988 <HAL_GetTick>
 800959e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80095a0:	e01a      	b.n	80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095a2:	f7f8 f9f1 	bl	8001988 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b0:	d912      	bls.n	80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80095b2:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d113      	bne.n	80095e6 <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095be:	4b1c      	ldr	r3, [pc, #112]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095c0:	22ff      	movs	r2, #255	; 0xff
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e027      	b.n	8009628 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80095d8:	4b15      	ldr	r3, [pc, #84]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0de      	beq.n	80095a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80095e4:	e000      	b.n	80095e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80095e6:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	041a      	lsls	r2, r3, #16
 80095ec:	4910      	ldr	r1, [pc, #64]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80095f4:	4b0e      	ldr	r3, [pc, #56]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f023 0207 	bic.w	r2, r3, #7
 80095fc:	490c      	ldr	r1, [pc, #48]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4313      	orrs	r3, r2
 8009602:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	4a09      	ldr	r2, [pc, #36]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800960a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800960e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009612:	22ff      	movs	r2, #255	; 0xff
 8009614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	46007800 	.word	0x46007800

08009634 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8009646:	2302      	movs	r3, #2
 8009648:	e046      	b.n	80096d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800965c:	22ca      	movs	r2, #202	; 0xca
 800965e:	625a      	str	r2, [r3, #36]	; 0x24
 8009660:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009662:	2253      	movs	r2, #83	; 0x53
 8009664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8009666:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800966c:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009670:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8009672:	f7f8 f989 	bl	8001988 <HAL_GetTick>
 8009676:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009678:	e01a      	b.n	80096b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800967a:	f7f8 f985 	bl	8001988 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009688:	d912      	bls.n	80096b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d113      	bne.n	80096be <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009698:	22ff      	movs	r2, #255	; 0xff
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2203      	movs	r2, #3
 80096a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e013      	b.n	80096d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0de      	beq.n	800967a <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 80096bc:	e000      	b.n	80096c0 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 80096be:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096c2:	22ff      	movs	r2, #255	; 0xff
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	46007800 	.word	0x46007800

080096e4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80096ec:	4b09      	ldr	r3, [pc, #36]	; (8009714 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80096ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80096fa:	2204      	movs	r2, #4
 80096fc:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f7 fdc8 	bl	8001294 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	46007800 	.word	0x46007800

08009718 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4910      	ldr	r1, [pc, #64]	; (800976c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800972c:	4313      	orrs	r3, r2
 800972e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	431a      	orrs	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	490c      	ldr	r1, [pc, #48]	; (8009770 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009740:	4313      	orrs	r3, r2
 8009742:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6919      	ldr	r1, [r3, #16]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	041b      	lsls	r3, r3, #16
 8009756:	430b      	orrs	r3, r1
 8009758:	4905      	ldr	r1, [pc, #20]	; (8009770 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800975a:	4313      	orrs	r3, r2
 800975c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	46007800 	.word	0x46007800
 8009770:	46007c00 	.word	0x46007c00

08009774 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e0fb      	b.n	800997e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a7f      	ldr	r2, [pc, #508]	; (8009988 <HAL_SPI_Init+0x214>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_SPI_Init+0x26>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a7d      	ldr	r2, [pc, #500]	; (800998c <HAL_SPI_Init+0x218>)
 8009796:	4293      	cmp	r3, r2
 8009798:	e000      	b.n	800979c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800979a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a78      	ldr	r2, [pc, #480]	; (8009988 <HAL_SPI_Init+0x214>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d004      	beq.n	80097b6 <HAL_SPI_Init+0x42>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a76      	ldr	r2, [pc, #472]	; (800998c <HAL_SPI_Init+0x218>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d105      	bne.n	80097c2 <HAL_SPI_Init+0x4e>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	d901      	bls.n	80097c2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0dd      	b.n	800997e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fbd8 	bl	8009f78 <SPI_GetPacketSize>
 80097c8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a6e      	ldr	r2, [pc, #440]	; (8009988 <HAL_SPI_Init+0x214>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_SPI_Init+0x6a>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a6c      	ldr	r2, [pc, #432]	; (800998c <HAL_SPI_Init+0x218>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d102      	bne.n	80097e4 <HAL_SPI_Init+0x70>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d816      	bhi.n	8009812 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097e8:	4a69      	ldr	r2, [pc, #420]	; (8009990 <HAL_SPI_Init+0x21c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00e      	beq.n	800980c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a68      	ldr	r2, [pc, #416]	; (8009994 <HAL_SPI_Init+0x220>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d009      	beq.n	800980c <HAL_SPI_Init+0x98>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a66      	ldr	r2, [pc, #408]	; (8009998 <HAL_SPI_Init+0x224>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d004      	beq.n	800980c <HAL_SPI_Init+0x98>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a65      	ldr	r2, [pc, #404]	; (800999c <HAL_SPI_Init+0x228>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d104      	bne.n	8009816 <HAL_SPI_Init+0xa2>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b10      	cmp	r3, #16
 8009810:	d901      	bls.n	8009816 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e0b3      	b.n	800997e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7f7 fe3c 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009852:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800985c:	d119      	bne.n	8009892 <HAL_SPI_Init+0x11e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009866:	d103      	bne.n	8009870 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10c      	bne.n	8009892 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800987c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009880:	d107      	bne.n	8009892 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009890:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <HAL_SPI_Init+0x14a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b06      	cmp	r3, #6
 80098a4:	d90b      	bls.n	80098be <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	e007      	b.n	80098ce <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69da      	ldr	r2, [r3, #28]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	431a      	orrs	r2, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e0:	ea42 0103 	orr.w	r1, r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800993a:	ea42 0103 	orr.w	r1, r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	46002000 	.word	0x46002000
 800998c:	56002000 	.word	0x56002000
 8009990:	40013000 	.word	0x40013000
 8009994:	50013000 	.word	0x50013000
 8009998:	40003800 	.word	0x40003800
 800999c:	50003800 	.word	0x50003800

080099a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3320      	adds	r3, #32
 80099b6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d101      	bne.n	80099ca <HAL_SPI_Transmit+0x2a>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e203      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099d2:	f7f7 ffd9 	bl	8001988 <HAL_GetTick>
 80099d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d007      	beq.n	80099f4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
 80099e6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80099f0:	7efb      	ldrb	r3, [r7, #27]
 80099f2:	e1ee      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <HAL_SPI_Transmit+0x60>
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d107      	bne.n	8009a10 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009a0c:	7efb      	ldrb	r3, [r7, #27]
 8009a0e:	e1e0      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2203      	movs	r2, #3
 8009a14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	88fa      	ldrh	r2, [r7, #6]
 8009a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	88fa      	ldrh	r2, [r7, #6]
 8009a32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009a60:	d108      	bne.n	8009a74 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e009      	b.n	8009a88 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009a86:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	0c1b      	lsrs	r3, r3, #16
 8009a90:	041b      	lsls	r3, r3, #16
 8009a92:	88f9      	ldrh	r1, [r7, #6]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	430b      	orrs	r3, r1
 8009a9a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10c      	bne.n	8009ad4 <HAL_SPI_Transmit+0x134>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac2:	d107      	bne.n	8009ad4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b0f      	cmp	r3, #15
 8009ada:	d95b      	bls.n	8009b94 <HAL_SPI_Transmit+0x1f4>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a8f      	ldr	r2, [pc, #572]	; (8009d20 <HAL_SPI_Transmit+0x380>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d04f      	beq.n	8009b86 <HAL_SPI_Transmit+0x1e6>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a8e      	ldr	r2, [pc, #568]	; (8009d24 <HAL_SPI_Transmit+0x384>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d04a      	beq.n	8009b86 <HAL_SPI_Transmit+0x1e6>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a8c      	ldr	r2, [pc, #560]	; (8009d28 <HAL_SPI_Transmit+0x388>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d045      	beq.n	8009b86 <HAL_SPI_Transmit+0x1e6>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a8b      	ldr	r2, [pc, #556]	; (8009d2c <HAL_SPI_Transmit+0x38c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d147      	bne.n	8009b94 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b04:	e03f      	b.n	8009b86 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d114      	bne.n	8009b3e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b3c:	e023      	b.n	8009b86 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b3e:	f7f7 ff23 	bl	8001988 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d803      	bhi.n	8009b56 <HAL_SPI_Transmit+0x1b6>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b54:	d102      	bne.n	8009b5c <HAL_SPI_Transmit+0x1bc>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d114      	bne.n	8009b86 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f93d 	bl	8009ddc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e125      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1b9      	bne.n	8009b06 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009b92:	e0f8      	b.n	8009d86 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b07      	cmp	r3, #7
 8009b9a:	f240 80ed 	bls.w	8009d78 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b9e:	e05d      	b.n	8009c5c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d132      	bne.n	8009c14 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d918      	bls.n	8009bec <HAL_SPI_Transmit+0x24c>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d014      	beq.n	8009bec <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b02      	subs	r3, #2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009bea:	e037      	b.n	8009c5c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf0:	881a      	ldrh	r2, [r3, #0]
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bfa:	1c9a      	adds	r2, r3, #2
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c12:	e023      	b.n	8009c5c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c14:	f7f7 feb8 	bl	8001988 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d803      	bhi.n	8009c2c <HAL_SPI_Transmit+0x28c>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d102      	bne.n	8009c32 <HAL_SPI_Transmit+0x292>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d114      	bne.n	8009c5c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f8d2 	bl	8009ddc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e0ba      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d19b      	bne.n	8009ba0 <HAL_SPI_Transmit+0x200>
 8009c68:	e08d      	b.n	8009d86 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d15b      	bne.n	8009d30 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d918      	bls.n	8009cb6 <HAL_SPI_Transmit+0x316>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d914      	bls.n	8009cb6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c9c:	1d1a      	adds	r2, r3, #4
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b04      	subs	r3, #4
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cb4:	e060      	b.n	8009d78 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d917      	bls.n	8009cf2 <HAL_SPI_Transmit+0x352>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d013      	beq.n	8009cf2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cce:	881a      	ldrh	r2, [r3, #0]
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd8:	1c9a      	adds	r2, r3, #2
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b02      	subs	r3, #2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cf0:	e042      	b.n	8009d78 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3320      	adds	r3, #32
 8009cfc:	7812      	ldrb	r2, [r2, #0]
 8009cfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d1c:	e02c      	b.n	8009d78 <HAL_SPI_Transmit+0x3d8>
 8009d1e:	bf00      	nop
 8009d20:	40013000 	.word	0x40013000
 8009d24:	50013000 	.word	0x50013000
 8009d28:	40003800 	.word	0x40003800
 8009d2c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d30:	f7f7 fe2a 	bl	8001988 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d803      	bhi.n	8009d48 <HAL_SPI_Transmit+0x3a8>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d102      	bne.n	8009d4e <HAL_SPI_Transmit+0x3ae>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d114      	bne.n	8009d78 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 f844 	bl	8009ddc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e02c      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af72 	bne.w	8009c6a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2108      	movs	r1, #8
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f8c3 	bl	8009f1c <SPI_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d007      	beq.n	8009dac <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da2:	f043 0220 	orr.w	r2, r3, #32
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f815 	bl	8009ddc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e000      	b.n	8009dd2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009dd0:	7efb      	ldrb	r3, [r7, #27]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop

08009ddc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0208 	orr.w	r2, r2, #8
 8009dfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0210 	orr.w	r2, r2, #16
 8009e0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009e2a:	f023 0303 	bic.w	r3, r3, #3
 8009e2e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009e3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d014      	beq.n	8009e76 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00f      	beq.n	8009e76 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0220 	orr.w	r2, r2, #32
 8009e74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d014      	beq.n	8009eac <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00f      	beq.n	8009eac <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e92:	f043 0204 	orr.w	r2, r3, #4
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eaa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00f      	beq.n	8009ed6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ebc:	f043 0201 	orr.w	r2, r3, #1
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699a      	ldr	r2, [r3, #24]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ed4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00f      	beq.n	8009f00 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee6:	f043 0208 	orr.w	r2, r3, #8
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009efe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009f10:	bf00      	nop
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f2c:	e010      	b.n	8009f50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f2e:	f7f7 fd2b 	bl	8001988 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d803      	bhi.n	8009f46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d102      	bne.n	8009f4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e00f      	b.n	8009f70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695a      	ldr	r2, [r3, #20]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d0df      	beq.n	8009f2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f84:	095b      	lsrs	r3, r3, #5
 8009f86:	3301      	adds	r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	3307      	adds	r3, #7
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d12e      	bne.n	800a022 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e028      	b.n	800a024 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0201 	bic.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009ffe:	ea42 0103 	orr.w	r1, r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e000      	b.n	800a024 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
  }
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e049      	b.n	800a0d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f841 	bl	800a0de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f000 fa88 	bl	800a584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d001      	beq.n	800a10c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e072      	b.n	800a1f2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a35      	ldr	r2, [pc, #212]	; (800a200 <HAL_TIM_Base_Start_IT+0x10c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d040      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a34      	ldr	r2, [pc, #208]	; (800a204 <HAL_TIM_Base_Start_IT+0x110>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d03b      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a140:	d036      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a14a:	d031      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a2d      	ldr	r2, [pc, #180]	; (800a208 <HAL_TIM_Base_Start_IT+0x114>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d02c      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <HAL_TIM_Base_Start_IT+0x118>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d027      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a2a      	ldr	r2, [pc, #168]	; (800a210 <HAL_TIM_Base_Start_IT+0x11c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d022      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a29      	ldr	r2, [pc, #164]	; (800a214 <HAL_TIM_Base_Start_IT+0x120>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d01d      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a27      	ldr	r2, [pc, #156]	; (800a218 <HAL_TIM_Base_Start_IT+0x124>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d018      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a26      	ldr	r2, [pc, #152]	; (800a21c <HAL_TIM_Base_Start_IT+0x128>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a24      	ldr	r2, [pc, #144]	; (800a220 <HAL_TIM_Base_Start_IT+0x12c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00e      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a23      	ldr	r2, [pc, #140]	; (800a224 <HAL_TIM_Base_Start_IT+0x130>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d009      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	; (800a228 <HAL_TIM_Base_Start_IT+0x134>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xbc>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a20      	ldr	r2, [pc, #128]	; (800a22c <HAL_TIM_Base_Start_IT+0x138>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d115      	bne.n	800a1dc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <HAL_TIM_Base_Start_IT+0x13c>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b06      	cmp	r3, #6
 800a1c0:	d015      	beq.n	800a1ee <HAL_TIM_Base_Start_IT+0xfa>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c8:	d011      	beq.n	800a1ee <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f042 0201 	orr.w	r2, r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1da:	e008      	b.n	800a1ee <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	e000      	b.n	800a1f0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40012c00 	.word	0x40012c00
 800a204:	50012c00 	.word	0x50012c00
 800a208:	40000400 	.word	0x40000400
 800a20c:	50000400 	.word	0x50000400
 800a210:	40000800 	.word	0x40000800
 800a214:	50000800 	.word	0x50000800
 800a218:	40000c00 	.word	0x40000c00
 800a21c:	50000c00 	.word	0x50000c00
 800a220:	40013400 	.word	0x40013400
 800a224:	50013400 	.word	0x50013400
 800a228:	40014000 	.word	0x40014000
 800a22c:	50014000 	.word	0x50014000
 800a230:	00010007 	.word	0x00010007

0800a234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b02      	cmp	r3, #2
 800a248:	d122      	bne.n	800a290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b02      	cmp	r3, #2
 800a256:	d11b      	bne.n	800a290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f06f 0202 	mvn.w	r2, #2
 800a260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	f003 0303 	and.w	r3, r3, #3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f965 	bl	800a546 <HAL_TIM_IC_CaptureCallback>
 800a27c:	e005      	b.n	800a28a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f957 	bl	800a532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f968 	bl	800a55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d122      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d11b      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f06f 0204 	mvn.w	r2, #4
 800a2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f93b 	bl	800a546 <HAL_TIM_IC_CaptureCallback>
 800a2d0:	e005      	b.n	800a2de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f92d 	bl	800a532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f93e 	bl	800a55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d122      	bne.n	800a338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f003 0308 	and.w	r3, r3, #8
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0208 	mvn.w	r2, #8
 800a308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2204      	movs	r2, #4
 800a30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f911 	bl	800a546 <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f903 	bl	800a532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f914 	bl	800a55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b10      	cmp	r3, #16
 800a344:	d122      	bne.n	800a38c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0310 	and.w	r3, r3, #16
 800a350:	2b10      	cmp	r3, #16
 800a352:	d11b      	bne.n	800a38c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0210 	mvn.w	r2, #16
 800a35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2208      	movs	r2, #8
 800a362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f8e7 	bl	800a546 <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f8d9 	bl	800a532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f8ea 	bl	800a55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b01      	cmp	r3, #1
 800a398:	d10e      	bne.n	800a3b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d107      	bne.n	800a3b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0201 	mvn.w	r2, #1
 800a3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7f6 ff7a 	bl	80012ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	d10e      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d0:	2b80      	cmp	r3, #128	; 0x80
 800a3d2:	d107      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f9d4 	bl	800a78c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f2:	d10e      	bne.n	800a412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fe:	2b80      	cmp	r3, #128	; 0x80
 800a400:	d107      	bne.n	800a412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f9c7 	bl	800a7a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d10e      	bne.n	800a43e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d107      	bne.n	800a43e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f898 	bl	800a56e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d10e      	bne.n	800a46a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b20      	cmp	r3, #32
 800a458:	d107      	bne.n	800a46a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f06f 0220 	mvn.w	r2, #32
 800a462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f987 	bl	800a778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a478:	d10f      	bne.n	800a49a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a488:	d107      	bne.n	800a49a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f98d 	bl	800a7b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4a8:	d10f      	bne.n	800a4ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4b8:	d107      	bne.n	800a4ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f97f 	bl	800a7c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4d8:	d10f      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4e8:	d107      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f971 	bl	800a7dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a508:	d10f      	bne.n	800a52a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a518:	d107      	bne.n	800a52a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f963 	bl	800a7f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a532:	b480      	push	{r7}
 800a534:	b083      	sub	sp, #12
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a54e:	bf00      	nop
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
	...

0800a584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a68      	ldr	r2, [pc, #416]	; (800a738 <TIM_Base_SetConfig+0x1b4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d02b      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a67      	ldr	r2, [pc, #412]	; (800a73c <TIM_Base_SetConfig+0x1b8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d027      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5aa:	d023      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5b2:	d01f      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a62      	ldr	r2, [pc, #392]	; (800a740 <TIM_Base_SetConfig+0x1bc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d01b      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a61      	ldr	r2, [pc, #388]	; (800a744 <TIM_Base_SetConfig+0x1c0>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d017      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a60      	ldr	r2, [pc, #384]	; (800a748 <TIM_Base_SetConfig+0x1c4>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d013      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a5f      	ldr	r2, [pc, #380]	; (800a74c <TIM_Base_SetConfig+0x1c8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00f      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a5e      	ldr	r2, [pc, #376]	; (800a750 <TIM_Base_SetConfig+0x1cc>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00b      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a5d      	ldr	r2, [pc, #372]	; (800a754 <TIM_Base_SetConfig+0x1d0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d007      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a5c      	ldr	r2, [pc, #368]	; (800a758 <TIM_Base_SetConfig+0x1d4>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d003      	beq.n	800a5f4 <TIM_Base_SetConfig+0x70>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a5b      	ldr	r2, [pc, #364]	; (800a75c <TIM_Base_SetConfig+0x1d8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d108      	bne.n	800a606 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a4b      	ldr	r2, [pc, #300]	; (800a738 <TIM_Base_SetConfig+0x1b4>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d043      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a4a      	ldr	r2, [pc, #296]	; (800a73c <TIM_Base_SetConfig+0x1b8>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d03f      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61c:	d03b      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a624:	d037      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a45      	ldr	r2, [pc, #276]	; (800a740 <TIM_Base_SetConfig+0x1bc>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d033      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a44      	ldr	r2, [pc, #272]	; (800a744 <TIM_Base_SetConfig+0x1c0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d02f      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a43      	ldr	r2, [pc, #268]	; (800a748 <TIM_Base_SetConfig+0x1c4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d02b      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a42      	ldr	r2, [pc, #264]	; (800a74c <TIM_Base_SetConfig+0x1c8>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d027      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a41      	ldr	r2, [pc, #260]	; (800a750 <TIM_Base_SetConfig+0x1cc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d023      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a40      	ldr	r2, [pc, #256]	; (800a754 <TIM_Base_SetConfig+0x1d0>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d01f      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a3f      	ldr	r2, [pc, #252]	; (800a758 <TIM_Base_SetConfig+0x1d4>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d01b      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a3e      	ldr	r2, [pc, #248]	; (800a75c <TIM_Base_SetConfig+0x1d8>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d017      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a3d      	ldr	r2, [pc, #244]	; (800a760 <TIM_Base_SetConfig+0x1dc>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d013      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a3c      	ldr	r2, [pc, #240]	; (800a764 <TIM_Base_SetConfig+0x1e0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00f      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a3b      	ldr	r2, [pc, #236]	; (800a768 <TIM_Base_SetConfig+0x1e4>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00b      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a3a      	ldr	r2, [pc, #232]	; (800a76c <TIM_Base_SetConfig+0x1e8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d007      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a39      	ldr	r2, [pc, #228]	; (800a770 <TIM_Base_SetConfig+0x1ec>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d003      	beq.n	800a696 <TIM_Base_SetConfig+0x112>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a38      	ldr	r2, [pc, #224]	; (800a774 <TIM_Base_SetConfig+0x1f0>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d108      	bne.n	800a6a8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a1a      	ldr	r2, [pc, #104]	; (800a738 <TIM_Base_SetConfig+0x1b4>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d023      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a19      	ldr	r2, [pc, #100]	; (800a73c <TIM_Base_SetConfig+0x1b8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d01f      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a1e      	ldr	r2, [pc, #120]	; (800a758 <TIM_Base_SetConfig+0x1d4>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d01b      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a1d      	ldr	r2, [pc, #116]	; (800a75c <TIM_Base_SetConfig+0x1d8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d017      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a1c      	ldr	r2, [pc, #112]	; (800a760 <TIM_Base_SetConfig+0x1dc>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d013      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a1b      	ldr	r2, [pc, #108]	; (800a764 <TIM_Base_SetConfig+0x1e0>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d00f      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <TIM_Base_SetConfig+0x1e4>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d00b      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a19      	ldr	r2, [pc, #100]	; (800a76c <TIM_Base_SetConfig+0x1e8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d007      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a18      	ldr	r2, [pc, #96]	; (800a770 <TIM_Base_SetConfig+0x1ec>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d003      	beq.n	800a71c <TIM_Base_SetConfig+0x198>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a17      	ldr	r2, [pc, #92]	; (800a774 <TIM_Base_SetConfig+0x1f0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d103      	bne.n	800a724 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	615a      	str	r2, [r3, #20]
}
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	40012c00 	.word	0x40012c00
 800a73c:	50012c00 	.word	0x50012c00
 800a740:	40000400 	.word	0x40000400
 800a744:	50000400 	.word	0x50000400
 800a748:	40000800 	.word	0x40000800
 800a74c:	50000800 	.word	0x50000800
 800a750:	40000c00 	.word	0x40000c00
 800a754:	50000c00 	.word	0x50000c00
 800a758:	40013400 	.word	0x40013400
 800a75c:	50013400 	.word	0x50013400
 800a760:	40014000 	.word	0x40014000
 800a764:	50014000 	.word	0x50014000
 800a768:	40014400 	.word	0x40014400
 800a76c:	50014400 	.word	0x50014400
 800a770:	40014800 	.word	0x40014800
 800a774:	50014800 	.word	0x50014800

0800a778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e042      	b.n	800a89c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7f6 fea7 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2224      	movs	r2, #36	; 0x24
 800a832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f022 0201 	bic.w	r2, r2, #1
 800a844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8ca 	bl	800a9e0 <UART_SetConfig>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e022      	b.n	800a89c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa60 	bl	800ad24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f042 0201 	orr.w	r2, r2, #1
 800a892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fae7 	bl	800ae68 <UART_CheckIdleState>
 800a89a:	4603      	mov	r3, r0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08a      	sub	sp, #40	; 0x28
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	f040 808b 	bne.w	800a9d6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_UART_Transmit+0x28>
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e083      	b.n	800a9d8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8da:	2b80      	cmp	r3, #128	; 0x80
 800a8dc:	d107      	bne.n	800a8ee <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8ec:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2221      	movs	r2, #33	; 0x21
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8fe:	f7f7 f843 	bl	8001988 <HAL_GetTick>
 800a902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	88fa      	ldrh	r2, [r7, #6]
 800a908:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	88fa      	ldrh	r2, [r7, #6]
 800a910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91c:	d108      	bne.n	800a930 <HAL_UART_Transmit+0x8c>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	e003      	b.n	800a938 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a938:	e030      	b.n	800a99c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2200      	movs	r2, #0
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fb39 	bl	800afbc <UART_WaitOnFlagUntilTimeout>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2220      	movs	r2, #32
 800a954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e03d      	b.n	800a9d8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a970:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3302      	adds	r3, #2
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e007      	b.n	800a98a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	781a      	ldrb	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	3301      	adds	r3, #1
 800a988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1c8      	bne.n	800a93a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2140      	movs	r1, #64	; 0x40
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 fb02 	bl	800afbc <UART_WaitOnFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e006      	b.n	800a9d8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2220      	movs	r2, #32
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e000      	b.n	800a9d8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a9d6:	2302      	movs	r3, #2
  }
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9e4:	b094      	sub	sp, #80	; 0x50
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b7e      	ldr	r3, [pc, #504]	; (800abf0 <UART_SetConfig+0x210>)
 800a9f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	431a      	orrs	r2, r3
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4977      	ldr	r1, [pc, #476]	; (800abf4 <UART_SetConfig+0x214>)
 800aa18:	4019      	ands	r1, r3
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa20:	430b      	orrs	r3, r1
 800aa22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	68d9      	ldr	r1, [r3, #12]
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	ea40 0301 	orr.w	r3, r0, r1
 800aa3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	4b6a      	ldr	r3, [pc, #424]	; (800abf0 <UART_SetConfig+0x210>)
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d009      	beq.n	800aa60 <UART_SetConfig+0x80>
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	4b69      	ldr	r3, [pc, #420]	; (800abf8 <UART_SetConfig+0x218>)
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d004      	beq.n	800aa60 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800aa6a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	f023 000f 	bic.w	r0, r3, #15
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	ea40 0301 	orr.w	r3, r0, r1
 800aa8e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	4b59      	ldr	r3, [pc, #356]	; (800abfc <UART_SetConfig+0x21c>)
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d102      	bne.n	800aaa0 <UART_SetConfig+0xc0>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa9e:	e029      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	4b56      	ldr	r3, [pc, #344]	; (800ac00 <UART_SetConfig+0x220>)
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d102      	bne.n	800aab0 <UART_SetConfig+0xd0>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaae:	e021      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	4b53      	ldr	r3, [pc, #332]	; (800ac04 <UART_SetConfig+0x224>)
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d102      	bne.n	800aac0 <UART_SetConfig+0xe0>
 800aaba:	2304      	movs	r3, #4
 800aabc:	64bb      	str	r3, [r7, #72]	; 0x48
 800aabe:	e019      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	4b50      	ldr	r3, [pc, #320]	; (800ac08 <UART_SetConfig+0x228>)
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d102      	bne.n	800aad0 <UART_SetConfig+0xf0>
 800aaca:	2308      	movs	r3, #8
 800aacc:	64bb      	str	r3, [r7, #72]	; 0x48
 800aace:	e011      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	4b4d      	ldr	r3, [pc, #308]	; (800ac0c <UART_SetConfig+0x22c>)
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d102      	bne.n	800aae0 <UART_SetConfig+0x100>
 800aada:	2310      	movs	r3, #16
 800aadc:	64bb      	str	r3, [r7, #72]	; 0x48
 800aade:	e009      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	4b42      	ldr	r3, [pc, #264]	; (800abf0 <UART_SetConfig+0x210>)
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d102      	bne.n	800aaf0 <UART_SetConfig+0x110>
 800aaea:	2320      	movs	r3, #32
 800aaec:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaee:	e001      	b.n	800aaf4 <UART_SetConfig+0x114>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	4b3d      	ldr	r3, [pc, #244]	; (800abf0 <UART_SetConfig+0x210>)
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d005      	beq.n	800ab0a <UART_SetConfig+0x12a>
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4b3d      	ldr	r3, [pc, #244]	; (800abf8 <UART_SetConfig+0x218>)
 800ab04:	429a      	cmp	r2, r3
 800ab06:	f040 8085 	bne.w	800ac14 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	623b      	str	r3, [r7, #32]
 800ab10:	627a      	str	r2, [r7, #36]	; 0x24
 800ab12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ab16:	f7fc feb7 	bl	8007888 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab1a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 80e8 	beq.w	800acf4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	4a39      	ldr	r2, [pc, #228]	; (800ac10 <UART_SetConfig+0x230>)
 800ab2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab32:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	4413      	add	r3, r2
 800ab42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d305      	bcc.n	800ab54 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d903      	bls.n	800ab5c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ab5a:	e048      	b.n	800abee <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab5e:	2200      	movs	r2, #0
 800ab60:	61bb      	str	r3, [r7, #24]
 800ab62:	61fa      	str	r2, [r7, #28]
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	4a29      	ldr	r2, [pc, #164]	; (800ac10 <UART_SetConfig+0x230>)
 800ab6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2200      	movs	r2, #0
 800ab72:	613b      	str	r3, [r7, #16]
 800ab74:	617a      	str	r2, [r7, #20]
 800ab76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ab7e:	f7f5 fca9 	bl	80004d4 <__aeabi_uldivmod>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f04f 0200 	mov.w	r2, #0
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	020b      	lsls	r3, r1, #8
 800ab94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab98:	0202      	lsls	r2, r0, #8
 800ab9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab9c:	6849      	ldr	r1, [r1, #4]
 800ab9e:	0849      	lsrs	r1, r1, #1
 800aba0:	2000      	movs	r0, #0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4605      	mov	r5, r0
 800aba6:	eb12 0804 	adds.w	r8, r2, r4
 800abaa:	eb43 0905 	adc.w	r9, r3, r5
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	60bb      	str	r3, [r7, #8]
 800abb6:	60fa      	str	r2, [r7, #12]
 800abb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abbc:	4640      	mov	r0, r8
 800abbe:	4649      	mov	r1, r9
 800abc0:	f7f5 fc88 	bl	80004d4 <__aeabi_uldivmod>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4613      	mov	r3, r2
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd2:	d308      	bcc.n	800abe6 <UART_SetConfig+0x206>
 800abd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abda:	d204      	bcs.n	800abe6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abe2:	60da      	str	r2, [r3, #12]
 800abe4:	e003      	b.n	800abee <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800abec:	e082      	b.n	800acf4 <UART_SetConfig+0x314>
 800abee:	e081      	b.n	800acf4 <UART_SetConfig+0x314>
 800abf0:	46002400 	.word	0x46002400
 800abf4:	cfff69f3 	.word	0xcfff69f3
 800abf8:	56002400 	.word	0x56002400
 800abfc:	40013800 	.word	0x40013800
 800ac00:	40004400 	.word	0x40004400
 800ac04:	40004800 	.word	0x40004800
 800ac08:	40004c00 	.word	0x40004c00
 800ac0c:	40005000 	.word	0x40005000
 800ac10:	08015bc0 	.word	0x08015bc0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1c:	d13c      	bne.n	800ac98 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac20:	2200      	movs	r2, #0
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac2a:	f7fc fe2d 	bl	8007888 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac2e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d05e      	beq.n	800acf4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	4a39      	ldr	r2, [pc, #228]	; (800ad20 <UART_SetConfig+0x340>)
 800ac3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac40:	461a      	mov	r2, r3
 800ac42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac48:	005a      	lsls	r2, r3, #1
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	441a      	add	r2, r3
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5e:	2b0f      	cmp	r3, #15
 800ac60:	d916      	bls.n	800ac90 <UART_SetConfig+0x2b0>
 800ac62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac68:	d212      	bcs.n	800ac90 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f023 030f 	bic.w	r3, r3, #15
 800ac72:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac82:	4313      	orrs	r3, r2
 800ac84:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	e031      	b.n	800acf4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac96:	e02d      	b.n	800acf4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	469a      	mov	sl, r3
 800ac9e:	4693      	mov	fp, r2
 800aca0:	4650      	mov	r0, sl
 800aca2:	4659      	mov	r1, fp
 800aca4:	f7fc fdf0 	bl	8007888 <HAL_RCCEx_GetPeriphCLKFreq>
 800aca8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800acaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acac:	2b00      	cmp	r3, #0
 800acae:	d021      	beq.n	800acf4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <UART_SetConfig+0x340>)
 800acb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acba:	461a      	mov	r2, r3
 800acbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	085b      	lsrs	r3, r3, #1
 800acc8:	441a      	add	r2, r3
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d909      	bls.n	800acee <UART_SetConfig+0x30e>
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace0:	d205      	bcs.n	800acee <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ace2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60da      	str	r2, [r3, #12]
 800acec:	e002      	b.n	800acf4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	2201      	movs	r2, #1
 800acf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	2201      	movs	r2, #1
 800ad00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2200      	movs	r2, #0
 800ad08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3750      	adds	r7, #80	; 0x50
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad1e:	bf00      	nop
 800ad20:	08015bc0 	.word	0x08015bc0

0800ad24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	f003 0302 	and.w	r3, r3, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad96:	f003 0308 	and.w	r3, r3, #8
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb8:	f003 0310 	and.w	r3, r3, #16
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adda:	f003 0320 	and.w	r3, r3, #32
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d01a      	beq.n	800ae3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae22:	d10a      	bne.n	800ae3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	605a      	str	r2, [r3, #4]
  }
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b098      	sub	sp, #96	; 0x60
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae78:	f7f6 fd86 	bl	8001988 <HAL_GetTick>
 800ae7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0308 	and.w	r3, r3, #8
 800ae88:	2b08      	cmp	r3, #8
 800ae8a:	d12f      	bne.n	800aeec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae94:	2200      	movs	r2, #0
 800ae96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f88e 	bl	800afbc <UART_WaitOnFlagUntilTimeout>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d022      	beq.n	800aeec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	e853 3f00 	ldrex	r3, [r3]
 800aeb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeba:	653b      	str	r3, [r7, #80]	; 0x50
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec4:	647b      	str	r3, [r7, #68]	; 0x44
 800aec6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aeca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aecc:	e841 2300 	strex	r3, r2, [r1]
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e6      	bne.n	800aea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e063      	b.n	800afb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0304 	and.w	r3, r3, #4
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d149      	bne.n	800af8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aefa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af02:	2200      	movs	r2, #0
 800af04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f857 	bl	800afbc <UART_WaitOnFlagUntilTimeout>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d03c      	beq.n	800af8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	623b      	str	r3, [r7, #32]
   return(result);
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af32:	633b      	str	r3, [r7, #48]	; 0x30
 800af34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	60fb      	str	r3, [r7, #12]
   return(result);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3308      	adds	r3, #8
 800af64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af66:	61fa      	str	r2, [r7, #28]
 800af68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	69b9      	ldr	r1, [r7, #24]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	617b      	str	r3, [r7, #20]
   return(result);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e5      	bne.n	800af46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e012      	b.n	800afb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2220      	movs	r2, #32
 800af9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3758      	adds	r7, #88	; 0x58
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afcc:	e049      	b.n	800b062 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd4:	d045      	beq.n	800b062 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd6:	f7f6 fcd7 	bl	8001988 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d302      	bcc.n	800afec <UART_WaitOnFlagUntilTimeout+0x30>
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e048      	b.n	800b082 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0304 	and.w	r3, r3, #4
 800affa:	2b00      	cmp	r3, #0
 800affc:	d031      	beq.n	800b062 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	f003 0308 	and.w	r3, r3, #8
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d110      	bne.n	800b02e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2208      	movs	r2, #8
 800b012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f838 	bl	800b08a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2208      	movs	r2, #8
 800b01e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e029      	b.n	800b082 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b03c:	d111      	bne.n	800b062 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 f81e 	bl	800b08a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e00f      	b.n	800b082 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69da      	ldr	r2, [r3, #28]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	4013      	ands	r3, r2
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	429a      	cmp	r2, r3
 800b070:	bf0c      	ite	eq
 800b072:	2301      	moveq	r3, #1
 800b074:	2300      	movne	r3, #0
 800b076:	b2db      	uxtb	r3, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	79fb      	ldrb	r3, [r7, #7]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d0a6      	beq.n	800afce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b095      	sub	sp, #84	; 0x54
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e6      	bne.n	800b092 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	e853 3f00 	ldrex	r3, [r3]
 800b0d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0da:	f023 0301 	bic.w	r3, r3, #1
 800b0de:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e3      	bne.n	800b0c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b100:	2b01      	cmp	r3, #1
 800b102:	d118      	bne.n	800b136 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	60bb      	str	r3, [r7, #8]
   return(result);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	f023 0310 	bic.w	r3, r3, #16
 800b118:	647b      	str	r3, [r7, #68]	; 0x44
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	6979      	ldr	r1, [r7, #20]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	613b      	str	r3, [r7, #16]
   return(result);
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e6      	bne.n	800b104 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2220      	movs	r2, #32
 800b13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b14a:	bf00      	nop
 800b14c:	3754      	adds	r7, #84	; 0x54
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b164:	2b01      	cmp	r3, #1
 800b166:	d101      	bne.n	800b16c <HAL_UARTEx_DisableFifoMode+0x16>
 800b168:	2302      	movs	r3, #2
 800b16a:	e027      	b.n	800b1bc <HAL_UARTEx_DisableFifoMode+0x66>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2224      	movs	r2, #36	; 0x24
 800b178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0201 	bic.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b19a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d101      	bne.n	800b1e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	e02d      	b.n	800b23c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2224      	movs	r2, #36	; 0x24
 800b1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f022 0201 	bic.w	r2, r2, #1
 800b206:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f84f 	bl	800b2c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2220      	movs	r2, #32
 800b22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b254:	2b01      	cmp	r3, #1
 800b256:	d101      	bne.n	800b25c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b258:	2302      	movs	r3, #2
 800b25a:	e02d      	b.n	800b2b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2224      	movs	r2, #36	; 0x24
 800b268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 0201 	bic.w	r2, r2, #1
 800b282:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	430a      	orrs	r2, r1
 800b296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f811 	bl	800b2c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d108      	bne.n	800b2e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2e0:	e031      	b.n	800b346 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	0e5b      	lsrs	r3, r3, #25
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	f003 0307 	and.w	r3, r3, #7
 800b2f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	0f5b      	lsrs	r3, r3, #29
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	7b3a      	ldrb	r2, [r7, #12]
 800b30e:	4911      	ldr	r1, [pc, #68]	; (800b354 <UARTEx_SetNbDataToProcess+0x94>)
 800b310:	5c8a      	ldrb	r2, [r1, r2]
 800b312:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b316:	7b3a      	ldrb	r2, [r7, #12]
 800b318:	490f      	ldr	r1, [pc, #60]	; (800b358 <UARTEx_SetNbDataToProcess+0x98>)
 800b31a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b31c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b320:	b29a      	uxth	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	7b7a      	ldrb	r2, [r7, #13]
 800b32c:	4909      	ldr	r1, [pc, #36]	; (800b354 <UARTEx_SetNbDataToProcess+0x94>)
 800b32e:	5c8a      	ldrb	r2, [r1, r2]
 800b330:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b334:	7b7a      	ldrb	r2, [r7, #13]
 800b336:	4908      	ldr	r1, [pc, #32]	; (800b358 <UARTEx_SetNbDataToProcess+0x98>)
 800b338:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b33a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b33e:	b29a      	uxth	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b346:	bf00      	nop
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	08015bd8 	.word	0x08015bd8
 800b358:	08015be0 	.word	0x08015be0

0800b35c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b096      	sub	sp, #88	; 0x58
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b36a:	2234      	movs	r2, #52	; 0x34
 800b36c:	2100      	movs	r1, #0
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f009 fd32 	bl	8014dd8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	f023 0303 	bic.w	r3, r3, #3
 800b37a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	f1a3 0208 	sub.w	r2, r3, #8
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	3b04      	subs	r3, #4
 800b3ba:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	3b04      	subs	r3, #4
 800b3ce:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e0:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f8:	4a5d      	ldr	r2, [pc, #372]	; (800b570 <_tx_byte_pool_create+0x214>)
 800b3fa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b402:	f3ef 8310 	mrs	r3, PRIMASK
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b40a:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b40c:	b672      	cpsid	i
#endif
    return(int_posture);
 800b40e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b410:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	4a57      	ldr	r2, [pc, #348]	; (800b574 <_tx_byte_pool_create+0x218>)
 800b416:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b418:	4b57      	ldr	r3, [pc, #348]	; (800b578 <_tx_byte_pool_create+0x21c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d109      	bne.n	800b434 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b420:	4a56      	ldr	r2, [pc, #344]	; (800b57c <_tx_byte_pool_create+0x220>)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
 800b432:	e011      	b.n	800b458 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b434:	4b51      	ldr	r3, [pc, #324]	; (800b57c <_tx_byte_pool_create+0x220>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b450:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b456:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b458:	4b47      	ldr	r3, [pc, #284]	; (800b578 <_tx_byte_pool_create+0x21c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	4a46      	ldr	r2, [pc, #280]	; (800b578 <_tx_byte_pool_create+0x21c>)
 800b460:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b462:	2300      	movs	r3, #0
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	2008      	movs	r0, #8
 800b46e:	f002 fd6d 	bl	800df4c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b472:	4b43      	ldr	r3, [pc, #268]	; (800b580 <_tx_byte_pool_create+0x224>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d06c      	beq.n	800b558 <_tx_byte_pool_create+0x1fc>
 800b47e:	4b41      	ldr	r3, [pc, #260]	; (800b584 <_tx_byte_pool_create+0x228>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	d066      	beq.n	800b558 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b48a:	f3ef 8305 	mrs	r3, IPSR
 800b48e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	4b3d      	ldr	r3, [pc, #244]	; (800b588 <_tx_byte_pool_create+0x22c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4313      	orrs	r3, r2
 800b498:	62bb      	str	r3, [r7, #40]	; 0x28
 800b49a:	4b3c      	ldr	r3, [pc, #240]	; (800b58c <_tx_byte_pool_create+0x230>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <_tx_byte_pool_create+0x162>
 800b4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b0:	041a      	lsls	r2, r3, #16
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4bc:	e00e      	b.n	800b4dc <_tx_byte_pool_create+0x180>
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b4c4:	d205      	bcs.n	800b4d2 <_tx_byte_pool_create+0x176>
 800b4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d0:	e004      	b.n	800b4dc <_tx_byte_pool_create+0x180>
 800b4d2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d8:	2300      	movs	r3, #0
 800b4da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	2215      	movs	r2, #21
 800b4ec:	609a      	str	r2, [r3, #8]
 800b4ee:	4b28      	ldr	r3, [pc, #160]	; (800b590 <_tx_byte_pool_create+0x234>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fa:	611a      	str	r2, [r3, #16]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	615a      	str	r2, [r3, #20]
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	619a      	str	r2, [r3, #24]
 800b508:	f107 0214 	add.w	r2, r7, #20
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	61da      	str	r2, [r3, #28]
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	3320      	adds	r3, #32
 800b514:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b516:	4b1f      	ldr	r3, [pc, #124]	; (800b594 <_tx_byte_pool_create+0x238>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d314      	bcc.n	800b54a <_tx_byte_pool_create+0x1ee>
 800b520:	4b1d      	ldr	r3, [pc, #116]	; (800b598 <_tx_byte_pool_create+0x23c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b526:	4a16      	ldr	r2, [pc, #88]	; (800b580 <_tx_byte_pool_create+0x224>)
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <_tx_byte_pool_create+0x240>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b532:	621a      	str	r2, [r3, #32]
 800b534:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <_tx_byte_pool_create+0x244>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00d      	beq.n	800b558 <_tx_byte_pool_create+0x1fc>
 800b53c:	4b18      	ldr	r3, [pc, #96]	; (800b5a0 <_tx_byte_pool_create+0x244>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a16      	ldr	r2, [pc, #88]	; (800b59c <_tx_byte_pool_create+0x240>)
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
 800b548:	e006      	b.n	800b558 <_tx_byte_pool_create+0x1fc>
 800b54a:	4a0d      	ldr	r2, [pc, #52]	; (800b580 <_tx_byte_pool_create+0x224>)
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	4b12      	ldr	r3, [pc, #72]	; (800b59c <_tx_byte_pool_create+0x240>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b556:	621a      	str	r2, [r3, #32]
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	f383 8810 	msr	PRIMASK, r3
}
 800b562:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3750      	adds	r7, #80	; 0x50
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	ffffeeee 	.word	0xffffeeee
 800b574:	42595445 	.word	0x42595445
 800b578:	20001678 	.word	0x20001678
 800b57c:	20001674 	.word	0x20001674
 800b580:	20001ca0 	.word	0x20001ca0
 800b584:	20001ca4 	.word	0x20001ca4
 800b588:	2000000c 	.word	0x2000000c
 800b58c:	20001684 	.word	0x20001684
 800b590:	e0001004 	.word	0xe0001004
 800b594:	20001c9c 	.word	0x20001c9c
 800b598:	20001c98 	.word	0x20001c98
 800b59c:	20001c8c 	.word	0x20001c8c
 800b5a0:	20001ca8 	.word	0x20001ca8

0800b5a4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b5a8:	f002 fcaa 	bl	800df00 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b5ac:	f001 fbe6 	bl	800cd7c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b5b0:	f002 fa92 	bl	800dad8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b5b4:	4b12      	ldr	r3, [pc, #72]	; (800b600 <_tx_initialize_high_level+0x5c>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	4b12      	ldr	r3, [pc, #72]	; (800b604 <_tx_initialize_high_level+0x60>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b5c0:	4b11      	ldr	r3, [pc, #68]	; (800b608 <_tx_initialize_high_level+0x64>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <_tx_initialize_high_level+0x68>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <_tx_initialize_high_level+0x6c>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <_tx_initialize_high_level+0x70>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b5d8:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <_tx_initialize_high_level+0x74>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <_tx_initialize_high_level+0x78>)
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <_tx_initialize_high_level+0x7c>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	4b0e      	ldr	r3, [pc, #56]	; (800b624 <_tx_initialize_high_level+0x80>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b5f0:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <_tx_initialize_high_level+0x84>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <_tx_initialize_high_level+0x88>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
#endif
}
 800b5fc:	bf00      	nop
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	2000164c 	.word	0x2000164c
 800b604:	20001650 	.word	0x20001650
 800b608:	20001654 	.word	0x20001654
 800b60c:	20001658 	.word	0x20001658
 800b610:	2000165c 	.word	0x2000165c
 800b614:	20001660 	.word	0x20001660
 800b618:	2000166c 	.word	0x2000166c
 800b61c:	20001670 	.word	0x20001670
 800b620:	20001674 	.word	0x20001674
 800b624:	20001678 	.word	0x20001678
 800b628:	20001664 	.word	0x20001664
 800b62c:	20001668 	.word	0x20001668

0800b630 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b634:	4b10      	ldr	r3, [pc, #64]	; (800b678 <_tx_initialize_kernel_enter+0x48>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b63c:	d00c      	beq.n	800b658 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b63e:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <_tx_initialize_kernel_enter+0x48>)
 800b640:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b644:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b646:	f7f4 fe17 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b64a:	f7ff ffab 	bl	800b5a4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b64e:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <_tx_initialize_kernel_enter+0x4c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3301      	adds	r3, #1
 800b654:	4a09      	ldr	r2, [pc, #36]	; (800b67c <_tx_initialize_kernel_enter+0x4c>)
 800b656:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b658:	4b07      	ldr	r3, [pc, #28]	; (800b678 <_tx_initialize_kernel_enter+0x48>)
 800b65a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b65e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <_tx_initialize_kernel_enter+0x50>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4618      	mov	r0, r3
 800b666:	f7f5 f8c5 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b66a:	4b03      	ldr	r3, [pc, #12]	; (800b678 <_tx_initialize_kernel_enter+0x48>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b670:	f7f4 fe3e 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b674:	bf00      	nop
 800b676:	bd80      	pop	{r7, pc}
 800b678:	2000000c 	.word	0x2000000c
 800b67c:	2000171c 	.word	0x2000171c
 800b680:	2000167c 	.word	0x2000167c

0800b684 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b08e      	sub	sp, #56	; 0x38
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b68e:	f3ef 8310 	mrs	r3, PRIMASK
 800b692:	623b      	str	r3, [r7, #32]
    return(posture);
 800b694:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b696:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b698:	b672      	cpsid	i
    return(int_posture);
 800b69a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b69c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6a2:	4a37      	ldr	r2, [pc, #220]	; (800b780 <_tx_queue_cleanup+0xfc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d161      	bne.n	800b76c <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d15b      	bne.n	800b76c <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d055      	beq.n	800b76c <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a2f      	ldr	r2, [pc, #188]	; (800b784 <_tx_queue_cleanup+0x100>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d150      	bne.n	800b76c <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d04c      	beq.n	800b76c <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	1e5a      	subs	r2, r3, #1
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d103      	bne.n	800b6f6 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b6f4:	e013      	b.n	800b71e <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b706:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	429a      	cmp	r2, r3
 800b716:	d102      	bne.n	800b71e <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71c:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	2b05      	cmp	r3, #5
 800b724:	d122      	bne.n	800b76c <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	220b      	movs	r2, #11
 800b732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b736:	e003      	b.n	800b740 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	220a      	movs	r2, #10
 800b73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <_tx_queue_cleanup+0x104>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	4a10      	ldr	r2, [pc, #64]	; (800b788 <_tx_queue_cleanup+0x104>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f383 8810 	msr	PRIMASK, r3
}
 800b754:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fcd6 	bl	800d108 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b75c:	f3ef 8310 	mrs	r3, PRIMASK
 800b760:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b762:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b764:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b766:	b672      	cpsid	i
    return(int_posture);
 800b768:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b76a:	637b      	str	r3, [r7, #52]	; 0x34
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f383 8810 	msr	PRIMASK, r3
}
 800b776:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b778:	bf00      	nop
 800b77a:	3738      	adds	r7, #56	; 0x38
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	0800b685 	.word	0x0800b685
 800b784:	51554555 	.word	0x51554555
 800b788:	2000171c 	.word	0x2000171c

0800b78c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b094      	sub	sp, #80	; 0x50
 800b790:	af02      	add	r7, sp, #8
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b79a:	2238      	movs	r2, #56	; 0x38
 800b79c:	2100      	movs	r1, #0
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f009 fb1a 	bl	8014dd8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	fb02 f303 	mul.w	r3, r2, r3
 800b7c4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	699a      	ldr	r2, [r3, #24]
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7ea:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7f0:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f6:	623b      	str	r3, [r7, #32]
    return(posture);
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b7fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7fc:	b672      	cpsid	i
    return(int_posture);
 800b7fe:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b800:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4a55      	ldr	r2, [pc, #340]	; (800b95c <_tx_queue_create+0x1d0>)
 800b806:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b808:	4b55      	ldr	r3, [pc, #340]	; (800b960 <_tx_queue_create+0x1d4>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b810:	4a54      	ldr	r2, [pc, #336]	; (800b964 <_tx_queue_create+0x1d8>)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	635a      	str	r2, [r3, #52]	; 0x34
 800b822:	e011      	b.n	800b848 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b824:	4b4f      	ldr	r3, [pc, #316]	; (800b964 <_tx_queue_create+0x1d8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b840:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b846:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b848:	4b45      	ldr	r3, [pc, #276]	; (800b960 <_tx_queue_create+0x1d4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	4a44      	ldr	r2, [pc, #272]	; (800b960 <_tx_queue_create+0x1d4>)
 800b850:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	68f9      	ldr	r1, [r7, #12]
 800b85c:	2003      	movs	r0, #3
 800b85e:	f002 fb75 	bl	800df4c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b862:	4b41      	ldr	r3, [pc, #260]	; (800b968 <_tx_queue_create+0x1dc>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d06b      	beq.n	800b946 <_tx_queue_create+0x1ba>
 800b86e:	4b3f      	ldr	r3, [pc, #252]	; (800b96c <_tx_queue_create+0x1e0>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b876:	2b00      	cmp	r3, #0
 800b878:	d065      	beq.n	800b946 <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b87a:	f3ef 8305 	mrs	r3, IPSR
 800b87e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	4b3b      	ldr	r3, [pc, #236]	; (800b970 <_tx_queue_create+0x1e4>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4313      	orrs	r3, r2
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
 800b88a:	4b3a      	ldr	r3, [pc, #232]	; (800b974 <_tx_queue_create+0x1e8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	643b      	str	r3, [r7, #64]	; 0x40
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10b      	bne.n	800b8ae <_tx_queue_create+0x122>
 800b896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89a:	647b      	str	r3, [r7, #68]	; 0x44
 800b89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	041a      	lsls	r2, r3, #16
 800b8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ac:	e00e      	b.n	800b8cc <_tx_queue_create+0x140>
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b8b4:	d205      	bcs.n	800b8c2 <_tx_queue_create+0x136>
 800b8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b8be:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c0:	e004      	b.n	800b8cc <_tx_queue_create+0x140>
 800b8c2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b8cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8d6:	605a      	str	r2, [r3, #4]
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	223c      	movs	r2, #60	; 0x3c
 800b8dc:	609a      	str	r2, [r3, #8]
 800b8de:	4b26      	ldr	r3, [pc, #152]	; (800b978 <_tx_queue_create+0x1ec>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	611a      	str	r2, [r3, #16]
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	615a      	str	r2, [r3, #20]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	619a      	str	r2, [r3, #24]
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8fc:	61da      	str	r2, [r3, #28]
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	3320      	adds	r3, #32
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
 800b904:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <_tx_queue_create+0x1f0>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d314      	bcc.n	800b938 <_tx_queue_create+0x1ac>
 800b90e:	4b1c      	ldr	r3, [pc, #112]	; (800b980 <_tx_queue_create+0x1f4>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	62bb      	str	r3, [r7, #40]	; 0x28
 800b914:	4a14      	ldr	r2, [pc, #80]	; (800b968 <_tx_queue_create+0x1dc>)
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <_tx_queue_create+0x1f8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b920:	621a      	str	r2, [r3, #32]
 800b922:	4b19      	ldr	r3, [pc, #100]	; (800b988 <_tx_queue_create+0x1fc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00d      	beq.n	800b946 <_tx_queue_create+0x1ba>
 800b92a:	4b17      	ldr	r3, [pc, #92]	; (800b988 <_tx_queue_create+0x1fc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a15      	ldr	r2, [pc, #84]	; (800b984 <_tx_queue_create+0x1f8>)
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	4610      	mov	r0, r2
 800b934:	4798      	blx	r3
 800b936:	e006      	b.n	800b946 <_tx_queue_create+0x1ba>
 800b938:	4a0b      	ldr	r2, [pc, #44]	; (800b968 <_tx_queue_create+0x1dc>)
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	4b11      	ldr	r3, [pc, #68]	; (800b984 <_tx_queue_create+0x1f8>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b944:	621a      	str	r2, [r3, #32]
 800b946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b948:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f383 8810 	msr	PRIMASK, r3
}
 800b950:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3748      	adds	r7, #72	; 0x48
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	51554555 	.word	0x51554555
 800b960:	20001658 	.word	0x20001658
 800b964:	20001654 	.word	0x20001654
 800b968:	20001ca0 	.word	0x20001ca0
 800b96c:	20001ca4 	.word	0x20001ca4
 800b970:	2000000c 	.word	0x2000000c
 800b974:	20001684 	.word	0x20001684
 800b978:	e0001004 	.word	0xe0001004
 800b97c:	20001c9c 	.word	0x20001c9c
 800b980:	20001c98 	.word	0x20001c98
 800b984:	20001c8c 	.word	0x20001c8c
 800b988:	20001ca8 	.word	0x20001ca8

0800b98c <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b094      	sub	sp, #80	; 0x50
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b994:	2300      	movs	r3, #0
 800b996:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b998:	2300      	movs	r3, #0
 800b99a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b99c:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9a6:	b672      	cpsid	i
    return(int_posture);
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b9ac:	4b76      	ldr	r3, [pc, #472]	; (800bb88 <_tx_queue_flush+0x1fc>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d06c      	beq.n	800ba92 <_tx_queue_flush+0x106>
 800b9b8:	4b74      	ldr	r3, [pc, #464]	; (800bb8c <_tx_queue_flush+0x200>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d066      	beq.n	800ba92 <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9c4:	f3ef 8305 	mrs	r3, IPSR
 800b9c8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9cc:	4b70      	ldr	r3, [pc, #448]	; (800bb90 <_tx_queue_flush+0x204>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d4:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <_tx_queue_flush+0x208>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <_tx_queue_flush+0x6c>
 800b9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ea:	041a      	lsls	r2, r3, #16
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f6:	e00e      	b.n	800ba16 <_tx_queue_flush+0x8a>
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b9fe:	d205      	bcs.n	800ba0c <_tx_queue_flush+0x80>
 800ba00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba02:	647b      	str	r3, [r7, #68]	; 0x44
 800ba04:	f04f 33ff 	mov.w	r3, #4294967295
 800ba08:	643b      	str	r3, [r7, #64]	; 0x40
 800ba0a:	e004      	b.n	800ba16 <_tx_queue_flush+0x8a>
 800ba0c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ba10:	643b      	str	r3, [r7, #64]	; 0x40
 800ba12:	2300      	movs	r3, #0
 800ba14:	647b      	str	r3, [r7, #68]	; 0x44
 800ba16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba20:	605a      	str	r2, [r3, #4]
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	223e      	movs	r2, #62	; 0x3e
 800ba26:	609a      	str	r2, [r3, #8]
 800ba28:	4b5b      	ldr	r3, [pc, #364]	; (800bb98 <_tx_queue_flush+0x20c>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	60da      	str	r2, [r3, #12]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	611a      	str	r2, [r3, #16]
 800ba36:	f107 0208 	add.w	r2, r7, #8
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	615a      	str	r2, [r3, #20]
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	2200      	movs	r2, #0
 800ba42:	619a      	str	r2, [r3, #24]
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	2200      	movs	r2, #0
 800ba48:	61da      	str	r2, [r3, #28]
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	3320      	adds	r3, #32
 800ba4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba50:	4b52      	ldr	r3, [pc, #328]	; (800bb9c <_tx_queue_flush+0x210>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d314      	bcc.n	800ba84 <_tx_queue_flush+0xf8>
 800ba5a:	4b51      	ldr	r3, [pc, #324]	; (800bba0 <_tx_queue_flush+0x214>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba60:	4a49      	ldr	r2, [pc, #292]	; (800bb88 <_tx_queue_flush+0x1fc>)
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4b4f      	ldr	r3, [pc, #316]	; (800bba4 <_tx_queue_flush+0x218>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6c:	621a      	str	r2, [r3, #32]
 800ba6e:	4b4e      	ldr	r3, [pc, #312]	; (800bba8 <_tx_queue_flush+0x21c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00d      	beq.n	800ba92 <_tx_queue_flush+0x106>
 800ba76:	4b4c      	ldr	r3, [pc, #304]	; (800bba8 <_tx_queue_flush+0x21c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a4a      	ldr	r2, [pc, #296]	; (800bba4 <_tx_queue_flush+0x218>)
 800ba7c:	6812      	ldr	r2, [r2, #0]
 800ba7e:	4610      	mov	r0, r2
 800ba80:	4798      	blx	r3
 800ba82:	e006      	b.n	800ba92 <_tx_queue_flush+0x106>
 800ba84:	4a40      	ldr	r2, [pc, #256]	; (800bb88 <_tx_queue_flush+0x1fc>)
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	4b46      	ldr	r3, [pc, #280]	; (800bba4 <_tx_queue_flush+0x218>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba90:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d023      	beq.n	800bae2 <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699a      	ldr	r2, [r3, #24]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699a      	ldr	r2, [r3, #24]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d010      	beq.n	800bae2 <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac4:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bad8:	4b34      	ldr	r3, [pc, #208]	; (800bbac <_tx_queue_flush+0x220>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	4a33      	ldr	r2, [pc, #204]	; (800bbac <_tx_queue_flush+0x220>)
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	f383 8810 	msr	PRIMASK, r3
}
 800baec:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800baee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d044      	beq.n	800bb7e <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800baf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf6:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800baf8:	e027      	b.n	800bb4a <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800bafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bafc:	3b01      	subs	r3, #1
 800bafe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d025      	beq.n	800bb52 <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb06:	f3ef 8310 	mrs	r3, PRIMASK
 800bb0a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bb0c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bb0e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb10:	b672      	cpsid	i
    return(int_posture);
 800bb12:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800bb14:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb28:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bb2a:	4b20      	ldr	r3, [pc, #128]	; (800bbac <_tx_queue_flush+0x220>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	4a1e      	ldr	r2, [pc, #120]	; (800bbac <_tx_queue_flush+0x220>)
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb36:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	f383 8810 	msr	PRIMASK, r3
}
 800bb3e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 fadf 	bl	800d108 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800bb4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1d4      	bne.n	800bafa <_tx_queue_flush+0x16e>
 800bb50:	e000      	b.n	800bb54 <_tx_queue_flush+0x1c8>
                break;
 800bb52:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb54:	f3ef 8310 	mrs	r3, PRIMASK
 800bb58:	613b      	str	r3, [r7, #16]
    return(posture);
 800bb5a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bb5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb5e:	b672      	cpsid	i
    return(int_posture);
 800bb60:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800bb64:	4b11      	ldr	r3, [pc, #68]	; (800bbac <_tx_queue_flush+0x220>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4a10      	ldr	r2, [pc, #64]	; (800bbac <_tx_queue_flush+0x220>)
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f383 8810 	msr	PRIMASK, r3
}
 800bb78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bb7a:	f001 fa8b 	bl	800d094 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3750      	adds	r7, #80	; 0x50
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20001ca0 	.word	0x20001ca0
 800bb8c:	20001ca4 	.word	0x20001ca4
 800bb90:	2000000c 	.word	0x2000000c
 800bb94:	20001684 	.word	0x20001684
 800bb98:	e0001004 	.word	0xe0001004
 800bb9c:	20001c9c 	.word	0x20001c9c
 800bba0:	20001c98 	.word	0x20001c98
 800bba4:	20001c8c 	.word	0x20001c8c
 800bba8:	20001ca8 	.word	0x20001ca8
 800bbac:	2000171c 	.word	0x2000171c

0800bbb0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b09a      	sub	sp, #104	; 0x68
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbc0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbc4:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbca:	b672      	cpsid	i
    return(int_posture);
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800bbce:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800bbd0:	4b77      	ldr	r3, [pc, #476]	; (800bdb0 <_tx_queue_receive+0x200>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d06c      	beq.n	800bcb6 <_tx_queue_receive+0x106>
 800bbdc:	4b75      	ldr	r3, [pc, #468]	; (800bdb4 <_tx_queue_receive+0x204>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d066      	beq.n	800bcb6 <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbe8:	f3ef 8305 	mrs	r3, IPSR
 800bbec:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbf0:	4b71      	ldr	r3, [pc, #452]	; (800bdb8 <_tx_queue_receive+0x208>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbf8:	4b70      	ldr	r3, [pc, #448]	; (800bdbc <_tx_queue_receive+0x20c>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	653b      	str	r3, [r7, #80]	; 0x50
 800bbfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <_tx_queue_receive+0x6c>
 800bc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	657b      	str	r3, [r7, #84]	; 0x54
 800bc0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0e:	041a      	lsls	r2, r3, #16
 800bc10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc12:	4313      	orrs	r3, r2
 800bc14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc18:	657b      	str	r3, [r7, #84]	; 0x54
 800bc1a:	e00e      	b.n	800bc3a <_tx_queue_receive+0x8a>
 800bc1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc1e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bc22:	d205      	bcs.n	800bc30 <_tx_queue_receive+0x80>
 800bc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc26:	657b      	str	r3, [r7, #84]	; 0x54
 800bc28:	f04f 33ff 	mov.w	r3, #4294967295
 800bc2c:	653b      	str	r3, [r7, #80]	; 0x50
 800bc2e:	e004      	b.n	800bc3a <_tx_queue_receive+0x8a>
 800bc30:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bc34:	653b      	str	r3, [r7, #80]	; 0x50
 800bc36:	2300      	movs	r3, #0
 800bc38:	657b      	str	r3, [r7, #84]	; 0x54
 800bc3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc44:	605a      	str	r2, [r3, #4]
 800bc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc48:	2244      	movs	r2, #68	; 0x44
 800bc4a:	609a      	str	r2, [r3, #8]
 800bc4c:	4b5c      	ldr	r3, [pc, #368]	; (800bdc0 <_tx_queue_receive+0x210>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc52:	60da      	str	r2, [r3, #12]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc58:	611a      	str	r2, [r3, #16]
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc5e:	615a      	str	r2, [r3, #20]
 800bc60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	619a      	str	r2, [r3, #24]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc6c:	61da      	str	r2, [r3, #28]
 800bc6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc70:	3320      	adds	r3, #32
 800bc72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc74:	4b53      	ldr	r3, [pc, #332]	; (800bdc4 <_tx_queue_receive+0x214>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d314      	bcc.n	800bca8 <_tx_queue_receive+0xf8>
 800bc7e:	4b52      	ldr	r3, [pc, #328]	; (800bdc8 <_tx_queue_receive+0x218>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc84:	4a4a      	ldr	r2, [pc, #296]	; (800bdb0 <_tx_queue_receive+0x200>)
 800bc86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	4b50      	ldr	r3, [pc, #320]	; (800bdcc <_tx_queue_receive+0x21c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc90:	621a      	str	r2, [r3, #32]
 800bc92:	4b4f      	ldr	r3, [pc, #316]	; (800bdd0 <_tx_queue_receive+0x220>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00d      	beq.n	800bcb6 <_tx_queue_receive+0x106>
 800bc9a:	4b4d      	ldr	r3, [pc, #308]	; (800bdd0 <_tx_queue_receive+0x220>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a4b      	ldr	r2, [pc, #300]	; (800bdcc <_tx_queue_receive+0x21c>)
 800bca0:	6812      	ldr	r2, [r2, #0]
 800bca2:	4610      	mov	r0, r2
 800bca4:	4798      	blx	r3
 800bca6:	e006      	b.n	800bcb6 <_tx_queue_receive+0x106>
 800bca8:	4a41      	ldr	r2, [pc, #260]	; (800bdb0 <_tx_queue_receive+0x200>)
 800bcaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	4b47      	ldr	r3, [pc, #284]	; (800bdcc <_tx_queue_receive+0x21c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb4:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 8149 	beq.w	800bf58 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d13c      	bne.n	800bd46 <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bcdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcde:	1d13      	adds	r3, r2, #4
 800bce0:	667b      	str	r3, [r7, #100]	; 0x64
 800bce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bce4:	1d19      	adds	r1, r3, #4
 800bce6:	6639      	str	r1, [r7, #96]	; 0x60
 800bce8:	6812      	ldr	r2, [r2, #0]
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d90e      	bls.n	800bd10 <_tx_queue_receive+0x160>
 800bcf2:	e007      	b.n	800bd04 <_tx_queue_receive+0x154>
 800bcf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcf6:	1d13      	adds	r3, r2, #4
 800bcf8:	667b      	str	r3, [r7, #100]	; 0x64
 800bcfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcfc:	1d19      	adds	r1, r3, #4
 800bcfe:	6639      	str	r1, [r7, #96]	; 0x60
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd06:	3b01      	subs	r3, #1
 800bd08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f1      	bne.n	800bcf4 <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d102      	bne.n	800bd20 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd24:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	611a      	str	r2, [r3, #16]
 800bd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd3c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	f383 8810 	msr	PRIMASK, r3
}
 800bd44:	e176      	b.n	800c034 <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d166      	bne.n	800be24 <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5a:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd68:	1d13      	adds	r3, r2, #4
 800bd6a:	667b      	str	r3, [r7, #100]	; 0x64
 800bd6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd6e:	1d19      	adds	r1, r3, #4
 800bd70:	6639      	str	r1, [r7, #96]	; 0x60
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d90e      	bls.n	800bd9a <_tx_queue_receive+0x1ea>
 800bd7c:	e007      	b.n	800bd8e <_tx_queue_receive+0x1de>
 800bd7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd80:	1d13      	adds	r3, r2, #4
 800bd82:	667b      	str	r3, [r7, #100]	; 0x64
 800bd84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd86:	1d19      	adds	r1, r3, #4
 800bd88:	6639      	str	r1, [r7, #96]	; 0x60
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd90:	3b01      	subs	r3, #1
 800bd92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1f1      	bne.n	800bd7e <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d116      	bne.n	800bdd4 <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	629a      	str	r2, [r3, #40]	; 0x28
 800bdac:	e021      	b.n	800bdf2 <_tx_queue_receive+0x242>
 800bdae:	bf00      	nop
 800bdb0:	20001ca0 	.word	0x20001ca0
 800bdb4:	20001ca4 	.word	0x20001ca4
 800bdb8:	2000000c 	.word	0x2000000c
 800bdbc:	20001684 	.word	0x20001684
 800bdc0:	e0001004 	.word	0xe0001004
 800bdc4:	20001c9c 	.word	0x20001c9c
 800bdc8:	20001c98 	.word	0x20001c98
 800bdcc:	20001c8c 	.word	0x20001c8c
 800bdd0:	20001ca8 	.word	0x20001ca8
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd8:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdde:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdea:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdf0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdf6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bdfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be00:	2200      	movs	r2, #0
 800be02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800be06:	4b8e      	ldr	r3, [pc, #568]	; (800c040 <_tx_queue_receive+0x490>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	4a8c      	ldr	r2, [pc, #560]	; (800c040 <_tx_queue_receive+0x490>)
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be12:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f383 8810 	msr	PRIMASK, r3
}
 800be1a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800be1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be1e:	f001 f973 	bl	800d108 <_tx_thread_system_resume>
 800be22:	e107      	b.n	800c034 <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800be34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be36:	1d13      	adds	r3, r2, #4
 800be38:	667b      	str	r3, [r7, #100]	; 0x64
 800be3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be3c:	1d19      	adds	r1, r3, #4
 800be3e:	6639      	str	r1, [r7, #96]	; 0x60
 800be40:	6812      	ldr	r2, [r2, #0]
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be46:	2b01      	cmp	r3, #1
 800be48:	d90e      	bls.n	800be68 <_tx_queue_receive+0x2b8>
 800be4a:	e007      	b.n	800be5c <_tx_queue_receive+0x2ac>
 800be4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be4e:	1d13      	adds	r3, r2, #4
 800be50:	667b      	str	r3, [r7, #100]	; 0x64
 800be52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be54:	1d19      	adds	r1, r3, #4
 800be56:	6639      	str	r1, [r7, #96]	; 0x60
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be5e:	3b01      	subs	r3, #1
 800be60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f1      	bne.n	800be4c <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be6e:	429a      	cmp	r2, r3
 800be70:	d102      	bne.n	800be78 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be7c:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800be7e:	4b70      	ldr	r3, [pc, #448]	; (800c040 <_tx_queue_receive+0x490>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	4a6e      	ldr	r2, [pc, #440]	; (800c040 <_tx_queue_receive+0x490>)
 800be86:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800be88:	4b6d      	ldr	r3, [pc, #436]	; (800c040 <_tx_queue_receive+0x490>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	4a6c      	ldr	r2, [pc, #432]	; (800c040 <_tx_queue_receive+0x490>)
 800be90:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800be92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bea6:	1d13      	adds	r3, r2, #4
 800bea8:	667b      	str	r3, [r7, #100]	; 0x64
 800beaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beac:	1d19      	adds	r1, r3, #4
 800beae:	6639      	str	r1, [r7, #96]	; 0x60
 800beb0:	6812      	ldr	r2, [r2, #0]
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d90e      	bls.n	800bed8 <_tx_queue_receive+0x328>
 800beba:	e007      	b.n	800becc <_tx_queue_receive+0x31c>
 800bebc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bebe:	1d13      	adds	r3, r2, #4
 800bec0:	667b      	str	r3, [r7, #100]	; 0x64
 800bec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bec4:	1d19      	adds	r1, r3, #4
 800bec6:	6639      	str	r1, [r7, #96]	; 0x60
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	601a      	str	r2, [r3, #0]
 800becc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bece:	3b01      	subs	r3, #1
 800bed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1f1      	bne.n	800bebc <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bede:	429a      	cmp	r2, r3
 800bee0:	d102      	bne.n	800bee8 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beec:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef6:	3b01      	subs	r3, #1
 800bef8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800befa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800befc:	2b00      	cmp	r3, #0
 800befe:	d103      	bne.n	800bf08 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	629a      	str	r2, [r3, #40]	; 0x28
 800bf06:	e00e      	b.n	800bf26 <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bf08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf12:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf18:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bf20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf24:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf2a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2e:	2200      	movs	r2, #0
 800bf30:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bf3a:	4b41      	ldr	r3, [pc, #260]	; (800c040 <_tx_queue_receive+0x490>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	4a3f      	ldr	r2, [pc, #252]	; (800c040 <_tx_queue_receive+0x490>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f383 8810 	msr	PRIMASK, r3
}
 800bf4e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bf50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf52:	f001 f8d9 	bl	800d108 <_tx_thread_system_resume>
 800bf56:	e06d      	b.n	800c034 <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d062      	beq.n	800c024 <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bf5e:	4b38      	ldr	r3, [pc, #224]	; (800c040 <_tx_queue_receive+0x490>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d008      	beq.n	800bf78 <_tx_queue_receive+0x3c8>
 800bf66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	f383 8810 	msr	PRIMASK, r3
}
 800bf70:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bf72:	230a      	movs	r3, #10
 800bf74:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf76:	e05d      	b.n	800c034 <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bf78:	4b32      	ldr	r3, [pc, #200]	; (800c044 <_tx_queue_receive+0x494>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	4a31      	ldr	r2, [pc, #196]	; (800c048 <_tx_queue_receive+0x498>)
 800bf82:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bfa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfb0:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfb6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfbc:	675a      	str	r2, [r3, #116]	; 0x74
 800bfbe:	e011      	b.n	800bfe4 <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfca:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd0:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bfd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfd6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfdc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfe2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfee:	2205      	movs	r2, #5
 800bff0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff4:	2201      	movs	r2, #1
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <_tx_queue_receive+0x490>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	4a0e      	ldr	r2, [pc, #56]	; (800c040 <_tx_queue_receive+0x490>)
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	f383 8810 	msr	PRIMASK, r3
}
 800c012:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c014:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c016:	f001 fa31 	bl	800d47c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c020:	65bb      	str	r3, [r7, #88]	; 0x58
 800c022:	e007      	b.n	800c034 <_tx_queue_receive+0x484>
 800c024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c026:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f383 8810 	msr	PRIMASK, r3
}
 800c02e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800c030:	230a      	movs	r3, #10
 800c032:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c036:	4618      	mov	r0, r3
 800c038:	3768      	adds	r7, #104	; 0x68
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	2000171c 	.word	0x2000171c
 800c044:	20001684 	.word	0x20001684
 800c048:	0800b685 	.word	0x0800b685

0800c04c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b09a      	sub	sp, #104	; 0x68
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c058:	2300      	movs	r3, #0
 800c05a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c05c:	f3ef 8310 	mrs	r3, PRIMASK
 800c060:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c066:	b672      	cpsid	i
    return(int_posture);
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c06a:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c06c:	4b7a      	ldr	r3, [pc, #488]	; (800c258 <_tx_queue_send+0x20c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	64bb      	str	r3, [r7, #72]	; 0x48
 800c072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c074:	2b00      	cmp	r3, #0
 800c076:	d06c      	beq.n	800c152 <_tx_queue_send+0x106>
 800c078:	4b78      	ldr	r3, [pc, #480]	; (800c25c <_tx_queue_send+0x210>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d066      	beq.n	800c152 <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c084:	f3ef 8305 	mrs	r3, IPSR
 800c088:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c08c:	4b74      	ldr	r3, [pc, #464]	; (800c260 <_tx_queue_send+0x214>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4313      	orrs	r3, r2
 800c092:	647b      	str	r3, [r7, #68]	; 0x44
 800c094:	4b73      	ldr	r3, [pc, #460]	; (800c264 <_tx_queue_send+0x218>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	653b      	str	r3, [r7, #80]	; 0x50
 800c09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10b      	bne.n	800c0b8 <_tx_queue_send+0x6c>
 800c0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a4:	657b      	str	r3, [r7, #84]	; 0x54
 800c0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	041a      	lsls	r2, r3, #16
 800c0ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0b4:	657b      	str	r3, [r7, #84]	; 0x54
 800c0b6:	e00e      	b.n	800c0d6 <_tx_queue_send+0x8a>
 800c0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ba:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0be:	d205      	bcs.n	800c0cc <_tx_queue_send+0x80>
 800c0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c8:	653b      	str	r3, [r7, #80]	; 0x50
 800c0ca:	e004      	b.n	800c0d6 <_tx_queue_send+0x8a>
 800c0cc:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c0d0:	653b      	str	r3, [r7, #80]	; 0x50
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	657b      	str	r3, [r7, #84]	; 0x54
 800c0d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0e0:	605a      	str	r2, [r3, #4]
 800c0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0e4:	2245      	movs	r2, #69	; 0x45
 800c0e6:	609a      	str	r2, [r3, #8]
 800c0e8:	4b5f      	ldr	r3, [pc, #380]	; (800c268 <_tx_queue_send+0x21c>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ee:	60da      	str	r2, [r3, #12]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f4:	611a      	str	r2, [r3, #16]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0fa:	615a      	str	r2, [r3, #20]
 800c0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	619a      	str	r2, [r3, #24]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	691a      	ldr	r2, [r3, #16]
 800c106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c108:	61da      	str	r2, [r3, #28]
 800c10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c10c:	3320      	adds	r3, #32
 800c10e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c110:	4b56      	ldr	r3, [pc, #344]	; (800c26c <_tx_queue_send+0x220>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c116:	429a      	cmp	r2, r3
 800c118:	d314      	bcc.n	800c144 <_tx_queue_send+0xf8>
 800c11a:	4b55      	ldr	r3, [pc, #340]	; (800c270 <_tx_queue_send+0x224>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c120:	4a4d      	ldr	r2, [pc, #308]	; (800c258 <_tx_queue_send+0x20c>)
 800c122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	4b53      	ldr	r3, [pc, #332]	; (800c274 <_tx_queue_send+0x228>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c12c:	621a      	str	r2, [r3, #32]
 800c12e:	4b52      	ldr	r3, [pc, #328]	; (800c278 <_tx_queue_send+0x22c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00d      	beq.n	800c152 <_tx_queue_send+0x106>
 800c136:	4b50      	ldr	r3, [pc, #320]	; (800c278 <_tx_queue_send+0x22c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a4e      	ldr	r2, [pc, #312]	; (800c274 <_tx_queue_send+0x228>)
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	4610      	mov	r0, r2
 800c140:	4798      	blx	r3
 800c142:	e006      	b.n	800c152 <_tx_queue_send+0x106>
 800c144:	4a44      	ldr	r2, [pc, #272]	; (800c258 <_tx_queue_send+0x20c>)
 800c146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	4b4a      	ldr	r3, [pc, #296]	; (800c274 <_tx_queue_send+0x228>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c150:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80ae 	beq.w	800c2be <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c164:	2b00      	cmp	r3, #0
 800c166:	d13c      	bne.n	800c1e2 <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	1e5a      	subs	r2, r3, #1
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c184:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c18c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c18e:	1d13      	adds	r3, r2, #4
 800c190:	667b      	str	r3, [r7, #100]	; 0x64
 800c192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c194:	1d19      	adds	r1, r3, #4
 800c196:	6639      	str	r1, [r7, #96]	; 0x60
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d90e      	bls.n	800c1c0 <_tx_queue_send+0x174>
 800c1a2:	e007      	b.n	800c1b4 <_tx_queue_send+0x168>
 800c1a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1a6:	1d13      	adds	r3, r2, #4
 800c1a8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ac:	1d19      	adds	r1, r3, #4
 800c1ae:	6639      	str	r1, [r7, #96]	; 0x60
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1f1      	bne.n	800c1a4 <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d102      	bne.n	800c1d0 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1d4:	625a      	str	r2, [r3, #36]	; 0x24
 800c1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	f383 8810 	msr	PRIMASK, r3
}
 800c1e0:	e0db      	b.n	800c39a <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d103      	bne.n	800c1fc <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	629a      	str	r2, [r3, #40]	; 0x28
 800c1fa:	e012      	b.n	800c222 <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c208:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c20e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c21a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c220:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c22a:	2200      	movs	r2, #0
 800c22c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c236:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c23e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c240:	1d13      	adds	r3, r2, #4
 800c242:	667b      	str	r3, [r7, #100]	; 0x64
 800c244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c246:	1d19      	adds	r1, r3, #4
 800c248:	6639      	str	r1, [r7, #96]	; 0x60
 800c24a:	6812      	ldr	r2, [r2, #0]
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c250:	2b01      	cmp	r3, #1
 800c252:	d921      	bls.n	800c298 <_tx_queue_send+0x24c>
 800c254:	e01a      	b.n	800c28c <_tx_queue_send+0x240>
 800c256:	bf00      	nop
 800c258:	20001ca0 	.word	0x20001ca0
 800c25c:	20001ca4 	.word	0x20001ca4
 800c260:	2000000c 	.word	0x2000000c
 800c264:	20001684 	.word	0x20001684
 800c268:	e0001004 	.word	0xe0001004
 800c26c:	20001c9c 	.word	0x20001c9c
 800c270:	20001c98 	.word	0x20001c98
 800c274:	20001c8c 	.word	0x20001c8c
 800c278:	20001ca8 	.word	0x20001ca8
 800c27c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c27e:	1d13      	adds	r3, r2, #4
 800c280:	667b      	str	r3, [r7, #100]	; 0x64
 800c282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c284:	1d19      	adds	r1, r3, #4
 800c286:	6639      	str	r1, [r7, #96]	; 0x60
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28e:	3b01      	subs	r3, #1
 800c290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f1      	bne.n	800c27c <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2a0:	4b40      	ldr	r3, [pc, #256]	; (800c3a4 <_tx_queue_send+0x358>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4a3f      	ldr	r2, [pc, #252]	; (800c3a4 <_tx_queue_send+0x358>)
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	f383 8810 	msr	PRIMASK, r3
}
 800c2b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c2b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2b8:	f000 ff26 	bl	800d108 <_tx_thread_system_resume>
 800c2bc:	e06d      	b.n	800c39a <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d062      	beq.n	800c38a <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c2c4:	4b37      	ldr	r3, [pc, #220]	; (800c3a4 <_tx_queue_send+0x358>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d008      	beq.n	800c2de <_tx_queue_send+0x292>
 800c2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f383 8810 	msr	PRIMASK, r3
}
 800c2d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c2d8:	230b      	movs	r3, #11
 800c2da:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2dc:	e05d      	b.n	800c39a <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c2de:	4b32      	ldr	r3, [pc, #200]	; (800c3a8 <_tx_queue_send+0x35c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e6:	4a31      	ldr	r2, [pc, #196]	; (800c3ac <_tx_queue_send+0x360>)
 800c2e8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c300:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c308:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d109      	bne.n	800c326 <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c316:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c31a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c31c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c322:	675a      	str	r2, [r3, #116]	; 0x74
 800c324:	e011      	b.n	800c34a <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32a:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c330:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c336:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c33c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c342:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c348:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c34c:	1c5a      	adds	r2, r3, #1
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c354:	2205      	movs	r2, #5
 800c356:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	2201      	movs	r2, #1
 800c35c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c364:	4b0f      	ldr	r3, [pc, #60]	; (800c3a4 <_tx_queue_send+0x358>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3301      	adds	r3, #1
 800c36a:	4a0e      	ldr	r2, [pc, #56]	; (800c3a4 <_tx_queue_send+0x358>)
 800c36c:	6013      	str	r3, [r2, #0]
 800c36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c370:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	f383 8810 	msr	PRIMASK, r3
}
 800c378:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c37a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c37c:	f001 f87e 	bl	800d47c <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c386:	65bb      	str	r3, [r7, #88]	; 0x58
 800c388:	e007      	b.n	800c39a <_tx_queue_send+0x34e>
 800c38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c38c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f383 8810 	msr	PRIMASK, r3
}
 800c394:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c396:	230b      	movs	r3, #11
 800c398:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c39a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3768      	adds	r7, #104	; 0x68
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	2000171c 	.word	0x2000171c
 800c3a8:	20001684 	.word	0x20001684
 800c3ac:	0800b685 	.word	0x0800b685

0800c3b0 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b092      	sub	sp, #72	; 0x48
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3be:	f3ef 8310 	mrs	r3, PRIMASK
 800c3c2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c3c4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c3c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3c8:	b672      	cpsid	i
    return(int_posture);
 800c3ca:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c3cc:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c3ce:	4b67      	ldr	r3, [pc, #412]	; (800c56c <_tx_semaphore_ceiling_put+0x1bc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d06d      	beq.n	800c4b6 <_tx_semaphore_ceiling_put+0x106>
 800c3da:	4b65      	ldr	r3, [pc, #404]	; (800c570 <_tx_semaphore_ceiling_put+0x1c0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d067      	beq.n	800c4b6 <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3e6:	f3ef 8305 	mrs	r3, IPSR
 800c3ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	4b61      	ldr	r3, [pc, #388]	; (800c574 <_tx_semaphore_ceiling_put+0x1c4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c3f6:	4b60      	ldr	r3, [pc, #384]	; (800c578 <_tx_semaphore_ceiling_put+0x1c8>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10b      	bne.n	800c41a <_tx_semaphore_ceiling_put+0x6a>
 800c402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	643b      	str	r3, [r7, #64]	; 0x40
 800c408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40c:	041a      	lsls	r2, r3, #16
 800c40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c410:	4313      	orrs	r3, r2
 800c412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c416:	643b      	str	r3, [r7, #64]	; 0x40
 800c418:	e00e      	b.n	800c438 <_tx_semaphore_ceiling_put+0x88>
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c420:	d205      	bcs.n	800c42e <_tx_semaphore_ceiling_put+0x7e>
 800c422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c424:	643b      	str	r3, [r7, #64]	; 0x40
 800c426:	f04f 33ff 	mov.w	r3, #4294967295
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c42c:	e004      	b.n	800c438 <_tx_semaphore_ceiling_put+0x88>
 800c42e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c434:	2300      	movs	r3, #0
 800c436:	643b      	str	r3, [r7, #64]	; 0x40
 800c438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c442:	605a      	str	r2, [r3, #4]
 800c444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c446:	2250      	movs	r2, #80	; 0x50
 800c448:	609a      	str	r2, [r3, #8]
 800c44a:	4b4c      	ldr	r3, [pc, #304]	; (800c57c <_tx_semaphore_ceiling_put+0x1cc>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c450:	60da      	str	r2, [r3, #12]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c456:	611a      	str	r2, [r3, #16]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689a      	ldr	r2, [r3, #8]
 800c45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45e:	615a      	str	r2, [r3, #20]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c466:	619a      	str	r2, [r3, #24]
 800c468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	61da      	str	r2, [r3, #28]
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	3320      	adds	r3, #32
 800c472:	637b      	str	r3, [r7, #52]	; 0x34
 800c474:	4b42      	ldr	r3, [pc, #264]	; (800c580 <_tx_semaphore_ceiling_put+0x1d0>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d314      	bcc.n	800c4a8 <_tx_semaphore_ceiling_put+0xf8>
 800c47e:	4b41      	ldr	r3, [pc, #260]	; (800c584 <_tx_semaphore_ceiling_put+0x1d4>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	637b      	str	r3, [r7, #52]	; 0x34
 800c484:	4a39      	ldr	r2, [pc, #228]	; (800c56c <_tx_semaphore_ceiling_put+0x1bc>)
 800c486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	4b3f      	ldr	r3, [pc, #252]	; (800c588 <_tx_semaphore_ceiling_put+0x1d8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c490:	621a      	str	r2, [r3, #32]
 800c492:	4b3e      	ldr	r3, [pc, #248]	; (800c58c <_tx_semaphore_ceiling_put+0x1dc>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00d      	beq.n	800c4b6 <_tx_semaphore_ceiling_put+0x106>
 800c49a:	4b3c      	ldr	r3, [pc, #240]	; (800c58c <_tx_semaphore_ceiling_put+0x1dc>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a3a      	ldr	r2, [pc, #232]	; (800c588 <_tx_semaphore_ceiling_put+0x1d8>)
 800c4a0:	6812      	ldr	r2, [r2, #0]
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	4798      	blx	r3
 800c4a6:	e006      	b.n	800c4b6 <_tx_semaphore_ceiling_put+0x106>
 800c4a8:	4a30      	ldr	r2, [pc, #192]	; (800c56c <_tx_semaphore_ceiling_put+0x1bc>)
 800c4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	4b36      	ldr	r3, [pc, #216]	; (800c588 <_tx_semaphore_ceiling_put+0x1d8>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b4:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d11b      	bne.n	800c4fa <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d808      	bhi.n	800c4de <_tx_semaphore_ceiling_put+0x12e>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f383 8810 	msr	PRIMASK, r3
}
 800c4d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c4d8:	2321      	movs	r3, #33	; 0x21
 800c4da:	647b      	str	r3, [r7, #68]	; 0x44
 800c4dc:	e041      	b.n	800c562 <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	609a      	str	r2, [r3, #8]
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f383 8810 	msr	PRIMASK, r3
}
 800c4f2:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c4f8:	e033      	b.n	800c562 <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	3b01      	subs	r3, #1
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d103      	bne.n	800c514 <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	60da      	str	r2, [r3, #12]
 800c512:	e00e      	b.n	800c532 <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c524:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	6a3a      	ldr	r2, [r7, #32]
 800c52a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c52c:	6a3b      	ldr	r3, [r7, #32]
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c536:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	2200      	movs	r2, #0
 800c53c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	2200      	movs	r2, #0
 800c542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <_tx_semaphore_ceiling_put+0x1e0>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3301      	adds	r3, #1
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <_tx_semaphore_ceiling_put+0x1e0>)
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f383 8810 	msr	PRIMASK, r3
}
 800c55a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c55e:	f000 fdd3 	bl	800d108 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c564:	4618      	mov	r0, r3
 800c566:	3748      	adds	r7, #72	; 0x48
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	20001ca0 	.word	0x20001ca0
 800c570:	20001ca4 	.word	0x20001ca4
 800c574:	2000000c 	.word	0x2000000c
 800c578:	20001684 	.word	0x20001684
 800c57c:	e0001004 	.word	0xe0001004
 800c580:	20001c9c 	.word	0x20001c9c
 800c584:	20001c98 	.word	0x20001c98
 800c588:	20001c8c 	.word	0x20001c8c
 800c58c:	20001ca8 	.word	0x20001ca8
 800c590:	2000171c 	.word	0x2000171c

0800c594 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c59e:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a2:	623b      	str	r3, [r7, #32]
    return(posture);
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c5a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5a8:	b672      	cpsid	i
    return(int_posture);
 800c5aa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c5ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5b2:	4a33      	ldr	r2, [pc, #204]	; (800c680 <_tx_semaphore_cleanup+0xec>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d158      	bne.n	800c66a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d152      	bne.n	800c66a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d04c      	beq.n	800c66a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a2b      	ldr	r2, [pc, #172]	; (800c684 <_tx_semaphore_cleanup+0xf0>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d147      	bne.n	800c66a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d043      	beq.n	800c66a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	1e5a      	subs	r2, r3, #1
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d103      	bne.n	800c606 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	2200      	movs	r2, #0
 800c602:	60da      	str	r2, [r3, #12]
 800c604:	e013      	b.n	800c62e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c60a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c610:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c616:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c61c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d102      	bne.n	800c62e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c62c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c632:	2b06      	cmp	r3, #6
 800c634:	d119      	bne.n	800c66a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	220d      	movs	r2, #13
 800c63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c63e:	4b12      	ldr	r3, [pc, #72]	; (800c688 <_tx_semaphore_cleanup+0xf4>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3301      	adds	r3, #1
 800c644:	4a10      	ldr	r2, [pc, #64]	; (800c688 <_tx_semaphore_cleanup+0xf4>)
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f383 8810 	msr	PRIMASK, r3
}
 800c652:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fd57 	bl	800d108 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c65a:	f3ef 8310 	mrs	r3, PRIMASK
 800c65e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c660:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c662:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c664:	b672      	cpsid	i
    return(int_posture);
 800c666:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
 800c66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f383 8810 	msr	PRIMASK, r3
}
 800c674:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c676:	bf00      	nop
 800c678:	3738      	adds	r7, #56	; 0x38
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	0800c595 	.word	0x0800c595
 800c684:	53454d41 	.word	0x53454d41
 800c688:	2000171c 	.word	0x2000171c

0800c68c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b092      	sub	sp, #72	; 0x48
 800c690:	af02      	add	r7, sp, #8
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c698:	221c      	movs	r2, #28
 800c69a:	2100      	movs	r1, #0
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f008 fb9b 	bl	8014dd8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c6b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6b8:	b672      	cpsid	i
    return(int_posture);
 800c6ba:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c6bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4a56      	ldr	r2, [pc, #344]	; (800c81c <_tx_semaphore_create+0x190>)
 800c6c2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c6c4:	4b56      	ldr	r3, [pc, #344]	; (800c820 <_tx_semaphore_create+0x194>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c6cc:	4a55      	ldr	r2, [pc, #340]	; (800c824 <_tx_semaphore_create+0x198>)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	619a      	str	r2, [r3, #24]
 800c6de:	e011      	b.n	800c704 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c6e0:	4b50      	ldr	r3, [pc, #320]	; (800c824 <_tx_semaphore_create+0x198>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c704:	4b46      	ldr	r3, [pc, #280]	; (800c820 <_tx_semaphore_create+0x194>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3301      	adds	r3, #1
 800c70a:	4a45      	ldr	r2, [pc, #276]	; (800c820 <_tx_semaphore_create+0x194>)
 800c70c:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c70e:	2300      	movs	r3, #0
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	68f9      	ldr	r1, [r7, #12]
 800c718:	2004      	movs	r0, #4
 800c71a:	f001 fc17 	bl	800df4c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c71e:	4b42      	ldr	r3, [pc, #264]	; (800c828 <_tx_semaphore_create+0x19c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d06c      	beq.n	800c804 <_tx_semaphore_create+0x178>
 800c72a:	4b40      	ldr	r3, [pc, #256]	; (800c82c <_tx_semaphore_create+0x1a0>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c732:	2b00      	cmp	r3, #0
 800c734:	d066      	beq.n	800c804 <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c736:	f3ef 8305 	mrs	r3, IPSR
 800c73a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c73c:	69fa      	ldr	r2, [r7, #28]
 800c73e:	4b3c      	ldr	r3, [pc, #240]	; (800c830 <_tx_semaphore_create+0x1a4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4313      	orrs	r3, r2
 800c744:	62bb      	str	r3, [r7, #40]	; 0x28
 800c746:	4b3b      	ldr	r3, [pc, #236]	; (800c834 <_tx_semaphore_create+0x1a8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10b      	bne.n	800c76a <_tx_semaphore_create+0xde>
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75c:	041a      	lsls	r2, r3, #16
 800c75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c760:	4313      	orrs	r3, r2
 800c762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c768:	e00e      	b.n	800c788 <_tx_semaphore_create+0xfc>
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c770:	d205      	bcs.n	800c77e <_tx_semaphore_create+0xf2>
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c776:	f04f 33ff 	mov.w	r3, #4294967295
 800c77a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c77c:	e004      	b.n	800c788 <_tx_semaphore_create+0xfc>
 800c77e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c792:	605a      	str	r2, [r3, #4]
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2251      	movs	r2, #81	; 0x51
 800c798:	609a      	str	r2, [r3, #8]
 800c79a:	4b27      	ldr	r3, [pc, #156]	; (800c838 <_tx_semaphore_create+0x1ac>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	611a      	str	r2, [r3, #16]
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	615a      	str	r2, [r3, #20]
 800c7ae:	f107 0214 	add.w	r2, r7, #20
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	619a      	str	r2, [r3, #24]
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	61da      	str	r2, [r3, #28]
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	3320      	adds	r3, #32
 800c7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7c2:	4b1e      	ldr	r3, [pc, #120]	; (800c83c <_tx_semaphore_create+0x1b0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d314      	bcc.n	800c7f6 <_tx_semaphore_create+0x16a>
 800c7cc:	4b1c      	ldr	r3, [pc, #112]	; (800c840 <_tx_semaphore_create+0x1b4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7d2:	4a15      	ldr	r2, [pc, #84]	; (800c828 <_tx_semaphore_create+0x19c>)
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	6013      	str	r3, [r2, #0]
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <_tx_semaphore_create+0x1b8>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7de:	621a      	str	r2, [r3, #32]
 800c7e0:	4b19      	ldr	r3, [pc, #100]	; (800c848 <_tx_semaphore_create+0x1bc>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00d      	beq.n	800c804 <_tx_semaphore_create+0x178>
 800c7e8:	4b17      	ldr	r3, [pc, #92]	; (800c848 <_tx_semaphore_create+0x1bc>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a15      	ldr	r2, [pc, #84]	; (800c844 <_tx_semaphore_create+0x1b8>)
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	e006      	b.n	800c804 <_tx_semaphore_create+0x178>
 800c7f6:	4a0c      	ldr	r2, [pc, #48]	; (800c828 <_tx_semaphore_create+0x19c>)
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	4b11      	ldr	r3, [pc, #68]	; (800c844 <_tx_semaphore_create+0x1b8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c802:	621a      	str	r2, [r3, #32]
 800c804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c806:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	f383 8810 	msr	PRIMASK, r3
}
 800c80e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3740      	adds	r7, #64	; 0x40
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	53454d41 	.word	0x53454d41
 800c820:	20001650 	.word	0x20001650
 800c824:	2000164c 	.word	0x2000164c
 800c828:	20001ca0 	.word	0x20001ca0
 800c82c:	20001ca4 	.word	0x20001ca4
 800c830:	2000000c 	.word	0x2000000c
 800c834:	20001684 	.word	0x20001684
 800c838:	e0001004 	.word	0xe0001004
 800c83c:	20001c9c 	.word	0x20001c9c
 800c840:	20001c98 	.word	0x20001c98
 800c844:	20001c8c 	.word	0x20001c8c
 800c848:	20001ca8 	.word	0x20001ca8

0800c84c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b092      	sub	sp, #72	; 0x48
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c856:	2300      	movs	r3, #0
 800c858:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c85a:	f3ef 8310 	mrs	r3, PRIMASK
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c862:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c864:	b672      	cpsid	i
    return(int_posture);
 800c866:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c868:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c86a:	4b78      	ldr	r3, [pc, #480]	; (800ca4c <_tx_semaphore_get+0x200>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	637b      	str	r3, [r7, #52]	; 0x34
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	2b00      	cmp	r3, #0
 800c874:	d06d      	beq.n	800c952 <_tx_semaphore_get+0x106>
 800c876:	4b76      	ldr	r3, [pc, #472]	; (800ca50 <_tx_semaphore_get+0x204>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d067      	beq.n	800c952 <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c882:	f3ef 8305 	mrs	r3, IPSR
 800c886:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c888:	69fa      	ldr	r2, [r7, #28]
 800c88a:	4b72      	ldr	r3, [pc, #456]	; (800ca54 <_tx_semaphore_get+0x208>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4313      	orrs	r3, r2
 800c890:	633b      	str	r3, [r7, #48]	; 0x30
 800c892:	4b71      	ldr	r3, [pc, #452]	; (800ca58 <_tx_semaphore_get+0x20c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10b      	bne.n	800c8b6 <_tx_semaphore_get+0x6a>
 800c89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a8:	041a      	lsls	r2, r3, #16
 800c8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8b2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8b4:	e00e      	b.n	800c8d4 <_tx_semaphore_get+0x88>
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c8bc:	d205      	bcs.n	800c8ca <_tx_semaphore_get+0x7e>
 800c8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c8:	e004      	b.n	800c8d4 <_tx_semaphore_get+0x88>
 800c8ca:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8de:	605a      	str	r2, [r3, #4]
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e2:	2253      	movs	r2, #83	; 0x53
 800c8e4:	609a      	str	r2, [r3, #8]
 800c8e6:	4b5d      	ldr	r3, [pc, #372]	; (800ca5c <_tx_semaphore_get+0x210>)
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ec:	60da      	str	r2, [r3, #12]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f2:	611a      	str	r2, [r3, #16]
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	615a      	str	r2, [r3, #20]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689a      	ldr	r2, [r3, #8]
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	619a      	str	r2, [r3, #24]
 800c902:	f107 0208 	add.w	r2, r7, #8
 800c906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c908:	61da      	str	r2, [r3, #28]
 800c90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90c:	3320      	adds	r3, #32
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
 800c910:	4b53      	ldr	r3, [pc, #332]	; (800ca60 <_tx_semaphore_get+0x214>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c916:	429a      	cmp	r2, r3
 800c918:	d314      	bcc.n	800c944 <_tx_semaphore_get+0xf8>
 800c91a:	4b52      	ldr	r3, [pc, #328]	; (800ca64 <_tx_semaphore_get+0x218>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	637b      	str	r3, [r7, #52]	; 0x34
 800c920:	4a4a      	ldr	r2, [pc, #296]	; (800ca4c <_tx_semaphore_get+0x200>)
 800c922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	4b50      	ldr	r3, [pc, #320]	; (800ca68 <_tx_semaphore_get+0x21c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c92c:	621a      	str	r2, [r3, #32]
 800c92e:	4b4f      	ldr	r3, [pc, #316]	; (800ca6c <_tx_semaphore_get+0x220>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00d      	beq.n	800c952 <_tx_semaphore_get+0x106>
 800c936:	4b4d      	ldr	r3, [pc, #308]	; (800ca6c <_tx_semaphore_get+0x220>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a4b      	ldr	r2, [pc, #300]	; (800ca68 <_tx_semaphore_get+0x21c>)
 800c93c:	6812      	ldr	r2, [r2, #0]
 800c93e:	4610      	mov	r0, r2
 800c940:	4798      	blx	r3
 800c942:	e006      	b.n	800c952 <_tx_semaphore_get+0x106>
 800c944:	4a41      	ldr	r2, [pc, #260]	; (800ca4c <_tx_semaphore_get+0x200>)
 800c946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	4b47      	ldr	r3, [pc, #284]	; (800ca68 <_tx_semaphore_get+0x21c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c950:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	1e5a      	subs	r2, r3, #1
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	609a      	str	r2, [r3, #8]
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f383 8810 	msr	PRIMASK, r3
}
 800c96e:	e068      	b.n	800ca42 <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d05d      	beq.n	800ca32 <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c976:	4b3e      	ldr	r3, [pc, #248]	; (800ca70 <_tx_semaphore_get+0x224>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d008      	beq.n	800c990 <_tx_semaphore_get+0x144>
 800c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c980:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f383 8810 	msr	PRIMASK, r3
}
 800c988:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c98a:	230d      	movs	r3, #13
 800c98c:	647b      	str	r3, [r7, #68]	; 0x44
 800c98e:	e058      	b.n	800ca42 <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c990:	4b31      	ldr	r3, [pc, #196]	; (800ca58 <_tx_semaphore_get+0x20c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	4a36      	ldr	r2, [pc, #216]	; (800ca74 <_tx_semaphore_get+0x228>)
 800c99a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c9a8:	3201      	adds	r2, #1
 800c9aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	675a      	str	r2, [r3, #116]	; 0x74
 800c9c8:	e011      	b.n	800c9ee <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d4:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e0:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	1c5a      	adds	r2, r3, #1
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2206      	movs	r2, #6
 800c9fc:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2201      	movs	r2, #1
 800ca02:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ca0a:	4b19      	ldr	r3, [pc, #100]	; (800ca70 <_tx_semaphore_get+0x224>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	4a17      	ldr	r2, [pc, #92]	; (800ca70 <_tx_semaphore_get+0x224>)
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f383 8810 	msr	PRIMASK, r3
}
 800ca1e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fd2a 	bl	800d47c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca30:	e007      	b.n	800ca42 <_tx_semaphore_get+0x1f6>
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f383 8810 	msr	PRIMASK, r3
}
 800ca3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800ca3e:	230d      	movs	r3, #13
 800ca40:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800ca42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3748      	adds	r7, #72	; 0x48
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20001ca0 	.word	0x20001ca0
 800ca50:	20001ca4 	.word	0x20001ca4
 800ca54:	2000000c 	.word	0x2000000c
 800ca58:	20001684 	.word	0x20001684
 800ca5c:	e0001004 	.word	0xe0001004
 800ca60:	20001c9c 	.word	0x20001c9c
 800ca64:	20001c98 	.word	0x20001c98
 800ca68:	20001c8c 	.word	0x20001c8c
 800ca6c:	20001ca8 	.word	0x20001ca8
 800ca70:	2000171c 	.word	0x2000171c
 800ca74:	0800c595 	.word	0x0800c595

0800ca78 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b09a      	sub	sp, #104	; 0x68
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ca86:	2300      	movs	r3, #0
 800ca88:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ca8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca8c:	21ef      	movs	r1, #239	; 0xef
 800ca8e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ca90:	f008 f9a2 	bl	8014dd8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ca94:	22b0      	movs	r2, #176	; 0xb0
 800ca96:	2100      	movs	r1, #0
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f008 f99d 	bl	8014dd8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cab4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800caba:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cac6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cace:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cad4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2220      	movs	r2, #32
 800cada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae4:	3b01      	subs	r3, #1
 800cae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cae8:	4413      	add	r3, r2
 800caea:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caf0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800caf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800caf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d007      	beq.n	800cb0a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cb08:	e006      	b.n	800cb18 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb0e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4a86      	ldr	r2, [pc, #536]	; (800cd3c <_tx_thread_create+0x2c4>)
 800cb22:	655a      	str	r2, [r3, #84]	; 0x54
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cb2a:	4985      	ldr	r1, [pc, #532]	; (800cd40 <_tx_thread_create+0x2c8>)
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7f3 fc4d 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb32:	f3ef 8310 	mrs	r3, PRIMASK
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cb3a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb3c:	b672      	cpsid	i
    return(int_posture);
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cb40:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	4a7f      	ldr	r2, [pc, #508]	; (800cd44 <_tx_thread_create+0x2cc>)
 800cb46:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cb48:	4b7f      	ldr	r3, [pc, #508]	; (800cd48 <_tx_thread_create+0x2d0>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10b      	bne.n	800cb68 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cb50:	4a7e      	ldr	r2, [pc, #504]	; (800cd4c <_tx_thread_create+0x2d4>)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800cb66:	e016      	b.n	800cb96 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cb68:	4b78      	ldr	r3, [pc, #480]	; (800cd4c <_tx_thread_create+0x2d4>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb74:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cb7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cb96:	4b6c      	ldr	r3, [pc, #432]	; (800cd48 <_tx_thread_create+0x2d0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4a6a      	ldr	r2, [pc, #424]	; (800cd48 <_tx_thread_create+0x2d0>)
 800cb9e:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800cba0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	4613      	mov	r3, r2
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	68f9      	ldr	r1, [r7, #12]
 800cbac:	2001      	movs	r0, #1
 800cbae:	f001 f9cd 	bl	800df4c <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800cbb2:	4b67      	ldr	r3, [pc, #412]	; (800cd50 <_tx_thread_create+0x2d8>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d06b      	beq.n	800cc96 <_tx_thread_create+0x21e>
 800cbbe:	4b65      	ldr	r3, [pc, #404]	; (800cd54 <_tx_thread_create+0x2dc>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d065      	beq.n	800cc96 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cbca:	f3ef 8305 	mrs	r3, IPSR
 800cbce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800cbd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd2:	4b61      	ldr	r3, [pc, #388]	; (800cd58 <_tx_thread_create+0x2e0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbda:	4b60      	ldr	r3, [pc, #384]	; (800cd5c <_tx_thread_create+0x2e4>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10b      	bne.n	800cbfe <_tx_thread_create+0x186>
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbea:	657b      	str	r3, [r7, #84]	; 0x54
 800cbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf0:	041a      	lsls	r2, r3, #16
 800cbf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbfa:	657b      	str	r3, [r7, #84]	; 0x54
 800cbfc:	e00e      	b.n	800cc1c <_tx_thread_create+0x1a4>
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc04:	d205      	bcs.n	800cc12 <_tx_thread_create+0x19a>
 800cc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc08:	657b      	str	r3, [r7, #84]	; 0x54
 800cc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0e:	653b      	str	r3, [r7, #80]	; 0x50
 800cc10:	e004      	b.n	800cc1c <_tx_thread_create+0x1a4>
 800cc12:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cc16:	653b      	str	r3, [r7, #80]	; 0x50
 800cc18:	2300      	movs	r3, #0
 800cc1a:	657b      	str	r3, [r7, #84]	; 0x54
 800cc1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc26:	605a      	str	r2, [r3, #4]
 800cc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2a:	2264      	movs	r2, #100	; 0x64
 800cc2c:	609a      	str	r2, [r3, #8]
 800cc2e:	4b4c      	ldr	r3, [pc, #304]	; (800cd60 <_tx_thread_create+0x2e8>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	60da      	str	r2, [r3, #12]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc3a:	611a      	str	r2, [r3, #16]
 800cc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc40:	615a      	str	r2, [r3, #20]
 800cc42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc46:	619a      	str	r2, [r3, #24]
 800cc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc4c:	61da      	str	r2, [r3, #28]
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc50:	3320      	adds	r3, #32
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc54:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <_tx_thread_create+0x2ec>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d314      	bcc.n	800cc88 <_tx_thread_create+0x210>
 800cc5e:	4b42      	ldr	r3, [pc, #264]	; (800cd68 <_tx_thread_create+0x2f0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc64:	4a3a      	ldr	r2, [pc, #232]	; (800cd50 <_tx_thread_create+0x2d8>)
 800cc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	4b40      	ldr	r3, [pc, #256]	; (800cd6c <_tx_thread_create+0x2f4>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc70:	621a      	str	r2, [r3, #32]
 800cc72:	4b3f      	ldr	r3, [pc, #252]	; (800cd70 <_tx_thread_create+0x2f8>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00d      	beq.n	800cc96 <_tx_thread_create+0x21e>
 800cc7a:	4b3d      	ldr	r3, [pc, #244]	; (800cd70 <_tx_thread_create+0x2f8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a3b      	ldr	r2, [pc, #236]	; (800cd6c <_tx_thread_create+0x2f4>)
 800cc80:	6812      	ldr	r2, [r2, #0]
 800cc82:	4610      	mov	r0, r2
 800cc84:	4798      	blx	r3
 800cc86:	e006      	b.n	800cc96 <_tx_thread_create+0x21e>
 800cc88:	4a31      	ldr	r2, [pc, #196]	; (800cd50 <_tx_thread_create+0x2d8>)
 800cc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	4b37      	ldr	r3, [pc, #220]	; (800cd6c <_tx_thread_create+0x2f4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc94:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cc96:	4b37      	ldr	r3, [pc, #220]	; (800cd74 <_tx_thread_create+0x2fc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	4a35      	ldr	r2, [pc, #212]	; (800cd74 <_tx_thread_create+0x2fc>)
 800cc9e:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d129      	bne.n	800ccfa <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cca6:	f3ef 8305 	mrs	r3, IPSR
 800ccaa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ccac:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ccae:	4b2a      	ldr	r3, [pc, #168]	; (800cd58 <_tx_thread_create+0x2e0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ccb8:	d30d      	bcc.n	800ccd6 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ccba:	4b2f      	ldr	r3, [pc, #188]	; (800cd78 <_tx_thread_create+0x300>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ccc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ccc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccca:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd2:	63da      	str	r2, [r3, #60]	; 0x3c
 800ccd4:	e001      	b.n	800ccda <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce0:	f383 8810 	msr	PRIMASK, r3
}
 800cce4:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f000 fa0e 	bl	800d108 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ccec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01e      	beq.n	800cd30 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ccf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccf6:	63da      	str	r2, [r3, #60]	; 0x3c
 800ccf8:	e01a      	b.n	800cd30 <_tx_thread_create+0x2b8>
 800ccfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccfc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f383 8810 	msr	PRIMASK, r3
}
 800cd04:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd06:	f3ef 8310 	mrs	r3, PRIMASK
 800cd0a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cd0e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd10:	b672      	cpsid	i
    return(int_posture);
 800cd12:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cd14:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cd16:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <_tx_thread_create+0x2fc>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	4a15      	ldr	r2, [pc, #84]	; (800cd74 <_tx_thread_create+0x2fc>)
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd22:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	f383 8810 	msr	PRIMASK, r3
}
 800cd2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cd2c:	f000 f9b2 	bl	800d094 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3760      	adds	r7, #96	; 0x60
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	0800da1d 	.word	0x0800da1d
 800cd40:	0800cdf9 	.word	0x0800cdf9
 800cd44:	54485244 	.word	0x54485244
 800cd48:	20001690 	.word	0x20001690
 800cd4c:	2000168c 	.word	0x2000168c
 800cd50:	20001ca0 	.word	0x20001ca0
 800cd54:	20001ca4 	.word	0x20001ca4
 800cd58:	2000000c 	.word	0x2000000c
 800cd5c:	20001684 	.word	0x20001684
 800cd60:	e0001004 	.word	0xe0001004
 800cd64:	20001c9c 	.word	0x20001c9c
 800cd68:	20001c98 	.word	0x20001c98
 800cd6c:	20001c8c 	.word	0x20001c8c
 800cd70:	20001ca8 	.word	0x20001ca8
 800cd74:	2000171c 	.word	0x2000171c
 800cd78:	20001688 	.word	0x20001688

0800cd7c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cd80:	4b13      	ldr	r3, [pc, #76]	; (800cdd0 <_tx_thread_initialize+0x54>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cd86:	4b13      	ldr	r3, [pc, #76]	; (800cdd4 <_tx_thread_initialize+0x58>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <_tx_thread_initialize+0x5c>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd92:	4b12      	ldr	r3, [pc, #72]	; (800cddc <_tx_thread_initialize+0x60>)
 800cd94:	2220      	movs	r2, #32
 800cd96:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cd98:	2280      	movs	r2, #128	; 0x80
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4810      	ldr	r0, [pc, #64]	; (800cde0 <_tx_thread_initialize+0x64>)
 800cd9e:	f008 f81b 	bl	8014dd8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cda2:	4b10      	ldr	r3, [pc, #64]	; (800cde4 <_tx_thread_initialize+0x68>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cda8:	4b0f      	ldr	r3, [pc, #60]	; (800cde8 <_tx_thread_initialize+0x6c>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <_tx_thread_initialize+0x70>)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <_tx_thread_initialize+0x74>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cdba:	4b0e      	ldr	r3, [pc, #56]	; (800cdf4 <_tx_thread_initialize+0x78>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cdc2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cdc6:	4a0b      	ldr	r2, [pc, #44]	; (800cdf4 <_tx_thread_initialize+0x78>)
 800cdc8:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cdca:	bf00      	nop
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20001684 	.word	0x20001684
 800cdd4:	20001688 	.word	0x20001688
 800cdd8:	20001694 	.word	0x20001694
 800cddc:	20001698 	.word	0x20001698
 800cde0:	2000169c 	.word	0x2000169c
 800cde4:	2000168c 	.word	0x2000168c
 800cde8:	20001690 	.word	0x20001690
 800cdec:	2000171c 	.word	0x2000171c
 800cdf0:	20001720 	.word	0x20001720
 800cdf4:	20001724 	.word	0x20001724

0800cdf8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cdfe:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <_tx_thread_shell_entry+0x8c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce08:	69fa      	ldr	r2, [r7, #28]
 800ce0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ce10:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <_tx_thread_shell_entry+0x90>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ce18:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <_tx_thread_shell_entry+0x90>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69f8      	ldr	r0, [r7, #28]
 800ce1e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce20:	f3ef 8310 	mrs	r3, PRIMASK
 800ce24:	607b      	str	r3, [r7, #4]
    return(posture);
 800ce26:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ce28:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce2a:	b672      	cpsid	i
    return(int_posture);
 800ce2c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ce2e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	2201      	movs	r2, #1
 800ce34:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ce42:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <_tx_thread_shell_entry+0x94>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	4a10      	ldr	r2, [pc, #64]	; (800ce8c <_tx_thread_shell_entry+0x94>)
 800ce4a:	6013      	str	r3, [r2, #0]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	f383 8810 	msr	PRIMASK, r3
}
 800ce56:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ce58:	f3ef 8314 	mrs	r3, CONTROL
 800ce5c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ce5e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ce60:	617b      	str	r3, [r7, #20]
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f023 0304 	bic.w	r3, r3, #4
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f383 8814 	msr	CONTROL, r3
}
 800ce74:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ce76:	69f8      	ldr	r0, [r7, #28]
 800ce78:	f000 fb00 	bl	800d47c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ce7c:	bf00      	nop
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20001684 	.word	0x20001684
 800ce88:	20001720 	.word	0x20001720
 800ce8c:	2000171c 	.word	0x2000171c

0800ce90 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b094      	sub	sp, #80	; 0x50
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce98:	f3ef 8310 	mrs	r3, PRIMASK
 800ce9c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cea0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cea2:	b672      	cpsid	i
    return(int_posture);
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cea6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cea8:	4b6f      	ldr	r3, [pc, #444]	; (800d068 <_tx_thread_sleep+0x1d8>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800ceae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d108      	bne.n	800cec6 <_tx_thread_sleep+0x36>
 800ceb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	f383 8810 	msr	PRIMASK, r3
}
 800cebe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cec0:	2313      	movs	r3, #19
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e0ca      	b.n	800d05c <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cec6:	f3ef 8305 	mrs	r3, IPSR
 800ceca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cece:	4b67      	ldr	r3, [pc, #412]	; (800d06c <_tx_thread_sleep+0x1dc>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d008      	beq.n	800ceea <_tx_thread_sleep+0x5a>
 800ced8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	f383 8810 	msr	PRIMASK, r3
}
 800cee2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cee4:	2313      	movs	r3, #19
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e0b8      	b.n	800d05c <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ceea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceec:	4a60      	ldr	r2, [pc, #384]	; (800d070 <_tx_thread_sleep+0x1e0>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d108      	bne.n	800cf04 <_tx_thread_sleep+0x74>
 800cef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	f383 8810 	msr	PRIMASK, r3
}
 800cefc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cefe:	2313      	movs	r3, #19
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	e0ab      	b.n	800d05c <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d108      	bne.n	800cf1c <_tx_thread_sleep+0x8c>
 800cf0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f383 8810 	msr	PRIMASK, r3
}
 800cf14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	e09f      	b.n	800d05c <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cf1c:	4b55      	ldr	r3, [pc, #340]	; (800d074 <_tx_thread_sleep+0x1e4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d008      	beq.n	800cf36 <_tx_thread_sleep+0xa6>
 800cf24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	f383 8810 	msr	PRIMASK, r3
}
 800cf2e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cf30:	2313      	movs	r3, #19
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e092      	b.n	800d05c <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800cf36:	4b50      	ldr	r3, [pc, #320]	; (800d078 <_tx_thread_sleep+0x1e8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d06d      	beq.n	800d01e <_tx_thread_sleep+0x18e>
 800cf42:	4b4e      	ldr	r3, [pc, #312]	; (800d07c <_tx_thread_sleep+0x1ec>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d067      	beq.n	800d01e <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf4e:	f3ef 8305 	mrs	r3, IPSR
 800cf52:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	4b45      	ldr	r3, [pc, #276]	; (800d06c <_tx_thread_sleep+0x1dc>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf5e:	4b42      	ldr	r3, [pc, #264]	; (800d068 <_tx_thread_sleep+0x1d8>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10b      	bne.n	800cf82 <_tx_thread_sleep+0xf2>
 800cf6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf74:	041a      	lsls	r2, r3, #16
 800cf76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf80:	e00e      	b.n	800cfa0 <_tx_thread_sleep+0x110>
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf88:	d205      	bcs.n	800cf96 <_tx_thread_sleep+0x106>
 800cf8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf92:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf94:	e004      	b.n	800cfa0 <_tx_thread_sleep+0x110>
 800cf96:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cf9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa4:	601a      	str	r2, [r3, #0]
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfaa:	605a      	str	r2, [r3, #4]
 800cfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfae:	2270      	movs	r2, #112	; 0x70
 800cfb0:	609a      	str	r2, [r3, #8]
 800cfb2:	4b33      	ldr	r3, [pc, #204]	; (800d080 <_tx_thread_sleep+0x1f0>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	611a      	str	r2, [r3, #16]
 800cfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc6:	615a      	str	r2, [r3, #20]
 800cfc8:	f107 020c 	add.w	r2, r7, #12
 800cfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfce:	619a      	str	r2, [r3, #24]
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	61da      	str	r2, [r3, #28]
 800cfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd8:	3320      	adds	r3, #32
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfdc:	4b29      	ldr	r3, [pc, #164]	; (800d084 <_tx_thread_sleep+0x1f4>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d314      	bcc.n	800d010 <_tx_thread_sleep+0x180>
 800cfe6:	4b28      	ldr	r3, [pc, #160]	; (800d088 <_tx_thread_sleep+0x1f8>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfec:	4a22      	ldr	r2, [pc, #136]	; (800d078 <_tx_thread_sleep+0x1e8>)
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	4b26      	ldr	r3, [pc, #152]	; (800d08c <_tx_thread_sleep+0x1fc>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cff8:	621a      	str	r2, [r3, #32]
 800cffa:	4b25      	ldr	r3, [pc, #148]	; (800d090 <_tx_thread_sleep+0x200>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00d      	beq.n	800d01e <_tx_thread_sleep+0x18e>
 800d002:	4b23      	ldr	r3, [pc, #140]	; (800d090 <_tx_thread_sleep+0x200>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a21      	ldr	r2, [pc, #132]	; (800d08c <_tx_thread_sleep+0x1fc>)
 800d008:	6812      	ldr	r2, [r2, #0]
 800d00a:	4610      	mov	r0, r2
 800d00c:	4798      	blx	r3
 800d00e:	e006      	b.n	800d01e <_tx_thread_sleep+0x18e>
 800d010:	4a19      	ldr	r2, [pc, #100]	; (800d078 <_tx_thread_sleep+0x1e8>)
 800d012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <_tx_thread_sleep+0x1fc>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d01c:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d020:	2204      	movs	r2, #4
 800d022:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d026:	2201      	movs	r2, #1
 800d028:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02c:	2200      	movs	r2, #0
 800d02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d038:	4b0e      	ldr	r3, [pc, #56]	; (800d074 <_tx_thread_sleep+0x1e4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3301      	adds	r3, #1
 800d03e:	4a0d      	ldr	r2, [pc, #52]	; (800d074 <_tx_thread_sleep+0x1e4>)
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d044:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f383 8810 	msr	PRIMASK, r3
}
 800d04c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d04e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d050:	f000 fa14 	bl	800d47c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d05a:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d05c:	68fb      	ldr	r3, [r7, #12]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3750      	adds	r7, #80	; 0x50
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20001684 	.word	0x20001684
 800d06c:	2000000c 	.word	0x2000000c
 800d070:	200017cc 	.word	0x200017cc
 800d074:	2000171c 	.word	0x2000171c
 800d078:	20001ca0 	.word	0x20001ca0
 800d07c:	20001ca4 	.word	0x20001ca4
 800d080:	e0001004 	.word	0xe0001004
 800d084:	20001c9c 	.word	0x20001c9c
 800d088:	20001c98 	.word	0x20001c98
 800d08c:	20001c8c 	.word	0x20001c8c
 800d090:	20001ca8 	.word	0x20001ca8

0800d094 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d094:	b480      	push	{r7}
 800d096:	b089      	sub	sp, #36	; 0x24
 800d098:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d09a:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <_tx_thread_system_preempt_check+0x64>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d121      	bne.n	800d0ea <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d0a6:	4b15      	ldr	r3, [pc, #84]	; (800d0fc <_tx_thread_system_preempt_check+0x68>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d0ac:	4b14      	ldr	r3, [pc, #80]	; (800d100 <_tx_thread_system_preempt_check+0x6c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d017      	beq.n	800d0ea <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d0ba:	4b12      	ldr	r3, [pc, #72]	; (800d104 <_tx_thread_system_preempt_check+0x70>)
 800d0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0c2:	f3ef 8305 	mrs	r3, IPSR
 800d0c6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d0c8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10c      	bne.n	800d0e8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d0d2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d0d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d0d8:	b662      	cpsie	i
}
 800d0da:	bf00      	nop
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f383 8810 	msr	PRIMASK, r3
}
 800d0e6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d0e8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d0ea:	bf00      	nop
 800d0ec:	3724      	adds	r7, #36	; 0x24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	2000171c 	.word	0x2000171c
 800d0fc:	20001684 	.word	0x20001684
 800d100:	20001688 	.word	0x20001688
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b09e      	sub	sp, #120	; 0x78
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d110:	2300      	movs	r3, #0
 800d112:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d114:	f3ef 8310 	mrs	r3, PRIMASK
 800d118:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d11e:	b672      	cpsid	i
    return(int_posture);
 800d120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d122:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d005      	beq.n	800d138 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	334c      	adds	r3, #76	; 0x4c
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fdaf 	bl	800dc94 <_tx_timer_system_deactivate>
 800d136:	e002      	b.n	800d13e <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d13e:	4b8b      	ldr	r3, [pc, #556]	; (800d36c <_tx_thread_system_resume+0x264>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d144:	4b89      	ldr	r3, [pc, #548]	; (800d36c <_tx_thread_system_resume+0x264>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	663b      	str	r3, [r7, #96]	; 0x60
 800d14a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d06f      	beq.n	800d230 <_tx_thread_system_resume+0x128>
 800d150:	4b87      	ldr	r3, [pc, #540]	; (800d370 <_tx_thread_system_resume+0x268>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d069      	beq.n	800d230 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d15c:	f3ef 8305 	mrs	r3, IPSR
 800d160:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d164:	4b83      	ldr	r3, [pc, #524]	; (800d374 <_tx_thread_system_resume+0x26c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4313      	orrs	r3, r2
 800d16a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d16c:	4b82      	ldr	r3, [pc, #520]	; (800d378 <_tx_thread_system_resume+0x270>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10b      	bne.n	800d190 <_tx_thread_system_resume+0x88>
 800d178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17c:	673b      	str	r3, [r7, #112]	; 0x70
 800d17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	041a      	lsls	r2, r3, #16
 800d184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d186:	4313      	orrs	r3, r2
 800d188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d18c:	673b      	str	r3, [r7, #112]	; 0x70
 800d18e:	e00e      	b.n	800d1ae <_tx_thread_system_resume+0xa6>
 800d190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d192:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d196:	d205      	bcs.n	800d1a4 <_tx_thread_system_resume+0x9c>
 800d198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d19a:	673b      	str	r3, [r7, #112]	; 0x70
 800d19c:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1a2:	e004      	b.n	800d1ae <_tx_thread_system_resume+0xa6>
 800d1a4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d1a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	673b      	str	r3, [r7, #112]	; 0x70
 800d1ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d1b8:	605a      	str	r2, [r3, #4]
 800d1ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1bc:	2201      	movs	r2, #1
 800d1be:	609a      	str	r2, [r3, #8]
 800d1c0:	4b6e      	ldr	r3, [pc, #440]	; (800d37c <_tx_thread_system_resume+0x274>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1c6:	60da      	str	r2, [r3, #12]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1cc:	611a      	str	r2, [r3, #16]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1d4:	615a      	str	r2, [r3, #20]
 800d1d6:	f107 020c 	add.w	r2, r7, #12
 800d1da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1dc:	619a      	str	r2, [r3, #24]
 800d1de:	4b68      	ldr	r3, [pc, #416]	; (800d380 <_tx_thread_system_resume+0x278>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1e6:	61da      	str	r2, [r3, #28]
 800d1e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ea:	3320      	adds	r3, #32
 800d1ec:	663b      	str	r3, [r7, #96]	; 0x60
 800d1ee:	4b65      	ldr	r3, [pc, #404]	; (800d384 <_tx_thread_system_resume+0x27c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d314      	bcc.n	800d222 <_tx_thread_system_resume+0x11a>
 800d1f8:	4b63      	ldr	r3, [pc, #396]	; (800d388 <_tx_thread_system_resume+0x280>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	663b      	str	r3, [r7, #96]	; 0x60
 800d1fe:	4a5b      	ldr	r2, [pc, #364]	; (800d36c <_tx_thread_system_resume+0x264>)
 800d200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d202:	6013      	str	r3, [r2, #0]
 800d204:	4b61      	ldr	r3, [pc, #388]	; (800d38c <_tx_thread_system_resume+0x284>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d20a:	621a      	str	r2, [r3, #32]
 800d20c:	4b60      	ldr	r3, [pc, #384]	; (800d390 <_tx_thread_system_resume+0x288>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00d      	beq.n	800d230 <_tx_thread_system_resume+0x128>
 800d214:	4b5e      	ldr	r3, [pc, #376]	; (800d390 <_tx_thread_system_resume+0x288>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a5c      	ldr	r2, [pc, #368]	; (800d38c <_tx_thread_system_resume+0x284>)
 800d21a:	6812      	ldr	r2, [r2, #0]
 800d21c:	4610      	mov	r0, r2
 800d21e:	4798      	blx	r3
 800d220:	e006      	b.n	800d230 <_tx_thread_system_resume+0x128>
 800d222:	4a52      	ldr	r2, [pc, #328]	; (800d36c <_tx_thread_system_resume+0x264>)
 800d224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	4b58      	ldr	r3, [pc, #352]	; (800d38c <_tx_thread_system_resume+0x284>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d22e:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d23c:	4b55      	ldr	r3, [pc, #340]	; (800d394 <_tx_thread_system_resume+0x28c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3b01      	subs	r3, #1
 800d242:	4a54      	ldr	r2, [pc, #336]	; (800d394 <_tx_thread_system_resume+0x28c>)
 800d244:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f040 80b3 	bne.w	800d3b6 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 80c7 	beq.w	800d3e8 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f040 80a2 	bne.w	800d3a8 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d270:	4a49      	ldr	r2, [pc, #292]	; (800d398 <_tx_thread_system_resume+0x290>)
 800d272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d278:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d164      	bne.n	800d34a <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d280:	4945      	ldr	r1, [pc, #276]	; (800d398 <_tx_thread_system_resume+0x290>)
 800d282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d296:	2201      	movs	r2, #1
 800d298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d29a:	fa02 f303 	lsl.w	r3, r2, r3
 800d29e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d2a0:	4b3e      	ldr	r3, [pc, #248]	; (800d39c <_tx_thread_system_resume+0x294>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	4a3c      	ldr	r2, [pc, #240]	; (800d39c <_tx_thread_system_resume+0x294>)
 800d2aa:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d2ac:	4b3c      	ldr	r3, [pc, #240]	; (800d3a0 <_tx_thread_system_resume+0x298>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	f080 8098 	bcs.w	800d3e8 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d2b8:	4a39      	ldr	r2, [pc, #228]	; (800d3a0 <_tx_thread_system_resume+0x298>)
 800d2ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2bc:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d2be:	4b30      	ldr	r3, [pc, #192]	; (800d380 <_tx_thread_system_resume+0x278>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d103      	bne.n	800d2d2 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d2ca:	4a2d      	ldr	r2, [pc, #180]	; (800d380 <_tx_thread_system_resume+0x278>)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	e08a      	b.n	800d3e8 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	f080 8085 	bcs.w	800d3e8 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d2de:	4a28      	ldr	r2, [pc, #160]	; (800d380 <_tx_thread_system_resume+0x278>)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d2e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d2ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d104      	bne.n	800d2fe <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d2f4:	4b22      	ldr	r3, [pc, #136]	; (800d380 <_tx_thread_system_resume+0x278>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2fc:	61da      	str	r2, [r3, #28]
 800d2fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d300:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	f383 8810 	msr	PRIMASK, r3
}
 800d308:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d30a:	4b22      	ldr	r3, [pc, #136]	; (800d394 <_tx_thread_system_resume+0x28c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d312:	2b00      	cmp	r3, #0
 800d314:	f040 80a1 	bne.w	800d45a <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d318:	4b22      	ldr	r3, [pc, #136]	; (800d3a4 <_tx_thread_system_resume+0x29c>)
 800d31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d320:	f3ef 8305 	mrs	r3, IPSR
 800d324:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 8098 	bne.w	800d45e <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d32e:	f3ef 8310 	mrs	r3, PRIMASK
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d338:	b662      	cpsie	i
}
 800d33a:	bf00      	nop
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	f383 8810 	msr	PRIMASK, r3
}
 800d346:	bf00      	nop
}
 800d348:	e089      	b.n	800d45e <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d34a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d360:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d366:	621a      	str	r2, [r3, #32]
 800d368:	e03e      	b.n	800d3e8 <_tx_thread_system_resume+0x2e0>
 800d36a:	bf00      	nop
 800d36c:	20001ca0 	.word	0x20001ca0
 800d370:	20001ca4 	.word	0x20001ca4
 800d374:	2000000c 	.word	0x2000000c
 800d378:	20001684 	.word	0x20001684
 800d37c:	e0001004 	.word	0xe0001004
 800d380:	20001688 	.word	0x20001688
 800d384:	20001c9c 	.word	0x20001c9c
 800d388:	20001c98 	.word	0x20001c98
 800d38c:	20001c8c 	.word	0x20001c8c
 800d390:	20001ca8 	.word	0x20001ca8
 800d394:	2000171c 	.word	0x2000171c
 800d398:	2000169c 	.word	0x2000169c
 800d39c:	20001694 	.word	0x20001694
 800d3a0:	20001698 	.word	0x20001698
 800d3a4:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	631a      	str	r2, [r3, #48]	; 0x30
 800d3b4:	e018      	b.n	800d3e8 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d014      	beq.n	800d3e8 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d010      	beq.n	800d3e8 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30
 800d3da:	e005      	b.n	800d3e8 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2203      	movs	r2, #3
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d009      	beq.n	800d402 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d3ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d104      	bne.n	800d402 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d3f8:	4b1c      	ldr	r3, [pc, #112]	; (800d46c <_tx_thread_system_resume+0x364>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d400:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d402:	4b1b      	ldr	r3, [pc, #108]	; (800d470 <_tx_thread_system_resume+0x368>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	647b      	str	r3, [r7, #68]	; 0x44
 800d408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d40a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	f383 8810 	msr	PRIMASK, r3
}
 800d412:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d414:	4b15      	ldr	r3, [pc, #84]	; (800d46c <_tx_thread_system_resume+0x364>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d022      	beq.n	800d464 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d41e:	4b15      	ldr	r3, [pc, #84]	; (800d474 <_tx_thread_system_resume+0x36c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d426:	2b00      	cmp	r3, #0
 800d428:	d11c      	bne.n	800d464 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d42a:	4b13      	ldr	r3, [pc, #76]	; (800d478 <_tx_thread_system_resume+0x370>)
 800d42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d430:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d432:	f3ef 8305 	mrs	r3, IPSR
 800d436:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d438:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d111      	bne.n	800d462 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d43e:	f3ef 8310 	mrs	r3, PRIMASK
 800d442:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d444:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d446:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d448:	b662      	cpsie	i
}
 800d44a:	bf00      	nop
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	f383 8810 	msr	PRIMASK, r3
}
 800d456:	bf00      	nop
}
 800d458:	e003      	b.n	800d462 <_tx_thread_system_resume+0x35a>
                                return;
 800d45a:	bf00      	nop
 800d45c:	e002      	b.n	800d464 <_tx_thread_system_resume+0x35c>
 800d45e:	bf00      	nop
 800d460:	e000      	b.n	800d464 <_tx_thread_system_resume+0x35c>
 800d462:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d464:	3778      	adds	r7, #120	; 0x78
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	20001688 	.word	0x20001688
 800d470:	20001684 	.word	0x20001684
 800d474:	2000171c 	.word	0x2000171c
 800d478:	e000ed04 	.word	0xe000ed04

0800d47c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b0a4      	sub	sp, #144	; 0x90
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d484:	2300      	movs	r3, #0
 800d486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d48a:	4b98      	ldr	r3, [pc, #608]	; (800d6ec <_tx_thread_system_suspend+0x270>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d492:	f3ef 8310 	mrs	r3, PRIMASK
 800d496:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d49a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d49c:	b672      	cpsid	i
    return(int_posture);
 800d49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d4a0:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d112      	bne.n	800d4d2 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b0:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d4b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4be:	d004      	beq.n	800d4ca <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	334c      	adds	r3, #76	; 0x4c
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fb83 	bl	800dbd0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	4a88      	ldr	r2, [pc, #544]	; (800d6f0 <_tx_thread_system_suspend+0x274>)
 800d4d0:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d4d2:	4b88      	ldr	r3, [pc, #544]	; (800d6f4 <_tx_thread_system_suspend+0x278>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	4a86      	ldr	r2, [pc, #536]	; (800d6f4 <_tx_thread_system_suspend+0x278>)
 800d4da:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	f040 817d 	bne.w	800d7e0 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d4e6:	4b84      	ldr	r3, [pc, #528]	; (800d6f8 <_tx_thread_system_suspend+0x27c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d4ec:	4b82      	ldr	r3, [pc, #520]	; (800d6f8 <_tx_thread_system_suspend+0x27c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	673b      	str	r3, [r7, #112]	; 0x70
 800d4f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d07c      	beq.n	800d5f2 <_tx_thread_system_suspend+0x176>
 800d4f8:	4b80      	ldr	r3, [pc, #512]	; (800d6fc <_tx_thread_system_suspend+0x280>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d076      	beq.n	800d5f2 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d504:	f3ef 8305 	mrs	r3, IPSR
 800d508:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d50a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d50c:	4b7c      	ldr	r3, [pc, #496]	; (800d700 <_tx_thread_system_suspend+0x284>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4313      	orrs	r3, r2
 800d512:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d514:	4b75      	ldr	r3, [pc, #468]	; (800d6ec <_tx_thread_system_suspend+0x270>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d110      	bne.n	800d544 <_tx_thread_system_suspend+0xc8>
 800d522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d52c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d532:	041a      	lsls	r2, r3, #16
 800d534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d538:	4313      	orrs	r3, r2
 800d53a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d53e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d542:	e013      	b.n	800d56c <_tx_thread_system_suspend+0xf0>
 800d544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d546:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d54a:	d208      	bcs.n	800d55e <_tx_thread_system_suspend+0xe2>
 800d54c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d554:	f04f 33ff 	mov.w	r3, #4294967295
 800d558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d55c:	e006      	b.n	800d56c <_tx_thread_system_suspend+0xf0>
 800d55e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d566:	2300      	movs	r3, #0
 800d568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d56c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d576:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d57a:	605a      	str	r2, [r3, #4]
 800d57c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d57e:	2202      	movs	r2, #2
 800d580:	609a      	str	r2, [r3, #8]
 800d582:	4b60      	ldr	r3, [pc, #384]	; (800d704 <_tx_thread_system_suspend+0x288>)
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d588:	60da      	str	r2, [r3, #12]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d58e:	611a      	str	r2, [r3, #16]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d596:	615a      	str	r2, [r3, #20]
 800d598:	f107 0208 	add.w	r2, r7, #8
 800d59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d59e:	619a      	str	r2, [r3, #24]
 800d5a0:	4b59      	ldr	r3, [pc, #356]	; (800d708 <_tx_thread_system_suspend+0x28c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5a8:	61da      	str	r2, [r3, #28]
 800d5aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5ac:	3320      	adds	r3, #32
 800d5ae:	673b      	str	r3, [r7, #112]	; 0x70
 800d5b0:	4b56      	ldr	r3, [pc, #344]	; (800d70c <_tx_thread_system_suspend+0x290>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d314      	bcc.n	800d5e4 <_tx_thread_system_suspend+0x168>
 800d5ba:	4b55      	ldr	r3, [pc, #340]	; (800d710 <_tx_thread_system_suspend+0x294>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	673b      	str	r3, [r7, #112]	; 0x70
 800d5c0:	4a4d      	ldr	r2, [pc, #308]	; (800d6f8 <_tx_thread_system_suspend+0x27c>)
 800d5c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	4b53      	ldr	r3, [pc, #332]	; (800d714 <_tx_thread_system_suspend+0x298>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5cc:	621a      	str	r2, [r3, #32]
 800d5ce:	4b52      	ldr	r3, [pc, #328]	; (800d718 <_tx_thread_system_suspend+0x29c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00d      	beq.n	800d5f2 <_tx_thread_system_suspend+0x176>
 800d5d6:	4b50      	ldr	r3, [pc, #320]	; (800d718 <_tx_thread_system_suspend+0x29c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a4e      	ldr	r2, [pc, #312]	; (800d714 <_tx_thread_system_suspend+0x298>)
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	4610      	mov	r0, r2
 800d5e0:	4798      	blx	r3
 800d5e2:	e006      	b.n	800d5f2 <_tx_thread_system_suspend+0x176>
 800d5e4:	4a44      	ldr	r2, [pc, #272]	; (800d6f8 <_tx_thread_system_suspend+0x27c>)
 800d5e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	4b4a      	ldr	r3, [pc, #296]	; (800d714 <_tx_thread_system_suspend+0x298>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5f0:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d5f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d003      	beq.n	800d600 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d5f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a1b      	ldr	r3, [r3, #32]
 800d610:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d016      	beq.n	800d648 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d624:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d628:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d62a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	4a3b      	ldr	r2, [pc, #236]	; (800d71c <_tx_thread_system_suspend+0x2a0>)
 800d630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	f040 8085 	bne.w	800d746 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	4937      	ldr	r1, [pc, #220]	; (800d71c <_tx_thread_system_suspend+0x2a0>)
 800d640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d646:	e07e      	b.n	800d746 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	4a34      	ldr	r2, [pc, #208]	; (800d71c <_tx_thread_system_suspend+0x2a0>)
 800d64c:	2100      	movs	r1, #0
 800d64e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	2201      	movs	r2, #1
 800d656:	fa02 f303 	lsl.w	r3, r2, r3
 800d65a:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d65c:	4b30      	ldr	r3, [pc, #192]	; (800d720 <_tx_thread_system_suspend+0x2a4>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d662:	43db      	mvns	r3, r3
 800d664:	4013      	ands	r3, r2
 800d666:	4a2e      	ldr	r2, [pc, #184]	; (800d720 <_tx_thread_system_suspend+0x2a4>)
 800d668:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d66a:	2300      	movs	r3, #0
 800d66c:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d66e:	4b2c      	ldr	r3, [pc, #176]	; (800d720 <_tx_thread_system_suspend+0x2a4>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d158      	bne.n	800d72c <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d67a:	4b2a      	ldr	r3, [pc, #168]	; (800d724 <_tx_thread_system_suspend+0x2a8>)
 800d67c:	2220      	movs	r2, #32
 800d67e:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d680:	4b21      	ldr	r3, [pc, #132]	; (800d708 <_tx_thread_system_suspend+0x28c>)
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d008      	beq.n	800d69e <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d68c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d694:	429a      	cmp	r2, r3
 800d696:	d102      	bne.n	800d69e <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d69a:	2200      	movs	r2, #0
 800d69c:	61da      	str	r2, [r3, #28]
 800d69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6a0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a4:	f383 8810 	msr	PRIMASK, r3
}
 800d6a8:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d6aa:	4b12      	ldr	r3, [pc, #72]	; (800d6f4 <_tx_thread_system_suspend+0x278>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f040 80bf 	bne.w	800d836 <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d6b8:	4b1b      	ldr	r3, [pc, #108]	; (800d728 <_tx_thread_system_suspend+0x2ac>)
 800d6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6be:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6c0:	f3ef 8305 	mrs	r3, IPSR
 800d6c4:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10c      	bne.n	800d6e6 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d6d4:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d6d6:	b662      	cpsie	i
}
 800d6d8:	bf00      	nop
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e0:	f383 8810 	msr	PRIMASK, r3
}
 800d6e4:	bf00      	nop
}
 800d6e6:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d6e8:	e0a5      	b.n	800d836 <_tx_thread_system_suspend+0x3ba>
 800d6ea:	bf00      	nop
 800d6ec:	20001684 	.word	0x20001684
 800d6f0:	20001c88 	.word	0x20001c88
 800d6f4:	2000171c 	.word	0x2000171c
 800d6f8:	20001ca0 	.word	0x20001ca0
 800d6fc:	20001ca4 	.word	0x20001ca4
 800d700:	2000000c 	.word	0x2000000c
 800d704:	e0001004 	.word	0xe0001004
 800d708:	20001688 	.word	0x20001688
 800d70c:	20001c9c 	.word	0x20001c9c
 800d710:	20001c98 	.word	0x20001c98
 800d714:	20001c8c 	.word	0x20001c8c
 800d718:	20001ca8 	.word	0x20001ca8
 800d71c:	2000169c 	.word	0x2000169c
 800d720:	20001694 	.word	0x20001694
 800d724:	20001698 	.word	0x20001698
 800d728:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72e:	fa93 f3a3 	rbit	r3, r3
 800d732:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d736:	fab3 f383 	clz	r3, r3
 800d73a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d73c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d73e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d740:	4413      	add	r3, r2
 800d742:	4a41      	ldr	r2, [pc, #260]	; (800d848 <_tx_thread_system_suspend+0x3cc>)
 800d744:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d746:	4b41      	ldr	r3, [pc, #260]	; (800d84c <_tx_thread_system_suspend+0x3d0>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d139      	bne.n	800d7c4 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d750:	4b3d      	ldr	r3, [pc, #244]	; (800d848 <_tx_thread_system_suspend+0x3cc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a3e      	ldr	r2, [pc, #248]	; (800d850 <_tx_thread_system_suspend+0x3d4>)
 800d756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d75a:	4a3c      	ldr	r2, [pc, #240]	; (800d84c <_tx_thread_system_suspend+0x3d0>)
 800d75c:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00a      	beq.n	800d77a <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d104      	bne.n	800d77a <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d770:	4b36      	ldr	r3, [pc, #216]	; (800d84c <_tx_thread_system_suspend+0x3d0>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d778:	61da      	str	r2, [r3, #28]
 800d77a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d77c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	f383 8810 	msr	PRIMASK, r3
}
 800d784:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d786:	4b33      	ldr	r3, [pc, #204]	; (800d854 <_tx_thread_system_suspend+0x3d8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d78c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d153      	bne.n	800d83a <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d792:	4b31      	ldr	r3, [pc, #196]	; (800d858 <_tx_thread_system_suspend+0x3dc>)
 800d794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d798:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d79a:	f3ef 8305 	mrs	r3, IPSR
 800d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10c      	bne.n	800d7c0 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d7aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d7ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7b0:	b662      	cpsie	i
}
 800d7b2:	bf00      	nop
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	f383 8810 	msr	PRIMASK, r3
}
 800d7be:	bf00      	nop
}
 800d7c0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d7c2:	e03a      	b.n	800d83a <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d7ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d104      	bne.n	800d7e0 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d7d6:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <_tx_thread_system_suspend+0x3d0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7de:	61da      	str	r2, [r3, #28]
 800d7e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f383 8810 	msr	PRIMASK, r3
}
 800d7ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <_tx_thread_system_suspend+0x3d0>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d022      	beq.n	800d83e <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7f8:	4b16      	ldr	r3, [pc, #88]	; (800d854 <_tx_thread_system_suspend+0x3d8>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d7fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11c      	bne.n	800d83e <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d804:	4b14      	ldr	r3, [pc, #80]	; (800d858 <_tx_thread_system_suspend+0x3dc>)
 800d806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d80c:	f3ef 8305 	mrs	r3, IPSR
 800d810:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d812:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10c      	bne.n	800d832 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d818:	f3ef 8310 	mrs	r3, PRIMASK
 800d81c:	617b      	str	r3, [r7, #20]
    return(posture);
 800d81e:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d820:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d822:	b662      	cpsie	i
}
 800d824:	bf00      	nop
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f383 8810 	msr	PRIMASK, r3
}
 800d830:	bf00      	nop
}
 800d832:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d834:	e003      	b.n	800d83e <_tx_thread_system_suspend+0x3c2>
                return;
 800d836:	bf00      	nop
 800d838:	e002      	b.n	800d840 <_tx_thread_system_suspend+0x3c4>
            return;
 800d83a:	bf00      	nop
 800d83c:	e000      	b.n	800d840 <_tx_thread_system_suspend+0x3c4>
    return;
 800d83e:	bf00      	nop
}
 800d840:	3790      	adds	r7, #144	; 0x90
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20001698 	.word	0x20001698
 800d84c:	20001688 	.word	0x20001688
 800d850:	2000169c 	.word	0x2000169c
 800d854:	2000171c 	.word	0x2000171c
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08e      	sub	sp, #56	; 0x38
 800d860:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d862:	4b5f      	ldr	r3, [pc, #380]	; (800d9e0 <_tx_thread_time_slice+0x184>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d868:	f3ef 8310 	mrs	r3, PRIMASK
 800d86c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d86e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d870:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d872:	b672      	cpsid	i
    return(int_posture);
 800d874:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d876:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d878:	4b5a      	ldr	r3, [pc, #360]	; (800d9e4 <_tx_thread_time_slice+0x188>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d024      	beq.n	800d8ce <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d120      	bne.n	800d8ce <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	69d2      	ldr	r2, [r2, #28]
 800d892:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	4a53      	ldr	r2, [pc, #332]	; (800d9e8 <_tx_thread_time_slice+0x18c>)
 800d89a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a1a      	ldr	r2, [r3, #32]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d013      	beq.n	800d8ce <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d10d      	bne.n	800d8ce <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	6a12      	ldr	r2, [r2, #32]
 800d8ba:	494c      	ldr	r1, [pc, #304]	; (800d9ec <_tx_thread_time_slice+0x190>)
 800d8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d8c0:	4b4b      	ldr	r3, [pc, #300]	; (800d9f0 <_tx_thread_time_slice+0x194>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a49      	ldr	r2, [pc, #292]	; (800d9ec <_tx_thread_time_slice+0x190>)
 800d8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ca:	4a4a      	ldr	r2, [pc, #296]	; (800d9f4 <_tx_thread_time_slice+0x198>)
 800d8cc:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8ce:	f3ef 8305 	mrs	r3, IPSR
 800d8d2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d8d4:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d8d6:	4b48      	ldr	r3, [pc, #288]	; (800d9f8 <_tx_thread_time_slice+0x19c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d8de:	4b47      	ldr	r3, [pc, #284]	; (800d9fc <_tx_thread_time_slice+0x1a0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d8e4:	4b46      	ldr	r3, [pc, #280]	; (800da00 <_tx_thread_time_slice+0x1a4>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	623b      	str	r3, [r7, #32]
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d06d      	beq.n	800d9cc <_tx_thread_time_slice+0x170>
 800d8f0:	4b44      	ldr	r3, [pc, #272]	; (800da04 <_tx_thread_time_slice+0x1a8>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0301 	and.w	r3, r3, #1
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d067      	beq.n	800d9cc <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8fc:	f3ef 8305 	mrs	r3, IPSR
 800d900:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	4b3c      	ldr	r3, [pc, #240]	; (800d9f8 <_tx_thread_time_slice+0x19c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4313      	orrs	r3, r2
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	4b34      	ldr	r3, [pc, #208]	; (800d9e0 <_tx_thread_time_slice+0x184>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	633b      	str	r3, [r7, #48]	; 0x30
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10b      	bne.n	800d930 <_tx_thread_time_slice+0xd4>
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d922:	041a      	lsls	r2, r3, #16
 800d924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d926:	4313      	orrs	r3, r2
 800d928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d92c:	637b      	str	r3, [r7, #52]	; 0x34
 800d92e:	e00e      	b.n	800d94e <_tx_thread_time_slice+0xf2>
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d936:	d205      	bcs.n	800d944 <_tx_thread_time_slice+0xe8>
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	637b      	str	r3, [r7, #52]	; 0x34
 800d93c:	f04f 33ff 	mov.w	r3, #4294967295
 800d940:	633b      	str	r3, [r7, #48]	; 0x30
 800d942:	e004      	b.n	800d94e <_tx_thread_time_slice+0xf2>
 800d944:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d948:	633b      	str	r3, [r7, #48]	; 0x30
 800d94a:	2300      	movs	r3, #0
 800d94c:	637b      	str	r3, [r7, #52]	; 0x34
 800d94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d950:	6a3b      	ldr	r3, [r7, #32]
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d958:	605a      	str	r2, [r3, #4]
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	2205      	movs	r2, #5
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <_tx_thread_time_slice+0x1ac>)
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	60da      	str	r2, [r3, #12]
 800d968:	4b22      	ldr	r3, [pc, #136]	; (800d9f4 <_tx_thread_time_slice+0x198>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	611a      	str	r2, [r3, #16]
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d976:	615a      	str	r2, [r3, #20]
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97c:	619a      	str	r2, [r3, #24]
 800d97e:	1d3a      	adds	r2, r7, #4
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	61da      	str	r2, [r3, #28]
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	3320      	adds	r3, #32
 800d988:	623b      	str	r3, [r7, #32]
 800d98a:	4b20      	ldr	r3, [pc, #128]	; (800da0c <_tx_thread_time_slice+0x1b0>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6a3a      	ldr	r2, [r7, #32]
 800d990:	429a      	cmp	r2, r3
 800d992:	d314      	bcc.n	800d9be <_tx_thread_time_slice+0x162>
 800d994:	4b1e      	ldr	r3, [pc, #120]	; (800da10 <_tx_thread_time_slice+0x1b4>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	623b      	str	r3, [r7, #32]
 800d99a:	4a19      	ldr	r2, [pc, #100]	; (800da00 <_tx_thread_time_slice+0x1a4>)
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	4b1c      	ldr	r3, [pc, #112]	; (800da14 <_tx_thread_time_slice+0x1b8>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6a3a      	ldr	r2, [r7, #32]
 800d9a6:	621a      	str	r2, [r3, #32]
 800d9a8:	4b1b      	ldr	r3, [pc, #108]	; (800da18 <_tx_thread_time_slice+0x1bc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00d      	beq.n	800d9cc <_tx_thread_time_slice+0x170>
 800d9b0:	4b19      	ldr	r3, [pc, #100]	; (800da18 <_tx_thread_time_slice+0x1bc>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a17      	ldr	r2, [pc, #92]	; (800da14 <_tx_thread_time_slice+0x1b8>)
 800d9b6:	6812      	ldr	r2, [r2, #0]
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	4798      	blx	r3
 800d9bc:	e006      	b.n	800d9cc <_tx_thread_time_slice+0x170>
 800d9be:	4a10      	ldr	r2, [pc, #64]	; (800da00 <_tx_thread_time_slice+0x1a4>)
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	4b13      	ldr	r3, [pc, #76]	; (800da14 <_tx_thread_time_slice+0x1b8>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6a3a      	ldr	r2, [r7, #32]
 800d9ca:	621a      	str	r2, [r3, #32]
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f383 8810 	msr	PRIMASK, r3
}
 800d9d6:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d9d8:	bf00      	nop
 800d9da:	3738      	adds	r7, #56	; 0x38
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	20001684 	.word	0x20001684
 800d9e4:	2000172c 	.word	0x2000172c
 800d9e8:	20001c88 	.word	0x20001c88
 800d9ec:	2000169c 	.word	0x2000169c
 800d9f0:	20001698 	.word	0x20001698
 800d9f4:	20001688 	.word	0x20001688
 800d9f8:	2000000c 	.word	0x2000000c
 800d9fc:	2000171c 	.word	0x2000171c
 800da00:	20001ca0 	.word	0x20001ca0
 800da04:	20001ca4 	.word	0x20001ca4
 800da08:	e0001004 	.word	0xe0001004
 800da0c:	20001c9c 	.word	0x20001c9c
 800da10:	20001c98 	.word	0x20001c98
 800da14:	20001c8c 	.word	0x20001c8c
 800da18:	20001ca8 	.word	0x20001ca8

0800da1c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da28:	f3ef 8310 	mrs	r3, PRIMASK
 800da2c:	617b      	str	r3, [r7, #20]
    return(posture);
 800da2e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800da30:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da32:	b672      	cpsid	i
    return(int_posture);
 800da34:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800da36:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d10e      	bne.n	800da5e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800da40:	4b13      	ldr	r3, [pc, #76]	; (800da90 <_tx_thread_timeout+0x74>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	4a12      	ldr	r2, [pc, #72]	; (800da90 <_tx_thread_timeout+0x74>)
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f383 8810 	msr	PRIMASK, r3
}
 800da54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800da56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da58:	f7ff fb56 	bl	800d108 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800da5c:	e013      	b.n	800da86 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da62:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	f383 8810 	msr	PRIMASK, r3
}
 800da76:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	69b9      	ldr	r1, [r7, #24]
 800da82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da84:	4798      	blx	r3
}
 800da86:	bf00      	nop
 800da88:	3728      	adds	r7, #40	; 0x28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	2000171c 	.word	0x2000171c

0800da94 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da9a:	f3ef 8310 	mrs	r3, PRIMASK
 800da9e:	607b      	str	r3, [r7, #4]
    return(posture);
 800daa0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800daa2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800daa4:	b672      	cpsid	i
    return(int_posture);
 800daa6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800daa8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800daaa:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <_tx_timer_expiration_process+0x3c>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3301      	adds	r3, #1
 800dab0:	4a07      	ldr	r2, [pc, #28]	; (800dad0 <_tx_timer_expiration_process+0x3c>)
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f383 8810 	msr	PRIMASK, r3
}
 800dabe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800dac0:	4804      	ldr	r0, [pc, #16]	; (800dad4 <_tx_timer_expiration_process+0x40>)
 800dac2:	f7ff fb21 	bl	800d108 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	2000171c 	.word	0x2000171c
 800dad4:	200017cc 	.word	0x200017cc

0800dad8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800dad8:	b590      	push	{r4, r7, lr}
 800dada:	b089      	sub	sp, #36	; 0x24
 800dadc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800dade:	4b28      	ldr	r3, [pc, #160]	; (800db80 <_tx_timer_initialize+0xa8>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800dae4:	4b27      	ldr	r3, [pc, #156]	; (800db84 <_tx_timer_initialize+0xac>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800daea:	4b27      	ldr	r3, [pc, #156]	; (800db88 <_tx_timer_initialize+0xb0>)
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800daf0:	4b26      	ldr	r3, [pc, #152]	; (800db8c <_tx_timer_initialize+0xb4>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800daf6:	4b26      	ldr	r3, [pc, #152]	; (800db90 <_tx_timer_initialize+0xb8>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800dafc:	2280      	movs	r2, #128	; 0x80
 800dafe:	2100      	movs	r1, #0
 800db00:	4824      	ldr	r0, [pc, #144]	; (800db94 <_tx_timer_initialize+0xbc>)
 800db02:	f007 f969 	bl	8014dd8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800db06:	4b24      	ldr	r3, [pc, #144]	; (800db98 <_tx_timer_initialize+0xc0>)
 800db08:	4a22      	ldr	r2, [pc, #136]	; (800db94 <_tx_timer_initialize+0xbc>)
 800db0a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800db0c:	4b23      	ldr	r3, [pc, #140]	; (800db9c <_tx_timer_initialize+0xc4>)
 800db0e:	4a21      	ldr	r2, [pc, #132]	; (800db94 <_tx_timer_initialize+0xbc>)
 800db10:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800db12:	4b23      	ldr	r3, [pc, #140]	; (800dba0 <_tx_timer_initialize+0xc8>)
 800db14:	4a23      	ldr	r2, [pc, #140]	; (800dba4 <_tx_timer_initialize+0xcc>)
 800db16:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800db18:	4b21      	ldr	r3, [pc, #132]	; (800dba0 <_tx_timer_initialize+0xc8>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	3304      	adds	r3, #4
 800db1e:	4a20      	ldr	r2, [pc, #128]	; (800dba0 <_tx_timer_initialize+0xc8>)
 800db20:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800db22:	4b21      	ldr	r3, [pc, #132]	; (800dba8 <_tx_timer_initialize+0xd0>)
 800db24:	4a21      	ldr	r2, [pc, #132]	; (800dbac <_tx_timer_initialize+0xd4>)
 800db26:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800db28:	4b21      	ldr	r3, [pc, #132]	; (800dbb0 <_tx_timer_initialize+0xd8>)
 800db2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db2e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800db30:	4b20      	ldr	r3, [pc, #128]	; (800dbb4 <_tx_timer_initialize+0xdc>)
 800db32:	2200      	movs	r2, #0
 800db34:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800db36:	4b1c      	ldr	r3, [pc, #112]	; (800dba8 <_tx_timer_initialize+0xd0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a1d      	ldr	r2, [pc, #116]	; (800dbb0 <_tx_timer_initialize+0xd8>)
 800db3c:	6812      	ldr	r2, [r2, #0]
 800db3e:	491d      	ldr	r1, [pc, #116]	; (800dbb4 <_tx_timer_initialize+0xdc>)
 800db40:	6809      	ldr	r1, [r1, #0]
 800db42:	481c      	ldr	r0, [pc, #112]	; (800dbb4 <_tx_timer_initialize+0xdc>)
 800db44:	6800      	ldr	r0, [r0, #0]
 800db46:	2400      	movs	r4, #0
 800db48:	9405      	str	r4, [sp, #20]
 800db4a:	2400      	movs	r4, #0
 800db4c:	9404      	str	r4, [sp, #16]
 800db4e:	9003      	str	r0, [sp, #12]
 800db50:	9102      	str	r1, [sp, #8]
 800db52:	9201      	str	r2, [sp, #4]
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	4b18      	ldr	r3, [pc, #96]	; (800dbb8 <_tx_timer_initialize+0xe0>)
 800db58:	4a18      	ldr	r2, [pc, #96]	; (800dbbc <_tx_timer_initialize+0xe4>)
 800db5a:	4919      	ldr	r1, [pc, #100]	; (800dbc0 <_tx_timer_initialize+0xe8>)
 800db5c:	4819      	ldr	r0, [pc, #100]	; (800dbc4 <_tx_timer_initialize+0xec>)
 800db5e:	f7fe ff8b 	bl	800ca78 <_tx_thread_create>
 800db62:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1e5      	bne.n	800db36 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800db6a:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <_tx_timer_initialize+0xf0>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800db70:	4b16      	ldr	r3, [pc, #88]	; (800dbcc <_tx_timer_initialize+0xf4>)
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd90      	pop	{r4, r7, pc}
 800db7e:	bf00      	nop
 800db80:	20001728 	.word	0x20001728
 800db84:	20001c88 	.word	0x20001c88
 800db88:	2000172c 	.word	0x2000172c
 800db8c:	200017bc 	.word	0x200017bc
 800db90:	200017c8 	.word	0x200017c8
 800db94:	20001730 	.word	0x20001730
 800db98:	200017b0 	.word	0x200017b0
 800db9c:	200017b8 	.word	0x200017b8
 800dba0:	200017b4 	.word	0x200017b4
 800dba4:	200017ac 	.word	0x200017ac
 800dba8:	2000187c 	.word	0x2000187c
 800dbac:	20001888 	.word	0x20001888
 800dbb0:	20001880 	.word	0x20001880
 800dbb4:	20001884 	.word	0x20001884
 800dbb8:	4154494d 	.word	0x4154494d
 800dbbc:	0800dd05 	.word	0x0800dd05
 800dbc0:	080158cc 	.word	0x080158cc
 800dbc4:	200017cc 	.word	0x200017cc
 800dbc8:	200017c0 	.word	0x200017c0
 800dbcc:	200017c4 	.word	0x200017c4

0800dbd0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b089      	sub	sp, #36	; 0x24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d04a      	beq.n	800dc7a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbea:	d046      	beq.n	800dc7a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d142      	bne.n	800dc7a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d902      	bls.n	800dc00 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dbfa:	231f      	movs	r3, #31
 800dbfc:	61bb      	str	r3, [r7, #24]
 800dbfe:	e002      	b.n	800dc06 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dc06:	4b20      	ldr	r3, [pc, #128]	; (800dc88 <_tx_timer_system_activate+0xb8>)
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dc12:	4b1e      	ldr	r3, [pc, #120]	; (800dc8c <_tx_timer_system_activate+0xbc>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	69fa      	ldr	r2, [r7, #28]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d30b      	bcc.n	800dc34 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dc1c:	4b1b      	ldr	r3, [pc, #108]	; (800dc8c <_tx_timer_system_activate+0xbc>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	109b      	asrs	r3, r3, #2
 800dc26:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dc28:	4b19      	ldr	r3, [pc, #100]	; (800dc90 <_tx_timer_system_activate+0xc0>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d109      	bne.n	800dc50 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	e011      	b.n	800dc74 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	695b      	ldr	r3, [r3, #20]
 800dc5a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	69fa      	ldr	r2, [r7, #28]
 800dc78:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dc7a:	bf00      	nop
 800dc7c:	3724      	adds	r7, #36	; 0x24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	200017b8 	.word	0x200017b8
 800dc8c:	200017b4 	.word	0x200017b4
 800dc90:	200017b0 	.word	0x200017b0

0800dc94 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d026      	beq.n	800dcf6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d108      	bne.n	800dcc8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d117      	bne.n	800dcf0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e013      	b.n	800dcf0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d105      	bne.n	800dcf0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	697a      	ldr	r2, [r7, #20]
 800dce8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	619a      	str	r2, [r3, #24]
    }
}
 800dcf6:	bf00      	nop
 800dcf8:	371c      	adds	r7, #28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
	...

0800dd04 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b098      	sub	sp, #96	; 0x60
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a73      	ldr	r2, [pc, #460]	; (800dee0 <_tx_timer_thread_entry+0x1dc>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	f040 80de 	bne.w	800ded6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd1a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd1e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dd22:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd24:	b672      	cpsid	i
    return(int_posture);
 800dd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dd28:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dd2a:	4b6e      	ldr	r3, [pc, #440]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f107 020c 	add.w	r2, r7, #12
 800dd3e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dd40:	4b68      	ldr	r3, [pc, #416]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dd48:	4b66      	ldr	r3, [pc, #408]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4a65      	ldr	r2, [pc, #404]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd50:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dd52:	4b64      	ldr	r3, [pc, #400]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	4b64      	ldr	r3, [pc, #400]	; (800dee8 <_tx_timer_thread_entry+0x1e4>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d103      	bne.n	800dd66 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dd5e:	4b63      	ldr	r3, [pc, #396]	; (800deec <_tx_timer_thread_entry+0x1e8>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a60      	ldr	r2, [pc, #384]	; (800dee4 <_tx_timer_thread_entry+0x1e0>)
 800dd64:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dd66:	4b62      	ldr	r3, [pc, #392]	; (800def0 <_tx_timer_thread_entry+0x1ec>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]
 800dd6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd6e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd72:	f383 8810 	msr	PRIMASK, r3
}
 800dd76:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd78:	f3ef 8310 	mrs	r3, PRIMASK
 800dd7c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800dd80:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd82:	b672      	cpsid	i
    return(int_posture);
 800dd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800dd86:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dd88:	e07f      	b.n	800de8a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dd94:	2300      	movs	r3, #0
 800dd96:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dd98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d102      	bne.n	800dda6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	e00e      	b.n	800ddc4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda8:	695b      	ldr	r3, [r3, #20]
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ddac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddb0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ddb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddb6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ddb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddba:	f107 020c 	add.w	r2, r7, #12
 800ddbe:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ddc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ddc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b20      	cmp	r3, #32
 800ddca:	d911      	bls.n	800ddf0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ddcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ddd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddde:	f107 0208 	add.w	r2, r7, #8
 800dde2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dde4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dde8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ddea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddec:	60bb      	str	r3, [r7, #8]
 800ddee:	e01a      	b.n	800de26 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ddf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ddf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ddfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de02:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800de04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d009      	beq.n	800de20 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800de0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0e:	f107 0208 	add.w	r2, r7, #8
 800de12:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800de14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de18:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800de1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1c:	60bb      	str	r3, [r7, #8]
 800de1e:	e002      	b.n	800de26 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800de20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de22:	2200      	movs	r2, #0
 800de24:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800de26:	4a33      	ldr	r2, [pc, #204]	; (800def4 <_tx_timer_thread_entry+0x1f0>)
 800de28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2a:	6013      	str	r3, [r2, #0]
 800de2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	f383 8810 	msr	PRIMASK, r3
}
 800de36:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800de38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d002      	beq.n	800de44 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800de3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de42:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de44:	f3ef 8310 	mrs	r3, PRIMASK
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800de4c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800de4e:	b672      	cpsid	i
    return(int_posture);
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de52:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800de54:	4b27      	ldr	r3, [pc, #156]	; (800def4 <_tx_timer_thread_entry+0x1f0>)
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de5e:	429a      	cmp	r2, r3
 800de60:	d105      	bne.n	800de6e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800de62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de64:	2200      	movs	r2, #0
 800de66:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800de68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de6a:	f7ff feb1 	bl	800dbd0 <_tx_timer_system_activate>
 800de6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	f383 8810 	msr	PRIMASK, r3
}
 800de78:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de7a:	f3ef 8310 	mrs	r3, PRIMASK
 800de7e:	623b      	str	r3, [r7, #32]
    return(posture);
 800de80:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de84:	b672      	cpsid	i
    return(int_posture);
 800de86:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de88:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f47f af7c 	bne.w	800dd8a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800de92:	4b17      	ldr	r3, [pc, #92]	; (800def0 <_tx_timer_thread_entry+0x1ec>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d116      	bne.n	800dec8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800de9a:	4b17      	ldr	r3, [pc, #92]	; (800def8 <_tx_timer_thread_entry+0x1f4>)
 800de9c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800de9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea0:	2203      	movs	r2, #3
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea6:	2201      	movs	r2, #1
 800dea8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800deaa:	4b14      	ldr	r3, [pc, #80]	; (800defc <_tx_timer_thread_entry+0x1f8>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3301      	adds	r3, #1
 800deb0:	4a12      	ldr	r2, [pc, #72]	; (800defc <_tx_timer_thread_entry+0x1f8>)
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	f383 8810 	msr	PRIMASK, r3
}
 800debe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dec0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dec2:	f7ff fadb 	bl	800d47c <_tx_thread_system_suspend>
 800dec6:	e728      	b.n	800dd1a <_tx_timer_thread_entry+0x16>
 800dec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	f383 8810 	msr	PRIMASK, r3
}
 800ded2:	bf00      	nop
            TX_DISABLE
 800ded4:	e721      	b.n	800dd1a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800ded6:	bf00      	nop
 800ded8:	3760      	adds	r7, #96	; 0x60
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	4154494d 	.word	0x4154494d
 800dee4:	200017b8 	.word	0x200017b8
 800dee8:	200017b4 	.word	0x200017b4
 800deec:	200017b0 	.word	0x200017b0
 800def0:	200017bc 	.word	0x200017bc
 800def4:	200017c8 	.word	0x200017c8
 800def8:	200017cc 	.word	0x200017cc
 800defc:	2000171c 	.word	0x2000171c

0800df00 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800df04:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <_tx_trace_initialize+0x34>)
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <_tx_trace_initialize+0x38>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <_tx_trace_initialize+0x3c>)
 800df12:	2200      	movs	r2, #0
 800df14:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800df16:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <_tx_trace_initialize+0x40>)
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800df1c:	4b09      	ldr	r3, [pc, #36]	; (800df44 <_tx_trace_initialize+0x44>)
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800df22:	4b09      	ldr	r3, [pc, #36]	; (800df48 <_tx_trace_initialize+0x48>)
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800df28:	bf00      	nop
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	20001c8c 	.word	0x20001c8c
 800df38:	20001c90 	.word	0x20001c90
 800df3c:	20001c94 	.word	0x20001c94
 800df40:	20001c98 	.word	0x20001c98
 800df44:	20001c9c 	.word	0x20001c9c
 800df48:	20001ca0 	.word	0x20001ca0

0800df4c <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b08d      	sub	sp, #52	; 0x34
 800df50:	af00      	add	r7, sp, #0
 800df52:	60b9      	str	r1, [r7, #8]
 800df54:	607a      	str	r2, [r7, #4]
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	4603      	mov	r3, r0
 800df5a:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800df5c:	4b6f      	ldr	r3, [pc, #444]	; (800e11c <_tx_trace_object_register+0x1d0>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 80d5 	beq.w	800e110 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800df66:	4b6e      	ldr	r3, [pc, #440]	; (800e120 <_tx_trace_object_register+0x1d4>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800df6c:	4b6d      	ldr	r3, [pc, #436]	; (800e124 <_tx_trace_object_register+0x1d8>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	f000 80cd 	beq.w	800e110 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800df7e:	4b6a      	ldr	r3, [pc, #424]	; (800e128 <_tx_trace_object_register+0x1dc>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800df84:	4b65      	ldr	r3, [pc, #404]	; (800e11c <_tx_trace_object_register+0x1d0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800df8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df8c:	4613      	mov	r3, r2
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	4413      	add	r3, r2
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	461a      	mov	r2, r3
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	4413      	add	r3, r2
 800df9a:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d103      	bne.n	800dfb0 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dfac:	2301      	movs	r3, #1
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d103      	bne.n	800dfc2 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbc:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d02d      	beq.n	800e024 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d11a      	bne.n	800e006 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800dfd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d102      	bne.n	800dfde <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfdc:	e013      	b.n	800e006 <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dfde:	4b4f      	ldr	r3, [pc, #316]	; (800e11c <_tx_trace_object_register+0x1d0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800dfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	4413      	add	r3, r2
 800dfec:	011b      	lsls	r3, r3, #4
 800dfee:	461a      	mov	r2, r3
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	4413      	add	r3, r2
 800dff4:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	785b      	ldrb	r3, [r3, #1]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800e006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e008:	3301      	adds	r3, #1
 800e00a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800e00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	429a      	cmp	r2, r3
 800e012:	d301      	bcc.n	800e018 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800e014:	2300      	movs	r3, #0
 800e016:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800e018:	4b43      	ldr	r3, [pc, #268]	; (800e128 <_tx_trace_object_register+0x1dc>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e01e:	429a      	cmp	r2, r3
 800e020:	d1b0      	bne.n	800df84 <_tx_trace_object_register+0x38>
 800e022:	e000      	b.n	800e026 <_tx_trace_object_register+0xda>
                    break;
 800e024:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800e026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d270      	bcs.n	800e110 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800e02e:	4b3d      	ldr	r3, [pc, #244]	; (800e124 <_tx_trace_object_register+0x1d8>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3b01      	subs	r3, #1
 800e034:	4a3b      	ldr	r2, [pc, #236]	; (800e124 <_tx_trace_object_register+0x1d8>)
 800e036:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	3301      	adds	r3, #1
 800e03c:	6a3a      	ldr	r2, [r7, #32]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d904      	bls.n	800e04c <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	3301      	adds	r3, #1
 800e046:	4a38      	ldr	r2, [pc, #224]	; (800e128 <_tx_trace_object_register+0x1dc>)
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e002      	b.n	800e052 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800e04c:	4b36      	ldr	r3, [pc, #216]	; (800e128 <_tx_trace_object_register+0x1dc>)
 800e04e:	2200      	movs	r2, #0
 800e050:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e052:	4b32      	ldr	r3, [pc, #200]	; (800e11c <_tx_trace_object_register+0x1d0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e05a:	4613      	mov	r3, r2
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	4413      	add	r3, r2
 800e060:	011b      	lsls	r3, r3, #4
 800e062:	461a      	mov	r2, r3
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	4413      	add	r3, r2
 800e068:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2200      	movs	r2, #0
 800e072:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	7bfa      	ldrb	r2, [r7, #15]
 800e078:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e08a:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e08c:	2300      	movs	r3, #0
 800e08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e090:	e017      	b.n	800e0c2 <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	4413      	add	r3, r2
 800e09c:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d012      	beq.n	800e0ca <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	7819      	ldrb	r1, [r3, #0]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ac:	4413      	add	r3, r2
 800e0ae:	3310      	adds	r3, #16
 800e0b0:	460a      	mov	r2, r1
 800e0b2:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d008      	beq.n	800e0ce <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	3301      	adds	r3, #1
 800e0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c4:	2b1e      	cmp	r3, #30
 800e0c6:	d9e4      	bls.n	800e092 <_tx_trace_object_register+0x146>
 800e0c8:	e002      	b.n	800e0d0 <_tx_trace_object_register+0x184>
                        break;
 800e0ca:	bf00      	nop
 800e0cc:	e000      	b.n	800e0d0 <_tx_trace_object_register+0x184>
                    {
                        break;
 800e0ce:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e0d0:	69ba      	ldr	r2, [r7, #24]
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	4413      	add	r3, r2
 800e0d6:	3310      	adds	r3, #16
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d110      	bne.n	800e104 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ea:	0a1b      	lsrs	r3, r3, #8
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e102:	e005      	b.n	800e110 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	2200      	movs	r2, #0
 800e108:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	2200      	movs	r2, #0
 800e10e:	70da      	strb	r2, [r3, #3]
}
 800e110:	bf00      	nop
 800e112:	3734      	adds	r7, #52	; 0x34
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	20001c90 	.word	0x20001c90
 800e120:	20001cac 	.word	0x20001cac
 800e124:	20001cb0 	.word	0x20001cb0
 800e128:	20001cb4 	.word	0x20001cb4

0800e12c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b092      	sub	sp, #72	; 0x48
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e13a:	2300      	movs	r3, #0
 800e13c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e144:	2302      	movs	r3, #2
 800e146:	647b      	str	r3, [r7, #68]	; 0x44
 800e148:	e075      	b.n	800e236 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e14c:	2b34      	cmp	r3, #52	; 0x34
 800e14e:	d002      	beq.n	800e156 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e150:	2302      	movs	r3, #2
 800e152:	647b      	str	r3, [r7, #68]	; 0x44
 800e154:	e06f      	b.n	800e236 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e156:	f3ef 8310 	mrs	r3, PRIMASK
 800e15a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e15e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e160:	b672      	cpsid	i
    return(int_posture);
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e164:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e166:	4b3b      	ldr	r3, [pc, #236]	; (800e254 <_txe_byte_pool_create+0x128>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3301      	adds	r3, #1
 800e16c:	4a39      	ldr	r2, [pc, #228]	; (800e254 <_txe_byte_pool_create+0x128>)
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e172:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e176:	f383 8810 	msr	PRIMASK, r3
}
 800e17a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e17c:	4b36      	ldr	r3, [pc, #216]	; (800e258 <_txe_byte_pool_create+0x12c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e182:	2300      	movs	r3, #0
 800e184:	643b      	str	r3, [r7, #64]	; 0x40
 800e186:	e009      	b.n	800e19c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d00b      	beq.n	800e1a8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e198:	3301      	adds	r3, #1
 800e19a:	643b      	str	r3, [r7, #64]	; 0x40
 800e19c:	4b2f      	ldr	r3, [pc, #188]	; (800e25c <_txe_byte_pool_create+0x130>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d3f0      	bcc.n	800e188 <_txe_byte_pool_create+0x5c>
 800e1a6:	e000      	b.n	800e1aa <_txe_byte_pool_create+0x7e>
                break;
 800e1a8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ae:	623b      	str	r3, [r7, #32]
    return(posture);
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e1b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1b4:	b672      	cpsid	i
    return(int_posture);
 800e1b6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e1b8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e1ba:	4b26      	ldr	r3, [pc, #152]	; (800e254 <_txe_byte_pool_create+0x128>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	4a24      	ldr	r2, [pc, #144]	; (800e254 <_txe_byte_pool_create+0x128>)
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ca:	f383 8810 	msr	PRIMASK, r3
}
 800e1ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e1d0:	f7fe ff60 	bl	800d094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d102      	bne.n	800e1e2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e1dc:	2302      	movs	r3, #2
 800e1de:	647b      	str	r3, [r7, #68]	; 0x44
 800e1e0:	e029      	b.n	800e236 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e1ec:	e023      	b.n	800e236 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	2b63      	cmp	r3, #99	; 0x63
 800e1f2:	d802      	bhi.n	800e1fa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e1f4:	2305      	movs	r3, #5
 800e1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1f8:	e01d      	b.n	800e236 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e1fa:	4b19      	ldr	r3, [pc, #100]	; (800e260 <_txe_byte_pool_create+0x134>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e202:	4a18      	ldr	r2, [pc, #96]	; (800e264 <_txe_byte_pool_create+0x138>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d101      	bne.n	800e20c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e208:	2313      	movs	r3, #19
 800e20a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e20c:	f3ef 8305 	mrs	r3, IPSR
 800e210:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e212:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e214:	4b14      	ldr	r3, [pc, #80]	; (800e268 <_txe_byte_pool_create+0x13c>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4313      	orrs	r3, r2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e21e:	f3ef 8305 	mrs	r3, IPSR
 800e222:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e224:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e226:	4b10      	ldr	r3, [pc, #64]	; (800e268 <_txe_byte_pool_create+0x13c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e230:	d201      	bcs.n	800e236 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e232:	2313      	movs	r3, #19
 800e234:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d106      	bne.n	800e24a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	68b9      	ldr	r1, [r7, #8]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7fd f88a 	bl	800b35c <_tx_byte_pool_create>
 800e248:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3748      	adds	r7, #72	; 0x48
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	2000171c 	.word	0x2000171c
 800e258:	20001674 	.word	0x20001674
 800e25c:	20001678 	.word	0x20001678
 800e260:	20001684 	.word	0x20001684
 800e264:	200017cc 	.word	0x200017cc
 800e268:	2000000c 	.word	0x2000000c

0800e26c <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b094      	sub	sp, #80	; 0x50
 800e270:	af02      	add	r7, sp, #8
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e27a:	2300      	movs	r3, #0
 800e27c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e284:	2309      	movs	r3, #9
 800e286:	647b      	str	r3, [r7, #68]	; 0x44
 800e288:	e083      	b.n	800e392 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e28c:	2b38      	cmp	r3, #56	; 0x38
 800e28e:	d002      	beq.n	800e296 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e290:	2309      	movs	r3, #9
 800e292:	647b      	str	r3, [r7, #68]	; 0x44
 800e294:	e07d      	b.n	800e392 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e296:	f3ef 8310 	mrs	r3, PRIMASK
 800e29a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2a0:	b672      	cpsid	i
    return(int_posture);
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e2a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e2a6:	4b43      	ldr	r3, [pc, #268]	; (800e3b4 <_txe_queue_create+0x148>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	4a41      	ldr	r2, [pc, #260]	; (800e3b4 <_txe_queue_create+0x148>)
 800e2ae:	6013      	str	r3, [r2, #0]
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	f383 8810 	msr	PRIMASK, r3
}
 800e2ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e2bc:	4b3e      	ldr	r3, [pc, #248]	; (800e3b8 <_txe_queue_create+0x14c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800e2c6:	e009      	b.n	800e2dc <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d00b      	beq.n	800e2e8 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d8:	3301      	adds	r3, #1
 800e2da:	643b      	str	r3, [r7, #64]	; 0x40
 800e2dc:	4b37      	ldr	r3, [pc, #220]	; (800e3bc <_txe_queue_create+0x150>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d3f0      	bcc.n	800e2c8 <_txe_queue_create+0x5c>
 800e2e6:	e000      	b.n	800e2ea <_txe_queue_create+0x7e>
                break;
 800e2e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2ea:	f3ef 8310 	mrs	r3, PRIMASK
 800e2ee:	623b      	str	r3, [r7, #32]
    return(posture);
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e2f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2f4:	b672      	cpsid	i
    return(int_posture);
 800e2f6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e2f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e2fa:	4b2e      	ldr	r3, [pc, #184]	; (800e3b4 <_txe_queue_create+0x148>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	4a2c      	ldr	r2, [pc, #176]	; (800e3b4 <_txe_queue_create+0x148>)
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	f383 8810 	msr	PRIMASK, r3
}
 800e30e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e310:	f7fe fec0 	bl	800d094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e318:	429a      	cmp	r2, r3
 800e31a:	d102      	bne.n	800e322 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e31c:	2309      	movs	r3, #9
 800e31e:	647b      	str	r3, [r7, #68]	; 0x44
 800e320:	e037      	b.n	800e392 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e328:	2303      	movs	r3, #3
 800e32a:	647b      	str	r3, [r7, #68]	; 0x44
 800e32c:	e031      	b.n	800e392 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e334:	2305      	movs	r3, #5
 800e336:	647b      	str	r3, [r7, #68]	; 0x44
 800e338:	e02b      	b.n	800e392 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b10      	cmp	r3, #16
 800e33e:	d902      	bls.n	800e346 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e340:	2305      	movs	r3, #5
 800e342:	647b      	str	r3, [r7, #68]	; 0x44
 800e344:	e025      	b.n	800e392 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e348:	089b      	lsrs	r3, r3, #2
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d902      	bls.n	800e356 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e350:	2305      	movs	r3, #5
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
 800e354:	e01d      	b.n	800e392 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e356:	4b1a      	ldr	r3, [pc, #104]	; (800e3c0 <_txe_queue_create+0x154>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35e:	4a19      	ldr	r2, [pc, #100]	; (800e3c4 <_txe_queue_create+0x158>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d101      	bne.n	800e368 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e364:	2313      	movs	r3, #19
 800e366:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e368:	f3ef 8305 	mrs	r3, IPSR
 800e36c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e36e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e370:	4b15      	ldr	r3, [pc, #84]	; (800e3c8 <_txe_queue_create+0x15c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4313      	orrs	r3, r2
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00b      	beq.n	800e392 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e37a:	f3ef 8305 	mrs	r3, IPSR
 800e37e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e380:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e382:	4b11      	ldr	r3, [pc, #68]	; (800e3c8 <_txe_queue_create+0x15c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e38c:	d201      	bcs.n	800e392 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e38e:	2313      	movs	r3, #19
 800e390:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e394:	2b00      	cmp	r3, #0
 800e396:	d108      	bne.n	800e3aa <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7fd f9f2 	bl	800b78c <_tx_queue_create>
 800e3a8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3748      	adds	r7, #72	; 0x48
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	2000171c 	.word	0x2000171c
 800e3b8:	20001654 	.word	0x20001654
 800e3bc:	20001658 	.word	0x20001658
 800e3c0:	20001684 	.word	0x20001684
 800e3c4:	200017cc 	.word	0x200017cc
 800e3c8:	2000000c 	.word	0x2000000c

0800e3cc <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d102      	bne.n	800e3e0 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e3da:	2309      	movs	r3, #9
 800e3dc:	60fb      	str	r3, [r7, #12]
 800e3de:	e00b      	b.n	800e3f8 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a07      	ldr	r2, [pc, #28]	; (800e404 <_txe_queue_flush+0x38>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d002      	beq.n	800e3f0 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e3ea:	2309      	movs	r3, #9
 800e3ec:	60fb      	str	r3, [r7, #12]
 800e3ee:	e003      	b.n	800e3f8 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7fd facb 	bl	800b98c <_tx_queue_flush>
 800e3f6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	51554555 	.word	0x51554555

0800e408 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b088      	sub	sp, #32
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e414:	2300      	movs	r3, #0
 800e416:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d102      	bne.n	800e424 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e41e:	2309      	movs	r3, #9
 800e420:	61fb      	str	r3, [r7, #28]
 800e422:	e025      	b.n	800e470 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a18      	ldr	r2, [pc, #96]	; (800e48c <_txe_queue_receive+0x84>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d002      	beq.n	800e434 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e42e:	2309      	movs	r3, #9
 800e430:	61fb      	str	r3, [r7, #28]
 800e432:	e01d      	b.n	800e470 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d102      	bne.n	800e440 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e43a:	2303      	movs	r3, #3
 800e43c:	61fb      	str	r3, [r7, #28]
 800e43e:	e017      	b.n	800e470 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d014      	beq.n	800e470 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e446:	f3ef 8305 	mrs	r3, IPSR
 800e44a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e44c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e44e:	4b10      	ldr	r3, [pc, #64]	; (800e490 <_txe_queue_receive+0x88>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4313      	orrs	r3, r2
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e458:	2304      	movs	r3, #4
 800e45a:	61fb      	str	r3, [r7, #28]
 800e45c:	e008      	b.n	800e470 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e45e:	4b0d      	ldr	r3, [pc, #52]	; (800e494 <_txe_queue_receive+0x8c>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	4a0c      	ldr	r2, [pc, #48]	; (800e498 <_txe_queue_receive+0x90>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d101      	bne.n	800e470 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e46c:	2304      	movs	r3, #4
 800e46e:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d105      	bne.n	800e482 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f7fd fb98 	bl	800bbb0 <_tx_queue_receive>
 800e480:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e482:	69fb      	ldr	r3, [r7, #28]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3720      	adds	r7, #32
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	51554555 	.word	0x51554555
 800e490:	2000000c 	.word	0x2000000c
 800e494:	20001684 	.word	0x20001684
 800e498:	200017cc 	.word	0x200017cc

0800e49c <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4b2:	2309      	movs	r3, #9
 800e4b4:	61fb      	str	r3, [r7, #28]
 800e4b6:	e025      	b.n	800e504 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a18      	ldr	r2, [pc, #96]	; (800e520 <_txe_queue_send+0x84>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d002      	beq.n	800e4c8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4c2:	2309      	movs	r3, #9
 800e4c4:	61fb      	str	r3, [r7, #28]
 800e4c6:	e01d      	b.n	800e504 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d102      	bne.n	800e4d4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	61fb      	str	r3, [r7, #28]
 800e4d2:	e017      	b.n	800e504 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d014      	beq.n	800e504 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4da:	f3ef 8305 	mrs	r3, IPSR
 800e4de:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e4e0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4e2:	4b10      	ldr	r3, [pc, #64]	; (800e524 <_txe_queue_send+0x88>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e4ec:	2304      	movs	r3, #4
 800e4ee:	61fb      	str	r3, [r7, #28]
 800e4f0:	e008      	b.n	800e504 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e4f2:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <_txe_queue_send+0x8c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	4a0c      	ldr	r2, [pc, #48]	; (800e52c <_txe_queue_send+0x90>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d101      	bne.n	800e504 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e500:	2304      	movs	r3, #4
 800e502:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d105      	bne.n	800e516 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7fd fd9c 	bl	800c04c <_tx_queue_send>
 800e514:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e516:	69fb      	ldr	r3, [r7, #28]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3720      	adds	r7, #32
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	51554555 	.word	0x51554555
 800e524:	2000000c 	.word	0x2000000c
 800e528:	20001684 	.word	0x20001684
 800e52c:	200017cc 	.word	0x200017cc

0800e530 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e540:	230c      	movs	r3, #12
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e012      	b.n	800e56c <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a0b      	ldr	r2, [pc, #44]	; (800e578 <_txe_semaphore_ceiling_put+0x48>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d002      	beq.n	800e556 <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e550:	230c      	movs	r3, #12
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	e00a      	b.n	800e56c <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e55c:	2322      	movs	r3, #34	; 0x22
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e004      	b.n	800e56c <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7fd ff23 	bl	800c3b0 <_tx_semaphore_ceiling_put>
 800e56a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e56c:	68fb      	ldr	r3, [r7, #12]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	53454d41 	.word	0x53454d41

0800e57c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b092      	sub	sp, #72	; 0x48
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e58a:	2300      	movs	r3, #0
 800e58c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e594:	230c      	movs	r3, #12
 800e596:	647b      	str	r3, [r7, #68]	; 0x44
 800e598:	e054      	b.n	800e644 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b1c      	cmp	r3, #28
 800e59e:	d002      	beq.n	800e5a6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e5a0:	230c      	movs	r3, #12
 800e5a2:	647b      	str	r3, [r7, #68]	; 0x44
 800e5a4:	e04e      	b.n	800e644 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e5ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5b0:	b672      	cpsid	i
    return(int_posture);
 800e5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e5b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e5b6:	4b36      	ldr	r3, [pc, #216]	; (800e690 <_txe_semaphore_create+0x114>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	4a34      	ldr	r2, [pc, #208]	; (800e690 <_txe_semaphore_create+0x114>)
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	f383 8810 	msr	PRIMASK, r3
}
 800e5ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e5cc:	4b31      	ldr	r3, [pc, #196]	; (800e694 <_txe_semaphore_create+0x118>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	643b      	str	r3, [r7, #64]	; 0x40
 800e5d6:	e009      	b.n	800e5ec <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d00b      	beq.n	800e5f8 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	695b      	ldr	r3, [r3, #20]
 800e5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ec:	4b2a      	ldr	r3, [pc, #168]	; (800e698 <_txe_semaphore_create+0x11c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d3f0      	bcc.n	800e5d8 <_txe_semaphore_create+0x5c>
 800e5f6:	e000      	b.n	800e5fa <_txe_semaphore_create+0x7e>
                break;
 800e5f8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e5fe:	623b      	str	r3, [r7, #32]
    return(posture);
 800e600:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e602:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e604:	b672      	cpsid	i
    return(int_posture);
 800e606:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e608:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e60a:	4b21      	ldr	r3, [pc, #132]	; (800e690 <_txe_semaphore_create+0x114>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3b01      	subs	r3, #1
 800e610:	4a1f      	ldr	r2, [pc, #124]	; (800e690 <_txe_semaphore_create+0x114>)
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	f383 8810 	msr	PRIMASK, r3
}
 800e61e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e620:	f7fe fd38 	bl	800d094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e628:	429a      	cmp	r2, r3
 800e62a:	d102      	bne.n	800e632 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e62c:	230c      	movs	r3, #12
 800e62e:	647b      	str	r3, [r7, #68]	; 0x44
 800e630:	e008      	b.n	800e644 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e632:	4b1a      	ldr	r3, [pc, #104]	; (800e69c <_txe_semaphore_create+0x120>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	4a19      	ldr	r2, [pc, #100]	; (800e6a0 <_txe_semaphore_create+0x124>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d101      	bne.n	800e644 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e640:	2313      	movs	r3, #19
 800e642:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e646:	2b00      	cmp	r3, #0
 800e648:	d114      	bne.n	800e674 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e64a:	f3ef 8305 	mrs	r3, IPSR
 800e64e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e650:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e652:	4b14      	ldr	r3, [pc, #80]	; (800e6a4 <_txe_semaphore_create+0x128>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4313      	orrs	r3, r2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00b      	beq.n	800e674 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e65c:	f3ef 8305 	mrs	r3, IPSR
 800e660:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e662:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e664:	4b0f      	ldr	r3, [pc, #60]	; (800e6a4 <_txe_semaphore_create+0x128>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4313      	orrs	r3, r2
 800e66a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e66e:	d201      	bcs.n	800e674 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e670:	2313      	movs	r3, #19
 800e672:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	68b9      	ldr	r1, [r7, #8]
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7fe f804 	bl	800c68c <_tx_semaphore_create>
 800e684:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3748      	adds	r7, #72	; 0x48
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	2000171c 	.word	0x2000171c
 800e694:	2000164c 	.word	0x2000164c
 800e698:	20001650 	.word	0x20001650
 800e69c:	20001684 	.word	0x20001684
 800e6a0:	200017cc 	.word	0x200017cc
 800e6a4:	2000000c 	.word	0x2000000c

0800e6a8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d102      	bne.n	800e6c2 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e6bc:	230c      	movs	r3, #12
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	e01f      	b.n	800e702 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a15      	ldr	r2, [pc, #84]	; (800e71c <_txe_semaphore_get+0x74>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d002      	beq.n	800e6d2 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e6cc:	230c      	movs	r3, #12
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	e017      	b.n	800e702 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d014      	beq.n	800e702 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e6d8:	f3ef 8305 	mrs	r3, IPSR
 800e6dc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e6de:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e6e0:	4b0f      	ldr	r3, [pc, #60]	; (800e720 <_txe_semaphore_get+0x78>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e6ea:	2304      	movs	r3, #4
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	e008      	b.n	800e702 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	; (800e724 <_txe_semaphore_get+0x7c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	4a0b      	ldr	r2, [pc, #44]	; (800e728 <_txe_semaphore_get+0x80>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d101      	bne.n	800e702 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e6fe:	2304      	movs	r3, #4
 800e700:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d104      	bne.n	800e712 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7fe f89e 	bl	800c84c <_tx_semaphore_get>
 800e710:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e712:	697b      	ldr	r3, [r7, #20]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	53454d41 	.word	0x53454d41
 800e720:	2000000c 	.word	0x2000000c
 800e724:	20001684 	.word	0x20001684
 800e728:	200017cc 	.word	0x200017cc

0800e72c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b09a      	sub	sp, #104	; 0x68
 800e730:	af06      	add	r7, sp, #24
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e73a:	2300      	movs	r3, #0
 800e73c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d102      	bne.n	800e74a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e744:	230e      	movs	r3, #14
 800e746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e748:	e0bb      	b.n	800e8c2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e74a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e74c:	2bb0      	cmp	r3, #176	; 0xb0
 800e74e:	d002      	beq.n	800e756 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e750:	230e      	movs	r3, #14
 800e752:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e754:	e0b5      	b.n	800e8c2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e756:	f3ef 8310 	mrs	r3, PRIMASK
 800e75a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e75e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e760:	b672      	cpsid	i
    return(int_posture);
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e766:	4b64      	ldr	r3, [pc, #400]	; (800e8f8 <_txe_thread_create+0x1cc>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3301      	adds	r3, #1
 800e76c:	4a62      	ldr	r2, [pc, #392]	; (800e8f8 <_txe_thread_create+0x1cc>)
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e772:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	f383 8810 	msr	PRIMASK, r3
}
 800e77a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e77c:	2300      	movs	r3, #0
 800e77e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e780:	4b5e      	ldr	r3, [pc, #376]	; (800e8fc <_txe_thread_create+0x1d0>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e788:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e78a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e78c:	3b01      	subs	r3, #1
 800e78e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e790:	4413      	add	r3, r2
 800e792:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e798:	2300      	movs	r3, #0
 800e79a:	647b      	str	r3, [r7, #68]	; 0x44
 800e79c:	e02b      	b.n	800e7f6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d101      	bne.n	800e7aa <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d028      	beq.n	800e802 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d308      	bcc.n	800e7cc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d203      	bcs.n	800e7cc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d308      	bcc.n	800e7e8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d203      	bcs.n	800e7e8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ee:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e7f6:	4b42      	ldr	r3, [pc, #264]	; (800e900 <_txe_thread_create+0x1d4>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d3ce      	bcc.n	800e79e <_txe_thread_create+0x72>
 800e800:	e000      	b.n	800e804 <_txe_thread_create+0xd8>
                break;
 800e802:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e804:	f3ef 8310 	mrs	r3, PRIMASK
 800e808:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e80a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e80c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e80e:	b672      	cpsid	i
    return(int_posture);
 800e810:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e814:	4b38      	ldr	r3, [pc, #224]	; (800e8f8 <_txe_thread_create+0x1cc>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	3b01      	subs	r3, #1
 800e81a:	4a37      	ldr	r2, [pc, #220]	; (800e8f8 <_txe_thread_create+0x1cc>)
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e820:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	f383 8810 	msr	PRIMASK, r3
}
 800e828:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e82a:	f7fe fc33 	bl	800d094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e832:	429a      	cmp	r2, r3
 800e834:	d102      	bne.n	800e83c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e836:	230e      	movs	r3, #14
 800e838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e83a:	e042      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e83c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d102      	bne.n	800e848 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e842:	2303      	movs	r3, #3
 800e844:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e846:	e03c      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d102      	bne.n	800e854 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e84e:	2303      	movs	r3, #3
 800e850:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e852:	e036      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e856:	2bc7      	cmp	r3, #199	; 0xc7
 800e858:	d802      	bhi.n	800e860 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e85a:	2305      	movs	r3, #5
 800e85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e85e:	e030      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e862:	2b1f      	cmp	r3, #31
 800e864:	d902      	bls.n	800e86c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e866:	230f      	movs	r3, #15
 800e868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e86a:	e02a      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e86c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e86e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e870:	429a      	cmp	r2, r3
 800e872:	d902      	bls.n	800e87a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e874:	2318      	movs	r3, #24
 800e876:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e878:	e023      	b.n	800e8c2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d902      	bls.n	800e886 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e880:	2310      	movs	r3, #16
 800e882:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e884:	e01d      	b.n	800e8c2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e886:	4b1f      	ldr	r3, [pc, #124]	; (800e904 <_txe_thread_create+0x1d8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	4a1e      	ldr	r2, [pc, #120]	; (800e908 <_txe_thread_create+0x1dc>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d101      	bne.n	800e898 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e894:	2313      	movs	r3, #19
 800e896:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e898:	f3ef 8305 	mrs	r3, IPSR
 800e89c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e89e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e8a0:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <_txe_thread_create+0x1e0>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00b      	beq.n	800e8c2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e8aa:	f3ef 8305 	mrs	r3, IPSR
 800e8ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e8b0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e8b2:	4b16      	ldr	r3, [pc, #88]	; (800e90c <_txe_thread_create+0x1e0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e8bc:	d201      	bcs.n	800e8c2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e8be:	2313      	movs	r3, #19
 800e8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d112      	bne.n	800e8ee <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ca:	9305      	str	r3, [sp, #20]
 800e8cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8ce:	9304      	str	r3, [sp, #16]
 800e8d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8d2:	9303      	str	r3, [sp, #12]
 800e8d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8d6:	9302      	str	r3, [sp, #8]
 800e8d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8da:	9301      	str	r3, [sp, #4]
 800e8dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	68b9      	ldr	r1, [r7, #8]
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7fe f8c6 	bl	800ca78 <_tx_thread_create>
 800e8ec:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3750      	adds	r7, #80	; 0x50
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	2000171c 	.word	0x2000171c
 800e8fc:	2000168c 	.word	0x2000168c
 800e900:	20001690 	.word	0x20001690
 800e904:	20001684 	.word	0x20001684
 800e908:	200017cc 	.word	0x200017cc
 800e90c:	2000000c 	.word	0x2000000c

0800e910 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b086      	sub	sp, #24
 800e914:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e916:	f3ef 8310 	mrs	r3, PRIMASK
 800e91a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e91c:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e91e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e920:	b672      	cpsid	i
    return(int_posture);
 800e922:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e924:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e926:	463b      	mov	r3, r7
 800e928:	4618      	mov	r0, r3
 800e92a:	f000 f835 	bl	800e998 <tx_timer_get_next>
 800e92e:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d103      	bne.n	800e93e <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f1 ffe9 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e93e:	4b07      	ldr	r3, [pc, #28]	; (800e95c <tx_low_power_enter+0x4c>)
 800e940:	2201      	movs	r2, #1
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f383 8810 	msr	PRIMASK, r3
}
 800e94e:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e950:	f7f2 f808 	bl	8000964 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e954:	bf00      	nop
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	20001cb8 	.word	0x20001cb8

0800e960 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e966:	4b0b      	ldr	r3, [pc, #44]	; (800e994 <tx_low_power_exit+0x34>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00d      	beq.n	800e98a <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e96e:	4b09      	ldr	r3, [pc, #36]	; (800e994 <tx_low_power_exit+0x34>)
 800e970:	2200      	movs	r2, #0
 800e972:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e974:	f7f2 f804 	bl	8000980 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e978:	f7f2 f810 	bl	800099c <App_ThreadX_LowPower_Timer_Adjust>
 800e97c:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 f86f 	bl	800ea68 <tx_time_increment>
        }
    }
}
 800e98a:	bf00      	nop
 800e98c:	3708      	adds	r7, #8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20001cb8 	.word	0x20001cb8

0800e998 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e998:	b480      	push	{r7}
 800e99a:	b08d      	sub	sp, #52	; 0x34
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9aa:	617b      	str	r3, [r7, #20]
    return(posture);
 800e9ac:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e9ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9b0:	b672      	cpsid	i
    return(int_posture);
 800e9b2:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e9b4:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e9b6:	4b29      	ldr	r3, [pc, #164]	; (800ea5c <tx_timer_get_next+0xc4>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e9bc:	2300      	movs	r3, #0
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c0:	e02f      	b.n	800ea22 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01d      	beq.n	800ea06 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b20      	cmp	r3, #32
 800e9d6:	d906      	bls.n	800e9e6 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	4413      	add	r3, r2
 800e9e0:	3b20      	subs	r3, #32
 800e9e2:	623b      	str	r3, [r7, #32]
 800e9e4:	e001      	b.n	800e9ea <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e9ea:	69fa      	ldr	r2, [r7, #28]
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d901      	bls.n	800e9f6 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d1e4      	bne.n	800e9d0 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	3304      	adds	r3, #4
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ea0c:	4b14      	ldr	r3, [pc, #80]	; (800ea60 <tx_timer_get_next+0xc8>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d302      	bcc.n	800ea1c <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <tx_timer_get_next+0xcc>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	3301      	adds	r3, #1
 800ea20:	627b      	str	r3, [r7, #36]	; 0x24
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	2b1f      	cmp	r3, #31
 800ea26:	d9cc      	bls.n	800e9c2 <tx_timer_get_next+0x2a>
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f383 8810 	msr	PRIMASK, r3
}
 800ea32:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3a:	d004      	beq.n	800ea46 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800ea42:	2301      	movs	r3, #1
 800ea44:	e003      	b.n	800ea4e <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800ea4c:	2300      	movs	r3, #0
    }
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3734      	adds	r7, #52	; 0x34
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop
 800ea5c:	200017b8 	.word	0x200017b8
 800ea60:	200017b4 	.word	0x200017b4
 800ea64:	200017b0 	.word	0x200017b0

0800ea68 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08a      	sub	sp, #40	; 0x28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 809b 	beq.w	800ebae <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea78:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7c:	613b      	str	r3, [r7, #16]
    return(posture);
 800ea7e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ea80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea82:	b672      	cpsid	i
    return(int_posture);
 800ea84:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ea86:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800ea88:	4b4b      	ldr	r3, [pc, #300]	; (800ebb8 <tx_time_increment+0x150>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4413      	add	r3, r2
 800ea90:	4a49      	ldr	r2, [pc, #292]	; (800ebb8 <tx_time_increment+0x150>)
 800ea92:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800ea94:	4b49      	ldr	r3, [pc, #292]	; (800ebbc <tx_time_increment+0x154>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00e      	beq.n	800eaba <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800ea9c:	4b47      	ldr	r3, [pc, #284]	; (800ebbc <tx_time_increment+0x154>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d206      	bcs.n	800eab4 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800eaa6:	4b45      	ldr	r3, [pc, #276]	; (800ebbc <tx_time_increment+0x154>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	4a43      	ldr	r2, [pc, #268]	; (800ebbc <tx_time_increment+0x154>)
 800eab0:	6013      	str	r3, [r2, #0]
 800eab2:	e002      	b.n	800eaba <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800eab4:	4b41      	ldr	r3, [pc, #260]	; (800ebbc <tx_time_increment+0x154>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800eaba:	4b41      	ldr	r3, [pc, #260]	; (800ebc0 <tx_time_increment+0x158>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eac4:	2300      	movs	r3, #0
 800eac6:	627b      	str	r3, [r7, #36]	; 0x24
 800eac8:	e046      	b.n	800eb58 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d034      	beq.n	800eb3c <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ead2:	6a3b      	ldr	r3, [r7, #32]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b20      	cmp	r3, #32
 800eade:	d908      	bls.n	800eaf2 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	4413      	add	r3, r2
 800eae8:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	e003      	b.n	800eafa <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800eb00:	6a3b      	ldr	r3, [r7, #32]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	69fa      	ldr	r2, [r7, #28]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d1e6      	bne.n	800ead8 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	2200      	movs	r2, #0
 800eb12:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d103      	bne.n	800eb22 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800eb1a:	6a3b      	ldr	r3, [r7, #32]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	61bb      	str	r3, [r7, #24]
 800eb20:	e009      	b.n	800eb36 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	6a3a      	ldr	r2, [r7, #32]
 800eb28:	6812      	ldr	r2, [r2, #0]
 800eb2a:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800eb2c:	6a3b      	ldr	r3, [r7, #32]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	695a      	ldr	r2, [r3, #20]
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800eb42:	4b20      	ldr	r3, [pc, #128]	; (800ebc4 <tx_time_increment+0x15c>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6a3a      	ldr	r2, [r7, #32]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d302      	bcc.n	800eb52 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800eb4c:	4b1e      	ldr	r3, [pc, #120]	; (800ebc8 <tx_time_increment+0x160>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb54:	3301      	adds	r3, #1
 800eb56:	627b      	str	r3, [r7, #36]	; 0x24
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	2b1f      	cmp	r3, #31
 800eb5c:	d9b5      	bls.n	800eaca <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800eb5e:	4b1a      	ldr	r3, [pc, #104]	; (800ebc8 <tx_time_increment+0x160>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a17      	ldr	r2, [pc, #92]	; (800ebc0 <tx_time_increment+0x158>)
 800eb64:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800eb66:	e019      	b.n	800eb9c <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d206      	bcs.n	800eb8a <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	e002      	b.n	800eb90 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	2200      	movs	r2, #0
 800eb94:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800eb96:	69f8      	ldr	r0, [r7, #28]
 800eb98:	f7ff f81a 	bl	800dbd0 <_tx_timer_system_activate>
    while (temp_list_head)
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d1e2      	bne.n	800eb68 <tx_time_increment+0x100>
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f383 8810 	msr	PRIMASK, r3
}
 800ebac:	e000      	b.n	800ebb0 <tx_time_increment+0x148>
        return;
 800ebae:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ebb0:	3728      	adds	r7, #40	; 0x28
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20001728 	.word	0x20001728
 800ebbc:	20001c88 	.word	0x20001c88
 800ebc0:	200017b8 	.word	0x200017b8
 800ebc4:	200017b4 	.word	0x200017b4
 800ebc8:	200017b0 	.word	0x200017b0

0800ebcc <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4905      	ldr	r1, [pc, #20]	; (800ebe8 <fm_calendar_get+0x1c>)
 800ebd4:	4805      	ldr	r0, [pc, #20]	; (800ebec <fm_calendar_get+0x20>)
 800ebd6:	f7fa fa87 	bl	80090e8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4904      	ldr	r1, [pc, #16]	; (800ebf0 <fm_calendar_get+0x24>)
 800ebde:	4803      	ldr	r0, [pc, #12]	; (800ebec <fm_calendar_get+0x20>)
 800ebe0:	f7fa fb7a 	bl	80092d8 <HAL_RTC_GetDate>
}
 800ebe4:	bf00      	nop
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	20001cbc 	.word	0x20001cbc
 800ebec:	200014a4 	.word	0x200014a4
 800ebf0:	20001cd0 	.word	0x20001cd0

0800ebf4 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ebf8:	f7ff ffe8 	bl	800ebcc <fm_calendar_get>
    return (sTime.Hours);
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <fm_calendar_get_hour+0x10>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20001cbc 	.word	0x20001cbc

0800ec08 <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec0c:	f7ff ffde 	bl	800ebcc <fm_calendar_get>
    return (sTime.Minutes);
 800ec10:	4b01      	ldr	r3, [pc, #4]	; (800ec18 <fm_calendar_get_minute+0x10>)
 800ec12:	785b      	ldrb	r3, [r3, #1]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	20001cbc 	.word	0x20001cbc

0800ec1c <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec20:	f7ff ffd4 	bl	800ebcc <fm_calendar_get>
    return (sTime.Seconds);
 800ec24:	4b01      	ldr	r3, [pc, #4]	; (800ec2c <fm_calendar_get_second+0x10>)
 800ec26:	789b      	ldrb	r3, [r3, #2]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	20001cbc 	.word	0x20001cbc

0800ec30 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec34:	f7ff ffca 	bl	800ebcc <fm_calendar_get>
    return (sDate.Date);
 800ec38:	4b01      	ldr	r3, [pc, #4]	; (800ec40 <fm_calendar_get_day+0x10>)
 800ec3a:	789b      	ldrb	r3, [r3, #2]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20001cd0 	.word	0x20001cd0

0800ec44 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec48:	f7ff ffc0 	bl	800ebcc <fm_calendar_get>
    return (sDate.Month);
 800ec4c:	4b01      	ldr	r3, [pc, #4]	; (800ec54 <fm_calendar_get_month+0x10>)
 800ec4e:	785b      	ldrb	r3, [r3, #1]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20001cd0 	.word	0x20001cd0

0800ec58 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec5c:	f7ff ffb6 	bl	800ebcc <fm_calendar_get>
    return (sDate.Year);
 800ec60:	4b01      	ldr	r3, [pc, #4]	; (800ec68 <fm_calendar_get_year+0x10>)
 800ec62:	78db      	ldrb	r3, [r3, #3]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20001cd0 	.word	0x20001cd0

0800ec6c <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af02      	add	r7, sp, #8
    int  time_int = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ec76:	f7ff ffa9 	bl	800ebcc <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ec7a:	4b0d      	ldr	r3, [pc, #52]	; (800ecb0 <fm_calendar_format_time+0x44>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <fm_calendar_format_time+0x44>)
 800ec82:	785b      	ldrb	r3, [r3, #1]
 800ec84:	4619      	mov	r1, r3
    sTime.Seconds);
 800ec86:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <fm_calendar_format_time+0x44>)
 800ec88:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	460b      	mov	r3, r1
 800ec90:	4908      	ldr	r1, [pc, #32]	; (800ecb4 <fm_calendar_format_time+0x48>)
 800ec92:	f006 f8dd 	bl	8014e50 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ec96:	463b      	mov	r3, r7
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f006 f86f 	bl	8014d7c <atoi>
 800ec9e:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800eca0:	6978      	ldr	r0, [r7, #20]
 800eca2:	f000 f9dd 	bl	800f060 <fm_factory_modify_fp_time>
}
 800eca6:	bf00      	nop
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20001cbc 	.word	0x20001cbc
 800ecb4:	080158e0 	.word	0x080158e0

0800ecb8 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ecc2:	f7ff ff83 	bl	800ebcc <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <fm_calendar_format_date+0x44>)
 800ecc8:	789b      	ldrb	r3, [r3, #2]
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b0b      	ldr	r3, [pc, #44]	; (800ecfc <fm_calendar_format_date+0x44>)
 800ecce:	785b      	ldrb	r3, [r3, #1]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <fm_calendar_format_date+0x44>)
 800ecd4:	78db      	ldrb	r3, [r3, #3]
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4908      	ldr	r1, [pc, #32]	; (800ed00 <fm_calendar_format_date+0x48>)
 800ecde:	f006 f8b7 	bl	8014e50 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800ece2:	463b      	mov	r3, r7
 800ece4:	4618      	mov	r0, r3
 800ece6:	f006 f849 	bl	8014d7c <atoi>
 800ecea:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800ecec:	6978      	ldr	r0, [r7, #20]
 800ecee:	f000 f9a7 	bl	800f040 <fm_factory_modify_fp_date>
}
 800ecf2:	bf00      	nop
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20001cd0 	.word	0x20001cd0
 800ed00:	080158f0 	.word	0x080158f0

0800ed04 <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800ed10:	2302      	movs	r3, #2
 800ed12:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800ed14:	e008      	b.n	800ed28 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800ed16:	78fb      	ldrb	r3, [r7, #3]
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	230a      	movs	r3, #10
 800ed1c:	6879      	ldr	r1, [r7, #4]
 800ed1e:	4806      	ldr	r0, [pc, #24]	; (800ed38 <fm_debug_msg_uart+0x34>)
 800ed20:	f7fb fdc0 	bl	800a8a4 <HAL_UART_Transmit>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d0f3      	beq.n	800ed16 <fm_debug_msg_uart+0x12>
    }

}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20001564 	.word	0x20001564

0800ed3c <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800ed3c:	b4b0      	push	{r4, r5, r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4a07      	ldr	r2, [pc, #28]	; (800ed64 <fm_factory_get_acm+0x28>)
 800ed48:	461c      	mov	r4, r3
 800ed4a:	4615      	mov	r5, r2
 800ed4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bcb0      	pop	{r4, r5, r7}
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	20000030 	.word	0x20000030

0800ed68 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800ed68:	b4b0      	push	{r4, r5, r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a07      	ldr	r2, [pc, #28]	; (800ed90 <fm_factory_get_ttl+0x28>)
 800ed74:	461c      	mov	r4, r3
 800ed76:	4615      	mov	r5, r2
 800ed78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bcb0      	pop	{r4, r5, r7}
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	20000010 	.word	0x20000010

0800ed94 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800ed94:	b4b0      	push	{r4, r5, r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a07      	ldr	r2, [pc, #28]	; (800edbc <fm_factory_get_rate+0x28>)
 800eda0:	461c      	mov	r4, r3
 800eda2:	4615      	mov	r5, r2
 800eda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eda8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800edac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bcb0      	pop	{r4, r5, r7}
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	20000050 	.word	0x20000050

0800edc0 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a05      	ldr	r2, [pc, #20]	; (800ede0 <fm_factory_get_temp+0x20>)
 800edcc:	ca07      	ldmia	r2, {r0, r1, r2}
 800edce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20000070 	.word	0x20000070

0800ede4 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a05      	ldr	r2, [pc, #20]	; (800ee04 <fm_factory_get_units_tim+0x20>)
 800edf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edf4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr
 800ee04:	20000094 	.word	0x20000094

0800ee08 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a05      	ldr	r2, [pc, #20]	; (800ee28 <fm_factory_get_units_vol+0x20>)
 800ee14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee18:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr
 800ee28:	2000009c 	.word	0x2000009c

0800ee2c <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	460b      	mov	r3, r1
 800ee36:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d106      	bne.n	800ee4c <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ee3e:	4b22      	ldr	r3, [pc, #136]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800ee40:	4a22      	ldr	r2, [pc, #136]	; (800eecc <fm_factory_get_k_factor+0xa0>)
 800ee42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee46:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee4a:	e030      	b.n	800eeae <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d106      	bne.n	800ee60 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800ee52:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800ee54:	4a1e      	ldr	r2, [pc, #120]	; (800eed0 <fm_factory_get_k_factor+0xa4>)
 800ee56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee5a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee5e:	e026      	b.n	800eeae <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d106      	bne.n	800ee74 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800ee66:	4b18      	ldr	r3, [pc, #96]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800ee68:	4a1a      	ldr	r2, [pc, #104]	; (800eed4 <fm_factory_get_k_factor+0xa8>)
 800ee6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee72:	e01c      	b.n	800eeae <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800ee74:	78fb      	ldrb	r3, [r7, #3]
 800ee76:	2b03      	cmp	r3, #3
 800ee78:	d106      	bne.n	800ee88 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800ee7a:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800ee7c:	4a16      	ldr	r2, [pc, #88]	; (800eed8 <fm_factory_get_k_factor+0xac>)
 800ee7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee82:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee86:	e012      	b.n	800eeae <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	d106      	bne.n	800ee9c <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800ee8e:	4b0e      	ldr	r3, [pc, #56]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800ee90:	4a12      	ldr	r2, [pc, #72]	; (800eedc <fm_factory_get_k_factor+0xb0>)
 800ee92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee96:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee9a:	e008      	b.n	800eeae <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800ee9c:	78fb      	ldrb	r3, [r7, #3]
 800ee9e:	2b05      	cmp	r3, #5
 800eea0:	d105      	bne.n	800eeae <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800eea2:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800eea4:	4a0e      	ldr	r2, [pc, #56]	; (800eee0 <fm_factory_get_k_factor+0xb4>)
 800eea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4a05      	ldr	r2, [pc, #20]	; (800eec8 <fm_factory_get_k_factor+0x9c>)
 800eeb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeb6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	20001cec 	.word	0x20001cec
 800eecc:	200000f4 	.word	0x200000f4
 800eed0:	200000cc 	.word	0x200000cc
 800eed4:	200000d4 	.word	0x200000d4
 800eed8:	200000dc 	.word	0x200000dc
 800eedc:	200000e4 	.word	0x200000e4
 800eee0:	200000ec 	.word	0x200000ec

0800eee4 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	460b      	mov	r3, r1
 800eeee:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800eef0:	78fb      	ldrb	r3, [r7, #3]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d106      	bne.n	800ef04 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800eef6:	4b1d      	ldr	r3, [pc, #116]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800eef8:	4a1d      	ldr	r2, [pc, #116]	; (800ef70 <fm_factory_get_frec_lin+0x8c>)
 800eefa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eefe:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef02:	e026      	b.n	800ef52 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d106      	bne.n	800ef18 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ef0a:	4b18      	ldr	r3, [pc, #96]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800ef0c:	4a19      	ldr	r2, [pc, #100]	; (800ef74 <fm_factory_get_frec_lin+0x90>)
 800ef0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef12:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef16:	e01c      	b.n	800ef52 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800ef18:	78fb      	ldrb	r3, [r7, #3]
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d106      	bne.n	800ef2c <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ef1e:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800ef20:	4a15      	ldr	r2, [pc, #84]	; (800ef78 <fm_factory_get_frec_lin+0x94>)
 800ef22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef26:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef2a:	e012      	b.n	800ef52 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800ef2c:	78fb      	ldrb	r3, [r7, #3]
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d106      	bne.n	800ef40 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800ef34:	4a11      	ldr	r2, [pc, #68]	; (800ef7c <fm_factory_get_frec_lin+0x98>)
 800ef36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef3e:	e008      	b.n	800ef52 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d105      	bne.n	800ef52 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800ef48:	4a0d      	ldr	r2, [pc, #52]	; (800ef80 <fm_factory_get_frec_lin+0x9c>)
 800ef4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a05      	ldr	r2, [pc, #20]	; (800ef6c <fm_factory_get_frec_lin+0x88>)
 800ef56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef5a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	370c      	adds	r7, #12
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	20001cf4 	.word	0x20001cf4
 800ef70:	200000a4 	.word	0x200000a4
 800ef74:	200000ac 	.word	0x200000ac
 800ef78:	200000b4 	.word	0x200000b4
 800ef7c:	200000bc 	.word	0x200000bc
 800ef80:	200000c4 	.word	0x200000c4

0800ef84 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800ef84:	b4b0      	push	{r4, r5, r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a07      	ldr	r2, [pc, #28]	; (800efac <fm_factory_get_date_time+0x28>)
 800ef90:	461c      	mov	r4, r3
 800ef92:	4615      	mov	r5, r2
 800ef94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef9c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bcb0      	pop	{r4, r5, r7}
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	2000007c 	.word	0x2000007c

0800efb0 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
    return(date_user);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a05      	ldr	r2, [pc, #20]	; (800efd0 <fm_factory_get_fp_date+0x20>)
 800efbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efc0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20000104 	.word	0x20000104

0800efd4 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
    return(time_user);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a05      	ldr	r2, [pc, #20]	; (800eff4 <fm_factory_get_fp_time+0x20>)
 800efe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efe4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	200000fc 	.word	0x200000fc

0800eff8 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    return(date_config);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a05      	ldr	r2, [pc, #20]	; (800f018 <fm_factory_get_fp_date_conf+0x20>)
 800f004:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f008:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	20000114 	.word	0x20000114

0800f01c <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
    return(time_config);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a05      	ldr	r2, [pc, #20]	; (800f03c <fm_factory_get_fp_time_conf+0x20>)
 800f028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f02c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	2000010c 	.word	0x2000010c

0800f040 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a04      	ldr	r2, [pc, #16]	; (800f05c <fm_factory_modify_fp_date+0x1c>)
 800f04c:	6013      	str	r3, [r2, #0]
}
 800f04e:	bf00      	nop
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	20000104 	.word	0x20000104

0800f060 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a04      	ldr	r2, [pc, #16]	; (800f07c <fm_factory_modify_fp_time+0x1c>)
 800f06c:	6013      	str	r3, [r2, #0]
}
 800f06e:	bf00      	nop
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	200000fc 	.word	0x200000fc

0800f080 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800f08c:	4a0f      	ldr	r2, [pc, #60]	; (800f0cc <fm_factory_modify_date+0x4c>)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f092:	4a0e      	ldr	r2, [pc, #56]	; (800f0cc <fm_factory_modify_date+0x4c>)
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f098:	4a0c      	ldr	r2, [pc, #48]	; (800f0cc <fm_factory_modify_date+0x4c>)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	4a0b      	ldr	r2, [pc, #44]	; (800f0d0 <fm_factory_modify_date+0x50>)
 800f0a2:	fb03 f202 	mul.w	r2, r3, r2
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800f0ac:	fb01 f303 	mul.w	r3, r1, r3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <fm_factory_modify_date+0x54>)
 800f0be:	601a      	str	r2, [r3, #0]
}
 800f0c0:	bf00      	nop
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	2000007c 	.word	0x2000007c
 800f0d0:	000f4240 	.word	0x000f4240
 800f0d4:	20000114 	.word	0x20000114

0800f0d8 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800f0e4:	4a0e      	ldr	r2, [pc, #56]	; (800f120 <fm_factory_modify_time+0x48>)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f0ea:	4a0d      	ldr	r2, [pc, #52]	; (800f120 <fm_factory_modify_time+0x48>)
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f0f0:	4a0b      	ldr	r2, [pc, #44]	; (800f120 <fm_factory_modify_time+0x48>)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f242 7210 	movw	r2, #10000	; 0x2710
 800f0fc:	fb03 f202 	mul.w	r2, r3, r2
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2164      	movs	r1, #100	; 0x64
 800f104:	fb01 f303 	mul.w	r3, r1, r3
 800f108:	441a      	add	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4413      	add	r3, r2
 800f10e:	461a      	mov	r2, r3
 800f110:	4b04      	ldr	r3, [pc, #16]	; (800f124 <fm_factory_modify_time+0x4c>)
 800f112:	601a      	str	r2, [r3, #0]
}
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	2000007c 	.word	0x2000007c
 800f124:	2000010c 	.word	0x2000010c

0800f128 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f136:	f000 facd 	bl	800f6d4 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f13a:	79fb      	ldrb	r3, [r7, #7]
 800f13c:	f1c3 0307 	rsb	r3, r3, #7
 800f140:	4a17      	ldr	r2, [pc, #92]	; (800f1a0 <fm_factory_modify_k_factor_add+0x78>)
 800f142:	5cd3      	ldrb	r3, [r2, r3]
 800f144:	2b08      	cmp	r3, #8
 800f146:	d809      	bhi.n	800f15c <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	f1c3 0307 	rsb	r3, r3, #7
 800f14e:	4a14      	ldr	r2, [pc, #80]	; (800f1a0 <fm_factory_modify_k_factor_add+0x78>)
 800f150:	5cd2      	ldrb	r2, [r2, r3]
 800f152:	3201      	adds	r2, #1
 800f154:	b2d1      	uxtb	r1, r2
 800f156:	4a12      	ldr	r2, [pc, #72]	; (800f1a0 <fm_factory_modify_k_factor_add+0x78>)
 800f158:	54d1      	strb	r1, [r2, r3]
 800f15a:	e005      	b.n	800f168 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	f1c3 0307 	rsb	r3, r3, #7
 800f162:	4a0f      	ldr	r2, [pc, #60]	; (800f1a0 <fm_factory_modify_k_factor_add+0x78>)
 800f164:	2100      	movs	r1, #0
 800f166:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f168:	2300      	movs	r3, #0
 800f16a:	60bb      	str	r3, [r7, #8]
 800f16c:	e00e      	b.n	800f18c <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	4613      	mov	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	4619      	mov	r1, r3
 800f17a:	4a09      	ldr	r2, [pc, #36]	; (800f1a0 <fm_factory_modify_k_factor_add+0x78>)
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	4413      	add	r3, r2
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	440b      	add	r3, r1
 800f184:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	3301      	adds	r3, #1
 800f18a:	60bb      	str	r3, [r7, #8]
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2b07      	cmp	r3, #7
 800f190:	dded      	ble.n	800f16e <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f192:	4a04      	ldr	r2, [pc, #16]	; (800f1a4 <fm_factory_modify_k_factor_add+0x7c>)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6013      	str	r3, [r2, #0]
}
 800f198:	bf00      	nop
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	20001cd4 	.word	0x20001cd4
 800f1a4:	200000f4 	.word	0x200000f4

0800f1a8 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f1b6:	f000 fa8d 	bl	800f6d4 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	f1c3 0307 	rsb	r3, r3, #7
 800f1c0:	4a17      	ldr	r2, [pc, #92]	; (800f220 <fm_factory_modify_k_factor_subs+0x78>)
 800f1c2:	5cd3      	ldrb	r3, [r2, r3]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d009      	beq.n	800f1dc <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f1c8:	79fb      	ldrb	r3, [r7, #7]
 800f1ca:	f1c3 0307 	rsb	r3, r3, #7
 800f1ce:	4a14      	ldr	r2, [pc, #80]	; (800f220 <fm_factory_modify_k_factor_subs+0x78>)
 800f1d0:	5cd2      	ldrb	r2, [r2, r3]
 800f1d2:	3a01      	subs	r2, #1
 800f1d4:	b2d1      	uxtb	r1, r2
 800f1d6:	4a12      	ldr	r2, [pc, #72]	; (800f220 <fm_factory_modify_k_factor_subs+0x78>)
 800f1d8:	54d1      	strb	r1, [r2, r3]
 800f1da:	e005      	b.n	800f1e8 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	f1c3 0307 	rsb	r3, r3, #7
 800f1e2:	4a0f      	ldr	r2, [pc, #60]	; (800f220 <fm_factory_modify_k_factor_subs+0x78>)
 800f1e4:	2109      	movs	r1, #9
 800f1e6:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	60bb      	str	r3, [r7, #8]
 800f1ec:	e00e      	b.n	800f20c <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	005b      	lsls	r3, r3, #1
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4a09      	ldr	r2, [pc, #36]	; (800f220 <fm_factory_modify_k_factor_subs+0x78>)
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	4413      	add	r3, r2
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	440b      	add	r3, r1
 800f204:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	3301      	adds	r3, #1
 800f20a:	60bb      	str	r3, [r7, #8]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b07      	cmp	r3, #7
 800f210:	dded      	ble.n	800f1ee <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f212:	4a04      	ldr	r2, [pc, #16]	; (800f224 <fm_factory_modify_k_factor_subs+0x7c>)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6013      	str	r3, [r2, #0]
}
 800f218:	bf00      	nop
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	20001cd4 	.word	0x20001cd4
 800f224:	200000f4 	.word	0x200000f4

0800f228 <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b086      	sub	sp, #24
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	460a      	mov	r2, r1
 800f232:	71fb      	strb	r3, [r7, #7]
 800f234:	4613      	mov	r3, r2
 800f236:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f240:	79bb      	ldrb	r3, [r7, #6]
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fa82 	bl	800f74c <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	2b07      	cmp	r3, #7
 800f24c:	d84e      	bhi.n	800f2ec <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	f1c3 0307 	rsb	r3, r3, #7
 800f254:	4a5e      	ldr	r2, [pc, #376]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1a8>)
 800f256:	5cd3      	ldrb	r3, [r2, r3]
 800f258:	2b08      	cmp	r3, #8
 800f25a:	d809      	bhi.n	800f270 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f25c:	79fb      	ldrb	r3, [r7, #7]
 800f25e:	f1c3 0307 	rsb	r3, r3, #7
 800f262:	4a5b      	ldr	r2, [pc, #364]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1a8>)
 800f264:	5cd2      	ldrb	r2, [r2, r3]
 800f266:	3201      	adds	r2, #1
 800f268:	b2d1      	uxtb	r1, r2
 800f26a:	4a59      	ldr	r2, [pc, #356]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1a8>)
 800f26c:	54d1      	strb	r1, [r2, r3]
 800f26e:	e005      	b.n	800f27c <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	f1c3 0307 	rsb	r3, r3, #7
 800f276:	4a56      	ldr	r2, [pc, #344]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1a8>)
 800f278:	2100      	movs	r1, #0
 800f27a:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f27c:	2300      	movs	r3, #0
 800f27e:	60fb      	str	r3, [r7, #12]
 800f280:	e00e      	b.n	800f2a0 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	4613      	mov	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4413      	add	r3, r2
 800f28a:	005b      	lsls	r3, r3, #1
 800f28c:	4619      	mov	r1, r3
 800f28e:	4a50      	ldr	r2, [pc, #320]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1a8>)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4413      	add	r3, r2
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	440b      	add	r3, r1
 800f298:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b07      	cmp	r3, #7
 800f2a4:	dded      	ble.n	800f282 <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f2a6:	79bb      	ldrb	r3, [r7, #6]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d103      	bne.n	800f2b4 <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f2ac:	4a49      	ldr	r2, [pc, #292]	; (800f3d4 <fm_factory_modify_k_lin_add+0x1ac>)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f2b2:	e089      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f2b4:	79bb      	ldrb	r3, [r7, #6]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d103      	bne.n	800f2c2 <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f2ba:	4a47      	ldr	r2, [pc, #284]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1b0>)
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	6013      	str	r3, [r2, #0]
}
 800f2c0:	e082      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f2c2:	79bb      	ldrb	r3, [r7, #6]
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d103      	bne.n	800f2d0 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f2c8:	4a44      	ldr	r2, [pc, #272]	; (800f3dc <fm_factory_modify_k_lin_add+0x1b4>)
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	6013      	str	r3, [r2, #0]
}
 800f2ce:	e07b      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f2d0:	79bb      	ldrb	r3, [r7, #6]
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	d103      	bne.n	800f2de <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f2d6:	4a42      	ldr	r2, [pc, #264]	; (800f3e0 <fm_factory_modify_k_lin_add+0x1b8>)
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	6013      	str	r3, [r2, #0]
}
 800f2dc:	e074      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f2de:	79bb      	ldrb	r3, [r7, #6]
 800f2e0:	2b05      	cmp	r3, #5
 800f2e2:	d171      	bne.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f2e4:	4a3f      	ldr	r2, [pc, #252]	; (800f3e4 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	6013      	str	r3, [r2, #0]
}
 800f2ea:	e06d      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f2ec:	79fb      	ldrb	r3, [r7, #7]
 800f2ee:	2b07      	cmp	r3, #7
 800f2f0:	d96a      	bls.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f2f2:	79fb      	ldrb	r3, [r7, #7]
 800f2f4:	f1c3 030e 	rsb	r3, r3, #14
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d017      	beq.n	800f32c <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	f1c3 030e 	rsb	r3, r3, #14
 800f302:	4a39      	ldr	r2, [pc, #228]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f304:	5cd3      	ldrb	r3, [r2, r3]
 800f306:	2b08      	cmp	r3, #8
 800f308:	d809      	bhi.n	800f31e <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f30a:	79fb      	ldrb	r3, [r7, #7]
 800f30c:	f1c3 030e 	rsb	r3, r3, #14
 800f310:	4a35      	ldr	r2, [pc, #212]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f312:	5cd2      	ldrb	r2, [r2, r3]
 800f314:	3201      	adds	r2, #1
 800f316:	b2d1      	uxtb	r1, r2
 800f318:	4a33      	ldr	r2, [pc, #204]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f31a:	54d1      	strb	r1, [r2, r3]
 800f31c:	e01d      	b.n	800f35a <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f31e:	79fb      	ldrb	r3, [r7, #7]
 800f320:	f1c3 030e 	rsb	r3, r3, #14
 800f324:	4a30      	ldr	r2, [pc, #192]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f326:	2100      	movs	r1, #0
 800f328:	54d1      	strb	r1, [r2, r3]
 800f32a:	e016      	b.n	800f35a <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	f1c3 030e 	rsb	r3, r3, #14
 800f332:	4a2d      	ldr	r2, [pc, #180]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f334:	5cd3      	ldrb	r3, [r2, r3]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d109      	bne.n	800f34e <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	f1c3 030e 	rsb	r3, r3, #14
 800f340:	4a29      	ldr	r2, [pc, #164]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f342:	5cd2      	ldrb	r2, [r2, r3]
 800f344:	3201      	adds	r2, #1
 800f346:	b2d1      	uxtb	r1, r2
 800f348:	4a27      	ldr	r2, [pc, #156]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f34a:	54d1      	strb	r1, [r2, r3]
 800f34c:	e005      	b.n	800f35a <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	f1c3 030e 	rsb	r3, r3, #14
 800f354:	4a24      	ldr	r2, [pc, #144]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f356:	2100      	movs	r1, #0
 800f358:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f35a:	2300      	movs	r3, #0
 800f35c:	60bb      	str	r3, [r7, #8]
 800f35e:	e00e      	b.n	800f37e <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	4613      	mov	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	005b      	lsls	r3, r3, #1
 800f36a:	4619      	mov	r1, r3
 800f36c:	4a1e      	ldr	r2, [pc, #120]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1c0>)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	4413      	add	r3, r2
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	440b      	add	r3, r1
 800f376:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	3301      	adds	r3, #1
 800f37c:	60bb      	str	r3, [r7, #8]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b06      	cmp	r3, #6
 800f382:	dded      	ble.n	800f360 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800f384:	79bb      	ldrb	r3, [r7, #6]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d103      	bne.n	800f392 <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f38a:	4a18      	ldr	r2, [pc, #96]	; (800f3ec <fm_factory_modify_k_lin_add+0x1c4>)
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	6013      	str	r3, [r2, #0]
}
 800f390:	e01a      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f392:	79bb      	ldrb	r3, [r7, #6]
 800f394:	2b02      	cmp	r3, #2
 800f396:	d103      	bne.n	800f3a0 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f398:	4a15      	ldr	r2, [pc, #84]	; (800f3f0 <fm_factory_modify_k_lin_add+0x1c8>)
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	6013      	str	r3, [r2, #0]
}
 800f39e:	e013      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f3a0:	79bb      	ldrb	r3, [r7, #6]
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d103      	bne.n	800f3ae <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f3a6:	4a13      	ldr	r2, [pc, #76]	; (800f3f4 <fm_factory_modify_k_lin_add+0x1cc>)
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	6013      	str	r3, [r2, #0]
}
 800f3ac:	e00c      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f3ae:	79bb      	ldrb	r3, [r7, #6]
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	d103      	bne.n	800f3bc <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f3b4:	4a10      	ldr	r2, [pc, #64]	; (800f3f8 <fm_factory_modify_k_lin_add+0x1d0>)
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	6013      	str	r3, [r2, #0]
}
 800f3ba:	e005      	b.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f3bc:	79bb      	ldrb	r3, [r7, #6]
 800f3be:	2b05      	cmp	r3, #5
 800f3c0:	d102      	bne.n	800f3c8 <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f3c2:	4a0e      	ldr	r2, [pc, #56]	; (800f3fc <fm_factory_modify_k_lin_add+0x1d4>)
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	6013      	str	r3, [r2, #0]
}
 800f3c8:	bf00      	nop
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	20001cdc 	.word	0x20001cdc
 800f3d4:	200000cc 	.word	0x200000cc
 800f3d8:	200000d4 	.word	0x200000d4
 800f3dc:	200000dc 	.word	0x200000dc
 800f3e0:	200000e4 	.word	0x200000e4
 800f3e4:	200000ec 	.word	0x200000ec
 800f3e8:	20001ce4 	.word	0x20001ce4
 800f3ec:	200000a4 	.word	0x200000a4
 800f3f0:	200000ac 	.word	0x200000ac
 800f3f4:	200000b4 	.word	0x200000b4
 800f3f8:	200000bc 	.word	0x200000bc
 800f3fc:	200000c4 	.word	0x200000c4

0800f400 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	460a      	mov	r2, r1
 800f40a:	71fb      	strb	r3, [r7, #7]
 800f40c:	4613      	mov	r3, r2
 800f40e:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f418:	79bb      	ldrb	r3, [r7, #6]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f996 	bl	800f74c <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	2b07      	cmp	r3, #7
 800f424:	d84e      	bhi.n	800f4c4 <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f426:	79fb      	ldrb	r3, [r7, #7]
 800f428:	f1c3 0307 	rsb	r3, r3, #7
 800f42c:	4a5e      	ldr	r2, [pc, #376]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f42e:	5cd3      	ldrb	r3, [r2, r3]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d009      	beq.n	800f448 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f434:	79fb      	ldrb	r3, [r7, #7]
 800f436:	f1c3 0307 	rsb	r3, r3, #7
 800f43a:	4a5b      	ldr	r2, [pc, #364]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f43c:	5cd2      	ldrb	r2, [r2, r3]
 800f43e:	3a01      	subs	r2, #1
 800f440:	b2d1      	uxtb	r1, r2
 800f442:	4a59      	ldr	r2, [pc, #356]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f444:	54d1      	strb	r1, [r2, r3]
 800f446:	e005      	b.n	800f454 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	f1c3 0307 	rsb	r3, r3, #7
 800f44e:	4a56      	ldr	r2, [pc, #344]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f450:	2109      	movs	r1, #9
 800f452:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f454:	2300      	movs	r3, #0
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	e00e      	b.n	800f478 <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	4613      	mov	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	4619      	mov	r1, r3
 800f466:	4a50      	ldr	r2, [pc, #320]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	440b      	add	r3, r1
 800f470:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	3301      	adds	r3, #1
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2b07      	cmp	r3, #7
 800f47c:	dded      	ble.n	800f45a <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f47e:	79bb      	ldrb	r3, [r7, #6]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d103      	bne.n	800f48c <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f484:	4a49      	ldr	r2, [pc, #292]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1ac>)
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f48a:	e089      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f48c:	79bb      	ldrb	r3, [r7, #6]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d103      	bne.n	800f49a <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f492:	4a47      	ldr	r2, [pc, #284]	; (800f5b0 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	6013      	str	r3, [r2, #0]
}
 800f498:	e082      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f49a:	79bb      	ldrb	r3, [r7, #6]
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	d103      	bne.n	800f4a8 <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f4a0:	4a44      	ldr	r2, [pc, #272]	; (800f5b4 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	6013      	str	r3, [r2, #0]
}
 800f4a6:	e07b      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f4a8:	79bb      	ldrb	r3, [r7, #6]
 800f4aa:	2b04      	cmp	r3, #4
 800f4ac:	d103      	bne.n	800f4b6 <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f4ae:	4a42      	ldr	r2, [pc, #264]	; (800f5b8 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	6013      	str	r3, [r2, #0]
}
 800f4b4:	e074      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f4b6:	79bb      	ldrb	r3, [r7, #6]
 800f4b8:	2b05      	cmp	r3, #5
 800f4ba:	d171      	bne.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f4bc:	4a3f      	ldr	r2, [pc, #252]	; (800f5bc <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	6013      	str	r3, [r2, #0]
}
 800f4c2:	e06d      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	2b07      	cmp	r3, #7
 800f4c8:	d96a      	bls.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f4ca:	79fb      	ldrb	r3, [r7, #7]
 800f4cc:	f1c3 030e 	rsb	r3, r3, #14
 800f4d0:	2b03      	cmp	r3, #3
 800f4d2:	d017      	beq.n	800f504 <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	f1c3 030e 	rsb	r3, r3, #14
 800f4da:	4a39      	ldr	r2, [pc, #228]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f4dc:	5cd3      	ldrb	r3, [r2, r3]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f4e2:	79fb      	ldrb	r3, [r7, #7]
 800f4e4:	f1c3 030e 	rsb	r3, r3, #14
 800f4e8:	4a35      	ldr	r2, [pc, #212]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f4ea:	5cd2      	ldrb	r2, [r2, r3]
 800f4ec:	3a01      	subs	r2, #1
 800f4ee:	b2d1      	uxtb	r1, r2
 800f4f0:	4a33      	ldr	r2, [pc, #204]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f4f2:	54d1      	strb	r1, [r2, r3]
 800f4f4:	e01d      	b.n	800f532 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	f1c3 030e 	rsb	r3, r3, #14
 800f4fc:	4a30      	ldr	r2, [pc, #192]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f4fe:	2109      	movs	r1, #9
 800f500:	54d1      	strb	r1, [r2, r3]
 800f502:	e016      	b.n	800f532 <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	f1c3 030e 	rsb	r3, r3, #14
 800f50a:	4a2d      	ldr	r2, [pc, #180]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f50c:	5cd3      	ldrb	r3, [r2, r3]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d009      	beq.n	800f526 <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	f1c3 030e 	rsb	r3, r3, #14
 800f518:	4a29      	ldr	r2, [pc, #164]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f51a:	5cd2      	ldrb	r2, [r2, r3]
 800f51c:	3a01      	subs	r2, #1
 800f51e:	b2d1      	uxtb	r1, r2
 800f520:	4a27      	ldr	r2, [pc, #156]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f522:	54d1      	strb	r1, [r2, r3]
 800f524:	e005      	b.n	800f532 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	f1c3 030e 	rsb	r3, r3, #14
 800f52c:	4a24      	ldr	r2, [pc, #144]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f52e:	2101      	movs	r1, #1
 800f530:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f532:	2300      	movs	r3, #0
 800f534:	60bb      	str	r3, [r7, #8]
 800f536:	e00e      	b.n	800f556 <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	4619      	mov	r1, r3
 800f544:	4a1e      	ldr	r2, [pc, #120]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	4413      	add	r3, r2
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	440b      	add	r3, r1
 800f54e:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	3301      	adds	r3, #1
 800f554:	60bb      	str	r3, [r7, #8]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	2b06      	cmp	r3, #6
 800f55a:	dded      	ble.n	800f538 <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800f55c:	79bb      	ldrb	r3, [r7, #6]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d103      	bne.n	800f56a <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f562:	4a18      	ldr	r2, [pc, #96]	; (800f5c4 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	6013      	str	r3, [r2, #0]
}
 800f568:	e01a      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f56a:	79bb      	ldrb	r3, [r7, #6]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d103      	bne.n	800f578 <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f570:	4a15      	ldr	r2, [pc, #84]	; (800f5c8 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	6013      	str	r3, [r2, #0]
}
 800f576:	e013      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f578:	79bb      	ldrb	r3, [r7, #6]
 800f57a:	2b03      	cmp	r3, #3
 800f57c:	d103      	bne.n	800f586 <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f57e:	4a13      	ldr	r2, [pc, #76]	; (800f5cc <fm_factory_modify_k_lin_subs+0x1cc>)
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	6013      	str	r3, [r2, #0]
}
 800f584:	e00c      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f586:	79bb      	ldrb	r3, [r7, #6]
 800f588:	2b04      	cmp	r3, #4
 800f58a:	d103      	bne.n	800f594 <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f58c:	4a10      	ldr	r2, [pc, #64]	; (800f5d0 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	6013      	str	r3, [r2, #0]
}
 800f592:	e005      	b.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f594:	79bb      	ldrb	r3, [r7, #6]
 800f596:	2b05      	cmp	r3, #5
 800f598:	d102      	bne.n	800f5a0 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f59a:	4a0e      	ldr	r2, [pc, #56]	; (800f5d4 <fm_factory_modify_k_lin_subs+0x1d4>)
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	6013      	str	r3, [r2, #0]
}
 800f5a0:	bf00      	nop
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	20001cdc 	.word	0x20001cdc
 800f5ac:	200000cc 	.word	0x200000cc
 800f5b0:	200000d4 	.word	0x200000d4
 800f5b4:	200000dc 	.word	0x200000dc
 800f5b8:	200000e4 	.word	0x200000e4
 800f5bc:	200000ec 	.word	0x200000ec
 800f5c0:	20001ce4 	.word	0x20001ce4
 800f5c4:	200000a4 	.word	0x200000a4
 800f5c8:	200000ac 	.word	0x200000ac
 800f5cc:	200000b4 	.word	0x200000b4
 800f5d0:	200000bc 	.word	0x200000bc
 800f5d4:	200000c4 	.word	0x200000c4

0800f5d8 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	71fb      	strb	r3, [r7, #7]
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	71bb      	strb	r3, [r7, #6]
 800f5e6:	4613      	mov	r3, r2
 800f5e8:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f5ea:	4a07      	ldr	r2, [pc, #28]	; (800f608 <fm_factory_modify_res_acm_ttl+0x30>)
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f5f0:	4a06      	ldr	r2, [pc, #24]	; (800f60c <fm_factory_modify_res_acm_ttl+0x34>)
 800f5f2:	79bb      	ldrb	r3, [r7, #6]
 800f5f4:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f5f6:	4a06      	ldr	r2, [pc, #24]	; (800f610 <fm_factory_modify_res_acm_ttl+0x38>)
 800f5f8:	797b      	ldrb	r3, [r7, #5]
 800f5fa:	7313      	strb	r3, [r2, #12]
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	2000009c 	.word	0x2000009c
 800f60c:	20000030 	.word	0x20000030
 800f610:	20000010 	.word	0x20000010

0800f614 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	460a      	mov	r2, r1
 800f61e:	71fb      	strb	r3, [r7, #7]
 800f620:	4613      	mov	r3, r2
 800f622:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f624:	4a05      	ldr	r2, [pc, #20]	; (800f63c <fm_factory_modify_res_rate+0x28>)
 800f626:	79fb      	ldrb	r3, [r7, #7]
 800f628:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f62a:	4a05      	ldr	r2, [pc, #20]	; (800f640 <fm_factory_modify_res_rate+0x2c>)
 800f62c:	79bb      	ldrb	r3, [r7, #6]
 800f62e:	7313      	strb	r3, [r2, #12]
}
 800f630:	bf00      	nop
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	20000094 	.word	0x20000094
 800f640:	20000050 	.word	0x20000050

0800f644 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f64e:	4a07      	ldr	r2, [pc, #28]	; (800f66c <fm_factory_modify_time_units+0x28>)
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f654:	4a06      	ldr	r2, [pc, #24]	; (800f670 <fm_factory_modify_time_units+0x2c>)
 800f656:	79fb      	ldrb	r3, [r7, #7]
 800f658:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f65a:	4a06      	ldr	r2, [pc, #24]	; (800f674 <fm_factory_modify_time_units+0x30>)
 800f65c:	79fb      	ldrb	r3, [r7, #7]
 800f65e:	7653      	strb	r3, [r2, #25]
}
 800f660:	bf00      	nop
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	20000030 	.word	0x20000030
 800f670:	20000010 	.word	0x20000010
 800f674:	20000050 	.word	0x20000050

0800f678 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f682:	4a07      	ldr	r2, [pc, #28]	; (800f6a0 <fm_factory_modify_volume_units+0x28>)
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f688:	4a06      	ldr	r2, [pc, #24]	; (800f6a4 <fm_factory_modify_volume_units+0x2c>)
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f68e:	4a06      	ldr	r2, [pc, #24]	; (800f6a8 <fm_factory_modify_volume_units+0x30>)
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	7613      	strb	r3, [r2, #24]
}
 800f694:	bf00      	nop
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	20000030 	.word	0x20000030
 800f6a4:	20000010 	.word	0x20000010
 800f6a8:	20000050 	.word	0x20000050

0800f6ac <fm_factory_reset_acm>:

void fm_factory_reset_acm()
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f6b0:	4907      	ldr	r1, [pc, #28]	; (800f6d0 <fm_factory_reset_acm+0x24>)
 800f6b2:	f04f 0200 	mov.w	r2, #0
 800f6b6:	f04f 0300 	mov.w	r3, #0
 800f6ba:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f6be:	4b04      	ldr	r3, [pc, #16]	; (800f6d0 <fm_factory_reset_acm+0x24>)
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	609a      	str	r2, [r3, #8]
}
 800f6c4:	bf00      	nop
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	20000030 	.word	0x20000030

0800f6d4 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f6da:	2307      	movs	r3, #7
 800f6dc:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f6de:	463b      	mov	r3, r7
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff fba2 	bl	800ee2c <fm_factory_get_k_factor>
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f6ec:	e021      	b.n	800f732 <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d016      	beq.n	800f722 <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800f6f4:	68f9      	ldr	r1, [r7, #12]
 800f6f6:	4b13      	ldr	r3, [pc, #76]	; (800f744 <fm_factory_separate_k_factor+0x70>)
 800f6f8:	fba3 2301 	umull	r2, r3, r3, r1
 800f6fc:	08da      	lsrs	r2, r3, #3
 800f6fe:	4613      	mov	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4413      	add	r3, r2
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	1aca      	subs	r2, r1, r3
 800f708:	b2d1      	uxtb	r1, r2
 800f70a:	4a0f      	ldr	r2, [pc, #60]	; (800f748 <fm_factory_separate_k_factor+0x74>)
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	4413      	add	r3, r2
 800f710:	460a      	mov	r2, r1
 800f712:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	4a0b      	ldr	r2, [pc, #44]	; (800f744 <fm_factory_separate_k_factor+0x70>)
 800f718:	fba2 2303 	umull	r2, r3, r2, r3
 800f71c:	08db      	lsrs	r3, r3, #3
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	e004      	b.n	800f72c <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800f722:	4a09      	ldr	r2, [pc, #36]	; (800f748 <fm_factory_separate_k_factor+0x74>)
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	4413      	add	r3, r2
 800f728:	2200      	movs	r2, #0
 800f72a:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3b01      	subs	r3, #1
 800f730:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b00      	cmp	r3, #0
 800f736:	dada      	bge.n	800f6ee <fm_factory_separate_k_factor+0x1a>
    }
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	cccccccd 	.word	0xcccccccd
 800f748:	20001cd4 	.word	0x20001cd4

0800f74c <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	; 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f756:	2307      	movs	r3, #7
 800f758:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f75a:	2306      	movs	r3, #6
 800f75c:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f75e:	f107 0308 	add.w	r3, r7, #8
 800f762:	79fa      	ldrb	r2, [r7, #7]
 800f764:	4611      	mov	r1, r2
 800f766:	4618      	mov	r0, r3
 800f768:	f7ff fb60 	bl	800ee2c <fm_factory_get_k_factor>
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f770:	f107 0310 	add.w	r3, r7, #16
 800f774:	79fa      	ldrb	r2, [r7, #7]
 800f776:	4611      	mov	r1, r2
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff fbb3 	bl	800eee4 <fm_factory_get_frec_lin>
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f782:	e021      	b.n	800f7c8 <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	2b00      	cmp	r3, #0
 800f788:	d016      	beq.n	800f7b8 <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800f78a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f78c:	4b25      	ldr	r3, [pc, #148]	; (800f824 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f78e:	fba3 2301 	umull	r2, r3, r3, r1
 800f792:	08da      	lsrs	r2, r3, #3
 800f794:	4613      	mov	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	1aca      	subs	r2, r1, r3
 800f79e:	b2d1      	uxtb	r1, r2
 800f7a0:	4a21      	ldr	r2, [pc, #132]	; (800f828 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	460a      	mov	r2, r1
 800f7a8:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	4a1d      	ldr	r2, [pc, #116]	; (800f824 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f7b2:	08db      	lsrs	r3, r3, #3
 800f7b4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7b6:	e004      	b.n	800f7c2 <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800f7b8:	4a1b      	ldr	r2, [pc, #108]	; (800f828 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	4413      	add	r3, r2
 800f7be:	2200      	movs	r2, #0
 800f7c0:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dada      	bge.n	800f784 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f7ce:	e021      	b.n	800f814 <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d016      	beq.n	800f804 <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800f7d6:	6a39      	ldr	r1, [r7, #32]
 800f7d8:	4b12      	ldr	r3, [pc, #72]	; (800f824 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f7da:	fba3 2301 	umull	r2, r3, r3, r1
 800f7de:	08da      	lsrs	r2, r3, #3
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4413      	add	r3, r2
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	1aca      	subs	r2, r1, r3
 800f7ea:	b2d1      	uxtb	r1, r2
 800f7ec:	4a0f      	ldr	r2, [pc, #60]	; (800f82c <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	460a      	mov	r2, r1
 800f7f4:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800f7f6:	6a3b      	ldr	r3, [r7, #32]
 800f7f8:	4a0a      	ldr	r2, [pc, #40]	; (800f824 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f7fe:	08db      	lsrs	r3, r3, #3
 800f800:	623b      	str	r3, [r7, #32]
 800f802:	e004      	b.n	800f80e <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800f804:	4a09      	ldr	r2, [pc, #36]	; (800f82c <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	4413      	add	r3, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	3b01      	subs	r3, #1
 800f812:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	2b00      	cmp	r3, #0
 800f818:	dada      	bge.n	800f7d0 <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800f81a:	bf00      	nop
 800f81c:	bf00      	nop
 800f81e:	3728      	adds	r7, #40	; 0x28
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	cccccccd 	.word	0xcccccccd
 800f828:	20001cdc 	.word	0x20001cdc
 800f82c:	20001ce4 	.word	0x20001ce4

0800f830 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	4603      	mov	r3, r0
 800f838:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f83a:	2015      	movs	r0, #21
 800f83c:	f7f4 fba2 	bl	8003f84 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f840:	2016      	movs	r0, #22
 800f842:	f7f4 fb9f 	bl	8003f84 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f846:	2017      	movs	r0, #23
 800f848:	f7f4 fb9c 	bl	8003f84 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f84c:	2018      	movs	r0, #24
 800f84e:	f7f4 fb99 	bl	8003f84 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f852:	88fb      	ldrh	r3, [r7, #6]
 800f854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f858:	d018      	beq.n	800f88c <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f85a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f85e:	dc18      	bgt.n	800f892 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f864:	d00f      	beq.n	800f886 <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f86a:	dc12      	bgt.n	800f892 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f86c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f870:	d003      	beq.n	800f87a <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f876:	d003      	beq.n	800f880 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f878:	e00b      	b.n	800f892 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f87a:	2302      	movs	r3, #2
 800f87c:	73fb      	strb	r3, [r7, #15]
        break;
 800f87e:	e009      	b.n	800f894 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f880:	2303      	movs	r3, #3
 800f882:	73fb      	strb	r3, [r7, #15]
        break;
 800f884:	e006      	b.n	800f894 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f886:	2304      	movs	r3, #4
 800f888:	73fb      	strb	r3, [r7, #15]
        break;
 800f88a:	e003      	b.n	800f894 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f88c:	2305      	movs	r3, #5
 800f88e:	73fb      	strb	r3, [r7, #15]
        break;
 800f890:	e000      	b.n	800f894 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f892:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800f894:	f107 030f 	add.w	r3, r7, #15
 800f898:	2200      	movs	r2, #0
 800f89a:	4619      	mov	r1, r3
 800f89c:	4805      	ldr	r0, [pc, #20]	; (800f8b4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f89e:	f7fe fdfd 	bl	800e49c <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	4804      	ldr	r0, [pc, #16]	; (800f8b8 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f8a6:	f7fe fe43 	bl	800e530 <_txe_semaphore_ceiling_put>
}
 800f8aa:	bf00      	nop
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20001388 	.word	0x20001388
 800f8b8:	2000136c 	.word	0x2000136c

0800f8bc <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b0b8      	sub	sp, #224	; 0xe0
 800f8c0:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f8c2:	f107 0318 	add.w	r3, r7, #24
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f005 f914 	bl	8014af4 <fmc_get_acm>
 800f8cc:	2314      	movs	r3, #20
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	1d3b      	adds	r3, r7, #4
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	2309      	movs	r3, #9
 800f8d6:	2220      	movs	r2, #32
 800f8d8:	f107 0120 	add.w	r1, r7, #32
 800f8dc:	c903      	ldmia	r1, {r0, r1}
 800f8de:	f000 fa13 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f8e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f005 f904 	bl	8014af4 <fmc_get_acm>
 800f8ec:	1d3a      	adds	r2, r7, #4
 800f8ee:	2314      	movs	r3, #20
 800f8f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f8f4:	c903      	ldmia	r1, {r0, r1}
 800f8f6:	f000 f9c3 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f8fa:	1d3b      	adds	r3, r7, #4
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fbf4 	bl	80100ec <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f904:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f908:	4618      	mov	r0, r3
 800f90a:	f005 f959 	bl	8014bc0 <fmc_get_rate>
 800f90e:	2314      	movs	r3, #20
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	1d3b      	adds	r3, r7, #4
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	2308      	movs	r3, #8
 800f918:	2220      	movs	r2, #32
 800f91a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f91e:	c903      	ldmia	r1, {r0, r1}
 800f920:	f000 f9f2 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f924:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f928:	4618      	mov	r0, r3
 800f92a:	f005 f949 	bl	8014bc0 <fmc_get_rate>
 800f92e:	1d3a      	adds	r2, r7, #4
 800f930:	2314      	movs	r3, #20
 800f932:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f936:	c903      	ldmia	r1, {r0, r1}
 800f938:	f000 f9a2 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f93c:	1d3b      	adds	r3, r7, #4
 800f93e:	2101      	movs	r1, #1
 800f940:	4618      	mov	r0, r3
 800f942:	f000 fbd3 	bl	80100ec <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f946:	2100      	movs	r1, #0
 800f948:	2006      	movs	r0, #6
 800f94a:	f001 ff35 	bl	80117b8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f94e:	2100      	movs	r1, #0
 800f950:	2002      	movs	r0, #2
 800f952:	f001 ff31 	bl	80117b8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f956:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f95a:	4618      	mov	r0, r3
 800f95c:	f005 f8ca 	bl	8014af4 <fmc_get_acm>
 800f960:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f964:	2100      	movs	r1, #0
 800f966:	4618      	mov	r0, r3
 800f968:	f002 fae6 	bl	8011f38 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f96c:	2100      	movs	r1, #0
 800f96e:	2007      	movs	r0, #7
 800f970:	f001 ff22 	bl	80117b8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f974:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f978:	4618      	mov	r0, r3
 800f97a:	f005 f8bb 	bl	8014af4 <fmc_get_acm>
 800f97e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f982:	2100      	movs	r1, #0
 800f984:	4618      	mov	r0, r3
 800f986:	f002 fa95 	bl	8011eb4 <lcd_set_time_unit>
}
 800f98a:	bf00      	nop
 800f98c:	37d8      	adds	r7, #216	; 0xd8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b0a2      	sub	sp, #136	; 0x88
 800f996:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f998:	f107 0318 	add.w	r3, r7, #24
 800f99c:	4618      	mov	r0, r3
 800f99e:	f005 f8a9 	bl	8014af4 <fmc_get_acm>
 800f9a2:	2314      	movs	r3, #20
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	1d3b      	adds	r3, r7, #4
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	2309      	movs	r3, #9
 800f9ac:	2220      	movs	r2, #32
 800f9ae:	f107 0120 	add.w	r1, r7, #32
 800f9b2:	c903      	ldmia	r1, {r0, r1}
 800f9b4:	f000 f9a8 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f9b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f005 f899 	bl	8014af4 <fmc_get_acm>
 800f9c2:	1d3a      	adds	r2, r7, #4
 800f9c4:	2314      	movs	r3, #20
 800f9c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f9ca:	c903      	ldmia	r1, {r0, r1}
 800f9cc:	f000 f958 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f9d0:	1d3b      	adds	r3, r7, #4
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 fb89 	bl	80100ec <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800f9da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f005 f8c8 	bl	8014b74 <fmc_get_stm32_temp>
 800f9e4:	2314      	movs	r3, #20
 800f9e6:	9301      	str	r3, [sp, #4]
 800f9e8:	1d3b      	adds	r3, r7, #4
 800f9ea:	9300      	str	r3, [sp, #0]
 800f9ec:	2308      	movs	r3, #8
 800f9ee:	2220      	movs	r2, #32
 800f9f0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f9f4:	c903      	ldmia	r1, {r0, r1}
 800f9f6:	f000 f987 	bl	800fd08 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800f9fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f005 f8b8 	bl	8014b74 <fmc_get_stm32_temp>
 800fa04:	1d3a      	adds	r2, r7, #4
 800fa06:	2314      	movs	r3, #20
 800fa08:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800fa0c:	c903      	ldmia	r1, {r0, r1}
 800fa0e:	f000 f937 	bl	800fc80 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fa12:	1d3b      	adds	r3, r7, #4
 800fa14:	2101      	movs	r1, #1
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 fb68 	bl	80100ec <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	2006      	movs	r0, #6
 800fa20:	f001 feca 	bl	80117b8 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800fa24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f005 f8a3 	bl	8014b74 <fmc_get_stm32_temp>
 800fa2e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fa32:	2100      	movs	r1, #0
 800fa34:	4618      	mov	r0, r3
 800fa36:	f002 fa7f 	bl	8011f38 <lcd_set_vol_unit>
}
 800fa3a:	bf00      	nop
 800fa3c:	3780      	adds	r7, #128	; 0x80
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fa46:	f000 fd69 	bl	801051c <lcd_clear_all>
}
 800fa4a:	bf00      	nop
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b090      	sub	sp, #64	; 0x40
 800fa54:	af02      	add	r7, sp, #8
 800fa56:	4603      	mov	r3, r0
 800fa58:	73fb      	strb	r3, [r7, #15]
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	73bb      	strb	r3, [r7, #14]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d00a      	beq.n	800fa7e <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fa68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff fac3 	bl	800eff8 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800fa72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7ff fad0 	bl	800f01c <fm_factory_get_fp_time_conf>
 800fa7c:	e019      	b.n	800fab2 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fa7e:	f7ff f91b 	bl	800ecb8 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fa82:	f7ff f8f3 	bl	800ec6c <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800fa86:	463b      	mov	r3, r7
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7ff fa91 	bl	800efb0 <fm_factory_get_fp_date>
 800fa8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa92:	463a      	mov	r2, r7
 800fa94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa98:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fa9c:	463b      	mov	r3, r7
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff fa98 	bl	800efd4 <fm_factory_get_fp_time>
 800faa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800faa8:	463a      	mov	r2, r7
 800faaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800faae:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800fab2:	2314      	movs	r3, #20
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	f107 0314 	add.w	r3, r7, #20
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	2309      	movs	r3, #9
 800fabe:	2230      	movs	r2, #48	; 0x30
 800fac0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fac4:	c903      	ldmia	r1, {r0, r1}
 800fac6:	f000 f91f 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800faca:	f107 0314 	add.w	r3, r7, #20
 800face:	2100      	movs	r1, #0
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fb0b 	bl	80100ec <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fad6:	2101      	movs	r1, #1
 800fad8:	2000      	movs	r0, #0
 800fada:	f001 fdc1 	bl	8011660 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fade:	2103      	movs	r1, #3
 800fae0:	2000      	movs	r0, #0
 800fae2:	f001 fdbd 	bl	8011660 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800fae6:	2314      	movs	r3, #20
 800fae8:	9301      	str	r3, [sp, #4]
 800faea:	f107 0314 	add.w	r3, r7, #20
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	2308      	movs	r3, #8
 800faf2:	2230      	movs	r2, #48	; 0x30
 800faf4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800faf8:	c903      	ldmia	r1, {r0, r1}
 800fafa:	f000 f905 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	2101      	movs	r1, #1
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 faf1 	bl	80100ec <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fb0a:	2101      	movs	r1, #1
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	f000 fd2d 	bl	801056c <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fb12:	2102      	movs	r1, #2
 800fb14:	2001      	movs	r0, #1
 800fb16:	f001 fda3 	bl	8011660 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800fb1a:	2104      	movs	r1, #4
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	f001 fd9f 	bl	8011660 <lcd_set_point>

    if(configuration)
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d07e      	beq.n	800fc26 <fm_lcd_date_hour+0x1d6>
    {
        if(event_id == EVENT_KEY_ENTER ||
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
 800fb2a:	2b04      	cmp	r3, #4
 800fb2c:	d006      	beq.n	800fb3c <fm_lcd_date_hour+0xec>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fb2e:	4b40      	ldr	r3, [pc, #256]	; (800fc30 <fm_lcd_date_hour+0x1e0>)
 800fb30:	781b      	ldrb	r3, [r3, #0]
        if(event_id == EVENT_KEY_ENTER ||
 800fb32:	2b04      	cmp	r3, #4
 800fb34:	d106      	bne.n	800fb44 <fm_lcd_date_hour+0xf4>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fb36:	7bbb      	ldrb	r3, [r7, #14]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d103      	bne.n	800fb44 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800fb3c:	4b3d      	ldr	r3, [pc, #244]	; (800fc34 <fm_lcd_date_hour+0x1e4>)
 800fb3e:	2201      	movs	r2, #1
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	e016      	b.n	800fb72 <fm_lcd_date_hour+0x122>
        }
        else if(event_id == EVENT_KEY_DOWN ||
 800fb44:	7bbb      	ldrb	r3, [r7, #14]
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d010      	beq.n	800fb6c <fm_lcd_date_hour+0x11c>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fb4a:	4b39      	ldr	r3, [pc, #228]	; (800fc30 <fm_lcd_date_hour+0x1e0>)
 800fb4c:	781b      	ldrb	r3, [r3, #0]
        else if(event_id == EVENT_KEY_DOWN ||
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d102      	bne.n	800fb58 <fm_lcd_date_hour+0x108>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fb52:	7bbb      	ldrb	r3, [r7, #14]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d009      	beq.n	800fb6c <fm_lcd_date_hour+0x11c>
 800fb58:	7bbb      	ldrb	r3, [r7, #14]
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d006      	beq.n	800fb6c <fm_lcd_date_hour+0x11c>
        event_id == EVENT_KEY_UP ||
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fb5e:	4b34      	ldr	r3, [pc, #208]	; (800fc30 <fm_lcd_date_hour+0x1e0>)
 800fb60:	781b      	ldrb	r3, [r3, #0]
        event_id == EVENT_KEY_UP ||
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d105      	bne.n	800fb72 <fm_lcd_date_hour+0x122>
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fb66:	7bbb      	ldrb	r3, [r7, #14]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d102      	bne.n	800fb72 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fb6c:	4b31      	ldr	r3, [pc, #196]	; (800fc34 <fm_lcd_date_hour+0x1e4>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
        }

        if(blink == 1)
 800fb72:	4b30      	ldr	r3, [pc, #192]	; (800fc34 <fm_lcd_date_hour+0x1e4>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d152      	bne.n	800fc20 <fm_lcd_date_hour+0x1d0>
        {
            if(field == DAY)
 800fb7a:	7b7b      	ldrb	r3, [r7, #13]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d108      	bne.n	800fb92 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fb80:	2100      	movs	r1, #0
 800fb82:	2001      	movs	r0, #1
 800fb84:	f000 fcf2 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fb88:	2100      	movs	r1, #0
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	f000 fcee 	bl	801056c <lcd_clear_digit>
 800fb90:	e042      	b.n	800fc18 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MONTH)
 800fb92:	7b7b      	ldrb	r3, [r7, #13]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d108      	bne.n	800fbaa <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fb98:	2100      	movs	r1, #0
 800fb9a:	2003      	movs	r0, #3
 800fb9c:	f000 fce6 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fba0:	2100      	movs	r1, #0
 800fba2:	2002      	movs	r0, #2
 800fba4:	f000 fce2 	bl	801056c <lcd_clear_digit>
 800fba8:	e036      	b.n	800fc18 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == YEAR)
 800fbaa:	7b7b      	ldrb	r3, [r7, #13]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d110      	bne.n	800fbd2 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	2007      	movs	r0, #7
 800fbb4:	f000 fcda 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fbb8:	2100      	movs	r1, #0
 800fbba:	2006      	movs	r0, #6
 800fbbc:	f000 fcd6 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	2005      	movs	r0, #5
 800fbc4:	f000 fcd2 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fbc8:	2100      	movs	r1, #0
 800fbca:	2004      	movs	r0, #4
 800fbcc:	f000 fcce 	bl	801056c <lcd_clear_digit>
 800fbd0:	e022      	b.n	800fc18 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == HOUR)
 800fbd2:	7b7b      	ldrb	r3, [r7, #13]
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d108      	bne.n	800fbea <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fbd8:	2101      	movs	r1, #1
 800fbda:	2002      	movs	r0, #2
 800fbdc:	f000 fcc6 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fbe0:	2101      	movs	r1, #1
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	f000 fcc2 	bl	801056c <lcd_clear_digit>
 800fbe8:	e016      	b.n	800fc18 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MINUTE)
 800fbea:	7b7b      	ldrb	r3, [r7, #13]
 800fbec:	2b04      	cmp	r3, #4
 800fbee:	d108      	bne.n	800fc02 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	2004      	movs	r0, #4
 800fbf4:	f000 fcba 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fbf8:	2101      	movs	r1, #1
 800fbfa:	2003      	movs	r0, #3
 800fbfc:	f000 fcb6 	bl	801056c <lcd_clear_digit>
 800fc00:	e00a      	b.n	800fc18 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == SECOND)
 800fc02:	7b7b      	ldrb	r3, [r7, #13]
 800fc04:	2b05      	cmp	r3, #5
 800fc06:	d107      	bne.n	800fc18 <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fc08:	2101      	movs	r1, #1
 800fc0a:	2006      	movs	r0, #6
 800fc0c:	f000 fcae 	bl	801056c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fc10:	2101      	movs	r1, #1
 800fc12:	2005      	movs	r0, #5
 800fc14:	f000 fcaa 	bl	801056c <lcd_clear_digit>
            }

            blink = 0;
 800fc18:	4b06      	ldr	r3, [pc, #24]	; (800fc34 <fm_lcd_date_hour+0x1e4>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800fc1e:	e002      	b.n	800fc26 <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800fc20:	4b04      	ldr	r3, [pc, #16]	; (800fc34 <fm_lcd_date_hour+0x1e4>)
 800fc22:	2201      	movs	r2, #1
 800fc24:	601a      	str	r2, [r3, #0]
}
 800fc26:	bf00      	nop
 800fc28:	3738      	adds	r7, #56	; 0x38
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20001dbb 	.word	0x20001dbb
 800fc34:	2000011c 	.word	0x2000011c

0800fc38 <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60b9      	str	r1, [r7, #8]
 800fc40:	607a      	str	r2, [r7, #4]
 800fc42:	603b      	str	r3, [r7, #0]
 800fc44:	4603      	mov	r3, r0
 800fc46:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d106      	bne.n	800fc5c <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800fc4e:	6839      	ldr	r1, [r7, #0]
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	4a09      	ldr	r2, [pc, #36]	; (800fc78 <fm_lcd_format_number_in_line+0x40>)
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f005 f8c7 	bl	8014de8 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fc5a:	e008      	b.n	800fc6e <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d105      	bne.n	800fc6e <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fc62:	6839      	ldr	r1, [r7, #0]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	4a05      	ldr	r2, [pc, #20]	; (800fc7c <fm_lcd_format_number_in_line+0x44>)
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f005 f8bd 	bl	8014de8 <sniprintf>
}
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	08015900 	.word	0x08015900
 800fc7c:	08015908 	.word	0x08015908

0800fc80 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fc80:	b590      	push	{r4, r7, lr}
 800fc82:	b087      	sub	sp, #28
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	f107 0408 	add.w	r4, r7, #8
 800fc8a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc8e:	607a      	str	r2, [r7, #4]
 800fc90:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fc92:	7b3b      	ldrb	r3, [r7, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d101      	bne.n	800fc9c <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e031      	b.n	800fd00 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7f0 fc11 	bl	80004c4 <strlen>
 800fca2:	4603      	mov	r3, r0
 800fca4:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	3302      	adds	r3, #2
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	dc02      	bgt.n	800fcb6 <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb4:	e024      	b.n	800fd00 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fcb6:	7b3b      	ldrb	r3, [r7, #12]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	1a9b      	subs	r3, r3, r2
 800fcbe:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fcc0:	e00b      	b.n	800fcda <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	441a      	add	r2, r3
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	3301      	adds	r3, #1
 800fccc:	6879      	ldr	r1, [r7, #4]
 800fcce:	440b      	add	r3, r1
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d1ef      	bne.n	800fcc2 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	441a      	add	r2, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	3301      	adds	r3, #1
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	440b      	add	r3, r1
 800fcf0:	7812      	ldrb	r2, [r2, #0]
 800fcf2:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	222e      	movs	r2, #46	; 0x2e
 800fcfc:	701a      	strb	r2, [r3, #0]

    return (0);
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	371c      	adds	r7, #28
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd90      	pop	{r4, r7, pc}

0800fd08 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fd08:	b490      	push	{r4, r7}
 800fd0a:	b088      	sub	sp, #32
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	f107 0408 	add.w	r4, r7, #8
 800fd12:	e884 0003 	stmia.w	r4, {r0, r1}
 800fd16:	603b      	str	r3, [r7, #0]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	2b13      	cmp	r3, #19
 800fd24:	dc02      	bgt.n	800fd2c <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fd26:	f04f 33ff 	mov.w	r3, #4294967295
 800fd2a:	e086      	b.n	800fe3a <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800fd2c:	68b9      	ldr	r1, [r7, #8]
 800fd2e:	4b45      	ldr	r3, [pc, #276]	; (800fe44 <fm_lcd_fp_to_str+0x13c>)
 800fd30:	fba3 2301 	umull	r2, r3, r3, r1
 800fd34:	08da      	lsrs	r2, r3, #3
 800fd36:	4613      	mov	r3, r2
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	4413      	add	r3, r2
 800fd3c:	005b      	lsls	r3, r3, #1
 800fd3e:	1aca      	subs	r2, r1, r3
 800fd40:	b2d2      	uxtb	r2, r2
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd46:	440b      	add	r3, r1
 800fd48:	3230      	adds	r2, #48	; 0x30
 800fd4a:	b2d2      	uxtb	r2, r2
 800fd4c:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800fd52:	e019      	b.n	800fd88 <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	3301      	adds	r3, #1
 800fd58:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	4a39      	ldr	r2, [pc, #228]	; (800fe44 <fm_lcd_fp_to_str+0x13c>)
 800fd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd62:	08db      	lsrs	r3, r3, #3
 800fd64:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800fd66:	68b9      	ldr	r1, [r7, #8]
 800fd68:	4b36      	ldr	r3, [pc, #216]	; (800fe44 <fm_lcd_fp_to_str+0x13c>)
 800fd6a:	fba3 2301 	umull	r2, r3, r3, r1
 800fd6e:	08da      	lsrs	r2, r3, #3
 800fd70:	4613      	mov	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	4413      	add	r3, r2
 800fd76:	005b      	lsls	r3, r3, #1
 800fd78:	1aca      	subs	r2, r1, r3
 800fd7a:	b2d2      	uxtb	r2, r2
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd80:	440b      	add	r3, r1
 800fd82:	3230      	adds	r2, #48	; 0x30
 800fd84:	b2d2      	uxtb	r2, r2
 800fd86:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2b09      	cmp	r3, #9
 800fd8c:	d8e2      	bhi.n	800fd54 <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d119      	bne.n	800fdc8 <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800fd94:	e013      	b.n	800fdbe <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800fd9c:	68b9      	ldr	r1, [r7, #8]
 800fd9e:	4b29      	ldr	r3, [pc, #164]	; (800fe44 <fm_lcd_fp_to_str+0x13c>)
 800fda0:	fba3 2301 	umull	r2, r3, r3, r1
 800fda4:	08da      	lsrs	r2, r3, #3
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	1aca      	subs	r2, r1, r3
 800fdb0:	b2d2      	uxtb	r2, r2
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdb6:	440b      	add	r3, r1
 800fdb8:	3230      	adds	r2, #48	; 0x30
 800fdba:	b2d2      	uxtb	r2, r2
 800fdbc:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fdbe:	7b3b      	ldrb	r3, [r7, #12]
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	dbe6      	blt.n	800fd96 <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00d      	beq.n	800fdea <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800fdce:	e007      	b.n	800fde0 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdda:	4413      	add	r3, r2
 800fddc:	79fa      	ldrb	r2, [r7, #7]
 800fdde:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	69fa      	ldr	r2, [r7, #28]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	dbf2      	blt.n	800fdd0 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdee:	4413      	add	r3, r2
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fdfe:	e017      	b.n	800fe30 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe04:	4413      	add	r3, r2
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe0e:	441a      	add	r2, r3
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe14:	440b      	add	r3, r1
 800fe16:	7812      	ldrb	r2, [r2, #0]
 800fe18:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe1e:	4413      	add	r3, r2
 800fe20:	7cfa      	ldrb	r2, [r7, #19]
 800fe22:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fe30:	69fa      	ldr	r2, [r7, #28]
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	dce3      	bgt.n	800fe00 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3720      	adds	r7, #32
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bc90      	pop	{r4, r7}
 800fe42:	4770      	bx	lr
 800fe44:	cccccccd 	.word	0xcccccccd

0800fe48 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fe4c:	f000 fb66 	bl	801051c <lcd_clear_all>
    lcd_init();
 800fe50:	f001 f9fc 	bl	801124c <lcd_init>
}
 800fe54:	bf00      	nop
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08e      	sub	sp, #56	; 0x38
 800fe5c:	af02      	add	r7, sp, #8
 800fe5e:	4603      	mov	r3, r0
 800fe60:	460a      	mov	r2, r1
 800fe62:	71fb      	strb	r3, [r7, #7]
 800fe64:	4613      	mov	r3, r2
 800fe66:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fe68:	f107 0320 	add.w	r3, r7, #32
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe ffdc 	bl	800ee2c <fm_factory_get_k_factor>
 800fe74:	2314      	movs	r3, #20
 800fe76:	9301      	str	r3, [sp, #4]
 800fe78:	f107 030c 	add.w	r3, r7, #12
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	2309      	movs	r3, #9
 800fe80:	2230      	movs	r2, #48	; 0x30
 800fe82:	f107 0120 	add.w	r1, r7, #32
 800fe86:	c903      	ldmia	r1, {r0, r1}
 800fe88:	f7ff ff3e 	bl	800fd08 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800fe8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe90:	2100      	movs	r1, #0
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fe ffca 	bl	800ee2c <fm_factory_get_k_factor>
 800fe98:	f107 020c 	add.w	r2, r7, #12
 800fe9c:	2314      	movs	r3, #20
 800fe9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fea2:	c903      	ldmia	r1, {r0, r1}
 800fea4:	f7ff feec 	bl	800fc80 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fea8:	f107 030c 	add.w	r3, r7, #12
 800feac:	2100      	movs	r1, #0
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 f91c 	bl	80100ec <fm_lcd_puts>

    if(event_id == EVENT_KEY_ENTER ||
 800feb4:	79fb      	ldrb	r3, [r7, #7]
 800feb6:	2b04      	cmp	r3, #4
 800feb8:	d006      	beq.n	800fec8 <fm_lcd_k_factor+0x70>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800feba:	4b1e      	ldr	r3, [pc, #120]	; (800ff34 <fm_lcd_k_factor+0xdc>)
 800febc:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800febe:	2b04      	cmp	r3, #4
 800fec0:	d106      	bne.n	800fed0 <fm_lcd_k_factor+0x78>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fec2:	79fb      	ldrb	r3, [r7, #7]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d103      	bne.n	800fed0 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fec8:	4b1b      	ldr	r3, [pc, #108]	; (800ff38 <fm_lcd_k_factor+0xe0>)
 800feca:	2201      	movs	r2, #1
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	e016      	b.n	800fefe <fm_lcd_k_factor+0xa6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d010      	beq.n	800fef8 <fm_lcd_k_factor+0xa0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fed6:	4b17      	ldr	r3, [pc, #92]	; (800ff34 <fm_lcd_k_factor+0xdc>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800feda:	2b03      	cmp	r3, #3
 800fedc:	d102      	bne.n	800fee4 <fm_lcd_k_factor+0x8c>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fede:	79fb      	ldrb	r3, [r7, #7]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d009      	beq.n	800fef8 <fm_lcd_k_factor+0xa0>
 800fee4:	79fb      	ldrb	r3, [r7, #7]
 800fee6:	2b02      	cmp	r3, #2
 800fee8:	d006      	beq.n	800fef8 <fm_lcd_k_factor+0xa0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800feea:	4b12      	ldr	r3, [pc, #72]	; (800ff34 <fm_lcd_k_factor+0xdc>)
 800feec:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d105      	bne.n	800fefe <fm_lcd_k_factor+0xa6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d102      	bne.n	800fefe <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800fef8:	4b0f      	ldr	r3, [pc, #60]	; (800ff38 <fm_lcd_k_factor+0xe0>)
 800fefa:	2200      	movs	r2, #0
 800fefc:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 800fefe:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <fm_lcd_k_factor+0xe0>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d10b      	bne.n	800ff1e <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800ff06:	79bb      	ldrb	r3, [r7, #6]
 800ff08:	f1c3 0307 	rsb	r3, r3, #7
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2100      	movs	r1, #0
 800ff10:	4618      	mov	r0, r3
 800ff12:	f000 fb2b 	bl	801056c <lcd_clear_digit>
        blink = 0;
 800ff16:	4b08      	ldr	r3, [pc, #32]	; (800ff38 <fm_lcd_k_factor+0xe0>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]
 800ff1c:	e002      	b.n	800ff24 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800ff1e:	4b06      	ldr	r3, [pc, #24]	; (800ff38 <fm_lcd_k_factor+0xe0>)
 800ff20:	2201      	movs	r2, #1
 800ff22:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800ff24:	2100      	movs	r1, #0
 800ff26:	200b      	movs	r0, #11
 800ff28:	f001 fc46 	bl	80117b8 <lcd_set_symbol>
}
 800ff2c:	bf00      	nop
 800ff2e:	3730      	adds	r7, #48	; 0x30
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	20001dbb 	.word	0x20001dbb
 800ff38:	2000011c 	.word	0x2000011c

0800ff3c <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b090      	sub	sp, #64	; 0x40
 800ff40:	af02      	add	r7, sp, #8
 800ff42:	4603      	mov	r3, r0
 800ff44:	71fb      	strb	r3, [r7, #7]
 800ff46:	460b      	mov	r3, r1
 800ff48:	71bb      	strb	r3, [r7, #6]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800ff4e:	f107 0320 	add.w	r3, r7, #32
 800ff52:	79fa      	ldrb	r2, [r7, #7]
 800ff54:	4611      	mov	r1, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe ff68 	bl	800ee2c <fm_factory_get_k_factor>
 800ff5c:	2314      	movs	r3, #20
 800ff5e:	9301      	str	r3, [sp, #4]
 800ff60:	f107 030c 	add.w	r3, r7, #12
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	2309      	movs	r3, #9
 800ff68:	2230      	movs	r2, #48	; 0x30
 800ff6a:	f107 0120 	add.w	r1, r7, #32
 800ff6e:	c903      	ldmia	r1, {r0, r1}
 800ff70:	f7ff feca 	bl	800fd08 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800ff74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff78:	79fa      	ldrb	r2, [r7, #7]
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fe ff55 	bl	800ee2c <fm_factory_get_k_factor>
 800ff82:	f107 020c 	add.w	r2, r7, #12
 800ff86:	2314      	movs	r3, #20
 800ff88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ff8c:	c903      	ldmia	r1, {r0, r1}
 800ff8e:	f7ff fe77 	bl	800fc80 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ff92:	f107 030c 	add.w	r3, r7, #12
 800ff96:	2100      	movs	r1, #0
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 f8a7 	bl	80100ec <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800ff9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ffa2:	79fa      	ldrb	r2, [r7, #7]
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe ff9c 	bl	800eee4 <fm_factory_get_frec_lin>
 800ffac:	2314      	movs	r3, #20
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	f107 030c 	add.w	r3, r7, #12
 800ffb4:	9300      	str	r3, [sp, #0]
 800ffb6:	2308      	movs	r3, #8
 800ffb8:	2230      	movs	r2, #48	; 0x30
 800ffba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ffbe:	c903      	ldmia	r1, {r0, r1}
 800ffc0:	f7ff fea2 	bl	800fd08 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ffc4:	f107 030c 	add.w	r3, r7, #12
 800ffc8:	2101      	movs	r1, #1
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f000 f88e 	bl	80100ec <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800ffd0:	2101      	movs	r1, #1
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	f000 faca 	bl	801056c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800ffd8:	2101      	movs	r1, #1
 800ffda:	2001      	movs	r0, #1
 800ffdc:	f000 fac6 	bl	801056c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	2002      	movs	r0, #2
 800ffe4:	f000 fac2 	bl	801056c <lcd_clear_digit>

    if(event_id == EVENT_KEY_ENTER ||
 800ffe8:	79bb      	ldrb	r3, [r7, #6]
 800ffea:	2b04      	cmp	r3, #4
 800ffec:	d006      	beq.n	800fffc <fm_lcd_k_lin+0xc0>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800ffee:	4b3d      	ldr	r3, [pc, #244]	; (80100e4 <fm_lcd_k_lin+0x1a8>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	d106      	bne.n	8010004 <fm_lcd_k_lin+0xc8>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fff6:	79bb      	ldrb	r3, [r7, #6]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d103      	bne.n	8010004 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 800fffc:	4b3a      	ldr	r3, [pc, #232]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 800fffe:	2201      	movs	r2, #1
 8010000:	601a      	str	r2, [r3, #0]
 8010002:	e016      	b.n	8010032 <fm_lcd_k_lin+0xf6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 8010004:	79bb      	ldrb	r3, [r7, #6]
 8010006:	2b03      	cmp	r3, #3
 8010008:	d010      	beq.n	801002c <fm_lcd_k_lin+0xf0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 801000a:	4b36      	ldr	r3, [pc, #216]	; (80100e4 <fm_lcd_k_lin+0x1a8>)
 801000c:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 801000e:	2b03      	cmp	r3, #3
 8010010:	d102      	bne.n	8010018 <fm_lcd_k_lin+0xdc>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 8010012:	79bb      	ldrb	r3, [r7, #6]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d009      	beq.n	801002c <fm_lcd_k_lin+0xf0>
 8010018:	79bb      	ldrb	r3, [r7, #6]
 801001a:	2b02      	cmp	r3, #2
 801001c:	d006      	beq.n	801002c <fm_lcd_k_lin+0xf0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 801001e:	4b31      	ldr	r3, [pc, #196]	; (80100e4 <fm_lcd_k_lin+0x1a8>)
 8010020:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 8010022:	2b02      	cmp	r3, #2
 8010024:	d105      	bne.n	8010032 <fm_lcd_k_lin+0xf6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 8010026:	79bb      	ldrb	r3, [r7, #6]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d102      	bne.n	8010032 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 801002c:	4b2e      	ldr	r3, [pc, #184]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 801002e:	2200      	movs	r2, #0
 8010030:	601a      	str	r2, [r3, #0]
    }

    if(digit_lin_modify <= DIG_LIN_7)
 8010032:	797b      	ldrb	r3, [r7, #5]
 8010034:	2b07      	cmp	r3, #7
 8010036:	d813      	bhi.n	8010060 <fm_lcd_k_lin+0x124>
    {
        if(blink == 1)
 8010038:	4b2b      	ldr	r3, [pc, #172]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d10b      	bne.n	8010058 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 8010040:	797b      	ldrb	r3, [r7, #5]
 8010042:	f1c3 0307 	rsb	r3, r3, #7
 8010046:	b2db      	uxtb	r3, r3
 8010048:	2100      	movs	r1, #0
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fa8e 	bl	801056c <lcd_clear_digit>
            blink = 0;
 8010050:	4b25      	ldr	r3, [pc, #148]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	e016      	b.n	8010086 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010058:	4b23      	ldr	r3, [pc, #140]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 801005a:	2201      	movs	r2, #1
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	e012      	b.n	8010086 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if(blink == 1)
 8010060:	4b21      	ldr	r3, [pc, #132]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d10b      	bne.n	8010080 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010068:	797b      	ldrb	r3, [r7, #5]
 801006a:	f1c3 030e 	rsb	r3, r3, #14
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2101      	movs	r1, #1
 8010072:	4618      	mov	r0, r3
 8010074:	f000 fa7a 	bl	801056c <lcd_clear_digit>
            blink = 0;
 8010078:	4b1b      	ldr	r3, [pc, #108]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 801007a:	2200      	movs	r2, #0
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	e002      	b.n	8010086 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010080:	4b19      	ldr	r3, [pc, #100]	; (80100e8 <fm_lcd_k_lin+0x1ac>)
 8010082:	2201      	movs	r2, #1
 8010084:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 8010086:	2100      	movs	r1, #0
 8010088:	2010      	movs	r0, #16
 801008a:	f001 fb95 	bl	80117b8 <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 801008e:	79fb      	ldrb	r3, [r7, #7]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d103      	bne.n	801009c <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 8010094:	2100      	movs	r1, #0
 8010096:	2011      	movs	r0, #17
 8010098:	f001 fb8e 	bl	80117b8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 801009c:	79fb      	ldrb	r3, [r7, #7]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d103      	bne.n	80100aa <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 80100a2:	2100      	movs	r1, #0
 80100a4:	2012      	movs	r0, #18
 80100a6:	f001 fb87 	bl	80117b8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d103      	bne.n	80100b8 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 80100b0:	2100      	movs	r1, #0
 80100b2:	2013      	movs	r0, #19
 80100b4:	f001 fb80 	bl	80117b8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 80100b8:	79fb      	ldrb	r3, [r7, #7]
 80100ba:	2b04      	cmp	r3, #4
 80100bc:	d103      	bne.n	80100c6 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 80100be:	2100      	movs	r1, #0
 80100c0:	2014      	movs	r0, #20
 80100c2:	f001 fb79 	bl	80117b8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 80100c6:	79fb      	ldrb	r3, [r7, #7]
 80100c8:	2b05      	cmp	r3, #5
 80100ca:	d103      	bne.n	80100d4 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 80100cc:	2100      	movs	r1, #0
 80100ce:	2015      	movs	r0, #21
 80100d0:	f001 fb72 	bl	80117b8 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ,0x00);
 80100d4:	2100      	movs	r1, #0
 80100d6:	2016      	movs	r0, #22
 80100d8:	f001 fb6e 	bl	80117b8 <lcd_set_symbol>
}
 80100dc:	bf00      	nop
 80100de:	3738      	adds	r7, #56	; 0x38
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	20001dbb 	.word	0x20001dbb
 80100e8:	2000011c 	.word	0x2000011c

080100ec <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	460b      	mov	r3, r1
 80100f6:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 80100fc:	78fb      	ldrb	r3, [r7, #3]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d102      	bne.n	8010108 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 8010102:	2308      	movs	r3, #8
 8010104:	73bb      	strb	r3, [r7, #14]
 8010106:	e026      	b.n	8010156 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 8010108:	2307      	movs	r3, #7
 801010a:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 801010c:	e023      	b.n	8010156 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	2b2f      	cmp	r3, #47	; 0x2f
 8010114:	d903      	bls.n	801011e <fm_lcd_puts+0x32>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	2b39      	cmp	r3, #57	; 0x39
 801011c:	d907      	bls.n	801012e <fm_lcd_puts+0x42>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	2b20      	cmp	r3, #32
 8010124:	d003      	beq.n	801012e <fm_lcd_puts+0x42>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b2e      	cmp	r3, #46	; 0x2e
 801012c:	d106      	bne.n	801013c <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	78fa      	ldrb	r2, [r7, #3]
 8010134:	7bf9      	ldrb	r1, [r7, #15]
 8010136:	4618      	mov	r0, r3
 8010138:	f001 f88e 	bl	8011258 <lcd_put_char>
        }
        col++;
 801013c:	7bfb      	ldrb	r3, [r7, #15]
 801013e:	3301      	adds	r3, #1
 8010140:	73fb      	strb	r3, [r7, #15]
        c++;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	3301      	adds	r3, #1
 8010146:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	2b2e      	cmp	r3, #46	; 0x2e
 801014e:	d102      	bne.n	8010156 <fm_lcd_puts+0x6a>
        {
            col--;
 8010150:	7bfb      	ldrb	r3, [r7, #15]
 8010152:	3b01      	subs	r3, #1
 8010154:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d003      	beq.n	8010166 <fm_lcd_puts+0x7a>
 801015e:	7bfa      	ldrb	r2, [r7, #15]
 8010160:	7bbb      	ldrb	r3, [r7, #14]
 8010162:	429a      	cmp	r2, r3
 8010164:	d3d3      	bcc.n	801010e <fm_lcd_puts+0x22>
        }
    }
}
 8010166:	bf00      	nop
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 801016e:	b580      	push	{r7, lr}
 8010170:	af00      	add	r7, sp, #0
    lcd_refresh();
 8010172:	f001 fa6f 	bl	8011654 <lcd_refresh>
}
 8010176:	bf00      	nop
 8010178:	bd80      	pop	{r7, pc}

0801017a <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b0b8      	sub	sp, #224	; 0xe0
 801017e:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 8010180:	f107 0318 	add.w	r3, r7, #24
 8010184:	4618      	mov	r0, r3
 8010186:	f004 fd5b 	bl	8014c40 <fmc_get_ttl>
 801018a:	2314      	movs	r3, #20
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	1d3b      	adds	r3, r7, #4
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	2309      	movs	r3, #9
 8010194:	2220      	movs	r2, #32
 8010196:	f107 0120 	add.w	r1, r7, #32
 801019a:	c903      	ldmia	r1, {r0, r1}
 801019c:	f7ff fdb4 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 80101a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101a4:	4618      	mov	r0, r3
 80101a6:	f004 fd4b 	bl	8014c40 <fmc_get_ttl>
 80101aa:	1d3a      	adds	r2, r7, #4
 80101ac:	2314      	movs	r3, #20
 80101ae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80101b2:	c903      	ldmia	r1, {r0, r1}
 80101b4:	f7ff fd64 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80101b8:	1d3b      	adds	r3, r7, #4
 80101ba:	2100      	movs	r1, #0
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff ff95 	bl	80100ec <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 80101c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80101c6:	4618      	mov	r0, r3
 80101c8:	f004 fcfa 	bl	8014bc0 <fmc_get_rate>
 80101cc:	2314      	movs	r3, #20
 80101ce:	9301      	str	r3, [sp, #4]
 80101d0:	1d3b      	adds	r3, r7, #4
 80101d2:	9300      	str	r3, [sp, #0]
 80101d4:	2308      	movs	r3, #8
 80101d6:	2220      	movs	r2, #32
 80101d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80101dc:	c903      	ldmia	r1, {r0, r1}
 80101de:	f7ff fd93 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 80101e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80101e6:	4618      	mov	r0, r3
 80101e8:	f004 fcea 	bl	8014bc0 <fmc_get_rate>
 80101ec:	1d3a      	adds	r2, r7, #4
 80101ee:	2314      	movs	r3, #20
 80101f0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80101f4:	c903      	ldmia	r1, {r0, r1}
 80101f6:	f7ff fd43 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80101fa:	1d3b      	adds	r3, r7, #4
 80101fc:	2101      	movs	r1, #1
 80101fe:	4618      	mov	r0, r3
 8010200:	f7ff ff74 	bl	80100ec <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 8010204:	2100      	movs	r1, #0
 8010206:	2005      	movs	r0, #5
 8010208:	f001 fad6 	bl	80117b8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 801020c:	2100      	movs	r1, #0
 801020e:	2002      	movs	r0, #2
 8010210:	f001 fad2 	bl	80117b8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 8010214:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010218:	4618      	mov	r0, r3
 801021a:	f004 fd11 	bl	8014c40 <fmc_get_ttl>
 801021e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f001 fe87 	bl	8011f38 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 801022a:	2100      	movs	r1, #0
 801022c:	2007      	movs	r0, #7
 801022e:	f001 fac3 	bl	80117b8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 8010232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010236:	4618      	mov	r0, r3
 8010238:	f004 fd02 	bl	8014c40 <fmc_get_ttl>
 801023c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8010240:	2100      	movs	r1, #0
 8010242:	4618      	mov	r0, r3
 8010244:	f001 fe36 	bl	8011eb4 <lcd_set_time_unit>
}
 8010248:	bf00      	nop
 801024a:	37d8      	adds	r7, #216	; 0xd8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b0a6      	sub	sp, #152	; 0x98
 8010254:	af02      	add	r7, sp, #8
 8010256:	4603      	mov	r3, r0
 8010258:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 801025a:	f107 0320 	add.w	r3, r7, #32
 801025e:	4618      	mov	r0, r3
 8010260:	f7fe fdc0 	bl	800ede4 <fm_factory_get_units_tim>
 8010264:	2314      	movs	r3, #20
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	f107 030c 	add.w	r3, r7, #12
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	2308      	movs	r3, #8
 8010270:	2230      	movs	r2, #48	; 0x30
 8010272:	f107 0120 	add.w	r1, r7, #32
 8010276:	c903      	ldmia	r1, {r0, r1}
 8010278:	f7ff fd46 	bl	800fd08 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 801027c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe fdaf 	bl	800ede4 <fm_factory_get_units_tim>
 8010286:	f107 020c 	add.w	r2, r7, #12
 801028a:	2314      	movs	r3, #20
 801028c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010290:	c903      	ldmia	r1, {r0, r1}
 8010292:	f7ff fcf5 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010296:	f107 030c 	add.w	r3, r7, #12
 801029a:	2101      	movs	r1, #1
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff ff25 	bl	80100ec <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 80102a2:	79fb      	ldrb	r3, [r7, #7]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d106      	bne.n	80102b6 <fm_lcd_units_tim+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80102a8:	4b35      	ldr	r3, [pc, #212]	; (8010380 <fm_lcd_units_tim+0x130>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d005      	beq.n	80102bc <fm_lcd_units_tim+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d102      	bne.n	80102bc <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 80102b6:	4b33      	ldr	r3, [pc, #204]	; (8010384 <fm_lcd_units_tim+0x134>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 80102bc:	4b31      	ldr	r3, [pc, #196]	; (8010384 <fm_lcd_units_tim+0x134>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d146      	bne.n	8010352 <fm_lcd_units_tim+0x102>
    {
        if(fm_factory_get_units_tim().res == 1)
 80102c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe fd8b 	bl	800ede4 <fm_factory_get_units_tim>
 80102ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d109      	bne.n	80102ea <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 80102d6:	2305      	movs	r3, #5
 80102d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80102dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80102e0:	4619      	mov	r1, r3
 80102e2:	2001      	movs	r0, #1
 80102e4:	f000 fc80 	bl	8010be8 <lcd_clear_point>
 80102e8:	e024      	b.n	8010334 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 2)
 80102ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe fd78 	bl	800ede4 <fm_factory_get_units_tim>
 80102f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80102f8:	2b02      	cmp	r3, #2
 80102fa:	d109      	bne.n	8010310 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 80102fc:	2304      	movs	r3, #4
 80102fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010302:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010306:	4619      	mov	r1, r3
 8010308:	2001      	movs	r0, #1
 801030a:	f000 fc6d 	bl	8010be8 <lcd_clear_point>
 801030e:	e011      	b.n	8010334 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 3)
 8010310:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fd65 	bl	800ede4 <fm_factory_get_units_tim>
 801031a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801031e:	2b03      	cmp	r3, #3
 8010320:	d108      	bne.n	8010334 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 8010322:	2303      	movs	r3, #3
 8010324:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010328:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801032c:	4619      	mov	r1, r3
 801032e:	2001      	movs	r0, #1
 8010330:	f000 fc5a 	bl	8010be8 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 8010334:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010338:	4618      	mov	r0, r3
 801033a:	f004 fc41 	bl	8014bc0 <fmc_get_rate>
 801033e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8010342:	2100      	movs	r1, #0
 8010344:	4618      	mov	r0, r3
 8010346:	f000 fcfb 	bl	8010d40 <lcd_clear_time_unit>

        blink = 0;
 801034a:	4b0e      	ldr	r3, [pc, #56]	; (8010384 <fm_lcd_units_tim+0x134>)
 801034c:	2200      	movs	r2, #0
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	e00d      	b.n	801036e <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 8010352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010356:	4618      	mov	r0, r3
 8010358:	f004 fc32 	bl	8014bc0 <fmc_get_rate>
 801035c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010360:	2100      	movs	r1, #0
 8010362:	4618      	mov	r0, r3
 8010364:	f001 fda6 	bl	8011eb4 <lcd_set_time_unit>
        blink = 1;
 8010368:	4b06      	ldr	r3, [pc, #24]	; (8010384 <fm_lcd_units_tim+0x134>)
 801036a:	2201      	movs	r2, #1
 801036c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 801036e:	2100      	movs	r1, #0
 8010370:	2002      	movs	r0, #2
 8010372:	f001 fa21 	bl	80117b8 <lcd_set_symbol>
}
 8010376:	bf00      	nop
 8010378:	3790      	adds	r7, #144	; 0x90
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	20001dbb 	.word	0x20001dbb
 8010384:	2000011c 	.word	0x2000011c

08010388 <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b0a6      	sub	sp, #152	; 0x98
 801038c:	af02      	add	r7, sp, #8
 801038e:	4603      	mov	r3, r0
 8010390:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 8010392:	f107 0320 	add.w	r3, r7, #32
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe fd36 	bl	800ee08 <fm_factory_get_units_vol>
 801039c:	2314      	movs	r3, #20
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	f107 030c 	add.w	r3, r7, #12
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	2309      	movs	r3, #9
 80103a8:	2230      	movs	r2, #48	; 0x30
 80103aa:	f107 0120 	add.w	r1, r7, #32
 80103ae:	c903      	ldmia	r1, {r0, r1}
 80103b0:	f7ff fcaa 	bl	800fd08 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 80103b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fe fd25 	bl	800ee08 <fm_factory_get_units_vol>
 80103be:	f107 020c 	add.w	r2, r7, #12
 80103c2:	2314      	movs	r3, #20
 80103c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80103c8:	c903      	ldmia	r1, {r0, r1}
 80103ca:	f7ff fc59 	bl	800fc80 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80103ce:	f107 030c 	add.w	r3, r7, #12
 80103d2:	2100      	movs	r1, #0
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff fe89 	bl	80100ec <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d106      	bne.n	80103ee <fm_lcd_units_vol+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80103e0:	4b37      	ldr	r3, [pc, #220]	; (80104c0 <fm_lcd_units_vol+0x138>)
 80103e2:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d005      	beq.n	80103f4 <fm_lcd_units_vol+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80103e8:	79fb      	ldrb	r3, [r7, #7]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d102      	bne.n	80103f4 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 80103ee:	4b35      	ldr	r3, [pc, #212]	; (80104c4 <fm_lcd_units_vol+0x13c>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 80103f4:	4b33      	ldr	r3, [pc, #204]	; (80104c4 <fm_lcd_units_vol+0x13c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d146      	bne.n	801048a <fm_lcd_units_vol+0x102>
    {
        if(fm_factory_get_units_vol().res == 1)
 80103fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe fd01 	bl	800ee08 <fm_factory_get_units_vol>
 8010406:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801040a:	2b01      	cmp	r3, #1
 801040c:	d109      	bne.n	8010422 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 801040e:	2306      	movs	r3, #6
 8010410:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010414:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010418:	4619      	mov	r1, r3
 801041a:	2000      	movs	r0, #0
 801041c:	f000 fbe4 	bl	8010be8 <lcd_clear_point>
 8010420:	e024      	b.n	801046c <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 2)
 8010422:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fcee 	bl	800ee08 <fm_factory_get_units_vol>
 801042c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010430:	2b02      	cmp	r3, #2
 8010432:	d109      	bne.n	8010448 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 8010434:	2305      	movs	r3, #5
 8010436:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 801043a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801043e:	4619      	mov	r1, r3
 8010440:	2000      	movs	r0, #0
 8010442:	f000 fbd1 	bl	8010be8 <lcd_clear_point>
 8010446:	e011      	b.n	801046c <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 3)
 8010448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801044c:	4618      	mov	r0, r3
 801044e:	f7fe fcdb 	bl	800ee08 <fm_factory_get_units_vol>
 8010452:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010456:	2b03      	cmp	r3, #3
 8010458:	d108      	bne.n	801046c <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 801045a:	2304      	movs	r3, #4
 801045c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010460:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010464:	4619      	mov	r1, r3
 8010466:	2000      	movs	r0, #0
 8010468:	f000 fbbe 	bl	8010be8 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801046c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010470:	4618      	mov	r0, r3
 8010472:	f004 fb3f 	bl	8014af4 <fmc_get_acm>
 8010476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801047a:	2100      	movs	r1, #0
 801047c:	4618      	mov	r0, r3
 801047e:	f000 fca1 	bl	8010dc4 <lcd_clear_vol_unit>

        blink = 0;
 8010482:	4b10      	ldr	r3, [pc, #64]	; (80104c4 <fm_lcd_units_vol+0x13c>)
 8010484:	2200      	movs	r2, #0
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	e00d      	b.n	80104a6 <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801048a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801048e:	4618      	mov	r0, r3
 8010490:	f004 fb30 	bl	8014af4 <fmc_get_acm>
 8010494:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010498:	2100      	movs	r1, #0
 801049a:	4618      	mov	r0, r3
 801049c:	f001 fd4c 	bl	8011f38 <lcd_set_vol_unit>
        blink = 1;
 80104a0:	4b08      	ldr	r3, [pc, #32]	; (80104c4 <fm_lcd_units_vol+0x13c>)
 80104a2:	2201      	movs	r2, #1
 80104a4:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 80104a6:	2100      	movs	r1, #0
 80104a8:	2006      	movs	r0, #6
 80104aa:	f001 f985 	bl	80117b8 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 80104ae:	2100      	movs	r1, #0
 80104b0:	2005      	movs	r0, #5
 80104b2:	f001 f981 	bl	80117b8 <lcd_set_symbol>
}
 80104b6:	bf00      	nop
 80104b8:	3790      	adds	r7, #144	; 0x90
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20001dbb 	.word	0x20001dbb
 80104c4:	2000011c 	.word	0x2000011c

080104c8 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	460a      	mov	r2, r1
 80104d2:	71fb      	strb	r3, [r7, #7]
 80104d4:	4613      	mov	r3, r2
 80104d6:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 80104d8:	f004 faf2 	bl	8014ac0 <fm_version_get>
 80104dc:	4601      	mov	r1, r0
 80104de:	f107 020c 	add.w	r2, r7, #12
 80104e2:	230c      	movs	r3, #12
 80104e4:	2001      	movs	r0, #1
 80104e6:	f7ff fba7 	bl	800fc38 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80104ea:	f107 030c 	add.w	r3, r7, #12
 80104ee:	2101      	movs	r1, #1
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff fdfb 	bl	80100ec <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	4619      	mov	r1, r3
 80104fa:	2001      	movs	r0, #1
 80104fc:	f001 f8b0 	bl	8011660 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 8010500:	79bb      	ldrb	r3, [r7, #6]
 8010502:	4619      	mov	r1, r3
 8010504:	2001      	movs	r0, #1
 8010506:	f001 f8ab 	bl	8011660 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 801050a:	2100      	movs	r1, #0
 801050c:	2009      	movs	r0, #9
 801050e:	f001 f953 	bl	80117b8 <lcd_set_symbol>
}
 8010512:	bf00      	nop
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 8010522:	f002 f873 	bl	801260c <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 8010526:	2300      	movs	r3, #0
 8010528:	607b      	str	r3, [r7, #4]
 801052a:	e013      	b.n	8010554 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 801052c:	2300      	movs	r3, #0
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	e00a      	b.n	8010548 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 8010532:	4a0d      	ldr	r2, [pc, #52]	; (8010568 <lcd_clear_all+0x4c>)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	441a      	add	r2, r3
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	4413      	add	r3, r2
 801053e:	2200      	movs	r2, #0
 8010540:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	3301      	adds	r3, #1
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	2b07      	cmp	r3, #7
 801054c:	ddf1      	ble.n	8010532 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	3301      	adds	r3, #1
 8010552:	607b      	str	r3, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b01      	cmp	r3, #1
 8010558:	dde8      	ble.n	801052c <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 801055a:	2000      	movs	r0, #0
 801055c:	f002 f8e6 	bl	801272c <pcf8553_write_all>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20001cfc 	.word	0x20001cfc

0801056c <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	4603      	mov	r3, r0
 8010574:	460a      	mov	r2, r1
 8010576:	71fb      	strb	r3, [r7, #7]
 8010578:	4613      	mov	r3, r2
 801057a:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 801057c:	79bb      	ldrb	r3, [r7, #6]
 801057e:	2b00      	cmp	r3, #0
 8010580:	f040 81aa 	bne.w	80108d8 <lcd_clear_digit+0x36c>
    {
        switch(digit)
 8010584:	79fb      	ldrb	r3, [r7, #7]
 8010586:	2b07      	cmp	r3, #7
 8010588:	f200 8320 	bhi.w	8010bcc <lcd_clear_digit+0x660>
 801058c:	a201      	add	r2, pc, #4	; (adr r2, 8010594 <lcd_clear_digit+0x28>)
 801058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010592:	bf00      	nop
 8010594:	080105b5 	.word	0x080105b5
 8010598:	08010619 	.word	0x08010619
 801059c:	0801067d 	.word	0x0801067d
 80105a0:	080106e1 	.word	0x080106e1
 80105a4:	08010745 	.word	0x08010745
 80105a8:	080107a9 	.word	0x080107a9
 80105ac:	08010811 	.word	0x08010811
 80105b0:	08010875 	.word	0x08010875
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 80105b4:	4b95      	ldr	r3, [pc, #596]	; (801080c <lcd_clear_digit+0x2a0>)
 80105b6:	7b1b      	ldrb	r3, [r3, #12]
 80105b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	4b93      	ldr	r3, [pc, #588]	; (801080c <lcd_clear_digit+0x2a0>)
 80105c0:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 80105c2:	4b92      	ldr	r3, [pc, #584]	; (801080c <lcd_clear_digit+0x2a0>)
 80105c4:	7b1b      	ldrb	r3, [r3, #12]
 80105c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	4b8f      	ldr	r3, [pc, #572]	; (801080c <lcd_clear_digit+0x2a0>)
 80105ce:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 80105d0:	4b8e      	ldr	r3, [pc, #568]	; (801080c <lcd_clear_digit+0x2a0>)
 80105d2:	7c5b      	ldrb	r3, [r3, #17]
 80105d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	4b8c      	ldr	r3, [pc, #560]	; (801080c <lcd_clear_digit+0x2a0>)
 80105dc:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 80105de:	4b8b      	ldr	r3, [pc, #556]	; (801080c <lcd_clear_digit+0x2a0>)
 80105e0:	7c5b      	ldrb	r3, [r3, #17]
 80105e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	4b88      	ldr	r3, [pc, #544]	; (801080c <lcd_clear_digit+0x2a0>)
 80105ea:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 80105ec:	4b87      	ldr	r3, [pc, #540]	; (801080c <lcd_clear_digit+0x2a0>)
 80105ee:	789b      	ldrb	r3, [r3, #2]
 80105f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	4b85      	ldr	r3, [pc, #532]	; (801080c <lcd_clear_digit+0x2a0>)
 80105f8:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 80105fa:	4b84      	ldr	r3, [pc, #528]	; (801080c <lcd_clear_digit+0x2a0>)
 80105fc:	789b      	ldrb	r3, [r3, #2]
 80105fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010602:	b2da      	uxtb	r2, r3
 8010604:	4b81      	ldr	r3, [pc, #516]	; (801080c <lcd_clear_digit+0x2a0>)
 8010606:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 8010608:	4b80      	ldr	r3, [pc, #512]	; (801080c <lcd_clear_digit+0x2a0>)
 801060a:	79db      	ldrb	r3, [r3, #7]
 801060c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010610:	b2da      	uxtb	r2, r3
 8010612:	4b7e      	ldr	r3, [pc, #504]	; (801080c <lcd_clear_digit+0x2a0>)
 8010614:	71da      	strb	r2, [r3, #7]
            break;
 8010616:	e2de      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 8010618:	4b7c      	ldr	r3, [pc, #496]	; (801080c <lcd_clear_digit+0x2a0>)
 801061a:	7b5b      	ldrb	r3, [r3, #13]
 801061c:	f023 0302 	bic.w	r3, r3, #2
 8010620:	b2da      	uxtb	r2, r3
 8010622:	4b7a      	ldr	r3, [pc, #488]	; (801080c <lcd_clear_digit+0x2a0>)
 8010624:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 8010626:	4b79      	ldr	r3, [pc, #484]	; (801080c <lcd_clear_digit+0x2a0>)
 8010628:	7b5b      	ldrb	r3, [r3, #13]
 801062a:	f023 0301 	bic.w	r3, r3, #1
 801062e:	b2da      	uxtb	r2, r3
 8010630:	4b76      	ldr	r3, [pc, #472]	; (801080c <lcd_clear_digit+0x2a0>)
 8010632:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 8010634:	4b75      	ldr	r3, [pc, #468]	; (801080c <lcd_clear_digit+0x2a0>)
 8010636:	7c9b      	ldrb	r3, [r3, #18]
 8010638:	f023 0302 	bic.w	r3, r3, #2
 801063c:	b2da      	uxtb	r2, r3
 801063e:	4b73      	ldr	r3, [pc, #460]	; (801080c <lcd_clear_digit+0x2a0>)
 8010640:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 8010642:	4b72      	ldr	r3, [pc, #456]	; (801080c <lcd_clear_digit+0x2a0>)
 8010644:	7c9b      	ldrb	r3, [r3, #18]
 8010646:	f023 0301 	bic.w	r3, r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	4b6f      	ldr	r3, [pc, #444]	; (801080c <lcd_clear_digit+0x2a0>)
 801064e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 8010650:	4b6e      	ldr	r3, [pc, #440]	; (801080c <lcd_clear_digit+0x2a0>)
 8010652:	78db      	ldrb	r3, [r3, #3]
 8010654:	f023 0301 	bic.w	r3, r3, #1
 8010658:	b2da      	uxtb	r2, r3
 801065a:	4b6c      	ldr	r3, [pc, #432]	; (801080c <lcd_clear_digit+0x2a0>)
 801065c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 801065e:	4b6b      	ldr	r3, [pc, #428]	; (801080c <lcd_clear_digit+0x2a0>)
 8010660:	78db      	ldrb	r3, [r3, #3]
 8010662:	f023 0302 	bic.w	r3, r3, #2
 8010666:	b2da      	uxtb	r2, r3
 8010668:	4b68      	ldr	r3, [pc, #416]	; (801080c <lcd_clear_digit+0x2a0>)
 801066a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 801066c:	4b67      	ldr	r3, [pc, #412]	; (801080c <lcd_clear_digit+0x2a0>)
 801066e:	7a1b      	ldrb	r3, [r3, #8]
 8010670:	f023 0301 	bic.w	r3, r3, #1
 8010674:	b2da      	uxtb	r2, r3
 8010676:	4b65      	ldr	r3, [pc, #404]	; (801080c <lcd_clear_digit+0x2a0>)
 8010678:	721a      	strb	r2, [r3, #8]
            break;
 801067a:	e2ac      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 801067c:	4b63      	ldr	r3, [pc, #396]	; (801080c <lcd_clear_digit+0x2a0>)
 801067e:	7b5b      	ldrb	r3, [r3, #13]
 8010680:	f023 0308 	bic.w	r3, r3, #8
 8010684:	b2da      	uxtb	r2, r3
 8010686:	4b61      	ldr	r3, [pc, #388]	; (801080c <lcd_clear_digit+0x2a0>)
 8010688:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 801068a:	4b60      	ldr	r3, [pc, #384]	; (801080c <lcd_clear_digit+0x2a0>)
 801068c:	7b5b      	ldrb	r3, [r3, #13]
 801068e:	f023 0304 	bic.w	r3, r3, #4
 8010692:	b2da      	uxtb	r2, r3
 8010694:	4b5d      	ldr	r3, [pc, #372]	; (801080c <lcd_clear_digit+0x2a0>)
 8010696:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 8010698:	4b5c      	ldr	r3, [pc, #368]	; (801080c <lcd_clear_digit+0x2a0>)
 801069a:	7c9b      	ldrb	r3, [r3, #18]
 801069c:	f023 0308 	bic.w	r3, r3, #8
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	4b5a      	ldr	r3, [pc, #360]	; (801080c <lcd_clear_digit+0x2a0>)
 80106a4:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 80106a6:	4b59      	ldr	r3, [pc, #356]	; (801080c <lcd_clear_digit+0x2a0>)
 80106a8:	7c9b      	ldrb	r3, [r3, #18]
 80106aa:	f023 0304 	bic.w	r3, r3, #4
 80106ae:	b2da      	uxtb	r2, r3
 80106b0:	4b56      	ldr	r3, [pc, #344]	; (801080c <lcd_clear_digit+0x2a0>)
 80106b2:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 80106b4:	4b55      	ldr	r3, [pc, #340]	; (801080c <lcd_clear_digit+0x2a0>)
 80106b6:	78db      	ldrb	r3, [r3, #3]
 80106b8:	f023 0304 	bic.w	r3, r3, #4
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	4b53      	ldr	r3, [pc, #332]	; (801080c <lcd_clear_digit+0x2a0>)
 80106c0:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 80106c2:	4b52      	ldr	r3, [pc, #328]	; (801080c <lcd_clear_digit+0x2a0>)
 80106c4:	78db      	ldrb	r3, [r3, #3]
 80106c6:	f023 0308 	bic.w	r3, r3, #8
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	4b4f      	ldr	r3, [pc, #316]	; (801080c <lcd_clear_digit+0x2a0>)
 80106ce:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 80106d0:	4b4e      	ldr	r3, [pc, #312]	; (801080c <lcd_clear_digit+0x2a0>)
 80106d2:	7a1b      	ldrb	r3, [r3, #8]
 80106d4:	f023 0304 	bic.w	r3, r3, #4
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	4b4c      	ldr	r3, [pc, #304]	; (801080c <lcd_clear_digit+0x2a0>)
 80106dc:	721a      	strb	r2, [r3, #8]
            break;
 80106de:	e27a      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 80106e0:	4b4a      	ldr	r3, [pc, #296]	; (801080c <lcd_clear_digit+0x2a0>)
 80106e2:	7b5b      	ldrb	r3, [r3, #13]
 80106e4:	f023 0320 	bic.w	r3, r3, #32
 80106e8:	b2da      	uxtb	r2, r3
 80106ea:	4b48      	ldr	r3, [pc, #288]	; (801080c <lcd_clear_digit+0x2a0>)
 80106ec:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 80106ee:	4b47      	ldr	r3, [pc, #284]	; (801080c <lcd_clear_digit+0x2a0>)
 80106f0:	7b5b      	ldrb	r3, [r3, #13]
 80106f2:	f023 0310 	bic.w	r3, r3, #16
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	4b44      	ldr	r3, [pc, #272]	; (801080c <lcd_clear_digit+0x2a0>)
 80106fa:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 80106fc:	4b43      	ldr	r3, [pc, #268]	; (801080c <lcd_clear_digit+0x2a0>)
 80106fe:	7c9b      	ldrb	r3, [r3, #18]
 8010700:	f023 0320 	bic.w	r3, r3, #32
 8010704:	b2da      	uxtb	r2, r3
 8010706:	4b41      	ldr	r3, [pc, #260]	; (801080c <lcd_clear_digit+0x2a0>)
 8010708:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 801070a:	4b40      	ldr	r3, [pc, #256]	; (801080c <lcd_clear_digit+0x2a0>)
 801070c:	7c9b      	ldrb	r3, [r3, #18]
 801070e:	f023 0310 	bic.w	r3, r3, #16
 8010712:	b2da      	uxtb	r2, r3
 8010714:	4b3d      	ldr	r3, [pc, #244]	; (801080c <lcd_clear_digit+0x2a0>)
 8010716:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 8010718:	4b3c      	ldr	r3, [pc, #240]	; (801080c <lcd_clear_digit+0x2a0>)
 801071a:	78db      	ldrb	r3, [r3, #3]
 801071c:	f023 0310 	bic.w	r3, r3, #16
 8010720:	b2da      	uxtb	r2, r3
 8010722:	4b3a      	ldr	r3, [pc, #232]	; (801080c <lcd_clear_digit+0x2a0>)
 8010724:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 8010726:	4b39      	ldr	r3, [pc, #228]	; (801080c <lcd_clear_digit+0x2a0>)
 8010728:	78db      	ldrb	r3, [r3, #3]
 801072a:	f023 0320 	bic.w	r3, r3, #32
 801072e:	b2da      	uxtb	r2, r3
 8010730:	4b36      	ldr	r3, [pc, #216]	; (801080c <lcd_clear_digit+0x2a0>)
 8010732:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 8010734:	4b35      	ldr	r3, [pc, #212]	; (801080c <lcd_clear_digit+0x2a0>)
 8010736:	7a1b      	ldrb	r3, [r3, #8]
 8010738:	f023 0310 	bic.w	r3, r3, #16
 801073c:	b2da      	uxtb	r2, r3
 801073e:	4b33      	ldr	r3, [pc, #204]	; (801080c <lcd_clear_digit+0x2a0>)
 8010740:	721a      	strb	r2, [r3, #8]
            break;
 8010742:	e248      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 8010744:	4b31      	ldr	r3, [pc, #196]	; (801080c <lcd_clear_digit+0x2a0>)
 8010746:	7b5b      	ldrb	r3, [r3, #13]
 8010748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801074c:	b2da      	uxtb	r2, r3
 801074e:	4b2f      	ldr	r3, [pc, #188]	; (801080c <lcd_clear_digit+0x2a0>)
 8010750:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 8010752:	4b2e      	ldr	r3, [pc, #184]	; (801080c <lcd_clear_digit+0x2a0>)
 8010754:	7b5b      	ldrb	r3, [r3, #13]
 8010756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801075a:	b2da      	uxtb	r2, r3
 801075c:	4b2b      	ldr	r3, [pc, #172]	; (801080c <lcd_clear_digit+0x2a0>)
 801075e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010760:	4b2a      	ldr	r3, [pc, #168]	; (801080c <lcd_clear_digit+0x2a0>)
 8010762:	7c9b      	ldrb	r3, [r3, #18]
 8010764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010768:	b2da      	uxtb	r2, r3
 801076a:	4b28      	ldr	r3, [pc, #160]	; (801080c <lcd_clear_digit+0x2a0>)
 801076c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 801076e:	4b27      	ldr	r3, [pc, #156]	; (801080c <lcd_clear_digit+0x2a0>)
 8010770:	7c9b      	ldrb	r3, [r3, #18]
 8010772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010776:	b2da      	uxtb	r2, r3
 8010778:	4b24      	ldr	r3, [pc, #144]	; (801080c <lcd_clear_digit+0x2a0>)
 801077a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 801077c:	4b23      	ldr	r3, [pc, #140]	; (801080c <lcd_clear_digit+0x2a0>)
 801077e:	78db      	ldrb	r3, [r3, #3]
 8010780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010784:	b2da      	uxtb	r2, r3
 8010786:	4b21      	ldr	r3, [pc, #132]	; (801080c <lcd_clear_digit+0x2a0>)
 8010788:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 801078a:	4b20      	ldr	r3, [pc, #128]	; (801080c <lcd_clear_digit+0x2a0>)
 801078c:	78db      	ldrb	r3, [r3, #3]
 801078e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010792:	b2da      	uxtb	r2, r3
 8010794:	4b1d      	ldr	r3, [pc, #116]	; (801080c <lcd_clear_digit+0x2a0>)
 8010796:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010798:	4b1c      	ldr	r3, [pc, #112]	; (801080c <lcd_clear_digit+0x2a0>)
 801079a:	7a1b      	ldrb	r3, [r3, #8]
 801079c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	4b1a      	ldr	r3, [pc, #104]	; (801080c <lcd_clear_digit+0x2a0>)
 80107a4:	721a      	strb	r2, [r3, #8]
            break;
 80107a6:	e216      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 80107a8:	4b18      	ldr	r3, [pc, #96]	; (801080c <lcd_clear_digit+0x2a0>)
 80107aa:	7b9b      	ldrb	r3, [r3, #14]
 80107ac:	f023 0302 	bic.w	r3, r3, #2
 80107b0:	b2da      	uxtb	r2, r3
 80107b2:	4b16      	ldr	r3, [pc, #88]	; (801080c <lcd_clear_digit+0x2a0>)
 80107b4:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 80107b6:	4b15      	ldr	r3, [pc, #84]	; (801080c <lcd_clear_digit+0x2a0>)
 80107b8:	7b9b      	ldrb	r3, [r3, #14]
 80107ba:	f023 0301 	bic.w	r3, r3, #1
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	4b12      	ldr	r3, [pc, #72]	; (801080c <lcd_clear_digit+0x2a0>)
 80107c2:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 80107c4:	4b11      	ldr	r3, [pc, #68]	; (801080c <lcd_clear_digit+0x2a0>)
 80107c6:	7cdb      	ldrb	r3, [r3, #19]
 80107c8:	f023 0302 	bic.w	r3, r3, #2
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	4b0f      	ldr	r3, [pc, #60]	; (801080c <lcd_clear_digit+0x2a0>)
 80107d0:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 80107d2:	4b0e      	ldr	r3, [pc, #56]	; (801080c <lcd_clear_digit+0x2a0>)
 80107d4:	7cdb      	ldrb	r3, [r3, #19]
 80107d6:	f023 0301 	bic.w	r3, r3, #1
 80107da:	b2da      	uxtb	r2, r3
 80107dc:	4b0b      	ldr	r3, [pc, #44]	; (801080c <lcd_clear_digit+0x2a0>)
 80107de:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 80107e0:	4b0a      	ldr	r3, [pc, #40]	; (801080c <lcd_clear_digit+0x2a0>)
 80107e2:	791b      	ldrb	r3, [r3, #4]
 80107e4:	f023 0301 	bic.w	r3, r3, #1
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	4b08      	ldr	r3, [pc, #32]	; (801080c <lcd_clear_digit+0x2a0>)
 80107ec:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 80107ee:	4b07      	ldr	r3, [pc, #28]	; (801080c <lcd_clear_digit+0x2a0>)
 80107f0:	791b      	ldrb	r3, [r3, #4]
 80107f2:	f023 0302 	bic.w	r3, r3, #2
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	4b04      	ldr	r3, [pc, #16]	; (801080c <lcd_clear_digit+0x2a0>)
 80107fa:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 80107fc:	4b03      	ldr	r3, [pc, #12]	; (801080c <lcd_clear_digit+0x2a0>)
 80107fe:	7a5b      	ldrb	r3, [r3, #9]
 8010800:	f023 0301 	bic.w	r3, r3, #1
 8010804:	b2da      	uxtb	r2, r3
 8010806:	4b01      	ldr	r3, [pc, #4]	; (801080c <lcd_clear_digit+0x2a0>)
 8010808:	725a      	strb	r2, [r3, #9]
            break;
 801080a:	e1e4      	b.n	8010bd6 <lcd_clear_digit+0x66a>
 801080c:	20001da0 	.word	0x20001da0
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 8010810:	4ba2      	ldr	r3, [pc, #648]	; (8010a9c <lcd_clear_digit+0x530>)
 8010812:	7b9b      	ldrb	r3, [r3, #14]
 8010814:	f023 0308 	bic.w	r3, r3, #8
 8010818:	b2da      	uxtb	r2, r3
 801081a:	4ba0      	ldr	r3, [pc, #640]	; (8010a9c <lcd_clear_digit+0x530>)
 801081c:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 801081e:	4b9f      	ldr	r3, [pc, #636]	; (8010a9c <lcd_clear_digit+0x530>)
 8010820:	7b9b      	ldrb	r3, [r3, #14]
 8010822:	f023 0304 	bic.w	r3, r3, #4
 8010826:	b2da      	uxtb	r2, r3
 8010828:	4b9c      	ldr	r3, [pc, #624]	; (8010a9c <lcd_clear_digit+0x530>)
 801082a:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 801082c:	4b9b      	ldr	r3, [pc, #620]	; (8010a9c <lcd_clear_digit+0x530>)
 801082e:	7cdb      	ldrb	r3, [r3, #19]
 8010830:	f023 0308 	bic.w	r3, r3, #8
 8010834:	b2da      	uxtb	r2, r3
 8010836:	4b99      	ldr	r3, [pc, #612]	; (8010a9c <lcd_clear_digit+0x530>)
 8010838:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 801083a:	4b98      	ldr	r3, [pc, #608]	; (8010a9c <lcd_clear_digit+0x530>)
 801083c:	7cdb      	ldrb	r3, [r3, #19]
 801083e:	f023 0304 	bic.w	r3, r3, #4
 8010842:	b2da      	uxtb	r2, r3
 8010844:	4b95      	ldr	r3, [pc, #596]	; (8010a9c <lcd_clear_digit+0x530>)
 8010846:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 8010848:	4b94      	ldr	r3, [pc, #592]	; (8010a9c <lcd_clear_digit+0x530>)
 801084a:	791b      	ldrb	r3, [r3, #4]
 801084c:	f023 0304 	bic.w	r3, r3, #4
 8010850:	b2da      	uxtb	r2, r3
 8010852:	4b92      	ldr	r3, [pc, #584]	; (8010a9c <lcd_clear_digit+0x530>)
 8010854:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 8010856:	4b91      	ldr	r3, [pc, #580]	; (8010a9c <lcd_clear_digit+0x530>)
 8010858:	791b      	ldrb	r3, [r3, #4]
 801085a:	f023 0308 	bic.w	r3, r3, #8
 801085e:	b2da      	uxtb	r2, r3
 8010860:	4b8e      	ldr	r3, [pc, #568]	; (8010a9c <lcd_clear_digit+0x530>)
 8010862:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010864:	4b8d      	ldr	r3, [pc, #564]	; (8010a9c <lcd_clear_digit+0x530>)
 8010866:	7a5b      	ldrb	r3, [r3, #9]
 8010868:	f023 0304 	bic.w	r3, r3, #4
 801086c:	b2da      	uxtb	r2, r3
 801086e:	4b8b      	ldr	r3, [pc, #556]	; (8010a9c <lcd_clear_digit+0x530>)
 8010870:	725a      	strb	r2, [r3, #9]
            break;
 8010872:	e1b0      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010874:	4b89      	ldr	r3, [pc, #548]	; (8010a9c <lcd_clear_digit+0x530>)
 8010876:	7b9b      	ldrb	r3, [r3, #14]
 8010878:	f023 0320 	bic.w	r3, r3, #32
 801087c:	b2da      	uxtb	r2, r3
 801087e:	4b87      	ldr	r3, [pc, #540]	; (8010a9c <lcd_clear_digit+0x530>)
 8010880:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010882:	4b86      	ldr	r3, [pc, #536]	; (8010a9c <lcd_clear_digit+0x530>)
 8010884:	7b9b      	ldrb	r3, [r3, #14]
 8010886:	f023 0310 	bic.w	r3, r3, #16
 801088a:	b2da      	uxtb	r2, r3
 801088c:	4b83      	ldr	r3, [pc, #524]	; (8010a9c <lcd_clear_digit+0x530>)
 801088e:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010890:	4b82      	ldr	r3, [pc, #520]	; (8010a9c <lcd_clear_digit+0x530>)
 8010892:	7cdb      	ldrb	r3, [r3, #19]
 8010894:	f023 0320 	bic.w	r3, r3, #32
 8010898:	b2da      	uxtb	r2, r3
 801089a:	4b80      	ldr	r3, [pc, #512]	; (8010a9c <lcd_clear_digit+0x530>)
 801089c:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 801089e:	4b7f      	ldr	r3, [pc, #508]	; (8010a9c <lcd_clear_digit+0x530>)
 80108a0:	7cdb      	ldrb	r3, [r3, #19]
 80108a2:	f023 0310 	bic.w	r3, r3, #16
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	4b7c      	ldr	r3, [pc, #496]	; (8010a9c <lcd_clear_digit+0x530>)
 80108aa:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 80108ac:	4b7b      	ldr	r3, [pc, #492]	; (8010a9c <lcd_clear_digit+0x530>)
 80108ae:	791b      	ldrb	r3, [r3, #4]
 80108b0:	f023 0310 	bic.w	r3, r3, #16
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b79      	ldr	r3, [pc, #484]	; (8010a9c <lcd_clear_digit+0x530>)
 80108b8:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 80108ba:	4b78      	ldr	r3, [pc, #480]	; (8010a9c <lcd_clear_digit+0x530>)
 80108bc:	791b      	ldrb	r3, [r3, #4]
 80108be:	f023 0320 	bic.w	r3, r3, #32
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b75      	ldr	r3, [pc, #468]	; (8010a9c <lcd_clear_digit+0x530>)
 80108c6:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 80108c8:	4b74      	ldr	r3, [pc, #464]	; (8010a9c <lcd_clear_digit+0x530>)
 80108ca:	7a5b      	ldrb	r3, [r3, #9]
 80108cc:	f023 0310 	bic.w	r3, r3, #16
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	4b72      	ldr	r3, [pc, #456]	; (8010a9c <lcd_clear_digit+0x530>)
 80108d4:	725a      	strb	r2, [r3, #9]
            break;
 80108d6:	e17e      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 80108d8:	79bb      	ldrb	r3, [r7, #6]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	f040 8178 	bne.w	8010bd0 <lcd_clear_digit+0x664>
    {
        switch(digit)
 80108e0:	79fb      	ldrb	r3, [r7, #7]
 80108e2:	2b06      	cmp	r3, #6
 80108e4:	f200 8176 	bhi.w	8010bd4 <lcd_clear_digit+0x668>
 80108e8:	a201      	add	r2, pc, #4	; (adr r2, 80108f0 <lcd_clear_digit+0x384>)
 80108ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ee:	bf00      	nop
 80108f0:	0801090d 	.word	0x0801090d
 80108f4:	08010971 	.word	0x08010971
 80108f8:	080109d5 	.word	0x080109d5
 80108fc:	08010a39 	.word	0x08010a39
 8010900:	08010aa1 	.word	0x08010aa1
 8010904:	08010b05 	.word	0x08010b05
 8010908:	08010b69 	.word	0x08010b69
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 801090c:	4b63      	ldr	r3, [pc, #396]	; (8010a9c <lcd_clear_digit+0x530>)
 801090e:	7b1b      	ldrb	r3, [r3, #12]
 8010910:	f023 0304 	bic.w	r3, r3, #4
 8010914:	b2da      	uxtb	r2, r3
 8010916:	4b61      	ldr	r3, [pc, #388]	; (8010a9c <lcd_clear_digit+0x530>)
 8010918:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 801091a:	4b60      	ldr	r3, [pc, #384]	; (8010a9c <lcd_clear_digit+0x530>)
 801091c:	7b1b      	ldrb	r3, [r3, #12]
 801091e:	f023 0308 	bic.w	r3, r3, #8
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b5d      	ldr	r3, [pc, #372]	; (8010a9c <lcd_clear_digit+0x530>)
 8010926:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 8010928:	4b5c      	ldr	r3, [pc, #368]	; (8010a9c <lcd_clear_digit+0x530>)
 801092a:	7c5b      	ldrb	r3, [r3, #17]
 801092c:	f023 0304 	bic.w	r3, r3, #4
 8010930:	b2da      	uxtb	r2, r3
 8010932:	4b5a      	ldr	r3, [pc, #360]	; (8010a9c <lcd_clear_digit+0x530>)
 8010934:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 8010936:	4b59      	ldr	r3, [pc, #356]	; (8010a9c <lcd_clear_digit+0x530>)
 8010938:	7c5b      	ldrb	r3, [r3, #17]
 801093a:	f023 0308 	bic.w	r3, r3, #8
 801093e:	b2da      	uxtb	r2, r3
 8010940:	4b56      	ldr	r3, [pc, #344]	; (8010a9c <lcd_clear_digit+0x530>)
 8010942:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 8010944:	4b55      	ldr	r3, [pc, #340]	; (8010a9c <lcd_clear_digit+0x530>)
 8010946:	789b      	ldrb	r3, [r3, #2]
 8010948:	f023 0304 	bic.w	r3, r3, #4
 801094c:	b2da      	uxtb	r2, r3
 801094e:	4b53      	ldr	r3, [pc, #332]	; (8010a9c <lcd_clear_digit+0x530>)
 8010950:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 8010952:	4b52      	ldr	r3, [pc, #328]	; (8010a9c <lcd_clear_digit+0x530>)
 8010954:	789b      	ldrb	r3, [r3, #2]
 8010956:	f023 0308 	bic.w	r3, r3, #8
 801095a:	b2da      	uxtb	r2, r3
 801095c:	4b4f      	ldr	r3, [pc, #316]	; (8010a9c <lcd_clear_digit+0x530>)
 801095e:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010960:	4b4e      	ldr	r3, [pc, #312]	; (8010a9c <lcd_clear_digit+0x530>)
 8010962:	79db      	ldrb	r3, [r3, #7]
 8010964:	f023 0308 	bic.w	r3, r3, #8
 8010968:	b2da      	uxtb	r2, r3
 801096a:	4b4c      	ldr	r3, [pc, #304]	; (8010a9c <lcd_clear_digit+0x530>)
 801096c:	71da      	strb	r2, [r3, #7]
            break;
 801096e:	e132      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010970:	4b4a      	ldr	r3, [pc, #296]	; (8010a9c <lcd_clear_digit+0x530>)
 8010972:	7b1b      	ldrb	r3, [r3, #12]
 8010974:	f023 0301 	bic.w	r3, r3, #1
 8010978:	b2da      	uxtb	r2, r3
 801097a:	4b48      	ldr	r3, [pc, #288]	; (8010a9c <lcd_clear_digit+0x530>)
 801097c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 801097e:	4b47      	ldr	r3, [pc, #284]	; (8010a9c <lcd_clear_digit+0x530>)
 8010980:	7b1b      	ldrb	r3, [r3, #12]
 8010982:	f023 0302 	bic.w	r3, r3, #2
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b44      	ldr	r3, [pc, #272]	; (8010a9c <lcd_clear_digit+0x530>)
 801098a:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 801098c:	4b43      	ldr	r3, [pc, #268]	; (8010a9c <lcd_clear_digit+0x530>)
 801098e:	7c5b      	ldrb	r3, [r3, #17]
 8010990:	f023 0301 	bic.w	r3, r3, #1
 8010994:	b2da      	uxtb	r2, r3
 8010996:	4b41      	ldr	r3, [pc, #260]	; (8010a9c <lcd_clear_digit+0x530>)
 8010998:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 801099a:	4b40      	ldr	r3, [pc, #256]	; (8010a9c <lcd_clear_digit+0x530>)
 801099c:	7c5b      	ldrb	r3, [r3, #17]
 801099e:	f023 0302 	bic.w	r3, r3, #2
 80109a2:	b2da      	uxtb	r2, r3
 80109a4:	4b3d      	ldr	r3, [pc, #244]	; (8010a9c <lcd_clear_digit+0x530>)
 80109a6:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 80109a8:	4b3c      	ldr	r3, [pc, #240]	; (8010a9c <lcd_clear_digit+0x530>)
 80109aa:	789b      	ldrb	r3, [r3, #2]
 80109ac:	f023 0301 	bic.w	r3, r3, #1
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	4b3a      	ldr	r3, [pc, #232]	; (8010a9c <lcd_clear_digit+0x530>)
 80109b4:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 80109b6:	4b39      	ldr	r3, [pc, #228]	; (8010a9c <lcd_clear_digit+0x530>)
 80109b8:	789b      	ldrb	r3, [r3, #2]
 80109ba:	f023 0302 	bic.w	r3, r3, #2
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	4b36      	ldr	r3, [pc, #216]	; (8010a9c <lcd_clear_digit+0x530>)
 80109c2:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 80109c4:	4b35      	ldr	r3, [pc, #212]	; (8010a9c <lcd_clear_digit+0x530>)
 80109c6:	79db      	ldrb	r3, [r3, #7]
 80109c8:	f023 0302 	bic.w	r3, r3, #2
 80109cc:	b2da      	uxtb	r2, r3
 80109ce:	4b33      	ldr	r3, [pc, #204]	; (8010a9c <lcd_clear_digit+0x530>)
 80109d0:	71da      	strb	r2, [r3, #7]
            break;
 80109d2:	e100      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 80109d4:	4b31      	ldr	r3, [pc, #196]	; (8010a9c <lcd_clear_digit+0x530>)
 80109d6:	7adb      	ldrb	r3, [r3, #11]
 80109d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	4b2f      	ldr	r3, [pc, #188]	; (8010a9c <lcd_clear_digit+0x530>)
 80109e0:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <lcd_clear_digit+0x530>)
 80109e4:	7adb      	ldrb	r3, [r3, #11]
 80109e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <lcd_clear_digit+0x530>)
 80109ee:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 80109f0:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <lcd_clear_digit+0x530>)
 80109f2:	7c1b      	ldrb	r3, [r3, #16]
 80109f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	4b28      	ldr	r3, [pc, #160]	; (8010a9c <lcd_clear_digit+0x530>)
 80109fc:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 80109fe:	4b27      	ldr	r3, [pc, #156]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a00:	7c1b      	ldrb	r3, [r3, #16]
 8010a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a0a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010a0c:	4b23      	ldr	r3, [pc, #140]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a0e:	785b      	ldrb	r3, [r3, #1]
 8010a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	4b21      	ldr	r3, [pc, #132]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a18:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 8010a1a:	4b20      	ldr	r3, [pc, #128]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a1c:	785b      	ldrb	r3, [r3, #1]
 8010a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	4b1d      	ldr	r3, [pc, #116]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a26:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 8010a28:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a2a:	799b      	ldrb	r3, [r3, #6]
 8010a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	4b1a      	ldr	r3, [pc, #104]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a34:	719a      	strb	r2, [r3, #6]
            break;
 8010a36:	e0ce      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 8010a38:	4b18      	ldr	r3, [pc, #96]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a3a:	7adb      	ldrb	r3, [r3, #11]
 8010a3c:	f023 0310 	bic.w	r3, r3, #16
 8010a40:	b2da      	uxtb	r2, r3
 8010a42:	4b16      	ldr	r3, [pc, #88]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a44:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 8010a46:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a48:	7adb      	ldrb	r3, [r3, #11]
 8010a4a:	f023 0320 	bic.w	r3, r3, #32
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a52:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 8010a54:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a56:	7c1b      	ldrb	r3, [r3, #16]
 8010a58:	f023 0310 	bic.w	r3, r3, #16
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a60:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010a62:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a64:	7c1b      	ldrb	r3, [r3, #16]
 8010a66:	f023 0320 	bic.w	r3, r3, #32
 8010a6a:	b2da      	uxtb	r2, r3
 8010a6c:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a6e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010a70:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a72:	785b      	ldrb	r3, [r3, #1]
 8010a74:	f023 0310 	bic.w	r3, r3, #16
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a7c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010a7e:	4b07      	ldr	r3, [pc, #28]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a80:	785b      	ldrb	r3, [r3, #1]
 8010a82:	f023 0320 	bic.w	r3, r3, #32
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	4b04      	ldr	r3, [pc, #16]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a8a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010a8c:	4b03      	ldr	r3, [pc, #12]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a8e:	799b      	ldrb	r3, [r3, #6]
 8010a90:	f023 0320 	bic.w	r3, r3, #32
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	4b01      	ldr	r3, [pc, #4]	; (8010a9c <lcd_clear_digit+0x530>)
 8010a98:	719a      	strb	r2, [r3, #6]
            break;
 8010a9a:	e09c      	b.n	8010bd6 <lcd_clear_digit+0x66a>
 8010a9c:	20001da0 	.word	0x20001da0
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010aa0:	4b50      	ldr	r3, [pc, #320]	; (8010be4 <lcd_clear_digit+0x678>)
 8010aa2:	7adb      	ldrb	r3, [r3, #11]
 8010aa4:	f023 0304 	bic.w	r3, r3, #4
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	4b4e      	ldr	r3, [pc, #312]	; (8010be4 <lcd_clear_digit+0x678>)
 8010aac:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010aae:	4b4d      	ldr	r3, [pc, #308]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ab0:	7adb      	ldrb	r3, [r3, #11]
 8010ab2:	f023 0308 	bic.w	r3, r3, #8
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	4b4a      	ldr	r3, [pc, #296]	; (8010be4 <lcd_clear_digit+0x678>)
 8010aba:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010abc:	4b49      	ldr	r3, [pc, #292]	; (8010be4 <lcd_clear_digit+0x678>)
 8010abe:	7c1b      	ldrb	r3, [r3, #16]
 8010ac0:	f023 0304 	bic.w	r3, r3, #4
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	4b47      	ldr	r3, [pc, #284]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ac8:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010aca:	4b46      	ldr	r3, [pc, #280]	; (8010be4 <lcd_clear_digit+0x678>)
 8010acc:	7c1b      	ldrb	r3, [r3, #16]
 8010ace:	f023 0308 	bic.w	r3, r3, #8
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	4b43      	ldr	r3, [pc, #268]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ad6:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010ad8:	4b42      	ldr	r3, [pc, #264]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ada:	785b      	ldrb	r3, [r3, #1]
 8010adc:	f023 0304 	bic.w	r3, r3, #4
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	4b40      	ldr	r3, [pc, #256]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ae4:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010ae6:	4b3f      	ldr	r3, [pc, #252]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ae8:	785b      	ldrb	r3, [r3, #1]
 8010aea:	f023 0308 	bic.w	r3, r3, #8
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	4b3c      	ldr	r3, [pc, #240]	; (8010be4 <lcd_clear_digit+0x678>)
 8010af2:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010af4:	4b3b      	ldr	r3, [pc, #236]	; (8010be4 <lcd_clear_digit+0x678>)
 8010af6:	799b      	ldrb	r3, [r3, #6]
 8010af8:	f023 0308 	bic.w	r3, r3, #8
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	4b39      	ldr	r3, [pc, #228]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b00:	719a      	strb	r2, [r3, #6]
            break;
 8010b02:	e068      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010b04:	4b37      	ldr	r3, [pc, #220]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b06:	7adb      	ldrb	r3, [r3, #11]
 8010b08:	f023 0301 	bic.w	r3, r3, #1
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	4b35      	ldr	r3, [pc, #212]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b10:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010b12:	4b34      	ldr	r3, [pc, #208]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b14:	7adb      	ldrb	r3, [r3, #11]
 8010b16:	f023 0302 	bic.w	r3, r3, #2
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b31      	ldr	r3, [pc, #196]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b1e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010b20:	4b30      	ldr	r3, [pc, #192]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b22:	7c1b      	ldrb	r3, [r3, #16]
 8010b24:	f023 0301 	bic.w	r3, r3, #1
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	4b2e      	ldr	r3, [pc, #184]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b2c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010b2e:	4b2d      	ldr	r3, [pc, #180]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b30:	7c1b      	ldrb	r3, [r3, #16]
 8010b32:	f023 0302 	bic.w	r3, r3, #2
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	4b2a      	ldr	r3, [pc, #168]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b3a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010b3c:	4b29      	ldr	r3, [pc, #164]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b3e:	785b      	ldrb	r3, [r3, #1]
 8010b40:	f023 0301 	bic.w	r3, r3, #1
 8010b44:	b2da      	uxtb	r2, r3
 8010b46:	4b27      	ldr	r3, [pc, #156]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b48:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010b4a:	4b26      	ldr	r3, [pc, #152]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b4c:	785b      	ldrb	r3, [r3, #1]
 8010b4e:	f023 0302 	bic.w	r3, r3, #2
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	4b23      	ldr	r3, [pc, #140]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b56:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010b58:	4b22      	ldr	r3, [pc, #136]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b5a:	799b      	ldrb	r3, [r3, #6]
 8010b5c:	f023 0302 	bic.w	r3, r3, #2
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	4b20      	ldr	r3, [pc, #128]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b64:	719a      	strb	r2, [r3, #6]
            break;
 8010b66:	e036      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010b68:	4b1e      	ldr	r3, [pc, #120]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b6a:	7a9b      	ldrb	r3, [r3, #10]
 8010b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	4b1c      	ldr	r3, [pc, #112]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b74:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010b76:	4b1b      	ldr	r3, [pc, #108]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b78:	7a9b      	ldrb	r3, [r3, #10]
 8010b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	4b18      	ldr	r3, [pc, #96]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b82:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010b84:	4b17      	ldr	r3, [pc, #92]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b86:	7bdb      	ldrb	r3, [r3, #15]
 8010b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	4b15      	ldr	r3, [pc, #84]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b90:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010b92:	4b14      	ldr	r3, [pc, #80]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b94:	7bdb      	ldrb	r3, [r3, #15]
 8010b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	4b11      	ldr	r3, [pc, #68]	; (8010be4 <lcd_clear_digit+0x678>)
 8010b9e:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010ba0:	4b10      	ldr	r3, [pc, #64]	; (8010be4 <lcd_clear_digit+0x678>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ba8:	b2da      	uxtb	r2, r3
 8010baa:	4b0e      	ldr	r3, [pc, #56]	; (8010be4 <lcd_clear_digit+0x678>)
 8010bac:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010bae:	4b0d      	ldr	r3, [pc, #52]	; (8010be4 <lcd_clear_digit+0x678>)
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	4b0a      	ldr	r3, [pc, #40]	; (8010be4 <lcd_clear_digit+0x678>)
 8010bba:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010bbc:	4b09      	ldr	r3, [pc, #36]	; (8010be4 <lcd_clear_digit+0x678>)
 8010bbe:	795b      	ldrb	r3, [r3, #5]
 8010bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bc4:	b2da      	uxtb	r2, r3
 8010bc6:	4b07      	ldr	r3, [pc, #28]	; (8010be4 <lcd_clear_digit+0x678>)
 8010bc8:	715a      	strb	r2, [r3, #5]
            break;
 8010bca:	e004      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            break;
 8010bcc:	bf00      	nop
 8010bce:	e002      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010bd0:	bf00      	nop
 8010bd2:	e000      	b.n	8010bd6 <lcd_clear_digit+0x66a>
            break;
 8010bd4:	bf00      	nop
}
 8010bd6:	bf00      	nop
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	20001da0 	.word	0x20001da0

08010be8 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	460a      	mov	r2, r1
 8010bf2:	71fb      	strb	r3, [r7, #7]
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010bf8:	79fb      	ldrb	r3, [r7, #7]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d14c      	bne.n	8010c98 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010bfe:	79bb      	ldrb	r3, [r7, #6]
 8010c00:	2b06      	cmp	r3, #6
 8010c02:	f200 808f 	bhi.w	8010d24 <lcd_clear_point+0x13c>
 8010c06:	a201      	add	r2, pc, #4	; (adr r2, 8010c0c <lcd_clear_point+0x24>)
 8010c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0c:	08010c29 	.word	0x08010c29
 8010c10:	08010c39 	.word	0x08010c39
 8010c14:	08010c49 	.word	0x08010c49
 8010c18:	08010c59 	.word	0x08010c59
 8010c1c:	08010c69 	.word	0x08010c69
 8010c20:	08010c79 	.word	0x08010c79
 8010c24:	08010c89 	.word	0x08010c89
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010c28:	4b44      	ldr	r3, [pc, #272]	; (8010d3c <lcd_clear_point+0x154>)
 8010c2a:	79db      	ldrb	r3, [r3, #7]
 8010c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b42      	ldr	r3, [pc, #264]	; (8010d3c <lcd_clear_point+0x154>)
 8010c34:	71da      	strb	r2, [r3, #7]
            break;
 8010c36:	e07a      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010c38:	4b40      	ldr	r3, [pc, #256]	; (8010d3c <lcd_clear_point+0x154>)
 8010c3a:	7a1b      	ldrb	r3, [r3, #8]
 8010c3c:	f023 0302 	bic.w	r3, r3, #2
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	4b3e      	ldr	r3, [pc, #248]	; (8010d3c <lcd_clear_point+0x154>)
 8010c44:	721a      	strb	r2, [r3, #8]
            break;
 8010c46:	e072      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010c48:	4b3c      	ldr	r3, [pc, #240]	; (8010d3c <lcd_clear_point+0x154>)
 8010c4a:	7a1b      	ldrb	r3, [r3, #8]
 8010c4c:	f023 0308 	bic.w	r3, r3, #8
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	4b3a      	ldr	r3, [pc, #232]	; (8010d3c <lcd_clear_point+0x154>)
 8010c54:	721a      	strb	r2, [r3, #8]
            break;
 8010c56:	e06a      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010c58:	4b38      	ldr	r3, [pc, #224]	; (8010d3c <lcd_clear_point+0x154>)
 8010c5a:	7a1b      	ldrb	r3, [r3, #8]
 8010c5c:	f023 0320 	bic.w	r3, r3, #32
 8010c60:	b2da      	uxtb	r2, r3
 8010c62:	4b36      	ldr	r3, [pc, #216]	; (8010d3c <lcd_clear_point+0x154>)
 8010c64:	721a      	strb	r2, [r3, #8]
            break;
 8010c66:	e062      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010c68:	4b34      	ldr	r3, [pc, #208]	; (8010d3c <lcd_clear_point+0x154>)
 8010c6a:	7a1b      	ldrb	r3, [r3, #8]
 8010c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	4b32      	ldr	r3, [pc, #200]	; (8010d3c <lcd_clear_point+0x154>)
 8010c74:	721a      	strb	r2, [r3, #8]
            break;
 8010c76:	e05a      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010c78:	4b30      	ldr	r3, [pc, #192]	; (8010d3c <lcd_clear_point+0x154>)
 8010c7a:	7a5b      	ldrb	r3, [r3, #9]
 8010c7c:	f023 0302 	bic.w	r3, r3, #2
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	4b2e      	ldr	r3, [pc, #184]	; (8010d3c <lcd_clear_point+0x154>)
 8010c84:	725a      	strb	r2, [r3, #9]
            break;
 8010c86:	e052      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010c88:	4b2c      	ldr	r3, [pc, #176]	; (8010d3c <lcd_clear_point+0x154>)
 8010c8a:	7a5b      	ldrb	r3, [r3, #9]
 8010c8c:	f023 0308 	bic.w	r3, r3, #8
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	4b2a      	ldr	r3, [pc, #168]	; (8010d3c <lcd_clear_point+0x154>)
 8010c94:	725a      	strb	r2, [r3, #9]
            break;
 8010c96:	e04a      	b.n	8010d2e <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010c98:	79fb      	ldrb	r3, [r7, #7]
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d144      	bne.n	8010d28 <lcd_clear_point+0x140>
    {
        switch (point)
 8010c9e:	79bb      	ldrb	r3, [r7, #6]
 8010ca0:	2b05      	cmp	r3, #5
 8010ca2:	d843      	bhi.n	8010d2c <lcd_clear_point+0x144>
 8010ca4:	a201      	add	r2, pc, #4	; (adr r2, 8010cac <lcd_clear_point+0xc4>)
 8010ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010caa:	bf00      	nop
 8010cac:	08010cc5 	.word	0x08010cc5
 8010cb0:	08010cd5 	.word	0x08010cd5
 8010cb4:	08010ce5 	.word	0x08010ce5
 8010cb8:	08010cf5 	.word	0x08010cf5
 8010cbc:	08010d05 	.word	0x08010d05
 8010cc0:	08010d15 	.word	0x08010d15
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010cc4:	4b1d      	ldr	r3, [pc, #116]	; (8010d3c <lcd_clear_point+0x154>)
 8010cc6:	79db      	ldrb	r3, [r3, #7]
 8010cc8:	f023 0304 	bic.w	r3, r3, #4
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b1b      	ldr	r3, [pc, #108]	; (8010d3c <lcd_clear_point+0x154>)
 8010cd0:	71da      	strb	r2, [r3, #7]
            break;
 8010cd2:	e02c      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010cd4:	4b19      	ldr	r3, [pc, #100]	; (8010d3c <lcd_clear_point+0x154>)
 8010cd6:	79db      	ldrb	r3, [r3, #7]
 8010cd8:	f023 0301 	bic.w	r3, r3, #1
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	4b17      	ldr	r3, [pc, #92]	; (8010d3c <lcd_clear_point+0x154>)
 8010ce0:	71da      	strb	r2, [r3, #7]
            break;
 8010ce2:	e024      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010ce4:	4b15      	ldr	r3, [pc, #84]	; (8010d3c <lcd_clear_point+0x154>)
 8010ce6:	799b      	ldrb	r3, [r3, #6]
 8010ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b13      	ldr	r3, [pc, #76]	; (8010d3c <lcd_clear_point+0x154>)
 8010cf0:	719a      	strb	r2, [r3, #6]
            break;
 8010cf2:	e01c      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010cf4:	4b11      	ldr	r3, [pc, #68]	; (8010d3c <lcd_clear_point+0x154>)
 8010cf6:	799b      	ldrb	r3, [r3, #6]
 8010cf8:	f023 0310 	bic.w	r3, r3, #16
 8010cfc:	b2da      	uxtb	r2, r3
 8010cfe:	4b0f      	ldr	r3, [pc, #60]	; (8010d3c <lcd_clear_point+0x154>)
 8010d00:	719a      	strb	r2, [r3, #6]
            break;
 8010d02:	e014      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010d04:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <lcd_clear_point+0x154>)
 8010d06:	799b      	ldrb	r3, [r3, #6]
 8010d08:	f023 0304 	bic.w	r3, r3, #4
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <lcd_clear_point+0x154>)
 8010d10:	719a      	strb	r2, [r3, #6]
            break;
 8010d12:	e00c      	b.n	8010d2e <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010d14:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <lcd_clear_point+0x154>)
 8010d16:	799b      	ldrb	r3, [r3, #6]
 8010d18:	f023 0301 	bic.w	r3, r3, #1
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	4b07      	ldr	r3, [pc, #28]	; (8010d3c <lcd_clear_point+0x154>)
 8010d20:	719a      	strb	r2, [r3, #6]
            break;
 8010d22:	e004      	b.n	8010d2e <lcd_clear_point+0x146>
            break;
 8010d24:	bf00      	nop
 8010d26:	e002      	b.n	8010d2e <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010d28:	bf00      	nop
 8010d2a:	e000      	b.n	8010d2e <lcd_clear_point+0x146>
            break;
 8010d2c:	bf00      	nop
}
 8010d2e:	bf00      	nop
 8010d30:	370c      	adds	r7, #12
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	20001da0 	.word	0x20001da0

08010d40 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	460a      	mov	r2, r1
 8010d4a:	71fb      	strb	r3, [r7, #7]
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	2b03      	cmp	r3, #3
 8010d54:	d82a      	bhi.n	8010dac <lcd_clear_time_unit+0x6c>
 8010d56:	a201      	add	r2, pc, #4	; (adr r2, 8010d5c <lcd_clear_time_unit+0x1c>)
 8010d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5c:	08010d6d 	.word	0x08010d6d
 8010d60:	08010d7d 	.word	0x08010d7d
 8010d64:	08010d8d 	.word	0x08010d8d
 8010d68:	08010d9d 	.word	0x08010d9d
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010d6c:	4b14      	ldr	r3, [pc, #80]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d6e:	795b      	ldrb	r3, [r3, #5]
 8010d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	4b12      	ldr	r3, [pc, #72]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d78:	715a      	strb	r2, [r3, #5]
        break;
 8010d7a:	e018      	b.n	8010dae <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010d7c:	4b10      	ldr	r3, [pc, #64]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d7e:	7a5b      	ldrb	r3, [r3, #9]
 8010d80:	f023 0320 	bic.w	r3, r3, #32
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	4b0e      	ldr	r3, [pc, #56]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d88:	725a      	strb	r2, [r3, #9]
        break;
 8010d8a:	e010      	b.n	8010dae <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010d8c:	4b0c      	ldr	r3, [pc, #48]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d8e:	7a9b      	ldrb	r3, [r3, #10]
 8010d90:	f023 0320 	bic.w	r3, r3, #32
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	4b0a      	ldr	r3, [pc, #40]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d98:	729a      	strb	r2, [r3, #10]
        break;
 8010d9a:	e008      	b.n	8010dae <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010d9c:	4b08      	ldr	r3, [pc, #32]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010d9e:	7a5b      	ldrb	r3, [r3, #9]
 8010da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <lcd_clear_time_unit+0x80>)
 8010da8:	725a      	strb	r2, [r3, #9]
        break;
 8010daa:	e000      	b.n	8010dae <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010dac:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010dae:	79bb      	ldrb	r3, [r7, #6]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f001 fbff 	bl	80125b4 <pcf8553_blink>
}
 8010db6:	bf00      	nop
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20001da0 	.word	0x20001da0

08010dc4 <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	460a      	mov	r2, r1
 8010dce:	71fb      	strb	r3, [r7, #7]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	2b07      	cmp	r3, #7
 8010dd8:	f200 822c 	bhi.w	8011234 <lcd_clear_vol_unit+0x470>
 8010ddc:	a201      	add	r2, pc, #4	; (adr r2, 8010de4 <lcd_clear_vol_unit+0x20>)
 8010dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de2:	bf00      	nop
 8010de4:	08010e05 	.word	0x08010e05
 8010de8:	08010ef7 	.word	0x08010ef7
 8010dec:	08010fa1 	.word	0x08010fa1
 8010df0:	08010e5b 	.word	0x08010e5b
 8010df4:	080110fb 	.word	0x080110fb
 8010df8:	08011035 	.word	0x08011035
 8010dfc:	0801117b 	.word	0x0801117b
 8010e00:	080111fb 	.word	0x080111fb
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e04:	4b8a      	ldr	r3, [pc, #552]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e06:	7bdb      	ldrb	r3, [r3, #15]
 8010e08:	f023 0320 	bic.w	r3, r3, #32
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b88      	ldr	r3, [pc, #544]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e10:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e12:	4b87      	ldr	r3, [pc, #540]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	f023 0320 	bic.w	r3, r3, #32
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	4b84      	ldr	r3, [pc, #528]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e1e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010e20:	4b83      	ldr	r3, [pc, #524]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e22:	795b      	ldrb	r3, [r3, #5]
 8010e24:	f023 0320 	bic.w	r3, r3, #32
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	4b81      	ldr	r3, [pc, #516]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e2c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010e2e:	4b80      	ldr	r3, [pc, #512]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e30:	7b9b      	ldrb	r3, [r3, #14]
 8010e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	4b7d      	ldr	r3, [pc, #500]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e3a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010e3c:	4b7c      	ldr	r3, [pc, #496]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e3e:	7a9b      	ldrb	r3, [r3, #10]
 8010e40:	f023 0301 	bic.w	r3, r3, #1
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	4b7a      	ldr	r3, [pc, #488]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e48:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010e4a:	4b79      	ldr	r3, [pc, #484]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e4c:	7a5b      	ldrb	r3, [r3, #9]
 8010e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	4b76      	ldr	r3, [pc, #472]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e56:	725a      	strb	r2, [r3, #9]
        break;
 8010e58:	e1ed      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e5a:	4b75      	ldr	r3, [pc, #468]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e5c:	7bdb      	ldrb	r3, [r3, #15]
 8010e5e:	f023 0320 	bic.w	r3, r3, #32
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	4b72      	ldr	r3, [pc, #456]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e66:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010e68:	4b71      	ldr	r3, [pc, #452]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e6a:	7bdb      	ldrb	r3, [r3, #15]
 8010e6c:	f023 0310 	bic.w	r3, r3, #16
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b6f      	ldr	r3, [pc, #444]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e74:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010e76:	4b6e      	ldr	r3, [pc, #440]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e78:	7bdb      	ldrb	r3, [r3, #15]
 8010e7a:	f023 0304 	bic.w	r3, r3, #4
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	4b6b      	ldr	r3, [pc, #428]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e82:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e84:	4b6a      	ldr	r3, [pc, #424]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	f023 0320 	bic.w	r3, r3, #32
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	4b68      	ldr	r3, [pc, #416]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e90:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010e92:	4b67      	ldr	r3, [pc, #412]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e94:	795b      	ldrb	r3, [r3, #5]
 8010e96:	f023 0310 	bic.w	r3, r3, #16
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	4b64      	ldr	r3, [pc, #400]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010e9e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ea0:	4b63      	ldr	r3, [pc, #396]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ea2:	7b9b      	ldrb	r3, [r3, #14]
 8010ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b61      	ldr	r3, [pc, #388]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010eac:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010eae:	4b60      	ldr	r3, [pc, #384]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010eb0:	7bdb      	ldrb	r3, [r3, #15]
 8010eb2:	f023 0302 	bic.w	r3, r3, #2
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	4b5d      	ldr	r3, [pc, #372]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010eba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010ebc:	4b5c      	ldr	r3, [pc, #368]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	f023 0301 	bic.w	r3, r3, #1
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	4b5a      	ldr	r3, [pc, #360]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ec8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010eca:	4b59      	ldr	r3, [pc, #356]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	f023 0302 	bic.w	r3, r3, #2
 8010ed2:	b2da      	uxtb	r2, r3
 8010ed4:	4b56      	ldr	r3, [pc, #344]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ed6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010ed8:	4b55      	ldr	r3, [pc, #340]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010eda:	791b      	ldrb	r3, [r3, #4]
 8010edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ee0:	b2da      	uxtb	r2, r3
 8010ee2:	4b53      	ldr	r3, [pc, #332]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ee4:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010ee6:	4b52      	ldr	r3, [pc, #328]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ee8:	795b      	ldrb	r3, [r3, #5]
 8010eea:	f023 0302 	bic.w	r3, r3, #2
 8010eee:	b2da      	uxtb	r2, r3
 8010ef0:	4b4f      	ldr	r3, [pc, #316]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ef2:	715a      	strb	r2, [r3, #5]
        break;
 8010ef4:	e19f      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010ef6:	4b4e      	ldr	r3, [pc, #312]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ef8:	7bdb      	ldrb	r3, [r3, #15]
 8010efa:	f023 0320 	bic.w	r3, r3, #32
 8010efe:	b2da      	uxtb	r2, r3
 8010f00:	4b4b      	ldr	r3, [pc, #300]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f02:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010f04:	4b4a      	ldr	r3, [pc, #296]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f06:	7a9b      	ldrb	r3, [r3, #10]
 8010f08:	f023 0304 	bic.w	r3, r3, #4
 8010f0c:	b2da      	uxtb	r2, r3
 8010f0e:	4b48      	ldr	r3, [pc, #288]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f10:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010f12:	4b47      	ldr	r3, [pc, #284]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f14:	7bdb      	ldrb	r3, [r3, #15]
 8010f16:	f023 0310 	bic.w	r3, r3, #16
 8010f1a:	b2da      	uxtb	r2, r3
 8010f1c:	4b44      	ldr	r3, [pc, #272]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f1e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010f20:	4b43      	ldr	r3, [pc, #268]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f22:	7bdb      	ldrb	r3, [r3, #15]
 8010f24:	f023 0308 	bic.w	r3, r3, #8
 8010f28:	b2da      	uxtb	r2, r3
 8010f2a:	4b41      	ldr	r3, [pc, #260]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f2c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010f2e:	4b40      	ldr	r3, [pc, #256]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f023 0320 	bic.w	r3, r3, #32
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	4b3d      	ldr	r3, [pc, #244]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f3a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010f3c:	4b3c      	ldr	r3, [pc, #240]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	f023 0308 	bic.w	r3, r3, #8
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	4b3a      	ldr	r3, [pc, #232]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f48:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010f4a:	4b39      	ldr	r3, [pc, #228]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f4c:	7b9b      	ldrb	r3, [r3, #14]
 8010f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	4b36      	ldr	r3, [pc, #216]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f56:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010f58:	4b35      	ldr	r3, [pc, #212]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f5a:	7cdb      	ldrb	r3, [r3, #19]
 8010f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	4b33      	ldr	r3, [pc, #204]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f64:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f66:	4b32      	ldr	r3, [pc, #200]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f68:	7cdb      	ldrb	r3, [r3, #19]
 8010f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f6e:	b2da      	uxtb	r2, r3
 8010f70:	4b2f      	ldr	r3, [pc, #188]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f72:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f74:	4b2e      	ldr	r3, [pc, #184]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	f023 0301 	bic.w	r3, r3, #1
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	4b2c      	ldr	r3, [pc, #176]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f80:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010f82:	4b2b      	ldr	r3, [pc, #172]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f84:	791b      	ldrb	r3, [r3, #4]
 8010f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	4b28      	ldr	r3, [pc, #160]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f8e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010f90:	4b27      	ldr	r3, [pc, #156]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f92:	795b      	ldrb	r3, [r3, #5]
 8010f94:	f023 0302 	bic.w	r3, r3, #2
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	4b25      	ldr	r3, [pc, #148]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010f9c:	715a      	strb	r2, [r3, #5]
        break;
 8010f9e:	e14a      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010fa0:	4b23      	ldr	r3, [pc, #140]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fa2:	7bdb      	ldrb	r3, [r3, #15]
 8010fa4:	f023 0320 	bic.w	r3, r3, #32
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	4b21      	ldr	r3, [pc, #132]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010fae:	4b20      	ldr	r3, [pc, #128]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fb0:	7a9b      	ldrb	r3, [r3, #10]
 8010fb2:	f023 0304 	bic.w	r3, r3, #4
 8010fb6:	b2da      	uxtb	r2, r3
 8010fb8:	4b1d      	ldr	r3, [pc, #116]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fba:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010fbc:	4b1c      	ldr	r3, [pc, #112]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fbe:	7bdb      	ldrb	r3, [r3, #15]
 8010fc0:	f023 0310 	bic.w	r3, r3, #16
 8010fc4:	b2da      	uxtb	r2, r3
 8010fc6:	4b1a      	ldr	r3, [pc, #104]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fc8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010fca:	4b19      	ldr	r3, [pc, #100]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fcc:	7bdb      	ldrb	r3, [r3, #15]
 8010fce:	f023 0308 	bic.w	r3, r3, #8
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	4b16      	ldr	r3, [pc, #88]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fd6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  &= ~(1 << BIT_5);
 8010fd8:	4b15      	ldr	r3, [pc, #84]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	f023 0320 	bic.w	r3, r3, #32
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	4b13      	ldr	r3, [pc, #76]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fe4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  &= ~(1 << BIT_3);
 8010fe6:	4b12      	ldr	r3, [pc, #72]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f023 0308 	bic.w	r3, r3, #8
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	4b0f      	ldr	r3, [pc, #60]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ff2:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ff4:	4b0e      	ldr	r3, [pc, #56]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8010ff6:	7b9b      	ldrb	r3, [r3, #14]
 8010ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	4b0c      	ldr	r3, [pc, #48]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8011000:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011002:	4b0b      	ldr	r3, [pc, #44]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8011004:	7bdb      	ldrb	r3, [r3, #15]
 8011006:	f023 0302 	bic.w	r3, r3, #2
 801100a:	b2da      	uxtb	r2, r3
 801100c:	4b08      	ldr	r3, [pc, #32]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 801100e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  &= ~(1 << BIT_1);
 8011010:	4b07      	ldr	r3, [pc, #28]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	f023 0302 	bic.w	r3, r3, #2
 8011018:	b2da      	uxtb	r2, r3
 801101a:	4b05      	ldr	r3, [pc, #20]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 801101c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  &= ~(1 << BIT_1);
 801101e:	4b04      	ldr	r3, [pc, #16]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 8011020:	795b      	ldrb	r3, [r3, #5]
 8011022:	f023 0302 	bic.w	r3, r3, #2
 8011026:	b2da      	uxtb	r2, r3
 8011028:	4b01      	ldr	r3, [pc, #4]	; (8011030 <lcd_clear_vol_unit+0x26c>)
 801102a:	715a      	strb	r2, [r3, #5]
        break;
 801102c:	e103      	b.n	8011236 <lcd_clear_vol_unit+0x472>
 801102e:	bf00      	nop
 8011030:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011034:	4b84      	ldr	r3, [pc, #528]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011036:	7a9b      	ldrb	r3, [r3, #10]
 8011038:	f023 0308 	bic.w	r3, r3, #8
 801103c:	b2da      	uxtb	r2, r3
 801103e:	4b82      	ldr	r3, [pc, #520]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011040:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8011042:	4b81      	ldr	r3, [pc, #516]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011044:	7a9b      	ldrb	r3, [r3, #10]
 8011046:	f023 0310 	bic.w	r3, r3, #16
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b7e      	ldr	r3, [pc, #504]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801104e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011050:	4b7d      	ldr	r3, [pc, #500]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011052:	7bdb      	ldrb	r3, [r3, #15]
 8011054:	f023 0308 	bic.w	r3, r3, #8
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b7b      	ldr	r3, [pc, #492]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801105c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801105e:	4b7a      	ldr	r3, [pc, #488]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	f023 0310 	bic.w	r3, r3, #16
 8011066:	b2da      	uxtb	r2, r3
 8011068:	4b77      	ldr	r3, [pc, #476]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801106a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 801106c:	4b76      	ldr	r3, [pc, #472]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801106e:	795b      	ldrb	r3, [r3, #5]
 8011070:	f023 0304 	bic.w	r3, r3, #4
 8011074:	b2da      	uxtb	r2, r3
 8011076:	4b74      	ldr	r3, [pc, #464]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011078:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801107a:	4b73      	ldr	r3, [pc, #460]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	f023 0308 	bic.w	r3, r3, #8
 8011082:	b2da      	uxtb	r2, r3
 8011084:	4b70      	ldr	r3, [pc, #448]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011086:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011088:	4b6f      	ldr	r3, [pc, #444]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801108a:	795b      	ldrb	r3, [r3, #5]
 801108c:	f023 0320 	bic.w	r3, r3, #32
 8011090:	b2da      	uxtb	r2, r3
 8011092:	4b6d      	ldr	r3, [pc, #436]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011094:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011096:	4b6c      	ldr	r3, [pc, #432]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011098:	7b9b      	ldrb	r3, [r3, #14]
 801109a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801109e:	b2da      	uxtb	r2, r3
 80110a0:	4b69      	ldr	r3, [pc, #420]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110a2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80110a4:	4b68      	ldr	r3, [pc, #416]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110a6:	7bdb      	ldrb	r3, [r3, #15]
 80110a8:	f023 0302 	bic.w	r3, r3, #2
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	4b66      	ldr	r3, [pc, #408]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110b0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 80110b2:	4b65      	ldr	r3, [pc, #404]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110b4:	7cdb      	ldrb	r3, [r3, #19]
 80110b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110ba:	b2da      	uxtb	r2, r3
 80110bc:	4b62      	ldr	r3, [pc, #392]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110be:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80110c0:	4b61      	ldr	r3, [pc, #388]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110c2:	7cdb      	ldrb	r3, [r3, #19]
 80110c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	4b5f      	ldr	r3, [pc, #380]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110cc:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80110ce:	4b5e      	ldr	r3, [pc, #376]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f023 0301 	bic.w	r3, r3, #1
 80110d6:	b2da      	uxtb	r2, r3
 80110d8:	4b5b      	ldr	r3, [pc, #364]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110da:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80110dc:	4b5a      	ldr	r3, [pc, #360]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	f023 0302 	bic.w	r3, r3, #2
 80110e4:	b2da      	uxtb	r2, r3
 80110e6:	4b58      	ldr	r3, [pc, #352]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110e8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 80110ea:	4b57      	ldr	r3, [pc, #348]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110ec:	795b      	ldrb	r3, [r3, #5]
 80110ee:	f023 0301 	bic.w	r3, r3, #1
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	4b54      	ldr	r3, [pc, #336]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110f6:	715a      	strb	r2, [r3, #5]
        break;
 80110f8:	e09d      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 80110fa:	4b53      	ldr	r3, [pc, #332]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80110fc:	7a9b      	ldrb	r3, [r3, #10]
 80110fe:	f023 0308 	bic.w	r3, r3, #8
 8011102:	b2da      	uxtb	r2, r3
 8011104:	4b50      	ldr	r3, [pc, #320]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011106:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011108:	4b4f      	ldr	r3, [pc, #316]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801110a:	7bdb      	ldrb	r3, [r3, #15]
 801110c:	f023 0320 	bic.w	r3, r3, #32
 8011110:	b2da      	uxtb	r2, r3
 8011112:	4b4d      	ldr	r3, [pc, #308]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011114:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011116:	4b4c      	ldr	r3, [pc, #304]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f023 0310 	bic.w	r3, r3, #16
 801111e:	b2da      	uxtb	r2, r3
 8011120:	4b49      	ldr	r3, [pc, #292]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011122:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011124:	4b48      	ldr	r3, [pc, #288]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	f023 0320 	bic.w	r3, r3, #32
 801112c:	b2da      	uxtb	r2, r3
 801112e:	4b46      	ldr	r3, [pc, #280]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011130:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011132:	4b45      	ldr	r3, [pc, #276]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	f023 0308 	bic.w	r3, r3, #8
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b42      	ldr	r3, [pc, #264]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801113e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011140:	4b41      	ldr	r3, [pc, #260]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011142:	795b      	ldrb	r3, [r3, #5]
 8011144:	f023 0320 	bic.w	r3, r3, #32
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b3f      	ldr	r3, [pc, #252]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801114c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801114e:	4b3e      	ldr	r3, [pc, #248]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011150:	7bdb      	ldrb	r3, [r3, #15]
 8011152:	f023 0302 	bic.w	r3, r3, #2
 8011156:	b2da      	uxtb	r2, r3
 8011158:	4b3b      	ldr	r3, [pc, #236]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801115a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801115c:	4b3a      	ldr	r3, [pc, #232]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f023 0302 	bic.w	r3, r3, #2
 8011164:	b2da      	uxtb	r2, r3
 8011166:	4b38      	ldr	r3, [pc, #224]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011168:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801116a:	4b37      	ldr	r3, [pc, #220]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801116c:	795b      	ldrb	r3, [r3, #5]
 801116e:	f023 0302 	bic.w	r3, r3, #2
 8011172:	b2da      	uxtb	r2, r3
 8011174:	4b34      	ldr	r3, [pc, #208]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011176:	715a      	strb	r2, [r3, #5]
        break;
 8011178:	e05d      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801117a:	4b33      	ldr	r3, [pc, #204]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801117c:	7a9b      	ldrb	r3, [r3, #10]
 801117e:	f023 0308 	bic.w	r3, r3, #8
 8011182:	b2da      	uxtb	r2, r3
 8011184:	4b30      	ldr	r3, [pc, #192]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011186:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011188:	4b2f      	ldr	r3, [pc, #188]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801118a:	7bdb      	ldrb	r3, [r3, #15]
 801118c:	f023 0320 	bic.w	r3, r3, #32
 8011190:	b2da      	uxtb	r2, r3
 8011192:	4b2d      	ldr	r3, [pc, #180]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011194:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011196:	4b2c      	ldr	r3, [pc, #176]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011198:	7bdb      	ldrb	r3, [r3, #15]
 801119a:	f023 0308 	bic.w	r3, r3, #8
 801119e:	b2da      	uxtb	r2, r3
 80111a0:	4b29      	ldr	r3, [pc, #164]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111a2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80111a4:	4b28      	ldr	r3, [pc, #160]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111a6:	7bdb      	ldrb	r3, [r3, #15]
 80111a8:	f023 0304 	bic.w	r3, r3, #4
 80111ac:	b2da      	uxtb	r2, r3
 80111ae:	4b26      	ldr	r3, [pc, #152]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111b0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80111b2:	4b25      	ldr	r3, [pc, #148]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	f023 0310 	bic.w	r3, r3, #16
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	4b22      	ldr	r3, [pc, #136]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111be:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80111c0:	4b21      	ldr	r3, [pc, #132]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111c2:	7b9b      	ldrb	r3, [r3, #14]
 80111c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b1f      	ldr	r3, [pc, #124]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111cc:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80111ce:	4b1e      	ldr	r3, [pc, #120]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111d0:	7bdb      	ldrb	r3, [r3, #15]
 80111d2:	f023 0302 	bic.w	r3, r3, #2
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	4b1b      	ldr	r3, [pc, #108]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111da:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80111dc:	4b1a      	ldr	r3, [pc, #104]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	f023 0302 	bic.w	r3, r3, #2
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	4b18      	ldr	r3, [pc, #96]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111e8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80111ea:	4b17      	ldr	r3, [pc, #92]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111ec:	795b      	ldrb	r3, [r3, #5]
 80111ee:	f023 0302 	bic.w	r3, r3, #2
 80111f2:	b2da      	uxtb	r2, r3
 80111f4:	4b14      	ldr	r3, [pc, #80]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111f6:	715a      	strb	r2, [r3, #5]
        break;
 80111f8:	e01d      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80111fa:	4b13      	ldr	r3, [pc, #76]	; (8011248 <lcd_clear_vol_unit+0x484>)
 80111fc:	7bdb      	ldrb	r3, [r3, #15]
 80111fe:	f023 0304 	bic.w	r3, r3, #4
 8011202:	b2da      	uxtb	r2, r3
 8011204:	4b10      	ldr	r3, [pc, #64]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011206:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011208:	4b0f      	ldr	r3, [pc, #60]	; (8011248 <lcd_clear_vol_unit+0x484>)
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	f023 0310 	bic.w	r3, r3, #16
 8011210:	b2da      	uxtb	r2, r3
 8011212:	4b0d      	ldr	r3, [pc, #52]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011214:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011216:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011218:	7cdb      	ldrb	r3, [r3, #19]
 801121a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801121e:	b2da      	uxtb	r2, r3
 8011220:	4b09      	ldr	r3, [pc, #36]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011222:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011224:	4b08      	ldr	r3, [pc, #32]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	f023 0301 	bic.w	r3, r3, #1
 801122c:	b2da      	uxtb	r2, r3
 801122e:	4b06      	ldr	r3, [pc, #24]	; (8011248 <lcd_clear_vol_unit+0x484>)
 8011230:	701a      	strb	r2, [r3, #0]
        break;
 8011232:	e000      	b.n	8011236 <lcd_clear_vol_unit+0x472>
        default:
        break;
 8011234:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011236:	79bb      	ldrb	r3, [r7, #6]
 8011238:	4618      	mov	r0, r3
 801123a:	f001 f9bb 	bl	80125b4 <pcf8553_blink>
}
 801123e:	bf00      	nop
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	20001da0 	.word	0x20001da0

0801124c <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 801124c:	b580      	push	{r7, lr}
 801124e:	af00      	add	r7, sp, #0
    pcf8553_init();
 8011250:	f001 fa22 	bl	8012698 <pcf8553_init>
}
 8011254:	bf00      	nop
 8011256:	bd80      	pop	{r7, pc}

08011258 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	4603      	mov	r3, r0
 8011260:	71fb      	strb	r3, [r7, #7]
 8011262:	460b      	mov	r3, r1
 8011264:	71bb      	strb	r3, [r7, #6]
 8011266:	4613      	mov	r3, r2
 8011268:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 801126a:	797b      	ldrb	r3, [r7, #5]
 801126c:	3301      	adds	r3, #1
 801126e:	b2da      	uxtb	r2, r3
 8011270:	4bde      	ldr	r3, [pc, #888]	; (80115ec <lcd_put_char+0x394>)
 8011272:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if(in_configuration == 0)
 8011274:	4bde      	ldr	r3, [pc, #888]	; (80115f0 <lcd_put_char+0x398>)
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10a      	bne.n	8011292 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 801127c:	797a      	ldrb	r2, [r7, #5]
 801127e:	79bb      	ldrb	r3, [r7, #6]
 8011280:	49dc      	ldr	r1, [pc, #880]	; (80115f4 <lcd_put_char+0x39c>)
 8011282:	00d2      	lsls	r2, r2, #3
 8011284:	440a      	add	r2, r1
 8011286:	4413      	add	r3, r2
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	79fa      	ldrb	r2, [r7, #7]
 801128c:	429a      	cmp	r2, r3
 801128e:	f000 81d6 	beq.w	801163e <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8011292:	797a      	ldrb	r2, [r7, #5]
 8011294:	79bb      	ldrb	r3, [r7, #6]
 8011296:	49d7      	ldr	r1, [pc, #860]	; (80115f4 <lcd_put_char+0x39c>)
 8011298:	00d2      	lsls	r2, r2, #3
 801129a:	440a      	add	r2, r1
 801129c:	4413      	add	r3, r2
 801129e:	79fa      	ldrb	r2, [r7, #7]
 80112a0:	701a      	strb	r2, [r3, #0]

    switch (row)
 80112a2:	797b      	ldrb	r3, [r7, #5]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d002      	beq.n	80112ae <lcd_put_char+0x56>
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d008      	beq.n	80112be <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 80112ac:	e1ce      	b.n	801164c <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 80112ae:	79bb      	ldrb	r3, [r7, #6]
 80112b0:	2b07      	cmp	r3, #7
 80112b2:	f200 81c6 	bhi.w	8011642 <lcd_put_char+0x3ea>
                g_col = col;
 80112b6:	4ad0      	ldr	r2, [pc, #832]	; (80115f8 <lcd_put_char+0x3a0>)
 80112b8:	79bb      	ldrb	r3, [r7, #6]
 80112ba:	7013      	strb	r3, [r2, #0]
        break;
 80112bc:	e00a      	b.n	80112d4 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 80112be:	79bb      	ldrb	r3, [r7, #6]
 80112c0:	2b06      	cmp	r3, #6
 80112c2:	f200 81c0 	bhi.w	8011646 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 80112c6:	79bb      	ldrb	r3, [r7, #6]
 80112c8:	f1c3 0306 	rsb	r3, r3, #6
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	4bca      	ldr	r3, [pc, #808]	; (80115f8 <lcd_put_char+0x3a0>)
 80112d0:	701a      	strb	r2, [r3, #0]
        break;
 80112d2:	bf00      	nop
        break;
    }

    switch (c)
 80112d4:	79fb      	ldrb	r3, [r7, #7]
 80112d6:	3b20      	subs	r3, #32
 80112d8:	2b19      	cmp	r3, #25
 80112da:	f200 81b6 	bhi.w	801164a <lcd_put_char+0x3f2>
 80112de:	a201      	add	r2, pc, #4	; (adr r2, 80112e4 <lcd_put_char+0x8c>)
 80112e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e4:	0801134d 	.word	0x0801134d
 80112e8:	0801164b 	.word	0x0801164b
 80112ec:	0801164b 	.word	0x0801164b
 80112f0:	0801164b 	.word	0x0801164b
 80112f4:	0801164b 	.word	0x0801164b
 80112f8:	0801164b 	.word	0x0801164b
 80112fc:	0801164b 	.word	0x0801164b
 8011300:	0801164b 	.word	0x0801164b
 8011304:	0801164b 	.word	0x0801164b
 8011308:	0801164b 	.word	0x0801164b
 801130c:	0801164b 	.word	0x0801164b
 8011310:	0801164b 	.word	0x0801164b
 8011314:	0801164b 	.word	0x0801164b
 8011318:	0801164b 	.word	0x0801164b
 801131c:	0801138f 	.word	0x0801138f
 8011320:	0801164b 	.word	0x0801164b
 8011324:	08011399 	.word	0x08011399
 8011328:	080113db 	.word	0x080113db
 801132c:	0801141d 	.word	0x0801141d
 8011330:	0801145f 	.word	0x0801145f
 8011334:	080114a1 	.word	0x080114a1
 8011338:	080114e3 	.word	0x080114e3
 801133c:	08011525 	.word	0x08011525
 8011340:	08011567 	.word	0x08011567
 8011344:	080115a9 	.word	0x080115a9
 8011348:	080115fd 	.word	0x080115fd
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 801134c:	2100      	movs	r1, #0
 801134e:	2000      	movs	r0, #0
 8011350:	f001 f836 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011354:	2100      	movs	r1, #0
 8011356:	2001      	movs	r0, #1
 8011358:	f001 f832 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801135c:	2100      	movs	r1, #0
 801135e:	2002      	movs	r0, #2
 8011360:	f001 f82e 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011364:	2100      	movs	r1, #0
 8011366:	2003      	movs	r0, #3
 8011368:	f001 f82a 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801136c:	2100      	movs	r1, #0
 801136e:	2004      	movs	r0, #4
 8011370:	f001 f826 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011374:	2100      	movs	r1, #0
 8011376:	2005      	movs	r0, #5
 8011378:	f001 f822 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801137c:	2100      	movs	r1, #0
 801137e:	2006      	movs	r0, #6
 8011380:	f001 f81e 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011384:	2100      	movs	r1, #0
 8011386:	2007      	movs	r0, #7
 8011388:	f001 f81a 	bl	80123c0 <lcd_write_line>
        break;
 801138c:	e15e      	b.n	801164c <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 801138e:	2101      	movs	r1, #1
 8011390:	2007      	movs	r0, #7
 8011392:	f001 f815 	bl	80123c0 <lcd_write_line>
        break;
 8011396:	e159      	b.n	801164c <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 8011398:	2101      	movs	r1, #1
 801139a:	2000      	movs	r0, #0
 801139c:	f001 f810 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80113a0:	2101      	movs	r1, #1
 80113a2:	2001      	movs	r0, #1
 80113a4:	f001 f80c 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80113a8:	2101      	movs	r1, #1
 80113aa:	2002      	movs	r0, #2
 80113ac:	f001 f808 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80113b0:	2100      	movs	r1, #0
 80113b2:	2003      	movs	r0, #3
 80113b4:	f001 f804 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80113b8:	2101      	movs	r1, #1
 80113ba:	2004      	movs	r0, #4
 80113bc:	f001 f800 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80113c0:	2101      	movs	r1, #1
 80113c2:	2005      	movs	r0, #5
 80113c4:	f000 fffc 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80113c8:	2101      	movs	r1, #1
 80113ca:	2006      	movs	r0, #6
 80113cc:	f000 fff8 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113d0:	2100      	movs	r1, #0
 80113d2:	2007      	movs	r0, #7
 80113d4:	f000 fff4 	bl	80123c0 <lcd_write_line>
        break;
 80113d8:	e138      	b.n	801164c <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80113da:	2100      	movs	r1, #0
 80113dc:	2000      	movs	r0, #0
 80113de:	f000 ffef 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80113e2:	2100      	movs	r1, #0
 80113e4:	2001      	movs	r0, #1
 80113e6:	f000 ffeb 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80113ea:	2101      	movs	r1, #1
 80113ec:	2002      	movs	r0, #2
 80113ee:	f000 ffe7 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80113f2:	2100      	movs	r1, #0
 80113f4:	2003      	movs	r0, #3
 80113f6:	f000 ffe3 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80113fa:	2100      	movs	r1, #0
 80113fc:	2004      	movs	r0, #4
 80113fe:	f000 ffdf 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011402:	2101      	movs	r1, #1
 8011404:	2005      	movs	r0, #5
 8011406:	f000 ffdb 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801140a:	2100      	movs	r1, #0
 801140c:	2006      	movs	r0, #6
 801140e:	f000 ffd7 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011412:	2100      	movs	r1, #0
 8011414:	2007      	movs	r0, #7
 8011416:	f000 ffd3 	bl	80123c0 <lcd_write_line>
        break;
 801141a:	e117      	b.n	801164c <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 801141c:	2101      	movs	r1, #1
 801141e:	2000      	movs	r0, #0
 8011420:	f000 ffce 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011424:	2101      	movs	r1, #1
 8011426:	2001      	movs	r0, #1
 8011428:	f000 ffca 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801142c:	2100      	movs	r1, #0
 801142e:	2002      	movs	r0, #2
 8011430:	f000 ffc6 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011434:	2101      	movs	r1, #1
 8011436:	2003      	movs	r0, #3
 8011438:	f000 ffc2 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801143c:	2100      	movs	r1, #0
 801143e:	2004      	movs	r0, #4
 8011440:	f000 ffbe 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011444:	2101      	movs	r1, #1
 8011446:	2005      	movs	r0, #5
 8011448:	f000 ffba 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801144c:	2101      	movs	r1, #1
 801144e:	2006      	movs	r0, #6
 8011450:	f000 ffb6 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011454:	2100      	movs	r1, #0
 8011456:	2007      	movs	r0, #7
 8011458:	f000 ffb2 	bl	80123c0 <lcd_write_line>
        break;
 801145c:	e0f6      	b.n	801164c <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 801145e:	2101      	movs	r1, #1
 8011460:	2000      	movs	r0, #0
 8011462:	f000 ffad 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011466:	2100      	movs	r1, #0
 8011468:	2001      	movs	r0, #1
 801146a:	f000 ffa9 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801146e:	2101      	movs	r1, #1
 8011470:	2002      	movs	r0, #2
 8011472:	f000 ffa5 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011476:	2101      	movs	r1, #1
 8011478:	2003      	movs	r0, #3
 801147a:	f000 ffa1 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801147e:	2100      	movs	r1, #0
 8011480:	2004      	movs	r0, #4
 8011482:	f000 ff9d 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011486:	2101      	movs	r1, #1
 8011488:	2005      	movs	r0, #5
 801148a:	f000 ff99 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801148e:	2101      	movs	r1, #1
 8011490:	2006      	movs	r0, #6
 8011492:	f000 ff95 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011496:	2100      	movs	r1, #0
 8011498:	2007      	movs	r0, #7
 801149a:	f000 ff91 	bl	80123c0 <lcd_write_line>
        break;
 801149e:	e0d5      	b.n	801164c <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 80114a0:	2100      	movs	r1, #0
 80114a2:	2000      	movs	r0, #0
 80114a4:	f000 ff8c 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80114a8:	2100      	movs	r1, #0
 80114aa:	2001      	movs	r0, #1
 80114ac:	f000 ff88 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80114b0:	2101      	movs	r1, #1
 80114b2:	2002      	movs	r0, #2
 80114b4:	f000 ff84 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80114b8:	2101      	movs	r1, #1
 80114ba:	2003      	movs	r0, #3
 80114bc:	f000 ff80 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80114c0:	2101      	movs	r1, #1
 80114c2:	2004      	movs	r0, #4
 80114c4:	f000 ff7c 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80114c8:	2101      	movs	r1, #1
 80114ca:	2005      	movs	r0, #5
 80114cc:	f000 ff78 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80114d0:	2100      	movs	r1, #0
 80114d2:	2006      	movs	r0, #6
 80114d4:	f000 ff74 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114d8:	2100      	movs	r1, #0
 80114da:	2007      	movs	r0, #7
 80114dc:	f000 ff70 	bl	80123c0 <lcd_write_line>
        break;
 80114e0:	e0b4      	b.n	801164c <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80114e2:	2101      	movs	r1, #1
 80114e4:	2000      	movs	r0, #0
 80114e6:	f000 ff6b 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80114ea:	2100      	movs	r1, #0
 80114ec:	2001      	movs	r0, #1
 80114ee:	f000 ff67 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80114f2:	2101      	movs	r1, #1
 80114f4:	2002      	movs	r0, #2
 80114f6:	f000 ff63 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80114fa:	2101      	movs	r1, #1
 80114fc:	2003      	movs	r0, #3
 80114fe:	f000 ff5f 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011502:	2101      	movs	r1, #1
 8011504:	2004      	movs	r0, #4
 8011506:	f000 ff5b 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801150a:	2100      	movs	r1, #0
 801150c:	2005      	movs	r0, #5
 801150e:	f000 ff57 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011512:	2101      	movs	r1, #1
 8011514:	2006      	movs	r0, #6
 8011516:	f000 ff53 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801151a:	2100      	movs	r1, #0
 801151c:	2007      	movs	r0, #7
 801151e:	f000 ff4f 	bl	80123c0 <lcd_write_line>
        break;
 8011522:	e093      	b.n	801164c <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011524:	2101      	movs	r1, #1
 8011526:	2000      	movs	r0, #0
 8011528:	f000 ff4a 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 801152c:	2101      	movs	r1, #1
 801152e:	2001      	movs	r0, #1
 8011530:	f000 ff46 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011534:	2101      	movs	r1, #1
 8011536:	2002      	movs	r0, #2
 8011538:	f000 ff42 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801153c:	2101      	movs	r1, #1
 801153e:	2003      	movs	r0, #3
 8011540:	f000 ff3e 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011544:	2101      	movs	r1, #1
 8011546:	2004      	movs	r0, #4
 8011548:	f000 ff3a 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801154c:	2100      	movs	r1, #0
 801154e:	2005      	movs	r0, #5
 8011550:	f000 ff36 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011554:	2101      	movs	r1, #1
 8011556:	2006      	movs	r0, #6
 8011558:	f000 ff32 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801155c:	2100      	movs	r1, #0
 801155e:	2007      	movs	r0, #7
 8011560:	f000 ff2e 	bl	80123c0 <lcd_write_line>
        break;
 8011564:	e072      	b.n	801164c <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011566:	2100      	movs	r1, #0
 8011568:	2000      	movs	r0, #0
 801156a:	f000 ff29 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801156e:	2100      	movs	r1, #0
 8011570:	2001      	movs	r0, #1
 8011572:	f000 ff25 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011576:	2101      	movs	r1, #1
 8011578:	2002      	movs	r0, #2
 801157a:	f000 ff21 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801157e:	2100      	movs	r1, #0
 8011580:	2003      	movs	r0, #3
 8011582:	f000 ff1d 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011586:	2100      	movs	r1, #0
 8011588:	2004      	movs	r0, #4
 801158a:	f000 ff19 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801158e:	2101      	movs	r1, #1
 8011590:	2005      	movs	r0, #5
 8011592:	f000 ff15 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011596:	2101      	movs	r1, #1
 8011598:	2006      	movs	r0, #6
 801159a:	f000 ff11 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801159e:	2100      	movs	r1, #0
 80115a0:	2007      	movs	r0, #7
 80115a2:	f000 ff0d 	bl	80123c0 <lcd_write_line>
        break;
 80115a6:	e051      	b.n	801164c <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 80115a8:	2101      	movs	r1, #1
 80115aa:	2000      	movs	r0, #0
 80115ac:	f000 ff08 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80115b0:	2101      	movs	r1, #1
 80115b2:	2001      	movs	r0, #1
 80115b4:	f000 ff04 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80115b8:	2101      	movs	r1, #1
 80115ba:	2002      	movs	r0, #2
 80115bc:	f000 ff00 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80115c0:	2101      	movs	r1, #1
 80115c2:	2003      	movs	r0, #3
 80115c4:	f000 fefc 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80115c8:	2101      	movs	r1, #1
 80115ca:	2004      	movs	r0, #4
 80115cc:	f000 fef8 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80115d0:	2101      	movs	r1, #1
 80115d2:	2005      	movs	r0, #5
 80115d4:	f000 fef4 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80115d8:	2101      	movs	r1, #1
 80115da:	2006      	movs	r0, #6
 80115dc:	f000 fef0 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80115e0:	2100      	movs	r1, #0
 80115e2:	2007      	movs	r0, #7
 80115e4:	f000 feec 	bl	80123c0 <lcd_write_line>
        break;
 80115e8:	e030      	b.n	801164c <lcd_put_char+0x3f4>
 80115ea:	bf00      	nop
 80115ec:	20001d0d 	.word	0x20001d0d
 80115f0:	20001dbc 	.word	0x20001dbc
 80115f4:	20001cfc 	.word	0x20001cfc
 80115f8:	20001d0c 	.word	0x20001d0c
        case '9':
            lcd_write_line(SEG_A, 0);
 80115fc:	2100      	movs	r1, #0
 80115fe:	2000      	movs	r0, #0
 8011600:	f000 fede 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011604:	2100      	movs	r1, #0
 8011606:	2001      	movs	r0, #1
 8011608:	f000 feda 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801160c:	2101      	movs	r1, #1
 801160e:	2002      	movs	r0, #2
 8011610:	f000 fed6 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011614:	2101      	movs	r1, #1
 8011616:	2003      	movs	r0, #3
 8011618:	f000 fed2 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801161c:	2101      	movs	r1, #1
 801161e:	2004      	movs	r0, #4
 8011620:	f000 fece 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011624:	2101      	movs	r1, #1
 8011626:	2005      	movs	r0, #5
 8011628:	f000 feca 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801162c:	2101      	movs	r1, #1
 801162e:	2006      	movs	r0, #6
 8011630:	f000 fec6 	bl	80123c0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011634:	2100      	movs	r1, #0
 8011636:	2007      	movs	r0, #7
 8011638:	f000 fec2 	bl	80123c0 <lcd_write_line>
        break;
 801163c:	e006      	b.n	801164c <lcd_put_char+0x3f4>
            return;
 801163e:	bf00      	nop
 8011640:	e004      	b.n	801164c <lcd_put_char+0x3f4>
                return;
 8011642:	bf00      	nop
 8011644:	e002      	b.n	801164c <lcd_put_char+0x3f4>
                return;
 8011646:	bf00      	nop
 8011648:	e000      	b.n	801164c <lcd_put_char+0x3f4>
        default:
        break;
 801164a:	bf00      	nop
    }
}
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop

08011654 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 8011654:	b580      	push	{r7, lr}
 8011656:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011658:	f000 fff2 	bl	8012640 <pcf8553_dump>
}
 801165c:	bf00      	nop
 801165e:	bd80      	pop	{r7, pc}

08011660 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	4603      	mov	r3, r0
 8011668:	460a      	mov	r2, r1
 801166a:	71fb      	strb	r3, [r7, #7]
 801166c:	4613      	mov	r3, r2
 801166e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011670:	79fb      	ldrb	r3, [r7, #7]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d14c      	bne.n	8011710 <lcd_set_point+0xb0>
    {
        switch (point)
 8011676:	79bb      	ldrb	r3, [r7, #6]
 8011678:	2b06      	cmp	r3, #6
 801167a:	f200 808f 	bhi.w	801179c <lcd_set_point+0x13c>
 801167e:	a201      	add	r2, pc, #4	; (adr r2, 8011684 <lcd_set_point+0x24>)
 8011680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011684:	080116a1 	.word	0x080116a1
 8011688:	080116b1 	.word	0x080116b1
 801168c:	080116c1 	.word	0x080116c1
 8011690:	080116d1 	.word	0x080116d1
 8011694:	080116e1 	.word	0x080116e1
 8011698:	080116f1 	.word	0x080116f1
 801169c:	08011701 	.word	0x08011701
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 80116a0:	4b44      	ldr	r3, [pc, #272]	; (80117b4 <lcd_set_point+0x154>)
 80116a2:	79db      	ldrb	r3, [r3, #7]
 80116a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b42      	ldr	r3, [pc, #264]	; (80117b4 <lcd_set_point+0x154>)
 80116ac:	71da      	strb	r2, [r3, #7]
            break;
 80116ae:	e07a      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 80116b0:	4b40      	ldr	r3, [pc, #256]	; (80117b4 <lcd_set_point+0x154>)
 80116b2:	7a1b      	ldrb	r3, [r3, #8]
 80116b4:	f043 0302 	orr.w	r3, r3, #2
 80116b8:	b2da      	uxtb	r2, r3
 80116ba:	4b3e      	ldr	r3, [pc, #248]	; (80117b4 <lcd_set_point+0x154>)
 80116bc:	721a      	strb	r2, [r3, #8]
            break;
 80116be:	e072      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 80116c0:	4b3c      	ldr	r3, [pc, #240]	; (80117b4 <lcd_set_point+0x154>)
 80116c2:	7a1b      	ldrb	r3, [r3, #8]
 80116c4:	f043 0308 	orr.w	r3, r3, #8
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	4b3a      	ldr	r3, [pc, #232]	; (80117b4 <lcd_set_point+0x154>)
 80116cc:	721a      	strb	r2, [r3, #8]
            break;
 80116ce:	e06a      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80116d0:	4b38      	ldr	r3, [pc, #224]	; (80117b4 <lcd_set_point+0x154>)
 80116d2:	7a1b      	ldrb	r3, [r3, #8]
 80116d4:	f043 0320 	orr.w	r3, r3, #32
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	4b36      	ldr	r3, [pc, #216]	; (80117b4 <lcd_set_point+0x154>)
 80116dc:	721a      	strb	r2, [r3, #8]
            break;
 80116de:	e062      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80116e0:	4b34      	ldr	r3, [pc, #208]	; (80117b4 <lcd_set_point+0x154>)
 80116e2:	7a1b      	ldrb	r3, [r3, #8]
 80116e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116e8:	b2da      	uxtb	r2, r3
 80116ea:	4b32      	ldr	r3, [pc, #200]	; (80117b4 <lcd_set_point+0x154>)
 80116ec:	721a      	strb	r2, [r3, #8]
            break;
 80116ee:	e05a      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 80116f0:	4b30      	ldr	r3, [pc, #192]	; (80117b4 <lcd_set_point+0x154>)
 80116f2:	7a5b      	ldrb	r3, [r3, #9]
 80116f4:	f043 0302 	orr.w	r3, r3, #2
 80116f8:	b2da      	uxtb	r2, r3
 80116fa:	4b2e      	ldr	r3, [pc, #184]	; (80117b4 <lcd_set_point+0x154>)
 80116fc:	725a      	strb	r2, [r3, #9]
            break;
 80116fe:	e052      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011700:	4b2c      	ldr	r3, [pc, #176]	; (80117b4 <lcd_set_point+0x154>)
 8011702:	7a5b      	ldrb	r3, [r3, #9]
 8011704:	f043 0308 	orr.w	r3, r3, #8
 8011708:	b2da      	uxtb	r2, r3
 801170a:	4b2a      	ldr	r3, [pc, #168]	; (80117b4 <lcd_set_point+0x154>)
 801170c:	725a      	strb	r2, [r3, #9]
            break;
 801170e:	e04a      	b.n	80117a6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011710:	79fb      	ldrb	r3, [r7, #7]
 8011712:	2b01      	cmp	r3, #1
 8011714:	d144      	bne.n	80117a0 <lcd_set_point+0x140>
    {
        switch (point)
 8011716:	79bb      	ldrb	r3, [r7, #6]
 8011718:	2b05      	cmp	r3, #5
 801171a:	d843      	bhi.n	80117a4 <lcd_set_point+0x144>
 801171c:	a201      	add	r2, pc, #4	; (adr r2, 8011724 <lcd_set_point+0xc4>)
 801171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011722:	bf00      	nop
 8011724:	0801173d 	.word	0x0801173d
 8011728:	0801174d 	.word	0x0801174d
 801172c:	0801175d 	.word	0x0801175d
 8011730:	0801176d 	.word	0x0801176d
 8011734:	0801177d 	.word	0x0801177d
 8011738:	0801178d 	.word	0x0801178d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 801173c:	4b1d      	ldr	r3, [pc, #116]	; (80117b4 <lcd_set_point+0x154>)
 801173e:	79db      	ldrb	r3, [r3, #7]
 8011740:	f043 0304 	orr.w	r3, r3, #4
 8011744:	b2da      	uxtb	r2, r3
 8011746:	4b1b      	ldr	r3, [pc, #108]	; (80117b4 <lcd_set_point+0x154>)
 8011748:	71da      	strb	r2, [r3, #7]
            break;
 801174a:	e02c      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 801174c:	4b19      	ldr	r3, [pc, #100]	; (80117b4 <lcd_set_point+0x154>)
 801174e:	79db      	ldrb	r3, [r3, #7]
 8011750:	f043 0301 	orr.w	r3, r3, #1
 8011754:	b2da      	uxtb	r2, r3
 8011756:	4b17      	ldr	r3, [pc, #92]	; (80117b4 <lcd_set_point+0x154>)
 8011758:	71da      	strb	r2, [r3, #7]
            break;
 801175a:	e024      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 801175c:	4b15      	ldr	r3, [pc, #84]	; (80117b4 <lcd_set_point+0x154>)
 801175e:	799b      	ldrb	r3, [r3, #6]
 8011760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011764:	b2da      	uxtb	r2, r3
 8011766:	4b13      	ldr	r3, [pc, #76]	; (80117b4 <lcd_set_point+0x154>)
 8011768:	719a      	strb	r2, [r3, #6]
            break;
 801176a:	e01c      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 801176c:	4b11      	ldr	r3, [pc, #68]	; (80117b4 <lcd_set_point+0x154>)
 801176e:	799b      	ldrb	r3, [r3, #6]
 8011770:	f043 0310 	orr.w	r3, r3, #16
 8011774:	b2da      	uxtb	r2, r3
 8011776:	4b0f      	ldr	r3, [pc, #60]	; (80117b4 <lcd_set_point+0x154>)
 8011778:	719a      	strb	r2, [r3, #6]
            break;
 801177a:	e014      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 801177c:	4b0d      	ldr	r3, [pc, #52]	; (80117b4 <lcd_set_point+0x154>)
 801177e:	799b      	ldrb	r3, [r3, #6]
 8011780:	f043 0304 	orr.w	r3, r3, #4
 8011784:	b2da      	uxtb	r2, r3
 8011786:	4b0b      	ldr	r3, [pc, #44]	; (80117b4 <lcd_set_point+0x154>)
 8011788:	719a      	strb	r2, [r3, #6]
            break;
 801178a:	e00c      	b.n	80117a6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 801178c:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <lcd_set_point+0x154>)
 801178e:	799b      	ldrb	r3, [r3, #6]
 8011790:	f043 0301 	orr.w	r3, r3, #1
 8011794:	b2da      	uxtb	r2, r3
 8011796:	4b07      	ldr	r3, [pc, #28]	; (80117b4 <lcd_set_point+0x154>)
 8011798:	719a      	strb	r2, [r3, #6]
            break;
 801179a:	e004      	b.n	80117a6 <lcd_set_point+0x146>
            break;
 801179c:	bf00      	nop
 801179e:	e002      	b.n	80117a6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 80117a0:	bf00      	nop
 80117a2:	e000      	b.n	80117a6 <lcd_set_point+0x146>
            break;
 80117a4:	bf00      	nop
}
 80117a6:	bf00      	nop
 80117a8:	370c      	adds	r7, #12
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	20001da0 	.word	0x20001da0

080117b8 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	4603      	mov	r3, r0
 80117c0:	460a      	mov	r2, r1
 80117c2:	71fb      	strb	r3, [r7, #7]
 80117c4:	4613      	mov	r3, r2
 80117c6:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 80117c8:	79fb      	ldrb	r3, [r7, #7]
 80117ca:	2b16      	cmp	r3, #22
 80117cc:	f200 8366 	bhi.w	8011e9c <lcd_set_symbol+0x6e4>
 80117d0:	a201      	add	r2, pc, #4	; (adr r2, 80117d8 <lcd_set_symbol+0x20>)
 80117d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d6:	bf00      	nop
 80117d8:	08011845 	.word	0x08011845
 80117dc:	08011835 	.word	0x08011835
 80117e0:	08011865 	.word	0x08011865
 80117e4:	08011875 	.word	0x08011875
 80117e8:	08011855 	.word	0x08011855
 80117ec:	080118a5 	.word	0x080118a5
 80117f0:	08011895 	.word	0x08011895
 80117f4:	080118b5 	.word	0x080118b5
 80117f8:	08011885 	.word	0x08011885
 80117fc:	080118c5 	.word	0x080118c5
 8011800:	08011953 	.word	0x08011953
 8011804:	08011a81 	.word	0x08011a81
 8011808:	08011ac9 	.word	0x08011ac9
 801180c:	08011b57 	.word	0x08011b57
 8011810:	08011bbb 	.word	0x08011bbb
 8011814:	08011c1f 	.word	0x08011c1f
 8011818:	08011c83 	.word	0x08011c83
 801181c:	08011cbd 	.word	0x08011cbd
 8011820:	08011ce1 	.word	0x08011ce1
 8011824:	08011d29 	.word	0x08011d29
 8011828:	08011d71 	.word	0x08011d71
 801182c:	08011dab 	.word	0x08011dab
 8011830:	08011df3 	.word	0x08011df3
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011834:	4b91      	ldr	r3, [pc, #580]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011836:	789b      	ldrb	r3, [r3, #2]
 8011838:	f043 0320 	orr.w	r3, r3, #32
 801183c:	b2da      	uxtb	r2, r3
 801183e:	4b8f      	ldr	r3, [pc, #572]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011840:	709a      	strb	r2, [r3, #2]
        break;
 8011842:	e32c      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011844:	4b8d      	ldr	r3, [pc, #564]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011846:	79db      	ldrb	r3, [r3, #7]
 8011848:	f043 0320 	orr.w	r3, r3, #32
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b8b      	ldr	r3, [pc, #556]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011850:	71da      	strb	r2, [r3, #7]
        break;
 8011852:	e324      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011854:	4b89      	ldr	r3, [pc, #548]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011856:	7b1b      	ldrb	r3, [r3, #12]
 8011858:	f043 0320 	orr.w	r3, r3, #32
 801185c:	b2da      	uxtb	r2, r3
 801185e:	4b87      	ldr	r3, [pc, #540]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011860:	731a      	strb	r2, [r3, #12]
        break;
 8011862:	e31c      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011864:	4b85      	ldr	r3, [pc, #532]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011866:	7c5b      	ldrb	r3, [r3, #17]
 8011868:	f043 0320 	orr.w	r3, r3, #32
 801186c:	b2da      	uxtb	r2, r3
 801186e:	4b83      	ldr	r3, [pc, #524]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011870:	745a      	strb	r2, [r3, #17]
        break;
 8011872:	e314      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011874:	4b81      	ldr	r3, [pc, #516]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011876:	789b      	ldrb	r3, [r3, #2]
 8011878:	f043 0310 	orr.w	r3, r3, #16
 801187c:	b2da      	uxtb	r2, r3
 801187e:	4b7f      	ldr	r3, [pc, #508]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011880:	709a      	strb	r2, [r3, #2]
        break;
 8011882:	e30c      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011884:	4b7d      	ldr	r3, [pc, #500]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011886:	79db      	ldrb	r3, [r3, #7]
 8011888:	f043 0310 	orr.w	r3, r3, #16
 801188c:	b2da      	uxtb	r2, r3
 801188e:	4b7b      	ldr	r3, [pc, #492]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011890:	71da      	strb	r2, [r3, #7]
        break;
 8011892:	e304      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011894:	4b79      	ldr	r3, [pc, #484]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011896:	7b1b      	ldrb	r3, [r3, #12]
 8011898:	f043 0310 	orr.w	r3, r3, #16
 801189c:	b2da      	uxtb	r2, r3
 801189e:	4b77      	ldr	r3, [pc, #476]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118a0:	731a      	strb	r2, [r3, #12]
        break;
 80118a2:	e2fc      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 80118a4:	4b75      	ldr	r3, [pc, #468]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118a6:	7c5b      	ldrb	r3, [r3, #17]
 80118a8:	f043 0310 	orr.w	r3, r3, #16
 80118ac:	b2da      	uxtb	r2, r3
 80118ae:	4b73      	ldr	r3, [pc, #460]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118b0:	745a      	strb	r2, [r3, #17]
        break;
 80118b2:	e2f4      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 80118b4:	4b71      	ldr	r3, [pc, #452]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118b6:	7a9b      	ldrb	r3, [r3, #10]
 80118b8:	f043 0302 	orr.w	r3, r3, #2
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	4b6f      	ldr	r3, [pc, #444]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118c0:	729a      	strb	r2, [r3, #10]
        break;
 80118c2:	e2ec      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80118c4:	4b6d      	ldr	r3, [pc, #436]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118c6:	7bdb      	ldrb	r3, [r3, #15]
 80118c8:	f043 0320 	orr.w	r3, r3, #32
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	4b6b      	ldr	r3, [pc, #428]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118d0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80118d2:	4b6a      	ldr	r3, [pc, #424]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118d4:	7bdb      	ldrb	r3, [r3, #15]
 80118d6:	f043 0310 	orr.w	r3, r3, #16
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	4b67      	ldr	r3, [pc, #412]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118de:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80118e0:	4b66      	ldr	r3, [pc, #408]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	f043 0320 	orr.w	r3, r3, #32
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b64      	ldr	r3, [pc, #400]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118ec:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 80118ee:	4b63      	ldr	r3, [pc, #396]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	f043 0304 	orr.w	r3, r3, #4
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	4b60      	ldr	r3, [pc, #384]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118fa:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80118fc:	4b5f      	ldr	r3, [pc, #380]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80118fe:	7b9b      	ldrb	r3, [r3, #14]
 8011900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011904:	b2da      	uxtb	r2, r3
 8011906:	4b5d      	ldr	r3, [pc, #372]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011908:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801190a:	4b5c      	ldr	r3, [pc, #368]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801190c:	7bdb      	ldrb	r3, [r3, #15]
 801190e:	f043 0302 	orr.w	r3, r3, #2
 8011912:	b2da      	uxtb	r2, r3
 8011914:	4b59      	ldr	r3, [pc, #356]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011916:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011918:	4b58      	ldr	r3, [pc, #352]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801191a:	7cdb      	ldrb	r3, [r3, #19]
 801191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011920:	b2da      	uxtb	r2, r3
 8011922:	4b56      	ldr	r3, [pc, #344]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011924:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011926:	4b55      	ldr	r3, [pc, #340]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	f043 0301 	orr.w	r3, r3, #1
 801192e:	b2da      	uxtb	r2, r3
 8011930:	4b52      	ldr	r3, [pc, #328]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011932:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011934:	4b51      	ldr	r3, [pc, #324]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	f043 0302 	orr.w	r3, r3, #2
 801193c:	b2da      	uxtb	r2, r3
 801193e:	4b4f      	ldr	r3, [pc, #316]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011940:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011942:	4b4e      	ldr	r3, [pc, #312]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011944:	795b      	ldrb	r3, [r3, #5]
 8011946:	f043 0302 	orr.w	r3, r3, #2
 801194a:	b2da      	uxtb	r2, r3
 801194c:	4b4b      	ldr	r3, [pc, #300]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801194e:	715a      	strb	r2, [r3, #5]
        break;
 8011950:	e2a5      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011952:	4b4a      	ldr	r3, [pc, #296]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011954:	7b5b      	ldrb	r3, [r3, #13]
 8011956:	f043 0302 	orr.w	r3, r3, #2
 801195a:	b2da      	uxtb	r2, r3
 801195c:	4b47      	ldr	r3, [pc, #284]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801195e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011960:	4b46      	ldr	r3, [pc, #280]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011962:	7b5b      	ldrb	r3, [r3, #13]
 8011964:	f043 0301 	orr.w	r3, r3, #1
 8011968:	b2da      	uxtb	r2, r3
 801196a:	4b44      	ldr	r3, [pc, #272]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801196c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 801196e:	4b43      	ldr	r3, [pc, #268]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011970:	7c9b      	ldrb	r3, [r3, #18]
 8011972:	f043 0302 	orr.w	r3, r3, #2
 8011976:	b2da      	uxtb	r2, r3
 8011978:	4b40      	ldr	r3, [pc, #256]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801197a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 801197c:	4b3f      	ldr	r3, [pc, #252]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801197e:	7c9b      	ldrb	r3, [r3, #18]
 8011980:	f043 0301 	orr.w	r3, r3, #1
 8011984:	b2da      	uxtb	r2, r3
 8011986:	4b3d      	ldr	r3, [pc, #244]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011988:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 801198a:	4b3c      	ldr	r3, [pc, #240]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801198c:	78db      	ldrb	r3, [r3, #3]
 801198e:	f043 0301 	orr.w	r3, r3, #1
 8011992:	b2da      	uxtb	r2, r3
 8011994:	4b39      	ldr	r3, [pc, #228]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011996:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 8011998:	4b38      	ldr	r3, [pc, #224]	; (8011a7c <lcd_set_symbol+0x2c4>)
 801199a:	7b5b      	ldrb	r3, [r3, #13]
 801199c:	f043 0308 	orr.w	r3, r3, #8
 80119a0:	b2da      	uxtb	r2, r3
 80119a2:	4b36      	ldr	r3, [pc, #216]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119a4:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 80119a6:	4b35      	ldr	r3, [pc, #212]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119a8:	7b5b      	ldrb	r3, [r3, #13]
 80119aa:	f043 0304 	orr.w	r3, r3, #4
 80119ae:	b2da      	uxtb	r2, r3
 80119b0:	4b32      	ldr	r3, [pc, #200]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119b2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 80119b4:	4b31      	ldr	r3, [pc, #196]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119b6:	7c9b      	ldrb	r3, [r3, #18]
 80119b8:	f043 0308 	orr.w	r3, r3, #8
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	4b2f      	ldr	r3, [pc, #188]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119c0:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 80119c2:	4b2e      	ldr	r3, [pc, #184]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119c4:	7c9b      	ldrb	r3, [r3, #18]
 80119c6:	f043 0304 	orr.w	r3, r3, #4
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	4b2b      	ldr	r3, [pc, #172]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119ce:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 80119d0:	4b2a      	ldr	r3, [pc, #168]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119d2:	78db      	ldrb	r3, [r3, #3]
 80119d4:	f043 0304 	orr.w	r3, r3, #4
 80119d8:	b2da      	uxtb	r2, r3
 80119da:	4b28      	ldr	r3, [pc, #160]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119dc:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 80119de:	4b27      	ldr	r3, [pc, #156]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119e0:	78db      	ldrb	r3, [r3, #3]
 80119e2:	f043 0308 	orr.w	r3, r3, #8
 80119e6:	b2da      	uxtb	r2, r3
 80119e8:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119ea:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 80119ec:	4b23      	ldr	r3, [pc, #140]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119ee:	7b5b      	ldrb	r3, [r3, #13]
 80119f0:	f043 0320 	orr.w	r3, r3, #32
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	4b21      	ldr	r3, [pc, #132]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119f8:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 80119fa:	4b20      	ldr	r3, [pc, #128]	; (8011a7c <lcd_set_symbol+0x2c4>)
 80119fc:	7b5b      	ldrb	r3, [r3, #13]
 80119fe:	f043 0310 	orr.w	r3, r3, #16
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	4b1d      	ldr	r3, [pc, #116]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a06:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011a08:	4b1c      	ldr	r3, [pc, #112]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a0a:	7c9b      	ldrb	r3, [r3, #18]
 8011a0c:	f043 0310 	orr.w	r3, r3, #16
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	4b1a      	ldr	r3, [pc, #104]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a14:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011a16:	4b19      	ldr	r3, [pc, #100]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a18:	78db      	ldrb	r3, [r3, #3]
 8011a1a:	f043 0320 	orr.w	r3, r3, #32
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b16      	ldr	r3, [pc, #88]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a22:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011a24:	4b15      	ldr	r3, [pc, #84]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a26:	7a1b      	ldrb	r3, [r3, #8]
 8011a28:	f043 0310 	orr.w	r3, r3, #16
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b13      	ldr	r3, [pc, #76]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a30:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011a32:	4b12      	ldr	r3, [pc, #72]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a34:	7b5b      	ldrb	r3, [r3, #13]
 8011a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	4b0f      	ldr	r3, [pc, #60]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a3e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011a40:	4b0e      	ldr	r3, [pc, #56]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a42:	7b5b      	ldrb	r3, [r3, #13]
 8011a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	4b0c      	ldr	r3, [pc, #48]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a4c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 8011a4e:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a50:	7c9b      	ldrb	r3, [r3, #18]
 8011a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a56:	b2da      	uxtb	r2, r3
 8011a58:	4b08      	ldr	r3, [pc, #32]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a5a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011a5c:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a5e:	78db      	ldrb	r3, [r3, #3]
 8011a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a64:	b2da      	uxtb	r2, r3
 8011a66:	4b05      	ldr	r3, [pc, #20]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a68:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011a6a:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a6c:	7a1b      	ldrb	r3, [r3, #8]
 8011a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	4b01      	ldr	r3, [pc, #4]	; (8011a7c <lcd_set_symbol+0x2c4>)
 8011a76:	721a      	strb	r2, [r3, #8]

        break;
 8011a78:	e211      	b.n	8011e9e <lcd_set_symbol+0x6e6>
 8011a7a:	bf00      	nop
 8011a7c:	20001da0 	.word	0x20001da0
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011a80:	4b96      	ldr	r3, [pc, #600]	; (8011cdc <lcd_set_symbol+0x524>)
 8011a82:	7bdb      	ldrb	r3, [r3, #15]
 8011a84:	f043 0320 	orr.w	r3, r3, #32
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	4b94      	ldr	r3, [pc, #592]	; (8011cdc <lcd_set_symbol+0x524>)
 8011a8c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011a8e:	4b93      	ldr	r3, [pc, #588]	; (8011cdc <lcd_set_symbol+0x524>)
 8011a90:	7bdb      	ldrb	r3, [r3, #15]
 8011a92:	f043 0310 	orr.w	r3, r3, #16
 8011a96:	b2da      	uxtb	r2, r3
 8011a98:	4b90      	ldr	r3, [pc, #576]	; (8011cdc <lcd_set_symbol+0x524>)
 8011a9a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011a9c:	4b8f      	ldr	r3, [pc, #572]	; (8011cdc <lcd_set_symbol+0x524>)
 8011a9e:	7bdb      	ldrb	r3, [r3, #15]
 8011aa0:	f043 0304 	orr.w	r3, r3, #4
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	4b8d      	ldr	r3, [pc, #564]	; (8011cdc <lcd_set_symbol+0x524>)
 8011aa8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011aaa:	4b8c      	ldr	r3, [pc, #560]	; (8011cdc <lcd_set_symbol+0x524>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	f043 0320 	orr.w	r3, r3, #32
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b89      	ldr	r3, [pc, #548]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ab6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011ab8:	4b88      	ldr	r3, [pc, #544]	; (8011cdc <lcd_set_symbol+0x524>)
 8011aba:	795b      	ldrb	r3, [r3, #5]
 8011abc:	f043 0310 	orr.w	r3, r3, #16
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	4b86      	ldr	r3, [pc, #536]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ac4:	715a      	strb	r2, [r3, #5]
        break;
 8011ac6:	e1ea      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011ac8:	4b84      	ldr	r3, [pc, #528]	; (8011cdc <lcd_set_symbol+0x524>)
 8011aca:	7bdb      	ldrb	r3, [r3, #15]
 8011acc:	f043 0320 	orr.w	r3, r3, #32
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	4b82      	ldr	r3, [pc, #520]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ad4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011ad6:	4b81      	ldr	r3, [pc, #516]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ad8:	7bdb      	ldrb	r3, [r3, #15]
 8011ada:	f043 0310 	orr.w	r3, r3, #16
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	4b7e      	ldr	r3, [pc, #504]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ae2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011ae4:	4b7d      	ldr	r3, [pc, #500]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ae6:	7bdb      	ldrb	r3, [r3, #15]
 8011ae8:	f043 0304 	orr.w	r3, r3, #4
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	4b7b      	ldr	r3, [pc, #492]	; (8011cdc <lcd_set_symbol+0x524>)
 8011af0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011af2:	4b7a      	ldr	r3, [pc, #488]	; (8011cdc <lcd_set_symbol+0x524>)
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	f043 0320 	orr.w	r3, r3, #32
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	4b77      	ldr	r3, [pc, #476]	; (8011cdc <lcd_set_symbol+0x524>)
 8011afe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011b00:	4b76      	ldr	r3, [pc, #472]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b02:	795b      	ldrb	r3, [r3, #5]
 8011b04:	f043 0310 	orr.w	r3, r3, #16
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	4b74      	ldr	r3, [pc, #464]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b0c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011b0e:	4b73      	ldr	r3, [pc, #460]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b10:	7cdb      	ldrb	r3, [r3, #19]
 8011b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	4b70      	ldr	r3, [pc, #448]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b1a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011b1c:	4b6f      	ldr	r3, [pc, #444]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	f043 0301 	orr.w	r3, r3, #1
 8011b24:	b2da      	uxtb	r2, r3
 8011b26:	4b6d      	ldr	r3, [pc, #436]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b28:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011b2a:	4b6c      	ldr	r3, [pc, #432]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	f043 0302 	orr.w	r3, r3, #2
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	4b69      	ldr	r3, [pc, #420]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b36:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011b38:	4b68      	ldr	r3, [pc, #416]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b3a:	791b      	ldrb	r3, [r3, #4]
 8011b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	4b66      	ldr	r3, [pc, #408]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b44:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011b46:	4b65      	ldr	r3, [pc, #404]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b48:	795b      	ldrb	r3, [r3, #5]
 8011b4a:	f043 0302 	orr.w	r3, r3, #2
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	4b62      	ldr	r3, [pc, #392]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b52:	715a      	strb	r2, [r3, #5]
        break;
 8011b54:	e1a3      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011b56:	4b61      	ldr	r3, [pc, #388]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b58:	7b1b      	ldrb	r3, [r3, #12]
 8011b5a:	f043 0301 	orr.w	r3, r3, #1
 8011b5e:	b2da      	uxtb	r2, r3
 8011b60:	4b5e      	ldr	r3, [pc, #376]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b62:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011b64:	4b5d      	ldr	r3, [pc, #372]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b66:	7b1b      	ldrb	r3, [r3, #12]
 8011b68:	f043 0302 	orr.w	r3, r3, #2
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	4b5b      	ldr	r3, [pc, #364]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b70:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011b72:	4b5a      	ldr	r3, [pc, #360]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b74:	7c5b      	ldrb	r3, [r3, #17]
 8011b76:	f043 0301 	orr.w	r3, r3, #1
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	4b57      	ldr	r3, [pc, #348]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b7e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011b80:	4b56      	ldr	r3, [pc, #344]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b82:	7c5b      	ldrb	r3, [r3, #17]
 8011b84:	f043 0302 	orr.w	r3, r3, #2
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	4b54      	ldr	r3, [pc, #336]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b8c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011b8e:	4b53      	ldr	r3, [pc, #332]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b90:	789b      	ldrb	r3, [r3, #2]
 8011b92:	f043 0302 	orr.w	r3, r3, #2
 8011b96:	b2da      	uxtb	r2, r3
 8011b98:	4b50      	ldr	r3, [pc, #320]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b9a:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011b9c:	4b4f      	ldr	r3, [pc, #316]	; (8011cdc <lcd_set_symbol+0x524>)
 8011b9e:	789b      	ldrb	r3, [r3, #2]
 8011ba0:	f043 0301 	orr.w	r3, r3, #1
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	4b4d      	ldr	r3, [pc, #308]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ba8:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011baa:	4b4c      	ldr	r3, [pc, #304]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bac:	79db      	ldrb	r3, [r3, #7]
 8011bae:	f043 0302 	orr.w	r3, r3, #2
 8011bb2:	b2da      	uxtb	r2, r3
 8011bb4:	4b49      	ldr	r3, [pc, #292]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bb6:	71da      	strb	r2, [r3, #7]
        break;
 8011bb8:	e171      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011bba:	4b48      	ldr	r3, [pc, #288]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bbc:	7adb      	ldrb	r3, [r3, #11]
 8011bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	4b45      	ldr	r3, [pc, #276]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bc6:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011bc8:	4b44      	ldr	r3, [pc, #272]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bca:	7adb      	ldrb	r3, [r3, #11]
 8011bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bd0:	b2da      	uxtb	r2, r3
 8011bd2:	4b42      	ldr	r3, [pc, #264]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bd4:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011bd6:	4b41      	ldr	r3, [pc, #260]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bd8:	7c1b      	ldrb	r3, [r3, #16]
 8011bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bde:	b2da      	uxtb	r2, r3
 8011be0:	4b3e      	ldr	r3, [pc, #248]	; (8011cdc <lcd_set_symbol+0x524>)
 8011be2:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011be4:	4b3d      	ldr	r3, [pc, #244]	; (8011cdc <lcd_set_symbol+0x524>)
 8011be6:	7c1b      	ldrb	r3, [r3, #16]
 8011be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	4b3b      	ldr	r3, [pc, #236]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bf0:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011bf2:	4b3a      	ldr	r3, [pc, #232]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bf4:	785b      	ldrb	r3, [r3, #1]
 8011bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	4b37      	ldr	r3, [pc, #220]	; (8011cdc <lcd_set_symbol+0x524>)
 8011bfe:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011c00:	4b36      	ldr	r3, [pc, #216]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c02:	785b      	ldrb	r3, [r3, #1]
 8011c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	4b34      	ldr	r3, [pc, #208]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c0c:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011c0e:	4b33      	ldr	r3, [pc, #204]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c10:	799b      	ldrb	r3, [r3, #6]
 8011c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	4b30      	ldr	r3, [pc, #192]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c1a:	719a      	strb	r2, [r3, #6]
        break;
 8011c1c:	e13f      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011c1e:	4b2f      	ldr	r3, [pc, #188]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c20:	7adb      	ldrb	r3, [r3, #11]
 8011c22:	f043 0310 	orr.w	r3, r3, #16
 8011c26:	b2da      	uxtb	r2, r3
 8011c28:	4b2c      	ldr	r3, [pc, #176]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c2a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011c2c:	4b2b      	ldr	r3, [pc, #172]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c2e:	7adb      	ldrb	r3, [r3, #11]
 8011c30:	f043 0320 	orr.w	r3, r3, #32
 8011c34:	b2da      	uxtb	r2, r3
 8011c36:	4b29      	ldr	r3, [pc, #164]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c38:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011c3a:	4b28      	ldr	r3, [pc, #160]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c3c:	7c1b      	ldrb	r3, [r3, #16]
 8011c3e:	f043 0310 	orr.w	r3, r3, #16
 8011c42:	b2da      	uxtb	r2, r3
 8011c44:	4b25      	ldr	r3, [pc, #148]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c46:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011c48:	4b24      	ldr	r3, [pc, #144]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c4a:	7c1b      	ldrb	r3, [r3, #16]
 8011c4c:	f043 0320 	orr.w	r3, r3, #32
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	4b22      	ldr	r3, [pc, #136]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c54:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011c56:	4b21      	ldr	r3, [pc, #132]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c58:	785b      	ldrb	r3, [r3, #1]
 8011c5a:	f043 0320 	orr.w	r3, r3, #32
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	4b1e      	ldr	r3, [pc, #120]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c62:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011c64:	4b1d      	ldr	r3, [pc, #116]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c66:	785b      	ldrb	r3, [r3, #1]
 8011c68:	f043 0310 	orr.w	r3, r3, #16
 8011c6c:	b2da      	uxtb	r2, r3
 8011c6e:	4b1b      	ldr	r3, [pc, #108]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c70:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011c72:	4b1a      	ldr	r3, [pc, #104]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c74:	799b      	ldrb	r3, [r3, #6]
 8011c76:	f043 0320 	orr.w	r3, r3, #32
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	4b17      	ldr	r3, [pc, #92]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c7e:	719a      	strb	r2, [r3, #6]
        break;
 8011c80:	e10d      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011c82:	4b16      	ldr	r3, [pc, #88]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c84:	7b1b      	ldrb	r3, [r3, #12]
 8011c86:	f043 0304 	orr.w	r3, r3, #4
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	4b13      	ldr	r3, [pc, #76]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c8e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011c90:	4b12      	ldr	r3, [pc, #72]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c92:	7b1b      	ldrb	r3, [r3, #12]
 8011c94:	f043 0308 	orr.w	r3, r3, #8
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4b10      	ldr	r3, [pc, #64]	; (8011cdc <lcd_set_symbol+0x524>)
 8011c9c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011c9e:	4b0f      	ldr	r3, [pc, #60]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ca0:	7c5b      	ldrb	r3, [r3, #17]
 8011ca2:	f043 0308 	orr.w	r3, r3, #8
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <lcd_set_symbol+0x524>)
 8011caa:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_3);
 8011cac:	4b0b      	ldr	r3, [pc, #44]	; (8011cdc <lcd_set_symbol+0x524>)
 8011cae:	789b      	ldrb	r3, [r3, #2]
 8011cb0:	f043 0308 	orr.w	r3, r3, #8
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	4b09      	ldr	r3, [pc, #36]	; (8011cdc <lcd_set_symbol+0x524>)
 8011cb8:	709a      	strb	r2, [r3, #2]
        break;
 8011cba:	e0f0      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011cbc:	4b07      	ldr	r3, [pc, #28]	; (8011cdc <lcd_set_symbol+0x524>)
 8011cbe:	7c5b      	ldrb	r3, [r3, #17]
 8011cc0:	f043 0301 	orr.w	r3, r3, #1
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <lcd_set_symbol+0x524>)
 8011cc8:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011cca:	4b04      	ldr	r3, [pc, #16]	; (8011cdc <lcd_set_symbol+0x524>)
 8011ccc:	789b      	ldrb	r3, [r3, #2]
 8011cce:	f043 0301 	orr.w	r3, r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	4b01      	ldr	r3, [pc, #4]	; (8011cdc <lcd_set_symbol+0x524>)
 8011cd6:	709a      	strb	r2, [r3, #2]
        break;
 8011cd8:	e0e1      	b.n	8011e9e <lcd_set_symbol+0x6e6>
 8011cda:	bf00      	nop
 8011cdc:	20001da0 	.word	0x20001da0
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011ce0:	4b73      	ldr	r3, [pc, #460]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011ce2:	7b1b      	ldrb	r3, [r3, #12]
 8011ce4:	f043 0301 	orr.w	r3, r3, #1
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	4b71      	ldr	r3, [pc, #452]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011cec:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011cee:	4b70      	ldr	r3, [pc, #448]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011cf0:	7c5b      	ldrb	r3, [r3, #17]
 8011cf2:	f043 0301 	orr.w	r3, r3, #1
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	4b6d      	ldr	r3, [pc, #436]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011cfa:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011cfc:	4b6c      	ldr	r3, [pc, #432]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011cfe:	7c5b      	ldrb	r3, [r3, #17]
 8011d00:	f043 0302 	orr.w	r3, r3, #2
 8011d04:	b2da      	uxtb	r2, r3
 8011d06:	4b6a      	ldr	r3, [pc, #424]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d08:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_1);
 8011d0a:	4b69      	ldr	r3, [pc, #420]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d0c:	789b      	ldrb	r3, [r3, #2]
 8011d0e:	f043 0302 	orr.w	r3, r3, #2
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	4b66      	ldr	r3, [pc, #408]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d16:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011d18:	4b65      	ldr	r3, [pc, #404]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d1a:	79db      	ldrb	r3, [r3, #7]
 8011d1c:	f043 0302 	orr.w	r3, r3, #2
 8011d20:	b2da      	uxtb	r2, r3
 8011d22:	4b63      	ldr	r3, [pc, #396]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d24:	71da      	strb	r2, [r3, #7]
        break;
 8011d26:	e0ba      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011d28:	4b61      	ldr	r3, [pc, #388]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d2a:	7b1b      	ldrb	r3, [r3, #12]
 8011d2c:	f043 0301 	orr.w	r3, r3, #1
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b5f      	ldr	r3, [pc, #380]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d34:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d36:	4b5e      	ldr	r3, [pc, #376]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d38:	7c5b      	ldrb	r3, [r3, #17]
 8011d3a:	f043 0301 	orr.w	r3, r3, #1
 8011d3e:	b2da      	uxtb	r2, r3
 8011d40:	4b5b      	ldr	r3, [pc, #364]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d42:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d44:	4b5a      	ldr	r3, [pc, #360]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d46:	7c5b      	ldrb	r3, [r3, #17]
 8011d48:	f043 0302 	orr.w	r3, r3, #2
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	4b58      	ldr	r3, [pc, #352]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d50:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011d52:	4b57      	ldr	r3, [pc, #348]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d54:	789b      	ldrb	r3, [r3, #2]
 8011d56:	f043 0301 	orr.w	r3, r3, #1
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	4b54      	ldr	r3, [pc, #336]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d5e:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011d60:	4b53      	ldr	r3, [pc, #332]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d62:	79db      	ldrb	r3, [r3, #7]
 8011d64:	f043 0302 	orr.w	r3, r3, #2
 8011d68:	b2da      	uxtb	r2, r3
 8011d6a:	4b51      	ldr	r3, [pc, #324]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d6c:	71da      	strb	r2, [r3, #7]
        break;
 8011d6e:	e096      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011d70:	4b4f      	ldr	r3, [pc, #316]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d72:	7b1b      	ldrb	r3, [r3, #12]
 8011d74:	f043 0302 	orr.w	r3, r3, #2
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	4b4d      	ldr	r3, [pc, #308]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d7c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d7e:	4b4c      	ldr	r3, [pc, #304]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d80:	7c5b      	ldrb	r3, [r3, #17]
 8011d82:	f043 0301 	orr.w	r3, r3, #1
 8011d86:	b2da      	uxtb	r2, r3
 8011d88:	4b49      	ldr	r3, [pc, #292]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d8a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d8c:	4b48      	ldr	r3, [pc, #288]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d8e:	7c5b      	ldrb	r3, [r3, #17]
 8011d90:	f043 0302 	orr.w	r3, r3, #2
 8011d94:	b2da      	uxtb	r2, r3
 8011d96:	4b46      	ldr	r3, [pc, #280]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d98:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011d9a:	4b45      	ldr	r3, [pc, #276]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011d9c:	789b      	ldrb	r3, [r3, #2]
 8011d9e:	f043 0301 	orr.w	r3, r3, #1
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	4b42      	ldr	r3, [pc, #264]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011da6:	709a      	strb	r2, [r3, #2]
        break;
 8011da8:	e079      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011daa:	4b41      	ldr	r3, [pc, #260]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dac:	7b1b      	ldrb	r3, [r3, #12]
 8011dae:	f043 0301 	orr.w	r3, r3, #1
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	4b3e      	ldr	r3, [pc, #248]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011db6:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011db8:	4b3d      	ldr	r3, [pc, #244]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dba:	7b1b      	ldrb	r3, [r3, #12]
 8011dbc:	f043 0302 	orr.w	r3, r3, #2
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	4b3b      	ldr	r3, [pc, #236]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dc4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011dc6:	4b3a      	ldr	r3, [pc, #232]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dc8:	7c5b      	ldrb	r3, [r3, #17]
 8011dca:	f043 0302 	orr.w	r3, r3, #2
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	4b37      	ldr	r3, [pc, #220]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dd2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011dd4:	4b36      	ldr	r3, [pc, #216]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dd6:	789b      	ldrb	r3, [r3, #2]
 8011dd8:	f043 0301 	orr.w	r3, r3, #1
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	4b34      	ldr	r3, [pc, #208]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011de0:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011de2:	4b33      	ldr	r3, [pc, #204]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011de4:	79db      	ldrb	r3, [r3, #7]
 8011de6:	f043 0302 	orr.w	r3, r3, #2
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	4b30      	ldr	r3, [pc, #192]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dee:	71da      	strb	r2, [r3, #7]
        break;
 8011df0:	e055      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011df2:	4b2f      	ldr	r3, [pc, #188]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011df4:	7bdb      	ldrb	r3, [r3, #15]
 8011df6:	f043 0320 	orr.w	r3, r3, #32
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	4b2c      	ldr	r3, [pc, #176]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011dfe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011e00:	4b2b      	ldr	r3, [pc, #172]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e02:	7bdb      	ldrb	r3, [r3, #15]
 8011e04:	f043 0308 	orr.w	r3, r3, #8
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	4b29      	ldr	r3, [pc, #164]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e0c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011e0e:	4b28      	ldr	r3, [pc, #160]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e10:	7bdb      	ldrb	r3, [r3, #15]
 8011e12:	f043 0304 	orr.w	r3, r3, #4
 8011e16:	b2da      	uxtb	r2, r3
 8011e18:	4b25      	ldr	r3, [pc, #148]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e1a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_4);
 8011e1c:	4b24      	ldr	r3, [pc, #144]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	f043 0310 	orr.w	r3, r3, #16
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	4b22      	ldr	r3, [pc, #136]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e28:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 8011e2a:	4b21      	ldr	r3, [pc, #132]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	f043 0320 	orr.w	r3, r3, #32
 8011e32:	b2da      	uxtb	r2, r3
 8011e34:	4b1e      	ldr	r3, [pc, #120]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e36:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  |= (1 << BIT_3);
 8011e38:	4b1d      	ldr	r3, [pc, #116]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	f043 0308 	orr.w	r3, r3, #8
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	4b1b      	ldr	r3, [pc, #108]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e44:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e46:	4b1a      	ldr	r3, [pc, #104]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e48:	7b9b      	ldrb	r3, [r3, #14]
 8011e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	4b17      	ldr	r3, [pc, #92]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e52:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8011e54:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e56:	7bdb      	ldrb	r3, [r3, #15]
 8011e58:	f043 0301 	orr.w	r3, r3, #1
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b14      	ldr	r3, [pc, #80]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e60:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e62:	4b13      	ldr	r3, [pc, #76]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e64:	7cdb      	ldrb	r3, [r3, #19]
 8011e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	4b10      	ldr	r3, [pc, #64]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e6e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011e70:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f043 0301 	orr.w	r3, r3, #1
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	4b0d      	ldr	r3, [pc, #52]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e7c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4]  |= (1 << BIT_6);
 8011e7e:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e80:	791b      	ldrb	r3, [r3, #4]
 8011e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e8a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011e8c:	4b08      	ldr	r3, [pc, #32]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e8e:	795b      	ldrb	r3, [r3, #5]
 8011e90:	f043 0302 	orr.w	r3, r3, #2
 8011e94:	b2da      	uxtb	r2, r3
 8011e96:	4b06      	ldr	r3, [pc, #24]	; (8011eb0 <lcd_set_symbol+0x6f8>)
 8011e98:	715a      	strb	r2, [r3, #5]
        break;
 8011e9a:	e000      	b.n	8011e9e <lcd_set_symbol+0x6e6>
        default:
        break;
 8011e9c:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011e9e:	79bb      	ldrb	r3, [r7, #6]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f000 fb87 	bl	80125b4 <pcf8553_blink>
}
 8011ea6:	bf00      	nop
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	20001da0 	.word	0x20001da0

08011eb4 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	460a      	mov	r2, r1
 8011ebe:	71fb      	strb	r3, [r7, #7]
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011ec4:	79fb      	ldrb	r3, [r7, #7]
 8011ec6:	2b03      	cmp	r3, #3
 8011ec8:	d82a      	bhi.n	8011f20 <lcd_set_time_unit+0x6c>
 8011eca:	a201      	add	r2, pc, #4	; (adr r2, 8011ed0 <lcd_set_time_unit+0x1c>)
 8011ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ed0:	08011ee1 	.word	0x08011ee1
 8011ed4:	08011ef1 	.word	0x08011ef1
 8011ed8:	08011f01 	.word	0x08011f01
 8011edc:	08011f11 	.word	0x08011f11
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011ee0:	4b14      	ldr	r3, [pc, #80]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011ee2:	795b      	ldrb	r3, [r3, #5]
 8011ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee8:	b2da      	uxtb	r2, r3
 8011eea:	4b12      	ldr	r3, [pc, #72]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011eec:	715a      	strb	r2, [r3, #5]
        break;
 8011eee:	e018      	b.n	8011f22 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011ef0:	4b10      	ldr	r3, [pc, #64]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011ef2:	7a5b      	ldrb	r3, [r3, #9]
 8011ef4:	f043 0320 	orr.w	r3, r3, #32
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	4b0e      	ldr	r3, [pc, #56]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011efc:	725a      	strb	r2, [r3, #9]
        break;
 8011efe:	e010      	b.n	8011f22 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011f00:	4b0c      	ldr	r3, [pc, #48]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011f02:	7a9b      	ldrb	r3, [r3, #10]
 8011f04:	f043 0320 	orr.w	r3, r3, #32
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	4b0a      	ldr	r3, [pc, #40]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011f0c:	729a      	strb	r2, [r3, #10]
        break;
 8011f0e:	e008      	b.n	8011f22 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011f10:	4b08      	ldr	r3, [pc, #32]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011f12:	7a5b      	ldrb	r3, [r3, #9]
 8011f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	4b06      	ldr	r3, [pc, #24]	; (8011f34 <lcd_set_time_unit+0x80>)
 8011f1c:	725a      	strb	r2, [r3, #9]
        break;
 8011f1e:	e000      	b.n	8011f22 <lcd_set_time_unit+0x6e>
        default:
        break;
 8011f20:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011f22:	79bb      	ldrb	r3, [r7, #6]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f000 fb45 	bl	80125b4 <pcf8553_blink>
}
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	20001da0 	.word	0x20001da0

08011f38 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	460a      	mov	r2, r1
 8011f42:	71fb      	strb	r3, [r7, #7]
 8011f44:	4613      	mov	r3, r2
 8011f46:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011f48:	79fb      	ldrb	r3, [r7, #7]
 8011f4a:	2b07      	cmp	r3, #7
 8011f4c:	f200 822c 	bhi.w	80123a8 <lcd_set_vol_unit+0x470>
 8011f50:	a201      	add	r2, pc, #4	; (adr r2, 8011f58 <lcd_set_vol_unit+0x20>)
 8011f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f56:	bf00      	nop
 8011f58:	08011f79 	.word	0x08011f79
 8011f5c:	0801206b 	.word	0x0801206b
 8011f60:	08012115 	.word	0x08012115
 8011f64:	08011fcf 	.word	0x08011fcf
 8011f68:	0801226f 	.word	0x0801226f
 8011f6c:	080121a9 	.word	0x080121a9
 8011f70:	080122ef 	.word	0x080122ef
 8011f74:	0801236f 	.word	0x0801236f
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f78:	4b8a      	ldr	r3, [pc, #552]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011f7a:	7bdb      	ldrb	r3, [r3, #15]
 8011f7c:	f043 0320 	orr.w	r3, r3, #32
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	4b88      	ldr	r3, [pc, #544]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011f84:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011f86:	4b87      	ldr	r3, [pc, #540]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f043 0320 	orr.w	r3, r3, #32
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	4b84      	ldr	r3, [pc, #528]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011f92:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011f94:	4b83      	ldr	r3, [pc, #524]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011f96:	795b      	ldrb	r3, [r3, #5]
 8011f98:	f043 0320 	orr.w	r3, r3, #32
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b81      	ldr	r3, [pc, #516]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fa0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011fa2:	4b80      	ldr	r3, [pc, #512]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fa4:	7b9b      	ldrb	r3, [r3, #14]
 8011fa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	4b7d      	ldr	r3, [pc, #500]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fae:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011fb0:	4b7c      	ldr	r3, [pc, #496]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fb2:	7a9b      	ldrb	r3, [r3, #10]
 8011fb4:	f043 0301 	orr.w	r3, r3, #1
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	4b7a      	ldr	r3, [pc, #488]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fbc:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011fbe:	4b79      	ldr	r3, [pc, #484]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fc0:	7a5b      	ldrb	r3, [r3, #9]
 8011fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fc6:	b2da      	uxtb	r2, r3
 8011fc8:	4b76      	ldr	r3, [pc, #472]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fca:	725a      	strb	r2, [r3, #9]
        break;
 8011fcc:	e1ed      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011fce:	4b75      	ldr	r3, [pc, #468]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fd0:	7bdb      	ldrb	r3, [r3, #15]
 8011fd2:	f043 0320 	orr.w	r3, r3, #32
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	4b72      	ldr	r3, [pc, #456]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fda:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011fdc:	4b71      	ldr	r3, [pc, #452]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fde:	7bdb      	ldrb	r3, [r3, #15]
 8011fe0:	f043 0310 	orr.w	r3, r3, #16
 8011fe4:	b2da      	uxtb	r2, r3
 8011fe6:	4b6f      	ldr	r3, [pc, #444]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fe8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011fea:	4b6e      	ldr	r3, [pc, #440]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011fec:	7bdb      	ldrb	r3, [r3, #15]
 8011fee:	f043 0304 	orr.w	r3, r3, #4
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	4b6b      	ldr	r3, [pc, #428]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011ff6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011ff8:	4b6a      	ldr	r3, [pc, #424]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	f043 0320 	orr.w	r3, r3, #32
 8012000:	b2da      	uxtb	r2, r3
 8012002:	4b68      	ldr	r3, [pc, #416]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012004:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8012006:	4b67      	ldr	r3, [pc, #412]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012008:	795b      	ldrb	r3, [r3, #5]
 801200a:	f043 0310 	orr.w	r3, r3, #16
 801200e:	b2da      	uxtb	r2, r3
 8012010:	4b64      	ldr	r3, [pc, #400]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012012:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012014:	4b63      	ldr	r3, [pc, #396]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012016:	7b9b      	ldrb	r3, [r3, #14]
 8012018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801201c:	b2da      	uxtb	r2, r3
 801201e:	4b61      	ldr	r3, [pc, #388]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012020:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012022:	4b60      	ldr	r3, [pc, #384]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012024:	7bdb      	ldrb	r3, [r3, #15]
 8012026:	f043 0302 	orr.w	r3, r3, #2
 801202a:	b2da      	uxtb	r2, r3
 801202c:	4b5d      	ldr	r3, [pc, #372]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801202e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012030:	4b5c      	ldr	r3, [pc, #368]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	f043 0301 	orr.w	r3, r3, #1
 8012038:	b2da      	uxtb	r2, r3
 801203a:	4b5a      	ldr	r3, [pc, #360]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801203c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801203e:	4b59      	ldr	r3, [pc, #356]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	f043 0302 	orr.w	r3, r3, #2
 8012046:	b2da      	uxtb	r2, r3
 8012048:	4b56      	ldr	r3, [pc, #344]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801204a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 801204c:	4b55      	ldr	r3, [pc, #340]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801204e:	791b      	ldrb	r3, [r3, #4]
 8012050:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012054:	b2da      	uxtb	r2, r3
 8012056:	4b53      	ldr	r3, [pc, #332]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012058:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801205a:	4b52      	ldr	r3, [pc, #328]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801205c:	795b      	ldrb	r3, [r3, #5]
 801205e:	f043 0302 	orr.w	r3, r3, #2
 8012062:	b2da      	uxtb	r2, r3
 8012064:	4b4f      	ldr	r3, [pc, #316]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012066:	715a      	strb	r2, [r3, #5]
        break;
 8012068:	e19f      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801206a:	4b4e      	ldr	r3, [pc, #312]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801206c:	7bdb      	ldrb	r3, [r3, #15]
 801206e:	f043 0320 	orr.w	r3, r3, #32
 8012072:	b2da      	uxtb	r2, r3
 8012074:	4b4b      	ldr	r3, [pc, #300]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012076:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012078:	4b4a      	ldr	r3, [pc, #296]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801207a:	7a9b      	ldrb	r3, [r3, #10]
 801207c:	f043 0304 	orr.w	r3, r3, #4
 8012080:	b2da      	uxtb	r2, r3
 8012082:	4b48      	ldr	r3, [pc, #288]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012084:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012086:	4b47      	ldr	r3, [pc, #284]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012088:	7bdb      	ldrb	r3, [r3, #15]
 801208a:	f043 0310 	orr.w	r3, r3, #16
 801208e:	b2da      	uxtb	r2, r3
 8012090:	4b44      	ldr	r3, [pc, #272]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012092:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012094:	4b43      	ldr	r3, [pc, #268]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012096:	7bdb      	ldrb	r3, [r3, #15]
 8012098:	f043 0308 	orr.w	r3, r3, #8
 801209c:	b2da      	uxtb	r2, r3
 801209e:	4b41      	ldr	r3, [pc, #260]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120a0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80120a2:	4b40      	ldr	r3, [pc, #256]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	f043 0320 	orr.w	r3, r3, #32
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	4b3d      	ldr	r3, [pc, #244]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120ae:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80120b0:	4b3c      	ldr	r3, [pc, #240]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	f043 0308 	orr.w	r3, r3, #8
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	4b3a      	ldr	r3, [pc, #232]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120bc:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80120be:	4b39      	ldr	r3, [pc, #228]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120c0:	7b9b      	ldrb	r3, [r3, #14]
 80120c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	4b36      	ldr	r3, [pc, #216]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120ca:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80120cc:	4b35      	ldr	r3, [pc, #212]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120ce:	7cdb      	ldrb	r3, [r3, #19]
 80120d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	4b33      	ldr	r3, [pc, #204]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120d8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80120da:	4b32      	ldr	r3, [pc, #200]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120dc:	7cdb      	ldrb	r3, [r3, #19]
 80120de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120e2:	b2da      	uxtb	r2, r3
 80120e4:	4b2f      	ldr	r3, [pc, #188]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120e6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80120e8:	4b2e      	ldr	r3, [pc, #184]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	f043 0301 	orr.w	r3, r3, #1
 80120f0:	b2da      	uxtb	r2, r3
 80120f2:	4b2c      	ldr	r3, [pc, #176]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120f4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 80120f6:	4b2b      	ldr	r3, [pc, #172]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 80120f8:	791b      	ldrb	r3, [r3, #4]
 80120fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120fe:	b2da      	uxtb	r2, r3
 8012100:	4b28      	ldr	r3, [pc, #160]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012102:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012104:	4b27      	ldr	r3, [pc, #156]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012106:	795b      	ldrb	r3, [r3, #5]
 8012108:	f043 0302 	orr.w	r3, r3, #2
 801210c:	b2da      	uxtb	r2, r3
 801210e:	4b25      	ldr	r3, [pc, #148]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012110:	715a      	strb	r2, [r3, #5]
        break;
 8012112:	e14a      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012114:	4b23      	ldr	r3, [pc, #140]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012116:	7bdb      	ldrb	r3, [r3, #15]
 8012118:	f043 0320 	orr.w	r3, r3, #32
 801211c:	b2da      	uxtb	r2, r3
 801211e:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012120:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012122:	4b20      	ldr	r3, [pc, #128]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012124:	7a9b      	ldrb	r3, [r3, #10]
 8012126:	f043 0304 	orr.w	r3, r3, #4
 801212a:	b2da      	uxtb	r2, r3
 801212c:	4b1d      	ldr	r3, [pc, #116]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801212e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012130:	4b1c      	ldr	r3, [pc, #112]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012132:	7bdb      	ldrb	r3, [r3, #15]
 8012134:	f043 0310 	orr.w	r3, r3, #16
 8012138:	b2da      	uxtb	r2, r3
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801213c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801213e:	4b19      	ldr	r3, [pc, #100]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012140:	7bdb      	ldrb	r3, [r3, #15]
 8012142:	f043 0308 	orr.w	r3, r3, #8
 8012146:	b2da      	uxtb	r2, r3
 8012148:	4b16      	ldr	r3, [pc, #88]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801214a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801214c:	4b15      	ldr	r3, [pc, #84]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	f043 0320 	orr.w	r3, r3, #32
 8012154:	b2da      	uxtb	r2, r3
 8012156:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012158:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801215a:	4b12      	ldr	r3, [pc, #72]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	f043 0308 	orr.w	r3, r3, #8
 8012162:	b2da      	uxtb	r2, r3
 8012164:	4b0f      	ldr	r3, [pc, #60]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012166:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012168:	4b0e      	ldr	r3, [pc, #56]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801216a:	7b9b      	ldrb	r3, [r3, #14]
 801216c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012170:	b2da      	uxtb	r2, r3
 8012172:	4b0c      	ldr	r3, [pc, #48]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012174:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012176:	4b0b      	ldr	r3, [pc, #44]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012178:	7bdb      	ldrb	r3, [r3, #15]
 801217a:	f043 0302 	orr.w	r3, r3, #2
 801217e:	b2da      	uxtb	r2, r3
 8012180:	4b08      	ldr	r3, [pc, #32]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012182:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 8012184:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	f043 0302 	orr.w	r3, r3, #2
 801218c:	b2da      	uxtb	r2, r3
 801218e:	4b05      	ldr	r3, [pc, #20]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012190:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8012192:	4b04      	ldr	r3, [pc, #16]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 8012194:	795b      	ldrb	r3, [r3, #5]
 8012196:	f043 0302 	orr.w	r3, r3, #2
 801219a:	b2da      	uxtb	r2, r3
 801219c:	4b01      	ldr	r3, [pc, #4]	; (80121a4 <lcd_set_vol_unit+0x26c>)
 801219e:	715a      	strb	r2, [r3, #5]
        break;
 80121a0:	e103      	b.n	80123aa <lcd_set_vol_unit+0x472>
 80121a2:	bf00      	nop
 80121a4:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80121a8:	4b84      	ldr	r3, [pc, #528]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121aa:	7a9b      	ldrb	r3, [r3, #10]
 80121ac:	f043 0308 	orr.w	r3, r3, #8
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	4b82      	ldr	r3, [pc, #520]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121b4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 80121b6:	4b81      	ldr	r3, [pc, #516]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121b8:	7a9b      	ldrb	r3, [r3, #10]
 80121ba:	f043 0310 	orr.w	r3, r3, #16
 80121be:	b2da      	uxtb	r2, r3
 80121c0:	4b7e      	ldr	r3, [pc, #504]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121c2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80121c4:	4b7d      	ldr	r3, [pc, #500]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121c6:	7bdb      	ldrb	r3, [r3, #15]
 80121c8:	f043 0308 	orr.w	r3, r3, #8
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	4b7b      	ldr	r3, [pc, #492]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121d0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80121d2:	4b7a      	ldr	r3, [pc, #488]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	f043 0310 	orr.w	r3, r3, #16
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	4b77      	ldr	r3, [pc, #476]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121de:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 80121e0:	4b76      	ldr	r3, [pc, #472]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121e2:	795b      	ldrb	r3, [r3, #5]
 80121e4:	f043 0304 	orr.w	r3, r3, #4
 80121e8:	b2da      	uxtb	r2, r3
 80121ea:	4b74      	ldr	r3, [pc, #464]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121ec:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80121ee:	4b73      	ldr	r3, [pc, #460]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	f043 0308 	orr.w	r3, r3, #8
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	4b70      	ldr	r3, [pc, #448]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121fa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80121fc:	4b6f      	ldr	r3, [pc, #444]	; (80123bc <lcd_set_vol_unit+0x484>)
 80121fe:	795b      	ldrb	r3, [r3, #5]
 8012200:	f043 0320 	orr.w	r3, r3, #32
 8012204:	b2da      	uxtb	r2, r3
 8012206:	4b6d      	ldr	r3, [pc, #436]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012208:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801220a:	4b6c      	ldr	r3, [pc, #432]	; (80123bc <lcd_set_vol_unit+0x484>)
 801220c:	7b9b      	ldrb	r3, [r3, #14]
 801220e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012212:	b2da      	uxtb	r2, r3
 8012214:	4b69      	ldr	r3, [pc, #420]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012216:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012218:	4b68      	ldr	r3, [pc, #416]	; (80123bc <lcd_set_vol_unit+0x484>)
 801221a:	7bdb      	ldrb	r3, [r3, #15]
 801221c:	f043 0302 	orr.w	r3, r3, #2
 8012220:	b2da      	uxtb	r2, r3
 8012222:	4b66      	ldr	r3, [pc, #408]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012224:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8012226:	4b65      	ldr	r3, [pc, #404]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012228:	7cdb      	ldrb	r3, [r3, #19]
 801222a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801222e:	b2da      	uxtb	r2, r3
 8012230:	4b62      	ldr	r3, [pc, #392]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012232:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8012234:	4b61      	ldr	r3, [pc, #388]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012236:	7cdb      	ldrb	r3, [r3, #19]
 8012238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801223c:	b2da      	uxtb	r2, r3
 801223e:	4b5f      	ldr	r3, [pc, #380]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012240:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012242:	4b5e      	ldr	r3, [pc, #376]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	f043 0301 	orr.w	r3, r3, #1
 801224a:	b2da      	uxtb	r2, r3
 801224c:	4b5b      	ldr	r3, [pc, #364]	; (80123bc <lcd_set_vol_unit+0x484>)
 801224e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012250:	4b5a      	ldr	r3, [pc, #360]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	f043 0302 	orr.w	r3, r3, #2
 8012258:	b2da      	uxtb	r2, r3
 801225a:	4b58      	ldr	r3, [pc, #352]	; (80123bc <lcd_set_vol_unit+0x484>)
 801225c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 801225e:	4b57      	ldr	r3, [pc, #348]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012260:	795b      	ldrb	r3, [r3, #5]
 8012262:	f043 0301 	orr.w	r3, r3, #1
 8012266:	b2da      	uxtb	r2, r3
 8012268:	4b54      	ldr	r3, [pc, #336]	; (80123bc <lcd_set_vol_unit+0x484>)
 801226a:	715a      	strb	r2, [r3, #5]
        break;
 801226c:	e09d      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801226e:	4b53      	ldr	r3, [pc, #332]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012270:	7a9b      	ldrb	r3, [r3, #10]
 8012272:	f043 0308 	orr.w	r3, r3, #8
 8012276:	b2da      	uxtb	r2, r3
 8012278:	4b50      	ldr	r3, [pc, #320]	; (80123bc <lcd_set_vol_unit+0x484>)
 801227a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801227c:	4b4f      	ldr	r3, [pc, #316]	; (80123bc <lcd_set_vol_unit+0x484>)
 801227e:	7bdb      	ldrb	r3, [r3, #15]
 8012280:	f043 0320 	orr.w	r3, r3, #32
 8012284:	b2da      	uxtb	r2, r3
 8012286:	4b4d      	ldr	r3, [pc, #308]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012288:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801228a:	4b4c      	ldr	r3, [pc, #304]	; (80123bc <lcd_set_vol_unit+0x484>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	f043 0310 	orr.w	r3, r3, #16
 8012292:	b2da      	uxtb	r2, r3
 8012294:	4b49      	ldr	r3, [pc, #292]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012296:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012298:	4b48      	ldr	r3, [pc, #288]	; (80123bc <lcd_set_vol_unit+0x484>)
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	f043 0320 	orr.w	r3, r3, #32
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	4b46      	ldr	r3, [pc, #280]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122a4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80122a6:	4b45      	ldr	r3, [pc, #276]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	f043 0308 	orr.w	r3, r3, #8
 80122ae:	b2da      	uxtb	r2, r3
 80122b0:	4b42      	ldr	r3, [pc, #264]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122b2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80122b4:	4b41      	ldr	r3, [pc, #260]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122b6:	795b      	ldrb	r3, [r3, #5]
 80122b8:	f043 0320 	orr.w	r3, r3, #32
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	4b3f      	ldr	r3, [pc, #252]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122c0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 80122c2:	4b3e      	ldr	r3, [pc, #248]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122c4:	7bdb      	ldrb	r3, [r3, #15]
 80122c6:	f043 0302 	orr.w	r3, r3, #2
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	4b3b      	ldr	r3, [pc, #236]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122ce:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80122d0:	4b3a      	ldr	r3, [pc, #232]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f043 0302 	orr.w	r3, r3, #2
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	4b38      	ldr	r3, [pc, #224]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122dc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80122de:	4b37      	ldr	r3, [pc, #220]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122e0:	795b      	ldrb	r3, [r3, #5]
 80122e2:	f043 0302 	orr.w	r3, r3, #2
 80122e6:	b2da      	uxtb	r2, r3
 80122e8:	4b34      	ldr	r3, [pc, #208]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122ea:	715a      	strb	r2, [r3, #5]
        break;
 80122ec:	e05d      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80122ee:	4b33      	ldr	r3, [pc, #204]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122f0:	7a9b      	ldrb	r3, [r3, #10]
 80122f2:	f043 0308 	orr.w	r3, r3, #8
 80122f6:	b2da      	uxtb	r2, r3
 80122f8:	4b30      	ldr	r3, [pc, #192]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122fa:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80122fc:	4b2f      	ldr	r3, [pc, #188]	; (80123bc <lcd_set_vol_unit+0x484>)
 80122fe:	7bdb      	ldrb	r3, [r3, #15]
 8012300:	f043 0320 	orr.w	r3, r3, #32
 8012304:	b2da      	uxtb	r2, r3
 8012306:	4b2d      	ldr	r3, [pc, #180]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012308:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801230a:	4b2c      	ldr	r3, [pc, #176]	; (80123bc <lcd_set_vol_unit+0x484>)
 801230c:	7bdb      	ldrb	r3, [r3, #15]
 801230e:	f043 0308 	orr.w	r3, r3, #8
 8012312:	b2da      	uxtb	r2, r3
 8012314:	4b29      	ldr	r3, [pc, #164]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012316:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8012318:	4b28      	ldr	r3, [pc, #160]	; (80123bc <lcd_set_vol_unit+0x484>)
 801231a:	7bdb      	ldrb	r3, [r3, #15]
 801231c:	f043 0304 	orr.w	r3, r3, #4
 8012320:	b2da      	uxtb	r2, r3
 8012322:	4b26      	ldr	r3, [pc, #152]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012324:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012326:	4b25      	ldr	r3, [pc, #148]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	f043 0310 	orr.w	r3, r3, #16
 801232e:	b2da      	uxtb	r2, r3
 8012330:	4b22      	ldr	r3, [pc, #136]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012332:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012334:	4b21      	ldr	r3, [pc, #132]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012336:	7b9b      	ldrb	r3, [r3, #14]
 8012338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801233c:	b2da      	uxtb	r2, r3
 801233e:	4b1f      	ldr	r3, [pc, #124]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012340:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012342:	4b1e      	ldr	r3, [pc, #120]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012344:	7bdb      	ldrb	r3, [r3, #15]
 8012346:	f043 0302 	orr.w	r3, r3, #2
 801234a:	b2da      	uxtb	r2, r3
 801234c:	4b1b      	ldr	r3, [pc, #108]	; (80123bc <lcd_set_vol_unit+0x484>)
 801234e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012350:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	f043 0302 	orr.w	r3, r3, #2
 8012358:	b2da      	uxtb	r2, r3
 801235a:	4b18      	ldr	r3, [pc, #96]	; (80123bc <lcd_set_vol_unit+0x484>)
 801235c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801235e:	4b17      	ldr	r3, [pc, #92]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012360:	795b      	ldrb	r3, [r3, #5]
 8012362:	f043 0302 	orr.w	r3, r3, #2
 8012366:	b2da      	uxtb	r2, r3
 8012368:	4b14      	ldr	r3, [pc, #80]	; (80123bc <lcd_set_vol_unit+0x484>)
 801236a:	715a      	strb	r2, [r3, #5]
        break;
 801236c:	e01d      	b.n	80123aa <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801236e:	4b13      	ldr	r3, [pc, #76]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012370:	7bdb      	ldrb	r3, [r3, #15]
 8012372:	f043 0304 	orr.w	r3, r3, #4
 8012376:	b2da      	uxtb	r2, r3
 8012378:	4b10      	ldr	r3, [pc, #64]	; (80123bc <lcd_set_vol_unit+0x484>)
 801237a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801237c:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <lcd_set_vol_unit+0x484>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f043 0310 	orr.w	r3, r3, #16
 8012384:	b2da      	uxtb	r2, r3
 8012386:	4b0d      	ldr	r3, [pc, #52]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012388:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801238a:	4b0c      	ldr	r3, [pc, #48]	; (80123bc <lcd_set_vol_unit+0x484>)
 801238c:	7cdb      	ldrb	r3, [r3, #19]
 801238e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012392:	b2da      	uxtb	r2, r3
 8012394:	4b09      	ldr	r3, [pc, #36]	; (80123bc <lcd_set_vol_unit+0x484>)
 8012396:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012398:	4b08      	ldr	r3, [pc, #32]	; (80123bc <lcd_set_vol_unit+0x484>)
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	f043 0301 	orr.w	r3, r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	4b06      	ldr	r3, [pc, #24]	; (80123bc <lcd_set_vol_unit+0x484>)
 80123a4:	701a      	strb	r2, [r3, #0]
        break;
 80123a6:	e000      	b.n	80123aa <lcd_set_vol_unit+0x472>
        default:
        break;
 80123a8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80123aa:	79bb      	ldrb	r3, [r7, #6]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f000 f901 	bl	80125b4 <pcf8553_blink>
}
 80123b2:	bf00      	nop
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	20001da0 	.word	0x20001da0

080123c0 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	4603      	mov	r3, r0
 80123c8:	460a      	mov	r2, r1
 80123ca:	71fb      	strb	r3, [r7, #7]
 80123cc:	4613      	mov	r3, r2
 80123ce:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 80123d0:	2300      	movs	r3, #0
 80123d2:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 80123d4:	2300      	movs	r3, #0
 80123d6:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 80123d8:	4b33      	ldr	r3, [pc, #204]	; (80124a8 <lcd_write_line+0xe8>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d002      	beq.n	80123e6 <lcd_write_line+0x26>
 80123e0:	2b02      	cmp	r3, #2
 80123e2:	d01b      	beq.n	801241c <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 80123e4:	e035      	b.n	8012452 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 80123e6:	79fb      	ldrb	r3, [r7, #7]
 80123e8:	4a30      	ldr	r2, [pc, #192]	; (80124ac <lcd_write_line+0xec>)
 80123ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80123ee:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80123f0:	4b2f      	ldr	r3, [pc, #188]	; (80124b0 <lcd_write_line+0xf0>)
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	b2da      	uxtb	r2, r3
 80123f8:	7bbb      	ldrb	r3, [r7, #14]
 80123fa:	4413      	add	r3, r2
 80123fc:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 80123fe:	7bbb      	ldrb	r3, [r7, #14]
 8012400:	08db      	lsrs	r3, r3, #3
 8012402:	b2da      	uxtb	r2, r3
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	4929      	ldr	r1, [pc, #164]	; (80124ac <lcd_write_line+0xec>)
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	440b      	add	r3, r1
 801240c:	785b      	ldrb	r3, [r3, #1]
 801240e:	4413      	add	r3, r2
 8012410:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012412:	7bbb      	ldrb	r3, [r7, #14]
 8012414:	f003 0307 	and.w	r3, r3, #7
 8012418:	73bb      	strb	r3, [r7, #14]
        break;
 801241a:	e01a      	b.n	8012452 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 801241c:	79fb      	ldrb	r3, [r7, #7]
 801241e:	4a25      	ldr	r2, [pc, #148]	; (80124b4 <lcd_write_line+0xf4>)
 8012420:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012424:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012426:	4b22      	ldr	r3, [pc, #136]	; (80124b0 <lcd_write_line+0xf0>)
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	005b      	lsls	r3, r3, #1
 801242c:	b2da      	uxtb	r2, r3
 801242e:	7bbb      	ldrb	r3, [r7, #14]
 8012430:	4413      	add	r3, r2
 8012432:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 8012434:	7bbb      	ldrb	r3, [r7, #14]
 8012436:	08db      	lsrs	r3, r3, #3
 8012438:	b2da      	uxtb	r2, r3
 801243a:	79fb      	ldrb	r3, [r7, #7]
 801243c:	491d      	ldr	r1, [pc, #116]	; (80124b4 <lcd_write_line+0xf4>)
 801243e:	005b      	lsls	r3, r3, #1
 8012440:	440b      	add	r3, r1
 8012442:	785b      	ldrb	r3, [r3, #1]
 8012444:	4413      	add	r3, r2
 8012446:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012448:	7bbb      	ldrb	r3, [r7, #14]
 801244a:	f003 0307 	and.w	r3, r3, #7
 801244e:	73bb      	strb	r3, [r7, #14]
        break;
 8012450:	bf00      	nop
    }

    if (data)
 8012452:	79bb      	ldrb	r3, [r7, #6]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00f      	beq.n	8012478 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	4a17      	ldr	r2, [pc, #92]	; (80124b8 <lcd_write_line+0xf8>)
 801245c:	5cd3      	ldrb	r3, [r2, r3]
 801245e:	b25a      	sxtb	r2, r3
 8012460:	7bbb      	ldrb	r3, [r7, #14]
 8012462:	2101      	movs	r1, #1
 8012464:	fa01 f303 	lsl.w	r3, r1, r3
 8012468:	b25b      	sxtb	r3, r3
 801246a:	4313      	orrs	r3, r2
 801246c:	b25a      	sxtb	r2, r3
 801246e:	7bfb      	ldrb	r3, [r7, #15]
 8012470:	b2d1      	uxtb	r1, r2
 8012472:	4a11      	ldr	r2, [pc, #68]	; (80124b8 <lcd_write_line+0xf8>)
 8012474:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 8012476:	e010      	b.n	801249a <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012478:	7bfb      	ldrb	r3, [r7, #15]
 801247a:	4a0f      	ldr	r2, [pc, #60]	; (80124b8 <lcd_write_line+0xf8>)
 801247c:	5cd3      	ldrb	r3, [r2, r3]
 801247e:	b25a      	sxtb	r2, r3
 8012480:	7bbb      	ldrb	r3, [r7, #14]
 8012482:	2101      	movs	r1, #1
 8012484:	fa01 f303 	lsl.w	r3, r1, r3
 8012488:	b25b      	sxtb	r3, r3
 801248a:	43db      	mvns	r3, r3
 801248c:	b25b      	sxtb	r3, r3
 801248e:	4013      	ands	r3, r2
 8012490:	b25a      	sxtb	r2, r3
 8012492:	7bfb      	ldrb	r3, [r7, #15]
 8012494:	b2d1      	uxtb	r1, r2
 8012496:	4a08      	ldr	r2, [pc, #32]	; (80124b8 <lcd_write_line+0xf8>)
 8012498:	54d1      	strb	r1, [r2, r3]
}
 801249a:	bf00      	nop
 801249c:	3714      	adds	r7, #20
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	20001d0d 	.word	0x20001d0d
 80124ac:	20000120 	.word	0x20000120
 80124b0:	20001d0c 	.word	0x20001d0c
 80124b4:	20000130 	.word	0x20000130
 80124b8:	20001da0 	.word	0x20001da0

080124bc <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	4603      	mov	r3, r0
 80124c4:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 80124c6:	79fb      	ldrb	r3, [r7, #7]
 80124c8:	f003 031f 	and.w	r3, r3, #31
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	7b3b      	ldrb	r3, [r7, #12]
 80124d0:	f362 0304 	bfi	r3, r2, #0, #5
 80124d4:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80124d6:	7b3b      	ldrb	r3, [r7, #12]
 80124d8:	f36f 1346 	bfc	r3, #5, #2
 80124dc:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80124de:	7b3b      	ldrb	r3, [r7, #12]
 80124e0:	f36f 13c7 	bfc	r3, #7, #1
 80124e4:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80124e6:	2314      	movs	r3, #20
 80124e8:	f107 010c 	add.w	r1, r7, #12
 80124ec:	2201      	movs	r2, #1
 80124ee:	4803      	ldr	r0, [pc, #12]	; (80124fc <prepare_to_send+0x40>)
 80124f0:	f7f7 fa56 	bl	80099a0 <HAL_SPI_Transmit>
}
 80124f4:	bf00      	nop
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	20001d10 	.word	0x20001d10

08012500 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 8012504:	4b29      	ldr	r3, [pc, #164]	; (80125ac <spi1_init+0xac>)
 8012506:	4a2a      	ldr	r2, [pc, #168]	; (80125b0 <spi1_init+0xb0>)
 8012508:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 801250a:	4b28      	ldr	r3, [pc, #160]	; (80125ac <spi1_init+0xac>)
 801250c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8012510:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 8012512:	4b26      	ldr	r3, [pc, #152]	; (80125ac <spi1_init+0xac>)
 8012514:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012518:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801251a:	4b24      	ldr	r3, [pc, #144]	; (80125ac <spi1_init+0xac>)
 801251c:	2207      	movs	r2, #7
 801251e:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012520:	4b22      	ldr	r3, [pc, #136]	; (80125ac <spi1_init+0xac>)
 8012522:	2200      	movs	r2, #0
 8012524:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012526:	4b21      	ldr	r3, [pc, #132]	; (80125ac <spi1_init+0xac>)
 8012528:	2200      	movs	r2, #0
 801252a:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 801252c:	4b1f      	ldr	r3, [pc, #124]	; (80125ac <spi1_init+0xac>)
 801252e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012532:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012534:	4b1d      	ldr	r3, [pc, #116]	; (80125ac <spi1_init+0xac>)
 8012536:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801253a:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801253c:	4b1b      	ldr	r3, [pc, #108]	; (80125ac <spi1_init+0xac>)
 801253e:	2200      	movs	r2, #0
 8012540:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012542:	4b1a      	ldr	r3, [pc, #104]	; (80125ac <spi1_init+0xac>)
 8012544:	2200      	movs	r2, #0
 8012546:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012548:	4b18      	ldr	r3, [pc, #96]	; (80125ac <spi1_init+0xac>)
 801254a:	2200      	movs	r2, #0
 801254c:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 801254e:	4b17      	ldr	r3, [pc, #92]	; (80125ac <spi1_init+0xac>)
 8012550:	2207      	movs	r2, #7
 8012552:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012554:	4b15      	ldr	r3, [pc, #84]	; (80125ac <spi1_init+0xac>)
 8012556:	2200      	movs	r2, #0
 8012558:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801255a:	4b14      	ldr	r3, [pc, #80]	; (80125ac <spi1_init+0xac>)
 801255c:	2200      	movs	r2, #0
 801255e:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012560:	4b12      	ldr	r3, [pc, #72]	; (80125ac <spi1_init+0xac>)
 8012562:	2200      	movs	r2, #0
 8012564:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8012566:	4b11      	ldr	r3, [pc, #68]	; (80125ac <spi1_init+0xac>)
 8012568:	2200      	movs	r2, #0
 801256a:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801256c:	4b0f      	ldr	r3, [pc, #60]	; (80125ac <spi1_init+0xac>)
 801256e:	2200      	movs	r2, #0
 8012570:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8012572:	4b0e      	ldr	r3, [pc, #56]	; (80125ac <spi1_init+0xac>)
 8012574:	2200      	movs	r2, #0
 8012576:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012578:	4b0c      	ldr	r3, [pc, #48]	; (80125ac <spi1_init+0xac>)
 801257a:	2200      	movs	r2, #0
 801257c:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801257e:	4b0b      	ldr	r3, [pc, #44]	; (80125ac <spi1_init+0xac>)
 8012580:	2200      	movs	r2, #0
 8012582:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8012584:	4b09      	ldr	r3, [pc, #36]	; (80125ac <spi1_init+0xac>)
 8012586:	2200      	movs	r2, #0
 8012588:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 801258a:	4b08      	ldr	r3, [pc, #32]	; (80125ac <spi1_init+0xac>)
 801258c:	2200      	movs	r2, #0
 801258e:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012590:	4b06      	ldr	r3, [pc, #24]	; (80125ac <spi1_init+0xac>)
 8012592:	2200      	movs	r2, #0
 8012594:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 8012596:	4805      	ldr	r0, [pc, #20]	; (80125ac <spi1_init+0xac>)
 8012598:	f7f7 f8ec 	bl	8009774 <HAL_SPI_Init>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <spi1_init+0xa6>
    {
        Error_Handler();
 80125a2:	f7ee fe95 	bl	80012d0 <Error_Handler>
    }
}
 80125a6:	bf00      	nop
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	20001d10 	.word	0x20001d10
 80125b0:	40013000 	.word	0x40013000

080125b4 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	4603      	mov	r3, r0
 80125bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80125be:	2200      	movs	r2, #0
 80125c0:	2110      	movs	r1, #16
 80125c2:	480f      	ldr	r0, [pc, #60]	; (8012600 <pcf8553_blink+0x4c>)
 80125c4:	f7f1 fec4 	bl	8004350 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80125c8:	79fb      	ldrb	r3, [r7, #7]
 80125ca:	f003 0303 	and.w	r3, r3, #3
 80125ce:	b2d9      	uxtb	r1, r3
 80125d0:	4a0c      	ldr	r2, [pc, #48]	; (8012604 <pcf8553_blink+0x50>)
 80125d2:	7813      	ldrb	r3, [r2, #0]
 80125d4:	f361 0342 	bfi	r3, r1, #1, #2
 80125d8:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80125da:	2003      	movs	r0, #3
 80125dc:	f7ff ff6e 	bl	80124bc <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80125e0:	2314      	movs	r3, #20
 80125e2:	2201      	movs	r2, #1
 80125e4:	4907      	ldr	r1, [pc, #28]	; (8012604 <pcf8553_blink+0x50>)
 80125e6:	4808      	ldr	r0, [pc, #32]	; (8012608 <pcf8553_blink+0x54>)
 80125e8:	f7f7 f9da 	bl	80099a0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80125ec:	2201      	movs	r2, #1
 80125ee:	2110      	movs	r1, #16
 80125f0:	4803      	ldr	r0, [pc, #12]	; (8012600 <pcf8553_blink+0x4c>)
 80125f2:	f7f1 fead 	bl	8004350 <HAL_GPIO_WritePin>
}
 80125f6:	bf00      	nop
 80125f8:	3708      	adds	r7, #8
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	42020000 	.word	0x42020000
 8012604:	20001db8 	.word	0x20001db8
 8012608:	20001d10 	.word	0x20001d10

0801260c <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012612:	2300      	movs	r3, #0
 8012614:	607b      	str	r3, [r7, #4]
 8012616:	e007      	b.n	8012628 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 8012618:	4a08      	ldr	r2, [pc, #32]	; (801263c <pcf8553_clear_buff+0x30>)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4413      	add	r3, r2
 801261e:	2200      	movs	r2, #0
 8012620:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	3301      	adds	r3, #1
 8012626:	607b      	str	r3, [r7, #4]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b13      	cmp	r3, #19
 801262c:	ddf4      	ble.n	8012618 <pcf8553_clear_buff+0xc>
    }
}
 801262e:	bf00      	nop
 8012630:	bf00      	nop
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	20001da0 	.word	0x20001da0

08012640 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012646:	2200      	movs	r2, #0
 8012648:	2110      	movs	r1, #16
 801264a:	4810      	ldr	r0, [pc, #64]	; (801268c <pcf8553_dump+0x4c>)
 801264c:	f7f1 fe80 	bl	8004350 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012650:	2004      	movs	r0, #4
 8012652:	f7ff ff33 	bl	80124bc <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012656:	2300      	movs	r3, #0
 8012658:	607b      	str	r3, [r7, #4]
 801265a:	e00a      	b.n	8012672 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4a0c      	ldr	r2, [pc, #48]	; (8012690 <pcf8553_dump+0x50>)
 8012660:	1899      	adds	r1, r3, r2
 8012662:	2314      	movs	r3, #20
 8012664:	2201      	movs	r2, #1
 8012666:	480b      	ldr	r0, [pc, #44]	; (8012694 <pcf8553_dump+0x54>)
 8012668:	f7f7 f99a 	bl	80099a0 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	3301      	adds	r3, #1
 8012670:	607b      	str	r3, [r7, #4]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b13      	cmp	r3, #19
 8012676:	ddf1      	ble.n	801265c <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012678:	2201      	movs	r2, #1
 801267a:	2110      	movs	r1, #16
 801267c:	4803      	ldr	r0, [pc, #12]	; (801268c <pcf8553_dump+0x4c>)
 801267e:	f7f1 fe67 	bl	8004350 <HAL_GPIO_WritePin>
}
 8012682:	bf00      	nop
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	42020000 	.word	0x42020000
 8012690:	20001da0 	.word	0x20001da0
 8012694:	20001d10 	.word	0x20001d10

08012698 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
    spi1_init();
 801269c:	f7ff ff30 	bl	8012500 <spi1_init>
    pcf8553_reset();
 80126a0:	f000 f830 	bl	8012704 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 80126a4:	2314      	movs	r3, #20
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7ef f97a 	bl	80019a0 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80126ac:	2200      	movs	r2, #0
 80126ae:	2110      	movs	r1, #16
 80126b0:	480f      	ldr	r0, [pc, #60]	; (80126f0 <pcf8553_init+0x58>)
 80126b2:	f7f1 fe4d 	bl	8004350 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 80126b6:	2001      	movs	r0, #1
 80126b8:	f7ff ff00 	bl	80124bc <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 80126bc:	2314      	movs	r3, #20
 80126be:	2201      	movs	r2, #1
 80126c0:	490c      	ldr	r1, [pc, #48]	; (80126f4 <pcf8553_init+0x5c>)
 80126c2:	480d      	ldr	r0, [pc, #52]	; (80126f8 <pcf8553_init+0x60>)
 80126c4:	f7f7 f96c 	bl	80099a0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80126c8:	2314      	movs	r3, #20
 80126ca:	2201      	movs	r2, #1
 80126cc:	490b      	ldr	r1, [pc, #44]	; (80126fc <pcf8553_init+0x64>)
 80126ce:	480a      	ldr	r0, [pc, #40]	; (80126f8 <pcf8553_init+0x60>)
 80126d0:	f7f7 f966 	bl	80099a0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80126d4:	2314      	movs	r3, #20
 80126d6:	2201      	movs	r2, #1
 80126d8:	4909      	ldr	r1, [pc, #36]	; (8012700 <pcf8553_init+0x68>)
 80126da:	4807      	ldr	r0, [pc, #28]	; (80126f8 <pcf8553_init+0x60>)
 80126dc:	f7f7 f960 	bl	80099a0 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80126e0:	2201      	movs	r2, #1
 80126e2:	2110      	movs	r1, #16
 80126e4:	4802      	ldr	r0, [pc, #8]	; (80126f0 <pcf8553_init+0x58>)
 80126e6:	f7f1 fe33 	bl	8004350 <HAL_GPIO_WritePin>
}
 80126ea:	bf00      	nop
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	42020000 	.word	0x42020000
 80126f4:	20001db4 	.word	0x20001db4
 80126f8:	20001d10 	.word	0x20001d10
 80126fc:	20000140 	.word	0x20000140
 8012700:	20001db8 	.word	0x20001db8

08012704 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 8012704:	b580      	push	{r7, lr}
 8012706:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 8012708:	2200      	movs	r2, #0
 801270a:	2140      	movs	r1, #64	; 0x40
 801270c:	4806      	ldr	r0, [pc, #24]	; (8012728 <pcf8553_reset+0x24>)
 801270e:	f7f1 fe1f 	bl	8004350 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 8012712:	2314      	movs	r3, #20
 8012714:	4618      	mov	r0, r3
 8012716:	f7ef f943 	bl	80019a0 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 801271a:	2201      	movs	r2, #1
 801271c:	2140      	movs	r1, #64	; 0x40
 801271e:	4802      	ldr	r0, [pc, #8]	; (8012728 <pcf8553_reset+0x24>)
 8012720:	f7f1 fe16 	bl	8004350 <HAL_GPIO_WritePin>
}
 8012724:	bf00      	nop
 8012726:	bd80      	pop	{r7, pc}
 8012728:	42020000 	.word	0x42020000

0801272c <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	4603      	mov	r3, r0
 8012734:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012736:	2300      	movs	r3, #0
 8012738:	60fb      	str	r3, [r7, #12]
 801273a:	e007      	b.n	801274c <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 801273c:	4a08      	ldr	r2, [pc, #32]	; (8012760 <pcf8553_write_all+0x34>)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	79fa      	ldrb	r2, [r7, #7]
 8012744:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	3301      	adds	r3, #1
 801274a:	60fb      	str	r3, [r7, #12]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	2b13      	cmp	r3, #19
 8012750:	ddf4      	ble.n	801273c <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012752:	f7ff ff75 	bl	8012640 <pcf8553_dump>
}
 8012756:	bf00      	nop
 8012758:	3710      	adds	r7, #16
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	20001da0 	.word	0x20001da0

08012764 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012764:	b5b0      	push	{r4, r5, r7, lr}
 8012766:	b0b4      	sub	sp, #208	; 0xd0
 8012768:	af00      	add	r7, sp, #0
 801276a:	4603      	mov	r3, r0
 801276c:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 801276e:	4b9d      	ldr	r3, [pc, #628]	; (80129e4 <fm_menu_config_date_hour+0x280>)
 8012770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 8012774:	4b9c      	ldr	r3, [pc, #624]	; (80129e8 <fm_menu_config_date_hour+0x284>)
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d107      	bne.n	801278c <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 801277c:	4b9b      	ldr	r3, [pc, #620]	; (80129ec <fm_menu_config_date_hour+0x288>)
 801277e:	2200      	movs	r2, #0
 8012780:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012782:	f7fd f95e 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8012786:	4b98      	ldr	r3, [pc, #608]	; (80129e8 <fm_menu_config_date_hour+0x284>)
 8012788:	2200      	movs	r2, #0
 801278a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 801278c:	4b97      	ldr	r3, [pc, #604]	; (80129ec <fm_menu_config_date_hour+0x288>)
 801278e:	781a      	ldrb	r2, [r3, #0]
 8012790:	79fb      	ldrb	r3, [r7, #7]
 8012792:	4619      	mov	r1, r3
 8012794:	2001      	movs	r0, #1
 8012796:	f7fd f95b 	bl	800fa50 <fm_lcd_date_hour>
    fm_lcd_refresh();
 801279a:	f7fd fce8 	bl	801016e <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 801279e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fc fbee 	bl	800ef84 <fm_factory_get_date_time>
 80127a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127aa:	b2da      	uxtb	r2, r3
 80127ac:	4b90      	ldr	r3, [pc, #576]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80127ae:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 80127b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fc fbe5 	bl	800ef84 <fm_factory_get_date_time>
 80127ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127bc:	b2da      	uxtb	r2, r3
 80127be:	4b8d      	ldr	r3, [pc, #564]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80127c0:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 80127c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fc fbdc 	bl	800ef84 <fm_factory_get_date_time>
 80127cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127ce:	b2da      	uxtb	r2, r3
 80127d0:	4b89      	ldr	r3, [pc, #548]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 80127d2:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 80127d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fc fbd3 	bl	800ef84 <fm_factory_get_date_time>
 80127de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80127e2:	b2da      	uxtb	r2, r3
 80127e4:	4b85      	ldr	r3, [pc, #532]	; (80129fc <fm_menu_config_date_hour+0x298>)
 80127e6:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 80127e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fc fbc9 	bl	800ef84 <fm_factory_get_date_time>
 80127f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127f6:	b2da      	uxtb	r2, r3
 80127f8:	4b81      	ldr	r3, [pc, #516]	; (8012a00 <fm_menu_config_date_hour+0x29c>)
 80127fa:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 80127fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012800:	4618      	mov	r0, r3
 8012802:	f7fc fbbf 	bl	800ef84 <fm_factory_get_date_time>
 8012806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801280a:	b2da      	uxtb	r2, r3
 801280c:	4b7d      	ldr	r3, [pc, #500]	; (8012a04 <fm_menu_config_date_hour+0x2a0>)
 801280e:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012810:	79fb      	ldrb	r3, [r7, #7]
 8012812:	3b01      	subs	r3, #1
 8012814:	2b04      	cmp	r3, #4
 8012816:	f200 83be 	bhi.w	8012f96 <fm_menu_config_date_hour+0x832>
 801281a:	a201      	add	r2, pc, #4	; (adr r2, 8012820 <fm_menu_config_date_hour+0xbc>)
 801281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012820:	08012f97 	.word	0x08012f97
 8012824:	08012835 	.word	0x08012835
 8012828:	08012b89 	.word	0x08012b89
 801282c:	08012ef9 	.word	0x08012ef9
 8012830:	08012f75 	.word	0x08012f75
    {
        case EVENT_KEY_UP:
            if(correct_password)
 8012834:	4b74      	ldr	r3, [pc, #464]	; (8012a08 <fm_menu_config_date_hour+0x2a4>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 83ae 	beq.w	8012f9a <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 801283e:	4b6b      	ldr	r3, [pc, #428]	; (80129ec <fm_menu_config_date_hour+0x288>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	f040 809b 	bne.w	801297e <fm_menu_config_date_hour+0x21a>
                {
                    if(month_enum == JANUARY ||
 8012848:	4b6a      	ldr	r3, [pc, #424]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d017      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == MARCH      ||
 8012850:	4b68      	ldr	r3, [pc, #416]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012852:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 8012854:	2b03      	cmp	r3, #3
 8012856:	d013      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == MAY        ||
 8012858:	4b66      	ldr	r3, [pc, #408]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801285a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 801285c:	2b05      	cmp	r3, #5
 801285e:	d00f      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == JULY       ||
 8012860:	4b64      	ldr	r3, [pc, #400]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012862:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 8012864:	2b07      	cmp	r3, #7
 8012866:	d00b      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == AUGUST     ||
 8012868:	4b62      	ldr	r3, [pc, #392]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801286a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 801286c:	2b08      	cmp	r3, #8
 801286e:	d007      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == OCTOBER    ||
 8012870:	4b60      	ldr	r3, [pc, #384]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012872:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 8012874:	2b0a      	cmp	r3, #10
 8012876:	d003      	beq.n	8012880 <fm_menu_config_date_hour+0x11c>
                    month_enum == DECEMBER)
 8012878:	4b5e      	ldr	r3, [pc, #376]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801287a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 801287c:	2b0c      	cmp	r3, #12
 801287e:	d119      	bne.n	80128b4 <fm_menu_config_date_hour+0x150>
                    {
                        if(day_enum < DAY_31)
 8012880:	4b5b      	ldr	r3, [pc, #364]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b1e      	cmp	r3, #30
 8012886:	d80b      	bhi.n	80128a0 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum +
 8012888:	4b59      	ldr	r3, [pc, #356]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	3301      	adds	r3, #1
 801288e:	4a59      	ldr	r2, [pc, #356]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012890:	7812      	ldrb	r2, [r2, #0]
 8012892:	4611      	mov	r1, r2
 8012894:	4a58      	ldr	r2, [pc, #352]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 8012896:	7812      	ldrb	r2, [r2, #0]
 8012898:	4618      	mov	r0, r3
 801289a:	f7fc fbf1 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 801289e:	e168      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 80128a0:	4b54      	ldr	r3, [pc, #336]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	4619      	mov	r1, r3
 80128a6:	4b54      	ldr	r3, [pc, #336]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	461a      	mov	r2, r3
 80128ac:	2001      	movs	r0, #1
 80128ae:	f7fc fbe7 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 80128b2:	e15e      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 80128b4:	4b4f      	ldr	r3, [pc, #316]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	2b04      	cmp	r3, #4
 80128ba:	d00b      	beq.n	80128d4 <fm_menu_config_date_hour+0x170>
                    month_enum == JUNE          ||
 80128bc:	4b4d      	ldr	r3, [pc, #308]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128be:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 80128c0:	2b06      	cmp	r3, #6
 80128c2:	d007      	beq.n	80128d4 <fm_menu_config_date_hour+0x170>
                    month_enum == SEPTEMBER     ||
 80128c4:	4b4b      	ldr	r3, [pc, #300]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 80128c8:	2b09      	cmp	r3, #9
 80128ca:	d003      	beq.n	80128d4 <fm_menu_config_date_hour+0x170>
                    month_enum == NOVEMBER)
 80128cc:	4b49      	ldr	r3, [pc, #292]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 80128d0:	2b0b      	cmp	r3, #11
 80128d2:	d119      	bne.n	8012908 <fm_menu_config_date_hour+0x1a4>
                    {
                        if(day_enum < DAY_30)
 80128d4:	4b46      	ldr	r3, [pc, #280]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	2b1d      	cmp	r3, #29
 80128da:	d80b      	bhi.n	80128f4 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 80128dc:	4b44      	ldr	r3, [pc, #272]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	3301      	adds	r3, #1
 80128e2:	4a44      	ldr	r2, [pc, #272]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128e4:	7812      	ldrb	r2, [r2, #0]
 80128e6:	4611      	mov	r1, r2
 80128e8:	4a43      	ldr	r2, [pc, #268]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 80128ea:	7812      	ldrb	r2, [r2, #0]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fc fbc7 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 80128f2:	e13e      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 80128f4:	4b3f      	ldr	r3, [pc, #252]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	4619      	mov	r1, r3
 80128fa:	4b3f      	ldr	r3, [pc, #252]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	2001      	movs	r0, #1
 8012902:	f7fc fbbd 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 8012906:	e134      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012908:	4b3b      	ldr	r3, [pc, #236]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	f003 0303 	and.w	r3, r3, #3
 8012910:	b2db      	uxtb	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	d119      	bne.n	801294a <fm_menu_config_date_hour+0x1e6>
                        {
                            if(day_enum < DAY_29)
 8012916:	4b36      	ldr	r3, [pc, #216]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	2b1c      	cmp	r3, #28
 801291c:	d80b      	bhi.n	8012936 <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 801291e:	4b34      	ldr	r3, [pc, #208]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	3301      	adds	r3, #1
 8012924:	4a33      	ldr	r2, [pc, #204]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012926:	7812      	ldrb	r2, [r2, #0]
 8012928:	4611      	mov	r1, r2
 801292a:	4a33      	ldr	r2, [pc, #204]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 801292c:	7812      	ldrb	r2, [r2, #0]
 801292e:	4618      	mov	r0, r3
 8012930:	f7fc fba6 	bl	800f080 <fm_factory_modify_date>
 8012934:	e11d      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012936:	4b2f      	ldr	r3, [pc, #188]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	4619      	mov	r1, r3
 801293c:	4b2e      	ldr	r3, [pc, #184]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	2001      	movs	r0, #1
 8012944:	f7fc fb9c 	bl	800f080 <fm_factory_modify_date>
 8012948:	e113      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 801294a:	4b29      	ldr	r3, [pc, #164]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	2b1b      	cmp	r3, #27
 8012950:	d80b      	bhi.n	801296a <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012952:	4b27      	ldr	r3, [pc, #156]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	3301      	adds	r3, #1
 8012958:	4a26      	ldr	r2, [pc, #152]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801295a:	7812      	ldrb	r2, [r2, #0]
 801295c:	4611      	mov	r1, r2
 801295e:	4a26      	ldr	r2, [pc, #152]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 8012960:	7812      	ldrb	r2, [r2, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f7fc fb8c 	bl	800f080 <fm_factory_modify_date>
 8012968:	e103      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801296a:	4b22      	ldr	r3, [pc, #136]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	4619      	mov	r1, r3
 8012970:	4b21      	ldr	r3, [pc, #132]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	461a      	mov	r2, r3
 8012976:	2001      	movs	r0, #1
 8012978:	f7fc fb82 	bl	800f080 <fm_factory_modify_date>
 801297c:	e0f9      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 801297e:	4b1b      	ldr	r3, [pc, #108]	; (80129ec <fm_menu_config_date_hour+0x288>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d16a      	bne.n	8012a5c <fm_menu_config_date_hour+0x2f8>
                {
                    if(month_enum < DECEMBER)
 8012986:	4b1b      	ldr	r3, [pc, #108]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	2b0b      	cmp	r3, #11
 801298c:	d85c      	bhi.n	8012a48 <fm_menu_config_date_hour+0x2e4>
                    {
                        if((month_enum + 1 == APRIL ||
 801298e:	4b19      	ldr	r3, [pc, #100]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b03      	cmp	r3, #3
 8012994:	d00b      	beq.n	80129ae <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == JUNE      ||
 8012996:	4b17      	ldr	r3, [pc, #92]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 8012998:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 801299a:	2b05      	cmp	r3, #5
 801299c:	d007      	beq.n	80129ae <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == SEPTEMBER ||
 801299e:	4b15      	ldr	r3, [pc, #84]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 80129a2:	2b08      	cmp	r3, #8
 80129a4:	d003      	beq.n	80129ae <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == NOVEMBER)
 80129a6:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 80129aa:	2b0a      	cmp	r3, #10
 80129ac:	d107      	bne.n	80129be <fm_menu_config_date_hour+0x25a>
                        && (day_enum > DAY_30))
 80129ae:	4b10      	ldr	r3, [pc, #64]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	2b1e      	cmp	r3, #30
 80129b4:	d903      	bls.n	80129be <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 80129b6:	4b0e      	ldr	r3, [pc, #56]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80129b8:	221e      	movs	r2, #30
 80129ba:	701a      	strb	r2, [r3, #0]
 80129bc:	e038      	b.n	8012a30 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 80129be:	4b0d      	ldr	r3, [pc, #52]	; (80129f4 <fm_menu_config_date_hour+0x290>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d122      	bne.n	8012a0c <fm_menu_config_date_hour+0x2a8>
                        (year_enum % YEAR_4 == 0) &&
 80129c6:	4b0c      	ldr	r3, [pc, #48]	; (80129f8 <fm_menu_config_date_hour+0x294>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	f003 0303 	and.w	r3, r3, #3
 80129ce:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d11b      	bne.n	8012a0c <fm_menu_config_date_hour+0x2a8>
                        (day_enum > DAY_29))
 80129d4:	4b06      	ldr	r3, [pc, #24]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80129d6:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 80129d8:	2b1d      	cmp	r3, #29
 80129da:	d917      	bls.n	8012a0c <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 80129dc:	4b04      	ldr	r3, [pc, #16]	; (80129f0 <fm_menu_config_date_hour+0x28c>)
 80129de:	221d      	movs	r2, #29
 80129e0:	701a      	strb	r2, [r3, #0]
 80129e2:	e025      	b.n	8012a30 <fm_menu_config_date_hour+0x2cc>
 80129e4:	08012765 	.word	0x08012765
 80129e8:	20000141 	.word	0x20000141
 80129ec:	20001dbd 	.word	0x20001dbd
 80129f0:	20001dbe 	.word	0x20001dbe
 80129f4:	20001dbf 	.word	0x20001dbf
 80129f8:	20001dc0 	.word	0x20001dc0
 80129fc:	20001dc1 	.word	0x20001dc1
 8012a00:	20001dc2 	.word	0x20001dc2
 8012a04:	20001dc3 	.word	0x20001dc3
 8012a08:	20001dba 	.word	0x20001dba
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 8012a0c:	4b93      	ldr	r3, [pc, #588]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d10d      	bne.n	8012a30 <fm_menu_config_date_hour+0x2cc>
                        (year_enum % YEAR_4 != 0) &&
 8012a14:	4b92      	ldr	r3, [pc, #584]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	f003 0303 	and.w	r3, r3, #3
 8012a1c:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d006      	beq.n	8012a30 <fm_menu_config_date_hour+0x2cc>
                        (day_enum > DAY_28))
 8012a22:	4b90      	ldr	r3, [pc, #576]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 8012a26:	2b1c      	cmp	r3, #28
 8012a28:	d902      	bls.n	8012a30 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012a2a:	4b8e      	ldr	r3, [pc, #568]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a2c:	221c      	movs	r2, #28
 8012a2e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012a30:	4b8c      	ldr	r3, [pc, #560]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	4618      	mov	r0, r3
 8012a36:	4b89      	ldr	r3, [pc, #548]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	4a88      	ldr	r2, [pc, #544]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a3e:	7812      	ldrb	r2, [r2, #0]
 8012a40:	4619      	mov	r1, r3
 8012a42:	f7fc fb1d 	bl	800f080 <fm_factory_modify_date>
 8012a46:	e094      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012a48:	4b86      	ldr	r3, [pc, #536]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	4b84      	ldr	r3, [pc, #528]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	461a      	mov	r2, r3
 8012a54:	2101      	movs	r1, #1
 8012a56:	f7fc fb13 	bl	800f080 <fm_factory_modify_date>
 8012a5a:	e08a      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == YEAR)
 8012a5c:	4b82      	ldr	r3, [pc, #520]	; (8012c68 <fm_menu_config_date_hour+0x504>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	2b02      	cmp	r3, #2
 8012a62:	d12c      	bne.n	8012abe <fm_menu_config_date_hour+0x35a>
                {
                    if(year_enum < YEAR_99)
 8012a64:	4b7e      	ldr	r3, [pc, #504]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	2b62      	cmp	r3, #98	; 0x62
 8012a6a:	d81e      	bhi.n	8012aaa <fm_menu_config_date_hour+0x346>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012a6c:	4b7c      	ldr	r3, [pc, #496]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	3301      	adds	r3, #1
 8012a72:	f003 0303 	and.w	r3, r3, #3
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d00a      	beq.n	8012a90 <fm_menu_config_date_hour+0x32c>
                        (month_enum == FEBRUARY) &&
 8012a7a:	4b78      	ldr	r3, [pc, #480]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012a7e:	2b02      	cmp	r3, #2
 8012a80:	d106      	bne.n	8012a90 <fm_menu_config_date_hour+0x32c>
                        (day_enum > DAY_28))
 8012a82:	4b78      	ldr	r3, [pc, #480]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a84:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 8012a86:	2b1c      	cmp	r3, #28
 8012a88:	d902      	bls.n	8012a90 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012a8a:	4b76      	ldr	r3, [pc, #472]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a8c:	221c      	movs	r2, #28
 8012a8e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 8012a90:	4b74      	ldr	r3, [pc, #464]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	4618      	mov	r0, r3
 8012a96:	4b71      	ldr	r3, [pc, #452]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	4b70      	ldr	r3, [pc, #448]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f7fc faec 	bl	800f080 <fm_factory_modify_date>
 8012aa8:	e063      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012aaa:	4b6e      	ldr	r3, [pc, #440]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	4b6a      	ldr	r3, [pc, #424]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	f7fc fae2 	bl	800f080 <fm_factory_modify_date>
 8012abc:	e059      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == HOUR)
 8012abe:	4b6a      	ldr	r3, [pc, #424]	; (8012c68 <fm_menu_config_date_hour+0x504>)
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b03      	cmp	r3, #3
 8012ac4:	d119      	bne.n	8012afa <fm_menu_config_date_hour+0x396>
                {
                    if(hour_enum < HOUR_23)
 8012ac6:	4b69      	ldr	r3, [pc, #420]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	2b16      	cmp	r3, #22
 8012acc:	d80b      	bhi.n	8012ae6 <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 8012ace:	4b67      	ldr	r3, [pc, #412]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	4a66      	ldr	r2, [pc, #408]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012ad6:	7812      	ldrb	r2, [r2, #0]
 8012ad8:	4611      	mov	r1, r2
 8012ada:	4a66      	ldr	r2, [pc, #408]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012adc:	7812      	ldrb	r2, [r2, #0]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7fc fafa 	bl	800f0d8 <fm_factory_modify_time>
 8012ae4:	e045      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012ae6:	4b62      	ldr	r3, [pc, #392]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	4b61      	ldr	r3, [pc, #388]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	2000      	movs	r0, #0
 8012af4:	f7fc faf0 	bl	800f0d8 <fm_factory_modify_time>
 8012af8:	e03b      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012afa:	4b5b      	ldr	r3, [pc, #364]	; (8012c68 <fm_menu_config_date_hour+0x504>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b04      	cmp	r3, #4
 8012b00:	d119      	bne.n	8012b36 <fm_menu_config_date_hour+0x3d2>
                {
                    if(minute_enum < MINU_59)
 8012b02:	4b5b      	ldr	r3, [pc, #364]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	2b3a      	cmp	r3, #58	; 0x3a
 8012b08:	d80b      	bhi.n	8012b22 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum,
 8012b0a:	4b58      	ldr	r3, [pc, #352]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	4b57      	ldr	r3, [pc, #348]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	3301      	adds	r3, #1
 8012b16:	4a57      	ldr	r2, [pc, #348]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012b18:	7812      	ldrb	r2, [r2, #0]
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	f7fc fadc 	bl	800f0d8 <fm_factory_modify_time>
 8012b20:	e027      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012b22:	4b52      	ldr	r3, [pc, #328]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	4618      	mov	r0, r3
 8012b28:	4b52      	ldr	r3, [pc, #328]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	2100      	movs	r1, #0
 8012b30:	f7fc fad2 	bl	800f0d8 <fm_factory_modify_time>
 8012b34:	e01d      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 8012b36:	4b4c      	ldr	r3, [pc, #304]	; (8012c68 <fm_menu_config_date_hour+0x504>)
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b05      	cmp	r3, #5
 8012b3c:	d119      	bne.n	8012b72 <fm_menu_config_date_hour+0x40e>
                {
                    if(second_enum < SEC_59)
 8012b3e:	4b4d      	ldr	r3, [pc, #308]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	2b3a      	cmp	r3, #58	; 0x3a
 8012b44:	d80c      	bhi.n	8012b60 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum,
 8012b46:	4b49      	ldr	r3, [pc, #292]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	4b48      	ldr	r3, [pc, #288]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	4619      	mov	r1, r3
 8012b52:	4b48      	ldr	r3, [pc, #288]	; (8012c74 <fm_menu_config_date_hour+0x510>)
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	3301      	adds	r3, #1
 8012b58:	461a      	mov	r2, r3
 8012b5a:	f7fc fabd 	bl	800f0d8 <fm_factory_modify_time>
 8012b5e:	e008      	b.n	8012b72 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012b60:	4b42      	ldr	r3, [pc, #264]	; (8012c6c <fm_menu_config_date_hour+0x508>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	4b42      	ldr	r3, [pc, #264]	; (8012c70 <fm_menu_config_date_hour+0x50c>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	f7fc fab3 	bl	800f0d8 <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012b72:	2301      	movs	r3, #1
 8012b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b78:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4619      	mov	r1, r3
 8012b80:	483d      	ldr	r0, [pc, #244]	; (8012c78 <fm_menu_config_date_hour+0x514>)
 8012b82:	f7fb fc8b 	bl	800e49c <_txe_queue_send>
            }
        break;
 8012b86:	e208      	b.n	8012f9a <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if(correct_password)
 8012b88:	4b3c      	ldr	r3, [pc, #240]	; (8012c7c <fm_menu_config_date_hour+0x518>)
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	f000 8206 	beq.w	8012f9e <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 8012b92:	4b35      	ldr	r3, [pc, #212]	; (8012c68 <fm_menu_config_date_hour+0x504>)
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f040 80ad 	bne.w	8012cf6 <fm_menu_config_date_hour+0x592>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 8012b9c:	4b2f      	ldr	r3, [pc, #188]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d017      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
 8012ba4:	4b2d      	ldr	r3, [pc, #180]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b03      	cmp	r3, #3
 8012baa:	d013      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 8012bac:	4b2b      	ldr	r3, [pc, #172]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 8012bb0:	2b05      	cmp	r3, #5
 8012bb2:	d00f      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 8012bb4:	4b29      	ldr	r3, [pc, #164]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	2b07      	cmp	r3, #7
 8012bba:	d00b      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012bbc:	4b27      	ldr	r3, [pc, #156]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 8012bc0:	2b08      	cmp	r3, #8
 8012bc2:	d007      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012bc4:	4b25      	ldr	r3, [pc, #148]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b0a      	cmp	r3, #10
 8012bca:	d003      	beq.n	8012bd4 <fm_menu_config_date_hour+0x470>
                    month_enum == DECEMBER)
 8012bcc:	4b23      	ldr	r3, [pc, #140]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bce:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012bd0:	2b0c      	cmp	r3, #12
 8012bd2:	d119      	bne.n	8012c08 <fm_menu_config_date_hour+0x4a4>
                    {
                        if(day_enum > DAY_1)
 8012bd4:	4b23      	ldr	r3, [pc, #140]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d90b      	bls.n	8012bf4 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012bdc:	4b21      	ldr	r3, [pc, #132]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	3b01      	subs	r3, #1
 8012be2:	4a1e      	ldr	r2, [pc, #120]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012be4:	7812      	ldrb	r2, [r2, #0]
 8012be6:	4611      	mov	r1, r2
 8012be8:	4a1d      	ldr	r2, [pc, #116]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012bea:	7812      	ldrb	r2, [r2, #0]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fc fa47 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012bf2:	e166      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012bf4:	4b19      	ldr	r3, [pc, #100]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	4b19      	ldr	r3, [pc, #100]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	201f      	movs	r0, #31
 8012c02:	f7fc fa3d 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012c06:	e15c      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012c08:	4b14      	ldr	r3, [pc, #80]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b04      	cmp	r3, #4
 8012c0e:	d00b      	beq.n	8012c28 <fm_menu_config_date_hour+0x4c4>
 8012c10:	4b12      	ldr	r3, [pc, #72]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b06      	cmp	r3, #6
 8012c16:	d007      	beq.n	8012c28 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012c18:	4b10      	ldr	r3, [pc, #64]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c1a:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012c1c:	2b09      	cmp	r3, #9
 8012c1e:	d003      	beq.n	8012c28 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012c20:	4b0e      	ldr	r3, [pc, #56]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	2b0b      	cmp	r3, #11
 8012c26:	d12b      	bne.n	8012c80 <fm_menu_config_date_hour+0x51c>
                    {
                        if(day_enum > DAY_1)
 8012c28:	4b0e      	ldr	r3, [pc, #56]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d90b      	bls.n	8012c48 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012c30:	4b0c      	ldr	r3, [pc, #48]	; (8012c64 <fm_menu_config_date_hour+0x500>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	3b01      	subs	r3, #1
 8012c36:	4a09      	ldr	r2, [pc, #36]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c38:	7812      	ldrb	r2, [r2, #0]
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4a08      	ldr	r2, [pc, #32]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012c3e:	7812      	ldrb	r2, [r2, #0]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fc fa1d 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012c46:	e13c      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012c48:	4b04      	ldr	r3, [pc, #16]	; (8012c5c <fm_menu_config_date_hour+0x4f8>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <fm_menu_config_date_hour+0x4fc>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	461a      	mov	r2, r3
 8012c54:	201e      	movs	r0, #30
 8012c56:	f7fc fa13 	bl	800f080 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012c5a:	e132      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
 8012c5c:	20001dbf 	.word	0x20001dbf
 8012c60:	20001dc0 	.word	0x20001dc0
 8012c64:	20001dbe 	.word	0x20001dbe
 8012c68:	20001dbd 	.word	0x20001dbd
 8012c6c:	20001dc1 	.word	0x20001dc1
 8012c70:	20001dc2 	.word	0x20001dc2
 8012c74:	20001dc3 	.word	0x20001dc3
 8012c78:	20001388 	.word	0x20001388
 8012c7c:	20001dba 	.word	0x20001dba
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012c80:	4b95      	ldr	r3, [pc, #596]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f003 0303 	and.w	r3, r3, #3
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d119      	bne.n	8012cc2 <fm_menu_config_date_hour+0x55e>
                        {
                            if(day_enum > DAY_1)
 8012c8e:	4b93      	ldr	r3, [pc, #588]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d90b      	bls.n	8012cae <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012c96:	4b91      	ldr	r3, [pc, #580]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	4a90      	ldr	r2, [pc, #576]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012c9e:	7812      	ldrb	r2, [r2, #0]
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	4a8d      	ldr	r2, [pc, #564]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012ca4:	7812      	ldrb	r2, [r2, #0]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fc f9ea 	bl	800f080 <fm_factory_modify_date>
 8012cac:	e109      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012cae:	4b8c      	ldr	r3, [pc, #560]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4b88      	ldr	r3, [pc, #544]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	461a      	mov	r2, r3
 8012cba:	201d      	movs	r0, #29
 8012cbc:	f7fc f9e0 	bl	800f080 <fm_factory_modify_date>
 8012cc0:	e0ff      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 8012cc2:	4b86      	ldr	r3, [pc, #536]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d90b      	bls.n	8012ce2 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012cca:	4b84      	ldr	r3, [pc, #528]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	4a83      	ldr	r2, [pc, #524]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012cd2:	7812      	ldrb	r2, [r2, #0]
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4a80      	ldr	r2, [pc, #512]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012cd8:	7812      	ldrb	r2, [r2, #0]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fc f9d0 	bl	800f080 <fm_factory_modify_date>
 8012ce0:	e0ef      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012ce2:	4b7f      	ldr	r3, [pc, #508]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4b7b      	ldr	r3, [pc, #492]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	461a      	mov	r2, r3
 8012cee:	201c      	movs	r0, #28
 8012cf0:	f7fc f9c6 	bl	800f080 <fm_factory_modify_date>
 8012cf4:	e0e5      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 8012cf6:	4b7b      	ldr	r3, [pc, #492]	; (8012ee4 <fm_menu_config_date_hour+0x780>)
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d156      	bne.n	8012dac <fm_menu_config_date_hour+0x648>
                {
                    if(month_enum > JANUARY)
 8012cfe:	4b78      	ldr	r3, [pc, #480]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d948      	bls.n	8012d98 <fm_menu_config_date_hour+0x634>
                    {
                        if((month_enum - 1 == APRIL ||
 8012d06:	4b76      	ldr	r3, [pc, #472]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	2b05      	cmp	r3, #5
 8012d0c:	d00b      	beq.n	8012d26 <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == JUNE      ||
 8012d0e:	4b74      	ldr	r3, [pc, #464]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 8012d12:	2b07      	cmp	r3, #7
 8012d14:	d007      	beq.n	8012d26 <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == SEPTEMBER ||
 8012d16:	4b72      	ldr	r3, [pc, #456]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 8012d1a:	2b0a      	cmp	r3, #10
 8012d1c:	d003      	beq.n	8012d26 <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012d1e:	4b70      	ldr	r3, [pc, #448]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d20:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 8012d22:	2b0c      	cmp	r3, #12
 8012d24:	d107      	bne.n	8012d36 <fm_menu_config_date_hour+0x5d2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012d26:	4b6d      	ldr	r3, [pc, #436]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b1e      	cmp	r3, #30
 8012d2c:	d903      	bls.n	8012d36 <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012d2e:	4b6b      	ldr	r3, [pc, #428]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d30:	221e      	movs	r2, #30
 8012d32:	701a      	strb	r2, [r3, #0]
 8012d34:	e024      	b.n	8012d80 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012d36:	4b6a      	ldr	r3, [pc, #424]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	2b03      	cmp	r3, #3
 8012d3c:	d10e      	bne.n	8012d5c <fm_menu_config_date_hour+0x5f8>
                        (year_enum % YEAR_4 == 0) &&
 8012d3e:	4b66      	ldr	r3, [pc, #408]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	f003 0303 	and.w	r3, r3, #3
 8012d46:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d107      	bne.n	8012d5c <fm_menu_config_date_hour+0x5f8>
                        (day_enum > DAY_29))
 8012d4c:	4b63      	ldr	r3, [pc, #396]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 8012d50:	2b1d      	cmp	r3, #29
 8012d52:	d903      	bls.n	8012d5c <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012d54:	4b61      	ldr	r3, [pc, #388]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d56:	221d      	movs	r2, #29
 8012d58:	701a      	strb	r2, [r3, #0]
 8012d5a:	e011      	b.n	8012d80 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012d5c:	4b60      	ldr	r3, [pc, #384]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	2b03      	cmp	r3, #3
 8012d62:	d10d      	bne.n	8012d80 <fm_menu_config_date_hour+0x61c>
                        (year_enum % YEAR_4 != 0) &&
 8012d64:	4b5c      	ldr	r3, [pc, #368]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	f003 0303 	and.w	r3, r3, #3
 8012d6c:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d006      	beq.n	8012d80 <fm_menu_config_date_hour+0x61c>
                        (day_enum > DAY_28))
 8012d72:	4b5a      	ldr	r3, [pc, #360]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 8012d76:	2b1c      	cmp	r3, #28
 8012d78:	d902      	bls.n	8012d80 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012d7a:	4b58      	ldr	r3, [pc, #352]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d7c:	221c      	movs	r2, #28
 8012d7e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012d80:	4b56      	ldr	r3, [pc, #344]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	4618      	mov	r0, r3
 8012d86:	4b56      	ldr	r3, [pc, #344]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	4a52      	ldr	r2, [pc, #328]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012d8e:	7812      	ldrb	r2, [r2, #0]
 8012d90:	4619      	mov	r1, r3
 8012d92:	f7fc f975 	bl	800f080 <fm_factory_modify_date>
 8012d96:	e094      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8012d98:	4b50      	ldr	r3, [pc, #320]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	4b4e      	ldr	r3, [pc, #312]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	461a      	mov	r2, r3
 8012da4:	210c      	movs	r1, #12
 8012da6:	f7fc f96b 	bl	800f080 <fm_factory_modify_date>
 8012daa:	e08a      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == YEAR)
 8012dac:	4b4d      	ldr	r3, [pc, #308]	; (8012ee4 <fm_menu_config_date_hour+0x780>)
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	2b02      	cmp	r3, #2
 8012db2:	d12c      	bne.n	8012e0e <fm_menu_config_date_hour+0x6aa>
                {
                    if(year_enum > YEAR_0)
 8012db4:	4b48      	ldr	r3, [pc, #288]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d01e      	beq.n	8012dfa <fm_menu_config_date_hour+0x696>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 8012dbc:	4b46      	ldr	r3, [pc, #280]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	f003 0303 	and.w	r3, r3, #3
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d00a      	beq.n	8012de0 <fm_menu_config_date_hour+0x67c>
                        (month_enum == FEBRUARY) &&
 8012dca:	4b45      	ldr	r3, [pc, #276]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012dcc:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 8012dce:	2b02      	cmp	r3, #2
 8012dd0:	d106      	bne.n	8012de0 <fm_menu_config_date_hour+0x67c>
                        (day_enum > DAY_28))
 8012dd2:	4b42      	ldr	r3, [pc, #264]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 8012dd6:	2b1c      	cmp	r3, #28
 8012dd8:	d902      	bls.n	8012de0 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 8012dda:	4b40      	ldr	r3, [pc, #256]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012ddc:	221c      	movs	r2, #28
 8012dde:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012de0:	4b3e      	ldr	r3, [pc, #248]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	4618      	mov	r0, r3
 8012de6:	4b3e      	ldr	r3, [pc, #248]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	4619      	mov	r1, r3
 8012dec:	4b3a      	ldr	r3, [pc, #232]	; (8012ed8 <fm_menu_config_date_hour+0x774>)
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	3b01      	subs	r3, #1
 8012df2:	461a      	mov	r2, r3
 8012df4:	f7fc f944 	bl	800f080 <fm_factory_modify_date>
 8012df8:	e063      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012dfa:	4b38      	ldr	r3, [pc, #224]	; (8012edc <fm_menu_config_date_hour+0x778>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	4b37      	ldr	r3, [pc, #220]	; (8012ee0 <fm_menu_config_date_hour+0x77c>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	2263      	movs	r2, #99	; 0x63
 8012e06:	4619      	mov	r1, r3
 8012e08:	f7fc f93a 	bl	800f080 <fm_factory_modify_date>
 8012e0c:	e059      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == HOUR)
 8012e0e:	4b35      	ldr	r3, [pc, #212]	; (8012ee4 <fm_menu_config_date_hour+0x780>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	2b03      	cmp	r3, #3
 8012e14:	d119      	bne.n	8012e4a <fm_menu_config_date_hour+0x6e6>
                {
                    if(hour_enum > HOUR_0)
 8012e16:	4b34      	ldr	r3, [pc, #208]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00b      	beq.n	8012e36 <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012e1e:	4b32      	ldr	r3, [pc, #200]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	3b01      	subs	r3, #1
 8012e24:	4a31      	ldr	r2, [pc, #196]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012e26:	7812      	ldrb	r2, [r2, #0]
 8012e28:	4611      	mov	r1, r2
 8012e2a:	4a31      	ldr	r2, [pc, #196]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012e2c:	7812      	ldrb	r2, [r2, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fc f952 	bl	800f0d8 <fm_factory_modify_time>
 8012e34:	e045      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012e36:	4b2d      	ldr	r3, [pc, #180]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	4b2c      	ldr	r3, [pc, #176]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	461a      	mov	r2, r3
 8012e42:	2017      	movs	r0, #23
 8012e44:	f7fc f948 	bl	800f0d8 <fm_factory_modify_time>
 8012e48:	e03b      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012e4a:	4b26      	ldr	r3, [pc, #152]	; (8012ee4 <fm_menu_config_date_hour+0x780>)
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	2b04      	cmp	r3, #4
 8012e50:	d119      	bne.n	8012e86 <fm_menu_config_date_hour+0x722>
                {
                    if(minute_enum > MINU_0)
 8012e52:	4b26      	ldr	r3, [pc, #152]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00b      	beq.n	8012e72 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012e5a:	4b23      	ldr	r3, [pc, #140]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	4b22      	ldr	r3, [pc, #136]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	3b01      	subs	r3, #1
 8012e66:	4a22      	ldr	r2, [pc, #136]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012e68:	7812      	ldrb	r2, [r2, #0]
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	f7fc f934 	bl	800f0d8 <fm_factory_modify_time>
 8012e70:	e027      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012e72:	4b1d      	ldr	r3, [pc, #116]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	4618      	mov	r0, r3
 8012e78:	4b1d      	ldr	r3, [pc, #116]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	213b      	movs	r1, #59	; 0x3b
 8012e80:	f7fc f92a 	bl	800f0d8 <fm_factory_modify_time>
 8012e84:	e01d      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == SECOND)
 8012e86:	4b17      	ldr	r3, [pc, #92]	; (8012ee4 <fm_menu_config_date_hour+0x780>)
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	2b05      	cmp	r3, #5
 8012e8c:	d119      	bne.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                {
                    if(second_enum > SEC_0)
 8012e8e:	4b18      	ldr	r3, [pc, #96]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00c      	beq.n	8012eb0 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012e96:	4b14      	ldr	r3, [pc, #80]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	4b13      	ldr	r3, [pc, #76]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4b13      	ldr	r3, [pc, #76]	; (8012ef0 <fm_menu_config_date_hour+0x78c>)
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	3b01      	subs	r3, #1
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	f7fc f915 	bl	800f0d8 <fm_factory_modify_time>
 8012eae:	e008      	b.n	8012ec2 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012eb0:	4b0d      	ldr	r3, [pc, #52]	; (8012ee8 <fm_menu_config_date_hour+0x784>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	4b0d      	ldr	r3, [pc, #52]	; (8012eec <fm_menu_config_date_hour+0x788>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	223b      	movs	r2, #59	; 0x3b
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	f7fc f90b 	bl	800f0d8 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ec8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012ecc:	2200      	movs	r2, #0
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4808      	ldr	r0, [pc, #32]	; (8012ef4 <fm_menu_config_date_hour+0x790>)
 8012ed2:	f7fb fae3 	bl	800e49c <_txe_queue_send>
            }
        break;
 8012ed6:	e062      	b.n	8012f9e <fm_menu_config_date_hour+0x83a>
 8012ed8:	20001dc0 	.word	0x20001dc0
 8012edc:	20001dbe 	.word	0x20001dbe
 8012ee0:	20001dbf 	.word	0x20001dbf
 8012ee4:	20001dbd 	.word	0x20001dbd
 8012ee8:	20001dc1 	.word	0x20001dc1
 8012eec:	20001dc2 	.word	0x20001dc2
 8012ef0:	20001dc3 	.word	0x20001dc3
 8012ef4:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if(correct_password)
 8012ef8:	4b5b      	ldr	r3, [pc, #364]	; (8013068 <fm_menu_config_date_hour+0x904>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d050      	beq.n	8012fa2 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 8012f00:	4b5a      	ldr	r3, [pc, #360]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d103      	bne.n	8012f10 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012f08:	4b58      	ldr	r3, [pc, #352]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	701a      	strb	r2, [r3, #0]
 8012f0e:	e026      	b.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MONTH)
 8012f10:	4b56      	ldr	r3, [pc, #344]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d103      	bne.n	8012f20 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012f18:	4b54      	ldr	r3, [pc, #336]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	701a      	strb	r2, [r3, #0]
 8012f1e:	e01e      	b.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == YEAR)
 8012f20:	4b52      	ldr	r3, [pc, #328]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d103      	bne.n	8012f30 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012f28:	4b50      	ldr	r3, [pc, #320]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f2a:	2203      	movs	r2, #3
 8012f2c:	701a      	strb	r2, [r3, #0]
 8012f2e:	e016      	b.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == HOUR)
 8012f30:	4b4e      	ldr	r3, [pc, #312]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	2b03      	cmp	r3, #3
 8012f36:	d103      	bne.n	8012f40 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012f38:	4b4c      	ldr	r3, [pc, #304]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f3a:	2204      	movs	r2, #4
 8012f3c:	701a      	strb	r2, [r3, #0]
 8012f3e:	e00e      	b.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MINUTE)
 8012f40:	4b4a      	ldr	r3, [pc, #296]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b04      	cmp	r3, #4
 8012f46:	d103      	bne.n	8012f50 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012f48:	4b48      	ldr	r3, [pc, #288]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f4a:	2205      	movs	r2, #5
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	e006      	b.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == SECOND)
 8012f50:	4b46      	ldr	r3, [pc, #280]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b05      	cmp	r3, #5
 8012f56:	d102      	bne.n	8012f5e <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012f58:	4b44      	ldr	r3, [pc, #272]	; (801306c <fm_menu_config_date_hour+0x908>)
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f64:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f68:	2200      	movs	r2, #0
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	4840      	ldr	r0, [pc, #256]	; (8013070 <fm_menu_config_date_hour+0x90c>)
 8012f6e:	f7fb fa95 	bl	800e49c <_txe_queue_send>
            }
        break;
 8012f72:	e016      	b.n	8012fa2 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012f74:	4b3f      	ldr	r3, [pc, #252]	; (8013074 <fm_menu_config_date_hour+0x910>)
 8012f76:	2201      	movs	r2, #1
 8012f78:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012f7a:	4b3f      	ldr	r3, [pc, #252]	; (8013078 <fm_menu_config_date_hour+0x914>)
 8012f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012f80:	2301      	movs	r3, #1
 8012f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f86:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	4838      	ldr	r0, [pc, #224]	; (8013070 <fm_menu_config_date_hour+0x90c>)
 8012f90:	f7fb fa84 	bl	800e49c <_txe_queue_send>
        break;
 8012f94:	e006      	b.n	8012fa4 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012f96:	bf00      	nop
 8012f98:	e004      	b.n	8012fa4 <fm_menu_config_date_hour+0x840>
        break;
 8012f9a:	bf00      	nop
 8012f9c:	e002      	b.n	8012fa4 <fm_menu_config_date_hour+0x840>
        break;
 8012f9e:	bf00      	nop
 8012fa0:	e000      	b.n	8012fa4 <fm_menu_config_date_hour+0x840>
        break;
 8012fa2:	bf00      	nop
    }

    previous_event = event_id;
 8012fa4:	4a35      	ldr	r2, [pc, #212]	; (801307c <fm_menu_config_date_hour+0x918>)
 8012fa6:	79fb      	ldrb	r3, [r7, #7]
 8012fa8:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar fecha y hora\n";
 8012faa:	4b35      	ldr	r3, [pc, #212]	; (8013080 <fm_menu_config_date_hour+0x91c>)
 8012fac:	f107 0408 	add.w	r4, r7, #8
 8012fb0:	461d      	mov	r5, r3
 8012fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012fba:	c403      	stmia	r4!, {r0, r1}
 8012fbc:	7022      	strb	r2, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012fbe:	f107 0308 	add.w	r3, r7, #8
 8012fc2:	2119      	movs	r1, #25
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fb fe9d 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012fca:	4b2a      	ldr	r3, [pc, #168]	; (8013074 <fm_menu_config_date_hour+0x910>)
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d143      	bne.n	801305a <fm_menu_config_date_hour+0x8f6>
    {
        if(correct_password)
 8012fd2:	4b25      	ldr	r3, [pc, #148]	; (8013068 <fm_menu_config_date_hour+0x904>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d036      	beq.n	8013048 <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012fda:	4b2a      	ldr	r3, [pc, #168]	; (8013084 <fm_menu_config_date_hour+0x920>)
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8012fe2:	4b29      	ldr	r3, [pc, #164]	; (8013088 <fm_menu_config_date_hour+0x924>)
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 8012fea:	4b28      	ldr	r3, [pc, #160]	; (801308c <fm_menu_config_date_hour+0x928>)
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8012ff2:	2305      	movs	r3, #5
 8012ff4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8012ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	4619      	mov	r1, r3
 8013000:	4823      	ldr	r0, [pc, #140]	; (8013090 <fm_menu_config_date_hour+0x92c>)
 8013002:	f7f6 f8e3 	bl	80091cc <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8013006:	4b23      	ldr	r3, [pc, #140]	; (8013094 <fm_menu_config_date_hour+0x930>)
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 801300e:	4b22      	ldr	r3, [pc, #136]	; (8013098 <fm_menu_config_date_hour+0x934>)
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8013016:	4b21      	ldr	r3, [pc, #132]	; (801309c <fm_menu_config_date_hour+0x938>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013022:	2300      	movs	r3, #0
 8013024:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8013026:	2300      	movs	r3, #0
 8013028:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 801302a:	2300      	movs	r3, #0
 801302c:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 801302e:	2300      	movs	r3, #0
 8013030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8013034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013038:	2200      	movs	r2, #0
 801303a:	4619      	mov	r1, r3
 801303c:	4814      	ldr	r0, [pc, #80]	; (8013090 <fm_menu_config_date_hour+0x92c>)
 801303e:	f7f5 ffb7 	bl	8008fb0 <HAL_RTC_SetTime>

            correct_password = 0;
 8013042:	4b09      	ldr	r3, [pc, #36]	; (8013068 <fm_menu_config_date_hour+0x904>)
 8013044:	2200      	movs	r2, #0
 8013046:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8013048:	4b15      	ldr	r3, [pc, #84]	; (80130a0 <fm_menu_config_date_hour+0x93c>)
 801304a:	2200      	movs	r2, #0
 801304c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801304e:	4b15      	ldr	r3, [pc, #84]	; (80130a4 <fm_menu_config_date_hour+0x940>)
 8013050:	2201      	movs	r2, #1
 8013052:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013054:	4b07      	ldr	r3, [pc, #28]	; (8013074 <fm_menu_config_date_hour+0x910>)
 8013056:	2200      	movs	r2, #0
 8013058:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801305a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 801305e:	4618      	mov	r0, r3
 8013060:	37d0      	adds	r7, #208	; 0xd0
 8013062:	46bd      	mov	sp, r7
 8013064:	bdb0      	pop	{r4, r5, r7, pc}
 8013066:	bf00      	nop
 8013068:	20001dba 	.word	0x20001dba
 801306c:	20001dbd 	.word	0x20001dbd
 8013070:	20001388 	.word	0x20001388
 8013074:	20001dc4 	.word	0x20001dc4
 8013078:	080146ad 	.word	0x080146ad
 801307c:	20001dbb 	.word	0x20001dbb
 8013080:	08015910 	.word	0x08015910
 8013084:	20001dbe 	.word	0x20001dbe
 8013088:	20001dbf 	.word	0x20001dbf
 801308c:	20001dc0 	.word	0x20001dc0
 8013090:	200014a4 	.word	0x200014a4
 8013094:	20001dc1 	.word	0x20001dc1
 8013098:	20001dc2 	.word	0x20001dc2
 801309c:	20001dc3 	.word	0x20001dc3
 80130a0:	20001dbc 	.word	0x20001dbc
 80130a4:	20000141 	.word	0x20000141

080130a8 <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 80130a8:	b5b0      	push	{r4, r5, r7, lr}
 80130aa:	b08c      	sub	sp, #48	; 0x30
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	4603      	mov	r3, r0
 80130b0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 80130b2:	4b51      	ldr	r3, [pc, #324]	; (80131f8 <fm_menu_config_k_lin_1+0x150>)
 80130b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80130b6:	4b51      	ldr	r3, [pc, #324]	; (80131fc <fm_menu_config_k_lin_1+0x154>)
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d104      	bne.n	80130c8 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 80130be:	f7fc fcc0 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80130c2:	4b4e      	ldr	r3, [pc, #312]	; (80131fc <fm_menu_config_k_lin_1+0x154>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 80130c8:	4b4d      	ldr	r3, [pc, #308]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 80130ca:	781a      	ldrb	r2, [r3, #0]
 80130cc:	79fb      	ldrb	r3, [r7, #7]
 80130ce:	4619      	mov	r1, r3
 80130d0:	2001      	movs	r0, #1
 80130d2:	f7fc ff33 	bl	800ff3c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80130d6:	f7fd f84a 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80130da:	79fb      	ldrb	r3, [r7, #7]
 80130dc:	3b01      	subs	r3, #1
 80130de:	2b04      	cmp	r3, #4
 80130e0:	d863      	bhi.n	80131aa <fm_menu_config_k_lin_1+0x102>
 80130e2:	a201      	add	r2, pc, #4	; (adr r2, 80130e8 <fm_menu_config_k_lin_1+0x40>)
 80130e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130e8:	080131ab 	.word	0x080131ab
 80130ec:	080130fd 	.word	0x080130fd
 80130f0:	08013127 	.word	0x08013127
 80130f4:	08013151 	.word	0x08013151
 80130f8:	0801318b 	.word	0x0801318b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80130fc:	4b41      	ldr	r3, [pc, #260]	; (8013204 <fm_menu_config_k_lin_1+0x15c>)
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d005      	beq.n	8013110 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 8013104:	4b3e      	ldr	r3, [pc, #248]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	2101      	movs	r1, #1
 801310a:	4618      	mov	r0, r3
 801310c:	f7fc f88c 	bl	800f228 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013110:	2301      	movs	r3, #1
 8013112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013116:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801311a:	2200      	movs	r2, #0
 801311c:	4619      	mov	r1, r3
 801311e:	483a      	ldr	r0, [pc, #232]	; (8013208 <fm_menu_config_k_lin_1+0x160>)
 8013120:	f7fb f9bc 	bl	800e49c <_txe_queue_send>
        break;
 8013124:	e042      	b.n	80131ac <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013126:	4b37      	ldr	r3, [pc, #220]	; (8013204 <fm_menu_config_k_lin_1+0x15c>)
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d005      	beq.n	801313a <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 801312e:	4b34      	ldr	r3, [pc, #208]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	2101      	movs	r1, #1
 8013134:	4618      	mov	r0, r3
 8013136:	f7fc f963 	bl	800f400 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801313a:	2301      	movs	r3, #1
 801313c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013140:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013144:	2200      	movs	r2, #0
 8013146:	4619      	mov	r1, r3
 8013148:	482f      	ldr	r0, [pc, #188]	; (8013208 <fm_menu_config_k_lin_1+0x160>)
 801314a:	f7fb f9a7 	bl	800e49c <_txe_queue_send>
        break;
 801314e:	e02d      	b.n	80131ac <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013150:	4b2c      	ldr	r3, [pc, #176]	; (8013204 <fm_menu_config_k_lin_1+0x15c>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00d      	beq.n	8013174 <fm_menu_config_k_lin_1+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013158:	4b29      	ldr	r3, [pc, #164]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	2b0a      	cmp	r3, #10
 801315e:	d806      	bhi.n	801316e <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8013160:	4b27      	ldr	r3, [pc, #156]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	3301      	adds	r3, #1
 8013166:	b2da      	uxtb	r2, r3
 8013168:	4b25      	ldr	r3, [pc, #148]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 801316a:	701a      	strb	r2, [r3, #0]
 801316c:	e002      	b.n	8013174 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801316e:	4b24      	ldr	r3, [pc, #144]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 8013170:	2200      	movs	r2, #0
 8013172:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013174:	2301      	movs	r3, #1
 8013176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801317a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801317e:	2200      	movs	r2, #0
 8013180:	4619      	mov	r1, r3
 8013182:	4821      	ldr	r0, [pc, #132]	; (8013208 <fm_menu_config_k_lin_1+0x160>)
 8013184:	f7fb f98a 	bl	800e49c <_txe_queue_send>
        break;
 8013188:	e010      	b.n	80131ac <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801318a:	4b20      	ldr	r3, [pc, #128]	; (801320c <fm_menu_config_k_lin_1+0x164>)
 801318c:	2201      	movs	r2, #1
 801318e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013190:	4b1f      	ldr	r3, [pc, #124]	; (8013210 <fm_menu_config_k_lin_1+0x168>)
 8013192:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013194:	2301      	movs	r3, #1
 8013196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801319a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801319e:	2200      	movs	r2, #0
 80131a0:	4619      	mov	r1, r3
 80131a2:	4819      	ldr	r0, [pc, #100]	; (8013208 <fm_menu_config_k_lin_1+0x160>)
 80131a4:	f7fb f97a 	bl	800e49c <_txe_queue_send>
        break;
 80131a8:	e000      	b.n	80131ac <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80131aa:	bf00      	nop
    }

    previous_event = event_id;
 80131ac:	4a19      	ldr	r2, [pc, #100]	; (8013214 <fm_menu_config_k_lin_1+0x16c>)
 80131ae:	79fb      	ldrb	r3, [r7, #7]
 80131b0:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 80131b2:	4b19      	ldr	r3, [pc, #100]	; (8013218 <fm_menu_config_k_lin_1+0x170>)
 80131b4:	f107 040c 	add.w	r4, r7, #12
 80131b8:	461d      	mov	r5, r3
 80131ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80131c2:	c407      	stmia	r4!, {r0, r1, r2}
 80131c4:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80131c6:	f107 030c 	add.w	r3, r7, #12
 80131ca:	211e      	movs	r1, #30
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fb fd99 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80131d2:	4b0e      	ldr	r3, [pc, #56]	; (801320c <fm_menu_config_k_lin_1+0x164>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d108      	bne.n	80131ec <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80131da:	4b09      	ldr	r3, [pc, #36]	; (8013200 <fm_menu_config_k_lin_1+0x158>)
 80131dc:	2200      	movs	r2, #0
 80131de:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80131e0:	4b06      	ldr	r3, [pc, #24]	; (80131fc <fm_menu_config_k_lin_1+0x154>)
 80131e2:	2201      	movs	r2, #1
 80131e4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80131e6:	4b09      	ldr	r3, [pc, #36]	; (801320c <fm_menu_config_k_lin_1+0x164>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3730      	adds	r7, #48	; 0x30
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bdb0      	pop	{r4, r5, r7, pc}
 80131f6:	bf00      	nop
 80131f8:	080130a9 	.word	0x080130a9
 80131fc:	20000142 	.word	0x20000142
 8013200:	20001dc5 	.word	0x20001dc5
 8013204:	20001dba 	.word	0x20001dba
 8013208:	20001388 	.word	0x20001388
 801320c:	20001dc6 	.word	0x20001dc6
 8013210:	0801321d 	.word	0x0801321d
 8013214:	20001dbb 	.word	0x20001dbb
 8013218:	0801594c 	.word	0x0801594c

0801321c <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 801321c:	b5b0      	push	{r4, r5, r7, lr}
 801321e:	b08c      	sub	sp, #48	; 0x30
 8013220:	af00      	add	r7, sp, #0
 8013222:	4603      	mov	r3, r0
 8013224:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013226:	4b51      	ldr	r3, [pc, #324]	; (801336c <fm_menu_config_k_lin_2+0x150>)
 8013228:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801322a:	4b51      	ldr	r3, [pc, #324]	; (8013370 <fm_menu_config_k_lin_2+0x154>)
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d104      	bne.n	801323c <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 8013232:	f7fc fc06 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8013236:	4b4e      	ldr	r3, [pc, #312]	; (8013370 <fm_menu_config_k_lin_2+0x154>)
 8013238:	2200      	movs	r2, #0
 801323a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 801323c:	4b4d      	ldr	r3, [pc, #308]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	4619      	mov	r1, r3
 8013244:	2002      	movs	r0, #2
 8013246:	f7fc fe79 	bl	800ff3c <fm_lcd_k_lin>
    fm_lcd_refresh();
 801324a:	f7fc ff90 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	3b01      	subs	r3, #1
 8013252:	2b04      	cmp	r3, #4
 8013254:	d863      	bhi.n	801331e <fm_menu_config_k_lin_2+0x102>
 8013256:	a201      	add	r2, pc, #4	; (adr r2, 801325c <fm_menu_config_k_lin_2+0x40>)
 8013258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801325c:	0801331f 	.word	0x0801331f
 8013260:	08013271 	.word	0x08013271
 8013264:	0801329b 	.word	0x0801329b
 8013268:	080132c5 	.word	0x080132c5
 801326c:	080132ff 	.word	0x080132ff
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013270:	4b41      	ldr	r3, [pc, #260]	; (8013378 <fm_menu_config_k_lin_2+0x15c>)
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d005      	beq.n	8013284 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8013278:	4b3e      	ldr	r3, [pc, #248]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	2102      	movs	r1, #2
 801327e:	4618      	mov	r0, r3
 8013280:	f7fb ffd2 	bl	800f228 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013284:	2301      	movs	r3, #1
 8013286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801328a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801328e:	2200      	movs	r2, #0
 8013290:	4619      	mov	r1, r3
 8013292:	483a      	ldr	r0, [pc, #232]	; (801337c <fm_menu_config_k_lin_2+0x160>)
 8013294:	f7fb f902 	bl	800e49c <_txe_queue_send>
        break;
 8013298:	e042      	b.n	8013320 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801329a:	4b37      	ldr	r3, [pc, #220]	; (8013378 <fm_menu_config_k_lin_2+0x15c>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d005      	beq.n	80132ae <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 80132a2:	4b34      	ldr	r3, [pc, #208]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	2102      	movs	r1, #2
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fc f8a9 	bl	800f400 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80132ae:	2301      	movs	r3, #1
 80132b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132b4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132b8:	2200      	movs	r2, #0
 80132ba:	4619      	mov	r1, r3
 80132bc:	482f      	ldr	r0, [pc, #188]	; (801337c <fm_menu_config_k_lin_2+0x160>)
 80132be:	f7fb f8ed 	bl	800e49c <_txe_queue_send>
        break;
 80132c2:	e02d      	b.n	8013320 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80132c4:	4b2c      	ldr	r3, [pc, #176]	; (8013378 <fm_menu_config_k_lin_2+0x15c>)
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00d      	beq.n	80132e8 <fm_menu_config_k_lin_2+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 80132cc:	4b29      	ldr	r3, [pc, #164]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	2b0a      	cmp	r3, #10
 80132d2:	d806      	bhi.n	80132e2 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 80132d4:	4b27      	ldr	r3, [pc, #156]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	3301      	adds	r3, #1
 80132da:	b2da      	uxtb	r2, r3
 80132dc:	4b25      	ldr	r3, [pc, #148]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 80132de:	701a      	strb	r2, [r3, #0]
 80132e0:	e002      	b.n	80132e8 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80132e2:	4b24      	ldr	r3, [pc, #144]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 80132e4:	2200      	movs	r2, #0
 80132e6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80132e8:	2301      	movs	r3, #1
 80132ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132f2:	2200      	movs	r2, #0
 80132f4:	4619      	mov	r1, r3
 80132f6:	4821      	ldr	r0, [pc, #132]	; (801337c <fm_menu_config_k_lin_2+0x160>)
 80132f8:	f7fb f8d0 	bl	800e49c <_txe_queue_send>
        break;
 80132fc:	e010      	b.n	8013320 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80132fe:	4b20      	ldr	r3, [pc, #128]	; (8013380 <fm_menu_config_k_lin_2+0x164>)
 8013300:	2201      	movs	r2, #1
 8013302:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8013304:	4b1f      	ldr	r3, [pc, #124]	; (8013384 <fm_menu_config_k_lin_2+0x168>)
 8013306:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013308:	2301      	movs	r3, #1
 801330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801330e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013312:	2200      	movs	r2, #0
 8013314:	4619      	mov	r1, r3
 8013316:	4819      	ldr	r0, [pc, #100]	; (801337c <fm_menu_config_k_lin_2+0x160>)
 8013318:	f7fb f8c0 	bl	800e49c <_txe_queue_send>
        break;
 801331c:	e000      	b.n	8013320 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801331e:	bf00      	nop
    }

    previous_event = event_id;
 8013320:	4a19      	ldr	r2, [pc, #100]	; (8013388 <fm_menu_config_k_lin_2+0x16c>)
 8013322:	79fb      	ldrb	r3, [r7, #7]
 8013324:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 8013326:	4b19      	ldr	r3, [pc, #100]	; (801338c <fm_menu_config_k_lin_2+0x170>)
 8013328:	f107 040c 	add.w	r4, r7, #12
 801332c:	461d      	mov	r5, r3
 801332e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013332:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013336:	c407      	stmia	r4!, {r0, r1, r2}
 8013338:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801333a:	f107 030c 	add.w	r3, r7, #12
 801333e:	211e      	movs	r1, #30
 8013340:	4618      	mov	r0, r3
 8013342:	f7fb fcdf 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013346:	4b0e      	ldr	r3, [pc, #56]	; (8013380 <fm_menu_config_k_lin_2+0x164>)
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	2b01      	cmp	r3, #1
 801334c:	d108      	bne.n	8013360 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801334e:	4b09      	ldr	r3, [pc, #36]	; (8013374 <fm_menu_config_k_lin_2+0x158>)
 8013350:	2200      	movs	r2, #0
 8013352:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013354:	4b06      	ldr	r3, [pc, #24]	; (8013370 <fm_menu_config_k_lin_2+0x154>)
 8013356:	2201      	movs	r2, #1
 8013358:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801335a:	4b09      	ldr	r3, [pc, #36]	; (8013380 <fm_menu_config_k_lin_2+0x164>)
 801335c:	2200      	movs	r2, #0
 801335e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013362:	4618      	mov	r0, r3
 8013364:	3730      	adds	r7, #48	; 0x30
 8013366:	46bd      	mov	sp, r7
 8013368:	bdb0      	pop	{r4, r5, r7, pc}
 801336a:	bf00      	nop
 801336c:	0801321d 	.word	0x0801321d
 8013370:	20000143 	.word	0x20000143
 8013374:	20001dc7 	.word	0x20001dc7
 8013378:	20001dba 	.word	0x20001dba
 801337c:	20001388 	.word	0x20001388
 8013380:	20001dc8 	.word	0x20001dc8
 8013384:	08013391 	.word	0x08013391
 8013388:	20001dbb 	.word	0x20001dbb
 801338c:	0801596c 	.word	0x0801596c

08013390 <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8013390:	b5b0      	push	{r4, r5, r7, lr}
 8013392:	b08c      	sub	sp, #48	; 0x30
 8013394:	af00      	add	r7, sp, #0
 8013396:	4603      	mov	r3, r0
 8013398:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 801339a:	4b51      	ldr	r3, [pc, #324]	; (80134e0 <fm_menu_config_k_lin_3+0x150>)
 801339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801339e:	4b51      	ldr	r3, [pc, #324]	; (80134e4 <fm_menu_config_k_lin_3+0x154>)
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d104      	bne.n	80133b0 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 80133a6:	f7fc fb4c 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80133aa:	4b4e      	ldr	r3, [pc, #312]	; (80134e4 <fm_menu_config_k_lin_3+0x154>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 80133b0:	4b4d      	ldr	r3, [pc, #308]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	79fb      	ldrb	r3, [r7, #7]
 80133b6:	4619      	mov	r1, r3
 80133b8:	2003      	movs	r0, #3
 80133ba:	f7fc fdbf 	bl	800ff3c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80133be:	f7fc fed6 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80133c2:	79fb      	ldrb	r3, [r7, #7]
 80133c4:	3b01      	subs	r3, #1
 80133c6:	2b04      	cmp	r3, #4
 80133c8:	d863      	bhi.n	8013492 <fm_menu_config_k_lin_3+0x102>
 80133ca:	a201      	add	r2, pc, #4	; (adr r2, 80133d0 <fm_menu_config_k_lin_3+0x40>)
 80133cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d0:	08013493 	.word	0x08013493
 80133d4:	080133e5 	.word	0x080133e5
 80133d8:	0801340f 	.word	0x0801340f
 80133dc:	08013439 	.word	0x08013439
 80133e0:	08013473 	.word	0x08013473
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80133e4:	4b41      	ldr	r3, [pc, #260]	; (80134ec <fm_menu_config_k_lin_3+0x15c>)
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d005      	beq.n	80133f8 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 80133ec:	4b3e      	ldr	r3, [pc, #248]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	2103      	movs	r1, #3
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fb ff18 	bl	800f228 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80133f8:	2301      	movs	r3, #1
 80133fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013402:	2200      	movs	r2, #0
 8013404:	4619      	mov	r1, r3
 8013406:	483a      	ldr	r0, [pc, #232]	; (80134f0 <fm_menu_config_k_lin_3+0x160>)
 8013408:	f7fb f848 	bl	800e49c <_txe_queue_send>
        break;
 801340c:	e042      	b.n	8013494 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801340e:	4b37      	ldr	r3, [pc, #220]	; (80134ec <fm_menu_config_k_lin_3+0x15c>)
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d005      	beq.n	8013422 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 8013416:	4b34      	ldr	r3, [pc, #208]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	2103      	movs	r1, #3
 801341c:	4618      	mov	r0, r3
 801341e:	f7fb ffef 	bl	800f400 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013422:	2301      	movs	r3, #1
 8013424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013428:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801342c:	2200      	movs	r2, #0
 801342e:	4619      	mov	r1, r3
 8013430:	482f      	ldr	r0, [pc, #188]	; (80134f0 <fm_menu_config_k_lin_3+0x160>)
 8013432:	f7fb f833 	bl	800e49c <_txe_queue_send>
        break;
 8013436:	e02d      	b.n	8013494 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013438:	4b2c      	ldr	r3, [pc, #176]	; (80134ec <fm_menu_config_k_lin_3+0x15c>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00d      	beq.n	801345c <fm_menu_config_k_lin_3+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013440:	4b29      	ldr	r3, [pc, #164]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b0a      	cmp	r3, #10
 8013446:	d806      	bhi.n	8013456 <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 8013448:	4b27      	ldr	r3, [pc, #156]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	3301      	adds	r3, #1
 801344e:	b2da      	uxtb	r2, r3
 8013450:	4b25      	ldr	r3, [pc, #148]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 8013452:	701a      	strb	r2, [r3, #0]
 8013454:	e002      	b.n	801345c <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013456:	4b24      	ldr	r3, [pc, #144]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 8013458:	2200      	movs	r2, #0
 801345a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801345c:	2301      	movs	r3, #1
 801345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013462:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013466:	2200      	movs	r2, #0
 8013468:	4619      	mov	r1, r3
 801346a:	4821      	ldr	r0, [pc, #132]	; (80134f0 <fm_menu_config_k_lin_3+0x160>)
 801346c:	f7fb f816 	bl	800e49c <_txe_queue_send>
        break;
 8013470:	e010      	b.n	8013494 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013472:	4b20      	ldr	r3, [pc, #128]	; (80134f4 <fm_menu_config_k_lin_3+0x164>)
 8013474:	2201      	movs	r2, #1
 8013476:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013478:	4b1f      	ldr	r3, [pc, #124]	; (80134f8 <fm_menu_config_k_lin_3+0x168>)
 801347a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801347c:	2301      	movs	r3, #1
 801347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013482:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013486:	2200      	movs	r2, #0
 8013488:	4619      	mov	r1, r3
 801348a:	4819      	ldr	r0, [pc, #100]	; (80134f0 <fm_menu_config_k_lin_3+0x160>)
 801348c:	f7fb f806 	bl	800e49c <_txe_queue_send>
        break;
 8013490:	e000      	b.n	8013494 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013492:	bf00      	nop
    }

    previous_event = event_id;
 8013494:	4a19      	ldr	r2, [pc, #100]	; (80134fc <fm_menu_config_k_lin_3+0x16c>)
 8013496:	79fb      	ldrb	r3, [r7, #7]
 8013498:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 801349a:	4b19      	ldr	r3, [pc, #100]	; (8013500 <fm_menu_config_k_lin_3+0x170>)
 801349c:	f107 040c 	add.w	r4, r7, #12
 80134a0:	461d      	mov	r5, r3
 80134a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80134aa:	c407      	stmia	r4!, {r0, r1, r2}
 80134ac:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80134ae:	f107 030c 	add.w	r3, r7, #12
 80134b2:	211e      	movs	r1, #30
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fb fc25 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80134ba:	4b0e      	ldr	r3, [pc, #56]	; (80134f4 <fm_menu_config_k_lin_3+0x164>)
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d108      	bne.n	80134d4 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80134c2:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <fm_menu_config_k_lin_3+0x158>)
 80134c4:	2200      	movs	r2, #0
 80134c6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80134c8:	4b06      	ldr	r3, [pc, #24]	; (80134e4 <fm_menu_config_k_lin_3+0x154>)
 80134ca:	2201      	movs	r2, #1
 80134cc:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80134ce:	4b09      	ldr	r3, [pc, #36]	; (80134f4 <fm_menu_config_k_lin_3+0x164>)
 80134d0:	2200      	movs	r2, #0
 80134d2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80134d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3730      	adds	r7, #48	; 0x30
 80134da:	46bd      	mov	sp, r7
 80134dc:	bdb0      	pop	{r4, r5, r7, pc}
 80134de:	bf00      	nop
 80134e0:	08013391 	.word	0x08013391
 80134e4:	20000144 	.word	0x20000144
 80134e8:	20001dc9 	.word	0x20001dc9
 80134ec:	20001dba 	.word	0x20001dba
 80134f0:	20001388 	.word	0x20001388
 80134f4:	20001dca 	.word	0x20001dca
 80134f8:	08013505 	.word	0x08013505
 80134fc:	20001dbb 	.word	0x20001dbb
 8013500:	0801598c 	.word	0x0801598c

08013504 <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013504:	b5b0      	push	{r4, r5, r7, lr}
 8013506:	b08c      	sub	sp, #48	; 0x30
 8013508:	af00      	add	r7, sp, #0
 801350a:	4603      	mov	r3, r0
 801350c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 801350e:	4b51      	ldr	r3, [pc, #324]	; (8013654 <fm_menu_config_k_lin_4+0x150>)
 8013510:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013512:	4b51      	ldr	r3, [pc, #324]	; (8013658 <fm_menu_config_k_lin_4+0x154>)
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	2b01      	cmp	r3, #1
 8013518:	d104      	bne.n	8013524 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 801351a:	f7fc fa92 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 801351e:	4b4e      	ldr	r3, [pc, #312]	; (8013658 <fm_menu_config_k_lin_4+0x154>)
 8013520:	2200      	movs	r2, #0
 8013522:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013524:	4b4d      	ldr	r3, [pc, #308]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 8013526:	781a      	ldrb	r2, [r3, #0]
 8013528:	79fb      	ldrb	r3, [r7, #7]
 801352a:	4619      	mov	r1, r3
 801352c:	2004      	movs	r0, #4
 801352e:	f7fc fd05 	bl	800ff3c <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013532:	f7fc fe1c 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8013536:	79fb      	ldrb	r3, [r7, #7]
 8013538:	3b01      	subs	r3, #1
 801353a:	2b04      	cmp	r3, #4
 801353c:	d863      	bhi.n	8013606 <fm_menu_config_k_lin_4+0x102>
 801353e:	a201      	add	r2, pc, #4	; (adr r2, 8013544 <fm_menu_config_k_lin_4+0x40>)
 8013540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013544:	08013607 	.word	0x08013607
 8013548:	08013559 	.word	0x08013559
 801354c:	08013583 	.word	0x08013583
 8013550:	080135ad 	.word	0x080135ad
 8013554:	080135e7 	.word	0x080135e7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013558:	4b41      	ldr	r3, [pc, #260]	; (8013660 <fm_menu_config_k_lin_4+0x15c>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d005      	beq.n	801356c <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013560:	4b3e      	ldr	r3, [pc, #248]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	2104      	movs	r1, #4
 8013566:	4618      	mov	r0, r3
 8013568:	f7fb fe5e 	bl	800f228 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801356c:	2301      	movs	r3, #1
 801356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013572:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013576:	2200      	movs	r2, #0
 8013578:	4619      	mov	r1, r3
 801357a:	483a      	ldr	r0, [pc, #232]	; (8013664 <fm_menu_config_k_lin_4+0x160>)
 801357c:	f7fa ff8e 	bl	800e49c <_txe_queue_send>
        break;
 8013580:	e042      	b.n	8013608 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013582:	4b37      	ldr	r3, [pc, #220]	; (8013660 <fm_menu_config_k_lin_4+0x15c>)
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d005      	beq.n	8013596 <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 801358a:	4b34      	ldr	r3, [pc, #208]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	2104      	movs	r1, #4
 8013590:	4618      	mov	r0, r3
 8013592:	f7fb ff35 	bl	800f400 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013596:	2301      	movs	r3, #1
 8013598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801359c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135a0:	2200      	movs	r2, #0
 80135a2:	4619      	mov	r1, r3
 80135a4:	482f      	ldr	r0, [pc, #188]	; (8013664 <fm_menu_config_k_lin_4+0x160>)
 80135a6:	f7fa ff79 	bl	800e49c <_txe_queue_send>
        break;
 80135aa:	e02d      	b.n	8013608 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80135ac:	4b2c      	ldr	r3, [pc, #176]	; (8013660 <fm_menu_config_k_lin_4+0x15c>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d00d      	beq.n	80135d0 <fm_menu_config_k_lin_4+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 80135b4:	4b29      	ldr	r3, [pc, #164]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b0a      	cmp	r3, #10
 80135ba:	d806      	bhi.n	80135ca <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 80135bc:	4b27      	ldr	r3, [pc, #156]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	3301      	adds	r3, #1
 80135c2:	b2da      	uxtb	r2, r3
 80135c4:	4b25      	ldr	r3, [pc, #148]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 80135c6:	701a      	strb	r2, [r3, #0]
 80135c8:	e002      	b.n	80135d0 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80135ca:	4b24      	ldr	r3, [pc, #144]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80135d0:	2301      	movs	r3, #1
 80135d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135da:	2200      	movs	r2, #0
 80135dc:	4619      	mov	r1, r3
 80135de:	4821      	ldr	r0, [pc, #132]	; (8013664 <fm_menu_config_k_lin_4+0x160>)
 80135e0:	f7fa ff5c 	bl	800e49c <_txe_queue_send>
        break;
 80135e4:	e010      	b.n	8013608 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80135e6:	4b20      	ldr	r3, [pc, #128]	; (8013668 <fm_menu_config_k_lin_4+0x164>)
 80135e8:	2201      	movs	r2, #1
 80135ea:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80135ec:	4b1f      	ldr	r3, [pc, #124]	; (801366c <fm_menu_config_k_lin_4+0x168>)
 80135ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80135f0:	2301      	movs	r3, #1
 80135f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135f6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135fa:	2200      	movs	r2, #0
 80135fc:	4619      	mov	r1, r3
 80135fe:	4819      	ldr	r0, [pc, #100]	; (8013664 <fm_menu_config_k_lin_4+0x160>)
 8013600:	f7fa ff4c 	bl	800e49c <_txe_queue_send>
        break;
 8013604:	e000      	b.n	8013608 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013606:	bf00      	nop
    }

    previous_event = event_id;
 8013608:	4a19      	ldr	r2, [pc, #100]	; (8013670 <fm_menu_config_k_lin_4+0x16c>)
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 801360e:	4b19      	ldr	r3, [pc, #100]	; (8013674 <fm_menu_config_k_lin_4+0x170>)
 8013610:	f107 040c 	add.w	r4, r7, #12
 8013614:	461d      	mov	r5, r3
 8013616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801361a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801361e:	c407      	stmia	r4!, {r0, r1, r2}
 8013620:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013622:	f107 030c 	add.w	r3, r7, #12
 8013626:	211e      	movs	r1, #30
 8013628:	4618      	mov	r0, r3
 801362a:	f7fb fb6b 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801362e:	4b0e      	ldr	r3, [pc, #56]	; (8013668 <fm_menu_config_k_lin_4+0x164>)
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d108      	bne.n	8013648 <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8013636:	4b09      	ldr	r3, [pc, #36]	; (801365c <fm_menu_config_k_lin_4+0x158>)
 8013638:	2200      	movs	r2, #0
 801363a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801363c:	4b06      	ldr	r3, [pc, #24]	; (8013658 <fm_menu_config_k_lin_4+0x154>)
 801363e:	2201      	movs	r2, #1
 8013640:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013642:	4b09      	ldr	r3, [pc, #36]	; (8013668 <fm_menu_config_k_lin_4+0x164>)
 8013644:	2200      	movs	r2, #0
 8013646:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801364a:	4618      	mov	r0, r3
 801364c:	3730      	adds	r7, #48	; 0x30
 801364e:	46bd      	mov	sp, r7
 8013650:	bdb0      	pop	{r4, r5, r7, pc}
 8013652:	bf00      	nop
 8013654:	08013505 	.word	0x08013505
 8013658:	20000145 	.word	0x20000145
 801365c:	20001dcb 	.word	0x20001dcb
 8013660:	20001dba 	.word	0x20001dba
 8013664:	20001388 	.word	0x20001388
 8013668:	20001dcc 	.word	0x20001dcc
 801366c:	08013679 	.word	0x08013679
 8013670:	20001dbb 	.word	0x20001dbb
 8013674:	080159ac 	.word	0x080159ac

08013678 <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013678:	b5b0      	push	{r4, r5, r7, lr}
 801367a:	b08c      	sub	sp, #48	; 0x30
 801367c:	af00      	add	r7, sp, #0
 801367e:	4603      	mov	r3, r0
 8013680:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013682:	4b52      	ldr	r3, [pc, #328]	; (80137cc <fm_menu_config_k_lin_5+0x154>)
 8013684:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013686:	4b52      	ldr	r3, [pc, #328]	; (80137d0 <fm_menu_config_k_lin_5+0x158>)
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b01      	cmp	r3, #1
 801368c:	d104      	bne.n	8013698 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 801368e:	f7fc f9d8 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8013692:	4b4f      	ldr	r3, [pc, #316]	; (80137d0 <fm_menu_config_k_lin_5+0x158>)
 8013694:	2200      	movs	r2, #0
 8013696:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 8013698:	4b4e      	ldr	r3, [pc, #312]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 801369a:	781a      	ldrb	r2, [r3, #0]
 801369c:	79fb      	ldrb	r3, [r7, #7]
 801369e:	4619      	mov	r1, r3
 80136a0:	2005      	movs	r0, #5
 80136a2:	f7fc fc4b 	bl	800ff3c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80136a6:	f7fc fd62 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80136aa:	79fb      	ldrb	r3, [r7, #7]
 80136ac:	3b01      	subs	r3, #1
 80136ae:	2b04      	cmp	r3, #4
 80136b0:	d866      	bhi.n	8013780 <fm_menu_config_k_lin_5+0x108>
 80136b2:	a201      	add	r2, pc, #4	; (adr r2, 80136b8 <fm_menu_config_k_lin_5+0x40>)
 80136b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136b8:	08013781 	.word	0x08013781
 80136bc:	080136cd 	.word	0x080136cd
 80136c0:	080136f7 	.word	0x080136f7
 80136c4:	08013721 	.word	0x08013721
 80136c8:	0801375b 	.word	0x0801375b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80136cc:	4b42      	ldr	r3, [pc, #264]	; (80137d8 <fm_menu_config_k_lin_5+0x160>)
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d005      	beq.n	80136e0 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80136d4:	4b3f      	ldr	r3, [pc, #252]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2105      	movs	r1, #5
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fb fda4 	bl	800f228 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80136e0:	2301      	movs	r3, #1
 80136e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136e6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80136ea:	2200      	movs	r2, #0
 80136ec:	4619      	mov	r1, r3
 80136ee:	483b      	ldr	r0, [pc, #236]	; (80137dc <fm_menu_config_k_lin_5+0x164>)
 80136f0:	f7fa fed4 	bl	800e49c <_txe_queue_send>
        break;
 80136f4:	e045      	b.n	8013782 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80136f6:	4b38      	ldr	r3, [pc, #224]	; (80137d8 <fm_menu_config_k_lin_5+0x160>)
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d005      	beq.n	801370a <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 80136fe:	4b35      	ldr	r3, [pc, #212]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2105      	movs	r1, #5
 8013704:	4618      	mov	r0, r3
 8013706:	f7fb fe7b 	bl	800f400 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801370a:	2301      	movs	r3, #1
 801370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013710:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013714:	2200      	movs	r2, #0
 8013716:	4619      	mov	r1, r3
 8013718:	4830      	ldr	r0, [pc, #192]	; (80137dc <fm_menu_config_k_lin_5+0x164>)
 801371a:	f7fa febf 	bl	800e49c <_txe_queue_send>
        break;
 801371e:	e030      	b.n	8013782 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013720:	4b2d      	ldr	r3, [pc, #180]	; (80137d8 <fm_menu_config_k_lin_5+0x160>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00d      	beq.n	8013744 <fm_menu_config_k_lin_5+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013728:	4b2a      	ldr	r3, [pc, #168]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	2b0a      	cmp	r3, #10
 801372e:	d806      	bhi.n	801373e <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 8013730:	4b28      	ldr	r3, [pc, #160]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	3301      	adds	r3, #1
 8013736:	b2da      	uxtb	r2, r3
 8013738:	4b26      	ldr	r3, [pc, #152]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 801373a:	701a      	strb	r2, [r3, #0]
 801373c:	e002      	b.n	8013744 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801373e:	4b25      	ldr	r3, [pc, #148]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 8013740:	2200      	movs	r2, #0
 8013742:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013744:	2301      	movs	r3, #1
 8013746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801374a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801374e:	2200      	movs	r2, #0
 8013750:	4619      	mov	r1, r3
 8013752:	4822      	ldr	r0, [pc, #136]	; (80137dc <fm_menu_config_k_lin_5+0x164>)
 8013754:	f7fa fea2 	bl	800e49c <_txe_queue_send>
        break;
 8013758:	e013      	b.n	8013782 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ESC:
            correct_password = 0;
 801375a:	4b1f      	ldr	r3, [pc, #124]	; (80137d8 <fm_menu_config_k_lin_5+0x160>)
 801375c:	2200      	movs	r2, #0
 801375e:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 8013760:	4b1f      	ldr	r3, [pc, #124]	; (80137e0 <fm_menu_config_k_lin_5+0x168>)
 8013762:	2201      	movs	r2, #1
 8013764:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013766:	4b1f      	ldr	r3, [pc, #124]	; (80137e4 <fm_menu_config_k_lin_5+0x16c>)
 8013768:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801376a:	2301      	movs	r3, #1
 801376c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013770:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013774:	2200      	movs	r2, #0
 8013776:	4619      	mov	r1, r3
 8013778:	4818      	ldr	r0, [pc, #96]	; (80137dc <fm_menu_config_k_lin_5+0x164>)
 801377a:	f7fa fe8f 	bl	800e49c <_txe_queue_send>
        break;
 801377e:	e000      	b.n	8013782 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013780:	bf00      	nop
    }

    previous_event = event_id;
 8013782:	4a19      	ldr	r2, [pc, #100]	; (80137e8 <fm_menu_config_k_lin_5+0x170>)
 8013784:	79fb      	ldrb	r3, [r7, #7]
 8013786:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 8013788:	4b18      	ldr	r3, [pc, #96]	; (80137ec <fm_menu_config_k_lin_5+0x174>)
 801378a:	f107 040c 	add.w	r4, r7, #12
 801378e:	461d      	mov	r5, r3
 8013790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013798:	c407      	stmia	r4!, {r0, r1, r2}
 801379a:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801379c:	f107 030c 	add.w	r3, r7, #12
 80137a0:	211e      	movs	r1, #30
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fb faae 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80137a8:	4b0d      	ldr	r3, [pc, #52]	; (80137e0 <fm_menu_config_k_lin_5+0x168>)
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d108      	bne.n	80137c2 <fm_menu_config_k_lin_5+0x14a>
    {
        digit_lin_modify = DIG_LIN_0;
 80137b0:	4b08      	ldr	r3, [pc, #32]	; (80137d4 <fm_menu_config_k_lin_5+0x15c>)
 80137b2:	2200      	movs	r2, #0
 80137b4:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80137b6:	4b06      	ldr	r3, [pc, #24]	; (80137d0 <fm_menu_config_k_lin_5+0x158>)
 80137b8:	2201      	movs	r2, #1
 80137ba:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80137bc:	4b08      	ldr	r3, [pc, #32]	; (80137e0 <fm_menu_config_k_lin_5+0x168>)
 80137be:	2200      	movs	r2, #0
 80137c0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3730      	adds	r7, #48	; 0x30
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bdb0      	pop	{r4, r5, r7, pc}
 80137cc:	08013679 	.word	0x08013679
 80137d0:	20000146 	.word	0x20000146
 80137d4:	20001dcd 	.word	0x20001dcd
 80137d8:	20001dba 	.word	0x20001dba
 80137dc:	20001388 	.word	0x20001388
 80137e0:	20001dce 	.word	0x20001dce
 80137e4:	080146ad 	.word	0x080146ad
 80137e8:	20001dbb 	.word	0x20001dbb
 80137ec:	080159cc 	.word	0x080159cc

080137f0 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80137f0:	b5b0      	push	{r4, r5, r7, lr}
 80137f2:	b08a      	sub	sp, #40	; 0x28
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	4603      	mov	r3, r0
 80137f8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80137fa:	4b69      	ldr	r3, [pc, #420]	; (80139a0 <fm_menu_config_k_param+0x1b0>)
 80137fc:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 80137fe:	4b69      	ldr	r3, [pc, #420]	; (80139a4 <fm_menu_config_k_param+0x1b4>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	2b01      	cmp	r3, #1
 8013804:	d104      	bne.n	8013810 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 8013806:	f7fc f91c 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 801380a:	4b66      	ldr	r3, [pc, #408]	; (80139a4 <fm_menu_config_k_param+0x1b4>)
 801380c:	2200      	movs	r2, #0
 801380e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013810:	4b65      	ldr	r3, [pc, #404]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 8013812:	781a      	ldrb	r2, [r3, #0]
 8013814:	79fb      	ldrb	r3, [r7, #7]
 8013816:	4611      	mov	r1, r2
 8013818:	4618      	mov	r0, r3
 801381a:	f7fc fb1d 	bl	800fe58 <fm_lcd_k_factor>
    fm_lcd_refresh();
 801381e:	f7fc fca6 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	3b01      	subs	r3, #1
 8013826:	2b04      	cmp	r3, #4
 8013828:	f200 8094 	bhi.w	8013954 <fm_menu_config_k_param+0x164>
 801382c:	a201      	add	r2, pc, #4	; (adr r2, 8013834 <fm_menu_config_k_param+0x44>)
 801382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013832:	bf00      	nop
 8013834:	08013955 	.word	0x08013955
 8013838:	08013849 	.word	0x08013849
 801383c:	08013871 	.word	0x08013871
 8013840:	08013899 	.word	0x08013899
 8013844:	08013935 	.word	0x08013935
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013848:	4b58      	ldr	r3, [pc, #352]	; (80139ac <fm_menu_config_k_param+0x1bc>)
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d004      	beq.n	801385a <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013850:	4b55      	ldr	r3, [pc, #340]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	4618      	mov	r0, r3
 8013856:	f7fb fc67 	bl	800f128 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801385a:	2301      	movs	r3, #1
 801385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013860:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013864:	2200      	movs	r2, #0
 8013866:	4619      	mov	r1, r3
 8013868:	4851      	ldr	r0, [pc, #324]	; (80139b0 <fm_menu_config_k_param+0x1c0>)
 801386a:	f7fa fe17 	bl	800e49c <_txe_queue_send>
        break;
 801386e:	e072      	b.n	8013956 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013870:	4b4e      	ldr	r3, [pc, #312]	; (80139ac <fm_menu_config_k_param+0x1bc>)
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d004      	beq.n	8013882 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013878:	4b4b      	ldr	r3, [pc, #300]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	4618      	mov	r0, r3
 801387e:	f7fb fc93 	bl	800f1a8 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013882:	2301      	movs	r3, #1
 8013884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013888:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801388c:	2200      	movs	r2, #0
 801388e:	4619      	mov	r1, r3
 8013890:	4847      	ldr	r0, [pc, #284]	; (80139b0 <fm_menu_config_k_param+0x1c0>)
 8013892:	f7fa fe03 	bl	800e49c <_txe_queue_send>
        break;
 8013896:	e05e      	b.n	8013956 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013898:	4b44      	ldr	r3, [pc, #272]	; (80139ac <fm_menu_config_k_param+0x1bc>)
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d03e      	beq.n	801391e <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 80138a0:	4b41      	ldr	r3, [pc, #260]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d103      	bne.n	80138b0 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 80138a8:	4b3f      	ldr	r3, [pc, #252]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138aa:	2201      	movs	r2, #1
 80138ac:	701a      	strb	r2, [r3, #0]
 80138ae:	e036      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 80138b0:	4b3d      	ldr	r3, [pc, #244]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d103      	bne.n	80138c0 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 80138b8:	4b3b      	ldr	r3, [pc, #236]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138ba:	2202      	movs	r2, #2
 80138bc:	701a      	strb	r2, [r3, #0]
 80138be:	e02e      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 80138c0:	4b39      	ldr	r3, [pc, #228]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	2b02      	cmp	r3, #2
 80138c6:	d103      	bne.n	80138d0 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 80138c8:	4b37      	ldr	r3, [pc, #220]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138ca:	2203      	movs	r2, #3
 80138cc:	701a      	strb	r2, [r3, #0]
 80138ce:	e026      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 80138d0:	4b35      	ldr	r3, [pc, #212]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b03      	cmp	r3, #3
 80138d6:	d103      	bne.n	80138e0 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 80138d8:	4b33      	ldr	r3, [pc, #204]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138da:	2204      	movs	r2, #4
 80138dc:	701a      	strb	r2, [r3, #0]
 80138de:	e01e      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 80138e0:	4b31      	ldr	r3, [pc, #196]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	2b04      	cmp	r3, #4
 80138e6:	d103      	bne.n	80138f0 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 80138e8:	4b2f      	ldr	r3, [pc, #188]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138ea:	2205      	movs	r2, #5
 80138ec:	701a      	strb	r2, [r3, #0]
 80138ee:	e016      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 80138f0:	4b2d      	ldr	r3, [pc, #180]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b05      	cmp	r3, #5
 80138f6:	d103      	bne.n	8013900 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 80138f8:	4b2b      	ldr	r3, [pc, #172]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 80138fa:	2206      	movs	r2, #6
 80138fc:	701a      	strb	r2, [r3, #0]
 80138fe:	e00e      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 8013900:	4b29      	ldr	r3, [pc, #164]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	2b06      	cmp	r3, #6
 8013906:	d103      	bne.n	8013910 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 8013908:	4b27      	ldr	r3, [pc, #156]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 801390a:	2207      	movs	r2, #7
 801390c:	701a      	strb	r2, [r3, #0]
 801390e:	e006      	b.n	801391e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 8013910:	4b25      	ldr	r3, [pc, #148]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b07      	cmp	r3, #7
 8013916:	d102      	bne.n	801391e <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 8013918:	4b23      	ldr	r3, [pc, #140]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 801391a:	2200      	movs	r2, #0
 801391c:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801391e:	2301      	movs	r3, #1
 8013920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013924:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013928:	2200      	movs	r2, #0
 801392a:	4619      	mov	r1, r3
 801392c:	4820      	ldr	r0, [pc, #128]	; (80139b0 <fm_menu_config_k_param+0x1c0>)
 801392e:	f7fa fdb5 	bl	800e49c <_txe_queue_send>
        break;
 8013932:	e010      	b.n	8013956 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013934:	4b1f      	ldr	r3, [pc, #124]	; (80139b4 <fm_menu_config_k_param+0x1c4>)
 8013936:	2201      	movs	r2, #1
 8013938:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 801393a:	4b1f      	ldr	r3, [pc, #124]	; (80139b8 <fm_menu_config_k_param+0x1c8>)
 801393c:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 801393e:	2301      	movs	r3, #1
 8013940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013944:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013948:	2200      	movs	r2, #0
 801394a:	4619      	mov	r1, r3
 801394c:	4818      	ldr	r0, [pc, #96]	; (80139b0 <fm_menu_config_k_param+0x1c0>)
 801394e:	f7fa fda5 	bl	800e49c <_txe_queue_send>
        break;
 8013952:	e000      	b.n	8013956 <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013954:	bf00      	nop
    }

    previous_event = event_id;
 8013956:	4a19      	ldr	r2, [pc, #100]	; (80139bc <fm_menu_config_k_param+0x1cc>)
 8013958:	79fb      	ldrb	r3, [r7, #7]
 801395a:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K\n";
 801395c:	4b18      	ldr	r3, [pc, #96]	; (80139c0 <fm_menu_config_k_param+0x1d0>)
 801395e:	f107 0408 	add.w	r4, r7, #8
 8013962:	461d      	mov	r5, r3
 8013964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013968:	e895 0003 	ldmia.w	r5, {r0, r1}
 801396c:	e884 0003 	stmia.w	r4, {r0, r1}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013970:	f107 0308 	add.w	r3, r7, #8
 8013974:	2118      	movs	r1, #24
 8013976:	4618      	mov	r0, r3
 8013978:	f7fb f9c4 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801397c:	4b0d      	ldr	r3, [pc, #52]	; (80139b4 <fm_menu_config_k_param+0x1c4>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b01      	cmp	r3, #1
 8013982:	d108      	bne.n	8013996 <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 8013984:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <fm_menu_config_k_param+0x1b8>)
 8013986:	2200      	movs	r2, #0
 8013988:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801398a:	4b06      	ldr	r3, [pc, #24]	; (80139a4 <fm_menu_config_k_param+0x1b4>)
 801398c:	2201      	movs	r2, #1
 801398e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013990:	4b08      	ldr	r3, [pc, #32]	; (80139b4 <fm_menu_config_k_param+0x1c4>)
 8013992:	2200      	movs	r2, #0
 8013994:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013998:	4618      	mov	r0, r3
 801399a:	3728      	adds	r7, #40	; 0x28
 801399c:	46bd      	mov	sp, r7
 801399e:	bdb0      	pop	{r4, r5, r7, pc}
 80139a0:	080137f1 	.word	0x080137f1
 80139a4:	20000147 	.word	0x20000147
 80139a8:	20001dcf 	.word	0x20001dcf
 80139ac:	20001dba 	.word	0x20001dba
 80139b0:	20001388 	.word	0x20001388
 80139b4:	20001dd0 	.word	0x20001dd0
 80139b8:	080130a9 	.word	0x080130a9
 80139bc:	20001dbb 	.word	0x20001dbb
 80139c0:	080159ec 	.word	0x080159ec

080139c4 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 80139c4:	b5b0      	push	{r4, r5, r7, lr}
 80139c6:	b086      	sub	sp, #24
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	4603      	mov	r3, r0
 80139cc:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80139ce:	4ba7      	ldr	r3, [pc, #668]	; (8013c6c <fm_menu_config_pass+0x2a8>)
 80139d0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80139d2:	4ba7      	ldr	r3, [pc, #668]	; (8013c70 <fm_menu_config_pass+0x2ac>)
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d10a      	bne.n	80139f0 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 80139da:	4ba6      	ldr	r3, [pc, #664]	; (8013c74 <fm_menu_config_pass+0x2b0>)
 80139dc:	2201      	movs	r2, #1
 80139de:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 80139e0:	4ba5      	ldr	r3, [pc, #660]	; (8013c78 <fm_menu_config_pass+0x2b4>)
 80139e2:	2200      	movs	r2, #0
 80139e4:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 80139e6:	f7fc f82c 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80139ea:	4ba1      	ldr	r3, [pc, #644]	; (8013c70 <fm_menu_config_pass+0x2ac>)
 80139ec:	2200      	movs	r2, #0
 80139ee:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 80139f0:	2100      	movs	r1, #0
 80139f2:	200a      	movs	r0, #10
 80139f4:	f7fd fee0 	bl	80117b8 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 80139f8:	4ba0      	ldr	r3, [pc, #640]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d104      	bne.n	8013a0a <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013a00:	2100      	movs	r1, #0
 8013a02:	200d      	movs	r0, #13
 8013a04:	f7fd fed8 	bl	80117b8 <lcd_set_symbol>
 8013a08:	e010      	b.n	8013a2c <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 8013a0a:	4b9c      	ldr	r3, [pc, #624]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	d104      	bne.n	8013a1c <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013a12:	2100      	movs	r1, #0
 8013a14:	200e      	movs	r0, #14
 8013a16:	f7fd fecf 	bl	80117b8 <lcd_set_symbol>
 8013a1a:	e007      	b.n	8013a2c <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013a1c:	4b97      	ldr	r3, [pc, #604]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	2b03      	cmp	r3, #3
 8013a22:	d103      	bne.n	8013a2c <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013a24:	2100      	movs	r1, #0
 8013a26:	200f      	movs	r0, #15
 8013a28:	f7fd fec6 	bl	80117b8 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013a2c:	f7fc fb9f 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8013a30:	79fb      	ldrb	r3, [r7, #7]
 8013a32:	3b01      	subs	r3, #1
 8013a34:	2b04      	cmp	r3, #4
 8013a36:	f200 8085 	bhi.w	8013b44 <fm_menu_config_pass+0x180>
 8013a3a:	a201      	add	r2, pc, #4	; (adr r2, 8013a40 <fm_menu_config_pass+0x7c>)
 8013a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a40:	08013b45 	.word	0x08013b45
 8013a44:	08013a55 	.word	0x08013a55
 8013a48:	08013a91 	.word	0x08013a91
 8013a4c:	08013acd 	.word	0x08013acd
 8013a50:	08013b09 	.word	0x08013b09
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013a54:	4b89      	ldr	r3, [pc, #548]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	4b89      	ldr	r3, [pc, #548]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a60:	4b86      	ldr	r3, [pc, #536]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	2b02      	cmp	r3, #2
 8013a66:	d80f      	bhi.n	8013a88 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a6c:	f107 0313 	add.w	r3, r7, #19
 8013a70:	2200      	movs	r2, #0
 8013a72:	4619      	mov	r1, r3
 8013a74:	4883      	ldr	r0, [pc, #524]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013a76:	f7fa fd11 	bl	800e49c <_txe_queue_send>
                password_index++;
 8013a7a:	4b80      	ldr	r3, [pc, #512]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	4b7e      	ldr	r3, [pc, #504]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a84:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013a86:	e05e      	b.n	8013b46 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013a88:	4b7f      	ldr	r3, [pc, #508]	; (8013c88 <fm_menu_config_pass+0x2c4>)
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	701a      	strb	r2, [r3, #0]
        break;
 8013a8e:	e05a      	b.n	8013b46 <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013a90:	4b7a      	ldr	r3, [pc, #488]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	461a      	mov	r2, r3
 8013a96:	4b7a      	ldr	r3, [pc, #488]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013a98:	2102      	movs	r1, #2
 8013a9a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a9c:	4b77      	ldr	r3, [pc, #476]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d80f      	bhi.n	8013ac4 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013aa8:	f107 0313 	add.w	r3, r7, #19
 8013aac:	2200      	movs	r2, #0
 8013aae:	4619      	mov	r1, r3
 8013ab0:	4874      	ldr	r0, [pc, #464]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013ab2:	f7fa fcf3 	bl	800e49c <_txe_queue_send>
                password_index++;
 8013ab6:	4b71      	ldr	r3, [pc, #452]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	3301      	adds	r3, #1
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	4b6f      	ldr	r3, [pc, #444]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013ac0:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013ac2:	e040      	b.n	8013b46 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013ac4:	4b70      	ldr	r3, [pc, #448]	; (8013c88 <fm_menu_config_pass+0x2c4>)
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	701a      	strb	r2, [r3, #0]
        break;
 8013aca:	e03c      	b.n	8013b46 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013acc:	4b6b      	ldr	r3, [pc, #428]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4b6b      	ldr	r3, [pc, #428]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013ad4:	2103      	movs	r1, #3
 8013ad6:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013ad8:	4b68      	ldr	r3, [pc, #416]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d80f      	bhi.n	8013b00 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ae4:	f107 0313 	add.w	r3, r7, #19
 8013ae8:	2200      	movs	r2, #0
 8013aea:	4619      	mov	r1, r3
 8013aec:	4865      	ldr	r0, [pc, #404]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013aee:	f7fa fcd5 	bl	800e49c <_txe_queue_send>
                password_index++;
 8013af2:	4b62      	ldr	r3, [pc, #392]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	3301      	adds	r3, #1
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	4b60      	ldr	r3, [pc, #384]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013afc:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013afe:	e022      	b.n	8013b46 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b00:	4b61      	ldr	r3, [pc, #388]	; (8013c88 <fm_menu_config_pass+0x2c4>)
 8013b02:	2201      	movs	r2, #1
 8013b04:	701a      	strb	r2, [r3, #0]
        break;
 8013b06:	e01e      	b.n	8013b46 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013b08:	4b5c      	ldr	r3, [pc, #368]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	4b5c      	ldr	r3, [pc, #368]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013b10:	2104      	movs	r1, #4
 8013b12:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013b14:	4b59      	ldr	r3, [pc, #356]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	2b02      	cmp	r3, #2
 8013b1a:	d80f      	bhi.n	8013b3c <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b20:	f107 0313 	add.w	r3, r7, #19
 8013b24:	2200      	movs	r2, #0
 8013b26:	4619      	mov	r1, r3
 8013b28:	4856      	ldr	r0, [pc, #344]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013b2a:	f7fa fcb7 	bl	800e49c <_txe_queue_send>
                password_index++;
 8013b2e:	4b53      	ldr	r3, [pc, #332]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	3301      	adds	r3, #1
 8013b34:	b2da      	uxtb	r2, r3
 8013b36:	4b51      	ldr	r3, [pc, #324]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013b38:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013b3a:	e004      	b.n	8013b46 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b3c:	4b52      	ldr	r3, [pc, #328]	; (8013c88 <fm_menu_config_pass+0x2c4>)
 8013b3e:	2201      	movs	r2, #1
 8013b40:	701a      	strb	r2, [r3, #0]
        break;
 8013b42:	e000      	b.n	8013b46 <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013b44:	bf00      	nop
    }

    previous_event = event_id;
 8013b46:	4a51      	ldr	r2, [pc, #324]	; (8013c8c <fm_menu_config_pass+0x2c8>)
 8013b48:	79fb      	ldrb	r3, [r7, #7]
 8013b4a:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Password\n";
 8013b4c:	4a50      	ldr	r2, [pc, #320]	; (8013c90 <fm_menu_config_pass+0x2cc>)
 8013b4e:	f107 0308 	add.w	r3, r7, #8
 8013b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8013b54:	c303      	stmia	r3!, {r0, r1}
 8013b56:	801a      	strh	r2, [r3, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013b58:	f107 0308 	add.w	r3, r7, #8
 8013b5c:	210a      	movs	r1, #10
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7fb f8d0 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013b64:	4b48      	ldr	r3, [pc, #288]	; (8013c88 <fm_menu_config_pass+0x2c4>)
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	f040 80bc 	bne.w	8013ce6 <fm_menu_config_pass+0x322>
 8013b6e:	4b43      	ldr	r3, [pc, #268]	; (8013c7c <fm_menu_config_pass+0x2b8>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	f240 80b7 	bls.w	8013ce6 <fm_menu_config_pass+0x322>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 8013b78:	4b41      	ldr	r3, [pc, #260]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d11d      	bne.n	8013bbc <fm_menu_config_pass+0x1f8>
 8013b80:	4b3f      	ldr	r3, [pc, #252]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013b82:	785b      	ldrb	r3, [r3, #1]
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d119      	bne.n	8013bbc <fm_menu_config_pass+0x1f8>
 8013b88:	4b3d      	ldr	r3, [pc, #244]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013b8a:	789b      	ldrb	r3, [r3, #2]
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d115      	bne.n	8013bbc <fm_menu_config_pass+0x1f8>
        && password[PASSWORD_LENGTH - 1] == 3)
 8013b90:	4b3b      	ldr	r3, [pc, #236]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013b92:	78db      	ldrb	r3, [r3, #3]
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d111      	bne.n	8013bbc <fm_menu_config_pass+0x1f8>
        {
            correct_password = 1;
 8013b98:	4b37      	ldr	r3, [pc, #220]	; (8013c78 <fm_menu_config_pass+0x2b4>)
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013b9e:	4b3d      	ldr	r3, [pc, #244]	; (8013c94 <fm_menu_config_pass+0x2d0>)
 8013ba0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ba6:	f107 0313 	add.w	r3, r7, #19
 8013baa:	2200      	movs	r2, #0
 8013bac:	4619      	mov	r1, r3
 8013bae:	4835      	ldr	r0, [pc, #212]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013bb0:	f7fa fc74 	bl	800e49c <_txe_queue_send>

            password_try = 0;
 8013bb4:	4b38      	ldr	r3, [pc, #224]	; (8013c98 <fm_menu_config_pass+0x2d4>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	701a      	strb	r2, [r3, #0]
 8013bba:	e07f      	b.n	8013cbc <fm_menu_config_pass+0x2f8>
        }
        else if(password[0] == 2 && password[1] == 2 && password[2] == 1
 8013bbc:	4b30      	ldr	r3, [pc, #192]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d139      	bne.n	8013c38 <fm_menu_config_pass+0x274>
 8013bc4:	4b2e      	ldr	r3, [pc, #184]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013bc6:	785b      	ldrb	r3, [r3, #1]
 8013bc8:	2b02      	cmp	r3, #2
 8013bca:	d135      	bne.n	8013c38 <fm_menu_config_pass+0x274>
 8013bcc:	4b2c      	ldr	r3, [pc, #176]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013bce:	789b      	ldrb	r3, [r3, #2]
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d131      	bne.n	8013c38 <fm_menu_config_pass+0x274>
        && password[PASSWORD_LENGTH - 1] == 1)
 8013bd4:	4b2a      	ldr	r3, [pc, #168]	; (8013c80 <fm_menu_config_pass+0x2bc>)
 8013bd6:	78db      	ldrb	r3, [r3, #3]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d12d      	bne.n	8013c38 <fm_menu_config_pass+0x274>
        {
            correct_password = 1;
 8013bdc:	4b26      	ldr	r3, [pc, #152]	; (8013c78 <fm_menu_config_pass+0x2b4>)
 8013bde:	2201      	movs	r2, #1
 8013be0:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013be2:	4b2e      	ldr	r3, [pc, #184]	; (8013c9c <fm_menu_config_pass+0x2d8>)
 8013be4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013be6:	2301      	movs	r3, #1
 8013be8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bea:	f107 0313 	add.w	r3, r7, #19
 8013bee:	2200      	movs	r2, #0
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4824      	ldr	r0, [pc, #144]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013bf4:	f7fa fc52 	bl	800e49c <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013bf8:	f7fb f81a 	bl	800ec30 <fm_calendar_get_day>
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	f7fb f821 	bl	800ec44 <fm_calendar_get_month>
 8013c02:	4605      	mov	r5, r0
 8013c04:	f7fb f828 	bl	800ec58 <fm_calendar_get_year>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	4629      	mov	r1, r5
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f7fb fa36 	bl	800f080 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013c14:	f7fa ffee 	bl	800ebf4 <fm_calendar_get_hour>
 8013c18:	4604      	mov	r4, r0
 8013c1a:	f7fa fff5 	bl	800ec08 <fm_calendar_get_minute>
 8013c1e:	4605      	mov	r5, r0
 8013c20:	f7fa fffc 	bl	800ec1c <fm_calendar_get_second>
 8013c24:	4603      	mov	r3, r0
 8013c26:	461a      	mov	r2, r3
 8013c28:	4629      	mov	r1, r5
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f7fb fa54 	bl	800f0d8 <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013c30:	4b19      	ldr	r3, [pc, #100]	; (8013c98 <fm_menu_config_pass+0x2d4>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	701a      	strb	r2, [r3, #0]
 8013c36:	e041      	b.n	8013cbc <fm_menu_config_pass+0x2f8>
        }
        else
        {
            correct_password = 0;
 8013c38:	4b0f      	ldr	r3, [pc, #60]	; (8013c78 <fm_menu_config_pass+0x2b4>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013c3e:	4b16      	ldr	r3, [pc, #88]	; (8013c98 <fm_menu_config_pass+0x2d4>)
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	3301      	adds	r3, #1
 8013c44:	b2da      	uxtb	r2, r3
 8013c46:	4b14      	ldr	r3, [pc, #80]	; (8013c98 <fm_menu_config_pass+0x2d4>)
 8013c48:	701a      	strb	r2, [r3, #0]

            if(password_try < 3)
 8013c4a:	4b13      	ldr	r3, [pc, #76]	; (8013c98 <fm_menu_config_pass+0x2d4>)
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	d826      	bhi.n	8013ca0 <fm_menu_config_pass+0x2dc>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013c52:	4b06      	ldr	r3, [pc, #24]	; (8013c6c <fm_menu_config_pass+0x2a8>)
 8013c54:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013c56:	2301      	movs	r3, #1
 8013c58:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c5a:	f107 0313 	add.w	r3, r7, #19
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4619      	mov	r1, r3
 8013c62:	4808      	ldr	r0, [pc, #32]	; (8013c84 <fm_menu_config_pass+0x2c0>)
 8013c64:	f7fa fc1a 	bl	800e49c <_txe_queue_send>
 8013c68:	e028      	b.n	8013cbc <fm_menu_config_pass+0x2f8>
 8013c6a:	bf00      	nop
 8013c6c:	080139c5 	.word	0x080139c5
 8013c70:	20000148 	.word	0x20000148
 8013c74:	20001dbc 	.word	0x20001dbc
 8013c78:	20001dba 	.word	0x20001dba
 8013c7c:	20001dd1 	.word	0x20001dd1
 8013c80:	20001dd4 	.word	0x20001dd4
 8013c84:	20001388 	.word	0x20001388
 8013c88:	20001dd8 	.word	0x20001dd8
 8013c8c:	20001dbb 	.word	0x20001dbb
 8013c90:	08015a20 	.word	0x08015a20
 8013c94:	080137f1 	.word	0x080137f1
 8013c98:	20001dd9 	.word	0x20001dd9
 8013c9c:	08013fe1 	.word	0x08013fe1
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013ca0:	4b13      	ldr	r3, [pc, #76]	; (8013cf0 <fm_menu_config_pass+0x32c>)
 8013ca2:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ca8:	f107 0313 	add.w	r3, r7, #19
 8013cac:	2200      	movs	r2, #0
 8013cae:	4619      	mov	r1, r3
 8013cb0:	4810      	ldr	r0, [pc, #64]	; (8013cf4 <fm_menu_config_pass+0x330>)
 8013cb2:	f7fa fbf3 	bl	800e49c <_txe_queue_send>

                password_try = 0;
 8013cb6:	4b10      	ldr	r3, [pc, #64]	; (8013cf8 <fm_menu_config_pass+0x334>)
 8013cb8:	2200      	movs	r2, #0
 8013cba:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 8013cbc:	4b0f      	ldr	r3, [pc, #60]	; (8013cfc <fm_menu_config_pass+0x338>)
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 8013cc2:	4b0f      	ldr	r3, [pc, #60]	; (8013d00 <fm_menu_config_pass+0x33c>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 8013cc8:	4b0d      	ldr	r3, [pc, #52]	; (8013d00 <fm_menu_config_pass+0x33c>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 8013cce:	4b0c      	ldr	r3, [pc, #48]	; (8013d00 <fm_menu_config_pass+0x33c>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 8013cd4:	4b0a      	ldr	r3, [pc, #40]	; (8013d00 <fm_menu_config_pass+0x33c>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013cda:	4b0a      	ldr	r3, [pc, #40]	; (8013d04 <fm_menu_config_pass+0x340>)
 8013cdc:	2201      	movs	r2, #1
 8013cde:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013ce0:	4b09      	ldr	r3, [pc, #36]	; (8013d08 <fm_menu_config_pass+0x344>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013ce6:	697b      	ldr	r3, [r7, #20]
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3718      	adds	r7, #24
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bdb0      	pop	{r4, r5, r7, pc}
 8013cf0:	080146ad 	.word	0x080146ad
 8013cf4:	20001388 	.word	0x20001388
 8013cf8:	20001dd9 	.word	0x20001dd9
 8013cfc:	20001dd1 	.word	0x20001dd1
 8013d00:	20001dd4 	.word	0x20001dd4
 8013d04:	20000148 	.word	0x20000148
 8013d08:	20001dd8 	.word	0x20001dd8

08013d0c <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013d0c:	b5b0      	push	{r4, r5, r7, lr}
 8013d0e:	b0d8      	sub	sp, #352	; 0x160
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	4602      	mov	r2, r0
 8013d14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d18:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d1c:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013d1e:	4ba8      	ldr	r3, [pc, #672]	; (8013fc0 <fm_menu_config_units_tim+0x2b4>)
 8013d20:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    fm_event_t event_now;

    if (new_entry == 1)
 8013d24:	4ba7      	ldr	r3, [pc, #668]	; (8013fc4 <fm_menu_config_units_tim+0x2b8>)
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d104      	bne.n	8013d36 <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013d2c:	f7fb fe89 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8013d30:	4ba4      	ldr	r3, [pc, #656]	; (8013fc4 <fm_menu_config_units_tim+0x2b8>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013d36:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d3a:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fc fa85 	bl	8010250 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013d46:	f7fc fa12 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8013d4a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d4e:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	3b01      	subs	r3, #1
 8013d56:	2b04      	cmp	r3, #4
 8013d58:	f200 8103 	bhi.w	8013f62 <fm_menu_config_units_tim+0x256>
 8013d5c:	a201      	add	r2, pc, #4	; (adr r2, 8013d64 <fm_menu_config_units_tim+0x58>)
 8013d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d62:	bf00      	nop
 8013d64:	08013f63 	.word	0x08013f63
 8013d68:	08013d79 	.word	0x08013d79
 8013d6c:	08013e1b 	.word	0x08013e1b
 8013d70:	08013ea9 	.word	0x08013ea9
 8013d74:	08013f3b 	.word	0x08013f3b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013d78:	4b93      	ldr	r3, [pc, #588]	; (8013fc8 <fm_menu_config_units_tim+0x2bc>)
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d03e      	beq.n	8013dfe <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013d80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fb f803 	bl	800ed94 <fm_factory_get_rate>
 8013d8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013d96:	7e5b      	ldrb	r3, [r3, #25]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d103      	bne.n	8013da4 <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	f7fb fc51 	bl	800f644 <fm_factory_modify_time_units>
 8013da2:	e02a      	b.n	8013dfa <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013da4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fa fff1 	bl	800ed94 <fm_factory_get_rate>
 8013db2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dba:	7e5b      	ldrb	r3, [r3, #25]
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d103      	bne.n	8013dc8 <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013dc0:	2002      	movs	r0, #2
 8013dc2:	f7fb fc3f 	bl	800f644 <fm_factory_modify_time_units>
 8013dc6:	e018      	b.n	8013dfa <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013dc8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fa ffe1 	bl	800ed94 <fm_factory_get_rate>
 8013dd2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8013dd6:	2b02      	cmp	r3, #2
 8013dd8:	d103      	bne.n	8013de2 <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013dda:	2003      	movs	r0, #3
 8013ddc:	f7fb fc32 	bl	800f644 <fm_factory_modify_time_units>
 8013de0:	e00b      	b.n	8013dfa <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013de2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fa ffd4 	bl	800ed94 <fm_factory_get_rate>
 8013dec:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013df0:	2b03      	cmp	r3, #3
 8013df2:	d102      	bne.n	8013dfa <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013df4:	2000      	movs	r0, #0
 8013df6:	f7fb fc25 	bl	800f644 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013dfa:	f7fb fe22 	bl	800fa42 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013dfe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e02:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013e06:	2201      	movs	r2, #1
 8013e08:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e0a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013e0e:	2200      	movs	r2, #0
 8013e10:	4619      	mov	r1, r3
 8013e12:	486e      	ldr	r0, [pc, #440]	; (8013fcc <fm_menu_config_units_tim+0x2c0>)
 8013e14:	f7fa fb42 	bl	800e49c <_txe_queue_send>
        break;
 8013e18:	e0a4      	b.n	8013f64 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013e1a:	4b6b      	ldr	r3, [pc, #428]	; (8013fc8 <fm_menu_config_units_tim+0x2bc>)
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d034      	beq.n	8013e8c <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fa ffb4 	bl	800ed94 <fm_factory_get_rate>
 8013e2c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d103      	bne.n	8013e3c <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013e34:	2003      	movs	r0, #3
 8013e36:	f7fb fc05 	bl	800f644 <fm_factory_modify_time_units>
 8013e3a:	e025      	b.n	8013e88 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013e3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fa ffa7 	bl	800ed94 <fm_factory_get_rate>
 8013e46:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013e4a:	2b03      	cmp	r3, #3
 8013e4c:	d103      	bne.n	8013e56 <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013e4e:	2002      	movs	r0, #2
 8013e50:	f7fb fbf8 	bl	800f644 <fm_factory_modify_time_units>
 8013e54:	e018      	b.n	8013e88 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013e56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fa ff9a 	bl	800ed94 <fm_factory_get_rate>
 8013e60:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d103      	bne.n	8013e70 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013e68:	2001      	movs	r0, #1
 8013e6a:	f7fb fbeb 	bl	800f644 <fm_factory_modify_time_units>
 8013e6e:	e00b      	b.n	8013e88 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fa ff8d 	bl	800ed94 <fm_factory_get_rate>
 8013e7a:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d102      	bne.n	8013e88 <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8013e82:	2000      	movs	r0, #0
 8013e84:	f7fb fbde 	bl	800f644 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013e88:	f7fb fddb 	bl	800fa42 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013e8c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013e94:	2201      	movs	r2, #1
 8013e96:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e98:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	484a      	ldr	r0, [pc, #296]	; (8013fcc <fm_menu_config_units_tim+0x2c0>)
 8013ea2:	f7fa fafb 	bl	800e49c <_txe_queue_send>
        break;
 8013ea6:	e05d      	b.n	8013f64 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013ea8:	4b47      	ldr	r3, [pc, #284]	; (8013fc8 <fm_menu_config_units_tim+0x2bc>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d036      	beq.n	8013f1e <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013eb0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fa ff95 	bl	800ede4 <fm_factory_get_units_tim>
 8013eba:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d104      	bne.n	8013ecc <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	2001      	movs	r0, #1
 8013ec6:	f7fb fba5 	bl	800f614 <fm_factory_modify_res_rate>
 8013eca:	e028      	b.n	8013f1e <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8013ecc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fa ff87 	bl	800ede4 <fm_factory_get_units_tim>
 8013ed6:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d104      	bne.n	8013ee8 <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8013ede:	2102      	movs	r1, #2
 8013ee0:	2002      	movs	r0, #2
 8013ee2:	f7fb fb97 	bl	800f614 <fm_factory_modify_res_rate>
 8013ee6:	e01a      	b.n	8013f1e <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 8013ee8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fa ff79 	bl	800ede4 <fm_factory_get_units_tim>
 8013ef2:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8013ef6:	2b02      	cmp	r3, #2
 8013ef8:	d104      	bne.n	8013f04 <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 8013efa:	2103      	movs	r1, #3
 8013efc:	2003      	movs	r0, #3
 8013efe:	f7fb fb89 	bl	800f614 <fm_factory_modify_res_rate>
 8013f02:	e00c      	b.n	8013f1e <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8013f04:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fa ff6b 	bl	800ede4 <fm_factory_get_units_tim>
 8013f0e:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d103      	bne.n	8013f1e <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 8013f16:	2100      	movs	r1, #0
 8013f18:	2000      	movs	r0, #0
 8013f1a:	f7fb fb7b 	bl	800f614 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013f1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f22:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f26:	2201      	movs	r2, #1
 8013f28:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f2a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4619      	mov	r1, r3
 8013f32:	4826      	ldr	r0, [pc, #152]	; (8013fcc <fm_menu_config_units_tim+0x2c0>)
 8013f34:	f7fa fab2 	bl	800e49c <_txe_queue_send>
        break;
 8013f38:	e014      	b.n	8013f64 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013f3a:	4b25      	ldr	r3, [pc, #148]	; (8013fd0 <fm_menu_config_units_tim+0x2c4>)
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013f40:	4b24      	ldr	r3, [pc, #144]	; (8013fd4 <fm_menu_config_units_tim+0x2c8>)
 8013f42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            event_now = EVENT_LCD_REFRESH;
 8013f46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f4e:	2201      	movs	r2, #1
 8013f50:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f52:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013f56:	2200      	movs	r2, #0
 8013f58:	4619      	mov	r1, r3
 8013f5a:	481c      	ldr	r0, [pc, #112]	; (8013fcc <fm_menu_config_units_tim+0x2c0>)
 8013f5c:	f7fa fa9e 	bl	800e49c <_txe_queue_send>
        break;
 8013f60:	e000      	b.n	8013f64 <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013f62:	bf00      	nop
    }

    previous_event = event_id;
 8013f64:	4a1c      	ldr	r2, [pc, #112]	; (8013fd8 <fm_menu_config_units_tim+0x2cc>)
 8013f66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f6a:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013f72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f76:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013f7a:	4a18      	ldr	r2, [pc, #96]	; (8013fdc <fm_menu_config_units_tim+0x2d0>)
 8013f7c:	461c      	mov	r4, r3
 8013f7e:	4615      	mov	r5, r2
 8013f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013f90:	f107 0308 	add.w	r3, r7, #8
 8013f94:	212c      	movs	r1, #44	; 0x2c
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7fa feb4 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013f9c:	4b0c      	ldr	r3, [pc, #48]	; (8013fd0 <fm_menu_config_units_tim+0x2c4>)
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d105      	bne.n	8013fb0 <fm_menu_config_units_tim+0x2a4>
    {
        new_entry = 1;
 8013fa4:	4b07      	ldr	r3, [pc, #28]	; (8013fc4 <fm_menu_config_units_tim+0x2b8>)
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013faa:	4b09      	ldr	r3, [pc, #36]	; (8013fd0 <fm_menu_config_units_tim+0x2c4>)
 8013fac:	2200      	movs	r2, #0
 8013fae:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013fb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	08013d0d 	.word	0x08013d0d
 8013fc4:	20000149 	.word	0x20000149
 8013fc8:	20001dba 	.word	0x20001dba
 8013fcc:	20001388 	.word	0x20001388
 8013fd0:	20001dda 	.word	0x20001dda
 8013fd4:	08012765 	.word	0x08012765
 8013fd8:	20001dbb 	.word	0x20001dbb
 8013fdc:	08015a40 	.word	0x08015a40

08013fe0 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8013fe0:	b5b0      	push	{r4, r5, r7, lr}
 8013fe2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	4602      	mov	r2, r0
 8013fea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fee:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013ff2:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013ff4:	4bc8      	ldr	r3, [pc, #800]	; (8014318 <fm_menu_config_units_vol+0x338>)
 8013ff6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    fm_event_t event_now;

    if (new_entry == 1)
 8013ffa:	4bc8      	ldr	r3, [pc, #800]	; (801431c <fm_menu_config_units_vol+0x33c>)
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d104      	bne.n	801400c <fm_menu_config_units_vol+0x2c>
    {
        fm_lcd_clear();
 8014002:	f7fb fd1e 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8014006:	4bc5      	ldr	r3, [pc, #788]	; (801431c <fm_menu_config_units_vol+0x33c>)
 8014008:	2200      	movs	r2, #0
 801400a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 801400c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014010:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8014014:	781b      	ldrb	r3, [r3, #0]
 8014016:	4618      	mov	r0, r3
 8014018:	f7fc f9b6 	bl	8010388 <fm_lcd_units_vol>
    fm_lcd_refresh();
 801401c:	f7fc f8a7 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8014020:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014024:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	3b01      	subs	r3, #1
 801402c:	2b04      	cmp	r3, #4
 801402e:	f200 817f 	bhi.w	8014330 <fm_menu_config_units_vol+0x350>
 8014032:	a201      	add	r2, pc, #4	; (adr r2, 8014038 <fm_menu_config_units_vol+0x58>)
 8014034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014038:	08014331 	.word	0x08014331
 801403c:	0801404d 	.word	0x0801404d
 8014040:	0801416f 	.word	0x0801416f
 8014044:	08014255 	.word	0x08014255
 8014048:	080142ef 	.word	0x080142ef
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801404c:	4bb4      	ldr	r3, [pc, #720]	; (8014320 <fm_menu_config_units_vol+0x340>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d07e      	beq.n	8014152 <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8014054:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014058:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801405c:	4618      	mov	r0, r3
 801405e:	f7fa fe6d 	bl	800ed3c <fm_factory_get_acm>
 8014062:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014066:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801406a:	7e1b      	ldrb	r3, [r3, #24]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d103      	bne.n	8014078 <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 8014070:	2001      	movs	r0, #1
 8014072:	f7fb fb01 	bl	800f678 <fm_factory_modify_volume_units>
 8014076:	e06a      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014078:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801407c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014080:	4618      	mov	r0, r3
 8014082:	f7fa fe5b 	bl	800ed3c <fm_factory_get_acm>
 8014086:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801408a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801408e:	7e1b      	ldrb	r3, [r3, #24]
 8014090:	2b01      	cmp	r3, #1
 8014092:	d103      	bne.n	801409c <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 8014094:	2002      	movs	r0, #2
 8014096:	f7fb faef 	bl	800f678 <fm_factory_modify_volume_units>
 801409a:	e058      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 801409c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7fa fe49 	bl	800ed3c <fm_factory_get_acm>
 80140aa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80140b2:	7e1b      	ldrb	r3, [r3, #24]
 80140b4:	2b02      	cmp	r3, #2
 80140b6:	d103      	bne.n	80140c0 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 80140b8:	2003      	movs	r0, #3
 80140ba:	f7fb fadd 	bl	800f678 <fm_factory_modify_volume_units>
 80140be:	e046      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 80140c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fa fe37 	bl	800ed3c <fm_factory_get_acm>
 80140ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80140d6:	7e1b      	ldrb	r3, [r3, #24]
 80140d8:	2b03      	cmp	r3, #3
 80140da:	d103      	bne.n	80140e4 <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 80140dc:	2004      	movs	r0, #4
 80140de:	f7fb facb 	bl	800f678 <fm_factory_modify_volume_units>
 80140e2:	e034      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 80140e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140e8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fa fe25 	bl	800ed3c <fm_factory_get_acm>
 80140f2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80140fa:	7e1b      	ldrb	r3, [r3, #24]
 80140fc:	2b04      	cmp	r3, #4
 80140fe:	d103      	bne.n	8014108 <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 8014100:	2005      	movs	r0, #5
 8014102:	f7fb fab9 	bl	800f678 <fm_factory_modify_volume_units>
 8014106:	e022      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8014108:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801410c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014110:	4618      	mov	r0, r3
 8014112:	f7fa fe13 	bl	800ed3c <fm_factory_get_acm>
 8014116:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801411a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801411e:	7e1b      	ldrb	r3, [r3, #24]
 8014120:	2b05      	cmp	r3, #5
 8014122:	d103      	bne.n	801412c <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8014124:	2007      	movs	r0, #7
 8014126:	f7fb faa7 	bl	800f678 <fm_factory_modify_volume_units>
 801412a:	e010      	b.n	801414e <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 801412c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014130:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014134:	4618      	mov	r0, r3
 8014136:	f7fa fe01 	bl	800ed3c <fm_factory_get_acm>
 801413a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801413e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014142:	7e1b      	ldrb	r3, [r3, #24]
 8014144:	2b07      	cmp	r3, #7
 8014146:	d102      	bne.n	801414e <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 8014148:	2000      	movs	r0, #0
 801414a:	f7fb fa95 	bl	800f678 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 801414e:	f7fb fc78 	bl	800fa42 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014152:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014156:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 801415a:	2201      	movs	r2, #1
 801415c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801415e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014162:	2200      	movs	r2, #0
 8014164:	4619      	mov	r1, r3
 8014166:	486f      	ldr	r0, [pc, #444]	; (8014324 <fm_menu_config_units_vol+0x344>)
 8014168:	f7fa f998 	bl	800e49c <_txe_queue_send>
        break;
 801416c:	e0e1      	b.n	8014332 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801416e:	4b6c      	ldr	r3, [pc, #432]	; (8014320 <fm_menu_config_units_vol+0x340>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d060      	beq.n	8014238 <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8014176:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801417e:	4618      	mov	r0, r3
 8014180:	f7fa fddc 	bl	800ed3c <fm_factory_get_acm>
 8014184:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801418c:	7e1b      	ldrb	r3, [r3, #24]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d103      	bne.n	801419a <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8014192:	2007      	movs	r0, #7
 8014194:	f7fb fa70 	bl	800f678 <fm_factory_modify_volume_units>
 8014198:	e04c      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 801419a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fa fdcc 	bl	800ed3c <fm_factory_get_acm>
 80141a4:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 80141a8:	2b07      	cmp	r3, #7
 80141aa:	d103      	bne.n	80141b4 <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 80141ac:	2005      	movs	r0, #5
 80141ae:	f7fb fa63 	bl	800f678 <fm_factory_modify_volume_units>
 80141b2:	e03f      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 80141b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fa fdbf 	bl	800ed3c <fm_factory_get_acm>
 80141be:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80141c2:	2b05      	cmp	r3, #5
 80141c4:	d103      	bne.n	80141ce <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 80141c6:	2004      	movs	r0, #4
 80141c8:	f7fb fa56 	bl	800f678 <fm_factory_modify_volume_units>
 80141cc:	e032      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 80141ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fa fdb2 	bl	800ed3c <fm_factory_get_acm>
 80141d8:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 80141dc:	2b04      	cmp	r3, #4
 80141de:	d103      	bne.n	80141e8 <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 80141e0:	2003      	movs	r0, #3
 80141e2:	f7fb fa49 	bl	800f678 <fm_factory_modify_volume_units>
 80141e6:	e025      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 80141e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fa fda5 	bl	800ed3c <fm_factory_get_acm>
 80141f2:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 80141f6:	2b03      	cmp	r3, #3
 80141f8:	d103      	bne.n	8014202 <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 80141fa:	2002      	movs	r0, #2
 80141fc:	f7fb fa3c 	bl	800f678 <fm_factory_modify_volume_units>
 8014200:	e018      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014202:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8014206:	4618      	mov	r0, r3
 8014208:	f7fa fd98 	bl	800ed3c <fm_factory_get_acm>
 801420c:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8014210:	2b02      	cmp	r3, #2
 8014212:	d103      	bne.n	801421c <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 8014214:	2001      	movs	r0, #1
 8014216:	f7fb fa2f 	bl	800f678 <fm_factory_modify_volume_units>
 801421a:	e00b      	b.n	8014234 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 801421c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8014220:	4618      	mov	r0, r3
 8014222:	f7fa fd8b 	bl	800ed3c <fm_factory_get_acm>
 8014226:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 801422a:	2b01      	cmp	r3, #1
 801422c:	d102      	bne.n	8014234 <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 801422e:	2000      	movs	r0, #0
 8014230:	f7fb fa22 	bl	800f678 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8014234:	f7fb fc05 	bl	800fa42 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014238:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801423c:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014240:	2201      	movs	r2, #1
 8014242:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014244:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014248:	2200      	movs	r2, #0
 801424a:	4619      	mov	r1, r3
 801424c:	4835      	ldr	r0, [pc, #212]	; (8014324 <fm_menu_config_units_vol+0x344>)
 801424e:	f7fa f925 	bl	800e49c <_txe_queue_send>
        break;
 8014252:	e06e      	b.n	8014332 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8014254:	4b32      	ldr	r3, [pc, #200]	; (8014320 <fm_menu_config_units_vol+0x340>)
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d03a      	beq.n	80142d2 <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 801425c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8014260:	4618      	mov	r0, r3
 8014262:	f7fa fdd1 	bl	800ee08 <fm_factory_get_units_vol>
 8014266:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 801426a:	2b00      	cmp	r3, #0
 801426c:	d105      	bne.n	801427a <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 801426e:	2201      	movs	r2, #1
 8014270:	2101      	movs	r1, #1
 8014272:	2001      	movs	r0, #1
 8014274:	f7fb f9b0 	bl	800f5d8 <fm_factory_modify_res_acm_ttl>
 8014278:	e02b      	b.n	80142d2 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 801427a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801427e:	4618      	mov	r0, r3
 8014280:	f7fa fdc2 	bl	800ee08 <fm_factory_get_units_vol>
 8014284:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8014288:	2b01      	cmp	r3, #1
 801428a:	d105      	bne.n	8014298 <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 801428c:	2202      	movs	r2, #2
 801428e:	2102      	movs	r1, #2
 8014290:	2002      	movs	r0, #2
 8014292:	f7fb f9a1 	bl	800f5d8 <fm_factory_modify_res_acm_ttl>
 8014296:	e01c      	b.n	80142d2 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8014298:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801429c:	4618      	mov	r0, r3
 801429e:	f7fa fdb3 	bl	800ee08 <fm_factory_get_units_vol>
 80142a2:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d105      	bne.n	80142b6 <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 80142aa:	2203      	movs	r2, #3
 80142ac:	2103      	movs	r1, #3
 80142ae:	2003      	movs	r0, #3
 80142b0:	f7fb f992 	bl	800f5d8 <fm_factory_modify_res_acm_ttl>
 80142b4:	e00d      	b.n	80142d2 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 80142b6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fa fda4 	bl	800ee08 <fm_factory_get_units_vol>
 80142c0:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 80142c4:	2b03      	cmp	r3, #3
 80142c6:	d104      	bne.n	80142d2 <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 80142c8:	2200      	movs	r2, #0
 80142ca:	2100      	movs	r1, #0
 80142cc:	2000      	movs	r0, #0
 80142ce:	f7fb f983 	bl	800f5d8 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80142d2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142d6:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80142da:	2201      	movs	r2, #1
 80142dc:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142de:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80142e2:	2200      	movs	r2, #0
 80142e4:	4619      	mov	r1, r3
 80142e6:	480f      	ldr	r0, [pc, #60]	; (8014324 <fm_menu_config_units_vol+0x344>)
 80142e8:	f7fa f8d8 	bl	800e49c <_txe_queue_send>
        break;
 80142ec:	e021      	b.n	8014332 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80142ee:	4b0e      	ldr	r3, [pc, #56]	; (8014328 <fm_menu_config_units_vol+0x348>)
 80142f0:	2201      	movs	r2, #1
 80142f2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 80142f4:	4b0d      	ldr	r3, [pc, #52]	; (801432c <fm_menu_config_units_vol+0x34c>)
 80142f6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
            event_now = EVENT_LCD_REFRESH;
 80142fa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142fe:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014302:	2201      	movs	r2, #1
 8014304:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014306:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801430a:	2200      	movs	r2, #0
 801430c:	4619      	mov	r1, r3
 801430e:	4805      	ldr	r0, [pc, #20]	; (8014324 <fm_menu_config_units_vol+0x344>)
 8014310:	f7fa f8c4 	bl	800e49c <_txe_queue_send>
        break;
 8014314:	e00d      	b.n	8014332 <fm_menu_config_units_vol+0x352>
 8014316:	bf00      	nop
 8014318:	08013fe1 	.word	0x08013fe1
 801431c:	2000014a 	.word	0x2000014a
 8014320:	20001dba 	.word	0x20001dba
 8014324:	20001388 	.word	0x20001388
 8014328:	20001ddb 	.word	0x20001ddb
 801432c:	08013d0d 	.word	0x08013d0d
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014330:	bf00      	nop
    }

    previous_event = event_id;
 8014332:	4a16      	ldr	r2, [pc, #88]	; (801438c <fm_menu_config_units_vol+0x3ac>)
 8014334:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014338:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 8014340:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014344:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014348:	4a11      	ldr	r2, [pc, #68]	; (8014390 <fm_menu_config_units_vol+0x3b0>)
 801434a:	461c      	mov	r4, r3
 801434c:	4615      	mov	r5, r2
 801434e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014356:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801435a:	c407      	stmia	r4!, {r0, r1, r2}
 801435c:	7023      	strb	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801435e:	f107 0308 	add.w	r3, r7, #8
 8014362:	212d      	movs	r1, #45	; 0x2d
 8014364:	4618      	mov	r0, r3
 8014366:	f7fa fccd 	bl	800ed04 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801436a:	4b0a      	ldr	r3, [pc, #40]	; (8014394 <fm_menu_config_units_vol+0x3b4>)
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	2b01      	cmp	r3, #1
 8014370:	d105      	bne.n	801437e <fm_menu_config_units_vol+0x39e>
    {
        new_entry = 1;
 8014372:	4b09      	ldr	r3, [pc, #36]	; (8014398 <fm_menu_config_units_vol+0x3b8>)
 8014374:	2201      	movs	r2, #1
 8014376:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014378:	4b06      	ldr	r3, [pc, #24]	; (8014394 <fm_menu_config_units_vol+0x3b4>)
 801437a:	2200      	movs	r2, #0
 801437c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801437e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 8014382:	4618      	mov	r0, r3
 8014384:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8014388:	46bd      	mov	sp, r7
 801438a:	bdb0      	pop	{r4, r5, r7, pc}
 801438c:	20001dbb 	.word	0x20001dbb
 8014390:	08015a6c 	.word	0x08015a6c
 8014394:	20001ddb 	.word	0x20001ddb
 8014398:	2000014a 	.word	0x2000014a

0801439c <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80143a6:	4b38      	ldr	r3, [pc, #224]	; (8014488 <fm_menu_show_acm_rate+0xec>)
 80143a8:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80143aa:	4b38      	ldr	r3, [pc, #224]	; (801448c <fm_menu_show_acm_rate+0xf0>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d104      	bne.n	80143bc <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 80143b2:	f7fb fb46 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80143b6:	4b35      	ldr	r3, [pc, #212]	; (801448c <fm_menu_show_acm_rate+0xf0>)
 80143b8:	2200      	movs	r2, #0
 80143ba:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 80143bc:	f7fb fa7e 	bl	800f8bc <fm_lcd_acm_rate>
    fm_lcd_refresh();
 80143c0:	f7fb fed5 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80143c4:	79fb      	ldrb	r3, [r7, #7]
 80143c6:	3b01      	subs	r3, #1
 80143c8:	2b04      	cmp	r3, #4
 80143ca:	d841      	bhi.n	8014450 <fm_menu_show_acm_rate+0xb4>
 80143cc:	a201      	add	r2, pc, #4	; (adr r2, 80143d4 <fm_menu_show_acm_rate+0x38>)
 80143ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143d2:	bf00      	nop
 80143d4:	08014451 	.word	0x08014451
 80143d8:	080143e9 	.word	0x080143e9
 80143dc:	08014407 	.word	0x08014407
 80143e0:	08014425 	.word	0x08014425
 80143e4:	0801443d 	.word	0x0801443d
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80143e8:	4b29      	ldr	r3, [pc, #164]	; (8014490 <fm_menu_show_acm_rate+0xf4>)
 80143ea:	2201      	movs	r2, #1
 80143ec:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80143ee:	4b29      	ldr	r3, [pc, #164]	; (8014494 <fm_menu_show_acm_rate+0xf8>)
 80143f0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80143f2:	2301      	movs	r3, #1
 80143f4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143f6:	f107 0313 	add.w	r3, r7, #19
 80143fa:	2200      	movs	r2, #0
 80143fc:	4619      	mov	r1, r3
 80143fe:	4826      	ldr	r0, [pc, #152]	; (8014498 <fm_menu_show_acm_rate+0xfc>)
 8014400:	f7fa f84c 	bl	800e49c <_txe_queue_send>
        break;
 8014404:	e025      	b.n	8014452 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014406:	4b22      	ldr	r3, [pc, #136]	; (8014490 <fm_menu_show_acm_rate+0xf4>)
 8014408:	2201      	movs	r2, #1
 801440a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 801440c:	4b23      	ldr	r3, [pc, #140]	; (801449c <fm_menu_show_acm_rate+0x100>)
 801440e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014410:	2301      	movs	r3, #1
 8014412:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014414:	f107 0313 	add.w	r3, r7, #19
 8014418:	2200      	movs	r2, #0
 801441a:	4619      	mov	r1, r3
 801441c:	481e      	ldr	r0, [pc, #120]	; (8014498 <fm_menu_show_acm_rate+0xfc>)
 801441e:	f7fa f83d 	bl	800e49c <_txe_queue_send>
        break;
 8014422:	e016      	b.n	8014452 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 8014424:	f7fb f942 	bl	800f6ac <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 8014428:	2301      	movs	r3, #1
 801442a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801442c:	f107 0313 	add.w	r3, r7, #19
 8014430:	2200      	movs	r2, #0
 8014432:	4619      	mov	r1, r3
 8014434:	4818      	ldr	r0, [pc, #96]	; (8014498 <fm_menu_show_acm_rate+0xfc>)
 8014436:	f7fa f831 	bl	800e49c <_txe_queue_send>
        break;
 801443a:	e00a      	b.n	8014452 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 801443c:	2301      	movs	r3, #1
 801443e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014440:	f107 0313 	add.w	r3, r7, #19
 8014444:	2200      	movs	r2, #0
 8014446:	4619      	mov	r1, r3
 8014448:	4813      	ldr	r0, [pc, #76]	; (8014498 <fm_menu_show_acm_rate+0xfc>)
 801444a:	f7fa f827 	bl	800e49c <_txe_queue_send>
        break;
 801444e:	e000      	b.n	8014452 <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014450:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 8014452:	4a13      	ldr	r2, [pc, #76]	; (80144a0 <fm_menu_show_acm_rate+0x104>)
 8014454:	f107 0308 	add.w	r3, r7, #8
 8014458:	ca07      	ldmia	r2, {r0, r1, r2}
 801445a:	c303      	stmia	r3!, {r0, r1}
 801445c:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801445e:	f107 0308 	add.w	r3, r7, #8
 8014462:	210a      	movs	r1, #10
 8014464:	4618      	mov	r0, r3
 8014466:	f7fa fc4d 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801446a:	4b09      	ldr	r3, [pc, #36]	; (8014490 <fm_menu_show_acm_rate+0xf4>)
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	2b01      	cmp	r3, #1
 8014470:	d105      	bne.n	801447e <fm_menu_show_acm_rate+0xe2>
    {
        new_entry = 1;
 8014472:	4b06      	ldr	r3, [pc, #24]	; (801448c <fm_menu_show_acm_rate+0xf0>)
 8014474:	2201      	movs	r2, #1
 8014476:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014478:	4b05      	ldr	r3, [pc, #20]	; (8014490 <fm_menu_show_acm_rate+0xf4>)
 801447a:	2200      	movs	r2, #0
 801447c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801447e:	697b      	ldr	r3, [r7, #20]
}
 8014480:	4618      	mov	r0, r3
 8014482:	3718      	adds	r7, #24
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	0801439d 	.word	0x0801439d
 801448c:	2000014b 	.word	0x2000014b
 8014490:	20001ddc 	.word	0x20001ddc
 8014494:	080147e5 	.word	0x080147e5
 8014498:	20001388 	.word	0x20001388
 801449c:	080144a5 	.word	0x080144a5
 80144a0:	08015a9c 	.word	0x08015a9c

080144a4 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b086      	sub	sp, #24
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	4603      	mov	r3, r0
 80144ac:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80144ae:	4b37      	ldr	r3, [pc, #220]	; (801458c <fm_menu_show_acm_temp+0xe8>)
 80144b0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80144b2:	4b37      	ldr	r3, [pc, #220]	; (8014590 <fm_menu_show_acm_temp+0xec>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d104      	bne.n	80144c4 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 80144ba:	f7fb fac2 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80144be:	4b34      	ldr	r3, [pc, #208]	; (8014590 <fm_menu_show_acm_temp+0xec>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 80144c4:	f7fb fa65 	bl	800f992 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 80144c8:	f7fb fe51 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80144cc:	79fb      	ldrb	r3, [r7, #7]
 80144ce:	3b01      	subs	r3, #1
 80144d0:	2b04      	cmp	r3, #4
 80144d2:	d83f      	bhi.n	8014554 <fm_menu_show_acm_temp+0xb0>
 80144d4:	a201      	add	r2, pc, #4	; (adr r2, 80144dc <fm_menu_show_acm_temp+0x38>)
 80144d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144da:	bf00      	nop
 80144dc:	08014555 	.word	0x08014555
 80144e0:	080144f1 	.word	0x080144f1
 80144e4:	0801450f 	.word	0x0801450f
 80144e8:	0801452d 	.word	0x0801452d
 80144ec:	08014541 	.word	0x08014541
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80144f0:	4b28      	ldr	r3, [pc, #160]	; (8014594 <fm_menu_show_acm_temp+0xf0>)
 80144f2:	2201      	movs	r2, #1
 80144f4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80144f6:	4b28      	ldr	r3, [pc, #160]	; (8014598 <fm_menu_show_acm_temp+0xf4>)
 80144f8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80144fa:	2301      	movs	r3, #1
 80144fc:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144fe:	f107 0313 	add.w	r3, r7, #19
 8014502:	2200      	movs	r2, #0
 8014504:	4619      	mov	r1, r3
 8014506:	4825      	ldr	r0, [pc, #148]	; (801459c <fm_menu_show_acm_temp+0xf8>)
 8014508:	f7f9 ffc8 	bl	800e49c <_txe_queue_send>
        break;
 801450c:	e023      	b.n	8014556 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801450e:	4b21      	ldr	r3, [pc, #132]	; (8014594 <fm_menu_show_acm_temp+0xf0>)
 8014510:	2201      	movs	r2, #1
 8014512:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8014514:	4b22      	ldr	r3, [pc, #136]	; (80145a0 <fm_menu_show_acm_temp+0xfc>)
 8014516:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014518:	2301      	movs	r3, #1
 801451a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801451c:	f107 0313 	add.w	r3, r7, #19
 8014520:	2200      	movs	r2, #0
 8014522:	4619      	mov	r1, r3
 8014524:	481d      	ldr	r0, [pc, #116]	; (801459c <fm_menu_show_acm_temp+0xf8>)
 8014526:	f7f9 ffb9 	bl	800e49c <_txe_queue_send>
        break;
 801452a:	e014      	b.n	8014556 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801452c:	2301      	movs	r3, #1
 801452e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014530:	f107 0313 	add.w	r3, r7, #19
 8014534:	2200      	movs	r2, #0
 8014536:	4619      	mov	r1, r3
 8014538:	4818      	ldr	r0, [pc, #96]	; (801459c <fm_menu_show_acm_temp+0xf8>)
 801453a:	f7f9 ffaf 	bl	800e49c <_txe_queue_send>
        break;
 801453e:	e00a      	b.n	8014556 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014540:	2301      	movs	r3, #1
 8014542:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014544:	f107 0313 	add.w	r3, r7, #19
 8014548:	2200      	movs	r2, #0
 801454a:	4619      	mov	r1, r3
 801454c:	4813      	ldr	r0, [pc, #76]	; (801459c <fm_menu_show_acm_temp+0xf8>)
 801454e:	f7f9 ffa5 	bl	800e49c <_txe_queue_send>
        break;
 8014552:	e000      	b.n	8014556 <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014554:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 8014556:	4a13      	ldr	r2, [pc, #76]	; (80145a4 <fm_menu_show_acm_temp+0x100>)
 8014558:	f107 0308 	add.w	r3, r7, #8
 801455c:	ca07      	ldmia	r2, {r0, r1, r2}
 801455e:	c303      	stmia	r3!, {r0, r1}
 8014560:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014562:	f107 0308 	add.w	r3, r7, #8
 8014566:	210a      	movs	r1, #10
 8014568:	4618      	mov	r0, r3
 801456a:	f7fa fbcb 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801456e:	4b09      	ldr	r3, [pc, #36]	; (8014594 <fm_menu_show_acm_temp+0xf0>)
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d105      	bne.n	8014582 <fm_menu_show_acm_temp+0xde>
    {
        new_entry = 1;
 8014576:	4b06      	ldr	r3, [pc, #24]	; (8014590 <fm_menu_show_acm_temp+0xec>)
 8014578:	2201      	movs	r2, #1
 801457a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801457c:	4b05      	ldr	r3, [pc, #20]	; (8014594 <fm_menu_show_acm_temp+0xf0>)
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014582:	697b      	ldr	r3, [r7, #20]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3718      	adds	r7, #24
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	080144a5 	.word	0x080144a5
 8014590:	2000014c 	.word	0x2000014c
 8014594:	20001ddd 	.word	0x20001ddd
 8014598:	0801439d 	.word	0x0801439d
 801459c:	20001388 	.word	0x20001388
 80145a0:	080145a9 	.word	0x080145a9
 80145a4:	08015aa8 	.word	0x08015aa8

080145a8 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	4603      	mov	r3, r0
 80145b0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80145b2:	4b38      	ldr	r3, [pc, #224]	; (8014694 <fm_menu_show_date_hour+0xec>)
 80145b4:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80145b6:	4b38      	ldr	r3, [pc, #224]	; (8014698 <fm_menu_show_date_hour+0xf0>)
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d104      	bne.n	80145c8 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 80145be:	f7fb fa40 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80145c2:	4b35      	ldr	r3, [pc, #212]	; (8014698 <fm_menu_show_date_hour+0xf0>)
 80145c4:	2200      	movs	r2, #0
 80145c6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 80145c8:	79fb      	ldrb	r3, [r7, #7]
 80145ca:	2200      	movs	r2, #0
 80145cc:	4619      	mov	r1, r3
 80145ce:	2000      	movs	r0, #0
 80145d0:	f7fb fa3e 	bl	800fa50 <fm_lcd_date_hour>

    fm_lcd_refresh();
 80145d4:	f7fb fdcb 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 80145d8:	79fb      	ldrb	r3, [r7, #7]
 80145da:	3b01      	subs	r3, #1
 80145dc:	2b04      	cmp	r3, #4
 80145de:	d83a      	bhi.n	8014656 <fm_menu_show_date_hour+0xae>
 80145e0:	a201      	add	r2, pc, #4	; (adr r2, 80145e8 <fm_menu_show_date_hour+0x40>)
 80145e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145e6:	bf00      	nop
 80145e8:	08014657 	.word	0x08014657
 80145ec:	080145fd 	.word	0x080145fd
 80145f0:	0801461b 	.word	0x0801461b
 80145f4:	0801462f 	.word	0x0801462f
 80145f8:	08014643 	.word	0x08014643
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80145fc:	4b27      	ldr	r3, [pc, #156]	; (801469c <fm_menu_show_date_hour+0xf4>)
 80145fe:	2201      	movs	r2, #1
 8014600:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014602:	4b27      	ldr	r3, [pc, #156]	; (80146a0 <fm_menu_show_date_hour+0xf8>)
 8014604:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014606:	2301      	movs	r3, #1
 8014608:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801460a:	f107 0313 	add.w	r3, r7, #19
 801460e:	2200      	movs	r2, #0
 8014610:	4619      	mov	r1, r3
 8014612:	4824      	ldr	r0, [pc, #144]	; (80146a4 <fm_menu_show_date_hour+0xfc>)
 8014614:	f7f9 ff42 	bl	800e49c <_txe_queue_send>
        break;
 8014618:	e01e      	b.n	8014658 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 801461a:	2301      	movs	r3, #1
 801461c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801461e:	f107 0313 	add.w	r3, r7, #19
 8014622:	2200      	movs	r2, #0
 8014624:	4619      	mov	r1, r3
 8014626:	481f      	ldr	r0, [pc, #124]	; (80146a4 <fm_menu_show_date_hour+0xfc>)
 8014628:	f7f9 ff38 	bl	800e49c <_txe_queue_send>
        break;
 801462c:	e014      	b.n	8014658 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801462e:	2301      	movs	r3, #1
 8014630:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014632:	f107 0313 	add.w	r3, r7, #19
 8014636:	2200      	movs	r2, #0
 8014638:	4619      	mov	r1, r3
 801463a:	481a      	ldr	r0, [pc, #104]	; (80146a4 <fm_menu_show_date_hour+0xfc>)
 801463c:	f7f9 ff2e 	bl	800e49c <_txe_queue_send>
        break;
 8014640:	e00a      	b.n	8014658 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014642:	2301      	movs	r3, #1
 8014644:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014646:	f107 0313 	add.w	r3, r7, #19
 801464a:	2200      	movs	r2, #0
 801464c:	4619      	mov	r1, r3
 801464e:	4815      	ldr	r0, [pc, #84]	; (80146a4 <fm_menu_show_date_hour+0xfc>)
 8014650:	f7f9 ff24 	bl	800e49c <_txe_queue_send>
        break;
 8014654:	e000      	b.n	8014658 <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014656:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8014658:	4a13      	ldr	r2, [pc, #76]	; (80146a8 <fm_menu_show_date_hour+0x100>)
 801465a:	f107 0308 	add.w	r3, r7, #8
 801465e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014660:	c303      	stmia	r3!, {r0, r1}
 8014662:	801a      	strh	r2, [r3, #0]
 8014664:	3302      	adds	r3, #2
 8014666:	0c12      	lsrs	r2, r2, #16
 8014668:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 801466a:	f107 0308 	add.w	r3, r7, #8
 801466e:	210b      	movs	r1, #11
 8014670:	4618      	mov	r0, r3
 8014672:	f7fa fb47 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014676:	4b09      	ldr	r3, [pc, #36]	; (801469c <fm_menu_show_date_hour+0xf4>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	2b01      	cmp	r3, #1
 801467c:	d105      	bne.n	801468a <fm_menu_show_date_hour+0xe2>
    {
        new_entry = 1;
 801467e:	4b06      	ldr	r3, [pc, #24]	; (8014698 <fm_menu_show_date_hour+0xf0>)
 8014680:	2201      	movs	r2, #1
 8014682:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014684:	4b05      	ldr	r3, [pc, #20]	; (801469c <fm_menu_show_date_hour+0xf4>)
 8014686:	2200      	movs	r2, #0
 8014688:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801468a:	697b      	ldr	r3, [r7, #20]
}
 801468c:	4618      	mov	r0, r3
 801468e:	3718      	adds	r7, #24
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	080145a9 	.word	0x080145a9
 8014698:	2000014d 	.word	0x2000014d
 801469c:	20001dde 	.word	0x20001dde
 80146a0:	080144a5 	.word	0x080144a5
 80146a4:	20001388 	.word	0x20001388
 80146a8:	08015ab4 	.word	0x08015ab4

080146ac <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b086      	sub	sp, #24
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	4603      	mov	r3, r0
 80146b4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 80146b6:	231e      	movs	r3, #30
 80146b8:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 80146ba:	4b42      	ldr	r3, [pc, #264]	; (80147c4 <fm_menu_show_init+0x118>)
 80146bc:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80146be:	4b42      	ldr	r3, [pc, #264]	; (80147c8 <fm_menu_show_init+0x11c>)
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d10c      	bne.n	80146e0 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 80146c6:	2200      	movs	r2, #0
 80146c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80146cc:	483f      	ldr	r0, [pc, #252]	; (80147cc <fm_menu_show_init+0x120>)
 80146ce:	f7ef fe3f 	bl	8004350 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 80146d2:	f7fb fbb9 	bl	800fe48 <fm_lcd_init>
        fm_lcd_clear();
 80146d6:	f7fb f9b4 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80146da:	4b3b      	ldr	r3, [pc, #236]	; (80147c8 <fm_menu_show_init+0x11c>)
 80146dc:	2200      	movs	r2, #0
 80146de:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 80146e0:	20ff      	movs	r0, #255	; 0xff
 80146e2:	f7fe f823 	bl	801272c <pcf8553_write_all>

    switch (event_id)
 80146e6:	79fb      	ldrb	r3, [r7, #7]
 80146e8:	3b01      	subs	r3, #1
 80146ea:	2b04      	cmp	r3, #4
 80146ec:	d848      	bhi.n	8014780 <fm_menu_show_init+0xd4>
 80146ee:	a201      	add	r2, pc, #4	; (adr r2, 80146f4 <fm_menu_show_init+0x48>)
 80146f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146f4:	0801472d 	.word	0x0801472d
 80146f8:	08014781 	.word	0x08014781
 80146fc:	08014781 	.word	0x08014781
 8014700:	08014709 	.word	0x08014709
 8014704:	08014781 	.word	0x08014781
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014708:	4831      	ldr	r0, [pc, #196]	; (80147d0 <fm_menu_show_init+0x124>)
 801470a:	f7f9 fe5f 	bl	800e3cc <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801470e:	4b31      	ldr	r3, [pc, #196]	; (80147d4 <fm_menu_show_init+0x128>)
 8014710:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014712:	2301      	movs	r3, #1
 8014714:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014716:	f107 0312 	add.w	r3, r7, #18
 801471a:	2200      	movs	r2, #0
 801471c:	4619      	mov	r1, r3
 801471e:	482c      	ldr	r0, [pc, #176]	; (80147d0 <fm_menu_show_init+0x124>)
 8014720:	f7f9 febc 	bl	800e49c <_txe_queue_send>
            new_exit = 1;
 8014724:	4b2c      	ldr	r3, [pc, #176]	; (80147d8 <fm_menu_show_init+0x12c>)
 8014726:	2201      	movs	r2, #1
 8014728:	701a      	strb	r2, [r3, #0]
        break;
 801472a:	e02a      	b.n	8014782 <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 801472c:	4b2b      	ldr	r3, [pc, #172]	; (80147dc <fm_menu_show_init+0x130>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	7cfa      	ldrb	r2, [r7, #19]
 8014732:	429a      	cmp	r2, r3
 8014734:	d912      	bls.n	801475c <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014736:	2064      	movs	r0, #100	; 0x64
 8014738:	f7ed f932 	bl	80019a0 <HAL_Delay>
                counter++;
 801473c:	4b27      	ldr	r3, [pc, #156]	; (80147dc <fm_menu_show_init+0x130>)
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	3301      	adds	r3, #1
 8014742:	b2da      	uxtb	r2, r3
 8014744:	4b25      	ldr	r3, [pc, #148]	; (80147dc <fm_menu_show_init+0x130>)
 8014746:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014748:	2301      	movs	r3, #1
 801474a:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801474c:	f107 0312 	add.w	r3, r7, #18
 8014750:	2200      	movs	r2, #0
 8014752:	4619      	mov	r1, r3
 8014754:	481e      	ldr	r0, [pc, #120]	; (80147d0 <fm_menu_show_init+0x124>)
 8014756:	f7f9 fea1 	bl	800e49c <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801475a:	e012      	b.n	8014782 <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 801475c:	481c      	ldr	r0, [pc, #112]	; (80147d0 <fm_menu_show_init+0x124>)
 801475e:	f7f9 fe35 	bl	800e3cc <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014762:	4b1c      	ldr	r3, [pc, #112]	; (80147d4 <fm_menu_show_init+0x128>)
 8014764:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8014766:	2301      	movs	r3, #1
 8014768:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801476a:	f107 0312 	add.w	r3, r7, #18
 801476e:	2200      	movs	r2, #0
 8014770:	4619      	mov	r1, r3
 8014772:	4817      	ldr	r0, [pc, #92]	; (80147d0 <fm_menu_show_init+0x124>)
 8014774:	f7f9 fe92 	bl	800e49c <_txe_queue_send>
                new_exit = 1;
 8014778:	4b17      	ldr	r3, [pc, #92]	; (80147d8 <fm_menu_show_init+0x12c>)
 801477a:	2201      	movs	r2, #1
 801477c:	701a      	strb	r2, [r3, #0]
        break;
 801477e:	e000      	b.n	8014782 <fm_menu_show_init+0xd6>
        default:
        break;
 8014780:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 8014782:	4a17      	ldr	r2, [pc, #92]	; (80147e0 <fm_menu_show_init+0x134>)
 8014784:	f107 030c 	add.w	r3, r7, #12
 8014788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801478c:	6018      	str	r0, [r3, #0]
 801478e:	3304      	adds	r3, #4
 8014790:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014792:	f107 030c 	add.w	r3, r7, #12
 8014796:	2106      	movs	r1, #6
 8014798:	4618      	mov	r0, r3
 801479a:	f7fa fab3 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801479e:	4b0e      	ldr	r3, [pc, #56]	; (80147d8 <fm_menu_show_init+0x12c>)
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d108      	bne.n	80147b8 <fm_menu_show_init+0x10c>
    {
        counter = 0;
 80147a6:	4b0d      	ldr	r3, [pc, #52]	; (80147dc <fm_menu_show_init+0x130>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80147ac:	4b06      	ldr	r3, [pc, #24]	; (80147c8 <fm_menu_show_init+0x11c>)
 80147ae:	2201      	movs	r2, #1
 80147b0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80147b2:	4b09      	ldr	r3, [pc, #36]	; (80147d8 <fm_menu_show_init+0x12c>)
 80147b4:	2200      	movs	r2, #0
 80147b6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80147b8:	697b      	ldr	r3, [r7, #20]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3718      	adds	r7, #24
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	080146ad 	.word	0x080146ad
 80147c8:	2000014e 	.word	0x2000014e
 80147cc:	42020800 	.word	0x42020800
 80147d0:	20001388 	.word	0x20001388
 80147d4:	080148e9 	.word	0x080148e9
 80147d8:	20001ddf 	.word	0x20001ddf
 80147dc:	20001de0 	.word	0x20001de0
 80147e0:	08015ac0 	.word	0x08015ac0

080147e4 <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	4603      	mov	r3, r0
 80147ec:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80147ee:	4b37      	ldr	r3, [pc, #220]	; (80148cc <fm_menu_show_ttl_rate+0xe8>)
 80147f0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80147f2:	4b37      	ldr	r3, [pc, #220]	; (80148d0 <fm_menu_show_ttl_rate+0xec>)
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d104      	bne.n	8014804 <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 80147fa:	f7fb f922 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 80147fe:	4b34      	ldr	r3, [pc, #208]	; (80148d0 <fm_menu_show_ttl_rate+0xec>)
 8014800:	2200      	movs	r2, #0
 8014802:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 8014804:	f7fb fcb9 	bl	801017a <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 8014808:	f7fb fcb1 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 801480c:	79fb      	ldrb	r3, [r7, #7]
 801480e:	3b01      	subs	r3, #1
 8014810:	2b04      	cmp	r3, #4
 8014812:	d83f      	bhi.n	8014894 <fm_menu_show_ttl_rate+0xb0>
 8014814:	a201      	add	r2, pc, #4	; (adr r2, 801481c <fm_menu_show_ttl_rate+0x38>)
 8014816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801481a:	bf00      	nop
 801481c:	08014895 	.word	0x08014895
 8014820:	08014831 	.word	0x08014831
 8014824:	08014845 	.word	0x08014845
 8014828:	08014863 	.word	0x08014863
 801482c:	08014877 	.word	0x08014877
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 8014830:	2301      	movs	r3, #1
 8014832:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014834:	f107 0313 	add.w	r3, r7, #19
 8014838:	2200      	movs	r2, #0
 801483a:	4619      	mov	r1, r3
 801483c:	4825      	ldr	r0, [pc, #148]	; (80148d4 <fm_menu_show_ttl_rate+0xf0>)
 801483e:	f7f9 fe2d 	bl	800e49c <_txe_queue_send>
        break;
 8014842:	e028      	b.n	8014896 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014844:	4b24      	ldr	r3, [pc, #144]	; (80148d8 <fm_menu_show_ttl_rate+0xf4>)
 8014846:	2201      	movs	r2, #1
 8014848:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801484a:	4b24      	ldr	r3, [pc, #144]	; (80148dc <fm_menu_show_ttl_rate+0xf8>)
 801484c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801484e:	2301      	movs	r3, #1
 8014850:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014852:	f107 0313 	add.w	r3, r7, #19
 8014856:	2200      	movs	r2, #0
 8014858:	4619      	mov	r1, r3
 801485a:	481e      	ldr	r0, [pc, #120]	; (80148d4 <fm_menu_show_ttl_rate+0xf0>)
 801485c:	f7f9 fe1e 	bl	800e49c <_txe_queue_send>
        break;
 8014860:	e019      	b.n	8014896 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014862:	2301      	movs	r3, #1
 8014864:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014866:	f107 0313 	add.w	r3, r7, #19
 801486a:	2200      	movs	r2, #0
 801486c:	4619      	mov	r1, r3
 801486e:	4819      	ldr	r0, [pc, #100]	; (80148d4 <fm_menu_show_ttl_rate+0xf0>)
 8014870:	f7f9 fe14 	bl	800e49c <_txe_queue_send>
        break;
 8014874:	e00f      	b.n	8014896 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014876:	4b18      	ldr	r3, [pc, #96]	; (80148d8 <fm_menu_show_ttl_rate+0xf4>)
 8014878:	2201      	movs	r2, #1
 801487a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 801487c:	4b18      	ldr	r3, [pc, #96]	; (80148e0 <fm_menu_show_ttl_rate+0xfc>)
 801487e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014880:	2301      	movs	r3, #1
 8014882:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014884:	f107 0313 	add.w	r3, r7, #19
 8014888:	2200      	movs	r2, #0
 801488a:	4619      	mov	r1, r3
 801488c:	4811      	ldr	r0, [pc, #68]	; (80148d4 <fm_menu_show_ttl_rate+0xf0>)
 801488e:	f7f9 fe05 	bl	800e49c <_txe_queue_send>
        break;
 8014892:	e000      	b.n	8014896 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014894:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 8014896:	4a13      	ldr	r2, [pc, #76]	; (80148e4 <fm_menu_show_ttl_rate+0x100>)
 8014898:	f107 0308 	add.w	r3, r7, #8
 801489c:	ca07      	ldmia	r2, {r0, r1, r2}
 801489e:	c303      	stmia	r3!, {r0, r1}
 80148a0:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80148a2:	f107 0308 	add.w	r3, r7, #8
 80148a6:	210a      	movs	r1, #10
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7fa fa2b 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80148ae:	4b0a      	ldr	r3, [pc, #40]	; (80148d8 <fm_menu_show_ttl_rate+0xf4>)
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d105      	bne.n	80148c2 <fm_menu_show_ttl_rate+0xde>
    {
        new_entry = 1;
 80148b6:	4b06      	ldr	r3, [pc, #24]	; (80148d0 <fm_menu_show_ttl_rate+0xec>)
 80148b8:	2201      	movs	r2, #1
 80148ba:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80148bc:	4b06      	ldr	r3, [pc, #24]	; (80148d8 <fm_menu_show_ttl_rate+0xf4>)
 80148be:	2200      	movs	r2, #0
 80148c0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80148c2:	697b      	ldr	r3, [r7, #20]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	080147e5 	.word	0x080147e5
 80148d0:	2000014f 	.word	0x2000014f
 80148d4:	20001388 	.word	0x20001388
 80148d8:	20001de1 	.word	0x20001de1
 80148dc:	0801439d 	.word	0x0801439d
 80148e0:	080139c5 	.word	0x080139c5
 80148e4:	08015ac8 	.word	0x08015ac8

080148e8 <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	4603      	mov	r3, r0
 80148f0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 80148f2:	231e      	movs	r3, #30
 80148f4:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80148f6:	4b42      	ldr	r3, [pc, #264]	; (8014a00 <fm_menu_show_version+0x118>)
 80148f8:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80148fa:	4b42      	ldr	r3, [pc, #264]	; (8014a04 <fm_menu_show_version+0x11c>)
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d104      	bne.n	801490c <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 8014902:	f7fb f89e 	bl	800fa42 <fm_lcd_clear>
        new_entry = 0;
 8014906:	4b3f      	ldr	r3, [pc, #252]	; (8014a04 <fm_menu_show_version+0x11c>)
 8014908:	2200      	movs	r2, #0
 801490a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 801490c:	2105      	movs	r1, #5
 801490e:	2004      	movs	r0, #4
 8014910:	f7fb fdda 	bl	80104c8 <fm_lcd_version>
    fm_lcd_refresh();
 8014914:	f7fb fc2b 	bl	801016e <fm_lcd_refresh>

    switch (event_id)
 8014918:	79fb      	ldrb	r3, [r7, #7]
 801491a:	3b01      	subs	r3, #1
 801491c:	2b04      	cmp	r3, #4
 801491e:	d849      	bhi.n	80149b4 <fm_menu_show_version+0xcc>
 8014920:	a201      	add	r2, pc, #4	; (adr r2, 8014928 <fm_menu_show_version+0x40>)
 8014922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014926:	bf00      	nop
 8014928:	08014961 	.word	0x08014961
 801492c:	080149b5 	.word	0x080149b5
 8014930:	080149b5 	.word	0x080149b5
 8014934:	0801493d 	.word	0x0801493d
 8014938:	080149b5 	.word	0x080149b5
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 801493c:	4832      	ldr	r0, [pc, #200]	; (8014a08 <fm_menu_show_version+0x120>)
 801493e:	f7f9 fd45 	bl	800e3cc <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014942:	4b32      	ldr	r3, [pc, #200]	; (8014a0c <fm_menu_show_version+0x124>)
 8014944:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014946:	2301      	movs	r3, #1
 8014948:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801494a:	f107 0312 	add.w	r3, r7, #18
 801494e:	2200      	movs	r2, #0
 8014950:	4619      	mov	r1, r3
 8014952:	482d      	ldr	r0, [pc, #180]	; (8014a08 <fm_menu_show_version+0x120>)
 8014954:	f7f9 fda2 	bl	800e49c <_txe_queue_send>
            new_exit = 1;
 8014958:	4b2d      	ldr	r3, [pc, #180]	; (8014a10 <fm_menu_show_version+0x128>)
 801495a:	2201      	movs	r2, #1
 801495c:	701a      	strb	r2, [r3, #0]
        break;
 801495e:	e02a      	b.n	80149b6 <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 8014960:	4b2c      	ldr	r3, [pc, #176]	; (8014a14 <fm_menu_show_version+0x12c>)
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	7cfa      	ldrb	r2, [r7, #19]
 8014966:	429a      	cmp	r2, r3
 8014968:	d912      	bls.n	8014990 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 801496a:	2064      	movs	r0, #100	; 0x64
 801496c:	f7ed f818 	bl	80019a0 <HAL_Delay>
                counter++;
 8014970:	4b28      	ldr	r3, [pc, #160]	; (8014a14 <fm_menu_show_version+0x12c>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	3301      	adds	r3, #1
 8014976:	b2da      	uxtb	r2, r3
 8014978:	4b26      	ldr	r3, [pc, #152]	; (8014a14 <fm_menu_show_version+0x12c>)
 801497a:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 801497c:	2301      	movs	r3, #1
 801497e:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014980:	f107 0312 	add.w	r3, r7, #18
 8014984:	2200      	movs	r2, #0
 8014986:	4619      	mov	r1, r3
 8014988:	481f      	ldr	r0, [pc, #124]	; (8014a08 <fm_menu_show_version+0x120>)
 801498a:	f7f9 fd87 	bl	800e49c <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801498e:	e012      	b.n	80149b6 <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014990:	481d      	ldr	r0, [pc, #116]	; (8014a08 <fm_menu_show_version+0x120>)
 8014992:	f7f9 fd1b 	bl	800e3cc <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014996:	4b1d      	ldr	r3, [pc, #116]	; (8014a0c <fm_menu_show_version+0x124>)
 8014998:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801499a:	2301      	movs	r3, #1
 801499c:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801499e:	f107 0312 	add.w	r3, r7, #18
 80149a2:	2200      	movs	r2, #0
 80149a4:	4619      	mov	r1, r3
 80149a6:	4818      	ldr	r0, [pc, #96]	; (8014a08 <fm_menu_show_version+0x120>)
 80149a8:	f7f9 fd78 	bl	800e49c <_txe_queue_send>
                new_exit = 1;
 80149ac:	4b18      	ldr	r3, [pc, #96]	; (8014a10 <fm_menu_show_version+0x128>)
 80149ae:	2201      	movs	r2, #1
 80149b0:	701a      	strb	r2, [r3, #0]
        break;
 80149b2:	e000      	b.n	80149b6 <fm_menu_show_version+0xce>
        default:
        break;
 80149b4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 80149b6:	4a18      	ldr	r2, [pc, #96]	; (8014a18 <fm_menu_show_version+0x130>)
 80149b8:	f107 0308 	add.w	r3, r7, #8
 80149bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80149be:	c303      	stmia	r3!, {r0, r1}
 80149c0:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80149c2:	f107 0308 	add.w	r3, r7, #8
 80149c6:	2109      	movs	r1, #9
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fa f99b 	bl	800ed04 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80149ce:	4b10      	ldr	r3, [pc, #64]	; (8014a10 <fm_menu_show_version+0x128>)
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d10e      	bne.n	80149f4 <fm_menu_show_version+0x10c>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 80149d6:	2201      	movs	r2, #1
 80149d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80149dc:	480f      	ldr	r0, [pc, #60]	; (8014a1c <fm_menu_show_version+0x134>)
 80149de:	f7ef fcb7 	bl	8004350 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 80149e2:	4b0c      	ldr	r3, [pc, #48]	; (8014a14 <fm_menu_show_version+0x12c>)
 80149e4:	2200      	movs	r2, #0
 80149e6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80149e8:	4b06      	ldr	r3, [pc, #24]	; (8014a04 <fm_menu_show_version+0x11c>)
 80149ea:	2201      	movs	r2, #1
 80149ec:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80149ee:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <fm_menu_show_version+0x128>)
 80149f0:	2200      	movs	r2, #0
 80149f2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80149f4:	697b      	ldr	r3, [r7, #20]
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3718      	adds	r7, #24
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	080148e9 	.word	0x080148e9
 8014a04:	20000150 	.word	0x20000150
 8014a08:	20001388 	.word	0x20001388
 8014a0c:	080147e5 	.word	0x080147e5
 8014a10:	20001de2 	.word	0x20001de2
 8014a14:	20001de3 	.word	0x20001de3
 8014a18:	08015ad4 	.word	0x08015ad4
 8014a1c:	42020800 	.word	0x42020800

08014a20 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014a26:	2364      	movs	r3, #100	; 0x64
 8014a28:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET ,ADC_SINGLE_ENDED);
 8014a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a2e:	2100      	movs	r1, #0
 8014a30:	4808      	ldr	r0, [pc, #32]	; (8014a54 <fm_temp_stm32_get+0x34>)
 8014a32:	f7ef f853 	bl	8003adc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014a36:	4807      	ldr	r0, [pc, #28]	; (8014a54 <fm_temp_stm32_get+0x34>)
 8014a38:	f7ed fe12 	bl	8002660 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014a3c:	79fb      	ldrb	r3, [r7, #7]
 8014a3e:	4619      	mov	r1, r3
 8014a40:	4804      	ldr	r0, [pc, #16]	; (8014a54 <fm_temp_stm32_get+0x34>)
 8014a42:	f7ed feb5 	bl	80027b0 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014a46:	4803      	ldr	r0, [pc, #12]	; (8014a54 <fm_temp_stm32_get+0x34>)
 8014a48:	f7ed fe7e 	bl	8002748 <HAL_ADC_Stop>
}
 8014a4c:	bf00      	nop
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	200013c8 	.word	0x200013c8

08014a58 <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014a5e:	f7ff ffdf 	bl	8014a20 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014a62:	4813      	ldr	r0, [pc, #76]	; (8014ab0 <fm_temp_stm32_format+0x58>)
 8014a64:	f7ed ff8a 	bl	800297c <HAL_ADC_GetValue>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014a6c:	88fb      	ldrh	r3, [r7, #6]
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014a74:	fb02 f303 	mul.w	r3, r2, r3
 8014a78:	461a      	mov	r2, r3
 8014a7a:	4b0e      	ldr	r3, [pc, #56]	; (8014ab4 <fm_temp_stm32_format+0x5c>)
 8014a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8014a80:	099b      	lsrs	r3, r3, #6
 8014a82:	461a      	mov	r2, r3
 8014a84:	4b0c      	ldr	r3, [pc, #48]	; (8014ab8 <fm_temp_stm32_format+0x60>)
 8014a86:	881b      	ldrh	r3, [r3, #0]
 8014a88:	1ad3      	subs	r3, r2, r3
 8014a8a:	2264      	movs	r2, #100	; 0x64
 8014a8c:	fb03 f202 	mul.w	r2, r3, r2
 8014a90:	4b0a      	ldr	r3, [pc, #40]	; (8014abc <fm_temp_stm32_format+0x64>)
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	4619      	mov	r1, r3
 8014a96:	4b08      	ldr	r3, [pc, #32]	; (8014ab8 <fm_temp_stm32_format+0x60>)
 8014a98:	881b      	ldrh	r3, [r3, #0]
 8014a9a:	1acb      	subs	r3, r1, r3
 8014a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014aa0:	331e      	adds	r3, #30
 8014aa2:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014aa4:	683b      	ldr	r3, [r7, #0]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	200013c8 	.word	0x200013c8
 8014ab4:	057619f1 	.word	0x057619f1
 8014ab8:	0bfa0710 	.word	0x0bfa0710
 8014abc:	0bfa0742 	.word	0x0bfa0742

08014ac0 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b088      	sub	sp, #32
 8014ac4:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014aca:	4638      	mov	r0, r7
 8014acc:	2305      	movs	r3, #5
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	2302      	movs	r3, #2
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	4906      	ldr	r1, [pc, #24]	; (8014af0 <fm_version_get+0x30>)
 8014ad6:	f000 f9bb 	bl	8014e50 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014ada:	463b      	mov	r3, r7
 8014adc:	4618      	mov	r0, r3
 8014ade:	f000 f94d 	bl	8014d7c <atoi>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	617b      	str	r3, [r7, #20]

    return (version);
 8014ae6:	697b      	ldr	r3, [r7, #20]
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3718      	adds	r7, #24
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	08015ae0 	.word	0x08015ae0

08014af4 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014af6:	b093      	sub	sp, #76	; 0x4c
 8014af8:	af06      	add	r7, sp, #24
 8014afa:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014afc:	4c1c      	ldr	r4, [pc, #112]	; (8014b70 <fmc_get_acm+0x7c>)
 8014afe:	f107 0308 	add.w	r3, r7, #8
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa f91a 	bl	800ed3c <fm_factory_get_acm>
 8014b08:	4625      	mov	r5, r4
 8014b0a:	f107 0408 	add.w	r4, r7, #8
 8014b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014b1a:	4b15      	ldr	r3, [pc, #84]	; (8014b70 <fmc_get_acm+0x7c>)
 8014b1c:	607b      	str	r3, [r7, #4]
 8014b1e:	f107 0c08 	add.w	ip, r7, #8
 8014b22:	4e13      	ldr	r6, [pc, #76]	; (8014b70 <fmc_get_acm+0x7c>)
 8014b24:	466d      	mov	r5, sp
 8014b26:	f106 0408 	add.w	r4, r6, #8
 8014b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8014b36:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b3a:	4660      	mov	r0, ip
 8014b3c:	f000 f8c0 	bl	8014cc0 <fmc_totalizer_init>
 8014b40:	687d      	ldr	r5, [r7, #4]
 8014b42:	f107 0408 	add.w	r4, r7, #8
 8014b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b54:	4a06      	ldr	r2, [pc, #24]	; (8014b70 <fmc_get_acm+0x7c>)
 8014b56:	461c      	mov	r4, r3
 8014b58:	4615      	mov	r5, r2
 8014b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b68:	3734      	adds	r7, #52	; 0x34
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	20001de8 	.word	0x20001de8

08014b74 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b088      	sub	sp, #32
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014b7c:	f7ff ff6c 	bl	8014a58 <fm_temp_stm32_format>
 8014b80:	4603      	mov	r3, r0
 8014b82:	461a      	mov	r2, r3
 8014b84:	4b0d      	ldr	r3, [pc, #52]	; (8014bbc <fmc_get_stm32_temp+0x48>)
 8014b86:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014b88:	f107 0308 	add.w	r3, r7, #8
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7fa f917 	bl	800edc0 <fm_factory_get_temp>
 8014b92:	7b3a      	ldrb	r2, [r7, #12]
 8014b94:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <fmc_get_stm32_temp+0x48>)
 8014b96:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014b98:	f107 0314 	add.w	r3, r7, #20
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fa f90f 	bl	800edc0 <fm_factory_get_temp>
 8014ba2:	7f3a      	ldrb	r2, [r7, #28]
 8014ba4:	4b05      	ldr	r3, [pc, #20]	; (8014bbc <fmc_get_stm32_temp+0x48>)
 8014ba6:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	4a04      	ldr	r2, [pc, #16]	; (8014bbc <fmc_get_stm32_temp+0x48>)
 8014bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	3720      	adds	r7, #32
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	20001e48 	.word	0x20001e48

08014bc0 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bc2:	b093      	sub	sp, #76	; 0x4c
 8014bc4:	af06      	add	r7, sp, #24
 8014bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014bc8:	4c1c      	ldr	r4, [pc, #112]	; (8014c3c <fmc_get_rate+0x7c>)
 8014bca:	f107 0308 	add.w	r3, r7, #8
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fa f8e0 	bl	800ed94 <fm_factory_get_rate>
 8014bd4:	4625      	mov	r5, r4
 8014bd6:	f107 0408 	add.w	r4, r7, #8
 8014bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014be2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014be6:	4b15      	ldr	r3, [pc, #84]	; (8014c3c <fmc_get_rate+0x7c>)
 8014be8:	607b      	str	r3, [r7, #4]
 8014bea:	f107 0c08 	add.w	ip, r7, #8
 8014bee:	4e13      	ldr	r6, [pc, #76]	; (8014c3c <fmc_get_rate+0x7c>)
 8014bf0:	466d      	mov	r5, sp
 8014bf2:	f106 0408 	add.w	r4, r6, #8
 8014bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c02:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c06:	4660      	mov	r0, ip
 8014c08:	f000 f85a 	bl	8014cc0 <fmc_totalizer_init>
 8014c0c:	687d      	ldr	r5, [r7, #4]
 8014c0e:	f107 0408 	add.w	r4, r7, #8
 8014c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c1a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c20:	4a06      	ldr	r2, [pc, #24]	; (8014c3c <fmc_get_rate+0x7c>)
 8014c22:	461c      	mov	r4, r3
 8014c24:	4615      	mov	r5, r2
 8014c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c34:	3734      	adds	r7, #52	; 0x34
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20001e08 	.word	0x20001e08

08014c40 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c42:	b093      	sub	sp, #76	; 0x4c
 8014c44:	af06      	add	r7, sp, #24
 8014c46:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014c48:	4c1c      	ldr	r4, [pc, #112]	; (8014cbc <fmc_get_ttl+0x7c>)
 8014c4a:	f107 0308 	add.w	r3, r7, #8
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fa f88a 	bl	800ed68 <fm_factory_get_ttl>
 8014c54:	4625      	mov	r5, r4
 8014c56:	f107 0408 	add.w	r4, r7, #8
 8014c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014c66:	4b15      	ldr	r3, [pc, #84]	; (8014cbc <fmc_get_ttl+0x7c>)
 8014c68:	607b      	str	r3, [r7, #4]
 8014c6a:	f107 0c08 	add.w	ip, r7, #8
 8014c6e:	4e13      	ldr	r6, [pc, #76]	; (8014cbc <fmc_get_ttl+0x7c>)
 8014c70:	466d      	mov	r5, sp
 8014c72:	f106 0408 	add.w	r4, r6, #8
 8014c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c82:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c86:	4660      	mov	r0, ip
 8014c88:	f000 f81a 	bl	8014cc0 <fmc_totalizer_init>
 8014c8c:	687d      	ldr	r5, [r7, #4]
 8014c8e:	f107 0408 	add.w	r4, r7, #8
 8014c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca0:	4a06      	ldr	r2, [pc, #24]	; (8014cbc <fmc_get_ttl+0x7c>)
 8014ca2:	461c      	mov	r4, r3
 8014ca4:	4615      	mov	r5, r2
 8014ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014caa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cb4:	3734      	adds	r7, #52	; 0x34
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	20001e28 	.word	0x20001e28

08014cc0 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014cc0:	b082      	sub	sp, #8
 8014cc2:	b5b0      	push	{r4, r5, r7, lr}
 8014cc4:	b082      	sub	sp, #8
 8014cc6:	af00      	add	r7, sp, #0
 8014cc8:	6078      	str	r0, [r7, #4]
 8014cca:	f107 0118 	add.w	r1, r7, #24
 8014cce:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014cd2:	f107 0018 	add.w	r0, r7, #24
 8014cd6:	f000 f811 	bl	8014cfc <fmc_totalizer_refresh>

    return (totalizer);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	461d      	mov	r5, r3
 8014cde:	f107 0418 	add.w	r4, r7, #24
 8014ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ce6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014cea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	3708      	adds	r7, #8
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014cf8:	b002      	add	sp, #8
 8014cfa:	4770      	bx	lr

08014cfc <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014d00:	b084      	sub	sp, #16
 8014d02:	af00      	add	r7, sp, #0
 8014d04:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014d06:	6879      	ldr	r1, [r7, #4]
 8014d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d0c:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014d10:	6879      	ldr	r1, [r7, #4]
 8014d12:	7d09      	ldrb	r1, [r1, #20]
 8014d14:	4608      	mov	r0, r1
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	7b09      	ldrb	r1, [r1, #12]
 8014d1a:	4401      	add	r1, r0
 8014d1c:	4816      	ldr	r0, [pc, #88]	; (8014d78 <fmc_totalizer_refresh+0x7c>)
 8014d1e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014d22:	2000      	movs	r0, #0
 8014d24:	460c      	mov	r4, r1
 8014d26:	4605      	mov	r5, r0
 8014d28:	68f9      	ldr	r1, [r7, #12]
 8014d2a:	fb04 f001 	mul.w	r0, r4, r1
 8014d2e:	68b9      	ldr	r1, [r7, #8]
 8014d30:	fb05 f101 	mul.w	r1, r5, r1
 8014d34:	4401      	add	r1, r0
 8014d36:	68b8      	ldr	r0, [r7, #8]
 8014d38:	fba0 2304 	umull	r2, r3, r0, r4
 8014d3c:	4419      	add	r1, r3
 8014d3e:	460b      	mov	r3, r1
 8014d40:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014d44:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	691b      	ldr	r3, [r3, #16]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4698      	mov	r8, r3
 8014d50:	4691      	mov	r9, r2
 8014d52:	4642      	mov	r2, r8
 8014d54:	464b      	mov	r3, r9
 8014d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d5a:	f7eb fbbb 	bl	80004d4 <__aeabi_uldivmod>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	460b      	mov	r3, r1
 8014d62:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	609a      	str	r2, [r3, #8]

}
 8014d6c:	bf00      	nop
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014d76:	bf00      	nop
 8014d78:	08015be8 	.word	0x08015be8

08014d7c <atoi>:
 8014d7c:	220a      	movs	r2, #10
 8014d7e:	2100      	movs	r1, #0
 8014d80:	f000 b908 	b.w	8014f94 <strtol>

08014d84 <__errno>:
 8014d84:	4b01      	ldr	r3, [pc, #4]	; (8014d8c <__errno+0x8>)
 8014d86:	6818      	ldr	r0, [r3, #0]
 8014d88:	4770      	bx	lr
 8014d8a:	bf00      	nop
 8014d8c:	20000154 	.word	0x20000154

08014d90 <__libc_init_array>:
 8014d90:	b570      	push	{r4, r5, r6, lr}
 8014d92:	4d0d      	ldr	r5, [pc, #52]	; (8014dc8 <__libc_init_array+0x38>)
 8014d94:	2600      	movs	r6, #0
 8014d96:	4c0d      	ldr	r4, [pc, #52]	; (8014dcc <__libc_init_array+0x3c>)
 8014d98:	1b64      	subs	r4, r4, r5
 8014d9a:	10a4      	asrs	r4, r4, #2
 8014d9c:	42a6      	cmp	r6, r4
 8014d9e:	d109      	bne.n	8014db4 <__libc_init_array+0x24>
 8014da0:	4d0b      	ldr	r5, [pc, #44]	; (8014dd0 <__libc_init_array+0x40>)
 8014da2:	2600      	movs	r6, #0
 8014da4:	4c0b      	ldr	r4, [pc, #44]	; (8014dd4 <__libc_init_array+0x44>)
 8014da6:	f000 fd5d 	bl	8015864 <_init>
 8014daa:	1b64      	subs	r4, r4, r5
 8014dac:	10a4      	asrs	r4, r4, #2
 8014dae:	42a6      	cmp	r6, r4
 8014db0:	d105      	bne.n	8014dbe <__libc_init_array+0x2e>
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
 8014db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8014db8:	3601      	adds	r6, #1
 8014dba:	4798      	blx	r3
 8014dbc:	e7ee      	b.n	8014d9c <__libc_init_array+0xc>
 8014dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dc2:	3601      	adds	r6, #1
 8014dc4:	4798      	blx	r3
 8014dc6:	e7f2      	b.n	8014dae <__libc_init_array+0x1e>
 8014dc8:	08015d40 	.word	0x08015d40
 8014dcc:	08015d40 	.word	0x08015d40
 8014dd0:	08015d40 	.word	0x08015d40
 8014dd4:	08015d44 	.word	0x08015d44

08014dd8 <memset>:
 8014dd8:	4402      	add	r2, r0
 8014dda:	4603      	mov	r3, r0
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d100      	bne.n	8014de2 <memset+0xa>
 8014de0:	4770      	bx	lr
 8014de2:	f803 1b01 	strb.w	r1, [r3], #1
 8014de6:	e7f9      	b.n	8014ddc <memset+0x4>

08014de8 <sniprintf>:
 8014de8:	b40c      	push	{r2, r3}
 8014dea:	4b18      	ldr	r3, [pc, #96]	; (8014e4c <sniprintf+0x64>)
 8014dec:	b530      	push	{r4, r5, lr}
 8014dee:	1e0c      	subs	r4, r1, #0
 8014df0:	b09d      	sub	sp, #116	; 0x74
 8014df2:	681d      	ldr	r5, [r3, #0]
 8014df4:	da08      	bge.n	8014e08 <sniprintf+0x20>
 8014df6:	238b      	movs	r3, #139	; 0x8b
 8014df8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dfc:	602b      	str	r3, [r5, #0]
 8014dfe:	b01d      	add	sp, #116	; 0x74
 8014e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e04:	b002      	add	sp, #8
 8014e06:	4770      	bx	lr
 8014e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014e0c:	9002      	str	r0, [sp, #8]
 8014e0e:	9006      	str	r0, [sp, #24]
 8014e10:	a902      	add	r1, sp, #8
 8014e12:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e16:	bf14      	ite	ne
 8014e18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014e1c:	4623      	moveq	r3, r4
 8014e1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014e20:	4628      	mov	r0, r5
 8014e22:	9304      	str	r3, [sp, #16]
 8014e24:	9307      	str	r3, [sp, #28]
 8014e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e2e:	ab21      	add	r3, sp, #132	; 0x84
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	f000 f915 	bl	8015060 <_svfiprintf_r>
 8014e36:	1c43      	adds	r3, r0, #1
 8014e38:	bfbc      	itt	lt
 8014e3a:	238b      	movlt	r3, #139	; 0x8b
 8014e3c:	602b      	strlt	r3, [r5, #0]
 8014e3e:	2c00      	cmp	r4, #0
 8014e40:	d0dd      	beq.n	8014dfe <sniprintf+0x16>
 8014e42:	9b02      	ldr	r3, [sp, #8]
 8014e44:	2200      	movs	r2, #0
 8014e46:	701a      	strb	r2, [r3, #0]
 8014e48:	e7d9      	b.n	8014dfe <sniprintf+0x16>
 8014e4a:	bf00      	nop
 8014e4c:	20000154 	.word	0x20000154

08014e50 <siprintf>:
 8014e50:	b40e      	push	{r1, r2, r3}
 8014e52:	b500      	push	{lr}
 8014e54:	b09c      	sub	sp, #112	; 0x70
 8014e56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8014e5c:	9002      	str	r0, [sp, #8]
 8014e5e:	9006      	str	r0, [sp, #24]
 8014e60:	9107      	str	r1, [sp, #28]
 8014e62:	9104      	str	r1, [sp, #16]
 8014e64:	4808      	ldr	r0, [pc, #32]	; (8014e88 <siprintf+0x38>)
 8014e66:	4909      	ldr	r1, [pc, #36]	; (8014e8c <siprintf+0x3c>)
 8014e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e6c:	9105      	str	r1, [sp, #20]
 8014e6e:	a902      	add	r1, sp, #8
 8014e70:	6800      	ldr	r0, [r0, #0]
 8014e72:	9301      	str	r3, [sp, #4]
 8014e74:	f000 f8f4 	bl	8015060 <_svfiprintf_r>
 8014e78:	9b02      	ldr	r3, [sp, #8]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	701a      	strb	r2, [r3, #0]
 8014e7e:	b01c      	add	sp, #112	; 0x70
 8014e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e84:	b003      	add	sp, #12
 8014e86:	4770      	bx	lr
 8014e88:	20000154 	.word	0x20000154
 8014e8c:	ffff0208 	.word	0xffff0208

08014e90 <_strtol_l.constprop.0>:
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e96:	d001      	beq.n	8014e9c <_strtol_l.constprop.0+0xc>
 8014e98:	2b24      	cmp	r3, #36	; 0x24
 8014e9a:	d906      	bls.n	8014eaa <_strtol_l.constprop.0+0x1a>
 8014e9c:	f7ff ff72 	bl	8014d84 <__errno>
 8014ea0:	2316      	movs	r3, #22
 8014ea2:	6003      	str	r3, [r0, #0]
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eaa:	460d      	mov	r5, r1
 8014eac:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014f90 <_strtol_l.constprop.0+0x100>
 8014eb0:	462e      	mov	r6, r5
 8014eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014eb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014eba:	f017 0708 	ands.w	r7, r7, #8
 8014ebe:	d1f7      	bne.n	8014eb0 <_strtol_l.constprop.0+0x20>
 8014ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8014ec2:	d132      	bne.n	8014f2a <_strtol_l.constprop.0+0x9a>
 8014ec4:	782c      	ldrb	r4, [r5, #0]
 8014ec6:	2701      	movs	r7, #1
 8014ec8:	1cb5      	adds	r5, r6, #2
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d05b      	beq.n	8014f86 <_strtol_l.constprop.0+0xf6>
 8014ece:	2b10      	cmp	r3, #16
 8014ed0:	d109      	bne.n	8014ee6 <_strtol_l.constprop.0+0x56>
 8014ed2:	2c30      	cmp	r4, #48	; 0x30
 8014ed4:	d107      	bne.n	8014ee6 <_strtol_l.constprop.0+0x56>
 8014ed6:	782c      	ldrb	r4, [r5, #0]
 8014ed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014edc:	2c58      	cmp	r4, #88	; 0x58
 8014ede:	d14d      	bne.n	8014f7c <_strtol_l.constprop.0+0xec>
 8014ee0:	786c      	ldrb	r4, [r5, #1]
 8014ee2:	2310      	movs	r3, #16
 8014ee4:	3502      	adds	r5, #2
 8014ee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014eea:	f04f 0c00 	mov.w	ip, #0
 8014eee:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ef2:	4666      	mov	r6, ip
 8014ef4:	fbb8 f9f3 	udiv	r9, r8, r3
 8014ef8:	fb03 8a19 	mls	sl, r3, r9, r8
 8014efc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014f00:	f1be 0f09 	cmp.w	lr, #9
 8014f04:	d816      	bhi.n	8014f34 <_strtol_l.constprop.0+0xa4>
 8014f06:	4674      	mov	r4, lr
 8014f08:	42a3      	cmp	r3, r4
 8014f0a:	dd24      	ble.n	8014f56 <_strtol_l.constprop.0+0xc6>
 8014f0c:	f1bc 0f00 	cmp.w	ip, #0
 8014f10:	db1e      	blt.n	8014f50 <_strtol_l.constprop.0+0xc0>
 8014f12:	45b1      	cmp	r9, r6
 8014f14:	d31c      	bcc.n	8014f50 <_strtol_l.constprop.0+0xc0>
 8014f16:	d101      	bne.n	8014f1c <_strtol_l.constprop.0+0x8c>
 8014f18:	45a2      	cmp	sl, r4
 8014f1a:	db19      	blt.n	8014f50 <_strtol_l.constprop.0+0xc0>
 8014f1c:	fb06 4603 	mla	r6, r6, r3, r4
 8014f20:	f04f 0c01 	mov.w	ip, #1
 8014f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f28:	e7e8      	b.n	8014efc <_strtol_l.constprop.0+0x6c>
 8014f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8014f2c:	bf04      	itt	eq
 8014f2e:	782c      	ldrbeq	r4, [r5, #0]
 8014f30:	1cb5      	addeq	r5, r6, #2
 8014f32:	e7ca      	b.n	8014eca <_strtol_l.constprop.0+0x3a>
 8014f34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014f38:	f1be 0f19 	cmp.w	lr, #25
 8014f3c:	d801      	bhi.n	8014f42 <_strtol_l.constprop.0+0xb2>
 8014f3e:	3c37      	subs	r4, #55	; 0x37
 8014f40:	e7e2      	b.n	8014f08 <_strtol_l.constprop.0+0x78>
 8014f42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014f46:	f1be 0f19 	cmp.w	lr, #25
 8014f4a:	d804      	bhi.n	8014f56 <_strtol_l.constprop.0+0xc6>
 8014f4c:	3c57      	subs	r4, #87	; 0x57
 8014f4e:	e7db      	b.n	8014f08 <_strtol_l.constprop.0+0x78>
 8014f50:	f04f 3cff 	mov.w	ip, #4294967295
 8014f54:	e7e6      	b.n	8014f24 <_strtol_l.constprop.0+0x94>
 8014f56:	f1bc 0f00 	cmp.w	ip, #0
 8014f5a:	da05      	bge.n	8014f68 <_strtol_l.constprop.0+0xd8>
 8014f5c:	2322      	movs	r3, #34	; 0x22
 8014f5e:	4646      	mov	r6, r8
 8014f60:	6003      	str	r3, [r0, #0]
 8014f62:	b942      	cbnz	r2, 8014f76 <_strtol_l.constprop.0+0xe6>
 8014f64:	4630      	mov	r0, r6
 8014f66:	e79e      	b.n	8014ea6 <_strtol_l.constprop.0+0x16>
 8014f68:	b107      	cbz	r7, 8014f6c <_strtol_l.constprop.0+0xdc>
 8014f6a:	4276      	negs	r6, r6
 8014f6c:	2a00      	cmp	r2, #0
 8014f6e:	d0f9      	beq.n	8014f64 <_strtol_l.constprop.0+0xd4>
 8014f70:	f1bc 0f00 	cmp.w	ip, #0
 8014f74:	d000      	beq.n	8014f78 <_strtol_l.constprop.0+0xe8>
 8014f76:	1e69      	subs	r1, r5, #1
 8014f78:	6011      	str	r1, [r2, #0]
 8014f7a:	e7f3      	b.n	8014f64 <_strtol_l.constprop.0+0xd4>
 8014f7c:	2430      	movs	r4, #48	; 0x30
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d1b1      	bne.n	8014ee6 <_strtol_l.constprop.0+0x56>
 8014f82:	2308      	movs	r3, #8
 8014f84:	e7af      	b.n	8014ee6 <_strtol_l.constprop.0+0x56>
 8014f86:	2c30      	cmp	r4, #48	; 0x30
 8014f88:	d0a5      	beq.n	8014ed6 <_strtol_l.constprop.0+0x46>
 8014f8a:	230a      	movs	r3, #10
 8014f8c:	e7ab      	b.n	8014ee6 <_strtol_l.constprop.0+0x56>
 8014f8e:	bf00      	nop
 8014f90:	08015c05 	.word	0x08015c05

08014f94 <strtol>:
 8014f94:	4613      	mov	r3, r2
 8014f96:	460a      	mov	r2, r1
 8014f98:	4601      	mov	r1, r0
 8014f9a:	4802      	ldr	r0, [pc, #8]	; (8014fa4 <strtol+0x10>)
 8014f9c:	6800      	ldr	r0, [r0, #0]
 8014f9e:	f7ff bf77 	b.w	8014e90 <_strtol_l.constprop.0>
 8014fa2:	bf00      	nop
 8014fa4:	20000154 	.word	0x20000154

08014fa8 <__ssputs_r>:
 8014fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fac:	688e      	ldr	r6, [r1, #8]
 8014fae:	4682      	mov	sl, r0
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	4690      	mov	r8, r2
 8014fb4:	429e      	cmp	r6, r3
 8014fb6:	461f      	mov	r7, r3
 8014fb8:	d838      	bhi.n	801502c <__ssputs_r+0x84>
 8014fba:	898a      	ldrh	r2, [r1, #12]
 8014fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014fc0:	d032      	beq.n	8015028 <__ssputs_r+0x80>
 8014fc2:	6825      	ldr	r5, [r4, #0]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	6909      	ldr	r1, [r1, #16]
 8014fc8:	eba5 0901 	sub.w	r9, r5, r1
 8014fcc:	6965      	ldr	r5, [r4, #20]
 8014fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014fd2:	444b      	add	r3, r9
 8014fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014fd8:	106d      	asrs	r5, r5, #1
 8014fda:	429d      	cmp	r5, r3
 8014fdc:	bf38      	it	cc
 8014fde:	461d      	movcc	r5, r3
 8014fe0:	0553      	lsls	r3, r2, #21
 8014fe2:	d531      	bpl.n	8015048 <__ssputs_r+0xa0>
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	f000 fb73 	bl	80156d0 <_malloc_r>
 8014fea:	4606      	mov	r6, r0
 8014fec:	b950      	cbnz	r0, 8015004 <__ssputs_r+0x5c>
 8014fee:	230c      	movs	r3, #12
 8014ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ff4:	f8ca 3000 	str.w	r3, [sl]
 8014ff8:	89a3      	ldrh	r3, [r4, #12]
 8014ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ffe:	81a3      	strh	r3, [r4, #12]
 8015000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015004:	464a      	mov	r2, r9
 8015006:	6921      	ldr	r1, [r4, #16]
 8015008:	f000 face 	bl	80155a8 <memcpy>
 801500c:	89a3      	ldrh	r3, [r4, #12]
 801500e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015016:	81a3      	strh	r3, [r4, #12]
 8015018:	6126      	str	r6, [r4, #16]
 801501a:	444e      	add	r6, r9
 801501c:	6165      	str	r5, [r4, #20]
 801501e:	eba5 0509 	sub.w	r5, r5, r9
 8015022:	6026      	str	r6, [r4, #0]
 8015024:	463e      	mov	r6, r7
 8015026:	60a5      	str	r5, [r4, #8]
 8015028:	42be      	cmp	r6, r7
 801502a:	d900      	bls.n	801502e <__ssputs_r+0x86>
 801502c:	463e      	mov	r6, r7
 801502e:	4632      	mov	r2, r6
 8015030:	4641      	mov	r1, r8
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	f000 fac5 	bl	80155c2 <memmove>
 8015038:	68a3      	ldr	r3, [r4, #8]
 801503a:	2000      	movs	r0, #0
 801503c:	1b9b      	subs	r3, r3, r6
 801503e:	60a3      	str	r3, [r4, #8]
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	4433      	add	r3, r6
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	e7db      	b.n	8015000 <__ssputs_r+0x58>
 8015048:	462a      	mov	r2, r5
 801504a:	f000 fbb5 	bl	80157b8 <_realloc_r>
 801504e:	4606      	mov	r6, r0
 8015050:	2800      	cmp	r0, #0
 8015052:	d1e1      	bne.n	8015018 <__ssputs_r+0x70>
 8015054:	6921      	ldr	r1, [r4, #16]
 8015056:	4650      	mov	r0, sl
 8015058:	f000 face 	bl	80155f8 <_free_r>
 801505c:	e7c7      	b.n	8014fee <__ssputs_r+0x46>
	...

08015060 <_svfiprintf_r>:
 8015060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015064:	4698      	mov	r8, r3
 8015066:	898b      	ldrh	r3, [r1, #12]
 8015068:	b09d      	sub	sp, #116	; 0x74
 801506a:	4607      	mov	r7, r0
 801506c:	061b      	lsls	r3, r3, #24
 801506e:	460d      	mov	r5, r1
 8015070:	4614      	mov	r4, r2
 8015072:	d50e      	bpl.n	8015092 <_svfiprintf_r+0x32>
 8015074:	690b      	ldr	r3, [r1, #16]
 8015076:	b963      	cbnz	r3, 8015092 <_svfiprintf_r+0x32>
 8015078:	2140      	movs	r1, #64	; 0x40
 801507a:	f000 fb29 	bl	80156d0 <_malloc_r>
 801507e:	6028      	str	r0, [r5, #0]
 8015080:	6128      	str	r0, [r5, #16]
 8015082:	b920      	cbnz	r0, 801508e <_svfiprintf_r+0x2e>
 8015084:	230c      	movs	r3, #12
 8015086:	603b      	str	r3, [r7, #0]
 8015088:	f04f 30ff 	mov.w	r0, #4294967295
 801508c:	e0d1      	b.n	8015232 <_svfiprintf_r+0x1d2>
 801508e:	2340      	movs	r3, #64	; 0x40
 8015090:	616b      	str	r3, [r5, #20]
 8015092:	2300      	movs	r3, #0
 8015094:	f8cd 800c 	str.w	r8, [sp, #12]
 8015098:	f04f 0901 	mov.w	r9, #1
 801509c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801524c <_svfiprintf_r+0x1ec>
 80150a0:	9309      	str	r3, [sp, #36]	; 0x24
 80150a2:	2320      	movs	r3, #32
 80150a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150a8:	2330      	movs	r3, #48	; 0x30
 80150aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150ae:	4623      	mov	r3, r4
 80150b0:	469a      	mov	sl, r3
 80150b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150b6:	b10a      	cbz	r2, 80150bc <_svfiprintf_r+0x5c>
 80150b8:	2a25      	cmp	r2, #37	; 0x25
 80150ba:	d1f9      	bne.n	80150b0 <_svfiprintf_r+0x50>
 80150bc:	ebba 0b04 	subs.w	fp, sl, r4
 80150c0:	d00b      	beq.n	80150da <_svfiprintf_r+0x7a>
 80150c2:	465b      	mov	r3, fp
 80150c4:	4622      	mov	r2, r4
 80150c6:	4629      	mov	r1, r5
 80150c8:	4638      	mov	r0, r7
 80150ca:	f7ff ff6d 	bl	8014fa8 <__ssputs_r>
 80150ce:	3001      	adds	r0, #1
 80150d0:	f000 80aa 	beq.w	8015228 <_svfiprintf_r+0x1c8>
 80150d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150d6:	445a      	add	r2, fp
 80150d8:	9209      	str	r2, [sp, #36]	; 0x24
 80150da:	f89a 3000 	ldrb.w	r3, [sl]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	f000 80a2 	beq.w	8015228 <_svfiprintf_r+0x1c8>
 80150e4:	2300      	movs	r3, #0
 80150e6:	f04f 32ff 	mov.w	r2, #4294967295
 80150ea:	f10a 0a01 	add.w	sl, sl, #1
 80150ee:	9304      	str	r3, [sp, #16]
 80150f0:	9307      	str	r3, [sp, #28]
 80150f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150f6:	931a      	str	r3, [sp, #104]	; 0x68
 80150f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150fc:	4654      	mov	r4, sl
 80150fe:	2205      	movs	r2, #5
 8015100:	4852      	ldr	r0, [pc, #328]	; (801524c <_svfiprintf_r+0x1ec>)
 8015102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015106:	f000 fa41 	bl	801558c <memchr>
 801510a:	9a04      	ldr	r2, [sp, #16]
 801510c:	b9d8      	cbnz	r0, 8015146 <_svfiprintf_r+0xe6>
 801510e:	06d0      	lsls	r0, r2, #27
 8015110:	bf44      	itt	mi
 8015112:	2320      	movmi	r3, #32
 8015114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015118:	0711      	lsls	r1, r2, #28
 801511a:	bf44      	itt	mi
 801511c:	232b      	movmi	r3, #43	; 0x2b
 801511e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015122:	f89a 3000 	ldrb.w	r3, [sl]
 8015126:	2b2a      	cmp	r3, #42	; 0x2a
 8015128:	d015      	beq.n	8015156 <_svfiprintf_r+0xf6>
 801512a:	9a07      	ldr	r2, [sp, #28]
 801512c:	4654      	mov	r4, sl
 801512e:	2000      	movs	r0, #0
 8015130:	f04f 0c0a 	mov.w	ip, #10
 8015134:	4621      	mov	r1, r4
 8015136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801513a:	3b30      	subs	r3, #48	; 0x30
 801513c:	2b09      	cmp	r3, #9
 801513e:	d94e      	bls.n	80151de <_svfiprintf_r+0x17e>
 8015140:	b1b0      	cbz	r0, 8015170 <_svfiprintf_r+0x110>
 8015142:	9207      	str	r2, [sp, #28]
 8015144:	e014      	b.n	8015170 <_svfiprintf_r+0x110>
 8015146:	eba0 0308 	sub.w	r3, r0, r8
 801514a:	46a2      	mov	sl, r4
 801514c:	fa09 f303 	lsl.w	r3, r9, r3
 8015150:	4313      	orrs	r3, r2
 8015152:	9304      	str	r3, [sp, #16]
 8015154:	e7d2      	b.n	80150fc <_svfiprintf_r+0x9c>
 8015156:	9b03      	ldr	r3, [sp, #12]
 8015158:	1d19      	adds	r1, r3, #4
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	9103      	str	r1, [sp, #12]
 8015160:	bfbb      	ittet	lt
 8015162:	425b      	neglt	r3, r3
 8015164:	f042 0202 	orrlt.w	r2, r2, #2
 8015168:	9307      	strge	r3, [sp, #28]
 801516a:	9307      	strlt	r3, [sp, #28]
 801516c:	bfb8      	it	lt
 801516e:	9204      	strlt	r2, [sp, #16]
 8015170:	7823      	ldrb	r3, [r4, #0]
 8015172:	2b2e      	cmp	r3, #46	; 0x2e
 8015174:	d10c      	bne.n	8015190 <_svfiprintf_r+0x130>
 8015176:	7863      	ldrb	r3, [r4, #1]
 8015178:	2b2a      	cmp	r3, #42	; 0x2a
 801517a:	d135      	bne.n	80151e8 <_svfiprintf_r+0x188>
 801517c:	9b03      	ldr	r3, [sp, #12]
 801517e:	3402      	adds	r4, #2
 8015180:	1d1a      	adds	r2, r3, #4
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	9203      	str	r2, [sp, #12]
 8015188:	bfb8      	it	lt
 801518a:	f04f 33ff 	movlt.w	r3, #4294967295
 801518e:	9305      	str	r3, [sp, #20]
 8015190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801525c <_svfiprintf_r+0x1fc>
 8015194:	2203      	movs	r2, #3
 8015196:	7821      	ldrb	r1, [r4, #0]
 8015198:	4650      	mov	r0, sl
 801519a:	f000 f9f7 	bl	801558c <memchr>
 801519e:	b140      	cbz	r0, 80151b2 <_svfiprintf_r+0x152>
 80151a0:	2340      	movs	r3, #64	; 0x40
 80151a2:	eba0 000a 	sub.w	r0, r0, sl
 80151a6:	3401      	adds	r4, #1
 80151a8:	fa03 f000 	lsl.w	r0, r3, r0
 80151ac:	9b04      	ldr	r3, [sp, #16]
 80151ae:	4303      	orrs	r3, r0
 80151b0:	9304      	str	r3, [sp, #16]
 80151b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151b6:	2206      	movs	r2, #6
 80151b8:	4825      	ldr	r0, [pc, #148]	; (8015250 <_svfiprintf_r+0x1f0>)
 80151ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151be:	f000 f9e5 	bl	801558c <memchr>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	d038      	beq.n	8015238 <_svfiprintf_r+0x1d8>
 80151c6:	4b23      	ldr	r3, [pc, #140]	; (8015254 <_svfiprintf_r+0x1f4>)
 80151c8:	bb1b      	cbnz	r3, 8015212 <_svfiprintf_r+0x1b2>
 80151ca:	9b03      	ldr	r3, [sp, #12]
 80151cc:	3307      	adds	r3, #7
 80151ce:	f023 0307 	bic.w	r3, r3, #7
 80151d2:	3308      	adds	r3, #8
 80151d4:	9303      	str	r3, [sp, #12]
 80151d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d8:	4433      	add	r3, r6
 80151da:	9309      	str	r3, [sp, #36]	; 0x24
 80151dc:	e767      	b.n	80150ae <_svfiprintf_r+0x4e>
 80151de:	fb0c 3202 	mla	r2, ip, r2, r3
 80151e2:	460c      	mov	r4, r1
 80151e4:	2001      	movs	r0, #1
 80151e6:	e7a5      	b.n	8015134 <_svfiprintf_r+0xd4>
 80151e8:	2300      	movs	r3, #0
 80151ea:	3401      	adds	r4, #1
 80151ec:	f04f 0c0a 	mov.w	ip, #10
 80151f0:	4619      	mov	r1, r3
 80151f2:	9305      	str	r3, [sp, #20]
 80151f4:	4620      	mov	r0, r4
 80151f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151fa:	3a30      	subs	r2, #48	; 0x30
 80151fc:	2a09      	cmp	r2, #9
 80151fe:	d903      	bls.n	8015208 <_svfiprintf_r+0x1a8>
 8015200:	2b00      	cmp	r3, #0
 8015202:	d0c5      	beq.n	8015190 <_svfiprintf_r+0x130>
 8015204:	9105      	str	r1, [sp, #20]
 8015206:	e7c3      	b.n	8015190 <_svfiprintf_r+0x130>
 8015208:	fb0c 2101 	mla	r1, ip, r1, r2
 801520c:	4604      	mov	r4, r0
 801520e:	2301      	movs	r3, #1
 8015210:	e7f0      	b.n	80151f4 <_svfiprintf_r+0x194>
 8015212:	ab03      	add	r3, sp, #12
 8015214:	462a      	mov	r2, r5
 8015216:	a904      	add	r1, sp, #16
 8015218:	4638      	mov	r0, r7
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	4b0e      	ldr	r3, [pc, #56]	; (8015258 <_svfiprintf_r+0x1f8>)
 801521e:	e000      	b.n	8015222 <_svfiprintf_r+0x1c2>
 8015220:	bf00      	nop
 8015222:	1c42      	adds	r2, r0, #1
 8015224:	4606      	mov	r6, r0
 8015226:	d1d6      	bne.n	80151d6 <_svfiprintf_r+0x176>
 8015228:	89ab      	ldrh	r3, [r5, #12]
 801522a:	065b      	lsls	r3, r3, #25
 801522c:	f53f af2c 	bmi.w	8015088 <_svfiprintf_r+0x28>
 8015230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015232:	b01d      	add	sp, #116	; 0x74
 8015234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015238:	ab03      	add	r3, sp, #12
 801523a:	462a      	mov	r2, r5
 801523c:	a904      	add	r1, sp, #16
 801523e:	4638      	mov	r0, r7
 8015240:	9300      	str	r3, [sp, #0]
 8015242:	4b05      	ldr	r3, [pc, #20]	; (8015258 <_svfiprintf_r+0x1f8>)
 8015244:	f000 f87c 	bl	8015340 <_printf_i>
 8015248:	e7eb      	b.n	8015222 <_svfiprintf_r+0x1c2>
 801524a:	bf00      	nop
 801524c:	08015d05 	.word	0x08015d05
 8015250:	08015d0f 	.word	0x08015d0f
 8015254:	00000000 	.word	0x00000000
 8015258:	08014fa9 	.word	0x08014fa9
 801525c:	08015d0b 	.word	0x08015d0b

08015260 <_printf_common>:
 8015260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015264:	4616      	mov	r6, r2
 8015266:	4699      	mov	r9, r3
 8015268:	688a      	ldr	r2, [r1, #8]
 801526a:	4607      	mov	r7, r0
 801526c:	690b      	ldr	r3, [r1, #16]
 801526e:	460c      	mov	r4, r1
 8015270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015274:	4293      	cmp	r3, r2
 8015276:	bfb8      	it	lt
 8015278:	4613      	movlt	r3, r2
 801527a:	6033      	str	r3, [r6, #0]
 801527c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015280:	b10a      	cbz	r2, 8015286 <_printf_common+0x26>
 8015282:	3301      	adds	r3, #1
 8015284:	6033      	str	r3, [r6, #0]
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	0699      	lsls	r1, r3, #26
 801528a:	bf42      	ittt	mi
 801528c:	6833      	ldrmi	r3, [r6, #0]
 801528e:	3302      	addmi	r3, #2
 8015290:	6033      	strmi	r3, [r6, #0]
 8015292:	6825      	ldr	r5, [r4, #0]
 8015294:	f015 0506 	ands.w	r5, r5, #6
 8015298:	d106      	bne.n	80152a8 <_printf_common+0x48>
 801529a:	f104 0a19 	add.w	sl, r4, #25
 801529e:	68e3      	ldr	r3, [r4, #12]
 80152a0:	6832      	ldr	r2, [r6, #0]
 80152a2:	1a9b      	subs	r3, r3, r2
 80152a4:	42ab      	cmp	r3, r5
 80152a6:	dc29      	bgt.n	80152fc <_printf_common+0x9c>
 80152a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80152ac:	1e13      	subs	r3, r2, #0
 80152ae:	6822      	ldr	r2, [r4, #0]
 80152b0:	bf18      	it	ne
 80152b2:	2301      	movne	r3, #1
 80152b4:	0692      	lsls	r2, r2, #26
 80152b6:	d42e      	bmi.n	8015316 <_printf_common+0xb6>
 80152b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152bc:	4649      	mov	r1, r9
 80152be:	4638      	mov	r0, r7
 80152c0:	47c0      	blx	r8
 80152c2:	3001      	adds	r0, #1
 80152c4:	d021      	beq.n	801530a <_printf_common+0xaa>
 80152c6:	6823      	ldr	r3, [r4, #0]
 80152c8:	341a      	adds	r4, #26
 80152ca:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80152ce:	f003 0306 	and.w	r3, r3, #6
 80152d2:	6832      	ldr	r2, [r6, #0]
 80152d4:	2600      	movs	r6, #0
 80152d6:	2b04      	cmp	r3, #4
 80152d8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80152dc:	bf08      	it	eq
 80152de:	1aad      	subeq	r5, r5, r2
 80152e0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80152e4:	bf14      	ite	ne
 80152e6:	2500      	movne	r5, #0
 80152e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152ec:	4293      	cmp	r3, r2
 80152ee:	bfc4      	itt	gt
 80152f0:	1a9b      	subgt	r3, r3, r2
 80152f2:	18ed      	addgt	r5, r5, r3
 80152f4:	42b5      	cmp	r5, r6
 80152f6:	d11a      	bne.n	801532e <_printf_common+0xce>
 80152f8:	2000      	movs	r0, #0
 80152fa:	e008      	b.n	801530e <_printf_common+0xae>
 80152fc:	2301      	movs	r3, #1
 80152fe:	4652      	mov	r2, sl
 8015300:	4649      	mov	r1, r9
 8015302:	4638      	mov	r0, r7
 8015304:	47c0      	blx	r8
 8015306:	3001      	adds	r0, #1
 8015308:	d103      	bne.n	8015312 <_printf_common+0xb2>
 801530a:	f04f 30ff 	mov.w	r0, #4294967295
 801530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015312:	3501      	adds	r5, #1
 8015314:	e7c3      	b.n	801529e <_printf_common+0x3e>
 8015316:	18e1      	adds	r1, r4, r3
 8015318:	1c5a      	adds	r2, r3, #1
 801531a:	2030      	movs	r0, #48	; 0x30
 801531c:	3302      	adds	r3, #2
 801531e:	4422      	add	r2, r4
 8015320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801532c:	e7c4      	b.n	80152b8 <_printf_common+0x58>
 801532e:	2301      	movs	r3, #1
 8015330:	4622      	mov	r2, r4
 8015332:	4649      	mov	r1, r9
 8015334:	4638      	mov	r0, r7
 8015336:	47c0      	blx	r8
 8015338:	3001      	adds	r0, #1
 801533a:	d0e6      	beq.n	801530a <_printf_common+0xaa>
 801533c:	3601      	adds	r6, #1
 801533e:	e7d9      	b.n	80152f4 <_printf_common+0x94>

08015340 <_printf_i>:
 8015340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015344:	7e0f      	ldrb	r7, [r1, #24]
 8015346:	4691      	mov	r9, r2
 8015348:	4680      	mov	r8, r0
 801534a:	460c      	mov	r4, r1
 801534c:	2f78      	cmp	r7, #120	; 0x78
 801534e:	469a      	mov	sl, r3
 8015350:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015356:	d807      	bhi.n	8015368 <_printf_i+0x28>
 8015358:	2f62      	cmp	r7, #98	; 0x62
 801535a:	d80a      	bhi.n	8015372 <_printf_i+0x32>
 801535c:	2f00      	cmp	r7, #0
 801535e:	f000 80d8 	beq.w	8015512 <_printf_i+0x1d2>
 8015362:	2f58      	cmp	r7, #88	; 0x58
 8015364:	f000 80a3 	beq.w	80154ae <_printf_i+0x16e>
 8015368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801536c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015370:	e03a      	b.n	80153e8 <_printf_i+0xa8>
 8015372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015376:	2b15      	cmp	r3, #21
 8015378:	d8f6      	bhi.n	8015368 <_printf_i+0x28>
 801537a:	a101      	add	r1, pc, #4	; (adr r1, 8015380 <_printf_i+0x40>)
 801537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015380:	080153d9 	.word	0x080153d9
 8015384:	080153ed 	.word	0x080153ed
 8015388:	08015369 	.word	0x08015369
 801538c:	08015369 	.word	0x08015369
 8015390:	08015369 	.word	0x08015369
 8015394:	08015369 	.word	0x08015369
 8015398:	080153ed 	.word	0x080153ed
 801539c:	08015369 	.word	0x08015369
 80153a0:	08015369 	.word	0x08015369
 80153a4:	08015369 	.word	0x08015369
 80153a8:	08015369 	.word	0x08015369
 80153ac:	080154f9 	.word	0x080154f9
 80153b0:	0801541d 	.word	0x0801541d
 80153b4:	080154db 	.word	0x080154db
 80153b8:	08015369 	.word	0x08015369
 80153bc:	08015369 	.word	0x08015369
 80153c0:	0801551b 	.word	0x0801551b
 80153c4:	08015369 	.word	0x08015369
 80153c8:	0801541d 	.word	0x0801541d
 80153cc:	08015369 	.word	0x08015369
 80153d0:	08015369 	.word	0x08015369
 80153d4:	080154e3 	.word	0x080154e3
 80153d8:	682b      	ldr	r3, [r5, #0]
 80153da:	1d1a      	adds	r2, r3, #4
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	602a      	str	r2, [r5, #0]
 80153e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153e8:	2301      	movs	r3, #1
 80153ea:	e0a3      	b.n	8015534 <_printf_i+0x1f4>
 80153ec:	6820      	ldr	r0, [r4, #0]
 80153ee:	6829      	ldr	r1, [r5, #0]
 80153f0:	0606      	lsls	r6, r0, #24
 80153f2:	f101 0304 	add.w	r3, r1, #4
 80153f6:	d50a      	bpl.n	801540e <_printf_i+0xce>
 80153f8:	680e      	ldr	r6, [r1, #0]
 80153fa:	602b      	str	r3, [r5, #0]
 80153fc:	2e00      	cmp	r6, #0
 80153fe:	da03      	bge.n	8015408 <_printf_i+0xc8>
 8015400:	232d      	movs	r3, #45	; 0x2d
 8015402:	4276      	negs	r6, r6
 8015404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015408:	485e      	ldr	r0, [pc, #376]	; (8015584 <_printf_i+0x244>)
 801540a:	230a      	movs	r3, #10
 801540c:	e019      	b.n	8015442 <_printf_i+0x102>
 801540e:	680e      	ldr	r6, [r1, #0]
 8015410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015414:	602b      	str	r3, [r5, #0]
 8015416:	bf18      	it	ne
 8015418:	b236      	sxthne	r6, r6
 801541a:	e7ef      	b.n	80153fc <_printf_i+0xbc>
 801541c:	682b      	ldr	r3, [r5, #0]
 801541e:	6820      	ldr	r0, [r4, #0]
 8015420:	1d19      	adds	r1, r3, #4
 8015422:	6029      	str	r1, [r5, #0]
 8015424:	0601      	lsls	r1, r0, #24
 8015426:	d501      	bpl.n	801542c <_printf_i+0xec>
 8015428:	681e      	ldr	r6, [r3, #0]
 801542a:	e002      	b.n	8015432 <_printf_i+0xf2>
 801542c:	0646      	lsls	r6, r0, #25
 801542e:	d5fb      	bpl.n	8015428 <_printf_i+0xe8>
 8015430:	881e      	ldrh	r6, [r3, #0]
 8015432:	2f6f      	cmp	r7, #111	; 0x6f
 8015434:	4853      	ldr	r0, [pc, #332]	; (8015584 <_printf_i+0x244>)
 8015436:	bf0c      	ite	eq
 8015438:	2308      	moveq	r3, #8
 801543a:	230a      	movne	r3, #10
 801543c:	2100      	movs	r1, #0
 801543e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015442:	6865      	ldr	r5, [r4, #4]
 8015444:	2d00      	cmp	r5, #0
 8015446:	60a5      	str	r5, [r4, #8]
 8015448:	bfa2      	ittt	ge
 801544a:	6821      	ldrge	r1, [r4, #0]
 801544c:	f021 0104 	bicge.w	r1, r1, #4
 8015450:	6021      	strge	r1, [r4, #0]
 8015452:	b90e      	cbnz	r6, 8015458 <_printf_i+0x118>
 8015454:	2d00      	cmp	r5, #0
 8015456:	d04d      	beq.n	80154f4 <_printf_i+0x1b4>
 8015458:	4615      	mov	r5, r2
 801545a:	fbb6 f1f3 	udiv	r1, r6, r3
 801545e:	fb03 6711 	mls	r7, r3, r1, r6
 8015462:	5dc7      	ldrb	r7, [r0, r7]
 8015464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015468:	4637      	mov	r7, r6
 801546a:	460e      	mov	r6, r1
 801546c:	42bb      	cmp	r3, r7
 801546e:	d9f4      	bls.n	801545a <_printf_i+0x11a>
 8015470:	2b08      	cmp	r3, #8
 8015472:	d10b      	bne.n	801548c <_printf_i+0x14c>
 8015474:	6823      	ldr	r3, [r4, #0]
 8015476:	07de      	lsls	r6, r3, #31
 8015478:	d508      	bpl.n	801548c <_printf_i+0x14c>
 801547a:	6923      	ldr	r3, [r4, #16]
 801547c:	6861      	ldr	r1, [r4, #4]
 801547e:	4299      	cmp	r1, r3
 8015480:	bfde      	ittt	le
 8015482:	2330      	movle	r3, #48	; 0x30
 8015484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015488:	f105 35ff 	addle.w	r5, r5, #4294967295
 801548c:	1b52      	subs	r2, r2, r5
 801548e:	6122      	str	r2, [r4, #16]
 8015490:	464b      	mov	r3, r9
 8015492:	aa03      	add	r2, sp, #12
 8015494:	4621      	mov	r1, r4
 8015496:	4640      	mov	r0, r8
 8015498:	f8cd a000 	str.w	sl, [sp]
 801549c:	f7ff fee0 	bl	8015260 <_printf_common>
 80154a0:	3001      	adds	r0, #1
 80154a2:	d14c      	bne.n	801553e <_printf_i+0x1fe>
 80154a4:	f04f 30ff 	mov.w	r0, #4294967295
 80154a8:	b004      	add	sp, #16
 80154aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ae:	4835      	ldr	r0, [pc, #212]	; (8015584 <_printf_i+0x244>)
 80154b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80154b4:	6829      	ldr	r1, [r5, #0]
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80154bc:	6029      	str	r1, [r5, #0]
 80154be:	061d      	lsls	r5, r3, #24
 80154c0:	d514      	bpl.n	80154ec <_printf_i+0x1ac>
 80154c2:	07df      	lsls	r7, r3, #31
 80154c4:	bf44      	itt	mi
 80154c6:	f043 0320 	orrmi.w	r3, r3, #32
 80154ca:	6023      	strmi	r3, [r4, #0]
 80154cc:	b91e      	cbnz	r6, 80154d6 <_printf_i+0x196>
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	f023 0320 	bic.w	r3, r3, #32
 80154d4:	6023      	str	r3, [r4, #0]
 80154d6:	2310      	movs	r3, #16
 80154d8:	e7b0      	b.n	801543c <_printf_i+0xfc>
 80154da:	6823      	ldr	r3, [r4, #0]
 80154dc:	f043 0320 	orr.w	r3, r3, #32
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	2378      	movs	r3, #120	; 0x78
 80154e4:	4828      	ldr	r0, [pc, #160]	; (8015588 <_printf_i+0x248>)
 80154e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154ea:	e7e3      	b.n	80154b4 <_printf_i+0x174>
 80154ec:	0659      	lsls	r1, r3, #25
 80154ee:	bf48      	it	mi
 80154f0:	b2b6      	uxthmi	r6, r6
 80154f2:	e7e6      	b.n	80154c2 <_printf_i+0x182>
 80154f4:	4615      	mov	r5, r2
 80154f6:	e7bb      	b.n	8015470 <_printf_i+0x130>
 80154f8:	682b      	ldr	r3, [r5, #0]
 80154fa:	6826      	ldr	r6, [r4, #0]
 80154fc:	1d18      	adds	r0, r3, #4
 80154fe:	6961      	ldr	r1, [r4, #20]
 8015500:	6028      	str	r0, [r5, #0]
 8015502:	0635      	lsls	r5, r6, #24
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	d501      	bpl.n	801550c <_printf_i+0x1cc>
 8015508:	6019      	str	r1, [r3, #0]
 801550a:	e002      	b.n	8015512 <_printf_i+0x1d2>
 801550c:	0670      	lsls	r0, r6, #25
 801550e:	d5fb      	bpl.n	8015508 <_printf_i+0x1c8>
 8015510:	8019      	strh	r1, [r3, #0]
 8015512:	2300      	movs	r3, #0
 8015514:	4615      	mov	r5, r2
 8015516:	6123      	str	r3, [r4, #16]
 8015518:	e7ba      	b.n	8015490 <_printf_i+0x150>
 801551a:	682b      	ldr	r3, [r5, #0]
 801551c:	2100      	movs	r1, #0
 801551e:	1d1a      	adds	r2, r3, #4
 8015520:	602a      	str	r2, [r5, #0]
 8015522:	681d      	ldr	r5, [r3, #0]
 8015524:	6862      	ldr	r2, [r4, #4]
 8015526:	4628      	mov	r0, r5
 8015528:	f000 f830 	bl	801558c <memchr>
 801552c:	b108      	cbz	r0, 8015532 <_printf_i+0x1f2>
 801552e:	1b40      	subs	r0, r0, r5
 8015530:	6060      	str	r0, [r4, #4]
 8015532:	6863      	ldr	r3, [r4, #4]
 8015534:	6123      	str	r3, [r4, #16]
 8015536:	2300      	movs	r3, #0
 8015538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801553c:	e7a8      	b.n	8015490 <_printf_i+0x150>
 801553e:	6923      	ldr	r3, [r4, #16]
 8015540:	462a      	mov	r2, r5
 8015542:	4649      	mov	r1, r9
 8015544:	4640      	mov	r0, r8
 8015546:	47d0      	blx	sl
 8015548:	3001      	adds	r0, #1
 801554a:	d0ab      	beq.n	80154a4 <_printf_i+0x164>
 801554c:	6823      	ldr	r3, [r4, #0]
 801554e:	079b      	lsls	r3, r3, #30
 8015550:	d413      	bmi.n	801557a <_printf_i+0x23a>
 8015552:	68e0      	ldr	r0, [r4, #12]
 8015554:	9b03      	ldr	r3, [sp, #12]
 8015556:	4298      	cmp	r0, r3
 8015558:	bfb8      	it	lt
 801555a:	4618      	movlt	r0, r3
 801555c:	e7a4      	b.n	80154a8 <_printf_i+0x168>
 801555e:	2301      	movs	r3, #1
 8015560:	4632      	mov	r2, r6
 8015562:	4649      	mov	r1, r9
 8015564:	4640      	mov	r0, r8
 8015566:	47d0      	blx	sl
 8015568:	3001      	adds	r0, #1
 801556a:	d09b      	beq.n	80154a4 <_printf_i+0x164>
 801556c:	3501      	adds	r5, #1
 801556e:	68e3      	ldr	r3, [r4, #12]
 8015570:	9903      	ldr	r1, [sp, #12]
 8015572:	1a5b      	subs	r3, r3, r1
 8015574:	42ab      	cmp	r3, r5
 8015576:	dcf2      	bgt.n	801555e <_printf_i+0x21e>
 8015578:	e7eb      	b.n	8015552 <_printf_i+0x212>
 801557a:	2500      	movs	r5, #0
 801557c:	f104 0619 	add.w	r6, r4, #25
 8015580:	e7f5      	b.n	801556e <_printf_i+0x22e>
 8015582:	bf00      	nop
 8015584:	08015d16 	.word	0x08015d16
 8015588:	08015d27 	.word	0x08015d27

0801558c <memchr>:
 801558c:	b2c9      	uxtb	r1, r1
 801558e:	4402      	add	r2, r0
 8015590:	b510      	push	{r4, lr}
 8015592:	4290      	cmp	r0, r2
 8015594:	4603      	mov	r3, r0
 8015596:	d101      	bne.n	801559c <memchr+0x10>
 8015598:	2300      	movs	r3, #0
 801559a:	e003      	b.n	80155a4 <memchr+0x18>
 801559c:	781c      	ldrb	r4, [r3, #0]
 801559e:	3001      	adds	r0, #1
 80155a0:	428c      	cmp	r4, r1
 80155a2:	d1f6      	bne.n	8015592 <memchr+0x6>
 80155a4:	4618      	mov	r0, r3
 80155a6:	bd10      	pop	{r4, pc}

080155a8 <memcpy>:
 80155a8:	440a      	add	r2, r1
 80155aa:	1e43      	subs	r3, r0, #1
 80155ac:	4291      	cmp	r1, r2
 80155ae:	d100      	bne.n	80155b2 <memcpy+0xa>
 80155b0:	4770      	bx	lr
 80155b2:	b510      	push	{r4, lr}
 80155b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155b8:	4291      	cmp	r1, r2
 80155ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155be:	d1f9      	bne.n	80155b4 <memcpy+0xc>
 80155c0:	bd10      	pop	{r4, pc}

080155c2 <memmove>:
 80155c2:	4288      	cmp	r0, r1
 80155c4:	b510      	push	{r4, lr}
 80155c6:	eb01 0402 	add.w	r4, r1, r2
 80155ca:	d902      	bls.n	80155d2 <memmove+0x10>
 80155cc:	4284      	cmp	r4, r0
 80155ce:	4623      	mov	r3, r4
 80155d0:	d807      	bhi.n	80155e2 <memmove+0x20>
 80155d2:	1e43      	subs	r3, r0, #1
 80155d4:	42a1      	cmp	r1, r4
 80155d6:	d008      	beq.n	80155ea <memmove+0x28>
 80155d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155e0:	e7f8      	b.n	80155d4 <memmove+0x12>
 80155e2:	4402      	add	r2, r0
 80155e4:	4601      	mov	r1, r0
 80155e6:	428a      	cmp	r2, r1
 80155e8:	d100      	bne.n	80155ec <memmove+0x2a>
 80155ea:	bd10      	pop	{r4, pc}
 80155ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80155f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80155f4:	e7f7      	b.n	80155e6 <memmove+0x24>
	...

080155f8 <_free_r>:
 80155f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155fa:	2900      	cmp	r1, #0
 80155fc:	d043      	beq.n	8015686 <_free_r+0x8e>
 80155fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015602:	1f0c      	subs	r4, r1, #4
 8015604:	9001      	str	r0, [sp, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	bfb8      	it	lt
 801560a:	18e4      	addlt	r4, r4, r3
 801560c:	f000 f914 	bl	8015838 <__malloc_lock>
 8015610:	4a1e      	ldr	r2, [pc, #120]	; (801568c <_free_r+0x94>)
 8015612:	9801      	ldr	r0, [sp, #4]
 8015614:	6813      	ldr	r3, [r2, #0]
 8015616:	b933      	cbnz	r3, 8015626 <_free_r+0x2e>
 8015618:	6063      	str	r3, [r4, #4]
 801561a:	6014      	str	r4, [r2, #0]
 801561c:	b003      	add	sp, #12
 801561e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015622:	f000 b90f 	b.w	8015844 <__malloc_unlock>
 8015626:	42a3      	cmp	r3, r4
 8015628:	d908      	bls.n	801563c <_free_r+0x44>
 801562a:	6825      	ldr	r5, [r4, #0]
 801562c:	1961      	adds	r1, r4, r5
 801562e:	428b      	cmp	r3, r1
 8015630:	bf01      	itttt	eq
 8015632:	6819      	ldreq	r1, [r3, #0]
 8015634:	685b      	ldreq	r3, [r3, #4]
 8015636:	1949      	addeq	r1, r1, r5
 8015638:	6021      	streq	r1, [r4, #0]
 801563a:	e7ed      	b.n	8015618 <_free_r+0x20>
 801563c:	461a      	mov	r2, r3
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	b10b      	cbz	r3, 8015646 <_free_r+0x4e>
 8015642:	42a3      	cmp	r3, r4
 8015644:	d9fa      	bls.n	801563c <_free_r+0x44>
 8015646:	6811      	ldr	r1, [r2, #0]
 8015648:	1855      	adds	r5, r2, r1
 801564a:	42a5      	cmp	r5, r4
 801564c:	d10b      	bne.n	8015666 <_free_r+0x6e>
 801564e:	6824      	ldr	r4, [r4, #0]
 8015650:	4421      	add	r1, r4
 8015652:	1854      	adds	r4, r2, r1
 8015654:	6011      	str	r1, [r2, #0]
 8015656:	42a3      	cmp	r3, r4
 8015658:	d1e0      	bne.n	801561c <_free_r+0x24>
 801565a:	681c      	ldr	r4, [r3, #0]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4421      	add	r1, r4
 8015660:	6053      	str	r3, [r2, #4]
 8015662:	6011      	str	r1, [r2, #0]
 8015664:	e7da      	b.n	801561c <_free_r+0x24>
 8015666:	d902      	bls.n	801566e <_free_r+0x76>
 8015668:	230c      	movs	r3, #12
 801566a:	6003      	str	r3, [r0, #0]
 801566c:	e7d6      	b.n	801561c <_free_r+0x24>
 801566e:	6825      	ldr	r5, [r4, #0]
 8015670:	1961      	adds	r1, r4, r5
 8015672:	428b      	cmp	r3, r1
 8015674:	bf02      	ittt	eq
 8015676:	6819      	ldreq	r1, [r3, #0]
 8015678:	685b      	ldreq	r3, [r3, #4]
 801567a:	1949      	addeq	r1, r1, r5
 801567c:	6063      	str	r3, [r4, #4]
 801567e:	bf08      	it	eq
 8015680:	6021      	streq	r1, [r4, #0]
 8015682:	6054      	str	r4, [r2, #4]
 8015684:	e7ca      	b.n	801561c <_free_r+0x24>
 8015686:	b003      	add	sp, #12
 8015688:	bd30      	pop	{r4, r5, pc}
 801568a:	bf00      	nop
 801568c:	20001e54 	.word	0x20001e54

08015690 <sbrk_aligned>:
 8015690:	b570      	push	{r4, r5, r6, lr}
 8015692:	4e0e      	ldr	r6, [pc, #56]	; (80156cc <sbrk_aligned+0x3c>)
 8015694:	460c      	mov	r4, r1
 8015696:	4605      	mov	r5, r0
 8015698:	6831      	ldr	r1, [r6, #0]
 801569a:	b911      	cbnz	r1, 80156a2 <sbrk_aligned+0x12>
 801569c:	f000 f8bc 	bl	8015818 <_sbrk_r>
 80156a0:	6030      	str	r0, [r6, #0]
 80156a2:	4621      	mov	r1, r4
 80156a4:	4628      	mov	r0, r5
 80156a6:	f000 f8b7 	bl	8015818 <_sbrk_r>
 80156aa:	1c43      	adds	r3, r0, #1
 80156ac:	d00a      	beq.n	80156c4 <sbrk_aligned+0x34>
 80156ae:	1cc4      	adds	r4, r0, #3
 80156b0:	f024 0403 	bic.w	r4, r4, #3
 80156b4:	42a0      	cmp	r0, r4
 80156b6:	d007      	beq.n	80156c8 <sbrk_aligned+0x38>
 80156b8:	1a21      	subs	r1, r4, r0
 80156ba:	4628      	mov	r0, r5
 80156bc:	f000 f8ac 	bl	8015818 <_sbrk_r>
 80156c0:	3001      	adds	r0, #1
 80156c2:	d101      	bne.n	80156c8 <sbrk_aligned+0x38>
 80156c4:	f04f 34ff 	mov.w	r4, #4294967295
 80156c8:	4620      	mov	r0, r4
 80156ca:	bd70      	pop	{r4, r5, r6, pc}
 80156cc:	20001e58 	.word	0x20001e58

080156d0 <_malloc_r>:
 80156d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d4:	1ccd      	adds	r5, r1, #3
 80156d6:	4607      	mov	r7, r0
 80156d8:	f025 0503 	bic.w	r5, r5, #3
 80156dc:	3508      	adds	r5, #8
 80156de:	2d0c      	cmp	r5, #12
 80156e0:	bf38      	it	cc
 80156e2:	250c      	movcc	r5, #12
 80156e4:	2d00      	cmp	r5, #0
 80156e6:	db01      	blt.n	80156ec <_malloc_r+0x1c>
 80156e8:	42a9      	cmp	r1, r5
 80156ea:	d905      	bls.n	80156f8 <_malloc_r+0x28>
 80156ec:	230c      	movs	r3, #12
 80156ee:	2600      	movs	r6, #0
 80156f0:	603b      	str	r3, [r7, #0]
 80156f2:	4630      	mov	r0, r6
 80156f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f8:	4e2e      	ldr	r6, [pc, #184]	; (80157b4 <_malloc_r+0xe4>)
 80156fa:	f000 f89d 	bl	8015838 <__malloc_lock>
 80156fe:	6833      	ldr	r3, [r6, #0]
 8015700:	461c      	mov	r4, r3
 8015702:	bb34      	cbnz	r4, 8015752 <_malloc_r+0x82>
 8015704:	4629      	mov	r1, r5
 8015706:	4638      	mov	r0, r7
 8015708:	f7ff ffc2 	bl	8015690 <sbrk_aligned>
 801570c:	1c43      	adds	r3, r0, #1
 801570e:	4604      	mov	r4, r0
 8015710:	d14d      	bne.n	80157ae <_malloc_r+0xde>
 8015712:	6834      	ldr	r4, [r6, #0]
 8015714:	4626      	mov	r6, r4
 8015716:	2e00      	cmp	r6, #0
 8015718:	d140      	bne.n	801579c <_malloc_r+0xcc>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	4631      	mov	r1, r6
 801571e:	4638      	mov	r0, r7
 8015720:	eb04 0803 	add.w	r8, r4, r3
 8015724:	f000 f878 	bl	8015818 <_sbrk_r>
 8015728:	4580      	cmp	r8, r0
 801572a:	d13a      	bne.n	80157a2 <_malloc_r+0xd2>
 801572c:	6821      	ldr	r1, [r4, #0]
 801572e:	3503      	adds	r5, #3
 8015730:	4638      	mov	r0, r7
 8015732:	1a6d      	subs	r5, r5, r1
 8015734:	f025 0503 	bic.w	r5, r5, #3
 8015738:	3508      	adds	r5, #8
 801573a:	2d0c      	cmp	r5, #12
 801573c:	bf38      	it	cc
 801573e:	250c      	movcc	r5, #12
 8015740:	4629      	mov	r1, r5
 8015742:	f7ff ffa5 	bl	8015690 <sbrk_aligned>
 8015746:	3001      	adds	r0, #1
 8015748:	d02b      	beq.n	80157a2 <_malloc_r+0xd2>
 801574a:	6823      	ldr	r3, [r4, #0]
 801574c:	442b      	add	r3, r5
 801574e:	6023      	str	r3, [r4, #0]
 8015750:	e00e      	b.n	8015770 <_malloc_r+0xa0>
 8015752:	6822      	ldr	r2, [r4, #0]
 8015754:	1b52      	subs	r2, r2, r5
 8015756:	d41e      	bmi.n	8015796 <_malloc_r+0xc6>
 8015758:	2a0b      	cmp	r2, #11
 801575a:	d916      	bls.n	801578a <_malloc_r+0xba>
 801575c:	1961      	adds	r1, r4, r5
 801575e:	42a3      	cmp	r3, r4
 8015760:	6025      	str	r5, [r4, #0]
 8015762:	bf18      	it	ne
 8015764:	6059      	strne	r1, [r3, #4]
 8015766:	6863      	ldr	r3, [r4, #4]
 8015768:	bf08      	it	eq
 801576a:	6031      	streq	r1, [r6, #0]
 801576c:	5162      	str	r2, [r4, r5]
 801576e:	604b      	str	r3, [r1, #4]
 8015770:	f104 060b 	add.w	r6, r4, #11
 8015774:	4638      	mov	r0, r7
 8015776:	f000 f865 	bl	8015844 <__malloc_unlock>
 801577a:	1d23      	adds	r3, r4, #4
 801577c:	f026 0607 	bic.w	r6, r6, #7
 8015780:	1af2      	subs	r2, r6, r3
 8015782:	d0b6      	beq.n	80156f2 <_malloc_r+0x22>
 8015784:	1b9b      	subs	r3, r3, r6
 8015786:	50a3      	str	r3, [r4, r2]
 8015788:	e7b3      	b.n	80156f2 <_malloc_r+0x22>
 801578a:	6862      	ldr	r2, [r4, #4]
 801578c:	42a3      	cmp	r3, r4
 801578e:	bf0c      	ite	eq
 8015790:	6032      	streq	r2, [r6, #0]
 8015792:	605a      	strne	r2, [r3, #4]
 8015794:	e7ec      	b.n	8015770 <_malloc_r+0xa0>
 8015796:	4623      	mov	r3, r4
 8015798:	6864      	ldr	r4, [r4, #4]
 801579a:	e7b2      	b.n	8015702 <_malloc_r+0x32>
 801579c:	4634      	mov	r4, r6
 801579e:	6876      	ldr	r6, [r6, #4]
 80157a0:	e7b9      	b.n	8015716 <_malloc_r+0x46>
 80157a2:	230c      	movs	r3, #12
 80157a4:	4638      	mov	r0, r7
 80157a6:	603b      	str	r3, [r7, #0]
 80157a8:	f000 f84c 	bl	8015844 <__malloc_unlock>
 80157ac:	e7a1      	b.n	80156f2 <_malloc_r+0x22>
 80157ae:	6025      	str	r5, [r4, #0]
 80157b0:	e7de      	b.n	8015770 <_malloc_r+0xa0>
 80157b2:	bf00      	nop
 80157b4:	20001e54 	.word	0x20001e54

080157b8 <_realloc_r>:
 80157b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157bc:	4680      	mov	r8, r0
 80157be:	4614      	mov	r4, r2
 80157c0:	460e      	mov	r6, r1
 80157c2:	b921      	cbnz	r1, 80157ce <_realloc_r+0x16>
 80157c4:	4611      	mov	r1, r2
 80157c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157ca:	f7ff bf81 	b.w	80156d0 <_malloc_r>
 80157ce:	b92a      	cbnz	r2, 80157dc <_realloc_r+0x24>
 80157d0:	4625      	mov	r5, r4
 80157d2:	f7ff ff11 	bl	80155f8 <_free_r>
 80157d6:	4628      	mov	r0, r5
 80157d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157dc:	f000 f838 	bl	8015850 <_malloc_usable_size_r>
 80157e0:	4284      	cmp	r4, r0
 80157e2:	4607      	mov	r7, r0
 80157e4:	d802      	bhi.n	80157ec <_realloc_r+0x34>
 80157e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157ea:	d812      	bhi.n	8015812 <_realloc_r+0x5a>
 80157ec:	4621      	mov	r1, r4
 80157ee:	4640      	mov	r0, r8
 80157f0:	f7ff ff6e 	bl	80156d0 <_malloc_r>
 80157f4:	4605      	mov	r5, r0
 80157f6:	2800      	cmp	r0, #0
 80157f8:	d0ed      	beq.n	80157d6 <_realloc_r+0x1e>
 80157fa:	42bc      	cmp	r4, r7
 80157fc:	4622      	mov	r2, r4
 80157fe:	4631      	mov	r1, r6
 8015800:	bf28      	it	cs
 8015802:	463a      	movcs	r2, r7
 8015804:	f7ff fed0 	bl	80155a8 <memcpy>
 8015808:	4631      	mov	r1, r6
 801580a:	4640      	mov	r0, r8
 801580c:	f7ff fef4 	bl	80155f8 <_free_r>
 8015810:	e7e1      	b.n	80157d6 <_realloc_r+0x1e>
 8015812:	4635      	mov	r5, r6
 8015814:	e7df      	b.n	80157d6 <_realloc_r+0x1e>
	...

08015818 <_sbrk_r>:
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	2300      	movs	r3, #0
 801581c:	4d05      	ldr	r5, [pc, #20]	; (8015834 <_sbrk_r+0x1c>)
 801581e:	4604      	mov	r4, r0
 8015820:	4608      	mov	r0, r1
 8015822:	602b      	str	r3, [r5, #0]
 8015824:	f7eb ffd6 	bl	80017d4 <_sbrk>
 8015828:	1c43      	adds	r3, r0, #1
 801582a:	d102      	bne.n	8015832 <_sbrk_r+0x1a>
 801582c:	682b      	ldr	r3, [r5, #0]
 801582e:	b103      	cbz	r3, 8015832 <_sbrk_r+0x1a>
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	bd38      	pop	{r3, r4, r5, pc}
 8015834:	20001e5c 	.word	0x20001e5c

08015838 <__malloc_lock>:
 8015838:	4801      	ldr	r0, [pc, #4]	; (8015840 <__malloc_lock+0x8>)
 801583a:	f000 b811 	b.w	8015860 <__retarget_lock_acquire_recursive>
 801583e:	bf00      	nop
 8015840:	20001e60 	.word	0x20001e60

08015844 <__malloc_unlock>:
 8015844:	4801      	ldr	r0, [pc, #4]	; (801584c <__malloc_unlock+0x8>)
 8015846:	f000 b80c 	b.w	8015862 <__retarget_lock_release_recursive>
 801584a:	bf00      	nop
 801584c:	20001e60 	.word	0x20001e60

08015850 <_malloc_usable_size_r>:
 8015850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015854:	1f18      	subs	r0, r3, #4
 8015856:	2b00      	cmp	r3, #0
 8015858:	bfbc      	itt	lt
 801585a:	580b      	ldrlt	r3, [r1, r0]
 801585c:	18c0      	addlt	r0, r0, r3
 801585e:	4770      	bx	lr

08015860 <__retarget_lock_acquire_recursive>:
 8015860:	4770      	bx	lr

08015862 <__retarget_lock_release_recursive>:
 8015862:	4770      	bx	lr

08015864 <_init>:
 8015864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015866:	bf00      	nop
 8015868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801586a:	bc08      	pop	{r3}
 801586c:	469e      	mov	lr, r3
 801586e:	4770      	bx	lr

08015870 <_fini>:
 8015870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015872:	bf00      	nop
 8015874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015876:	bc08      	pop	{r3}
 8015878:	469e      	mov	lr, r3
 801587a:	4770      	bx	lr
