
fmc320_u.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001566c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080158a4  080158a4  000258a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d84  08015d84  00025d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d8c  08015d8c  00025d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015d90  08015d90  00025d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015d94  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca9  200001b8  08015f4c  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e61  08015f4c  00031e61  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041f40  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000927c  00000000  00000000  0007212e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002988  00000000  00000000  0007b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002490  00000000  00000000  0007dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040ac5  00000000  00000000  000801c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f9e4  00000000  00000000  000c0c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001785f7  00000000  00000000  00100671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278c68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a85c  00000000  00000000  00278cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	0801588c 	.word	0x0801588c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	0801588c 	.word	0x0801588c

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20001680 	.word	0x20001680
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fad8 	bl	800e948 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fafc 	bl	800e998 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001688 	.word	0x20001688
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c88 	.word	0x20001c88

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fb32 	bl	800dacc <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d fa11 	bl	800d894 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001728 	.word	0x20001728
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c88 	.word	0x20001c88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2000172c 	.word	0x2000172c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017bc 	.word	0x200017bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017b0 	.word	0x200017b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001688 	.word	0x20001688
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fca9 	bl	800e164 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	080158a4 	.word	0x080158a4
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
 * @brief  Application ThreadX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN App_ThreadX_MEM_POOL */
    /* USER CODE END App_ThreadX_MEM_POOL */
    /* USER CODE BEGIN App_ThreadX_Init */
    tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d ff76 	bl	800e764 <_txe_thread_create>
    menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

    tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d ff60 	bl	800e764 <_txe_thread_create>
    0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

    tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fe82 	bl	800e5b4 <_txe_semaphore_create>

    tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fcef 	bl	800e2a4 <_txe_queue_create>
#ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
    /* USER CODE END App_ThreadX_Init */

    return (ret);
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a2d 	.word	0x08000a2d
 80008d8:	080158b8 	.word	0x080158b8
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000af1 	.word	0x08000af1
 80008e8:	080158c4 	.word	0x080158c4
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	080158d4 	.word	0x080158d4
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	080158e8 	.word	0x080158e8
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
 * @brief  MX_ThreadX_Init
 * @param  None
 * @retval None
 */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN  Before_Kernel_Start */

    /* USER CODE END  Before_Kernel_Start */

    tx_kernel_enter();
 8000908:	f00a feae 	bl	800b668 <_tx_initialize_kernel_enter>

    /* USER CODE BEGIN  Kernel_Start_Error */

    /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
 * @brief  App_ThreadX_LowPower_Timer_Setup
 * @param  count : TX timer count
 * @retval None
 */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

    const int rtc_clk = 32768;
 8000918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091c:	617b      	str	r3, [r7, #20]
    const int rtc_prescaller = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	613b      	str	r3, [r7, #16]

#ifdef FM_THREADX_LOW_POWER
    uint32_t ticks_to_sleep;

    g_lptim1_start = LPTIM1->CNT;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <App_ThreadX_LowPower_Timer_Setup+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <App_ThreadX_LowPower_Timer_Setup+0x5c>)
 800092a:	801a      	strh	r2, [r3, #0]
    /*
     * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
     */
    ticks_to_sleep = (rtc_clk / rtc_prescaller) * count;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fb92 f3f3 	sdiv	r3, r2, r3
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <App_ThreadX_LowPower_Timer_Setup+0x60>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <App_ThreadX_LowPower_Timer_Setup+0x64>)
 8000952:	f008 fe13 	bl	800957c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>
    RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
    {
        Error_Handler();
 800095c:	f000 fcd4 	bl	8001308 <Error_Handler>
    }

#endif
    /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	46004400 	.word	0x46004400
 800096c:	20000608 	.word	0x20000608
 8000970:	51eb851f 	.word	0x51eb851f
 8000974:	200014a4 	.word	0x200014a4

08000978 <App_ThreadX_LowPower_Enter>:
 * @brief  App_ThreadX_LowPower_Enter
 * @param  None
 * @retval None
 */
void App_ThreadX_LowPower_Enter(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <App_ThreadX_LowPower_Enter+0x18>)
 8000982:	f003 fd01 	bl	8004388 <HAL_GPIO_WritePin>

#ifdef FM_THREADX_LOW_POWER
    HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000986:	2001      	movs	r0, #1
 8000988:	f004 f99c 	bl	8004cc4 <HAL_PWREx_EnterSTOP1Mode>
#endif

    /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	42020400 	.word	0x42020400

08000994 <App_ThreadX_LowPower_Exit>:
 * @brief  App_ThreadX_LowPower_Exit
 * @param  None
 * @retval None
 */
void App_ThreadX_LowPower_Exit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
#ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000998:	f000 f91c 	bl	8000bd4 <SystemClock_Config>
#endif

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <App_ThreadX_LowPower_Exit+0x18>)
 80009a2:	f003 fcf1 	bl	8004388 <HAL_GPIO_WritePin>

    /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	42020400 	.word	0x42020400

080009b0 <App_ThreadX_LowPower_Timer_Adjust>:
 * @brief  App_ThreadX_LowPower_Timer_Adjust
 * @param  None
 * @retval Amount of time (in ticks)
 */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
    static const int lptim_clk_div_presc = 2048;

#ifdef FM_THREADX_LOW_POWER
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <App_ThreadX_LowPower_Timer_Adjust+0x68>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 80009be:	801a      	strh	r2, [r3, #0]
    cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <App_ThreadX_LowPower_Timer_Adjust+0x70>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	607b      	str	r3, [r7, #4]
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	607b      	str	r3, [r7, #4]
    cnt_ret += cnt_drift;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
    cnt_drift = cnt_ret % lptim_clk_div_presc;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80009f0:	fb01 f202 	mul.w	r2, r1, r2
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 80009fa:	801a      	strh	r2, [r3, #0]
    cnt_ret /= lptim_clk_div_presc;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a08:	607b      	str	r3, [r7, #4]
    return (cnt_ret);
 8000a0a:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
    /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	46004400 	.word	0x46004400
 8000a1c:	2000060a 	.word	0x2000060a
 8000a20:	20000608 	.word	0x20000608
 8000a24:	200013c0 	.word	0x200013c0
 8000a28:	08015b10 	.word	0x08015b10

08000a2c <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    static const int queue_stay = 100;
    static const int backlight_countdown = 10;
    static int backlight_cd = 0;
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <menu_task_entry+0xa8>)
 8000a36:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while (1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <menu_task_entry+0xac>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f107 030f 	add.w	r3, r7, #15
 8000a46:	4619      	mov	r1, r3
 8000a48:	4824      	ldr	r0, [pc, #144]	; (8000adc <menu_task_entry+0xb0>)
 8000a4a:	f00d fcf9 	bl	800e440 <_txe_queue_receive>
 8000a4e:	6138      	str	r0, [r7, #16]
        queue_stay);

        if (ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <menu_task_entry+0xa8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d02e      	beq.n	8000ab6 <menu_task_entry+0x8a>
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <menu_task_entry+0xb4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d02a      	beq.n	8000ab6 <menu_task_entry+0x8a>
        {
            if (event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d109      	bne.n	8000a7a <menu_task_entry+0x4e>
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <menu_task_entry+0xb8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd05      	ble.n	8000a7a <menu_task_entry+0x4e>
            {
                backlight_cd--;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <menu_task_entry+0xb8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <menu_task_entry+0xb8>)
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e01d      	b.n	8000ab6 <menu_task_entry+0x8a>
            }
            else if (event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10d      	bne.n	8000a9c <menu_task_entry+0x70>
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <menu_task_entry+0xb8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dc09      	bgt.n	8000a9c <menu_task_entry+0x70>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <menu_task_entry+0xbc>)
 8000a90:	f003 fc7a 	bl	8004388 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <menu_task_entry+0xb8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e00c      	b.n	8000ab6 <menu_task_entry+0x8a>
            }
            else if (event_next != EVENT_LCD_REFRESH)
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d009      	beq.n	8000ab6 <menu_task_entry+0x8a>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <menu_task_entry+0xbc>)
 8000aaa:	f003 fc6d 	bl	8004388 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = backlight_countdown;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <menu_task_entry+0xc0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <menu_task_entry+0xb8>)
 8000ab4:	6013      	str	r3, [r2, #0]
            }
        }

        if (ret_status == TX_SUCCESS)
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <menu_task_entry+0x9c>
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(event_next);
 8000abc:	7bfa      	ldrb	r2, [r7, #15]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4798      	blx	r3
 8000ac4:	6178      	str	r0, [r7, #20]
 8000ac6:	e7b9      	b.n	8000a3c <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(EVENT_LCD_REFRESH);
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2001      	movs	r0, #1
 8000acc:	4798      	blx	r3
 8000ace:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000ad0:	e7b4      	b.n	8000a3c <menu_task_entry+0x10>
 8000ad2:	bf00      	nop
 8000ad4:	080146d5 	.word	0x080146d5
 8000ad8:	08015b14 	.word	0x08015b14
 8000adc:	20001388 	.word	0x20001388
 8000ae0:	08014911 	.word	0x08014911
 8000ae4:	200013c4 	.word	0x200013c4
 8000ae8:	42020800 	.word	0x42020800
 8000aec:	08015b18 	.word	0x08015b18

08000af0 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000af8:	230e      	movs	r3, #14
 8000afa:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <debounce_task_entry+0x78>)
 8000b02:	f00d fded 	bl	800e6e0 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00c f9dd 	bl	800cec8 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <debounce_task_entry+0x7c>)
 8000b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4c:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000b4e:	2015      	movs	r0, #21
 8000b50:	f003 fa26 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000b54:	2016      	movs	r0, #22
 8000b56:	f003 fa23 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000b5a:	2017      	movs	r0, #23
 8000b5c:	f003 fa20 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b60:	2018      	movs	r0, #24
 8000b62:	f003 fa1d 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000b66:	e7c9      	b.n	8000afc <debounce_task_entry+0xc>
 8000b68:	2000136c 	.word	0x2000136c
 8000b6c:	46022000 	.word	0x46022000

08000b70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b74:	f000 fee2 	bl	800193c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b78:	f000 f82c 	bl	8000bd4 <SystemClock_Config>

    /* Configure the System Power */
    SystemPower_Config();
 8000b7c:	f000 f882 	bl	8000c84 <SystemPower_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000b80:	f000 fac4 	bl	800110c <MX_GPIO_Init>
    MX_ADC1_Init();
 8000b84:	f000 f8aa 	bl	8000cdc <MX_ADC1_Init>
    MX_ICACHE_Init();
 8000b88:	f000 f916 	bl	8000db8 <MX_ICACHE_Init>
    MX_LPTIM1_Init();
 8000b8c:	f000 f928 	bl	8000de0 <MX_LPTIM1_Init>
    MX_RTC_Init();
 8000b90:	f000 f972 	bl	8000e78 <MX_RTC_Init>
    MX_SPI1_Init();
 8000b94:	f000 f9fe 	bl	8000f94 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8000b98:	f000 fa6c 	bl	8001074 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    fm_lcd_clear();
 8000b9c:	f00e ff6b 	bl	800fa76 <fm_lcd_clear>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <main+0x58>)
 8000ba8:	f002 ffb4 	bl	8003b14 <HAL_ADCEx_Calibration_Start>
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <main+0x5c>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <main+0x5c>)
 8000bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    HAL_LPTIM_Counter_Start(&hlptim1);
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <main+0x60>)
 8000bbe:	f003 fd5d 	bl	800467c <HAL_LPTIM_Counter_Start>

    /* USER CODE END 2 */

    MX_ThreadX_Init();
 8000bc2:	f7ff fe9f 	bl	8000904 <MX_ThreadX_Init>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <main+0x56>
 8000bc8:	200013c8 	.word	0x200013c8
 8000bcc:	46020c00 	.word	0x46020c00
 8000bd0:	20001454 	.word	0x20001454

08000bd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09e      	sub	sp, #120	; 0x78
 8000bd8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2260      	movs	r2, #96	; 0x60
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f014 f90c 	bl	8014e00 <memset>
    {
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f003 ff87 	bl	8004b0c <HAL_PWREx_ControlVoltageScaling>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8000c04:	f000 fb80 	bl	8001308 <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8000c08:	f003 ff70 	bl	8004aec <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <SystemClock_Config+0xac>)
 8000c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <SystemClock_Config+0xac>)
 8000c14:	f023 0318 	bic.w	r3, r3, #24
 8000c18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000c1c:	2314      	movs	r3, #20
 8000c1e:	61bb      	str	r3, [r7, #24]
    | RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c20:	2381      	movs	r3, #129	; 0x81
 8000c22:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 f95e 	bl	8004efc <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x76>
    {
        Error_Handler();
 8000c46:	f000 fb5f 	bl	8001308 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	603b      	str	r3, [r7, #0]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 f824 	bl	8005cb4 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8000c72:	f000 fb49 	bl	8001308 <Error_Handler>
    }
}
 8000c76:	bf00      	nop
 8000c78:	3778      	adds	r7, #120	; 0x78
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	46020c00 	.word	0x46020c00

08000c84 <SystemPower_Config>:
/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    HAL_PWREx_EnableVddIO2();
 8000c88:	f004 f848 	bl	8004d1c <HAL_PWREx_EnableVddIO2>

    /*
     * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
     */
    HAL_PWREx_DisableUCPDDeadBattery();
 8000c8c:	f004 f866 	bl	8004d5c <HAL_PWREx_DisableUCPDDeadBattery>

    /*
     * SRAM Power Down In Stop Mode Config
     */
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <SystemPower_Config+0x44>)
 8000c92:	f004 f873 	bl	8004d7c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_DCACHE1_FULL_STOP_RETENTION);
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <SystemPower_Config+0x48>)
 8000c98:	f004 f870 	bl	8004d7c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_DMA2DRAM_FULL_STOP_RETENTION);
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <SystemPower_Config+0x4c>)
 8000c9e:	f004 f86d 	bl	8004d7c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA32RAM_FULL_STOP_RETENTION);
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <SystemPower_Config+0x50>)
 8000ca4:	f004 f86a 	bl	8004d7c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <SystemPower_Config+0x54>)
 8000caa:	f004 f867 	bl	8004d7c <HAL_PWREx_DisableRAMsContentStopRetention>
    PWR_PERIPHRAM_FULL_STOP_RETENTION);

    /*
     * Switch to SMPS regulator instead of LDO
     */
    if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f003 ffb8 	bl	8004c24 <HAL_PWREx_ConfigSupply>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemPower_Config+0x3a>
    {
        Error_Handler();
 8000cba:	f000 fb25 	bl	8001308 <Error_Handler>
    }

    /*
     * SRAM4 Fast In Run Mode Config
     */
    HAL_PWREx_EnableSRAM4FastWakeUp();
 8000cbe:	f004 f90d 	bl	8004edc <HAL_PWREx_EnableSRAM4FastWakeUp>
    /* USER CODE BEGIN PWR */
    /* USER CODE END PWR */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	00080001 	.word	0x00080001
 8000ccc:	00200001 	.word	0x00200001
 8000cd0:	00400001 	.word	0x00400001
 8000cd4:	01000001 	.word	0x01000001
 8000cd8:	00800001 	.word	0x00800001

08000cdc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig =
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f014 f889 	bl	8014e00 <memset>

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000cf0:	4a2f      	ldr	r2, [pc, #188]	; (8000db0 <MX_ADC1_Init+0xd4>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000cf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cfa:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	609a      	str	r2, [r3, #8]
    hadc1.Init.GainCompensation = 0;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	619a      	str	r2, [r3, #24]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	771a      	strb	r2, [r3, #28]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    hadc1.Init.NbrOfConversion = 1;
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	669a      	str	r2, [r3, #104]	; 0x68
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	645a      	str	r2, [r3, #68]	; 0x44
    hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	651a      	str	r2, [r3, #80]	; 0x50
    hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc1.Init.OversamplingMode = DISABLE;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d66:	f001 f9cd 	bl	8002104 <HAL_ADC_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC1_Init+0x98>
    {
        Error_Handler();
 8000d70:	f000 faca 	bl	8001308 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_ADC1_Init+0xd8>)
 8000d76:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d78:	2306      	movs	r3, #6
 8000d7a:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d84:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d86:	2304      	movs	r3, #4
 8000d88:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_ADC1_Init+0xd0>)
 8000d94:	f001 fe1c 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xc6>
    {
        Error_Handler();
 8000d9e:	f000 fab3 	bl	8001308 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200013c8 	.word	0x200013c8
 8000db0:	42028000 	.word	0x42028000
 8000db4:	ce080000 	.word	0xce080000

08000db8 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

    /* USER CODE END ICACHE_Init 1 */

    /** Enable instruction cache in 1-way (direct mapped cache)
     */
    if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f003 fb2d 	bl	800441c <HAL_ICACHE_ConfigAssociativityMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ICACHE_Init+0x14>
    {
        Error_Handler();
 8000dc8:	f000 fa9e 	bl	8001308 <Error_Handler>
    }
    if (HAL_ICACHE_Enable() != HAL_OK)
 8000dcc:	f003 fb46 	bl	800445c <HAL_ICACHE_Enable>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ICACHE_Init+0x22>
    {
        Error_Handler();
 8000dd6:	f000 fa97 	bl	8001308 <Error_Handler>
    }
    /* USER CODE BEGIN ICACHE_Init 2 */

    /* USER CODE END ICACHE_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_LPTIM1_Init>:
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    /* USER CODE END LPTIM1_Init 0 */

    /* USER CODE BEGIN LPTIM1_Init 1 */

    /* USER CODE END LPTIM1_Init 1 */
    hlptim1.Instance = LPTIM1;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <MX_LPTIM1_Init+0x90>)
 8000de8:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df6:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfe:	615a      	str	r2, [r3, #20]
    hlptim1.Init.Period = 65535;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e06:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
    hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
    hlptim1.Init.RepetitionCounter = 0;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000e26:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_LPTIM1_Init+0x8c>)
 8000e28:	f003 fb28 	bl	800447c <HAL_LPTIM_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_LPTIM1_Init+0x56>
    {
        Error_Handler();
 8000e32:	f000 fa69 	bl	8001308 <Error_Handler>
    /*
     * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
     * configured
     *
     */
    __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4c:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <MX_LPTIM1_Init+0x94>)
 8000e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

    /* USER CODE END LPTIM1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001454 	.word	0x20001454
 8000e70:	46004400 	.word	0x46004400
 8000e74:	46020c00 	.word	0x46020c00

08000e78 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_PrivilegeStateTypeDef privilegeState =
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	619a      	str	r2, [r3, #24]
    {
        0
    };
    RTC_TimeTypeDef sTime =
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
    {
        0
    };
    RTC_DateTypeDef sDate =
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ea8:	4a39      	ldr	r2, [pc, #228]	; (8000f90 <MX_RTC_Init+0x118>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eac:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_RTC_Init+0x114>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_RTC_Init+0x114>)
 8000eb4:	227f      	movs	r2, #127	; 0x7f
 8000eb6:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <MX_RTC_Init+0x114>)
 8000eba:	22ff      	movs	r2, #255	; 0xff
 8000ebc:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eca:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed6:	61da      	str	r2, [r3, #28]
    hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_RTC_Init+0x114>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
    hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_RTC_Init+0x114>)
 8000ee6:	f007 fffd 	bl	8008ee4 <HAL_RTC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_RTC_Init+0x7c>
    {
        Error_Handler();
 8000ef0:	f000 fa0a 	bl	8001308 <Error_Handler>
    }
    privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4820      	ldr	r0, [pc, #128]	; (8000f8c <MX_RTC_Init+0x114>)
 8000f0c:	f008 fc20 	bl	8009750 <HAL_RTCEx_PrivilegeModeSet>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_RTC_Init+0xa2>
    {
        Error_Handler();
 8000f16:	f000 f9f7 	bl	8001308 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 17;
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	723b      	strb	r3, [r7, #8]
    sTime.Minutes = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	727b      	strb	r3, [r7, #9]
    sTime.Seconds = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_RTC_Init+0x114>)
 8000f38:	f008 f856 	bl	8008fe8 <HAL_RTC_SetTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_RTC_Init+0xce>
    {
        Error_Handler();
 8000f42:	f000 f9e1 	bl	8001308 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000f46:	2303      	movs	r3, #3
 8000f48:	713b      	strb	r3, [r7, #4]
    sDate.Month = RTC_MONTH_MAY;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	717b      	strb	r3, [r7, #5]
    sDate.Date = 10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	71bb      	strb	r3, [r7, #6]
    sDate.Year = 23;
 8000f52:	2317      	movs	r3, #23
 8000f54:	71fb      	strb	r3, [r7, #7]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_RTC_Init+0x114>)
 8000f5e:	f008 f951 	bl	8009204 <HAL_RTC_SetDate>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_RTC_Init+0xf4>
    {
        Error_Handler();
 8000f68:	f000 f9ce 	bl	8001308 <Error_Handler>
    }

    /** Enable the WakeUp
     */
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16,
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_RTC_Init+0x114>)
 8000f76:	f008 fb01 	bl	800957c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_RTC_Init+0x10c>
    0) != HAL_OK)
    {
        Error_Handler();
 8000f80:	f000 f9c2 	bl	8001308 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200014a4 	.word	0x200014a4
 8000f90:	46007800 	.word	0x46007800

08000f94 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 0 */

    /* USER CODE END SPI1_Init 0 */

    SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct =
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <MX_SPI1_Init+0xdc>)
 8000fa8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fb0:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fb4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000fb8:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fd2:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fd6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000fda:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_SPI1_Init+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x7;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_SPI1_Init+0xd8>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_SPI1_Init+0xd8>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_SPI1_Init+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_SPI1_Init+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_SPI1_Init+0xd8>)
 800100a:	2200      	movs	r2, #0
 800100c:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_SPI1_Init+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_SPI1_Init+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI1_Init+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_SPI1_Init+0xd8>)
 8001022:	2200      	movs	r2, #0
 8001024:	659a      	str	r2, [r3, #88]	; 0x58
    hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_SPI1_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI1_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_SPI1_Init+0xd8>)
 8001034:	f008 fbba 	bl	80097ac <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI1_Init+0xae>
    {
        Error_Handler();
 800103e:	f000 f963 	bl	8001308 <Error_Handler>
    }
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection =
 8001046:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
    SPI_GRP1_GPDMA_CH0_TCF_TRG;
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity =
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
    SPI_TRIG_POLARITY_RISING;
    if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1,
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_SPI1_Init+0xd8>)
 8001056:	f008 ffc6 	bl	8009fe6 <HAL_SPIEx_SetConfigAutonomousMode>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0xd0>
    &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
    {
        Error_Handler();
 8001060:	f000 f952 	bl	8001308 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200014d4 	.word	0x200014d4
 8001070:	40013000 	.word	0x40013000

08001074 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_USART2_UART_Init+0x90>)
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <MX_USART2_UART_Init+0x94>)
 800107c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_USART2_UART_Init+0x90>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_USART2_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_USART2_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_USART2_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_USART2_UART_Init+0x90>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010be:	f009 fbbd 	bl	800a83c <HAL_UART_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 80010c8:	f000 f91e 	bl	8001308 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80010cc:	2100      	movs	r1, #0
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010d0:	f00a f896 	bl	800b200 <HAL_UARTEx_SetTxFifoThreshold>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x6a>
    != HAL_OK)
    {
        Error_Handler();
 80010da:	f000 f915 	bl	8001308 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80010de:	2100      	movs	r1, #0
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010e2:	f00a f8cb 	bl	800b27c <HAL_UARTEx_SetRxFifoThreshold>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART2_UART_Init+0x7c>
    != HAL_OK)
    {
        Error_Handler();
 80010ec:	f000 f90c 	bl	8001308 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_USART2_UART_Init+0x90>)
 80010f2:	f00a f84c 	bl	800b18e <HAL_UARTEx_DisableFifoMode>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 80010fc:	f000 f904 	bl	8001308 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20001564 	.word	0x20001564
 8001108:	40004400 	.word	0x40004400

0800110c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
    };
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001128:	4a62      	ldr	r2, [pc, #392]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001132:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001146:	4a5b      	ldr	r2, [pc, #364]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001164:	4a53      	ldr	r2, [pc, #332]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 800117e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001182:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800118c:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <MX_GPIO_Init+0x1a8>)
 800118e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin | PCF8553_RESET_Pin,
 800119a:	2200      	movs	r2, #0
 800119c:	2150      	movs	r1, #80	; 0x50
 800119e:	4846      	ldr	r0, [pc, #280]	; (80012b8 <MX_GPIO_Init+0x1ac>)
 80011a0:	f003 f8f2 	bl	8004388 <HAL_GPIO_WritePin>
    GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2104      	movs	r1, #4
 80011a8:	4844      	ldr	r0, [pc, #272]	; (80012bc <MX_GPIO_Init+0x1b0>)
 80011aa:	f003 f8ed 	bl	8004388 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin,
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4842      	ldr	r0, [pc, #264]	; (80012c0 <MX_GPIO_Init+0x1b4>)
 80011b6:	f003 f8e7 	bl	8004388 <HAL_GPIO_WritePin>
    GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	4841      	ldr	r0, [pc, #260]	; (80012c4 <MX_GPIO_Init+0x1b8>)
 80011c0:	f003 f8e2 	bl	8004388 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
    GPIO_InitStruct.Pin = PCF8553_CE_Pin | PCF8553_RESET_Pin;
 80011c4:	2350      	movs	r3, #80	; 0x50
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4837      	ldr	r0, [pc, #220]	; (80012b8 <MX_GPIO_Init+0x1ac>)
 80011dc:	f002 fefc 	bl	8003fd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <MX_GPIO_Init+0x1bc>)
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4833      	ldr	r0, [pc, #204]	; (80012c4 <MX_GPIO_Init+0x1b8>)
 80011f6:	f002 feef 	bl	8003fd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : led_red_Pin */
    GPIO_InitStruct.Pin = led_red_Pin;
 80011fa:	2304      	movs	r3, #4
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <MX_GPIO_Init+0x1b0>)
 8001212:	f002 fee1 	bl	8003fd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
    GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 8001216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4824      	ldr	r0, [pc, #144]	; (80012c0 <MX_GPIO_Init+0x1b4>)
 8001230:	f002 fed2 	bl	8003fd8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001234:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0x1bc>)
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <MX_GPIO_Init+0x1b4>)
 800124a:	f002 fec5 	bl	8003fd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : led_blue_Pin */
    GPIO_InitStruct.Pin = led_blue_Pin;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	; (80012c4 <MX_GPIO_Init+0x1b8>)
 8001266:	f002 feb7 	bl	8003fd8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	2015      	movs	r0, #21
 8001270:	f002 fe7c 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001274:	2015      	movs	r0, #21
 8001276:	f002 fe93 	bl	8003fa0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2105      	movs	r1, #5
 800127e:	2016      	movs	r0, #22
 8001280:	f002 fe74 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001284:	2016      	movs	r0, #22
 8001286:	f002 fe8b 	bl	8003fa0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	2017      	movs	r0, #23
 8001290:	f002 fe6c 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001294:	2017      	movs	r0, #23
 8001296:	f002 fe83 	bl	8003fa0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2018      	movs	r0, #24
 80012a0:	f002 fe64 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80012a4:	2018      	movs	r0, #24
 80012a6:	f002 fe7b 	bl	8003fa0 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	46020c00 	.word	0x46020c00
 80012b8:	42020000 	.word	0x42020000
 80012bc:	42021800 	.word	0x42021800
 80012c0:	42020800 	.word	0x42020800
 80012c4:	42020400 	.word	0x42020400
 80012c8:	10110000 	.word	0x10110000

080012cc <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f008 f9c9 	bl	800966c <HAL_RTCEx_DeactivateWakeUpTimer>

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
     */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80012f6:	f000 fb4f 	bl	8001998 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40001000 	.word	0x40001000

08001308 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_MspInit+0x30>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x30>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x30>)
 800132c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8001338:	f003 fd00 	bl	8004d3c <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	46020c00 	.word	0x46020c00

08001348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0b6      	sub	sp, #216	; 0xd8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	22c8      	movs	r2, #200	; 0xc8
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f013 fd51 	bl	8014e00 <memset>
  if(hadc->Instance==ADC1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x70>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d122      	bne.n	80013ae <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001368:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4618      	mov	r0, r3
 8001382:	f005 f8a5 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800138c:	f7ff ffbc 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_ADC_MspInit+0x74>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_ADC_MspInit+0x74>)
 8001398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_ADC_MspInit+0x74>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37d8      	adds	r7, #216	; 0xd8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	42028000 	.word	0x42028000
 80013bc:	46020c00 	.word	0x46020c00

080013c0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0b6      	sub	sp, #216	; 0xd8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	22c8      	movs	r2, #200	; 0xc8
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f013 fd15 	bl	8014e00 <memset>
  if(hlptim->Instance==LPTIM1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_LPTIM_MspInit+0x80>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d12a      	bne.n	8001436 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80013ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f869 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001404:	f7ff ff80 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_LPTIM_MspInit+0x84>)
 800140a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_LPTIM_MspInit+0x84>)
 8001410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001414:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_LPTIM_MspInit+0x84>)
 800141a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800141e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2043      	movs	r0, #67	; 0x43
 800142c:	f002 fd9e 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001430:	2043      	movs	r0, #67	; 0x43
 8001432:	f002 fdb5 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	37d8      	adds	r7, #216	; 0xd8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	46004400 	.word	0x46004400
 8001444:	46020c00 	.word	0x46020c00

08001448 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0b6      	sub	sp, #216	; 0xd8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	22c8      	movs	r2, #200	; 0xc8
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f013 fcd1 	bl	8014e00 <memset>
  if(hrtc->Instance==RTC)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_RTC_MspInit+0x90>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d132      	bne.n	80014ce <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001468:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4618      	mov	r0, r3
 8001482:	f005 f825 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800148c:	f7ff ff3c 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RTC_MspInit+0x94>)
 8001492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_RTC_MspInit+0x94>)
 8001498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_RTC_MspInit+0x94>)
 80014a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_RTC_MspInit+0x94>)
 80014a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ac:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RTC_MspInit+0x94>)
 80014b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2002      	movs	r0, #2
 80014c4:	f002 fd52 	bl	8003f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 fd69 	bl	8003fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	37d8      	adds	r7, #216	; 0xd8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	46007800 	.word	0x46007800
 80014dc:	46020c00 	.word	0x46020c00

080014e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0bc      	sub	sp, #240	; 0xf0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	22c8      	movs	r2, #200	; 0xc8
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f013 fc7d 	bl	8014e00 <memset>
  if(hspi->Instance==SPI1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_SPI_MspInit+0xc8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d146      	bne.n	800159e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001510:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800151c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f004 ffd1 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001534:	f7ff fee8 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 800153a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 8001540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001544:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 800154a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800154e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001574:	2382      	movs	r3, #130	; 0x82
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_SPI_MspInit+0xd0>)
 800159a:	f002 fd1d 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	37f0      	adds	r7, #240	; 0xf0
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40013000 	.word	0x40013000
 80015ac:	46020c00 	.word	0x46020c00
 80015b0:	42020000 	.word	0x42020000

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0bc      	sub	sp, #240	; 0xf0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	22c8      	movs	r2, #200	; 0xc8
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f013 fc13 	bl	8014e00 <memset>
  if(huart->Instance==USART2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a26      	ldr	r2, [pc, #152]	; (8001678 <HAL_UART_MspInit+0xc4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d144      	bne.n	800166e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e4:	f04f 0202 	mov.w	r2, #2
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80015f0:	2304      	movs	r3, #4
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 ff69 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001604:	f7ff fe80 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_UART_MspInit+0xc8>)
 800160a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_UART_MspInit+0xc8>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0xc8>)
 800161a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0xc8>)
 8001628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_UART_MspInit+0xc8>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0xc8>)
 8001638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001644:	230c      	movs	r3, #12
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165c:	2307      	movs	r3, #7
 800165e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0xcc>)
 800166a:	f002 fcb5 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	37f0      	adds	r7, #240	; 0xf0
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	46020c00 	.word	0x46020c00
 8001680:	42020000 	.word	0x42020000

08001684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_InitTick+0xcc>)
 8001696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_InitTick+0xcc>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_InitTick+0xcc>)
 80016a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b2:	f107 0210 	add.w	r2, r7, #16
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fe49 	bl	8006354 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016c2:	f004 fe0b 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 80016c6:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_InitTick+0xd0>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	3b01      	subs	r3, #1
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_InitTick+0xd4>)
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_InitTick+0xd8>)
 80016da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_InitTick+0xd4>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_InitTick+0xd4>)
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_InitTick+0xd4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_InitTick+0xd4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016f6:	4818      	ldr	r0, [pc, #96]	; (8001758 <HAL_InitTick+0xd4>)
 80016f8:	f008 fcb6 	bl	800a068 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001706:	2b00      	cmp	r3, #0
 8001708:	d118      	bne.n	800173c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <HAL_InitTick+0xd4>)
 800170c:	f008 fd0e 	bl	800a12c <HAL_TIM_Base_Start_IT>
 8001710:	4603      	mov	r3, r0
 8001712:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d808      	bhi.n	8001736 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	2031      	movs	r0, #49	; 0x31
 800172a:	f002 fc1f 	bl	8003f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_InitTick+0xdc>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e002      	b.n	800173c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800173c:	2031      	movs	r0, #49	; 0x31
 800173e:	f002 fc2f 	bl	8003fa0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001746:	4618      	mov	r0, r3
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	46020c00 	.word	0x46020c00
 8001754:	431bde83 	.word	0x431bde83
 8001758:	200015f8 	.word	0x200015f8
 800175c:	40001000 	.word	0x40001000
 8001760:	20000004 	.word	0x20000004

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <RTC_IRQHandler+0x10>)
 8001796:	f007 ffc1 	bl	800971c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200014a4 	.word	0x200014a4

080017a4 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80017a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ac:	f002 fe04 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80017b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017bc:	f002 fdfc 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80017c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017cc:	f002 fdf4 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017dc:	f002 fdec 	bl	80043b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM6_IRQHandler+0x10>)
 80017ea:	f008 fd3f 	bl	800a26c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200015f8 	.word	0x200015f8

080017f8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <LPTIM1_IRQHandler+0x10>)
 80017fe:	f002 ff71 	bl	80046e4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20001454 	.word	0x20001454

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f013 fab6 	bl	8014dac <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200c0000 	.word	0x200c0000
 800186c:	00000400 	.word	0x00000400
 8001870:	20001644 	.word	0x20001644
 8001874:	20001e68 	.word	0x20001e68

08001878 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <SystemInit+0x68>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <SystemInit+0x68>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <SystemInit+0x6c>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <SystemInit+0x6c>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <SystemInit+0x6c>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <SystemInit+0x6c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <SystemInit+0x6c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <SystemInit+0x6c>)
 80018aa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018ae:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <SystemInit+0x6c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <SystemInit+0x6c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <SystemInit+0x6c>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <SystemInit+0x6c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SystemInit+0x68>)
 80018ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018d2:	609a      	str	r2, [r3, #8]
  #endif
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	46020c00 	.word	0x46020c00

080018e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ec:	f7ff ffc4 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018f2:	e003      	b.n	80018fc <LoopCopyDataInit>

080018f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018fa:	3104      	adds	r1, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001900:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001902:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001904:	d3f6      	bcc.n	80018f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001908:	e002      	b.n	8001910 <LoopFillZerobss>

0800190a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800190a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800190c:	f842 3b04 	str.w	r3, [r2], #4

08001910 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <LoopForever+0x16>)
	cmp	r2, r3
 8001912:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001914:	d3f9      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f013 fa4f 	bl	8014db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191a:	f7ff f929 	bl	8000b70 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001920:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001924:	08015d94 	.word	0x08015d94
	ldr	r0, =_sdata
 8001928:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800192c:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8001930:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001934:	20001e61 	.word	0x20001e61

08001938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_IRQHandler>
	...

0800193c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_Init+0x4c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_Init+0x4c>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f002 fb02 	bl	8003f56 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001952:	f004 fba1 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8001956:	4602      	mov	r2, r0
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_Init+0x50>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	490b      	ldr	r1, [pc, #44]	; (8001990 <HAL_Init+0x54>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x58>)
 800196a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196c:	200f      	movs	r0, #15
 800196e:	f7ff fe89 	bl	8001684 <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e002      	b.n	8001982 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fcca 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000
 800198c:	46020c00 	.word	0x46020c00
 8001990:	08015b1c 	.word	0x08015b1c
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20001648 	.word	0x20001648

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20001648 	.word	0x20001648

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_GetREVID+0x18>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	b29b      	uxth	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e0044000 	.word	0xe0044000

08001a3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LL_ADC_SetResolution+0x3c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d104      	bne.n	8001ac4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f023 020c 	bic.w	r2, r3, #12
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	46021000 	.word	0x46021000

08001ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3360      	adds	r3, #96	; 0x60
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3360      	adds	r3, #96	; 0x60
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3360      	adds	r3, #96	; 0x60
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	2a00      	cmp	r2, #0
 8001c1e:	d002      	beq.n	8001c26 <LL_ADC_SetGainCompensation+0x32>
 8001c20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c24:	e000      	b.n	8001c28 <LL_ADC_SetGainCompensation+0x34>
 8001c26:	2200      	movs	r2, #0
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2107      	movs	r1, #7
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d020      	beq.n	8001cf6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3330      	adds	r3, #48	; 0x30
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	4413      	add	r3, r2
 8001cc6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	211f      	movs	r1, #31
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 011f 	and.w	r1, r3, #31
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001cf4:	e02b      	b.n	8001d4e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	210f      	movs	r1, #15
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	e010      	b.n	8001d40 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e003      	b.n	8001d40 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	f001 011f 	and.w	r1, r1, #31
 8001d46:	408b      	lsls	r3, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	46021000 	.word	0x46021000

08001d60 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	e015      	b.n	8001db0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
  return result;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2201      	movs	r2, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d042      	beq.n	8001e92 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <LL_ADC_SetChannelSamplingTime+0x28>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	f003 021f 	and.w	r2, r3, #31
 8001e1e:	e011      	b.n	8001e44 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  return result;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3314      	adds	r3, #20
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0e5b      	lsrs	r3, r3, #25
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2107      	movs	r1, #7
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001e90:	e00e      	b.n	8001eb0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	0219      	lsls	r1, r3, #8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	615a      	str	r2, [r3, #20]
}
 8001eb0:	bf00      	nop
 8001eb2:	372c      	adds	r7, #44	; 0x2c
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	46021000 	.word	0x46021000

08001ec0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0318 	and.w	r3, r3, #24
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ee4:	40d9      	lsrs	r1, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	400b      	ands	r3, r1
 8001eea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	000fffff 	.word	0x000fffff

08001f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6093      	str	r3, [r2, #8]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe0:	f043 0202 	orr.w	r2, r3, #2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <LL_ADC_IsEnabled+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_ADC_IsEnabled+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsDisableOngoing+0x18>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsDisableOngoing+0x1a>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	f043 0204 	orr.w	r2, r3, #4
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	f043 0210 	orr.w	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e2b3      	b.n	800268c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <HAL_ADC_Init+0x25c>)
 8002132:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff f903 	bl	8001348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fee9 	bl	8001f2c <LL_ADC_IsDeepPowerDownEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fecf 	bl	8001f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff04 	bl	8001f7c <LL_ADC_IsInternalRegulatorEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fee8 	bl	8001f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002184:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_ADC_Init+0x260>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	4a77      	ldr	r2, [pc, #476]	; (8002368 <HAL_ADC_Init+0x264>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fee6 	bl	8001f7c <LL_ADC_IsInternalRegulatorEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff59 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 80021de:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8244 	bne.w	8002676 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8240 	bne.w	8002676 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fef2 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d140      	bne.n	8002298 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a51      	ldr	r2, [pc, #324]	; (8002360 <HAL_ADC_Init+0x25c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d028      	beq.n	8002272 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_ADC_Init+0x268>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d109      	bne.n	800223e <HAL_ADC_Init+0x13a>
 800222a:	4850      	ldr	r0, [pc, #320]	; (800236c <HAL_ADC_Init+0x268>)
 800222c:	f7ff fee2 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e008      	b.n	8002250 <HAL_ADC_Init+0x14c>
 800223e:	4848      	ldr	r0, [pc, #288]	; (8002360 <HAL_ADC_Init+0x25c>)
 8002240:	f7ff fed8 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d021      	beq.n	8002298 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a44      	ldr	r2, [pc, #272]	; (800236c <HAL_ADC_Init+0x268>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Init+0x15e>
 800225e:	4a44      	ldr	r2, [pc, #272]	; (8002370 <HAL_ADC_Init+0x26c>)
 8002260:	e000      	b.n	8002264 <HAL_ADC_Init+0x160>
 8002262:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_ADC_Init+0x270>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f7ff fbe6 	bl	8001a3c <LL_ADC_SetCommonClock>
 8002270:	e012      	b.n	8002298 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff fc11 	bl	8001aa4 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <HAL_ADC_Init+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002292:	4938      	ldr	r1, [pc, #224]	; (8002374 <HAL_ADC_Init+0x270>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a30      	ldr	r2, [pc, #192]	; (8002360 <HAL_ADC_Init+0x25c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d010      	beq.n	80022c4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022ae:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80022b4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022bc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80022be:	4313      	orrs	r3, r2
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e030      	b.n	8002326 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7f1b      	ldrb	r3, [r3, #28]
 80022c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022d2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_Init+0x1de>
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_Init+0x1e0>
 80022e2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022e4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80022ea:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da04      	bge.n	80022fe <HAL_ADC_Init+0x1fa>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022fc:	e001      	b.n	8002302 <HAL_ADC_Init+0x1fe>
 80022fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002302:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4918      	ldr	r1, [pc, #96]	; (800236c <HAL_ADC_Init+0x268>)
 800230a:	428b      	cmp	r3, r1
 800230c:	d103      	bne.n	8002316 <HAL_ADC_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002314:	e003      	b.n	800231e <HAL_ADC_Init+0x21a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800231e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	4313      	orrs	r3, r2
 8002324:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d12f      	bne.n	8002390 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_ADC_Init+0x25c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	3b01      	subs	r3, #1
 8002340:	045b      	lsls	r3, r3, #17
 8002342:	6a3a      	ldr	r2, [r7, #32]
 8002344:	4313      	orrs	r3, r2
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	e022      	b.n	8002390 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d111      	bne.n	8002378 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	e018      	b.n	8002390 <HAL_ADC_Init+0x28c>
 800235e:	bf00      	nop
 8002360:	46021000 	.word	0x46021000
 8002364:	20000000 	.word	0x20000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	42028000 	.word	0x42028000
 8002370:	42028308 	.word	0x42028308
 8002374:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a92      	ldr	r2, [pc, #584]	; (80025e0 <HAL_ADC_Init+0x4dc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d018      	beq.n	80023cc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4313      	orrs	r3, r2
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_ADC_Init+0x4e0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	430b      	orrs	r3, r1
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e031      	b.n	8002430 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	4313      	orrs	r3, r2
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <HAL_ADC_Init+0x4e4>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	6a39      	ldr	r1, [r7, #32]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6a      	ldr	r2, [pc, #424]	; (80025e0 <HAL_ADC_Init+0x4dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f000 8093 	beq.w	8002562 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe25 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002446:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fe46 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 8002452:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d161      	bne.n	800251e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d15e      	bne.n	800251e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4960      	ldr	r1, [pc, #384]	; (80025ec <HAL_ADC_Init+0x4e8>)
 800246c:	428b      	cmp	r3, r1
 800246e:	d102      	bne.n	8002476 <HAL_ADC_Init+0x372>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	e002      	b.n	800247c <HAL_ADC_Init+0x378>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247c:	4313      	orrs	r3, r2
 800247e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	6a39      	ldr	r1, [r7, #32]
 8002494:	430b      	orrs	r3, r1
 8002496:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7ff fba2 	bl	8001bf4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d11e      	bne.n	80024f8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_ADC_Init+0x4ec>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80024ce:	0411      	lsls	r1, r2, #16
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024e6:	0892      	lsrs	r2, r2, #2
 80024e8:	430a      	orrs	r2, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	e007      	b.n	8002508 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10c      	bne.n	8002540 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f023 010f 	bic.w	r1, r3, #15
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
 800253e:	e007      	b.n	8002550 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 020f 	bic.w	r2, r2, #15
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	f023 0303 	bic.w	r3, r3, #3
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002560:	e092      	b.n	8002688 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002568:	2b01      	cmp	r3, #1
 800256a:	d111      	bne.n	8002590 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002574:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800257a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002580:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	4313      	orrs	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_ADC_Init+0x4f0>)
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	f7ff fb43 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	461a      	mov	r2, r3
 80025be:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80025c2:	f7ff fb3a 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d114      	bne.n	80025f8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f062 020f 	orn	r2, r2, #15
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
 80025de:	e024      	b.n	800262a <HAL_ADC_Init+0x526>
 80025e0:	46021000 	.word	0x46021000
 80025e4:	fff0c013 	.word	0xfff0c013
 80025e8:	ffde800d 	.word	0xffde800d
 80025ec:	42028000 	.word	0x42028000
 80025f0:	fc00f81e 	.word	0xfc00f81e
 80025f4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002600:	d113      	bne.n	800262a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	f003 031c 	and.w	r3, r3, #28
 8002614:	f06f 020f 	mvn.w	r2, #15
 8002618:	fa02 f103 	lsl.w	r1, r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_ADC_Init+0x590>)
 8002632:	4013      	ands	r3, r2
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	429a      	cmp	r2, r3
 8002638:	d10b      	bne.n	8002652 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002644:	f023 0303 	bic.w	r3, r3, #3
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002650:	e01a      	b.n	8002688 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002656:	f023 0312 	bic.w	r3, r3, #18
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002674:	e008      	b.n	8002688 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800268c:	4618      	mov	r0, r3
 800268e:	3728      	adds	r7, #40	; 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	833ffff3 	.word	0x833ffff3

08002698 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fcf3 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15d      	bne.n	800276c <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Start+0x26>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e059      	b.n	8002772 <HAL_ADC_Start+0xda>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f001 f916 	bl	80038f8 <ADC_Enable>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d145      	bne.n	8002762 <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <HAL_ADC_Start+0xe4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d011      	beq.n	8002718 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	d106      	bne.n	8002710 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002706:	f023 0206 	bic.w	r2, r3, #6
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	67da      	str	r2, [r3, #124]	; 0x7c
 800270e:	e006      	b.n	800271e <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	67da      	str	r2, [r3, #124]	; 0x7c
 8002716:	e002      	b.n	800271e <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	221c      	movs	r2, #28
 8002724:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_ADC_Start+0xe4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00e      	beq.n	8002756 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc70 	bl	8002040 <LL_ADC_REG_StartConversion>
 8002760:	e006      	b.n	8002770 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800276a:	e001      	b.n	8002770 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800276c:	2302      	movs	r3, #2
 800276e:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	46021000 	.word	0x46021000

08002780 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Stop+0x16>
 8002792:	2302      	movs	r3, #2
 8002794:	e023      	b.n	80027de <HAL_ADC_Stop+0x5e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800279e:	2103      	movs	r1, #3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 ffed 	bl	8003780 <ADC_ConversionStop>
 80027a6:	4603      	mov	r3, r0
 80027a8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f001 f911 	bl	80039d8 <ADC_Disable>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d102      	bne.n	8002800 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80027fa:	2308      	movs	r3, #8
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e027      	b.n	8002850 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_ADC_PollForConversion+0x1c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d011      	beq.n	800282e <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0be      	b.n	80029a6 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002828:	2304      	movs	r3, #4
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e010      	b.n	8002850 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0ac      	b.n	80029a6 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 800284c:	2304      	movs	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002850:	f7ff f8b6 	bl	80019c0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002856:	e021      	b.n	800289c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d01d      	beq.n	800289c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002860:	f7ff f8ae 	bl	80019c0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <HAL_ADC_PollForConversion+0x8e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d112      	bne.n	800289c <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e084      	b.n	80029a6 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0d6      	beq.n	8002858 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f9dc 	bl	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06e      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d169      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_ADC_PollForConversion+0x1c8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02e      	beq.n	8002938 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d111      	bne.n	800290c <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b08      	cmp	r3, #8
 8002918:	d104      	bne.n	8002924 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2208      	movs	r2, #8
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e03f      	b.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d13a      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	220c      	movs	r2, #12
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e035      	b.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d126      	bne.n	8002994 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fba0 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d112      	bne.n	800297c <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 020c 	bic.w	r2, r2, #12
 8002964:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	679a      	str	r2, [r3, #120]	; 0x78
 800297a:	e00b      	b.n	8002994 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7f1b      	ldrb	r3, [r3, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	220c      	movs	r2, #12
 80029a2:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	46021000 	.word	0x46021000

080029b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0bc      	sub	sp, #240	; 0xf0
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4aa8      	ldr	r2, [pc, #672]	; (8002c8c <HAL_ADC_ConfigChannel+0x2bc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d103      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x36>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f000 beb5 	b.w	8003770 <HAL_ADC_ConfigChannel+0xda0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb3c 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8695 	bne.w	800374a <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a99      	ldr	r2, [pc, #612]	; (8002c8c <HAL_ADC_ConfigChannel+0x2bc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	f000 83ea 	beq.w	8003200 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x7a>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2201      	movs	r2, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	e01d      	b.n	8002a86 <HAL_ADC_ConfigChannel+0xb6>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2201      	movs	r2, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	69d1      	ldr	r1, [r2, #28]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	430b      	orrs	r3, r1
 8002a92:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f7ff f8fd 	bl	8001ca0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff faf0 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fb10 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 81ed 	bne.w	8002ea6 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 81e8 	bne.w	8002ea6 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7ff f988 	bl	8001df8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d046      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b1a:	f7fe ffe3 	bl	8001ae4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f7ff f811 	bl	8001b52 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	7e9b      	ldrb	r3, [r3, #26]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d11e      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x17e>
 8002b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4c:	e000      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x180>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff f834 	bl	8001bbe <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x19c>
 8002b66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b6a:	e000      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x19e>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f7ff f80a 	bl	8001b88 <LL_ADC_SetOffsetSignedSaturation>
 8002b74:	e197      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7ff f81c 	bl	8001bbe <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fe fff9 	bl	8001b88 <LL_ADC_SetOffsetSignedSaturation>
 8002b96:	e186      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe ffc1 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe ffb6 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 021f 	and.w	r2, r3, #31
 8002bc2:	e01e      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x232>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe ffab 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x24a>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	e018      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x27c>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e004      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002c42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f7fe ff42 	bl	8001ae4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ff5d 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x2c0>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ff52 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	0e9b      	lsrs	r3, r3, #26
 8002c86:	f003 021f 	and.w	r2, r3, #31
 8002c8a:	e020      	b.n	8002cce <HAL_ADC_ConfigChannel+0x2fe>
 8002c8c:	46021000 	.word	0x46021000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe ff45 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x316>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	e018      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x348>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	e004      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2101      	movs	r1, #1
 8002d28:	f7fe fedc 	bl	8001ae4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fef7 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x388>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe feec 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	f003 021f 	and.w	r2, r3, #31
 8002d56:	e01e      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x3c6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fee1 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002d86:	2320      	movs	r3, #32
 8002d88:	e004      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x3de>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	e018      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x410>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e004      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2300      	movs	r3, #0
 8002dee:	2102      	movs	r1, #2
 8002df0:	f7fe fe78 	bl	8001ae4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2103      	movs	r1, #3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fe93 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x450>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2103      	movs	r1, #3
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fe88 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	f003 021f 	and.w	r2, r3, #31
 8002e1e:	e01a      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x486>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2103      	movs	r1, #3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fe7d 	bl	8001b26 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e004      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x49e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	e011      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x4c2>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d107      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	f7fe fe1f 	bl	8001ae4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f8a2 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8456 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f7fe fffb 	bl	8001ec0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed2:	f040 80d6 	bne.w	8003082 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x52a>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	bf94      	ite	ls
 8002ef2:	2301      	movls	r3, #1
 8002ef4:	2300      	movhi	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e019      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x55e>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04d      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x5fe>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x57e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4c:	e015      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x5aa>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x5ca>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	e017      	b.n	8002fca <HAL_ADC_ConfigChannel+0x5fa>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	e04e      	b.n	800306c <HAL_ADC_ConfigChannel+0x69c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x61a>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	069b      	lsls	r3, r3, #26
 8002fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe8:	e015      	b.n	8003016 <HAL_ADC_ConfigChannel+0x646>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8003006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x666>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	e017      	b.n	8003066 <HAL_ADC_ConfigChannel+0x696>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800306c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	461a      	mov	r2, r3
 800307a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800307e:	f7fe febb 	bl	8001df8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f280 836c 	bge.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a97      	ldr	r2, [pc, #604]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x6ca>
 8003096:	4b97      	ldr	r3, [pc, #604]	; (80032f4 <HAL_ADC_ConfigChannel+0x924>)
 8003098:	e000      	b.n	800309c <HAL_ADC_ConfigChannel+0x6cc>
 800309a:	4b97      	ldr	r3, [pc, #604]	; (80032f8 <HAL_ADC_ConfigChannel+0x928>)
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fcf3 	bl	8001a88 <LL_ADC_GetCommonPathInternalCh>
 80030a2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a91      	ldr	r2, [pc, #580]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d109      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x6f4>
 80030b0:	488f      	ldr	r0, [pc, #572]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 80030b2:	f7fe ff9f 	bl	8001ff4 <LL_ADC_IsEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e008      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x706>
 80030c4:	488d      	ldr	r0, [pc, #564]	; (80032fc <HAL_ADC_ConfigChannel+0x92c>)
 80030c6:	f7fe ff95 	bl	8001ff4 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8088 	beq.w	80031ec <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a87      	ldr	r2, [pc, #540]	; (8003300 <HAL_ADC_ConfigChannel+0x930>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d132      	bne.n	800314c <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d12c      	bne.n	800314c <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7e      	ldr	r2, [pc, #504]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d005      	beq.n	8003108 <HAL_ADC_ConfigChannel+0x738>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a7e      	ldr	r2, [pc, #504]	; (80032fc <HAL_ADC_ConfigChannel+0x92c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f040 832b 	bne.w	800375e <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a78      	ldr	r2, [pc, #480]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x746>
 8003112:	4a78      	ldr	r2, [pc, #480]	; (80032f4 <HAL_ADC_ConfigChannel+0x924>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_ConfigChannel+0x748>
 8003116:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_ADC_ConfigChannel+0x928>)
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f7fe fc9d 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003128:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_ADC_ConfigChannel+0x934>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	4a76      	ldr	r2, [pc, #472]	; (8003308 <HAL_ADC_ConfigChannel+0x938>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800313a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800313c:	e002      	b.n	8003144 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3b01      	subs	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f9      	bne.n	800313e <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800314a:	e308      	b.n	800375e <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6e      	ldr	r2, [pc, #440]	; (800330c <HAL_ADC_ConfigChannel+0x93c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d121      	bne.n	800319a <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11b      	bne.n	800319a <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a62      	ldr	r2, [pc, #392]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d005      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x7a8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a62      	ldr	r2, [pc, #392]	; (80032fc <HAL_ADC_ConfigChannel+0x92c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	f040 82f5 	bne.w	8003762 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7b6>
 8003182:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <HAL_ADC_ConfigChannel+0x924>)
 8003184:	e000      	b.n	8003188 <HAL_ADC_ConfigChannel+0x7b8>
 8003186:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_ADC_ConfigChannel+0x928>)
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7fe fc65 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003198:	e2e3      	b.n	8003762 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5c      	ldr	r2, [pc, #368]	; (8003310 <HAL_ADC_ConfigChannel+0x940>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f040 82df 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 82d8 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d005      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x7fa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_ADC_ConfigChannel+0x92c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	f040 82cd 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a48      	ldr	r2, [pc, #288]	; (80032f0 <HAL_ADC_ConfigChannel+0x920>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x808>
 80031d4:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_ADC_ConfigChannel+0x924>)
 80031d6:	e000      	b.n	80031da <HAL_ADC_ConfigChannel+0x80a>
 80031d8:	4a47      	ldr	r2, [pc, #284]	; (80032f8 <HAL_ADC_ConfigChannel+0x928>)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f7fe fc3c 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 80031ea:	e2bb      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80031fe:	e2b1      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003208:	f7fe fc0a 	bl	8001a20 <HAL_GetREVID>
 800320c:	4603      	mov	r3, r0
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003212:	d130      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <HAL_ADC_ConfigChannel+0x944>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d103      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_ADC_ConfigChannel+0x948>)
 8003220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003224:	e027      	b.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_ADC_ConfigChannel+0x94c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_ADC_ConfigChannel+0x950>)
 8003232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003236:	e01e      	b.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_ADC_ConfigChannel+0x954>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d103      	bne.n	800324a <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_ADC_ConfigChannel+0x958>)
 8003244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003248:	e015      	b.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a37      	ldr	r2, [pc, #220]	; (800332c <HAL_ADC_ConfigChannel+0x95c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <HAL_ADC_ConfigChannel+0x960>)
 8003256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800325a:	e00c      	b.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_ADC_ConfigChannel+0x964>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d103      	bne.n	800326e <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_ADC_ConfigChannel+0x95c>)
 8003268:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800326c:	e003      	b.n	8003276 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	f000 81a2 	beq.w	80035c4 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003288:	d004      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <HAL_ADC_ConfigChannel+0x968>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fd5f 	bl	8001d60 <LL_ADC_REG_SetSequencerChAdd>
 80032a2:	e0c1      	b.n	8003428 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	210f      	movs	r1, #15
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x904>
 80032c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032cc:	0e9b      	lsrs	r3, r3, #26
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	e037      	b.n	8003344 <HAL_ADC_ConfigChannel+0x974>
 80032d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d127      	bne.n	800333c <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e029      	b.n	8003344 <HAL_ADC_ConfigChannel+0x974>
 80032f0:	42028000 	.word	0x42028000
 80032f4:	42028308 	.word	0x42028308
 80032f8:	46021308 	.word	0x46021308
 80032fc:	46021000 	.word	0x46021000
 8003300:	ce080000 	.word	0xce080000
 8003304:	20000000 	.word	0x20000000
 8003308:	053e2d63 	.word	0x053e2d63
 800330c:	ca040000 	.word	0xca040000
 8003310:	80000001 	.word	0x80000001
 8003314:	b6002000 	.word	0xb6002000
 8003318:	da400000 	.word	0xda400000
 800331c:	ba004000 	.word	0xba004000
 8003320:	de800000 	.word	0xde800000
 8003324:	b2001000 	.word	0xb2001000
 8003328:	81000001 	.word	0x81000001
 800332c:	d6200000 	.word	0xd6200000
 8003330:	d2100000 	.word	0xd2100000
 8003334:	d7200000 	.word	0xd7200000
 8003338:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	6849      	ldr	r1, [r1, #4]
 8003348:	f001 011f 	and.w	r1, r1, #31
 800334c:	408b      	lsls	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	429a      	cmp	r2, r3
 8003364:	d860      	bhi.n	8003428 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003366:	f7fe fb5b 	bl	8001a20 <HAL_GetREVID>
 800336a:	4603      	mov	r3, r0
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003370:	d851      	bhi.n	8003416 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003376:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x9c4>
 800337e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2b13      	cmp	r3, #19
 800338a:	bf8c      	ite	hi
 800338c:	2301      	movhi	r3, #1
 800338e:	2300      	movls	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e016      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x9f2>
 8003394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	61bb      	str	r3, [r7, #24]
  return result;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b13      	cmp	r3, #19
 80033ba:	bf8c      	ite	hi
 80033bc:	2301      	movhi	r3, #1
 80033be:	2300      	movls	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d027      	beq.n	8003416 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80033c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0xa16>
 80033d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	3b09      	subs	r3, #9
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	e015      	b.n	8003412 <HAL_ADC_ConfigChannel+0xa42>
 80033e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  return result;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e003      	b.n	800340a <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3b09      	subs	r3, #9
 800340c:	2201      	movs	r2, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003422:	4619      	mov	r1, r3
 8003424:	f7fe fc3c 	bl	8001ca0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	461a      	mov	r2, r3
 8003432:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003436:	f7fe fcdf 	bl	8001df8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f280 8190 	bge.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a97      	ldr	r2, [pc, #604]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0xa82>
 800344e:	4b97      	ldr	r3, [pc, #604]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003450:	e000      	b.n	8003454 <HAL_ADC_ConfigChannel+0xa84>
 8003452:	4b97      	ldr	r3, [pc, #604]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fb17 	bl	8001a88 <LL_ADC_GetCommonPathInternalCh>
 800345a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a94      	ldr	r2, [pc, #592]	; (80036b4 <HAL_ADC_ConfigChannel+0xce4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d126      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d120      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a8b      	ldr	r2, [pc, #556]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0xab2>
 800347e:	4a8b      	ldr	r2, [pc, #556]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003480:	e000      	b.n	8003484 <HAL_ADC_ConfigChannel+0xab4>
 8003482:	4a8b      	ldr	r2, [pc, #556]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fe fae7 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003494:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_ADC_ConfigChannel+0xce8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	4a88      	ldr	r2, [pc, #544]	; (80036bc <HAL_ADC_ConfigChannel+0xcec>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034a6:	e002      	b.n	80034ae <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f9      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80034b4:	e067      	b.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a81      	ldr	r2, [pc, #516]	; (80036c0 <HAL_ADC_ConfigChannel+0xcf0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d116      	bne.n	80034ee <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d110      	bne.n	80034ee <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a75      	ldr	r2, [pc, #468]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0xb0a>
 80034d6:	4a75      	ldr	r2, [pc, #468]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 80034d8:	e000      	b.n	80034dc <HAL_ADC_ConfigChannel+0xb0c>
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fe fabb 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 80034ec:	e04b      	b.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <HAL_ADC_ConfigChannel+0xcf4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d116      	bne.n	8003526 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d110      	bne.n	8003526 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0xb42>
 800350e:	4a67      	ldr	r2, [pc, #412]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003510:	e000      	b.n	8003514 <HAL_ADC_ConfigChannel+0xb44>
 8003512:	4a67      	ldr	r2, [pc, #412]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe fa9f 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 8003524:	e02f      	b.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a67      	ldr	r2, [pc, #412]	; (80036c8 <HAL_ADC_ConfigChannel+0xcf8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d12a      	bne.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d124      	bne.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a62      	ldr	r2, [pc, #392]	; (80036cc <HAL_ADC_ConfigChannel+0xcfc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d11f      	bne.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0xb84>
 8003550:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003552:	e000      	b.n	8003556 <HAL_ADC_ConfigChannel+0xb86>
 8003554:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fe fa7e 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003566:	f7fe fa5b 	bl	8001a20 <HAL_GetREVID>
 800356a:	4603      	mov	r3, r0
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d809      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003586:	f7fe fa4b 	bl	8001a20 <HAL_GetREVID>
 800358a:	4603      	mov	r3, r0
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	f040 80e8 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4d      	ldr	r2, [pc, #308]	; (80036d0 <HAL_ADC_ConfigChannel+0xd00>)
 800359a:	4293      	cmp	r3, r2
 800359c:	f040 80e2 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 80db 	bne.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80035c2:	e0cf      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035cc:	d004      	beq.n	80035d8 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80035d2:	4a40      	ldr	r2, [pc, #256]	; (80036d4 <HAL_ADC_ConfigChannel+0xd04>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d106      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe fbf0 	bl	8001dc6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f280 80ba 	bge.w	8003764 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0xc2e>
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 80035fc:	e000      	b.n	8003600 <HAL_ADC_ConfigChannel+0xc30>
 80035fe:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe fa41 	bl	8001a88 <LL_ADC_GetCommonPathInternalCh>
 8003606:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <HAL_ADC_ConfigChannel+0xd08>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d110      	bne.n	8003636 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0xc52>
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003620:	e000      	b.n	8003624 <HAL_ADC_ConfigChannel+0xc54>
 8003622:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003628:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fe fa17 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 8003634:	e06d      	b.n	8003712 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a28      	ldr	r2, [pc, #160]	; (80036dc <HAL_ADC_ConfigChannel+0xd0c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d110      	bne.n	8003662 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0xc7e>
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 800364c:	e000      	b.n	8003650 <HAL_ADC_ConfigChannel+0xc80>
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe fa01 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 8003660:	e057      	b.n	8003712 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_ADC_ConfigChannel+0xcf4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d110      	bne.n	800368e <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0xcaa>
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 8003678:	e000      	b.n	800367c <HAL_ADC_ConfigChannel+0xcac>
 800367a:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <HAL_ADC_ConfigChannel+0xce0>)
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f7fe f9eb 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
 800368c:	e041      	b.n	8003712 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_ADC_ConfigChannel+0xcf8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d13c      	bne.n	8003712 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a02      	ldr	r2, [pc, #8]	; (80036a8 <HAL_ADC_ConfigChannel+0xcd8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d11e      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0xd10>
 80036a2:	4a02      	ldr	r2, [pc, #8]	; (80036ac <HAL_ADC_ConfigChannel+0xcdc>)
 80036a4:	e01d      	b.n	80036e2 <HAL_ADC_ConfigChannel+0xd12>
 80036a6:	bf00      	nop
 80036a8:	42028000 	.word	0x42028000
 80036ac:	42028308 	.word	0x42028308
 80036b0:	46021308 	.word	0x46021308
 80036b4:	b6002000 	.word	0xb6002000
 80036b8:	20000000 	.word	0x20000000
 80036bc:	053e2d63 	.word	0x053e2d63
 80036c0:	ba004000 	.word	0xba004000
 80036c4:	80000001 	.word	0x80000001
 80036c8:	b2001000 	.word	0xb2001000
 80036cc:	46021000 	.word	0x46021000
 80036d0:	d7200000 	.word	0xd7200000
 80036d4:	80000010 	.word	0x80000010
 80036d8:	ce080000 	.word	0xce080000
 80036dc:	ca040000 	.word	0xca040000
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_ADC_ConfigChannel+0xda8>)
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f7fe f9b8 	bl	8001a62 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80036f2:	f7fe f995 	bl	8001a20 <HAL_GetREVID>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d809      	bhi.n	8003712 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003712:	f7fe f985 	bl	8001a20 <HAL_GetREVID>
 8003716:	4603      	mov	r3, r0
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371c:	d122      	bne.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_ADC_ConfigChannel+0xdac>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d11d      	bne.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d117      	bne.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003748:	e00c      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800375c:	e002      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003762:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800376c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003770:	4618      	mov	r0, r3
 8003772:	37f0      	adds	r7, #240	; 0xf0
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	46021308 	.word	0x46021308
 800377c:	d7200000 	.word	0xd7200000

08003780 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fc7a 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 800379c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fc9b 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 80037a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <ADC_ConversionStop+0x38>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8099 	beq.w	80038ea <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02b      	beq.n	800381e <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d126      	bne.n	800381e <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7f1b      	ldrb	r3, [r3, #28]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d122      	bne.n	800381e <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80037d8:	2301      	movs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037dc:	e014      	b.n	8003808 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4a44      	ldr	r2, [pc, #272]	; (80038f4 <ADC_ConversionStop+0x174>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d90d      	bls.n	8003802 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e074      	b.n	80038ec <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d1e3      	bne.n	80037de <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d014      	beq.n	800384e <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fc31 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fbee 	bl	800201a <LL_ADC_IsDisableOngoing>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fc0d 	bl	8002068 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d014      	beq.n	800387e <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fc40 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fbd6 	bl	800201a <LL_ADC_IsDisableOngoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fc1c 	bl	80020b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d005      	beq.n	8003890 <ADC_ConversionStop+0x110>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d105      	bne.n	8003896 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800388a:	230c      	movs	r3, #12
 800388c:	617b      	str	r3, [r7, #20]
        break;
 800388e:	e005      	b.n	800389c <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003890:	2308      	movs	r3, #8
 8003892:	617b      	str	r3, [r7, #20]
        break;
 8003894:	e002      	b.n	800389c <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003896:	2304      	movs	r3, #4
 8003898:	617b      	str	r3, [r7, #20]
        break;
 800389a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800389c:	f7fe f890 	bl	80019c0 <HAL_GetTick>
 80038a0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80038a2:	e01b      	b.n	80038dc <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038a4:	f7fe f88c 	bl	80019c0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d914      	bls.n	80038dc <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1dc      	bne.n	80038a4 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	000cdbff 	.word	0x000cdbff

080038f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fb75 	bl	8001ff4 <LL_ADC_IsEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d15a      	bne.n	80039c6 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <ADC_Enable+0xd8>)
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e046      	b.n	80039c8 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fb2c 	bl	8001fa4 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <ADC_Enable+0x66>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <ADC_Enable+0xdc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d033      	beq.n	80039c6 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800395e:	f7fe f82f 	bl	80019c0 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003964:	e028      	b.n	80039b8 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fb42 	bl	8001ff4 <LL_ADC_IsEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fb12 	bl	8001fa4 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003980:	f7fe f81e 	bl	80019c0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d914      	bls.n	80039b8 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d00d      	beq.n	80039b8 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a0:	f043 0210 	orr.w	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e007      	b.n	80039c8 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d1cf      	bne.n	8003966 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	8000003f 	.word	0x8000003f
 80039d4:	46021000 	.word	0x46021000

080039d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fb18 	bl	800201a <LL_ADC_IsDisableOngoing>
 80039ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe faff 	bl	8001ff4 <LL_ADC_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d047      	beq.n	8003a8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d144      	bne.n	8003a8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030d 	and.w	r3, r3, #13
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10c      	bne.n	8003a2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fad9 	bl	8001fcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a22:	f7fd ffcd 	bl	80019c0 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a28:	e029      	b.n	8003a7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e023      	b.n	8003a8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a46:	f7fd ffbb 	bl	80019c0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d914      	bls.n	8003a7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e007      	b.n	8003a8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1dc      	bne.n	8003a46 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <LL_ADC_StartCalibration>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <LL_ADC_StartCalibration+0x4c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00c      	beq.n	8003ac4 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <LL_ADC_StartCalibration+0x50>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
}
 8003ac2:	e009      	b.n	8003ad8 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ad0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	46021000 	.word	0x46021000
 8003ae8:	7ffeffc0 	.word	0x7ffeffc0

08003aec <LL_ADC_IsCalibrationOnGoing>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADCEx_Calibration_Start+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e133      	b.n	8003d9a <HAL_ADCEx_Calibration_Start+0x286>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff ff4c 	bl	80039d8 <ADC_Disable>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8119 	bne.w	8003d82 <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b58:	f023 0302 	bic.w	r3, r3, #2
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a8e      	ldr	r2, [pc, #568]	; (8003da4 <HAL_ADCEx_Calibration_Start+0x290>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d150      	bne.n	8003c10 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0203 	bic.w	r2, r2, #3
 8003b94:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff73 	bl	8003a98 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb2:	e014      	b.n	8003bde <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4a7a      	ldr	r2, [pc, #488]	; (8003da8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d90d      	bls.n	8003bde <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc6:	f023 0312 	bic.w	r3, r3, #18
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0dd      	b.n	8003d9a <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff82 	bl	8003aec <LL_ADC_IsCalibrationOnGoing>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e2      	bne.n	8003bb4 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68d9      	ldr	r1, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0e:	e0af      	b.n	8003d70 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003c10:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_ADCEx_Calibration_Start+0x298>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_ADCEx_Calibration_Start+0x298>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f240 4255 	movw	r2, #1109	; 0x455
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d012      	beq.n	8003c54 <HAL_ADCEx_Calibration_Start+0x140>
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f240 4276 	movw	r2, #1142	; 0x476
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00d      	beq.n	8003c54 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	f240 4281 	movw	r2, #1153	; 0x481
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_ADCEx_Calibration_Start+0x138>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f240 4282 	movw	r2, #1154	; 0x482
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d16d      	bne.n	8003d28 <HAL_ADCEx_Calibration_Start+0x214>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c52:	d369      	bcc.n	8003d28 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fe4f 	bl	80038f8 <ADC_Enable>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 8083 	bne.w	8003d70 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003c7c:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c86:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ca6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fe94 	bl	80039d8 <ADC_Disable>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003cbc:	d109      	bne.n	8003cd2 <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ce8:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cea:	e014      	b.n	8003d16 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d90d      	bls.n	8003d16 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	f023 0312 	bic.w	r3, r3, #18
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e041      	b.n	8003d9a <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fee6 	bl	8003aec <LL_ADC_IsCalibrationOnGoing>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e2      	bne.n	8003cec <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003d26:	e023      	b.n	8003d70 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff feb2 	bl	8003a98 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d34:	e014      	b.n	8003d60 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d90d      	bls.n	8003d60 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d48:	f023 0312 	bic.w	r3, r3, #18
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e01c      	b.n	8003d9a <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fec1 	bl	8003aec <LL_ADC_IsCalibrationOnGoing>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e2      	bne.n	8003d36 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
 8003d80:	e005      	b.n	8003d8e <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	46021000 	.word	0x46021000
 8003da8:	01ba813f 	.word	0x01ba813f
 8003dac:	e0044000 	.word	0xe0044000
 8003db0:	7ffeffc0 	.word	0x7ffeffc0

08003db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60d3      	str	r3, [r2, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <__NVIC_GetPriorityGrouping+0x18>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	f003 0307 	and.w	r3, r3, #7
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	db0b      	blt.n	8003e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	f003 021f 	and.w	r2, r3, #31
 8003e30:	4907      	ldr	r1, [pc, #28]	; (8003e50 <__NVIC_EnableIRQ+0x38>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2001      	movs	r0, #1
 8003e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e100 	.word	0xe000e100

08003e54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	db12      	blt.n	8003e8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	f003 021f 	and.w	r2, r3, #31
 8003e6c:	490a      	ldr	r1, [pc, #40]	; (8003e98 <__NVIC_DisableIRQ+0x44>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2001      	movs	r0, #1
 8003e76:	fa00 f202 	lsl.w	r2, r0, r2
 8003e7a:	3320      	adds	r3, #32
 8003e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e80:	f3bf 8f4f 	dsb	sy
}
 8003e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e86:	f3bf 8f6f 	isb	sy
}
 8003e8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100

08003e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	db0a      	blt.n	8003ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	490c      	ldr	r1, [pc, #48]	; (8003ee8 <__NVIC_SetPriority+0x4c>)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	0112      	lsls	r2, r2, #4
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec4:	e00a      	b.n	8003edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4908      	ldr	r1, [pc, #32]	; (8003eec <__NVIC_SetPriority+0x50>)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	3b04      	subs	r3, #4
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	440b      	add	r3, r1
 8003eda:	761a      	strb	r2, [r3, #24]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f1c3 0307 	rsb	r3, r3, #7
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	bf28      	it	cs
 8003f0e:	2304      	movcs	r3, #4
 8003f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d902      	bls.n	8003f20 <NVIC_EncodePriority+0x30>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3b03      	subs	r3, #3
 8003f1e:	e000      	b.n	8003f22 <NVIC_EncodePriority+0x32>
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	f04f 32ff 	mov.w	r2, #4294967295
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	401a      	ands	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	43d9      	mvns	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	4313      	orrs	r3, r2
         );
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3724      	adds	r7, #36	; 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff28 	bl	8003db4 <__NVIC_SetPriorityGrouping>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7a:	f7ff ff3f 	bl	8003dfc <__NVIC_GetPriorityGrouping>
 8003f7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6978      	ldr	r0, [r7, #20]
 8003f86:	f7ff ffb3 	bl	8003ef0 <NVIC_EncodePriority>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff82 	bl	8003e9c <__NVIC_SetPriority>
}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ff32 	bl	8003e18 <__NVIC_EnableIRQ>
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff42 	bl	8003e54 <__NVIC_DisableIRQ>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003fea:	e1ba      	b.n	8004362 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81aa 	beq.w	800435c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a55      	ldr	r2, [pc, #340]	; (8004160 <HAL_GPIO_Init+0x188>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d15d      	bne.n	80040cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004016:	2201      	movs	r2, #1
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	4013      	ands	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0201 	and.w	r2, r3, #1
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004040:	4a48      	ldr	r2, [pc, #288]	; (8004164 <HAL_GPIO_Init+0x18c>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004048:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_GPIO_Init+0x18c>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	08da      	lsrs	r2, r3, #3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3208      	adds	r2, #8
 800405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004062:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	4013      	ands	r3, r2
 8004078:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	220b      	movs	r2, #11
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	08da      	lsrs	r2, r3, #3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3208      	adds	r2, #8
 8004096:	69f9      	ldr	r1, [r7, #28]
 8004098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2202      	movs	r2, #2
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e067      	b.n	800419c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x104>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b12      	cmp	r3, #18
 80040da:	d145      	bne.n	8004168 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 020f 	and.w	r2, r3, #15
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	4313      	orrs	r3, r2
 8004118:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	08da      	lsrs	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3208      	adds	r2, #8
 8004122:	69f9      	ldr	r1, [r7, #28]
 8004124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	4013      	ands	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0203 	and.w	r2, r3, #3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	4313      	orrs	r3, r2
 8004154:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e01e      	b.n	800419c <HAL_GPIO_Init+0x1c4>
 800415e:	bf00      	nop
 8004160:	46020000 	.word	0x46020000
 8004164:	08015b74 	.word	0x08015b74
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	4013      	ands	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d00b      	beq.n	80041bc <HAL_GPIO_Init+0x1e4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d007      	beq.n	80041bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041b0:	2b11      	cmp	r3, #17
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b12      	cmp	r3, #18
 80041ba:	d130      	bne.n	800421e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80041f2:	2201      	movs	r2, #1
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	4013      	ands	r3, r2
 8004200:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 0201 	and.w	r2, r3, #1
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4313      	orrs	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	4013      	ands	r3, r2
 800423c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	4313      	orrs	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d07c      	beq.n	800435c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004262:	4a47      	ldr	r2, [pc, #284]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3318      	adds	r3, #24
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4013      	ands	r3, r2
 8004284:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0a9a      	lsrs	r2, r3, #10
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <HAL_GPIO_Init+0x3ac>)
 800428c:	4013      	ands	r3, r2
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	f002 0203 	and.w	r2, r2, #3
 8004294:	00d2      	lsls	r2, r2, #3
 8004296:	4093      	lsls	r3, r2
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	4313      	orrs	r3, r2
 800429c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800429e:	4938      	ldr	r1, [pc, #224]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	3318      	adds	r3, #24
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80042d0:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80042d6:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43db      	mvns	r3, r3
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	4013      	ands	r3, r2
 8004310:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800432e:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004334:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	4013      	ands	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <HAL_GPIO_Init+0x3a8>)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3301      	adds	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f ae3d 	bne.w	8003fec <HAL_GPIO_Init+0x14>
  }
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3724      	adds	r7, #36	; 0x24
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	46022000 	.word	0x46022000
 8004384:	002f7f7f 	.word	0x002f7f7f

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80043ce:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f00b fa44 	bl	800f864 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80043e8:	4a05      	ldr	r2, [pc, #20]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f807 	bl	8004404 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	46022000 	.word	0x46022000

08004404 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e007      	b.n	800444a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0204 	bic.w	r2, r3, #4
 8004442:	4905      	ldr	r1, [pc, #20]	; (8004458 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
  }

  return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40030400 	.word	0x40030400

0800445c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_ICACHE_Enable+0x1c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_ICACHE_Enable+0x1c>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40030400 	.word	0x40030400

0800447c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0e7      	b.n	800465e <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fc ff89 	bl	80013c0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ce:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80044da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fad4 	bl	8004a8c <LPTIM_WaitForFlag>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d101      	bne.n	80044ee <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e0b7      	b.n	800465e <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2210      	movs	r2, #16
 80044f4:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6a12      	ldr	r2, [r2, #32]
 80044fe:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004500:	2110      	movs	r1, #16
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fac2 	bl	8004a8c <LPTIM_WaitForFlag>
 8004508:	4603      	mov	r3, r0
 800450a:	2b03      	cmp	r3, #3
 800450c:	d101      	bne.n	8004512 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0a5      	b.n	800465e <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10e      	bne.n	800453e <HAL_LPTIM_Init+0xc2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <HAL_LPTIM_Init+0xc2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d004      	beq.n	8004558 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004556:	d103      	bne.n	8004560 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 031e 	bic.w	r3, r3, #30
 800455e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004568:	4293      	cmp	r3, r2
 800456a:	d005      	beq.n	8004578 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_LPTIM_Init+0x1ec>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004588:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800458e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004594:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045ac:	4313      	orrs	r3, r2
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d004      	beq.n	80045c6 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c4:	d107      	bne.n	80045d6 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045ce:	4313      	orrs	r3, r2
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00a      	beq.n	80045f8 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045ea:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80045f0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_LPTIM_Init+0x1f0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_LPTIM_Init+0x198>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_LPTIM_Init+0x1f4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	625a      	str	r2, [r3, #36]	; 0x24
 8004624:	e00e      	b.n	8004644 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <HAL_LPTIM_Init+0x1f8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_LPTIM_Init+0x1be>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_LPTIM_Init+0x1fc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d104      	bne.n	8004644 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	ff39f1fe 	.word	0xff39f1fe
 800466c:	46004400 	.word	0x46004400
 8004670:	40009400 	.word	0x40009400
 8004674:	46004800 	.word	0x46004800
 8004678:	46004c00 	.word	0x46004c00

0800467c <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d00c      	beq.n	80046ae <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800469c:	d107      	bne.n	80046ae <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80046ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0204 	orr.w	r2, r2, #4
 80046cc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d120      	bne.n	800473c <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d119      	bne.n	800473c <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f99c 	bl	8004a64 <HAL_LPTIM_IC_CaptureCallback>
 800472c:	e002      	b.n	8004734 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f93e 	bl	80049b0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474a:	d122      	bne.n	8004792 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475a:	d11a      	bne.n	8004792 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004764:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f971 	bl	8004a64 <HAL_LPTIM_IC_CaptureCallback>
 8004782:	e002      	b.n	800478a <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f913 	bl	80049b0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d117      	bne.n	80047d2 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d10f      	bne.n	80047d2 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047ba:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f957 	bl	8004a78 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e0:	d117      	bne.n	8004812 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d10f      	bne.n	8004812 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047fa:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f937 	bl	8004a78 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d10d      	bne.n	800483c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d106      	bne.n	800483c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2202      	movs	r2, #2
 8004834:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8c4 	bl	80049c4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d10d      	bne.n	8004866 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d106      	bne.n	8004866 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2204      	movs	r2, #4
 800485e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8b9 	bl	80049d8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d111      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d10a      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2208      	movs	r2, #8
 8004888:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8aa 	bl	80049ec <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048a6:	d113      	bne.n	80048d0 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048b6:	d10b      	bne.n	80048d0 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048c0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f88e 	bl	80049ec <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d10d      	bne.n	80048fa <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d106      	bne.n	80048fa <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2210      	movs	r2, #16
 80048f2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f883 	bl	8004a00 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d10d      	bne.n	8004924 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b20      	cmp	r3, #32
 8004914:	d106      	bne.n	8004924 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2220      	movs	r2, #32
 800491c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f878 	bl	8004a14 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d10d      	bne.n	800494e <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d106      	bne.n	800494e <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f86d 	bl	8004a28 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d10d      	bne.n	8004978 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d106      	bne.n	8004978 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f862 	bl	8004a3c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d10f      	bne.n	80049a8 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d107      	bne.n	80049a8 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a0:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f854 	bl	8004a50 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <LPTIM_WaitForFlag+0x58>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <LPTIM_WaitForFlag+0x5c>)
 8004aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa4:	0b9b      	lsrs	r3, r3, #14
 8004aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d002      	beq.n	8004ad6 <LPTIM_WaitForFlag+0x4a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ec      	bne.n	8004ab0 <LPTIM_WaitForFlag+0x24>

  return result;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	d1b71759 	.word	0xd1b71759

08004aec <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	46020800 	.word	0x46020800

08004b0c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004b14:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b1c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d10b      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d905      	bls.n	8004b3a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e057      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d90a      	bls.n	8004b5c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004b46:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	60d3      	str	r3, [r2, #12]
 8004b5a:	e007      	b.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b64:	4925      	ldr	r1, [pc, #148]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b6c:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2232      	movs	r2, #50	; 0x32
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b8a:	e002      	b.n	8004b92 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f3      	bne.n	8004b8c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01b      	beq.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	2232      	movs	r2, #50	; 0x32
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	4a11      	ldr	r2, [pc, #68]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004bc8:	e002      	b.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f3      	bne.n	8004bca <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e000      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	46020800 	.word	0x46020800
 8004c00:	20000000 	.word	0x20000000
 8004c04:	10624dd3 	.word	0x10624dd3

08004c08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	46020800 	.word	0x46020800

08004c24 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_PWREx_ConfigSupply+0x94>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_PWREx_ConfigSupply+0x98>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	2232      	movs	r2, #50	; 0x32
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_PWREx_ConfigSupply+0x98>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d113      	bne.n	8004c78 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c56:	f023 0302 	bic.w	r3, r3, #2
 8004c5a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c5c:	e002      	b.n	8004c64 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c64:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d116      	bne.n	8004c9e <HAL_PWREx_ConfigSupply+0x7a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f3      	bne.n	8004c5e <HAL_PWREx_ConfigSupply+0x3a>
 8004c76:	e012      	b.n	8004c9e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c84:	e002      	b.n	8004c8c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_PWREx_ConfigSupply+0x7a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f3      	bne.n	8004c86 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e000      	b.n	8004caa <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	46020800 	.word	0x46020800

08004cc4 <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004cf0:	bf30      	wfi
 8004cf2:	e002      	b.n	8004cfa <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004cf4:	bf40      	sev
    __WFE();
 8004cf6:	bf20      	wfe
    __WFE();
 8004cf8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	6113      	str	r3, [r2, #16]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	46020800 	.word	0x46020800
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d2a:	6113      	str	r3, [r2, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	46020800 	.word	0x46020800

08004d3c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_PWREx_EnableVddA+0x1c>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <HAL_PWREx_EnableVddA+0x1c>)
 8004d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d4a:	6113      	str	r3, [r2, #16]
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	46020800 	.word	0x46020800

08004d5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	46020800 	.word	0x46020800

08004d7c <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8e:	f000 8090 	beq.w	8004eb2 <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 8004d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d96:	f200 8098 	bhi.w	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d9e:	d07c      	beq.n	8004e9a <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 8004da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004da4:	f200 8091 	bhi.w	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dac:	d069      	beq.n	8004e82 <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db2:	f200 808a 	bhi.w	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dba:	d056      	beq.n	8004e6a <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 8004dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc0:	f200 8083 	bhi.w	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc8:	d043      	beq.n	8004e52 <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dce:	d87c      	bhi.n	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004dd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dd4:	d031      	beq.n	8004e3a <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 8004dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dda:	d876      	bhi.n	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004de0:	d020      	beq.n	8004e24 <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 8004de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004de6:	d870      	bhi.n	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d003      	beq.n	8004df6 <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 8004dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df2:	d00b      	beq.n	8004e0c <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR5_SRAM6PDS1) */

    default:
    {
      return;
 8004df4:	e069      	b.n	8004eca <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4935      	ldr	r1, [pc, #212]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
      break;
 8004e0a:	e05f      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	492e      	ldr	r1, [pc, #184]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
      break;
 8004e22:	e053      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	4929      	ldr	r1, [pc, #164]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
      break;
 8004e38:	e048      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 8004e42:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	4923      	ldr	r1, [pc, #140]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
      break;
 8004e50:	e03c      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	491d      	ldr	r1, [pc, #116]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
      break;
 8004e68:	e030      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	025b      	lsls	r3, r3, #9
 8004e7a:	4917      	ldr	r1, [pc, #92]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
      break;
 8004e80:	e024      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	4911      	ldr	r1, [pc, #68]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
      break;
 8004e98:	e018      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	02db      	lsls	r3, r3, #11
 8004eaa:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
      break;
 8004eb0:	e00c      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	031b      	lsls	r3, r3, #12
 8004ec2:	4905      	ldr	r1, [pc, #20]	; (8004ed8 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
      break;
 8004ec8:	e000      	b.n	8004ecc <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 8004eca:	bf00      	nop
      break;
    }
  }
}
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	46020800 	.word	0x46020800

08004edc <HAL_PWREx_EnableSRAM4FastWakeUp>:
  *         Stop 0, Stop 1 and Stop 2 modes, and also increases the LPDMA access time
  *         to SRAM4 during Stop modes.
  * @retval None.
  */
void HAL_PWREx_EnableSRAM4FastWakeUp(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_SRAM4FWU);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004ee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004eea:	6053      	str	r3, [r2, #4]
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	46020800 	.word	0x46020800

08004efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f000 bec8 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b99      	ldr	r3, [pc, #612]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b96      	ldr	r3, [pc, #600]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 816c 	beq.w	8005210 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_RCC_OscConfig+0x52>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	f040 80de 	bne.w	8005102 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 80da 	bne.w	8005102 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f000 bea5 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f60:	4b86      	ldr	r3, [pc, #536]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCC_OscConfig+0x7a>
 8004f6c:	4b83      	ldr	r3, [pc, #524]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f74:	e005      	b.n	8004f82 <HAL_RCC_OscConfig+0x86>
 8004f76:	4b81      	ldr	r3, [pc, #516]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d255      	bcs.n	8005032 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fa17 	bl	80063c4 <RCC_SetFlashLatencyFromMSIRange>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f000 be82 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fa2:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4a75      	ldr	r2, [pc, #468]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	4b73      	ldr	r3, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	4970      	ldr	r1, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004fc8:	d309      	bcc.n	8004fde <HAL_RCC_OscConfig+0xe2>
 8004fca:	4b6c      	ldr	r3, [pc, #432]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f023 021f 	bic.w	r2, r3, #31
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4969      	ldr	r1, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
 8004fdc:	e07e      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da0a      	bge.n	8004ffc <HAL_RCC_OscConfig+0x100>
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	4961      	ldr	r1, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
 8004ffa:	e06f      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d30a      	bcc.n	800501c <HAL_RCC_OscConfig+0x120>
 8005006:	4b5d      	ldr	r3, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	4959      	ldr	r1, [pc, #356]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005016:	4313      	orrs	r3, r2
 8005018:	60cb      	str	r3, [r1, #12]
 800501a:	e05f      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
 800501c:	4b57      	ldr	r3, [pc, #348]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	03db      	lsls	r3, r3, #15
 800502a:	4954      	ldr	r1, [pc, #336]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800502c:	4313      	orrs	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
 8005030:	e054      	b.n	80050dc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005032:	4b52      	ldr	r3, [pc, #328]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	4a51      	ldr	r2, [pc, #324]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800503c:	6093      	str	r3, [r2, #8]
 800503e:	4b4f      	ldr	r3, [pc, #316]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	494c      	ldr	r1, [pc, #304]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005058:	d309      	bcc.n	800506e <HAL_RCC_OscConfig+0x172>
 800505a:	4b48      	ldr	r3, [pc, #288]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 021f 	bic.w	r2, r3, #31
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4945      	ldr	r1, [pc, #276]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005068:	4313      	orrs	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
 800506c:	e028      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	da0a      	bge.n	800508c <HAL_RCC_OscConfig+0x190>
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	015b      	lsls	r3, r3, #5
 8005084:	493d      	ldr	r1, [pc, #244]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005086:	4313      	orrs	r3, r2
 8005088:	60cb      	str	r3, [r1, #12]
 800508a:	e019      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d30a      	bcc.n	80050ac <HAL_RCC_OscConfig+0x1b0>
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	4935      	ldr	r1, [pc, #212]	; (800517c <HAL_RCC_OscConfig+0x280>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
 80050aa:	e009      	b.n	80050c0 <HAL_RCC_OscConfig+0x1c4>
 80050ac:	4b33      	ldr	r3, [pc, #204]	; (800517c <HAL_RCC_OscConfig+0x280>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	03db      	lsls	r3, r3, #15
 80050ba:	4930      	ldr	r1, [pc, #192]	; (800517c <HAL_RCC_OscConfig+0x280>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f97a 	bl	80063c4 <RCC_SetFlashLatencyFromMSIRange>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f000 bde5 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80050dc:	f001 f8e4 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050e0:	4b27      	ldr	r3, [pc, #156]	; (8005180 <HAL_RCC_OscConfig+0x284>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc facd 	bl	8001684 <HAL_InitTick>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80050f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808a 	beq.w	800520e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80050fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fe:	f000 bdd2 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d066      	beq.n	80051d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005116:	f7fc fc53 	bl	80019c0 <HAL_GetTick>
 800511a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800511c:	e009      	b.n	8005132 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800511e:	f7fc fc4f 	bl	80019c0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f000 bdba 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4a0e      	ldr	r2, [pc, #56]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_RCC_OscConfig+0x280>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	4909      	ldr	r1, [pc, #36]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005164:	d30e      	bcc.n	8005184 <HAL_RCC_OscConfig+0x288>
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 021f 	bic.w	r2, r3, #31
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4902      	ldr	r1, [pc, #8]	; (800517c <HAL_RCC_OscConfig+0x280>)
 8005174:	4313      	orrs	r3, r2
 8005176:	60cb      	str	r3, [r1, #12]
 8005178:	e04a      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 800517a:	bf00      	nop
 800517c:	46020c00 	.word	0x46020c00
 8005180:	20000004 	.word	0x20000004
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	da0a      	bge.n	80051a2 <HAL_RCC_OscConfig+0x2a6>
 800518c:	4b98      	ldr	r3, [pc, #608]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	015b      	lsls	r3, r3, #5
 800519a:	4995      	ldr	r1, [pc, #596]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
 80051a0:	e036      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d30a      	bcc.n	80051c2 <HAL_RCC_OscConfig+0x2c6>
 80051ac:	4b90      	ldr	r3, [pc, #576]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	029b      	lsls	r3, r3, #10
 80051ba:	498d      	ldr	r1, [pc, #564]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	60cb      	str	r3, [r1, #12]
 80051c0:	e026      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
 80051c2:	4b8b      	ldr	r3, [pc, #556]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	03db      	lsls	r3, r3, #15
 80051d0:	4987      	ldr	r1, [pc, #540]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60cb      	str	r3, [r1, #12]
 80051d6:	e01b      	b.n	8005210 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80051d8:	4b85      	ldr	r3, [pc, #532]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a84      	ldr	r2, [pc, #528]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051e4:	f7fc fbec 	bl	80019c0 <HAL_GetTick>
 80051e8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80051ea:	e009      	b.n	8005200 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ec:	f7fc fbe8 	bl	80019c0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d902      	bls.n	8005200 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f000 bd53 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005200:	4b7b      	ldr	r3, [pc, #492]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ef      	bne.n	80051ec <HAL_RCC_OscConfig+0x2f0>
 800520c:	e000      	b.n	8005210 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800520e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 808b 	beq.w	8005334 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b08      	cmp	r3, #8
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x334>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d109      	bne.n	800523e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b03      	cmp	r3, #3
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d17d      	bne.n	8005334 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f000 bd34 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x35a>
 8005248:	4b69      	ldr	r3, [pc, #420]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a68      	ldr	r2, [pc, #416]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e041      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800525e:	d112      	bne.n	8005286 <HAL_RCC_OscConfig+0x38a>
 8005260:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a62      	ldr	r2, [pc, #392]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b60      	ldr	r3, [pc, #384]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5f      	ldr	r2, [pc, #380]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005272:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5c      	ldr	r2, [pc, #368]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800527e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e029      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800528e:	d112      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3ba>
 8005290:	4b57      	ldr	r3, [pc, #348]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b54      	ldr	r3, [pc, #336]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a53      	ldr	r2, [pc, #332]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b51      	ldr	r3, [pc, #324]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a50      	ldr	r2, [pc, #320]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e011      	b.n	80052da <HAL_RCC_OscConfig+0x3de>
 80052b6:	4b4e      	ldr	r3, [pc, #312]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a4a      	ldr	r2, [pc, #296]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b48      	ldr	r3, [pc, #288]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a47      	ldr	r2, [pc, #284]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80052d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80052e2:	f7fc fb6d 	bl	80019c0 <HAL_GetTick>
 80052e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e8:	e009      	b.n	80052fe <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ea:	f7fc fb69 	bl	80019c0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b64      	cmp	r3, #100	; 0x64
 80052f6:	d902      	bls.n	80052fe <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	f000 bcd4 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fe:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ef      	beq.n	80052ea <HAL_RCC_OscConfig+0x3ee>
 800530a:	e013      	b.n	8005334 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800530c:	f7fc fb58 	bl	80019c0 <HAL_GetTick>
 8005310:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005312:	e009      	b.n	8005328 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005314:	f7fc fb54 	bl	80019c0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d902      	bls.n	8005328 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	f000 bcbf 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005328:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ef      	bne.n	8005314 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05f      	beq.n	8005400 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	2b04      	cmp	r3, #4
 8005344:	d005      	beq.n	8005352 <HAL_RCC_OscConfig+0x456>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d114      	bne.n	8005376 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b02      	cmp	r3, #2
 8005350:	d111      	bne.n	8005376 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f000 bca3 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005360:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	4920      	ldr	r1, [pc, #128]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005374:	e044      	b.n	8005400 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d024      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005388:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800538a:	f7fc fb19 	bl	80019c0 <HAL_GetTick>
 800538e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005390:	e009      	b.n	80053a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005392:	f7fc fb15 	bl	80019c0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d902      	bls.n	80053a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	f000 bc80 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	490b      	ldr	r1, [pc, #44]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
 80053c6:	e01b      	b.n	8005400 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053d4:	f7fc faf4 	bl	80019c0 <HAL_GetTick>
 80053d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053dc:	f7fc faf0 	bl	80019c0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d904      	bls.n	80053f4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	f000 bc5b 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
 80053f0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f4:	4baf      	ldr	r3, [pc, #700]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ed      	bne.n	80053dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80c8 	beq.w	800559e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005414:	4ba7      	ldr	r3, [pc, #668]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d111      	bne.n	8005446 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	4ba4      	ldr	r3, [pc, #656]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005428:	4aa2      	ldr	r2, [pc, #648]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005432:	4ba0      	ldr	r3, [pc, #640]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005446:	4b9c      	ldr	r3, [pc, #624]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005452:	4b99      	ldr	r3, [pc, #612]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	4a98      	ldr	r2, [pc, #608]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fc faaf 	bl	80019c0 <HAL_GetTick>
 8005462:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005464:	e009      	b.n	800547a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fc faab 	bl	80019c0 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d902      	bls.n	800547a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f000 bc16 	b.w	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800547a:	4b8f      	ldr	r3, [pc, #572]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ef      	beq.n	8005466 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d05f      	beq.n	800554e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800548e:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005494:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d037      	beq.n	8005514 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e3f4      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80054c6:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	4a79      	ldr	r2, [pc, #484]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054ce:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80054d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80054d6:	f7fc fa73 	bl	80019c0 <HAL_GetTick>
 80054da:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054de:	f7fc fa6f 	bl	80019c0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e3da      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054f0:	4b70      	ldr	r3, [pc, #448]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ef      	bne.n	80054de <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80054fe:	4b6d      	ldr	r3, [pc, #436]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005504:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4969      	ldr	r1, [pc, #420]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005514:	4b67      	ldr	r3, [pc, #412]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551a:	4a66      	ldr	r2, [pc, #408]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800551c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005520:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005524:	f7fc fa4c 	bl	80019c0 <HAL_GetTick>
 8005528:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7fc fa48 	bl	80019c0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b05      	cmp	r3, #5
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e3b3      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800553e:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ef      	beq.n	800552c <HAL_RCC_OscConfig+0x630>
 800554c:	e01b      	b.n	8005586 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800554e:	4b59      	ldr	r3, [pc, #356]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005554:	4a57      	ldr	r2, [pc, #348]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005556:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800555a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800555e:	f7fc fa2f 	bl	80019c0 <HAL_GetTick>
 8005562:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005566:	f7fc fa2b 	bl	80019c0 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b05      	cmp	r3, #5
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e396      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005578:	4b4e      	ldr	r3, [pc, #312]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800557a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800557e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ef      	bne.n	8005566 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005586:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005594:	4a47      	ldr	r2, [pc, #284]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005596:	f023 0304 	bic.w	r3, r3, #4
 800559a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8111 	beq.w	80057ce <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b2:	4b40      	ldr	r3, [pc, #256]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	4b3c      	ldr	r3, [pc, #240]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	4a3b      	ldr	r2, [pc, #236]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055e4:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d118      	bne.n	8005622 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055f0:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	4a30      	ldr	r2, [pc, #192]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fc:	f7fc f9e0 	bl	80019c0 <HAL_GetTick>
 8005600:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005604:	f7fc f9dc 	bl	80019c0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e347      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <HAL_RCC_OscConfig+0x7bc>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01f      	beq.n	800566e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005640:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800564c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800565a:	e018      	b.n	800568e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 800565e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800566c:	e00f      	b.n	800568e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800566e:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005674:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005684:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <HAL_RCC_OscConfig+0x7b8>)
 8005686:	f023 0304 	bic.w	r3, r3, #4
 800568a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d057      	beq.n	8005746 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005696:	f7fc f993 	bl	80019c0 <HAL_GetTick>
 800569a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569c:	e00e      	b.n	80056bc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fc f98f 	bl	80019c0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d905      	bls.n	80056bc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e2f8      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
 80056b4:	46020c00 	.word	0x46020c00
 80056b8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056bc:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0e9      	beq.n	800569e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01b      	beq.n	800570e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056d6:	4b96      	ldr	r3, [pc, #600]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056dc:	4a94      	ldr	r2, [pc, #592]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80056de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc f96a 	bl	80019c0 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e2d3      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80056fe:	4b8c      	ldr	r3, [pc, #560]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ed      	beq.n	80056e8 <HAL_RCC_OscConfig+0x7ec>
 800570c:	e053      	b.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800570e:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005714:	4a86      	ldr	r2, [pc, #536]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800571e:	e00a      	b.n	8005736 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fc f94e 	bl	80019c0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e2b7      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005736:	4b7e      	ldr	r3, [pc, #504]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800573c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ed      	bne.n	8005720 <HAL_RCC_OscConfig+0x824>
 8005744:	e037      	b.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005746:	f7fc f93b 	bl	80019c0 <HAL_GetTick>
 800574a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc f937 	bl	80019c0 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e2a0      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005764:	4b72      	ldr	r3, [pc, #456]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ed      	bne.n	800574e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005772:	4b6f      	ldr	r3, [pc, #444]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005780:	4b6b      	ldr	r3, [pc, #428]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005786:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fc f915 	bl	80019c0 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e27e      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057a8:	4b61      	ldr	r3, [pc, #388]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ed      	bne.n	8005792 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057be:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c4:	4a5a      	ldr	r2, [pc, #360]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d019      	beq.n	8005816 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80057e2:	4b53      	ldr	r3, [pc, #332]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a52      	ldr	r2, [pc, #328]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80057e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057ee:	f7fc f8e7 	bl	80019c0 <HAL_GetTick>
 80057f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f6:	f7fc f8e3 	bl	80019c0 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e24e      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005808:	4b49      	ldr	r3, [pc, #292]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x8fa>
 8005814:	e018      	b.n	8005848 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a45      	ldr	r2, [pc, #276]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800581c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005820:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005822:	f7fc f8cd 	bl	80019c0 <HAL_GetTick>
 8005826:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800582a:	f7fc f8c9 	bl	80019c0 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e234      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800583c:	4b3c      	ldr	r3, [pc, #240]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d036      	beq.n	80058c2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d019      	beq.n	8005890 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800585c:	4b34      	ldr	r3, [pc, #208]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a33      	ldr	r2, [pc, #204]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005866:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005868:	f7fc f8aa 	bl	80019c0 <HAL_GetTick>
 800586c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005870:	f7fc f8a6 	bl	80019c0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e211      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x974>
 800588e:	e018      	b.n	80058c2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005890:	4b27      	ldr	r3, [pc, #156]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a26      	ldr	r2, [pc, #152]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800589c:	f7fc f890 	bl	80019c0 <HAL_GetTick>
 80058a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80058a4:	f7fc f88c 	bl	80019c0 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1f7      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80058b6:	4b1e      	ldr	r3, [pc, #120]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d07f      	beq.n	80059ce <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d062      	beq.n	800599c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058e0:	6093      	str	r3, [r2, #8]
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	4910      	ldr	r1, [pc, #64]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80058fc:	d309      	bcc.n	8005912 <HAL_RCC_OscConfig+0xa16>
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f023 021f 	bic.w	r2, r3, #31
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4909      	ldr	r1, [pc, #36]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800590c:	4313      	orrs	r3, r2
 800590e:	60cb      	str	r3, [r1, #12]
 8005910:	e02a      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0c      	bge.n	8005934 <HAL_RCC_OscConfig+0xa38>
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	4901      	ldr	r1, [pc, #4]	; (8005930 <HAL_RCC_OscConfig+0xa34>)
 800592a:	4313      	orrs	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]
 800592e:	e01b      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005930:	46020c00 	.word	0x46020c00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d30a      	bcc.n	8005954 <HAL_RCC_OscConfig+0xa58>
 800593e:	4ba1      	ldr	r3, [pc, #644]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	499d      	ldr	r1, [pc, #628]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800594e:	4313      	orrs	r3, r2
 8005950:	60cb      	str	r3, [r1, #12]
 8005952:	e009      	b.n	8005968 <HAL_RCC_OscConfig+0xa6c>
 8005954:	4b9b      	ldr	r3, [pc, #620]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	03db      	lsls	r3, r3, #15
 8005962:	4998      	ldr	r1, [pc, #608]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005964:	4313      	orrs	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005968:	4b96      	ldr	r3, [pc, #600]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a95      	ldr	r2, [pc, #596]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800596e:	f043 0310 	orr.w	r3, r3, #16
 8005972:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005974:	f7fc f824 	bl	80019c0 <HAL_GetTick>
 8005978:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800597c:	f7fc f820 	bl	80019c0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e18b      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800598e:	4b8d      	ldr	r3, [pc, #564]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0xa80>
 800599a:	e018      	b.n	80059ce <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800599c:	4b89      	ldr	r3, [pc, #548]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a88      	ldr	r2, [pc, #544]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059a8:	f7fc f80a 	bl	80019c0 <HAL_GetTick>
 80059ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80059b0:	f7fc f806 	bl	80019c0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e171      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80059c2:	4b80      	ldr	r3, [pc, #512]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8166 	beq.w	8005ca4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059de:	4b79      	ldr	r3, [pc, #484]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	f000 80f2 	beq.w	8005bd0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	f040 80c5 	bne.w	8005b80 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	4b73      	ldr	r3, [pc, #460]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a72      	ldr	r2, [pc, #456]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 80059fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a02:	f7fb ffdd 	bl	80019c0 <HAL_GetTick>
 8005a06:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fb ffd9 	bl	80019c0 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e144      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a1c:	4b69      	ldr	r3, [pc, #420]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a28:	4b66      	ldr	r3, [pc, #408]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d111      	bne.n	8005a5a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005a36:	4b63      	ldr	r3, [pc, #396]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a3c:	4a61      	ldr	r2, [pc, #388]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a46:	4b5f      	ldr	r3, [pc, #380]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a66:	d102      	bne.n	8005a6e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a6e:	4b56      	ldr	r3, [pc, #344]	; (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4a55      	ldr	r2, [pc, #340]	; (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a78:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005a7a:	4b52      	ldr	r3, [pc, #328]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	0212      	lsls	r2, r2, #8
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	494a      	ldr	r1, [pc, #296]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8005aa0:	4b48      	ldr	r3, [pc, #288]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa4:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <HAL_RCC_OscConfig+0xcd0>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005aac:	3a01      	subs	r2, #1
 8005aae:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0252      	lsls	r2, r2, #9
 8005aba:	b292      	uxth	r2, r2
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0412      	lsls	r2, r2, #16
 8005ac6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	0612      	lsls	r2, r2, #24
 8005ad4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	493a      	ldr	r1, [pc, #232]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005ae0:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005af6:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005afc:	f043 0310 	orr.w	r3, r3, #16
 8005b00:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005b02:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	f023 020c 	bic.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	492d      	ldr	r1, [pc, #180]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005b14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <HAL_RCC_OscConfig+0xccc>)
 8005b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b26:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005b28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005b30:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b36:	4a23      	ldr	r2, [pc, #140]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b4a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b58:	f7fb ff32 	bl	80019c0 <HAL_GetTick>
 8005b5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fb ff2e 	bl	80019c0 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e099      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0xc64>
 8005b7e:	e091      	b.n	8005ca4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b80:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0f      	ldr	r2, [pc, #60]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b8c:	f7fb ff18 	bl	80019c0 <HAL_GetTick>
 8005b90:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fb ff14 	bl	80019c0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	4a03      	ldr	r2, [pc, #12]	; (8005bc4 <HAL_RCC_OscConfig+0xcc8>)
 8005bb8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	6293      	str	r3, [r2, #40]	; 0x28
 8005bc2:	e06f      	b.n	8005ca4 <HAL_RCC_OscConfig+0xda8>
 8005bc4:	46020c00 	.word	0x46020c00
 8005bc8:	46020800 	.word	0x46020800
 8005bcc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d039      	beq.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0203 	and.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d132      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d129      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d122      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d11a      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	0a5b      	lsrs	r3, r3, #9
 8005c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d111      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c40:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d108      	bne.n	8005c58 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	0e1b      	lsrs	r3, r3, #24
 8005c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e024      	b.n	8005ca6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d01a      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c74:	f023 0310 	bic.w	r3, r3, #16
 8005c78:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fb fea1 	bl	80019c0 <HAL_GetTick>
 8005c7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005c80:	bf00      	nop
 8005c82:	f7fb fe9d 	bl	80019c0 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d0f9      	beq.n	8005c82 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c92:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <HAL_RCC_OscConfig+0xdb4>)
 8005c9e:	f043 0310 	orr.w	r3, r3, #16
 8005ca2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3738      	adds	r7, #56	; 0x38
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	46020c00 	.word	0x46020c00

08005cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e1d9      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b9b      	ldr	r3, [pc, #620]	; (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d910      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b98      	ldr	r3, [pc, #608]	; (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	4996      	ldr	r1, [pc, #600]	; (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b94      	ldr	r3, [pc, #592]	; (8005f38 <HAL_RCC_ClockConfig+0x284>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e1c1      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d908      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005d14:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4986      	ldr	r1, [pc, #536]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d012      	beq.n	8005d58 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	4b81      	ldr	r3, [pc, #516]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d909      	bls.n	8005d58 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d44:	4b7d      	ldr	r3, [pc, #500]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	497a      	ldr	r1, [pc, #488]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d010      	beq.n	8005d86 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b74      	ldr	r3, [pc, #464]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d908      	bls.n	8005d86 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d74:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	496e      	ldr	r1, [pc, #440]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d010      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4b69      	ldr	r3, [pc, #420]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d908      	bls.n	8005db4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005da2:	4b66      	ldr	r3, [pc, #408]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 020f 	bic.w	r2, r3, #15
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	4963      	ldr	r1, [pc, #396]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80d2 	beq.w	8005f66 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d143      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dce:	4b5b      	ldr	r3, [pc, #364]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ddc:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de2:	4a56      	ldr	r2, [pc, #344]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005dec:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005dfe:	f7fb fddf 	bl	80019c0 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005e04:	4b4e      	ldr	r3, [pc, #312]	; (8005f40 <HAL_RCC_ClockConfig+0x28c>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00f      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005e12:	f7fb fdd5 	bl	80019c0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e12b      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005e24:	4b46      	ldr	r3, [pc, #280]	; (8005f40 <HAL_RCC_ClockConfig+0x28c>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e36:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3c:	4a3f      	ldr	r2, [pc, #252]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e3e:	f023 0304 	bic.w	r3, r3, #4
 8005e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e46:	4b3d      	ldr	r3, [pc, #244]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d121      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e112      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d115      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e106      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005e76:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0fa      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e86:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0f2      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4926      	ldr	r1, [pc, #152]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005ea8:	f7fb fd8a 	bl	80019c0 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d112      	bne.n	8005edc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb8:	f7fb fd82 	bl	80019c0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0d6      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d1ee      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x204>
 8005eda:	e044      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d112      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ee4:	e00a      	b.n	8005efc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee6:	f7fb fd6b 	bl	80019c0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e0bf      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d1ee      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x232>
 8005f08:	e02d      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d123      	bne.n	8005f5a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f14:	f7fb fd54 	bl	80019c0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0a8      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f2a:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <HAL_RCC_ClockConfig+0x288>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ee      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x260>
 8005f36:	e016      	b.n	8005f66 <HAL_RCC_ClockConfig+0x2b2>
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	46020c00 	.word	0x46020c00
 8005f40:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fb fd3c 	bl	80019c0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e090      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d1ee      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d010      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d208      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f82:	4b40      	ldr	r3, [pc, #256]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 020f 	bic.w	r2, r3, #15
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	493d      	ldr	r1, [pc, #244]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f94:	4b3c      	ldr	r3, [pc, #240]	; (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d210      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b39      	ldr	r3, [pc, #228]	; (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 020f 	bic.w	r2, r3, #15
 8005faa:	4937      	ldr	r1, [pc, #220]	; (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b35      	ldr	r3, [pc, #212]	; (8006088 <HAL_RCC_ClockConfig+0x3d4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e05b      	b.n	800607c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4925      	ldr	r1, [pc, #148]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d012      	beq.n	8006024 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800600c:	429a      	cmp	r2, r3
 800600e:	d209      	bcs.n	8006024 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006010:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4919      	ldr	r1, [pc, #100]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006020:	4313      	orrs	r3, r2
 8006022:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800603c:	429a      	cmp	r2, r3
 800603e:	d208      	bcs.n	8006052 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	490d      	ldr	r1, [pc, #52]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006052:	f000 f821 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <HAL_RCC_ClockConfig+0x3d0>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	490a      	ldr	r1, [pc, #40]	; (800608c <HAL_RCC_ClockConfig+0x3d8>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <HAL_RCC_ClockConfig+0x3dc>)
 800606a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_RCC_ClockConfig+0x3e0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fb fb07 	bl	8001684 <HAL_InitTick>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]

  return status;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	46020c00 	.word	0x46020c00
 8006088:	40022000 	.word	0x40022000
 800608c:	08015b1c 	.word	0x08015b1c
 8006090:	20000000 	.word	0x20000000
 8006094:	20000004 	.word	0x20000004

08006098 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060a6:	4b7b      	ldr	r3, [pc, #492]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060b0:	4b78      	ldr	r3, [pc, #480]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x34>
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d121      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11e      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80060cc:	4b71      	ldr	r3, [pc, #452]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80060d8:	4b6e      	ldr	r3, [pc, #440]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
 80060e6:	e005      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80060e8:	4b6a      	ldr	r3, [pc, #424]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	0f1b      	lsrs	r3, r3, #28
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060f4:	4a68      	ldr	r2, [pc, #416]	; (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006108:	e00d      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800610a:	4b62      	ldr	r3, [pc, #392]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b04      	cmp	r3, #4
 8006114:	d102      	bne.n	800611c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006116:	4b61      	ldr	r3, [pc, #388]	; (800629c <HAL_RCC_GetSysClockFreq+0x204>)
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	e004      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b08      	cmp	r3, #8
 8006120:	d101      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006122:	4b5e      	ldr	r3, [pc, #376]	; (800629c <HAL_RCC_GetSysClockFreq+0x204>)
 8006124:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	f040 80ac 	bne.w	8006286 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800612e:	4b59      	ldr	r3, [pc, #356]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006138:	4b56      	ldr	r3, [pc, #344]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006146:	4b53      	ldr	r3, [pc, #332]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006152:	4b50      	ldr	r3, [pc, #320]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8086 	beq.w	8006282 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d003      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0xec>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d022      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x130>
 8006182:	e043      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80062a0 <HAL_RCC_GetSysClockFreq+0x208>
 8006192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006196:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80061aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80062a4 <HAL_RCC_GetSysClockFreq+0x20c>
 80061ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80061c6:	e046      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80062a0 <HAL_RCC_GetSysClockFreq+0x208>
 80061d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061da:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80061ee:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80062a4 <HAL_RCC_GetSysClockFreq+0x20c>
 80061f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006206:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800620a:	e024      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006234:	ed97 6a01 	vldr	s12, [r7, #4]
 8006238:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80062a4 <HAL_RCC_GetSysClockFreq+0x20c>
 800623c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006248:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800624c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006250:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006254:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006256:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	0e1b      	lsrs	r3, r3, #24
 800625c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006260:	3301      	adds	r3, #1
 8006262:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800626e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627a:	ee17 3a90 	vmov	r3, s15
 800627e:	623b      	str	r3, [r7, #32]
 8006280:	e001      	b.n	8006286 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006286:	6a3b      	ldr	r3, [r7, #32]
}
 8006288:	4618      	mov	r0, r3
 800628a:	372c      	adds	r7, #44	; 0x2c
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	46020c00 	.word	0x46020c00
 8006298:	08015b34 	.word	0x08015b34
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	4b742400 	.word	0x4b742400
 80062a4:	46000000 	.word	0x46000000

080062a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80062ac:	f7ff fef4 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <HAL_RCC_GetHCLKFreq+0x28>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	4906      	ldr	r1, [pc, #24]	; (80062d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80062bc:	5ccb      	ldrb	r3, [r1, r3]
 80062be:	fa22 f303 	lsr.w	r3, r2, r3
 80062c2:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80062c4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80062c8:	681b      	ldr	r3, [r3, #0]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	46020c00 	.word	0x46020c00
 80062d4:	08015b1c 	.word	0x08015b1c
 80062d8:	20000000 	.word	0x20000000

080062dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80062e0:	f7ff ffe2 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	; (8006300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	46020c00 	.word	0x46020c00
 8006300:	08015b2c 	.word	0x08015b2c

08006304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006308:	f7ff ffce 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 800630c:	4602      	mov	r2, r0
 800630e:	4b05      	ldr	r3, [pc, #20]	; (8006324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	4903      	ldr	r1, [pc, #12]	; (8006328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800631a:	5ccb      	ldrb	r3, [r1, r3]
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	46020c00 	.word	0x46020c00
 8006328:	08015b2c 	.word	0x08015b2c

0800632c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006330:	f7ff ffba 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 8006334:	4602      	mov	r2, r0
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	091b      	lsrs	r3, r3, #4
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	4903      	ldr	r1, [pc, #12]	; (8006350 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006342:	5ccb      	ldrb	r3, [r1, r3]
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	bd80      	pop	{r7, pc}
 800634c:	46020c00 	.word	0x46020c00
 8006350:	08015b2c 	.word	0x08015b2c

08006354 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	221f      	movs	r2, #31
 8006362:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006364:	4b15      	ldr	r3, [pc, #84]	; (80063bc <HAL_RCC_GetClockConfig+0x68>)
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f003 0203 	and.w	r2, r3, #3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_RCC_GetClockConfig+0x68>)
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCC_GetClockConfig+0x68>)
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCC_GetClockConfig+0x68>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_GetClockConfig+0x68>)
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063a2:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_RCC_GetClockConfig+0x6c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 020f 	and.w	r2, r3, #15
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	46020c00 	.word	0x46020c00
 80063c0:	40022000 	.word	0x40022000

080063c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063cc:	4b3e      	ldr	r3, [pc, #248]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063da:	f7fe fc15 	bl	8004c08 <HAL_PWREx_GetVoltageRange>
 80063de:	6178      	str	r0, [r7, #20]
 80063e0:	e019      	b.n	8006416 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063e2:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e8:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063ea:	f043 0304 	orr.w	r3, r3, #4
 80063ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80063f2:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80063f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006400:	f7fe fc02 	bl	8004c08 <HAL_PWREx_GetVoltageRange>
 8006404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006406:	4b30      	ldr	r3, [pc, #192]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800640c:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800640e:	f023 0304 	bic.w	r3, r3, #4
 8006412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800641c:	d003      	beq.n	8006426 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006424:	d109      	bne.n	800643a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642c:	d202      	bcs.n	8006434 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800642e:	2301      	movs	r3, #1
 8006430:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006432:	e033      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006438:	e030      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006440:	d208      	bcs.n	8006454 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006448:	d102      	bne.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800644a:	2303      	movs	r3, #3
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e025      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e035      	b.n	80064c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645a:	d90f      	bls.n	800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006468:	d902      	bls.n	8006470 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	e015      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006470:	2301      	movs	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	e012      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e00f      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006482:	d109      	bne.n	8006498 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d102      	bne.n	8006492 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800648c:	2301      	movs	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e004      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006492:	2302      	movs	r3, #2
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e001      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006498:	2301      	movs	r3, #1
 800649a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f023 020f 	bic.w	r2, r3, #15
 80064a4:	4909      	ldr	r1, [pc, #36]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d001      	beq.n	80064be <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	46020c00 	.word	0x46020c00
 80064cc:	40022000 	.word	0x40022000

080064d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80064d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d4:	b0ba      	sub	sp, #232	; 0xe8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f002 0401 	and.w	r4, r2, #1
 80064f4:	2500      	movs	r5, #0
 80064f6:	ea54 0305 	orrs.w	r3, r4, r5
 80064fa:	d00b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80064fc:	4bcb      	ldr	r3, [pc, #812]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006502:	f023 0103 	bic.w	r1, r3, #3
 8006506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	4ac7      	ldr	r2, [pc, #796]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800650e:	430b      	orrs	r3, r1
 8006510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 0802 	and.w	r8, r2, #2
 8006520:	f04f 0900 	mov.w	r9, #0
 8006524:	ea58 0309 	orrs.w	r3, r8, r9
 8006528:	d00b      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800652a:	4bc0      	ldr	r3, [pc, #768]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800652c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006530:	f023 010c 	bic.w	r1, r3, #12
 8006534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	4abc      	ldr	r2, [pc, #752]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800653c:	430b      	orrs	r3, r1
 800653e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f002 0a04 	and.w	sl, r2, #4
 800654e:	f04f 0b00 	mov.w	fp, #0
 8006552:	ea5a 030b 	orrs.w	r3, sl, fp
 8006556:	d00b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006558:	4bb4      	ldr	r3, [pc, #720]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	4ab0      	ldr	r2, [pc, #704]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800656a:	430b      	orrs	r3, r1
 800656c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0308 	and.w	r3, r2, #8
 800657c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006586:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d00b      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006590:	4ba6      	ldr	r3, [pc, #664]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800659a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	4aa2      	ldr	r2, [pc, #648]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 0310 	and.w	r3, r2, #16
 80065b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80065c8:	4b98      	ldr	r3, [pc, #608]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d8:	4a94      	ldr	r2, [pc, #592]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 0320 	and.w	r3, r2, #32
 80065ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006600:	4b8a      	ldr	r3, [pc, #552]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006606:	f023 0107 	bic.w	r1, r3, #7
 800660a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006610:	4a86      	ldr	r2, [pc, #536]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006638:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006648:	4a78      	ldr	r2, [pc, #480]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800665c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006666:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006670:	4b6e      	ldr	r3, [pc, #440]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	4a6a      	ldr	r2, [pc, #424]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800669e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80066a8:	4b60      	ldr	r3, [pc, #384]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	4a5c      	ldr	r2, [pc, #368]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80066cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80066da:	460b      	mov	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	d00b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80066e0:	4b52      	ldr	r3, [pc, #328]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066e6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80066ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f0:	4a4e      	ldr	r2, [pc, #312]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800670e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006712:	460b      	mov	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	d00b      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006718:	4b44      	ldr	r3, [pc, #272]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800671a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800671e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006728:	4a40      	ldr	r2, [pc, #256]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672a:	430b      	orrs	r3, r1
 800672c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800673c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006746:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d00b      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006750:	4b36      	ldr	r3, [pc, #216]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006756:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800675a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006760:	4a32      	ldr	r2, [pc, #200]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006762:	430b      	orrs	r3, r1
 8006764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006778:	2300      	movs	r3, #0
 800677a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800677e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d00c      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006788:	4b28      	ldr	r3, [pc, #160]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800678a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800678e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800679a:	4a24      	ldr	r2, [pc, #144]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679c:	430b      	orrs	r3, r1
 800679e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80067ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80067b0:	2300      	movs	r3, #0
 80067b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d04f      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80067be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d02d      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d827      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067ce:	2b60      	cmp	r3, #96	; 0x60
 80067d0:	d02e      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80067d2:	2b60      	cmp	r3, #96	; 0x60
 80067d4:	d823      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d006      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d81f      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d011      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80067e6:	e01a      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	4a0f      	ldr	r2, [pc, #60]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067f4:	e01d      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fa:	3308      	adds	r3, #8
 80067fc:	4618      	mov	r0, r3
 80067fe:	f002 fa41 	bl	8008c84 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006808:	e013      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800680a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680e:	332c      	adds	r3, #44	; 0x2c
 8006810:	4618      	mov	r0, r3
 8006812:	f002 facf 	bl	8008db4 <RCCEx_PLL3_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800681c:	e009      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006824:	e005      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006826:	bf00      	nop
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800682a:	bf00      	nop
 800682c:	46020c00 	.word	0x46020c00
        break;
 8006830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006832:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800683a:	4bb6      	ldr	r3, [pc, #728]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800683c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006840:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	4ab1      	ldr	r2, [pc, #708]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800684e:	430b      	orrs	r3, r1
 8006850:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800685a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800686a:	673b      	str	r3, [r7, #112]	; 0x70
 800686c:	2300      	movs	r3, #0
 800686e:	677b      	str	r3, [r7, #116]	; 0x74
 8006870:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d053      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800687a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d033      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688c:	d82c      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800688e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006892:	d02f      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006898:	d826      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800689a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689e:	d008      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a4:	d820      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d011      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80068b0:	e01a      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068b2:	4b98      	ldr	r3, [pc, #608]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	4a97      	ldr	r2, [pc, #604]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068bc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068be:	e01a      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c4:	3308      	adds	r3, #8
 80068c6:	4618      	mov	r0, r3
 80068c8:	f002 f9dc 	bl	8008c84 <RCCEx_PLL2_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068d2:	e010      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d8:	332c      	adds	r3, #44	; 0x2c
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fa6a 	bl	8008db4 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068e6:	e006      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068ee:	e002      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80068f0:	bf00      	nop
 80068f2:	e000      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80068f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80068fe:	4b85      	ldr	r3, [pc, #532]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006900:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006904:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006910:	4a80      	ldr	r2, [pc, #512]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006912:	430b      	orrs	r3, r1
 8006914:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800691e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800692e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006930:	2300      	movs	r3, #0
 8006932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006934:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d046      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006946:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800694a:	d028      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800694c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006950:	d821      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006956:	d022      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800695c:	d81b      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800695e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006962:	d01c      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006968:	d815      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696e:	d008      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006974:	d80f      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	d00e      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006980:	e009      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006986:	3308      	adds	r3, #8
 8006988:	4618      	mov	r0, r3
 800698a:	f002 f97b 	bl	8008c84 <RCCEx_PLL2_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006994:	e004      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800699c:	e000      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800699e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10d      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80069a8:	4b5a      	ldr	r3, [pc, #360]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ae:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80069b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069ba:	4a56      	ldr	r2, [pc, #344]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069c8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80069cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069d8:	663b      	str	r3, [r7, #96]	; 0x60
 80069da:	2300      	movs	r3, #0
 80069dc:	667b      	str	r3, [r7, #100]	; 0x64
 80069de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d03f      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80069e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d81e      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a1f 	.word	0x08006a1f
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a3b 	.word	0x08006a3b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a10:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	4a3f      	ldr	r2, [pc, #252]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a1c:	e00e      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a22:	332c      	adds	r3, #44	; 0x2c
 8006a24:	4618      	mov	r0, r3
 8006a26:	f002 f9c5 	bl	8008db4 <RCCEx_PLL3_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a30:	e004      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006a3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006a44:	4b33      	ldr	r3, [pc, #204]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a4a:	f023 0107 	bic.w	r1, r3, #7
 8006a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006a5e:	e003      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a76:	2300      	movs	r3, #0
 8006a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d04d      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a90:	d028      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a96:	d821      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a9c:	d024      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006aa2:	d81b      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aae:	d815      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d110      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006ac6:	e012      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006acc:	332c      	adds	r3, #44	; 0x2c
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f002 f970 	bl	8008db4 <RCCEx_PLL3_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ada:	e008      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006aec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006aee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d110      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006af6:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006afc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b08:	4a02      	ldr	r2, [pc, #8]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006b12:	bf00      	nop
 8006b14:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b2e:	2300      	movs	r3, #0
 8006b30:	657b      	str	r3, [r7, #84]	; 0x54
 8006b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f000 80b5 	beq.w	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b44:	4b9d      	ldr	r3, [pc, #628]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d113      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	4b9a      	ldr	r3, [pc, #616]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b58:	4a98      	ldr	r2, [pc, #608]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b5a:	f043 0304 	orr.w	r3, r3, #4
 8006b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b62:	4b96      	ldr	r3, [pc, #600]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b7a:	4b91      	ldr	r3, [pc, #580]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	4a90      	ldr	r2, [pc, #576]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b86:	f7fa ff1b 	bl	80019c0 <HAL_GetTick>
 8006b8a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b90:	f7fa ff16 	bl	80019c0 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d903      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ba8:	4b85      	ldr	r3, [pc, #532]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ed      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006bb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d165      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bbc:	4b7f      	ldr	r3, [pc, #508]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d023      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01b      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006be2:	4b76      	ldr	r3, [pc, #472]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bf0:	4b72      	ldr	r3, [pc, #456]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bf6:	4a71      	ldr	r2, [pc, #452]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c00:	4b6e      	ldr	r3, [pc, #440]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c06:	4a6d      	ldr	r2, [pc, #436]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c10:	4a6a      	ldr	r2, [pc, #424]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d019      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fa fecb 	bl	80019c0 <HAL_GetTick>
 8006c2a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c2e:	e00d      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fa fec6 	bl	80019c0 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006c4a:	e006      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c4c:	4b5b      	ldr	r3, [pc, #364]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0ea      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006c5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10d      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c62:	4b56      	ldr	r3, [pc, #344]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c74:	4a51      	ldr	r2, [pc, #324]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c76:	430b      	orrs	r3, r1
 8006c78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c7c:	e008      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c82:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c90:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c98:	4b48      	ldr	r3, [pc, #288]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c9e:	4a47      	ldr	r2, [pc, #284]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ca0:	f023 0304 	bic.w	r3, r3, #4
 8006ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d042      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ccc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cd0:	d022      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006cd2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cd6:	d81b      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cdc:	d011      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ce2:	d815      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d019      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cec:	d110      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 ffc5 	bl	8008c84 <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d00:	e00d      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d02:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006d0e:	e006      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d16:	e002      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006d1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d2c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006d30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d38:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d40:	e003      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d46:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d56:	643b      	str	r3, [r7, #64]	; 0x40
 8006d58:	2300      	movs	r3, #0
 8006d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d60:	460b      	mov	r3, r1
 8006d62:	4313      	orrs	r3, r2
 8006d64:	d032      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d00b      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d78:	d804      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d007      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d8a:	e004      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d94:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d112      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006da0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006da4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db0:	4a02      	ldr	r2, [pc, #8]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006db2:	430b      	orrs	r3, r1
 8006db4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006db8:	e008      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006dba:	bf00      	nop
 8006dbc:	46020c00 	.word	0x46020c00
 8006dc0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006dc8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d00c      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006de8:	4b98      	ldr	r3, [pc, #608]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dee:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dfa:	4a94      	ldr	r2, [pc, #592]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e10:	2300      	movs	r3, #0
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
 8006e14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	d019      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e2a:	d105      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e2c:	4b87      	ldr	r3, [pc, #540]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	4a86      	ldr	r2, [pc, #536]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e36:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006e38:	4b84      	ldr	r3, [pc, #528]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e3e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e4a:	4a80      	ldr	r2, [pc, #512]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d00c      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006e6e:	4b77      	ldr	r3, [pc, #476]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e80:	4972      	ldr	r1, [pc, #456]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d00c      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006ea4:	4b69      	ldr	r3, [pc, #420]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006eb6:	4965      	ldr	r1, [pc, #404]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	d00c      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006eda:	4b5c      	ldr	r3, [pc, #368]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ee0:	f023 0218 	bic.w	r2, r3, #24
 8006ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ee8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006eec:	4957      	ldr	r1, [pc, #348]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	d032      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f1c:	d105      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1e:	4b4b      	ldr	r3, [pc, #300]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	4a4a      	ldr	r2, [pc, #296]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f28:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f36:	d108      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fea0 	bl	8008c84 <RCCEx_PLL2_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006f4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006f52:	4b3e      	ldr	r3, [pc, #248]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f64:	4939      	ldr	r1, [pc, #228]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f72:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d03a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f9e:	d00e      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa4:	d815      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d017      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fae:	d110      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb0:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	4a25      	ldr	r2, [pc, #148]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fba:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006fbc:	e00e      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fe5d 	bl	8008c84 <RCCEx_PLL2_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006fd0:	e004      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006fda:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006fdc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff6:	4915      	ldr	r1, [pc, #84]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006ffe:	e003      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007000:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007004:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800701e:	460b      	mov	r3, r1
 8007020:	4313      	orrs	r3, r2
 8007022:	d00c      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800702a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800702e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007036:	4905      	ldr	r1, [pc, #20]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800703e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8007042:	4618      	mov	r0, r3
 8007044:	37e8      	adds	r7, #232	; 0xe8
 8007046:	46bd      	mov	sp, r7
 8007048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704c:	46020c00 	.word	0x46020c00

08007050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007050:	b480      	push	{r7}
 8007052:	b089      	sub	sp, #36	; 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007058:	4bad      	ldr	r3, [pc, #692]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007062:	4bab      	ldr	r3, [pc, #684]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800706c:	4ba8      	ldr	r3, [pc, #672]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	3301      	adds	r3, #1
 8007078:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800707a:	4ba5      	ldr	r3, [pc, #660]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007086:	4ba2      	ldr	r3, [pc, #648]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8123 	beq.w	80072f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d062      	beq.n	8007176 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	f200 8081 	bhi.w	80071ba <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d024      	beq.n	8007108 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d17a      	bne.n	80071ba <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b8e      	ldr	r3, [pc, #568]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80070e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ea:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007106:	e08f      	b.n	8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007108:	4b81      	ldr	r3, [pc, #516]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8007114:	4b7e      	ldr	r3, [pc, #504]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	0f1b      	lsrs	r3, r3, #28
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	e006      	b.n	800712e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8007120:	4b7b      	ldr	r3, [pc, #492]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	0f1b      	lsrs	r3, r3, #28
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	4a7b      	ldr	r2, [pc, #492]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8007130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007154:	ed97 6a02 	vldr	s12, [r7, #8]
 8007158:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800715c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007168:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800716c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007174:	e058      	b.n	8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007180:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007188:	4b61      	ldr	r3, [pc, #388]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007198:	ed97 6a02 	vldr	s12, [r7, #8]
 800719c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80071a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b8:	e036      	b.n	8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071ba:	4b55      	ldr	r3, [pc, #340]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80071c6:	4b52      	ldr	r3, [pc, #328]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0f1b      	lsrs	r3, r3, #28
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	e006      	b.n	80071e0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80071d2:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	0f1b      	lsrs	r3, r3, #28
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	4a4e      	ldr	r2, [pc, #312]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80071e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a02 	vldr	s12, [r7, #8]
 800720a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007226:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007228:	4b39      	ldr	r3, [pc, #228]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007234:	4b36      	ldr	r3, [pc, #216]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	0a5b      	lsrs	r3, r3, #9
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800724e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 2a90 	vmov	r2, s15
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e002      	b.n	800726a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800726a:	4b29      	ldr	r3, [pc, #164]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d017      	beq.n	80072a6 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007276:	4b26      	ldr	r3, [pc, #152]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007280:	ee07 3a90 	vmov	s15, r3
 8007284:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007290:	edd7 6a07 	vldr	s13, [r7, #28]
 8007294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729c:	ee17 2a90 	vmov	r2, s15
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80072ac:	4b18      	ldr	r3, [pc, #96]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d017      	beq.n	80072e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	0e1b      	lsrs	r3, r3, #24
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80072ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ce:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072de:	ee17 2a90 	vmov	r2, s15
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072e6:	e00c      	b.n	8007302 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
}
 80072ee:	e008      	b.n	8007302 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	bf00      	nop
 8007304:	3724      	adds	r7, #36	; 0x24
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	46020c00 	.word	0x46020c00
 8007314:	4b742400 	.word	0x4b742400
 8007318:	46000000 	.word	0x46000000
 800731c:	08015b34 	.word	0x08015b34

08007320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	; 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007328:	4bad      	ldr	r3, [pc, #692]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800732a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007330:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007332:	4bab      	ldr	r3, [pc, #684]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800733c:	4ba8      	ldr	r3, [pc, #672]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	3301      	adds	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800734a:	4ba5      	ldr	r3, [pc, #660]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007356:	4ba2      	ldr	r3, [pc, #648]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8123 	beq.w	80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d062      	beq.n	8007446 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b03      	cmp	r3, #3
 8007384:	f200 8081 	bhi.w	800748a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d024      	beq.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d17a      	bne.n	800748a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b8e      	ldr	r3, [pc, #568]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80073b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ba:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d6:	e08f      	b.n	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80073d8:	4b81      	ldr	r3, [pc, #516]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80073e4:	4b7e      	ldr	r3, [pc, #504]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	0f1b      	lsrs	r3, r3, #28
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	e006      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80073f0:	4b7b      	ldr	r3, [pc, #492]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	0f1b      	lsrs	r3, r3, #28
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	4a7b      	ldr	r2, [pc, #492]	; (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007424:	ed97 6a02 	vldr	s12, [r7, #8]
 8007428:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800742c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007438:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800743c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007444:	e058      	b.n	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007450:	eddf 6a64 	vldr	s13, [pc, #400]	; 80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007458:	4b61      	ldr	r3, [pc, #388]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800745a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007468:	ed97 6a02 	vldr	s12, [r7, #8]
 800746c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007470:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007474:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007488:	e036      	b.n	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800748a:	4b55      	ldr	r3, [pc, #340]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007496:	4b52      	ldr	r3, [pc, #328]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	0f1b      	lsrs	r3, r3, #28
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80074a2:	4b4f      	ldr	r3, [pc, #316]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	0f1b      	lsrs	r3, r3, #28
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	4a4e      	ldr	r2, [pc, #312]	; (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80074b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074da:	eddf 5a43 	vldr	s11, [pc, #268]	; 80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80074f8:	4b39      	ldr	r3, [pc, #228]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d017      	beq.n	8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007504:	4b36      	ldr	r3, [pc, #216]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007508:	0a5b      	lsrs	r3, r3, #9
 800750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800751e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	ee17 2a90 	vmov	r2, s15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e002      	b.n	800753a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800753a:	4b29      	ldr	r3, [pc, #164]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d017      	beq.n	8007576 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007546:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007560:	edd7 6a07 	vldr	s13, [r7, #28]
 8007564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756c:	ee17 2a90 	vmov	r2, s15
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	605a      	str	r2, [r3, #4]
 8007574:	e002      	b.n	800757c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800757c:	4b18      	ldr	r3, [pc, #96]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d017      	beq.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800759a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ae:	ee17 2a90 	vmov	r2, s15
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075b6:	e00c      	b.n	80075d2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
}
 80075be:	e008      	b.n	80075d2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]
}
 80075d2:	bf00      	nop
 80075d4:	3724      	adds	r7, #36	; 0x24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	46020c00 	.word	0x46020c00
 80075e4:	4b742400 	.word	0x4b742400
 80075e8:	46000000 	.word	0x46000000
 80075ec:	08015b34 	.word	0x08015b34

080075f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80075f8:	4bad      	ldr	r3, [pc, #692]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007600:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007602:	4bab      	ldr	r3, [pc, #684]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800760c:	4ba8      	ldr	r3, [pc, #672]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	0a1b      	lsrs	r3, r3, #8
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	3301      	adds	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800761a:	4ba5      	ldr	r3, [pc, #660]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007626:	4ba2      	ldr	r3, [pc, #648]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8123 	beq.w	8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d062      	beq.n	8007716 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b03      	cmp	r3, #3
 8007654:	f200 8081 	bhi.w	800775a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d024      	beq.n	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d17a      	bne.n	800775a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b8e      	ldr	r3, [pc, #568]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007686:	ed97 6a02 	vldr	s12, [r7, #8]
 800768a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80076a6:	e08f      	b.n	80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076a8:	4b81      	ldr	r3, [pc, #516]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80076b4:	4b7e      	ldr	r3, [pc, #504]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	0f1b      	lsrs	r3, r3, #28
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80076c0:	4b7b      	ldr	r3, [pc, #492]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	0f1b      	lsrs	r3, r3, #28
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	4a7b      	ldr	r2, [pc, #492]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80076d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80076f8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80076fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007708:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800770c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007714:	e058      	b.n	80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007720:	eddf 6a64 	vldr	s13, [pc, #400]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007728:	4b61      	ldr	r3, [pc, #388]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800772a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007730:	ee07 3a90 	vmov	s15, r3
 8007734:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007738:	ed97 6a02 	vldr	s12, [r7, #8]
 800773c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007740:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007744:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007758:	e036      	b.n	80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800775a:	4b55      	ldr	r3, [pc, #340]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8007766:	4b52      	ldr	r3, [pc, #328]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	0f1b      	lsrs	r3, r3, #28
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007772:	4b4f      	ldr	r3, [pc, #316]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	0f1b      	lsrs	r3, r3, #28
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	4a4e      	ldr	r2, [pc, #312]	; (80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077aa:	eddf 5a43 	vldr	s11, [pc, #268]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80077ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80077c8:	4b39      	ldr	r3, [pc, #228]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d017      	beq.n	8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077d4:	4b36      	ldr	r3, [pc, #216]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	0a5b      	lsrs	r3, r3, #9
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80077e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fa:	ee17 2a90 	vmov	r2, s15
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e002      	b.n	800780a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800780a:	4b29      	ldr	r3, [pc, #164]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d017      	beq.n	8007846 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007816:	4b26      	ldr	r3, [pc, #152]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	0c1b      	lsrs	r3, r3, #16
 800781c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800782c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007830:	edd7 6a07 	vldr	s13, [r7, #28]
 8007834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783c:	ee17 2a90 	vmov	r2, s15
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
 8007844:	e002      	b.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800784c:	4b18      	ldr	r3, [pc, #96]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d017      	beq.n	8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007858:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 2a90 	vmov	r2, s15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007886:	e00c      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	609a      	str	r2, [r3, #8]
}
 800788e:	e008      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	609a      	str	r2, [r3, #8]
}
 80078a2:	bf00      	nop
 80078a4:	3724      	adds	r7, #36	; 0x24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	46020c00 	.word	0x46020c00
 80078b4:	4b742400 	.word	0x4b742400
 80078b8:	46000000 	.word	0x46000000
 80078bc:	08015b34 	.word	0x08015b34

080078c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80078ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ce:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80078d2:	430b      	orrs	r3, r1
 80078d4:	d145      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80078d6:	4ba7      	ldr	r3, [pc, #668]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80078e2:	4ba4      	ldr	r3, [pc, #656]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d108      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f6:	d104      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80078f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
 80078fe:	f001 b9b3 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007902:	4b9c      	ldr	r3, [pc, #624]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800790c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007910:	d114      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007918:	d110      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800791a:	4b96      	ldr	r3, [pc, #600]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800791c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007928:	d103      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800792a:	23fa      	movs	r3, #250	; 0xfa
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800792e:	f001 b99b 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007932:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007938:	f001 b996 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800793c:	4b8d      	ldr	r3, [pc, #564]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007948:	d107      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007950:	d103      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007952:	4b89      	ldr	r3, [pc, #548]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	f001 b987 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
 800795e:	f001 b983 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007966:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800796a:	430b      	orrs	r3, r1
 800796c:	d151      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800796e:	4b81      	ldr	r3, [pc, #516]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007974:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007978:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d035      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d841      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2b60      	cmp	r3, #96	; 0x60
 800798a:	d02a      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b60      	cmp	r3, #96	; 0x60
 8007990:	d83b      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b40      	cmp	r3, #64	; 0x40
 8007996:	d009      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d835      	bhi.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d012      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079aa:	e02e      	b.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fb4d 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ba:	f001 b955 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079be:	f107 0318 	add.w	r3, r7, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fcac 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079cc:	f001 b94c 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d0:	f107 030c 	add.w	r3, r7, #12
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fe0b 	bl	80075f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079de:	f001 b943 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079e8:	f001 b93e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ec:	4b61      	ldr	r3, [pc, #388]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d103      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80079fa:	4b60      	ldr	r3, [pc, #384]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079fe:	f001 b933 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a06:	f001 b92f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0e:	f001 b92b 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a16:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	d158      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007a1e:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a30:	d03b      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a38:	d846      	bhi.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a40:	d02e      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a48:	d83e      	bhi.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a50:	d00b      	beq.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a58:	d836      	bhi.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a66:	d012      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007a68:	e02e      	b.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff faee 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a78:	f001 b8f6 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7c:	f107 0318 	add.w	r3, r7, #24
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff fc4d 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a8a:	f001 b8ed 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fdac 	bl	80075f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a9c:	f001 b8e4 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007aa0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa6:	f001 b8df 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aaa:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab6:	d103      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007ab8:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007abc:	f001 b8d4 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ac4:	f001 b8d0 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007acc:	f001 b8cc 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	d126      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007ae8:	4b22      	ldr	r3, [pc, #136]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af4:	d106      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d103      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007afc:	4b1f      	ldr	r3, [pc, #124]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
 8007b00:	f001 b8b2 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007b04:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b10:	d107      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b18:	d103      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007b1a:	4b19      	ldr	r3, [pc, #100]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1e:	f001 b8a3 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
 8007b26:	f001 b89f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007b32:	430b      	orrs	r3, r1
 8007b34:	d16e      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b3c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b48:	d03d      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b50:	d85c      	bhi.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b58:	d014      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b60:	d854      	bhi.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01f      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b6e:	d012      	beq.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007b70:	e04c      	b.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b72:	bf00      	nop
 8007b74:	46020c00 	.word	0x46020c00
 8007b78:	0007a120 	.word	0x0007a120
 8007b7c:	00f42400 	.word	0x00f42400
 8007b80:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fa61 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	f001 b869 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b96:	f107 0318 	add.w	r3, r7, #24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fbc0 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba4:	f001 b860 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007ba8:	4ba7      	ldr	r3, [pc, #668]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb4:	d103      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007bb6:	4ba5      	ldr	r3, [pc, #660]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bba:	f001 b855 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bc2:	f001 b851 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bc6:	4ba0      	ldr	r3, [pc, #640]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d118      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bd2:	4b9d      	ldr	r3, [pc, #628]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007bde:	4b9a      	ldr	r3, [pc, #616]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	0e1b      	lsrs	r3, r3, #24
 8007be4:	f003 030f 	and.w	r3, r3, #15
 8007be8:	e006      	b.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007bea:	4b97      	ldr	r3, [pc, #604]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	0e1b      	lsrs	r3, r3, #24
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	4a95      	ldr	r2, [pc, #596]	; (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c00:	f001 b832 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c08:	f001 b82e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c10:	f001 b82a 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c18:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	d17f      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c20:	4b89      	ldr	r3, [pc, #548]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d165      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007c32:	4b85      	ldr	r3, [pc, #532]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c38:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c44:	d034      	beq.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c4c:	d853      	bhi.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c54:	d00b      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5c:	d84b      	bhi.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d016      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c6a:	d009      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007c6c:	e043      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff f9ec 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c7c:	f000 bff4 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c80:	f107 0318 	add.w	r3, r7, #24
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fb4b 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c8e:	f000 bfeb 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007c92:	4b6d      	ldr	r3, [pc, #436]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9e:	d103      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007ca0:	4b6a      	ldr	r3, [pc, #424]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007ca4:	f000 bfe0 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cac:	f000 bfdc 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007cb0:	4b65      	ldr	r3, [pc, #404]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d118      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cbc:	4b62      	ldr	r3, [pc, #392]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007cc8:	4b5f      	ldr	r3, [pc, #380]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	0e1b      	lsrs	r3, r3, #24
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	e006      	b.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007cd4:	4b5c      	ldr	r3, [pc, #368]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	0e1b      	lsrs	r3, r3, #24
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	4a5b      	ldr	r2, [pc, #364]	; (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007cea:	f000 bfbd 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cf2:	f000 bfb9 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007cfa:	f000 bfb5 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d04:	d108      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff f9a0 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	f000 bfa8 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	f000 bfa4 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	1e51      	subs	r1, r2, #1
 8007d26:	430b      	orrs	r3, r1
 8007d28:	d136      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007d2a:	4b47      	ldr	r3, [pc, #284]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007d3c:	f7fe fae2 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 8007d40:	6378      	str	r0, [r7, #52]	; 0x34
 8007d42:	f000 bf91 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d104      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d4c:	f7fe f9a4 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007d50:	6378      	str	r0, [r7, #52]	; 0x34
 8007d52:	f000 bf89 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007d56:	4b3c      	ldr	r3, [pc, #240]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d62:	d106      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d103      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007d6a:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	f000 bf7b 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007d72:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d107      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d104      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	f000 bf6c 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
 8007d94:	f000 bf68 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9c:	1e91      	subs	r1, r2, #2
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	d136      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007da2:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da8:	f003 030c 	and.w	r3, r3, #12
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007db4:	f7fe fa92 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8007db8:	6378      	str	r0, [r7, #52]	; 0x34
 8007dba:	f000 bf55 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d104      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dc4:	f7fe f968 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007dc8:	6378      	str	r0, [r7, #52]	; 0x34
 8007dca:	f000 bf4d 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007dce:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dda:	d106      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d103      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007de2:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
 8007de6:	f000 bf3f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007dea:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d107      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d104      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
 8007e04:	f000 bf30 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0c:	f000 bf2c 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e14:	1f11      	subs	r1, r2, #4
 8007e16:	430b      	orrs	r3, r1
 8007e18:	d13f      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e24:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f7fe fa56 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8007e30:	6378      	str	r0, [r7, #52]	; 0x34
 8007e32:	f000 bf19 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d10d      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e3c:	f7fe f92c 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007e40:	6378      	str	r0, [r7, #52]	; 0x34
 8007e42:	f000 bf11 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e46:	bf00      	nop
 8007e48:	46020c00 	.word	0x46020c00
 8007e4c:	02dc6c00 	.word	0x02dc6c00
 8007e50:	08015b34 	.word	0x08015b34
 8007e54:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007e58:	4ba6      	ldr	r3, [pc, #664]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e64:	d106      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d103      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007e6c:	4ba2      	ldr	r3, [pc, #648]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e70:	f000 befa 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e74:	4b9f      	ldr	r3, [pc, #636]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d107      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b30      	cmp	r3, #48	; 0x30
 8007e86:	d104      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	f000 beeb 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
 8007e96:	f000 bee7 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9e:	f1a2 0108 	sub.w	r1, r2, #8
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	d136      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ea6:	4b93      	ldr	r3, [pc, #588]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007eb8:	f7fe fa10 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8007ebc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ebe:	f000 bed3 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d104      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ec8:	f7fe f8e6 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007ecc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ece:	f000 becb 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007ed2:	4b88      	ldr	r3, [pc, #544]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ede:	d106      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d103      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007ee6:	4b84      	ldr	r3, [pc, #528]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eea:	f000 bebd 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007eee:	4b81      	ldr	r3, [pc, #516]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d107      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2bc0      	cmp	r3, #192	; 0xc0
 8007f00:	d104      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
 8007f08:	f000 beae 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f10:	f000 beaa 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	f1a2 0110 	sub.w	r1, r2, #16
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	d139      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f20:	4b74      	ldr	r3, [pc, #464]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f32:	f7fe f9d3 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8007f36:	6378      	str	r0, [r7, #52]	; 0x34
 8007f38:	f000 be96 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f42:	d104      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f44:	f7fe f8a8 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007f48:	6378      	str	r0, [r7, #52]	; 0x34
 8007f4a:	f000 be8d 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007f4e:	4b69      	ldr	r3, [pc, #420]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f5a:	d107      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f62:	d103      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007f64:	4b64      	ldr	r3, [pc, #400]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
 8007f68:	f000 be7e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f6c:	4b61      	ldr	r3, [pc, #388]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d108      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f80:	d104      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
 8007f88:	f000 be6e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f90:	f000 be6a 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f98:	f1a2 0120 	sub.w	r1, r2, #32
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	d158      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007fa0:	4b54      	ldr	r3, [pc, #336]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007fb2:	f7fe f9bb 	bl	800632c <HAL_RCC_GetPCLK3Freq>
 8007fb6:	6378      	str	r0, [r7, #52]	; 0x34
 8007fb8:	f000 be56 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d104      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fe f869 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8007fc6:	6378      	str	r0, [r7, #52]	; 0x34
 8007fc8:	f000 be4e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007fcc:	4b49      	ldr	r3, [pc, #292]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d103      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007fe0:	4b45      	ldr	r3, [pc, #276]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe4:	f000 be40 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007fe8:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d107      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d104      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	f000 be31 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008006:	4b3b      	ldr	r3, [pc, #236]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b20      	cmp	r3, #32
 8008010:	d11b      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	2b04      	cmp	r3, #4
 8008016:	d118      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008018:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008024:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	0e1b      	lsrs	r3, r3, #24
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	e006      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008030:	4b30      	ldr	r3, [pc, #192]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008036:	041b      	lsls	r3, r3, #16
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	4a2f      	ldr	r2, [pc, #188]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
 8008046:	f000 be0f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	f000 be0b 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800805a:	430b      	orrs	r3, r1
 800805c:	d172      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008064:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008070:	d104      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008072:	f7fe f811 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008076:	6378      	str	r0, [r7, #52]	; 0x34
 8008078:	f000 bdf6 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008082:	d108      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008084:	f107 0318 	add.w	r3, r7, #24
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff f949 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	f000 bde9 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800809c:	f7fe f904 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80080a0:	6378      	str	r0, [r7, #52]	; 0x34
 80080a2:	f000 bde1 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80080ac:	d128      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d118      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080ba:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	0e1b      	lsrs	r3, r3, #24
 80080cc:	f003 030f 	and.w	r3, r3, #15
 80080d0:	e006      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80080d2:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080d8:	041b      	lsls	r3, r3, #16
 80080da:	0e1b      	lsrs	r3, r3, #24
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	4a06      	ldr	r2, [pc, #24]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80080e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
 80080e8:	f000 bdbe 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34
 80080f0:	f000 bdba 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80080f4:	46020c00 	.word	0x46020c00
 80080f8:	00f42400 	.word	0x00f42400
 80080fc:	08015b34 	.word	0x08015b34
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008100:	4baf      	ldr	r3, [pc, #700]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008114:	d103      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008116:	4bab      	ldr	r3, [pc, #684]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	f000 bda5 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800811e:	4ba8      	ldr	r3, [pc, #672]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812a:	d107      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008132:	d103      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8008134:	4ba3      	ldr	r3, [pc, #652]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
 8008138:	f000 bd96 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
 8008140:	f000 bd92 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008148:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800814c:	430b      	orrs	r3, r1
 800814e:	d158      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008150:	4b9b      	ldr	r3, [pc, #620]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	2b04      	cmp	r3, #4
 8008160:	d84b      	bhi.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	080081a1 	.word	0x080081a1
 800816c:	0800817d 	.word	0x0800817d
 8008170:	0800818f 	.word	0x0800818f
 8008174:	080081ab 	.word	0x080081ab
 8008178:	080081b5 	.word	0x080081b5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800817c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe ff65 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800818a:	f000 bd6d 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818e:	f107 030c 	add.w	r3, r7, #12
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fa2c 	bl	80075f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800819c:	f000 bd64 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80081a0:	f7fe f882 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80081a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081a6:	f000 bd5f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80081aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081b0:	f000 bd5a 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081b4:	4b82      	ldr	r3, [pc, #520]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d118      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081c0:	4b7f      	ldr	r3, [pc, #508]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80081cc:	4b7c      	ldr	r3, [pc, #496]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0e1b      	lsrs	r3, r3, #24
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	e006      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80081d8:	4b79      	ldr	r3, [pc, #484]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	4a78      	ldr	r2, [pc, #480]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80081e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081ee:	f000 bd3b 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081f6:	f000 bd37 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081fe:	f000 bd33 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008206:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800820a:	430b      	orrs	r3, r1
 800820c:	d167      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800820e:	4b6c      	ldr	r3, [pc, #432]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008214:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008218:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008220:	d036      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008228:	d855      	bhi.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008230:	d029      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008238:	d84d      	bhi.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008240:	d013      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008248:	d845      	bhi.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	2b00      	cmp	r3, #0
 800824e:	d015      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008256:	d13e      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fef7 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008266:	f000 bcff 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826a:	f107 030c 	add.w	r3, r7, #12
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff f9be 	bl	80075f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008278:	f000 bcf6 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800827c:	f7fe f814 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 8008280:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008282:	f000 bcf1 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008286:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828c:	f000 bcec 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008290:	4b4b      	ldr	r3, [pc, #300]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b20      	cmp	r3, #32
 800829a:	d118      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800829c:	4b48      	ldr	r3, [pc, #288]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80082a8:	4b45      	ldr	r3, [pc, #276]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	0e1b      	lsrs	r3, r3, #24
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	e006      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80082b4:	4b42      	ldr	r3, [pc, #264]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	4a41      	ldr	r2, [pc, #260]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80082c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082ca:	f000 bccd 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d2:	f000 bcc9 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082da:	f000 bcc5 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80082de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80082e6:	430b      	orrs	r3, r1
 80082e8:	d14c      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80082ea:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80082fc:	f7fd ffee 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8008300:	6378      	str	r0, [r7, #52]	; 0x34
 8008302:	f000 bcb1 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830c:	d104      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800830e:	f7fd fec3 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008312:	6378      	str	r0, [r7, #52]	; 0x34
 8008314:	f000 bca8 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008318:	4b29      	ldr	r3, [pc, #164]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008324:	d107      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832c:	d103      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800832e:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
 8008332:	f000 bc99 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008336:	4b22      	ldr	r3, [pc, #136]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	d11c      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008348:	d118      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800834a:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	e006      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	0e1b      	lsrs	r3, r3, #24
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
 8008378:	f000 bc76 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
 8008380:	f000 bc72 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008388:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800838c:	430b      	orrs	r3, r1
 800838e:	d153      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008396:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800839a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083a2:	f7fd ff9b 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 80083a6:	6378      	str	r0, [r7, #52]	; 0x34
 80083a8:	f000 bc5e 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b2:	d10b      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80083b4:	f7fd fe70 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80083b8:	6378      	str	r0, [r7, #52]	; 0x34
 80083ba:	f000 bc55 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80083be:	bf00      	nop
 80083c0:	46020c00 	.word	0x46020c00
 80083c4:	00f42400 	.word	0x00f42400
 80083c8:	08015b34 	.word	0x08015b34
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80083cc:	4ba1      	ldr	r3, [pc, #644]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d8:	d107      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e0:	d103      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80083e2:	4b9d      	ldr	r3, [pc, #628]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
 80083e6:	f000 bc3f 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80083ea:	4b9a      	ldr	r3, [pc, #616]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d11c      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083fc:	d118      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083fe:	4b95      	ldr	r3, [pc, #596]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800840a:	4b92      	ldr	r3, [pc, #584]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008416:	4b8f      	ldr	r3, [pc, #572]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	0e1b      	lsrs	r3, r3, #24
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	4a8d      	ldr	r2, [pc, #564]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842a:	637b      	str	r3, [r7, #52]	; 0x34
 800842c:	f000 bc1c 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	637b      	str	r3, [r7, #52]	; 0x34
 8008434:	f000 bc18 	b.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008440:	430b      	orrs	r3, r1
 8008442:	d151      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008444:	4b83      	ldr	r3, [pc, #524]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800844a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800844e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2bc0      	cmp	r3, #192	; 0xc0
 8008454:	d024      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	2bc0      	cmp	r3, #192	; 0xc0
 800845a:	d842      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d00d      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	2b80      	cmp	r3, #128	; 0x80
 8008466:	d83c      	bhi.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d011      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008474:	e035      	b.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008476:	f7fd ff59 	bl	800632c <HAL_RCC_GetPCLK3Freq>
 800847a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800847c:	e3f4      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800847e:	4b75      	ldr	r3, [pc, #468]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848a:	d102      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800848c:	4b72      	ldr	r3, [pc, #456]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008490:	e3ea      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008496:	e3e7      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008498:	f7fd fdfe 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800849c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800849e:	e3e3      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084a0:	4b6c      	ldr	r3, [pc, #432]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d117      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084ac:	4b69      	ldr	r3, [pc, #420]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80084b8:	4b66      	ldr	r3, [pc, #408]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0e1b      	lsrs	r3, r3, #24
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	e006      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80084c4:	4b63      	ldr	r3, [pc, #396]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	0e1b      	lsrs	r3, r3, #24
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	4a62      	ldr	r2, [pc, #392]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80084d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084da:	e3c5      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e0:	e3c2      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e6:	e3bf      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80084e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ec:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80084f0:	430b      	orrs	r3, r1
 80084f2:	d147      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80084f4:	4b57      	ldr	r3, [pc, #348]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008506:	f7fd fee9 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 800850a:	6378      	str	r0, [r7, #52]	; 0x34
 800850c:	e3ac      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	d103      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008516:	f7fd fdbf 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800851a:	6378      	str	r0, [r7, #52]	; 0x34
 800851c:	e3a4      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800851e:	4b4d      	ldr	r3, [pc, #308]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852a:	d106      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008532:	d102      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8008534:	4b48      	ldr	r3, [pc, #288]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	e396      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800853a:	4b46      	ldr	r3, [pc, #280]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b20      	cmp	r3, #32
 8008544:	d11b      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800854c:	d117      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800854e:	4b41      	ldr	r3, [pc, #260]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800855a:	4b3e      	ldr	r3, [pc, #248]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	0e1b      	lsrs	r3, r3, #24
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	e006      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8008566:	4b3b      	ldr	r3, [pc, #236]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	0e1b      	lsrs	r3, r3, #24
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	4a39      	ldr	r2, [pc, #228]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
 800857c:	e374      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
 8008582:	e371      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008588:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800858c:	430b      	orrs	r3, r1
 800858e:	d16a      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008590:	4b30      	ldr	r3, [pc, #192]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d120      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085a2:	4b2c      	ldr	r3, [pc, #176]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d117      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085ae:	4b29      	ldr	r3, [pc, #164]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80085ba:	4b26      	ldr	r3, [pc, #152]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	0e1b      	lsrs	r3, r3, #24
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	e006      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80085c6:	4b23      	ldr	r3, [pc, #140]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	0e1b      	lsrs	r3, r3, #24
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	4a21      	ldr	r2, [pc, #132]	; (800865c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80085d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
 80085dc:	e344      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
 80085e2:	e341      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f2:	d112      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fa:	d10e      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085fc:	4b15      	ldr	r3, [pc, #84]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800860a:	d102      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800860c:	23fa      	movs	r3, #250	; 0xfa
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008610:	e32a      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008612:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008618:	e326      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008626:	d106      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800862e:	d102      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8008630:	4b09      	ldr	r3, [pc, #36]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008632:	637b      	str	r3, [r7, #52]	; 0x34
 8008634:	e318      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b02      	cmp	r3, #2
 8008642:	d10d      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864a:	d109      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800864c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
 8008652:	e309      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008654:	46020c00 	.word	0x46020c00
 8008658:	00f42400 	.word	0x00f42400
 800865c:	08015b34 	.word	0x08015b34
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	e300      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800866e:	430b      	orrs	r3, r1
 8008670:	d164      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008672:	4ba2      	ldr	r3, [pc, #648]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800867c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b00      	cmp	r3, #0
 8008682:	d120      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008684:	4b9d      	ldr	r3, [pc, #628]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b20      	cmp	r3, #32
 800868e:	d117      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008690:	4b9a      	ldr	r3, [pc, #616]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800869c:	4b97      	ldr	r3, [pc, #604]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	0e1b      	lsrs	r3, r3, #24
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	e006      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80086a8:	4b94      	ldr	r3, [pc, #592]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086ae:	041b      	lsls	r3, r3, #16
 80086b0:	0e1b      	lsrs	r3, r3, #24
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	4a92      	ldr	r2, [pc, #584]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80086b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
 80086be:	e2d3      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	e2d0      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80086c6:	4b8d      	ldr	r3, [pc, #564]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086d4:	d112      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086dc:	d10e      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086de:	4b87      	ldr	r3, [pc, #540]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ec:	d102      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80086ee:	23fa      	movs	r3, #250	; 0xfa
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086f2:	e2b9      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80086f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086fa:	e2b5      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80086fc:	4b7f      	ldr	r3, [pc, #508]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008708:	d106      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008710:	d102      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8008712:	4b7c      	ldr	r3, [pc, #496]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
 8008716:	e2a7      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008718:	4b78      	ldr	r3, [pc, #480]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800871a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b02      	cmp	r3, #2
 8008724:	d107      	bne.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800872c:	d103      	bne.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800872e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008732:	637b      	str	r3, [r7, #52]	; 0x34
 8008734:	e298      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	637b      	str	r3, [r7, #52]	; 0x34
 800873a:	e295      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800873c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008740:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008744:	430b      	orrs	r3, r1
 8008746:	d147      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008748:	4b6c      	ldr	r3, [pc, #432]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800874a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800874e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008752:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	d103      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800875a:	f7fd fdbf 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 800875e:	6378      	str	r0, [r7, #52]	; 0x34
 8008760:	e282      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008762:	4b66      	ldr	r3, [pc, #408]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800876c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008770:	d112      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008778:	d10e      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800877a:	4b60      	ldr	r3, [pc, #384]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800877c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008788:	d102      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800878a:	23fa      	movs	r3, #250	; 0xfa
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800878e:	e26b      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008790:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008796:	e267      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008798:	4b58      	ldr	r3, [pc, #352]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a4:	d106      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087ac:	d102      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80087ae:	4b55      	ldr	r3, [pc, #340]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
 80087b2:	e259      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80087b4:	4b51      	ldr	r3, [pc, #324]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d107      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80087c8:	d103      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80087ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
 80087d0:	e24a      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
 80087d6:	e247      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80087d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087dc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80087e0:	430b      	orrs	r3, r1
 80087e2:	d12d      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80087e4:	4b45      	ldr	r3, [pc, #276]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087ea:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80087ee:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80087f0:	4b42      	ldr	r3, [pc, #264]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fc:	d105      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008804:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008806:	637b      	str	r3, [r7, #52]	; 0x34
 8008808:	e22e      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008810:	d107      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fc1a 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
 8008820:	e222      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008828:	d107      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882a:	f107 0318 	add.w	r3, r7, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fd76 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	e216      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
 800883e:	e213      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008844:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008848:	430b      	orrs	r3, r1
 800884a:	d15d      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800884c:	4b2b      	ldr	r3, [pc, #172]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800884e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008852:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008856:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800885e:	d028      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008866:	d845      	bhi.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800886e:	d013      	beq.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008876:	d83d      	bhi.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008884:	d004      	beq.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008886:	e035      	b.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008888:	f7fd fd3c 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 800888c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800888e:	e1eb      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008890:	f7fd fc02 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008894:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008896:	e1e7      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008898:	4b18      	ldr	r3, [pc, #96]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80088a6:	4b17      	ldr	r3, [pc, #92]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088aa:	e1dd      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088b0:	e1da      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d117      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	0e1b      	lsrs	r3, r3, #24
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	e006      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	0e1b      	lsrs	r3, r3, #24
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	4a06      	ldr	r2, [pc, #24]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80088e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088ec:	e1bc      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088f2:	e1b9      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088f8:	e1b6      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80088fa:	bf00      	nop
 80088fc:	46020c00 	.word	0x46020c00
 8008900:	08015b34 	.word	0x08015b34
 8008904:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008910:	430b      	orrs	r3, r1
 8008912:	d156      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008914:	4ba5      	ldr	r3, [pc, #660]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800891a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800891e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008926:	d028      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800892e:	d845      	bhi.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008936:	d013      	beq.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893e:	d83d      	bhi.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894c:	d004      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800894e:	e035      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008950:	f7fd fcc4 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8008954:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008956:	e187      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008958:	f7fd fb9e 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800895c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800895e:	e183      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008960:	4b92      	ldr	r3, [pc, #584]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896c:	d102      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800896e:	4b90      	ldr	r3, [pc, #576]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008970:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008972:	e179      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008978:	e176      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800897a:	4b8c      	ldr	r3, [pc, #560]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	d117      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008986:	4b89      	ldr	r3, [pc, #548]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008992:	4b86      	ldr	r3, [pc, #536]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	0e1b      	lsrs	r3, r3, #24
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800899e:	4b83      	ldr	r3, [pc, #524]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	0e1b      	lsrs	r3, r3, #24
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	4a81      	ldr	r2, [pc, #516]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80089ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089b4:	e158      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089ba:	e155      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089c0:	e152      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80089ca:	430b      	orrs	r3, r1
 80089cc:	d177      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80089ce:	4b77      	ldr	r3, [pc, #476]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089d4:	f003 0318 	and.w	r3, r3, #24
 80089d8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b18      	cmp	r3, #24
 80089de:	d86b      	bhi.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80089e0:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	08008a4d 	.word	0x08008a4d
 80089ec:	08008ab9 	.word	0x08008ab9
 80089f0:	08008ab9 	.word	0x08008ab9
 80089f4:	08008ab9 	.word	0x08008ab9
 80089f8:	08008ab9 	.word	0x08008ab9
 80089fc:	08008ab9 	.word	0x08008ab9
 8008a00:	08008ab9 	.word	0x08008ab9
 8008a04:	08008ab9 	.word	0x08008ab9
 8008a08:	08008a55 	.word	0x08008a55
 8008a0c:	08008ab9 	.word	0x08008ab9
 8008a10:	08008ab9 	.word	0x08008ab9
 8008a14:	08008ab9 	.word	0x08008ab9
 8008a18:	08008ab9 	.word	0x08008ab9
 8008a1c:	08008ab9 	.word	0x08008ab9
 8008a20:	08008ab9 	.word	0x08008ab9
 8008a24:	08008ab9 	.word	0x08008ab9
 8008a28:	08008a5d 	.word	0x08008a5d
 8008a2c:	08008ab9 	.word	0x08008ab9
 8008a30:	08008ab9 	.word	0x08008ab9
 8008a34:	08008ab9 	.word	0x08008ab9
 8008a38:	08008ab9 	.word	0x08008ab9
 8008a3c:	08008ab9 	.word	0x08008ab9
 8008a40:	08008ab9 	.word	0x08008ab9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008a77 	.word	0x08008a77
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008a4c:	f7fd fc6e 	bl	800632c <HAL_RCC_GetPCLK3Freq>
 8008a50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a52:	e109      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a54:	f7fd fb20 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008a58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a5a:	e105      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a5c:	4b53      	ldr	r3, [pc, #332]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a68:	d102      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008a6a:	4b51      	ldr	r3, [pc, #324]	; (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a6e:	e0fb      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a74:	e0f8      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a76:	4b4d      	ldr	r3, [pc, #308]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d117      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a82:	4b4a      	ldr	r3, [pc, #296]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008a8e:	4b47      	ldr	r3, [pc, #284]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	0e1b      	lsrs	r3, r3, #24
 8008a94:	f003 030f 	and.w	r3, r3, #15
 8008a98:	e006      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008a9a:	4b44      	ldr	r3, [pc, #272]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	0e1b      	lsrs	r3, r3, #24
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	4a42      	ldr	r2, [pc, #264]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ab0:	e0da      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ab6:	e0d7      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008abc:	e0d4      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	d155      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008aca:	4b38      	ldr	r3, [pc, #224]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ad0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008adc:	d013      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ae4:	d844      	bhi.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aec:	d013      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af4:	d83c      	bhi.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d014      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b02:	d014      	beq.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008b04:	e034      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b06:	f107 0318 	add.w	r3, r7, #24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fc08 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b14:	e0a8      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fa98 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b24:	e0a0      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fd fab7 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8008b2a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b2c:	e09c      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b2e:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d117      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b3a:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008b46:	4b19      	ldr	r3, [pc, #100]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	0e1b      	lsrs	r3, r3, #24
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	e006      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008b52:	4b16      	ldr	r3, [pc, #88]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	0e1b      	lsrs	r3, r3, #24
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b68:	e07e      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b6e:	e07b      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b74:	e078      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d138      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b8c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008b8e:	4b07      	ldr	r3, [pc, #28]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d10d      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba8:	e05e      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008baa:	bf00      	nop
 8008bac:	46020c00 	.word	0x46020c00
 8008bb0:	00f42400 	.word	0x00f42400
 8008bb4:	08015b34 	.word	0x08015b34
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008bb8:	4b2e      	ldr	r3, [pc, #184]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bc6:	d112      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d10e      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bde:	d102      	bne.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008be0:	23fa      	movs	r3, #250	; 0xfa
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008be4:	e040      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008be6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bec:	e03c      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	e039      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	d131      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008c00:	4b1c      	ldr	r3, [pc, #112]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008c0c:	4b19      	ldr	r3, [pc, #100]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c18:	d105      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008c20:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
 8008c24:	e020      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c40:	e012      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c56:	d102      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008c58:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5c:	e004      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
 8008c62:	e001      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3738      	adds	r7, #56	; 0x38
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	46020c00 	.word	0x46020c00
 8008c78:	02dc6c00 	.word	0x02dc6c00
 8008c7c:	016e3600 	.word	0x016e3600
 8008c80:	00f42400 	.word	0x00f42400

08008c84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008c8c:	4b47      	ldr	r3, [pc, #284]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a46      	ldr	r2, [pc, #280]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c98:	f7f8 fe92 	bl	80019c0 <HAL_GetTick>
 8008c9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c9e:	e008      	b.n	8008cb2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ca0:	f7f8 fe8e 	bl	80019c0 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d901      	bls.n	8008cb2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e077      	b.n	8008da2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cb2:	4b3e      	ldr	r3, [pc, #248]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f0      	bne.n	8008ca0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008cbe:	4b3b      	ldr	r3, [pc, #236]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6811      	ldr	r1, [r2, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6852      	ldr	r2, [r2, #4]
 8008cd2:	3a01      	subs	r2, #1
 8008cd4:	0212      	lsls	r2, r2, #8
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	4934      	ldr	r1, [pc, #208]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008cde:	4b33      	ldr	r3, [pc, #204]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ce2:	4b33      	ldr	r3, [pc, #204]	; (8008db0 <RCCEx_PLL2_Config+0x12c>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6892      	ldr	r2, [r2, #8]
 8008cea:	3a01      	subs	r2, #1
 8008cec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	68d2      	ldr	r2, [r2, #12]
 8008cf4:	3a01      	subs	r2, #1
 8008cf6:	0252      	lsls	r2, r2, #9
 8008cf8:	b292      	uxth	r2, r2
 8008cfa:	4311      	orrs	r1, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6912      	ldr	r2, [r2, #16]
 8008d00:	3a01      	subs	r2, #1
 8008d02:	0412      	lsls	r2, r2, #16
 8008d04:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d08:	4311      	orrs	r1, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6952      	ldr	r2, [r2, #20]
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	0612      	lsls	r2, r2, #24
 8008d12:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d16:	430a      	orrs	r2, r1
 8008d18:	4924      	ldr	r1, [pc, #144]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008d1e:	4b23      	ldr	r3, [pc, #140]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	f023 020c 	bic.w	r2, r3, #12
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	4920      	ldr	r1, [pc, #128]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008d30:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	491c      	ldr	r1, [pc, #112]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008d3e:	4b1b      	ldr	r3, [pc, #108]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	4a1a      	ldr	r2, [pc, #104]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d44:	f023 0310 	bic.w	r3, r3, #16
 8008d48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d4a:	4b18      	ldr	r3, [pc, #96]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	69d2      	ldr	r2, [r2, #28]
 8008d5a:	00d2      	lsls	r2, r2, #3
 8008d5c:	4913      	ldr	r1, [pc, #76]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a11      	ldr	r2, [pc, #68]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d68:	f043 0310 	orr.w	r3, r3, #16
 8008d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a0e      	ldr	r2, [pc, #56]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d7a:	f7f8 fe21 	bl	80019c0 <HAL_GetTick>
 8008d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d80:	e008      	b.n	8008d94 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d82:	f7f8 fe1d 	bl	80019c0 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e006      	b.n	8008da2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <RCCEx_PLL2_Config+0x128>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0

}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	46020c00 	.word	0x46020c00
 8008db0:	80800000 	.word	0x80800000

08008db4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008dbc:	4b47      	ldr	r3, [pc, #284]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a46      	ldr	r2, [pc, #280]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dc8:	f7f8 fdfa 	bl	80019c0 <HAL_GetTick>
 8008dcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dce:	e008      	b.n	8008de2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dd0:	f7f8 fdf6 	bl	80019c0 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e077      	b.n	8008ed2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008de2:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008dee:	4b3b      	ldr	r3, [pc, #236]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6852      	ldr	r2, [r2, #4]
 8008e02:	3a01      	subs	r2, #1
 8008e04:	0212      	lsls	r2, r2, #8
 8008e06:	430a      	orrs	r2, r1
 8008e08:	4934      	ldr	r1, [pc, #208]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	630b      	str	r3, [r1, #48]	; 0x30
 8008e0e:	4b33      	ldr	r3, [pc, #204]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e12:	4b33      	ldr	r3, [pc, #204]	; (8008ee0 <RCCEx_PLL3_Config+0x12c>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6892      	ldr	r2, [r2, #8]
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	68d2      	ldr	r2, [r2, #12]
 8008e24:	3a01      	subs	r2, #1
 8008e26:	0252      	lsls	r2, r2, #9
 8008e28:	b292      	uxth	r2, r2
 8008e2a:	4311      	orrs	r1, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6912      	ldr	r2, [r2, #16]
 8008e30:	3a01      	subs	r2, #1
 8008e32:	0412      	lsls	r2, r2, #16
 8008e34:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008e38:	4311      	orrs	r1, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6952      	ldr	r2, [r2, #20]
 8008e3e:	3a01      	subs	r2, #1
 8008e40:	0612      	lsls	r2, r2, #24
 8008e42:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e46:	430a      	orrs	r2, r1
 8008e48:	4924      	ldr	r1, [pc, #144]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008e4e:	4b23      	ldr	r3, [pc, #140]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e52:	f023 020c 	bic.w	r2, r3, #12
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	4920      	ldr	r1, [pc, #128]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008e60:	4b1e      	ldr	r3, [pc, #120]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	491c      	ldr	r1, [pc, #112]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008e6e:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e72:	4a1a      	ldr	r2, [pc, #104]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e74:	f023 0310 	bic.w	r3, r3, #16
 8008e78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e7a:	4b18      	ldr	r3, [pc, #96]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	69d2      	ldr	r2, [r2, #28]
 8008e8a:	00d2      	lsls	r2, r2, #3
 8008e8c:	4913      	ldr	r1, [pc, #76]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	4a11      	ldr	r2, [pc, #68]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008e98:	f043 0310 	orr.w	r3, r3, #16
 8008e9c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a0e      	ldr	r2, [pc, #56]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008eaa:	f7f8 fd89 	bl	80019c0 <HAL_GetTick>
 8008eae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eb0:	e008      	b.n	8008ec4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008eb2:	f7f8 fd85 	bl	80019c0 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d901      	bls.n	8008ec4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e006      	b.n	8008ed2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <RCCEx_PLL3_Config+0x128>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0f0      	beq.n	8008eb2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	46020c00 	.word	0x46020c00
 8008ee0:	80800000 	.word	0x80800000

08008ee4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d071      	beq.n	8008fda <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7f8 fa9c 	bl	8001448 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008f18:	4b32      	ldr	r3, [pc, #200]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d051      	beq.n	8008fc8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f24:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f26:	22ca      	movs	r2, #202	; 0xca
 8008f28:	625a      	str	r2, [r3, #36]	; 0x24
 8008f2a:	4b2e      	ldr	r3, [pc, #184]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f2c:	2253      	movs	r2, #83	; 0x53
 8008f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa6d 	bl	8009410 <RTC_EnterInitMode>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d13f      	bne.n	8008fc0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f46:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008f50:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6859      	ldr	r1, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	4319      	orrs	r1, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	430b      	orrs	r3, r1
 8008f64:	491f      	ldr	r1, [pc, #124]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	491b      	ldr	r1, [pc, #108]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008f7a:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	4915      	ldr	r1, [pc, #84]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa78 	bl	8009488 <RTC_ExitInitMode>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10e      	bne.n	8008fc0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a19      	ldr	r1, [r3, #32]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	4319      	orrs	r1, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	490a      	ldr	r1, [pc, #40]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc0:	4b08      	ldr	r3, [pc, #32]	; (8008fe4 <HAL_RTC_Init+0x100>)
 8008fc2:	22ff      	movs	r2, #255	; 0xff
 8008fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8008fc6:	e001      	b.n	8008fcc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d103      	bne.n	8008fda <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	46007800 	.word	0x46007800

08008fe8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_RTC_SetTime+0x1a>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e088      	b.n	8009114 <HAL_RTC_SetTime+0x12c>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009012:	4b42      	ldr	r3, [pc, #264]	; (800911c <HAL_RTC_SetTime+0x134>)
 8009014:	22ca      	movs	r2, #202	; 0xca
 8009016:	625a      	str	r2, [r3, #36]	; 0x24
 8009018:	4b40      	ldr	r3, [pc, #256]	; (800911c <HAL_RTC_SetTime+0x134>)
 800901a:	2253      	movs	r2, #83	; 0x53
 800901c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f9f6 	bl	8009410 <RTC_EnterInitMode>
 8009024:	4603      	mov	r3, r0
 8009026:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009028:	7cfb      	ldrb	r3, [r7, #19]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d163      	bne.n	80090f6 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800902e:	4b3b      	ldr	r3, [pc, #236]	; (800911c <HAL_RTC_SetTime+0x134>)
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903a:	d057      	beq.n	80090ec <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d125      	bne.n	800908e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009042:	4b36      	ldr	r3, [pc, #216]	; (800911c <HAL_RTC_SetTime+0x134>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2200      	movs	r2, #0
 8009052:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fa53 	bl	8009504 <RTC_ByteToBcd2>
 800905e:	4603      	mov	r3, r0
 8009060:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fa4c 	bl	8009504 <RTC_ByteToBcd2>
 800906c:	4603      	mov	r3, r0
 800906e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009070:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	789b      	ldrb	r3, [r3, #2]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fa44 	bl	8009504 <RTC_ByteToBcd2>
 800907c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800907e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	78db      	ldrb	r3, [r3, #3]
 8009086:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e017      	b.n	80090be <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800908e:	4b23      	ldr	r3, [pc, #140]	; (800911c <HAL_RTC_SetTime+0x134>)
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80090ac:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80090b2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	78db      	ldrb	r3, [r3, #3]
 80090b8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80090be:	4a17      	ldr	r2, [pc, #92]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090ca:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80090cc:	4b13      	ldr	r3, [pc, #76]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	4a12      	ldr	r2, [pc, #72]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80090d8:	4b10      	ldr	r3, [pc, #64]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090da:	699a      	ldr	r2, [r3, #24]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	68d9      	ldr	r1, [r3, #12]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	430b      	orrs	r3, r1
 80090e6:	490d      	ldr	r1, [pc, #52]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f9cb 	bl	8009488 <RTC_ExitInitMode>
 80090f2:	4603      	mov	r3, r0
 80090f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <HAL_RTC_SetTime+0x134>)
 80090f8:	22ff      	movs	r2, #255	; 0xff
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009112:	7cfb      	ldrb	r3, [r7, #19]
}
 8009114:	4618      	mov	r0, r3
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	bd90      	pop	{r4, r7, pc}
 800911c:	46007800 	.word	0x46007800

08009120 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800912c:	4b34      	ldr	r3, [pc, #208]	; (8009200 <HAL_RTC_GetTime+0xe0>)
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8009134:	4b32      	ldr	r3, [pc, #200]	; (8009200 <HAL_RTC_GetTime+0xe0>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009140:	d04a      	beq.n	80091d8 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8009142:	4b2f      	ldr	r3, [pc, #188]	; (8009200 <HAL_RTC_GetTime+0xe0>)
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800914e:	4b2c      	ldr	r3, [pc, #176]	; (8009200 <HAL_RTC_GetTime+0xe0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009156:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800915a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009176:	b2da      	uxtb	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009184:	b2da      	uxtb	r2, r3
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	0d9b      	lsrs	r3, r3, #22
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	b2da      	uxtb	r2, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d12a      	bne.n	80091f6 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f9cd 	bl	8009544 <RTC_Bcd2ToByte>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461a      	mov	r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f9c4 	bl	8009544 <RTC_Bcd2ToByte>
 80091bc:	4603      	mov	r3, r0
 80091be:	461a      	mov	r2, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	789b      	ldrb	r3, [r3, #2]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f9bb 	bl	8009544 <RTC_Bcd2ToByte>
 80091ce:	4603      	mov	r3, r0
 80091d0:	461a      	mov	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	709a      	strb	r2, [r3, #2]
 80091d6:	e00e      	b.n	80091f6 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2200      	movs	r2, #0
 80091e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2200      	movs	r2, #0
 80091ee:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	46007800 	.word	0x46007800

08009204 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_RTC_SetDate+0x1a>
 800921a:	2302      	movs	r3, #2
 800921c:	e071      	b.n	8009302 <HAL_RTC_SetDate+0xfe>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10e      	bne.n	8009252 <HAL_RTC_SetDate+0x4e>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d008      	beq.n	8009252 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	f023 0310 	bic.w	r3, r3, #16
 8009248:	b2db      	uxtb	r3, r3
 800924a:	330a      	adds	r3, #10
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11c      	bne.n	8009292 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	78db      	ldrb	r3, [r3, #3]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f951 	bl	8009504 <RTC_ByteToBcd2>
 8009262:	4603      	mov	r3, r0
 8009264:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f94a 	bl	8009504 <RTC_ByteToBcd2>
 8009270:	4603      	mov	r3, r0
 8009272:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009274:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	789b      	ldrb	r3, [r3, #2]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f942 	bl	8009504 <RTC_ByteToBcd2>
 8009280:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009282:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e00e      	b.n	80092b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800929e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80092a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092b0:	4b16      	ldr	r3, [pc, #88]	; (800930c <HAL_RTC_SetDate+0x108>)
 80092b2:	22ca      	movs	r2, #202	; 0xca
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24
 80092b6:	4b15      	ldr	r3, [pc, #84]	; (800930c <HAL_RTC_SetDate+0x108>)
 80092b8:	2253      	movs	r2, #83	; 0x53
 80092ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f8a7 	bl	8009410 <RTC_EnterInitMode>
 80092c2:	4603      	mov	r3, r0
 80092c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80092c6:	7cfb      	ldrb	r3, [r7, #19]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10b      	bne.n	80092e4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80092cc:	4a0f      	ldr	r2, [pc, #60]	; (800930c <HAL_RTC_SetDate+0x108>)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f8d4 	bl	8009488 <RTC_ExitInitMode>
 80092e0:	4603      	mov	r3, r0
 80092e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <HAL_RTC_SetDate+0x108>)
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80092ea:	7cfb      	ldrb	r3, [r7, #19]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d103      	bne.n	80092f8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009300:	7cfb      	ldrb	r3, [r7, #19]
}
 8009302:	4618      	mov	r0, r3
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	bd90      	pop	{r4, r7, pc}
 800930a:	bf00      	nop
 800930c:	46007800 	.word	0x46007800

08009310 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800931c:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <HAL_RTC_GetDate+0x98>)
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009324:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009328:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	b2da      	uxtb	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	b2db      	uxtb	r3, r3
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	b2da      	uxtb	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800934c:	b2da      	uxtb	r2, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	0b5b      	lsrs	r3, r3, #13
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	b2da      	uxtb	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11a      	bne.n	800939e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f8e9 	bl	8009544 <RTC_Bcd2ToByte>
 8009372:	4603      	mov	r3, r0
 8009374:	461a      	mov	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	785b      	ldrb	r3, [r3, #1]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f8e0 	bl	8009544 <RTC_Bcd2ToByte>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	789b      	ldrb	r3, [r3, #2]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f8d7 	bl	8009544 <RTC_Bcd2ToByte>
 8009396:	4603      	mov	r3, r0
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	46007800 	.word	0x46007800

080093ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <HAL_RTC_WaitForSynchro+0x60>)
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	4a14      	ldr	r2, [pc, #80]	; (800940c <HAL_RTC_WaitForSynchro+0x60>)
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80093c0:	f7f8 fafe 	bl	80019c0 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093c6:	e013      	b.n	80093f0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093c8:	f7f8 fafa 	bl	80019c0 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093d6:	d90b      	bls.n	80093f0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <HAL_RTC_WaitForSynchro+0x60>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2203      	movs	r2, #3
 80093e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e008      	b.n	8009402 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <HAL_RTC_WaitForSynchro+0x60>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0e5      	beq.n	80093c8 <HAL_RTC_WaitForSynchro+0x1c>
 80093fc:	e000      	b.n	8009400 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80093fe:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	46007800 	.word	0x46007800

08009410 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800941c:	4b19      	ldr	r3, [pc, #100]	; (8009484 <RTC_EnterInitMode+0x74>)
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d128      	bne.n	800947a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009428:	4b16      	ldr	r3, [pc, #88]	; (8009484 <RTC_EnterInitMode+0x74>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4a15      	ldr	r2, [pc, #84]	; (8009484 <RTC_EnterInitMode+0x74>)
 800942e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009432:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009434:	f7f8 fac4 	bl	80019c0 <HAL_GetTick>
 8009438:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800943a:	e013      	b.n	8009464 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800943c:	f7f8 fac0 	bl	80019c0 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800944a:	d90b      	bls.n	8009464 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <RTC_EnterInitMode+0x74>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10f      	bne.n	8009478 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2203      	movs	r2, #3
 8009460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009464:	4b07      	ldr	r3, [pc, #28]	; (8009484 <RTC_EnterInitMode+0x74>)
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <RTC_EnterInitMode+0x6a>
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d1e2      	bne.n	800943c <RTC_EnterInitMode+0x2c>
 8009476:	e000      	b.n	800947a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009478:	bf00      	nop
        }
      }
    }
  }

  return status;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	46007800 	.word	0x46007800

08009488 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009494:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <RTC_ExitInitMode+0x78>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	4a19      	ldr	r2, [pc, #100]	; (8009500 <RTC_ExitInitMode+0x78>)
 800949a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800949e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80094a0:	4b17      	ldr	r3, [pc, #92]	; (8009500 <RTC_ExitInitMode+0x78>)
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10c      	bne.n	80094c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff7d 	bl	80093ac <HAL_RTC_WaitForSynchro>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01e      	beq.n	80094f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2203      	movs	r2, #3
 80094bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	e017      	b.n	80094f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <RTC_ExitInitMode+0x78>)
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	4a0d      	ldr	r2, [pc, #52]	; (8009500 <RTC_ExitInitMode+0x78>)
 80094cc:	f023 0320 	bic.w	r3, r3, #32
 80094d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff ff6a 	bl	80093ac <HAL_RTC_WaitForSynchro>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2203      	movs	r2, #3
 80094e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094ea:	4b05      	ldr	r3, [pc, #20]	; (8009500 <RTC_ExitInitMode+0x78>)
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	4a04      	ldr	r2, [pc, #16]	; (8009500 <RTC_ExitInitMode+0x78>)
 80094f0:	f043 0320 	orr.w	r3, r3, #32
 80094f4:	6193      	str	r3, [r2, #24]
  }
  return status;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	46007800 	.word	0x46007800

08009504 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009516:	e005      	b.n	8009524 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	3b0a      	subs	r3, #10
 8009522:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	2b09      	cmp	r3, #9
 8009528:	d8f6      	bhi.n	8009518 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	b2da      	uxtb	r2, r3
 8009532:	7afb      	ldrb	r3, [r7, #11]
 8009534:	4313      	orrs	r3, r2
 8009536:	b2db      	uxtb	r3, r3
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	091b      	lsrs	r3, r3, #4
 8009552:	b2db      	uxtb	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	b2da      	uxtb	r2, r3
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	b2db      	uxtb	r3, r3
 800956c:	4413      	add	r3, r2
 800956e:	b2db      	uxtb	r3, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009594:	2302      	movs	r3, #2
 8009596:	e063      	b.n	8009660 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095a8:	4b2f      	ldr	r3, [pc, #188]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095aa:	22ca      	movs	r2, #202	; 0xca
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095b0:	2253      	movs	r2, #83	; 0x53
 80095b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80095b4:	4b2c      	ldr	r3, [pc, #176]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	4a2b      	ldr	r2, [pc, #172]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095be:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80095c0:	4b29      	ldr	r3, [pc, #164]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095c2:	2204      	movs	r2, #4
 80095c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80095c6:	4b28      	ldr	r3, [pc, #160]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d126      	bne.n	8009620 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 80095d2:	f7f8 f9f5 	bl	80019c0 <HAL_GetTick>
 80095d6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80095d8:	e01a      	b.n	8009610 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095da:	f7f8 f9f1 	bl	80019c0 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e8:	d912      	bls.n	8009610 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80095ea:	4b1f      	ldr	r3, [pc, #124]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d113      	bne.n	800961e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095f6:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095f8:	22ff      	movs	r2, #255	; 0xff
 80095fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2203      	movs	r2, #3
 8009600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e027      	b.n	8009660 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0de      	beq.n	80095da <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 800961c:	e000      	b.n	8009620 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 800961e:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	041a      	lsls	r2, r3, #16
 8009624:	4910      	ldr	r1, [pc, #64]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4313      	orrs	r3, r2
 800962a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	f023 0207 	bic.w	r2, r3, #7
 8009634:	490c      	ldr	r1, [pc, #48]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4313      	orrs	r3, r2
 800963a:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	4a09      	ldr	r2, [pc, #36]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009642:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8009646:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800964a:	22ff      	movs	r2, #255	; 0xff
 800964c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	46007800 	.word	0x46007800

0800966c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800967e:	2302      	movs	r3, #2
 8009680:	e046      	b.n	8009710 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009692:	4b21      	ldr	r3, [pc, #132]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009694:	22ca      	movs	r2, #202	; 0xca
 8009696:	625a      	str	r2, [r3, #36]	; 0x24
 8009698:	4b1f      	ldr	r3, [pc, #124]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800969a:	2253      	movs	r2, #83	; 0x53
 800969c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800969e:	4b1e      	ldr	r3, [pc, #120]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096a4:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 80096a8:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 80096aa:	f7f8 f989 	bl	80019c0 <HAL_GetTick>
 80096ae:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80096b0:	e01a      	b.n	80096e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096b2:	f7f8 f985 	bl	80019c0 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c0:	d912      	bls.n	80096e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d113      	bne.n	80096f6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ce:	4b12      	ldr	r3, [pc, #72]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096d0:	22ff      	movs	r2, #255	; 0xff
 80096d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2203      	movs	r2, #3
 80096d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e013      	b.n	8009710 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80096e8:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0de      	beq.n	80096b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 80096f4:	e000      	b.n	80096f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 80096f6:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80096fa:	22ff      	movs	r2, #255	; 0xff
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	46007800 	.word	0x46007800

0800971c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009730:	4b06      	ldr	r3, [pc, #24]	; (800974c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8009732:	2204      	movs	r2, #4
 8009734:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7f7 fdc8 	bl	80012cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	46007800 	.word	0x46007800

08009750 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4910      	ldr	r1, [pc, #64]	; (80097a4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009764:	4313      	orrs	r3, r2
 8009766:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	431a      	orrs	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	490c      	ldr	r1, [pc, #48]	; (80097a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009778:	4313      	orrs	r3, r2
 800977a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6919      	ldr	r1, [r3, #16]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	041b      	lsls	r3, r3, #16
 800978e:	430b      	orrs	r3, r1
 8009790:	4905      	ldr	r1, [pc, #20]	; (80097a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009792:	4313      	orrs	r3, r2
 8009794:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	46007800 	.word	0x46007800
 80097a8:	46007c00 	.word	0x46007c00

080097ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0fb      	b.n	80099b6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a7f      	ldr	r2, [pc, #508]	; (80099c0 <HAL_SPI_Init+0x214>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d004      	beq.n	80097d2 <HAL_SPI_Init+0x26>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a7d      	ldr	r2, [pc, #500]	; (80099c4 <HAL_SPI_Init+0x218>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	e000      	b.n	80097d4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80097d2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a78      	ldr	r2, [pc, #480]	; (80099c0 <HAL_SPI_Init+0x214>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d004      	beq.n	80097ee <HAL_SPI_Init+0x42>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a76      	ldr	r2, [pc, #472]	; (80099c4 <HAL_SPI_Init+0x218>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d105      	bne.n	80097fa <HAL_SPI_Init+0x4e>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b0f      	cmp	r3, #15
 80097f4:	d901      	bls.n	80097fa <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e0dd      	b.n	80099b6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fbd8 	bl	8009fb0 <SPI_GetPacketSize>
 8009800:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a6e      	ldr	r2, [pc, #440]	; (80099c0 <HAL_SPI_Init+0x214>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d004      	beq.n	8009816 <HAL_SPI_Init+0x6a>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a6c      	ldr	r2, [pc, #432]	; (80099c4 <HAL_SPI_Init+0x218>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d102      	bne.n	800981c <HAL_SPI_Init+0x70>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d816      	bhi.n	800984a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009820:	4a69      	ldr	r2, [pc, #420]	; (80099c8 <HAL_SPI_Init+0x21c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d00e      	beq.n	8009844 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a68      	ldr	r2, [pc, #416]	; (80099cc <HAL_SPI_Init+0x220>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d009      	beq.n	8009844 <HAL_SPI_Init+0x98>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a66      	ldr	r2, [pc, #408]	; (80099d0 <HAL_SPI_Init+0x224>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d004      	beq.n	8009844 <HAL_SPI_Init+0x98>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a65      	ldr	r2, [pc, #404]	; (80099d4 <HAL_SPI_Init+0x228>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d104      	bne.n	800984e <HAL_SPI_Init+0xa2>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b10      	cmp	r3, #16
 8009848:	d901      	bls.n	800984e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e0b3      	b.n	80099b6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7f7 fe3c 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800988a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009894:	d119      	bne.n	80098ca <HAL_SPI_Init+0x11e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800989e:	d103      	bne.n	80098a8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d008      	beq.n	80098ba <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10c      	bne.n	80098ca <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80098b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b8:	d107      	bne.n	80098ca <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <HAL_SPI_Init+0x14a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	2b06      	cmp	r3, #6
 80098dc:	d90b      	bls.n	80098f6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e007      	b.n	8009906 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009904:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69da      	ldr	r2, [r3, #28]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	431a      	orrs	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009918:	ea42 0103 	orr.w	r1, r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	431a      	orrs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	431a      	orrs	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009972:	ea42 0103 	orr.w	r1, r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	46002000 	.word	0x46002000
 80099c4:	56002000 	.word	0x56002000
 80099c8:	40013000 	.word	0x40013000
 80099cc:	50013000 	.word	0x50013000
 80099d0:	40003800 	.word	0x40003800
 80099d4:	50003800 	.word	0x50003800

080099d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	; 0x28
 80099dc:	af02      	add	r7, sp, #8
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	4613      	mov	r3, r2
 80099e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3320      	adds	r3, #32
 80099ee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_SPI_Transmit+0x2a>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e203      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a0a:	f7f7 ffd9 	bl	80019c0 <HAL_GetTick>
 8009a0e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d007      	beq.n	8009a2c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009a28:	7efb      	ldrb	r3, [r7, #27]
 8009a2a:	e1ee      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <HAL_SPI_Transmit+0x60>
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d107      	bne.n	8009a48 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009a44:	7efb      	ldrb	r3, [r7, #27]
 8009a46:	e1e0      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009a98:	d108      	bne.n	8009aac <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e009      	b.n	8009ac0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009abe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	041b      	lsls	r3, r3, #16
 8009aca:	88f9      	ldrh	r1, [r7, #6]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <HAL_SPI_Transmit+0x134>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009afa:	d107      	bne.n	8009b0c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b0f      	cmp	r3, #15
 8009b12:	d95b      	bls.n	8009bcc <HAL_SPI_Transmit+0x1f4>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a8f      	ldr	r2, [pc, #572]	; (8009d58 <HAL_SPI_Transmit+0x380>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d04f      	beq.n	8009bbe <HAL_SPI_Transmit+0x1e6>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a8e      	ldr	r2, [pc, #568]	; (8009d5c <HAL_SPI_Transmit+0x384>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d04a      	beq.n	8009bbe <HAL_SPI_Transmit+0x1e6>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a8c      	ldr	r2, [pc, #560]	; (8009d60 <HAL_SPI_Transmit+0x388>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d045      	beq.n	8009bbe <HAL_SPI_Transmit+0x1e6>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a8b      	ldr	r2, [pc, #556]	; (8009d64 <HAL_SPI_Transmit+0x38c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d147      	bne.n	8009bcc <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b3c:	e03f      	b.n	8009bbe <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	f003 0302 	and.w	r3, r3, #2
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d114      	bne.n	8009b76 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5c:	1d1a      	adds	r2, r3, #4
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b74:	e023      	b.n	8009bbe <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b76:	f7f7 ff23 	bl	80019c0 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d803      	bhi.n	8009b8e <HAL_SPI_Transmit+0x1b6>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8c:	d102      	bne.n	8009b94 <HAL_SPI_Transmit+0x1bc>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d114      	bne.n	8009bbe <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 f93d 	bl	8009e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e125      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1b9      	bne.n	8009b3e <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009bca:	e0f8      	b.n	8009dbe <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b07      	cmp	r3, #7
 8009bd2:	f240 80ed 	bls.w	8009db0 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bd6:	e05d      	b.n	8009c94 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d132      	bne.n	8009c4c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d918      	bls.n	8009c24 <HAL_SPI_Transmit+0x24c>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d014      	beq.n	8009c24 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b02      	subs	r3, #2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c22:	e037      	b.n	8009c94 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c28:	881a      	ldrh	r2, [r3, #0]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c32:	1c9a      	adds	r2, r3, #2
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c4a:	e023      	b.n	8009c94 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c4c:	f7f7 feb8 	bl	80019c0 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d803      	bhi.n	8009c64 <HAL_SPI_Transmit+0x28c>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d102      	bne.n	8009c6a <HAL_SPI_Transmit+0x292>
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d114      	bne.n	8009c94 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f8d2 	bl	8009e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e0ba      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d19b      	bne.n	8009bd8 <HAL_SPI_Transmit+0x200>
 8009ca0:	e08d      	b.n	8009dbe <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d15b      	bne.n	8009d68 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d918      	bls.n	8009cee <HAL_SPI_Transmit+0x316>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc0:	2b40      	cmp	r3, #64	; 0x40
 8009cc2:	d914      	bls.n	8009cee <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd4:	1d1a      	adds	r2, r3, #4
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b04      	subs	r3, #4
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cec:	e060      	b.n	8009db0 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d917      	bls.n	8009d2a <HAL_SPI_Transmit+0x352>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d06:	881a      	ldrh	r2, [r3, #0]
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d10:	1c9a      	adds	r2, r3, #2
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b02      	subs	r3, #2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d28:	e042      	b.n	8009db0 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3320      	adds	r3, #32
 8009d34:	7812      	ldrb	r2, [r2, #0]
 8009d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d54:	e02c      	b.n	8009db0 <HAL_SPI_Transmit+0x3d8>
 8009d56:	bf00      	nop
 8009d58:	40013000 	.word	0x40013000
 8009d5c:	50013000 	.word	0x50013000
 8009d60:	40003800 	.word	0x40003800
 8009d64:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d68:	f7f7 fe2a 	bl	80019c0 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d803      	bhi.n	8009d80 <HAL_SPI_Transmit+0x3a8>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7e:	d102      	bne.n	8009d86 <HAL_SPI_Transmit+0x3ae>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d114      	bne.n	8009db0 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f844 	bl	8009e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e02c      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f af72 	bne.w	8009ca2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2108      	movs	r1, #8
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 f8c3 	bl	8009f54 <SPI_WaitOnFlagUntilTimeout>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d007      	beq.n	8009de4 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dda:	f043 0220 	orr.w	r2, r3, #32
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f815 	bl	8009e14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009e08:	7efb      	ldrb	r3, [r7, #27]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop

08009e14 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	699a      	ldr	r2, [r3, #24]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0208 	orr.w	r2, r2, #8
 8009e32:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0210 	orr.w	r2, r2, #16
 8009e42:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0201 	bic.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6812      	ldr	r2, [r2, #0]
 8009e5e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009e62:	f023 0303 	bic.w	r3, r3, #3
 8009e66:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009e76:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d014      	beq.n	8009eae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00f      	beq.n	8009eae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699a      	ldr	r2, [r3, #24]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0220 	orr.w	r2, r2, #32
 8009eac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d014      	beq.n	8009ee4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00f      	beq.n	8009ee4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	f043 0204 	orr.w	r2, r3, #4
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	699a      	ldr	r2, [r3, #24]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ee2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00f      	beq.n	8009f0e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ef4:	f043 0201 	orr.w	r2, r3, #1
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699a      	ldr	r2, [r3, #24]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00f      	beq.n	8009f38 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1e:	f043 0208 	orr.w	r2, r3, #8
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f36:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	4613      	mov	r3, r2
 8009f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f64:	e010      	b.n	8009f88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f66:	f7f7 fd2b 	bl	80019c0 <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d803      	bhi.n	8009f7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d102      	bne.n	8009f84 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e00f      	b.n	8009fa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	695a      	ldr	r2, [r3, #20]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	4013      	ands	r3, r2
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	bf0c      	ite	eq
 8009f98:	2301      	moveq	r3, #1
 8009f9a:	2300      	movne	r3, #0
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d0df      	beq.n	8009f66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbc:	095b      	lsrs	r3, r3, #5
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d12e      	bne.n	800a05a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a006:	2302      	movs	r3, #2
 800a008:	e028      	b.n	800a05c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0201 	bic.w	r2, r2, #1
 800a028:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800a036:	ea42 0103 	orr.w	r1, r2, r3
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	e000      	b.n	800a05c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e049      	b.n	800a10e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f841 	bl	800a116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f000 fa88 	bl	800a5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
	...

0800a12c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d001      	beq.n	800a144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e072      	b.n	800a22a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f042 0201 	orr.w	r2, r2, #1
 800a15a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a35      	ldr	r2, [pc, #212]	; (800a238 <HAL_TIM_Base_Start_IT+0x10c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d040      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a34      	ldr	r2, [pc, #208]	; (800a23c <HAL_TIM_Base_Start_IT+0x110>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d03b      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a178:	d036      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a182:	d031      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a2d      	ldr	r2, [pc, #180]	; (800a240 <HAL_TIM_Base_Start_IT+0x114>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d02c      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a2c      	ldr	r2, [pc, #176]	; (800a244 <HAL_TIM_Base_Start_IT+0x118>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d027      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <HAL_TIM_Base_Start_IT+0x11c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d022      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a29      	ldr	r2, [pc, #164]	; (800a24c <HAL_TIM_Base_Start_IT+0x120>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d01d      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a27      	ldr	r2, [pc, #156]	; (800a250 <HAL_TIM_Base_Start_IT+0x124>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d018      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a26      	ldr	r2, [pc, #152]	; (800a254 <HAL_TIM_Base_Start_IT+0x128>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d013      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a24      	ldr	r2, [pc, #144]	; (800a258 <HAL_TIM_Base_Start_IT+0x12c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00e      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a23      	ldr	r2, [pc, #140]	; (800a25c <HAL_TIM_Base_Start_IT+0x130>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d009      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a21      	ldr	r2, [pc, #132]	; (800a260 <HAL_TIM_Base_Start_IT+0x134>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d004      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0xbc>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a20      	ldr	r2, [pc, #128]	; (800a264 <HAL_TIM_Base_Start_IT+0x138>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d115      	bne.n	800a214 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	4b1e      	ldr	r3, [pc, #120]	; (800a268 <HAL_TIM_Base_Start_IT+0x13c>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	d015      	beq.n	800a226 <HAL_TIM_Base_Start_IT+0xfa>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a200:	d011      	beq.n	800a226 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f042 0201 	orr.w	r2, r2, #1
 800a210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a212:	e008      	b.n	800a226 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	e000      	b.n	800a228 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	40012c00 	.word	0x40012c00
 800a23c:	50012c00 	.word	0x50012c00
 800a240:	40000400 	.word	0x40000400
 800a244:	50000400 	.word	0x50000400
 800a248:	40000800 	.word	0x40000800
 800a24c:	50000800 	.word	0x50000800
 800a250:	40000c00 	.word	0x40000c00
 800a254:	50000c00 	.word	0x50000c00
 800a258:	40013400 	.word	0x40013400
 800a25c:	50013400 	.word	0x50013400
 800a260:	40014000 	.word	0x40014000
 800a264:	50014000 	.word	0x50014000
 800a268:	00010007 	.word	0x00010007

0800a26c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d122      	bne.n	800a2c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d11b      	bne.n	800a2c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f06f 0202 	mvn.w	r2, #2
 800a298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f965 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a2b4:	e005      	b.n	800a2c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f957 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f968 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	f003 0304 	and.w	r3, r3, #4
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d122      	bne.n	800a31c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	d11b      	bne.n	800a31c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0204 	mvn.w	r2, #4
 800a2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f93b 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a308:	e005      	b.n	800a316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f92d 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f93e 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	2b08      	cmp	r3, #8
 800a328:	d122      	bne.n	800a370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f003 0308 	and.w	r3, r3, #8
 800a334:	2b08      	cmp	r3, #8
 800a336:	d11b      	bne.n	800a370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0208 	mvn.w	r2, #8
 800a340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2204      	movs	r2, #4
 800a346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f911 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a35c:	e005      	b.n	800a36a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f903 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f914 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 0310 	and.w	r3, r3, #16
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d122      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f003 0310 	and.w	r3, r3, #16
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d11b      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f06f 0210 	mvn.w	r2, #16
 800a394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2208      	movs	r2, #8
 800a39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f8e7 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a3b0:	e005      	b.n	800a3be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f8d9 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f8ea 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d10e      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d107      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f06f 0201 	mvn.w	r2, #1
 800a3e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7f6 ff7a 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fa:	2b80      	cmp	r3, #128	; 0x80
 800a3fc:	d10e      	bne.n	800a41c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a408:	2b80      	cmp	r3, #128	; 0x80
 800a40a:	d107      	bne.n	800a41c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9d4 	bl	800a7c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42a:	d10e      	bne.n	800a44a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a436:	2b80      	cmp	r3, #128	; 0x80
 800a438:	d107      	bne.n	800a44a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f9c7 	bl	800a7d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d10e      	bne.n	800a476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a462:	2b40      	cmp	r3, #64	; 0x40
 800a464:	d107      	bne.n	800a476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f898 	bl	800a5a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	f003 0320 	and.w	r3, r3, #32
 800a480:	2b20      	cmp	r3, #32
 800a482:	d10e      	bne.n	800a4a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b20      	cmp	r3, #32
 800a490:	d107      	bne.n	800a4a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f06f 0220 	mvn.w	r2, #32
 800a49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f987 	bl	800a7b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4b0:	d10f      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c0:	d107      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f98d 	bl	800a7ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4e0:	d10f      	bne.n	800a502 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f0:	d107      	bne.n	800a502 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f97f 	bl	800a800 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a510:	d10f      	bne.n	800a532 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a51c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a520:	d107      	bne.n	800a532 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a52a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f971 	bl	800a814 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a53c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a540:	d10f      	bne.n	800a562 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a54c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a550:	d107      	bne.n	800a562 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f963 	bl	800a828 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a68      	ldr	r2, [pc, #416]	; (800a770 <TIM_Base_SetConfig+0x1b4>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d02b      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a67      	ldr	r2, [pc, #412]	; (800a774 <TIM_Base_SetConfig+0x1b8>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d027      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e2:	d023      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5ea:	d01f      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a62      	ldr	r2, [pc, #392]	; (800a778 <TIM_Base_SetConfig+0x1bc>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d01b      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a61      	ldr	r2, [pc, #388]	; (800a77c <TIM_Base_SetConfig+0x1c0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d017      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a60      	ldr	r2, [pc, #384]	; (800a780 <TIM_Base_SetConfig+0x1c4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d013      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a5f      	ldr	r2, [pc, #380]	; (800a784 <TIM_Base_SetConfig+0x1c8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d00f      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a5e      	ldr	r2, [pc, #376]	; (800a788 <TIM_Base_SetConfig+0x1cc>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00b      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a5d      	ldr	r2, [pc, #372]	; (800a78c <TIM_Base_SetConfig+0x1d0>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d007      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a5c      	ldr	r2, [pc, #368]	; (800a790 <TIM_Base_SetConfig+0x1d4>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d003      	beq.n	800a62c <TIM_Base_SetConfig+0x70>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a5b      	ldr	r2, [pc, #364]	; (800a794 <TIM_Base_SetConfig+0x1d8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d108      	bne.n	800a63e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a4b      	ldr	r2, [pc, #300]	; (800a770 <TIM_Base_SetConfig+0x1b4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d043      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a4a      	ldr	r2, [pc, #296]	; (800a774 <TIM_Base_SetConfig+0x1b8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d03f      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a654:	d03b      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a65c:	d037      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a45      	ldr	r2, [pc, #276]	; (800a778 <TIM_Base_SetConfig+0x1bc>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d033      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a44      	ldr	r2, [pc, #272]	; (800a77c <TIM_Base_SetConfig+0x1c0>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d02f      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a43      	ldr	r2, [pc, #268]	; (800a780 <TIM_Base_SetConfig+0x1c4>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d02b      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a42      	ldr	r2, [pc, #264]	; (800a784 <TIM_Base_SetConfig+0x1c8>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d027      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a41      	ldr	r2, [pc, #260]	; (800a788 <TIM_Base_SetConfig+0x1cc>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d023      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a40      	ldr	r2, [pc, #256]	; (800a78c <TIM_Base_SetConfig+0x1d0>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d01f      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a3f      	ldr	r2, [pc, #252]	; (800a790 <TIM_Base_SetConfig+0x1d4>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d01b      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a3e      	ldr	r2, [pc, #248]	; (800a794 <TIM_Base_SetConfig+0x1d8>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d017      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a3d      	ldr	r2, [pc, #244]	; (800a798 <TIM_Base_SetConfig+0x1dc>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d013      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a3c      	ldr	r2, [pc, #240]	; (800a79c <TIM_Base_SetConfig+0x1e0>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00f      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a3b      	ldr	r2, [pc, #236]	; (800a7a0 <TIM_Base_SetConfig+0x1e4>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00b      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a3a      	ldr	r2, [pc, #232]	; (800a7a4 <TIM_Base_SetConfig+0x1e8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a39      	ldr	r2, [pc, #228]	; (800a7a8 <TIM_Base_SetConfig+0x1ec>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d003      	beq.n	800a6ce <TIM_Base_SetConfig+0x112>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a38      	ldr	r2, [pc, #224]	; (800a7ac <TIM_Base_SetConfig+0x1f0>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d108      	bne.n	800a6e0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a1a      	ldr	r2, [pc, #104]	; (800a770 <TIM_Base_SetConfig+0x1b4>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d023      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a19      	ldr	r2, [pc, #100]	; (800a774 <TIM_Base_SetConfig+0x1b8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d01f      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1e      	ldr	r2, [pc, #120]	; (800a790 <TIM_Base_SetConfig+0x1d4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d01b      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <TIM_Base_SetConfig+0x1d8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d017      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a1c      	ldr	r2, [pc, #112]	; (800a798 <TIM_Base_SetConfig+0x1dc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d013      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a1b      	ldr	r2, [pc, #108]	; (800a79c <TIM_Base_SetConfig+0x1e0>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d00f      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a1a      	ldr	r2, [pc, #104]	; (800a7a0 <TIM_Base_SetConfig+0x1e4>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00b      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a19      	ldr	r2, [pc, #100]	; (800a7a4 <TIM_Base_SetConfig+0x1e8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d007      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <TIM_Base_SetConfig+0x1ec>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d003      	beq.n	800a754 <TIM_Base_SetConfig+0x198>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a17      	ldr	r2, [pc, #92]	; (800a7ac <TIM_Base_SetConfig+0x1f0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d103      	bne.n	800a75c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	691a      	ldr	r2, [r3, #16]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	615a      	str	r2, [r3, #20]
}
 800a762:	bf00      	nop
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	40012c00 	.word	0x40012c00
 800a774:	50012c00 	.word	0x50012c00
 800a778:	40000400 	.word	0x40000400
 800a77c:	50000400 	.word	0x50000400
 800a780:	40000800 	.word	0x40000800
 800a784:	50000800 	.word	0x50000800
 800a788:	40000c00 	.word	0x40000c00
 800a78c:	50000c00 	.word	0x50000c00
 800a790:	40013400 	.word	0x40013400
 800a794:	50013400 	.word	0x50013400
 800a798:	40014000 	.word	0x40014000
 800a79c:	50014000 	.word	0x50014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	50014400 	.word	0x50014400
 800a7a8:	40014800 	.word	0x40014800
 800a7ac:	50014800 	.word	0x50014800

0800a7b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e042      	b.n	800a8d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a854:	2b00      	cmp	r3, #0
 800a856:	d106      	bne.n	800a866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7f6 fea7 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2224      	movs	r2, #36	; 0x24
 800a86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f8ca 	bl	800aa18 <UART_SetConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e022      	b.n	800a8d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa60 	bl	800ad5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fae7 	bl	800aea0 <UART_CheckIdleState>
 800a8d2:	4603      	mov	r3, r0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	f040 808b 	bne.w	800aa0e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <HAL_UART_Transmit+0x28>
 800a8fe:	88fb      	ldrh	r3, [r7, #6]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e083      	b.n	800aa10 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d107      	bne.n	800a926 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a924:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2221      	movs	r2, #33	; 0x21
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a936:	f7f7 f843 	bl	80019c0 <HAL_GetTick>
 800a93a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	88fa      	ldrh	r2, [r7, #6]
 800a940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a954:	d108      	bne.n	800a968 <HAL_UART_Transmit+0x8c>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	e003      	b.n	800a970 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a970:	e030      	b.n	800a9d4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2200      	movs	r2, #0
 800a97a:	2180      	movs	r1, #128	; 0x80
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fb39 	bl	800aff4 <UART_WaitOnFlagUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e03d      	b.n	800aa10 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10b      	bne.n	800a9b2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	61bb      	str	r3, [r7, #24]
 800a9b0:	e007      	b.n	800a9c2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	781a      	ldrb	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1c8      	bne.n	800a972 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2140      	movs	r1, #64	; 0x40
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 fb02 	bl	800aff4 <UART_WaitOnFlagUntilTimeout>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e006      	b.n	800aa10 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aa0e:	2302      	movs	r3, #2
  }
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa1c:	b094      	sub	sp, #80	; 0x50
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4b7e      	ldr	r3, [pc, #504]	; (800ac28 <UART_SetConfig+0x210>)
 800aa2e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4977      	ldr	r1, [pc, #476]	; (800ac2c <UART_SetConfig+0x214>)
 800aa50:	4019      	ands	r1, r3
 800aa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	68d9      	ldr	r1, [r3, #12]
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	ea40 0301 	orr.w	r3, r0, r1
 800aa72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	4b6a      	ldr	r3, [pc, #424]	; (800ac28 <UART_SetConfig+0x210>)
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d009      	beq.n	800aa98 <UART_SetConfig+0x80>
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	4b69      	ldr	r3, [pc, #420]	; (800ac30 <UART_SetConfig+0x218>)
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d004      	beq.n	800aa98 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	6a1a      	ldr	r2, [r3, #32]
 800aa92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa94:	4313      	orrs	r3, r2
 800aa96:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800aaa2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaac:	430b      	orrs	r3, r1
 800aaae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	f023 000f 	bic.w	r0, r3, #15
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	ea40 0301 	orr.w	r3, r0, r1
 800aac6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	4b59      	ldr	r3, [pc, #356]	; (800ac34 <UART_SetConfig+0x21c>)
 800aace:	429a      	cmp	r2, r3
 800aad0:	d102      	bne.n	800aad8 <UART_SetConfig+0xc0>
 800aad2:	2301      	movs	r3, #1
 800aad4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aad6:	e029      	b.n	800ab2c <UART_SetConfig+0x114>
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	4b56      	ldr	r3, [pc, #344]	; (800ac38 <UART_SetConfig+0x220>)
 800aade:	429a      	cmp	r2, r3
 800aae0:	d102      	bne.n	800aae8 <UART_SetConfig+0xd0>
 800aae2:	2302      	movs	r3, #2
 800aae4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aae6:	e021      	b.n	800ab2c <UART_SetConfig+0x114>
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	4b53      	ldr	r3, [pc, #332]	; (800ac3c <UART_SetConfig+0x224>)
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d102      	bne.n	800aaf8 <UART_SetConfig+0xe0>
 800aaf2:	2304      	movs	r3, #4
 800aaf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaf6:	e019      	b.n	800ab2c <UART_SetConfig+0x114>
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	4b50      	ldr	r3, [pc, #320]	; (800ac40 <UART_SetConfig+0x228>)
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d102      	bne.n	800ab08 <UART_SetConfig+0xf0>
 800ab02:	2308      	movs	r3, #8
 800ab04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab06:	e011      	b.n	800ab2c <UART_SetConfig+0x114>
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	4b4d      	ldr	r3, [pc, #308]	; (800ac44 <UART_SetConfig+0x22c>)
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d102      	bne.n	800ab18 <UART_SetConfig+0x100>
 800ab12:	2310      	movs	r3, #16
 800ab14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab16:	e009      	b.n	800ab2c <UART_SetConfig+0x114>
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	4b42      	ldr	r3, [pc, #264]	; (800ac28 <UART_SetConfig+0x210>)
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d102      	bne.n	800ab28 <UART_SetConfig+0x110>
 800ab22:	2320      	movs	r3, #32
 800ab24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab26:	e001      	b.n	800ab2c <UART_SetConfig+0x114>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b3d      	ldr	r3, [pc, #244]	; (800ac28 <UART_SetConfig+0x210>)
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d005      	beq.n	800ab42 <UART_SetConfig+0x12a>
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	4b3d      	ldr	r3, [pc, #244]	; (800ac30 <UART_SetConfig+0x218>)
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	f040 8085 	bne.w	800ac4c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab44:	2200      	movs	r2, #0
 800ab46:	623b      	str	r3, [r7, #32]
 800ab48:	627a      	str	r2, [r7, #36]	; 0x24
 800ab4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ab4e:	f7fc feb7 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab52:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 80e8 	beq.w	800ad2c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	4a39      	ldr	r2, [pc, #228]	; (800ac48 <UART_SetConfig+0x230>)
 800ab62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab66:	461a      	mov	r2, r3
 800ab68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab6e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	4613      	mov	r3, r2
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	4413      	add	r3, r2
 800ab7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d305      	bcc.n	800ab8c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d903      	bls.n	800ab94 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ab92:	e048      	b.n	800ac26 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab96:	2200      	movs	r2, #0
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	61fa      	str	r2, [r7, #28]
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	4a29      	ldr	r2, [pc, #164]	; (800ac48 <UART_SetConfig+0x230>)
 800aba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2200      	movs	r2, #0
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	617a      	str	r2, [r7, #20]
 800abae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800abb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800abb6:	f7f5 fc8d 	bl	80004d4 <__aeabi_uldivmod>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4610      	mov	r0, r2
 800abc0:	4619      	mov	r1, r3
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	020b      	lsls	r3, r1, #8
 800abcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abd0:	0202      	lsls	r2, r0, #8
 800abd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abd4:	6849      	ldr	r1, [r1, #4]
 800abd6:	0849      	lsrs	r1, r1, #1
 800abd8:	2000      	movs	r0, #0
 800abda:	460c      	mov	r4, r1
 800abdc:	4605      	mov	r5, r0
 800abde:	eb12 0804 	adds.w	r8, r2, r4
 800abe2:	eb43 0905 	adc.w	r9, r3, r5
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	60bb      	str	r3, [r7, #8]
 800abee:	60fa      	str	r2, [r7, #12]
 800abf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 fc6c 	bl	80004d4 <__aeabi_uldivmod>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4613      	mov	r3, r2
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0a:	d308      	bcc.n	800ac1e <UART_SetConfig+0x206>
 800ac0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac12:	d204      	bcs.n	800ac1e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	e003      	b.n	800ac26 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800ac24:	e082      	b.n	800ad2c <UART_SetConfig+0x314>
 800ac26:	e081      	b.n	800ad2c <UART_SetConfig+0x314>
 800ac28:	46002400 	.word	0x46002400
 800ac2c:	cfff69f3 	.word	0xcfff69f3
 800ac30:	56002400 	.word	0x56002400
 800ac34:	40013800 	.word	0x40013800
 800ac38:	40004400 	.word	0x40004400
 800ac3c:	40004800 	.word	0x40004800
 800ac40:	40004c00 	.word	0x40004c00
 800ac44:	40005000 	.word	0x40005000
 800ac48:	08015bf4 	.word	0x08015bf4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac54:	d13c      	bne.n	800acd0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac58:	2200      	movs	r2, #0
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac62:	f7fc fe2d 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac66:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d05e      	beq.n	800ad2c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	4a39      	ldr	r2, [pc, #228]	; (800ad58 <UART_SetConfig+0x340>)
 800ac74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac80:	005a      	lsls	r2, r3, #1
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	085b      	lsrs	r3, r3, #1
 800ac88:	441a      	add	r2, r3
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d916      	bls.n	800acc8 <UART_SetConfig+0x2b0>
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca0:	d212      	bcs.n	800acc8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f023 030f 	bic.w	r3, r3, #15
 800acaa:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	085b      	lsrs	r3, r3, #1
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800acba:	4313      	orrs	r3, r2
 800acbc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800acc4:	60da      	str	r2, [r3, #12]
 800acc6:	e031      	b.n	800ad2c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800acce:	e02d      	b.n	800ad2c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800acd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd2:	2200      	movs	r2, #0
 800acd4:	469a      	mov	sl, r3
 800acd6:	4693      	mov	fp, r2
 800acd8:	4650      	mov	r0, sl
 800acda:	4659      	mov	r1, fp
 800acdc:	f7fc fdf0 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ace0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ace2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d021      	beq.n	800ad2c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	4a1a      	ldr	r2, [pc, #104]	; (800ad58 <UART_SetConfig+0x340>)
 800acee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf2:	461a      	mov	r2, r3
 800acf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	441a      	add	r2, r3
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	d909      	bls.n	800ad26 <UART_SetConfig+0x30e>
 800ad12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad18:	d205      	bcs.n	800ad26 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60da      	str	r2, [r3, #12]
 800ad24:	e002      	b.n	800ad2c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2201      	movs	r2, #1
 800ad38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	2200      	movs	r2, #0
 800ad40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	2200      	movs	r2, #0
 800ad46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3750      	adds	r7, #80	; 0x50
 800ad50:	46bd      	mov	sp, r7
 800ad52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad56:	bf00      	nop
 800ad58:	08015bf4 	.word	0x08015bf4

0800ad5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00a      	beq.n	800ad86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	430a      	orrs	r2, r1
 800ad84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00a      	beq.n	800adca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	430a      	orrs	r2, r1
 800adc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	430a      	orrs	r2, r1
 800adea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae12:	f003 0320 	and.w	r3, r3, #32
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01a      	beq.n	800ae72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae5a:	d10a      	bne.n	800ae72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	605a      	str	r2, [r3, #4]
  }
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b098      	sub	sp, #96	; 0x60
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aeb0:	f7f6 fd86 	bl	80019c0 <HAL_GetTick>
 800aeb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0308 	and.w	r3, r3, #8
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d12f      	bne.n	800af24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aecc:	2200      	movs	r2, #0
 800aece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f88e 	bl	800aff4 <UART_WaitOnFlagUntilTimeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d022      	beq.n	800af24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	e853 3f00 	ldrex	r3, [r3]
 800aeea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef2:	653b      	str	r3, [r7, #80]	; 0x50
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aefc:	647b      	str	r3, [r7, #68]	; 0x44
 800aefe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e6      	bne.n	800aede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2220      	movs	r2, #32
 800af14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e063      	b.n	800afec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0304 	and.w	r3, r3, #4
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d149      	bne.n	800afc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3a:	2200      	movs	r2, #0
 800af3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f857 	bl	800aff4 <UART_WaitOnFlagUntilTimeout>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d03c      	beq.n	800afc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	623b      	str	r3, [r7, #32]
   return(result);
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30
 800af6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e6      	bne.n	800af4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3308      	adds	r3, #8
 800af84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f023 0301 	bic.w	r3, r3, #1
 800af94:	64bb      	str	r3, [r7, #72]	; 0x48
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3308      	adds	r3, #8
 800af9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af9e:	61fa      	str	r2, [r7, #28]
 800afa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	69b9      	ldr	r1, [r7, #24]
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	617b      	str	r3, [r7, #20]
   return(result);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e5      	bne.n	800af7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e012      	b.n	800afec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3758      	adds	r7, #88	; 0x58
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	4613      	mov	r3, r2
 800b002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b004:	e049      	b.n	800b09a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00c:	d045      	beq.n	800b09a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b00e:	f7f6 fcd7 	bl	80019c0 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d302      	bcc.n	800b024 <UART_WaitOnFlagUntilTimeout+0x30>
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e048      	b.n	800b0ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	d031      	beq.n	800b09a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b08      	cmp	r3, #8
 800b042:	d110      	bne.n	800b066 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2208      	movs	r2, #8
 800b04a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 f838 	bl	800b0c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2208      	movs	r2, #8
 800b056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e029      	b.n	800b0ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b074:	d111      	bne.n	800b09a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b07e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 f81e 	bl	800b0c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2220      	movs	r2, #32
 800b08a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e00f      	b.n	800b0ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69da      	ldr	r2, [r3, #28]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	bf0c      	ite	eq
 800b0aa:	2301      	moveq	r3, #1
 800b0ac:	2300      	movne	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	79fb      	ldrb	r3, [r7, #7]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d0a6      	beq.n	800b006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b095      	sub	sp, #84	; 0x54
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b0ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e6      	bne.n	800b0ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3308      	adds	r3, #8
 800b102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b112:	f023 0301 	bic.w	r3, r3, #1
 800b116:	64bb      	str	r3, [r7, #72]	; 0x48
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b120:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e3      	bne.n	800b0fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d118      	bne.n	800b16e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	60bb      	str	r3, [r7, #8]
   return(result);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f023 0310 	bic.w	r3, r3, #16
 800b150:	647b      	str	r3, [r7, #68]	; 0x44
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15a:	61bb      	str	r3, [r7, #24]
 800b15c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	6979      	ldr	r1, [r7, #20]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	613b      	str	r3, [r7, #16]
   return(result);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e6      	bne.n	800b13c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2220      	movs	r2, #32
 800b172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b182:	bf00      	nop
 800b184:	3754      	adds	r7, #84	; 0x54
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e027      	b.n	800b1f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2224      	movs	r2, #36	; 0x24
 800b1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b210:	2b01      	cmp	r3, #1
 800b212:	d101      	bne.n	800b218 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b214:	2302      	movs	r3, #2
 800b216:	e02d      	b.n	800b274 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2224      	movs	r2, #36	; 0x24
 800b224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0201 	bic.w	r2, r2, #1
 800b23e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	430a      	orrs	r2, r1
 800b252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f84f 	bl	800b2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d101      	bne.n	800b294 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b290:	2302      	movs	r3, #2
 800b292:	e02d      	b.n	800b2f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2224      	movs	r2, #36	; 0x24
 800b2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0201 	bic.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f811 	bl	800b2f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b304:	2b00      	cmp	r3, #0
 800b306:	d108      	bne.n	800b31a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b318:	e031      	b.n	800b37e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b31a:	2308      	movs	r3, #8
 800b31c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b31e:	2308      	movs	r3, #8
 800b320:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	0e5b      	lsrs	r3, r3, #25
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	f003 0307 	and.w	r3, r3, #7
 800b330:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	0f5b      	lsrs	r3, r3, #29
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	7b3a      	ldrb	r2, [r7, #12]
 800b346:	4911      	ldr	r1, [pc, #68]	; (800b38c <UARTEx_SetNbDataToProcess+0x94>)
 800b348:	5c8a      	ldrb	r2, [r1, r2]
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b34e:	7b3a      	ldrb	r2, [r7, #12]
 800b350:	490f      	ldr	r1, [pc, #60]	; (800b390 <UARTEx_SetNbDataToProcess+0x98>)
 800b352:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b354:	fb93 f3f2 	sdiv	r3, r3, r2
 800b358:	b29a      	uxth	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	7b7a      	ldrb	r2, [r7, #13]
 800b364:	4909      	ldr	r1, [pc, #36]	; (800b38c <UARTEx_SetNbDataToProcess+0x94>)
 800b366:	5c8a      	ldrb	r2, [r1, r2]
 800b368:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b36c:	7b7a      	ldrb	r2, [r7, #13]
 800b36e:	4908      	ldr	r1, [pc, #32]	; (800b390 <UARTEx_SetNbDataToProcess+0x98>)
 800b370:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b372:	fb93 f3f2 	sdiv	r3, r3, r2
 800b376:	b29a      	uxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	08015c0c 	.word	0x08015c0c
 800b390:	08015c14 	.word	0x08015c14

0800b394 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b096      	sub	sp, #88	; 0x58
 800b398:	af02      	add	r7, sp, #8
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b3a2:	2234      	movs	r2, #52	; 0x34
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f009 fd2a 	bl	8014e00 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	f1a3 0208 	sub.w	r2, r3, #8
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	3b04      	subs	r3, #4
 800b3f2:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b400:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3b04      	subs	r3, #4
 800b406:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b418:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3304      	adds	r3, #4
 800b428:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b430:	4a5d      	ldr	r2, [pc, #372]	; (800b5a8 <_tx_byte_pool_create+0x214>)
 800b432:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b43a:	f3ef 8310 	mrs	r3, PRIMASK
 800b43e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b442:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b444:	b672      	cpsid	i
#endif
    return(int_posture);
 800b446:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b448:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4a57      	ldr	r2, [pc, #348]	; (800b5ac <_tx_byte_pool_create+0x218>)
 800b44e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b450:	4b57      	ldr	r3, [pc, #348]	; (800b5b0 <_tx_byte_pool_create+0x21c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d109      	bne.n	800b46c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b458:	4a56      	ldr	r2, [pc, #344]	; (800b5b4 <_tx_byte_pool_create+0x220>)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	631a      	str	r2, [r3, #48]	; 0x30
 800b46a:	e011      	b.n	800b490 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b46c:	4b51      	ldr	r3, [pc, #324]	; (800b5b4 <_tx_byte_pool_create+0x220>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b476:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b488:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b48e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b490:	4b47      	ldr	r3, [pc, #284]	; (800b5b0 <_tx_byte_pool_create+0x21c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	4a46      	ldr	r2, [pc, #280]	; (800b5b0 <_tx_byte_pool_create+0x21c>)
 800b498:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b49a:	2300      	movs	r3, #0
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	68f9      	ldr	r1, [r7, #12]
 800b4a4:	2008      	movs	r0, #8
 800b4a6:	f002 fd6d 	bl	800df84 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b4aa:	4b43      	ldr	r3, [pc, #268]	; (800b5b8 <_tx_byte_pool_create+0x224>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d06c      	beq.n	800b590 <_tx_byte_pool_create+0x1fc>
 800b4b6:	4b41      	ldr	r3, [pc, #260]	; (800b5bc <_tx_byte_pool_create+0x228>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d066      	beq.n	800b590 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4c2:	f3ef 8305 	mrs	r3, IPSR
 800b4c6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b4c8:	69fa      	ldr	r2, [r7, #28]
 800b4ca:	4b3d      	ldr	r3, [pc, #244]	; (800b5c0 <_tx_byte_pool_create+0x22c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4d2:	4b3c      	ldr	r3, [pc, #240]	; (800b5c4 <_tx_byte_pool_create+0x230>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <_tx_byte_pool_create+0x162>
 800b4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e8:	041a      	lsls	r2, r3, #16
 800b4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4f4:	e00e      	b.n	800b514 <_tx_byte_pool_create+0x180>
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b4fc:	d205      	bcs.n	800b50a <_tx_byte_pool_create+0x176>
 800b4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b500:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	64bb      	str	r3, [r7, #72]	; 0x48
 800b508:	e004      	b.n	800b514 <_tx_byte_pool_create+0x180>
 800b50a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b50e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b510:	2300      	movs	r3, #0
 800b512:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b51e:	605a      	str	r2, [r3, #4]
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	2215      	movs	r2, #21
 800b524:	609a      	str	r2, [r3, #8]
 800b526:	4b28      	ldr	r3, [pc, #160]	; (800b5c8 <_tx_byte_pool_create+0x234>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	60da      	str	r2, [r3, #12]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	611a      	str	r2, [r3, #16]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	615a      	str	r2, [r3, #20]
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	619a      	str	r2, [r3, #24]
 800b540:	f107 0214 	add.w	r2, r7, #20
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	61da      	str	r2, [r3, #28]
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	3320      	adds	r3, #32
 800b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b54e:	4b1f      	ldr	r3, [pc, #124]	; (800b5cc <_tx_byte_pool_create+0x238>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b554:	429a      	cmp	r2, r3
 800b556:	d314      	bcc.n	800b582 <_tx_byte_pool_create+0x1ee>
 800b558:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <_tx_byte_pool_create+0x23c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b55e:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <_tx_byte_pool_create+0x224>)
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <_tx_byte_pool_create+0x240>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b56a:	621a      	str	r2, [r3, #32]
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <_tx_byte_pool_create+0x244>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00d      	beq.n	800b590 <_tx_byte_pool_create+0x1fc>
 800b574:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <_tx_byte_pool_create+0x244>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a16      	ldr	r2, [pc, #88]	; (800b5d4 <_tx_byte_pool_create+0x240>)
 800b57a:	6812      	ldr	r2, [r2, #0]
 800b57c:	4610      	mov	r0, r2
 800b57e:	4798      	blx	r3
 800b580:	e006      	b.n	800b590 <_tx_byte_pool_create+0x1fc>
 800b582:	4a0d      	ldr	r2, [pc, #52]	; (800b5b8 <_tx_byte_pool_create+0x224>)
 800b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <_tx_byte_pool_create+0x240>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b58e:	621a      	str	r2, [r3, #32]
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	f383 8810 	msr	PRIMASK, r3
}
 800b59a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3750      	adds	r7, #80	; 0x50
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	ffffeeee 	.word	0xffffeeee
 800b5ac:	42595445 	.word	0x42595445
 800b5b0:	20001678 	.word	0x20001678
 800b5b4:	20001674 	.word	0x20001674
 800b5b8:	20001ca0 	.word	0x20001ca0
 800b5bc:	20001ca4 	.word	0x20001ca4
 800b5c0:	2000000c 	.word	0x2000000c
 800b5c4:	20001684 	.word	0x20001684
 800b5c8:	e0001004 	.word	0xe0001004
 800b5cc:	20001c9c 	.word	0x20001c9c
 800b5d0:	20001c98 	.word	0x20001c98
 800b5d4:	20001c8c 	.word	0x20001c8c
 800b5d8:	20001ca8 	.word	0x20001ca8

0800b5dc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b5e0:	f002 fcaa 	bl	800df38 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b5e4:	f001 fbe6 	bl	800cdb4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b5e8:	f002 fa92 	bl	800db10 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b5ec:	4b12      	ldr	r3, [pc, #72]	; (800b638 <_tx_initialize_high_level+0x5c>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	4b12      	ldr	r3, [pc, #72]	; (800b63c <_tx_initialize_high_level+0x60>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b5f8:	4b11      	ldr	r3, [pc, #68]	; (800b640 <_tx_initialize_high_level+0x64>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <_tx_initialize_high_level+0x68>)
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b604:	4b10      	ldr	r3, [pc, #64]	; (800b648 <_tx_initialize_high_level+0x6c>)
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	4b10      	ldr	r3, [pc, #64]	; (800b64c <_tx_initialize_high_level+0x70>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b610:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <_tx_initialize_high_level+0x74>)
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <_tx_initialize_high_level+0x78>)
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b61c:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <_tx_initialize_high_level+0x7c>)
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	4b0e      	ldr	r3, [pc, #56]	; (800b65c <_tx_initialize_high_level+0x80>)
 800b624:	2200      	movs	r2, #0
 800b626:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <_tx_initialize_high_level+0x84>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <_tx_initialize_high_level+0x88>)
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
#endif
}
 800b634:	bf00      	nop
 800b636:	bd80      	pop	{r7, pc}
 800b638:	2000164c 	.word	0x2000164c
 800b63c:	20001650 	.word	0x20001650
 800b640:	20001654 	.word	0x20001654
 800b644:	20001658 	.word	0x20001658
 800b648:	2000165c 	.word	0x2000165c
 800b64c:	20001660 	.word	0x20001660
 800b650:	2000166c 	.word	0x2000166c
 800b654:	20001670 	.word	0x20001670
 800b658:	20001674 	.word	0x20001674
 800b65c:	20001678 	.word	0x20001678
 800b660:	20001664 	.word	0x20001664
 800b664:	20001668 	.word	0x20001668

0800b668 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b66c:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <_tx_initialize_kernel_enter+0x48>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b674:	d00c      	beq.n	800b690 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b676:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <_tx_initialize_kernel_enter+0x48>)
 800b678:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b67c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b67e:	f7f4 fdfb 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b682:	f7ff ffab 	bl	800b5dc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <_tx_initialize_kernel_enter+0x4c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3301      	adds	r3, #1
 800b68c:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <_tx_initialize_kernel_enter+0x4c>)
 800b68e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <_tx_initialize_kernel_enter+0x48>)
 800b692:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b696:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b698:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <_tx_initialize_kernel_enter+0x50>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f5 f8a9 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <_tx_initialize_kernel_enter+0x48>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b6a8:	f7f4 fe22 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b6ac:	bf00      	nop
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	2000000c 	.word	0x2000000c
 800b6b4:	2000171c 	.word	0x2000171c
 800b6b8:	2000167c 	.word	0x2000167c

0800b6bc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08e      	sub	sp, #56	; 0x38
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ca:	623b      	str	r3, [r7, #32]
    return(posture);
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b6ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6d0:	b672      	cpsid	i
    return(int_posture);
 800b6d2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6da:	4a37      	ldr	r2, [pc, #220]	; (800b7b8 <_tx_queue_cleanup+0xfc>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d161      	bne.n	800b7a4 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d15b      	bne.n	800b7a4 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d055      	beq.n	800b7a4 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a2f      	ldr	r2, [pc, #188]	; (800b7bc <_tx_queue_cleanup+0x100>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d150      	bne.n	800b7a4 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d04c      	beq.n	800b7a4 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	1e5a      	subs	r2, r3, #1
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	2200      	movs	r2, #0
 800b72a:	629a      	str	r2, [r3, #40]	; 0x28
 800b72c:	e013      	b.n	800b756 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b73e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b744:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d102      	bne.n	800b756 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d122      	bne.n	800b7a4 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	220b      	movs	r2, #11
 800b76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b76e:	e003      	b.n	800b778 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	220a      	movs	r2, #10
 800b774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b778:	4b11      	ldr	r3, [pc, #68]	; (800b7c0 <_tx_queue_cleanup+0x104>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	4a10      	ldr	r2, [pc, #64]	; (800b7c0 <_tx_queue_cleanup+0x104>)
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b784:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f383 8810 	msr	PRIMASK, r3
}
 800b78c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fcd6 	bl	800d140 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b794:	f3ef 8310 	mrs	r3, PRIMASK
 800b798:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b79a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b79c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b79e:	b672      	cpsid	i
    return(int_posture);
 800b7a0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f383 8810 	msr	PRIMASK, r3
}
 800b7ae:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b7b0:	bf00      	nop
 800b7b2:	3738      	adds	r7, #56	; 0x38
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	0800b6bd 	.word	0x0800b6bd
 800b7bc:	51554555 	.word	0x51554555
 800b7c0:	2000171c 	.word	0x2000171c

0800b7c4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b094      	sub	sp, #80	; 0x50
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b7d2:	2238      	movs	r2, #56	; 0x38
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f009 fb12 	bl	8014e00 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	699a      	ldr	r2, [r3, #24]
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	441a      	add	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b822:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b828:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b82a:	f3ef 8310 	mrs	r3, PRIMASK
 800b82e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b830:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b832:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b834:	b672      	cpsid	i
    return(int_posture);
 800b836:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b838:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4a55      	ldr	r2, [pc, #340]	; (800b994 <_tx_queue_create+0x1d0>)
 800b83e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b840:	4b55      	ldr	r3, [pc, #340]	; (800b998 <_tx_queue_create+0x1d4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d109      	bne.n	800b85c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b848:	4a54      	ldr	r2, [pc, #336]	; (800b99c <_tx_queue_create+0x1d8>)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	635a      	str	r2, [r3, #52]	; 0x34
 800b85a:	e011      	b.n	800b880 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b85c:	4b4f      	ldr	r3, [pc, #316]	; (800b99c <_tx_queue_create+0x1d8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b866:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b878:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b880:	4b45      	ldr	r3, [pc, #276]	; (800b998 <_tx_queue_create+0x1d4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	4a44      	ldr	r2, [pc, #272]	; (800b998 <_tx_queue_create+0x1d4>)
 800b888:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	2003      	movs	r0, #3
 800b896:	f002 fb75 	bl	800df84 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b89a:	4b41      	ldr	r3, [pc, #260]	; (800b9a0 <_tx_queue_create+0x1dc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d06b      	beq.n	800b97e <_tx_queue_create+0x1ba>
 800b8a6:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <_tx_queue_create+0x1e0>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d065      	beq.n	800b97e <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b8b2:	f3ef 8305 	mrs	r3, IPSR
 800b8b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b8b8:	69ba      	ldr	r2, [r7, #24]
 800b8ba:	4b3b      	ldr	r3, [pc, #236]	; (800b9a8 <_tx_queue_create+0x1e4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c2:	4b3a      	ldr	r3, [pc, #232]	; (800b9ac <_tx_queue_create+0x1e8>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10b      	bne.n	800b8e6 <_tx_queue_create+0x122>
 800b8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d8:	041a      	lsls	r2, r3, #16
 800b8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b8e4:	e00e      	b.n	800b904 <_tx_queue_create+0x140>
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b8ec:	d205      	bcs.n	800b8fa <_tx_queue_create+0x136>
 800b8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f6:	643b      	str	r3, [r7, #64]	; 0x40
 800b8f8:	e004      	b.n	800b904 <_tx_queue_create+0x140>
 800b8fa:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b900:	2300      	movs	r3, #0
 800b902:	647b      	str	r3, [r7, #68]	; 0x44
 800b904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b90e:	605a      	str	r2, [r3, #4]
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	223c      	movs	r2, #60	; 0x3c
 800b914:	609a      	str	r2, [r3, #8]
 800b916:	4b26      	ldr	r3, [pc, #152]	; (800b9b0 <_tx_queue_create+0x1ec>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	60da      	str	r2, [r3, #12]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	611a      	str	r2, [r3, #16]
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	615a      	str	r2, [r3, #20]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	619a      	str	r2, [r3, #24]
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b934:	61da      	str	r2, [r3, #28]
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	3320      	adds	r3, #32
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b93c:	4b1d      	ldr	r3, [pc, #116]	; (800b9b4 <_tx_queue_create+0x1f0>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b942:	429a      	cmp	r2, r3
 800b944:	d314      	bcc.n	800b970 <_tx_queue_create+0x1ac>
 800b946:	4b1c      	ldr	r3, [pc, #112]	; (800b9b8 <_tx_queue_create+0x1f4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b94c:	4a14      	ldr	r2, [pc, #80]	; (800b9a0 <_tx_queue_create+0x1dc>)
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <_tx_queue_create+0x1f8>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b958:	621a      	str	r2, [r3, #32]
 800b95a:	4b19      	ldr	r3, [pc, #100]	; (800b9c0 <_tx_queue_create+0x1fc>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <_tx_queue_create+0x1ba>
 800b962:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <_tx_queue_create+0x1fc>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a15      	ldr	r2, [pc, #84]	; (800b9bc <_tx_queue_create+0x1f8>)
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	4610      	mov	r0, r2
 800b96c:	4798      	blx	r3
 800b96e:	e006      	b.n	800b97e <_tx_queue_create+0x1ba>
 800b970:	4a0b      	ldr	r2, [pc, #44]	; (800b9a0 <_tx_queue_create+0x1dc>)
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <_tx_queue_create+0x1f8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b97c:	621a      	str	r2, [r3, #32]
 800b97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b980:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f383 8810 	msr	PRIMASK, r3
}
 800b988:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3748      	adds	r7, #72	; 0x48
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	51554555 	.word	0x51554555
 800b998:	20001658 	.word	0x20001658
 800b99c:	20001654 	.word	0x20001654
 800b9a0:	20001ca0 	.word	0x20001ca0
 800b9a4:	20001ca4 	.word	0x20001ca4
 800b9a8:	2000000c 	.word	0x2000000c
 800b9ac:	20001684 	.word	0x20001684
 800b9b0:	e0001004 	.word	0xe0001004
 800b9b4:	20001c9c 	.word	0x20001c9c
 800b9b8:	20001c98 	.word	0x20001c98
 800b9bc:	20001c8c 	.word	0x20001c8c
 800b9c0:	20001ca8 	.word	0x20001ca8

0800b9c4 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b094      	sub	sp, #80	; 0x50
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d8:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9de:	b672      	cpsid	i
    return(int_posture);
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b9e4:	4b76      	ldr	r3, [pc, #472]	; (800bbc0 <_tx_queue_flush+0x1fc>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d06c      	beq.n	800baca <_tx_queue_flush+0x106>
 800b9f0:	4b74      	ldr	r3, [pc, #464]	; (800bbc4 <_tx_queue_flush+0x200>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d066      	beq.n	800baca <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9fc:	f3ef 8305 	mrs	r3, IPSR
 800ba00:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ba02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba04:	4b70      	ldr	r3, [pc, #448]	; (800bbc8 <_tx_queue_flush+0x204>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	4b6f      	ldr	r3, [pc, #444]	; (800bbcc <_tx_queue_flush+0x208>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	643b      	str	r3, [r7, #64]	; 0x40
 800ba12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10b      	bne.n	800ba30 <_tx_queue_flush+0x6c>
 800ba18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba22:	041a      	lsls	r2, r3, #16
 800ba24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba26:	4313      	orrs	r3, r2
 800ba28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba2e:	e00e      	b.n	800ba4e <_tx_queue_flush+0x8a>
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ba36:	d205      	bcs.n	800ba44 <_tx_queue_flush+0x80>
 800ba38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ba3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba40:	643b      	str	r3, [r7, #64]	; 0x40
 800ba42:	e004      	b.n	800ba4e <_tx_queue_flush+0x8a>
 800ba44:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ba48:	643b      	str	r3, [r7, #64]	; 0x40
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba58:	605a      	str	r2, [r3, #4]
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	223e      	movs	r2, #62	; 0x3e
 800ba5e:	609a      	str	r2, [r3, #8]
 800ba60:	4b5b      	ldr	r3, [pc, #364]	; (800bbd0 <_tx_queue_flush+0x20c>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	60da      	str	r2, [r3, #12]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	611a      	str	r2, [r3, #16]
 800ba6e:	f107 0208 	add.w	r2, r7, #8
 800ba72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba74:	615a      	str	r2, [r3, #20]
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	2200      	movs	r2, #0
 800ba7a:	619a      	str	r2, [r3, #24]
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	2200      	movs	r2, #0
 800ba80:	61da      	str	r2, [r3, #28]
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	3320      	adds	r3, #32
 800ba86:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba88:	4b52      	ldr	r3, [pc, #328]	; (800bbd4 <_tx_queue_flush+0x210>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d314      	bcc.n	800babc <_tx_queue_flush+0xf8>
 800ba92:	4b51      	ldr	r3, [pc, #324]	; (800bbd8 <_tx_queue_flush+0x214>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba98:	4a49      	ldr	r2, [pc, #292]	; (800bbc0 <_tx_queue_flush+0x1fc>)
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4b4f      	ldr	r3, [pc, #316]	; (800bbdc <_tx_queue_flush+0x218>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa4:	621a      	str	r2, [r3, #32]
 800baa6:	4b4e      	ldr	r3, [pc, #312]	; (800bbe0 <_tx_queue_flush+0x21c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00d      	beq.n	800baca <_tx_queue_flush+0x106>
 800baae:	4b4c      	ldr	r3, [pc, #304]	; (800bbe0 <_tx_queue_flush+0x21c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a4a      	ldr	r2, [pc, #296]	; (800bbdc <_tx_queue_flush+0x218>)
 800bab4:	6812      	ldr	r2, [r2, #0]
 800bab6:	4610      	mov	r0, r2
 800bab8:	4798      	blx	r3
 800baba:	e006      	b.n	800baca <_tx_queue_flush+0x106>
 800babc:	4a40      	ldr	r2, [pc, #256]	; (800bbc0 <_tx_queue_flush+0x1fc>)
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	4b46      	ldr	r3, [pc, #280]	; (800bbdc <_tx_queue_flush+0x218>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d023      	beq.n	800bb1a <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699a      	ldr	r2, [r3, #24]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	699a      	ldr	r2, [r3, #24]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d010      	beq.n	800bb1a <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bb10:	4b34      	ldr	r3, [pc, #208]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	4a33      	ldr	r2, [pc, #204]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	f383 8810 	msr	PRIMASK, r3
}
 800bb24:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800bb26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d044      	beq.n	800bbb6 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800bb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2e:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800bb30:	e027      	b.n	800bb82 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800bb32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb34:	3b01      	subs	r3, #1
 800bb36:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d025      	beq.n	800bb8a <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb3e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb42:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bb44:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bb46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb48:	b672      	cpsid	i
    return(int_posture);
 800bb4a:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800bb4c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2200      	movs	r2, #0
 800bb52:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb60:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bb62:	4b20      	ldr	r3, [pc, #128]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3301      	adds	r3, #1
 800bb68:	4a1e      	ldr	r2, [pc, #120]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	f383 8810 	msr	PRIMASK, r3
}
 800bb76:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fadf 	bl	800d140 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800bb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1d4      	bne.n	800bb32 <_tx_queue_flush+0x16e>
 800bb88:	e000      	b.n	800bb8c <_tx_queue_flush+0x1c8>
                break;
 800bb8a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb90:	613b      	str	r3, [r7, #16]
    return(posture);
 800bb92:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bb94:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb96:	b672      	cpsid	i
    return(int_posture);
 800bb98:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800bb9c:	4b11      	ldr	r3, [pc, #68]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	4a10      	ldr	r2, [pc, #64]	; (800bbe4 <_tx_queue_flush+0x220>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f383 8810 	msr	PRIMASK, r3
}
 800bbb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bbb2:	f001 fa8b 	bl	800d0cc <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3750      	adds	r7, #80	; 0x50
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20001ca0 	.word	0x20001ca0
 800bbc4:	20001ca4 	.word	0x20001ca4
 800bbc8:	2000000c 	.word	0x2000000c
 800bbcc:	20001684 	.word	0x20001684
 800bbd0:	e0001004 	.word	0xe0001004
 800bbd4:	20001c9c 	.word	0x20001c9c
 800bbd8:	20001c98 	.word	0x20001c98
 800bbdc:	20001c8c 	.word	0x20001c8c
 800bbe0:	20001ca8 	.word	0x20001ca8
 800bbe4:	2000171c 	.word	0x2000171c

0800bbe8 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b09a      	sub	sp, #104	; 0x68
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbf8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bc00:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc02:	b672      	cpsid	i
    return(int_posture);
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800bc06:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800bc08:	4b77      	ldr	r3, [pc, #476]	; (800bde8 <_tx_queue_receive+0x200>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d06c      	beq.n	800bcee <_tx_queue_receive+0x106>
 800bc14:	4b75      	ldr	r3, [pc, #468]	; (800bdec <_tx_queue_receive+0x204>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d066      	beq.n	800bcee <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc20:	f3ef 8305 	mrs	r3, IPSR
 800bc24:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc28:	4b71      	ldr	r3, [pc, #452]	; (800bdf0 <_tx_queue_receive+0x208>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc30:	4b70      	ldr	r3, [pc, #448]	; (800bdf4 <_tx_queue_receive+0x20c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	653b      	str	r3, [r7, #80]	; 0x50
 800bc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10b      	bne.n	800bc54 <_tx_queue_receive+0x6c>
 800bc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	657b      	str	r3, [r7, #84]	; 0x54
 800bc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	041a      	lsls	r2, r3, #16
 800bc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc50:	657b      	str	r3, [r7, #84]	; 0x54
 800bc52:	e00e      	b.n	800bc72 <_tx_queue_receive+0x8a>
 800bc54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bc5a:	d205      	bcs.n	800bc68 <_tx_queue_receive+0x80>
 800bc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5e:	657b      	str	r3, [r7, #84]	; 0x54
 800bc60:	f04f 33ff 	mov.w	r3, #4294967295
 800bc64:	653b      	str	r3, [r7, #80]	; 0x50
 800bc66:	e004      	b.n	800bc72 <_tx_queue_receive+0x8a>
 800bc68:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bc6c:	653b      	str	r3, [r7, #80]	; 0x50
 800bc6e:	2300      	movs	r3, #0
 800bc70:	657b      	str	r3, [r7, #84]	; 0x54
 800bc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc7c:	605a      	str	r2, [r3, #4]
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc80:	2244      	movs	r2, #68	; 0x44
 800bc82:	609a      	str	r2, [r3, #8]
 800bc84:	4b5c      	ldr	r3, [pc, #368]	; (800bdf8 <_tx_queue_receive+0x210>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc8a:	60da      	str	r2, [r3, #12]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc90:	611a      	str	r2, [r3, #16]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc96:	615a      	str	r2, [r3, #20]
 800bc98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	619a      	str	r2, [r3, #24]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca4:	61da      	str	r2, [r3, #28]
 800bca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca8:	3320      	adds	r3, #32
 800bcaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcac:	4b53      	ldr	r3, [pc, #332]	; (800bdfc <_tx_queue_receive+0x214>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d314      	bcc.n	800bce0 <_tx_queue_receive+0xf8>
 800bcb6:	4b52      	ldr	r3, [pc, #328]	; (800be00 <_tx_queue_receive+0x218>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcbc:	4a4a      	ldr	r2, [pc, #296]	; (800bde8 <_tx_queue_receive+0x200>)
 800bcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	4b50      	ldr	r3, [pc, #320]	; (800be04 <_tx_queue_receive+0x21c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc8:	621a      	str	r2, [r3, #32]
 800bcca:	4b4f      	ldr	r3, [pc, #316]	; (800be08 <_tx_queue_receive+0x220>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00d      	beq.n	800bcee <_tx_queue_receive+0x106>
 800bcd2:	4b4d      	ldr	r3, [pc, #308]	; (800be08 <_tx_queue_receive+0x220>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a4b      	ldr	r2, [pc, #300]	; (800be04 <_tx_queue_receive+0x21c>)
 800bcd8:	6812      	ldr	r2, [r2, #0]
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4798      	blx	r3
 800bcde:	e006      	b.n	800bcee <_tx_queue_receive+0x106>
 800bce0:	4a41      	ldr	r2, [pc, #260]	; (800bde8 <_tx_queue_receive+0x200>)
 800bce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	4b47      	ldr	r3, [pc, #284]	; (800be04 <_tx_queue_receive+0x21c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcec:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 8149 	beq.w	800bf90 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bcfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d13c      	bne.n	800bd7e <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd16:	1d13      	adds	r3, r2, #4
 800bd18:	667b      	str	r3, [r7, #100]	; 0x64
 800bd1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd1c:	1d19      	adds	r1, r3, #4
 800bd1e:	6639      	str	r1, [r7, #96]	; 0x60
 800bd20:	6812      	ldr	r2, [r2, #0]
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d90e      	bls.n	800bd48 <_tx_queue_receive+0x160>
 800bd2a:	e007      	b.n	800bd3c <_tx_queue_receive+0x154>
 800bd2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd2e:	1d13      	adds	r3, r2, #4
 800bd30:	667b      	str	r3, [r7, #100]	; 0x64
 800bd32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd34:	1d19      	adds	r1, r3, #4
 800bd36:	6639      	str	r1, [r7, #96]	; 0x60
 800bd38:	6812      	ldr	r2, [r2, #0]
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1f1      	bne.n	800bd2c <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d102      	bne.n	800bd58 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd5c:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	611a      	str	r2, [r3, #16]
 800bd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	f383 8810 	msr	PRIMASK, r3
}
 800bd7c:	e176      	b.n	800c06c <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d166      	bne.n	800be5c <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd92:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bda0:	1d13      	adds	r3, r2, #4
 800bda2:	667b      	str	r3, [r7, #100]	; 0x64
 800bda4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda6:	1d19      	adds	r1, r3, #4
 800bda8:	6639      	str	r1, [r7, #96]	; 0x60
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d90e      	bls.n	800bdd2 <_tx_queue_receive+0x1ea>
 800bdb4:	e007      	b.n	800bdc6 <_tx_queue_receive+0x1de>
 800bdb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdb8:	1d13      	adds	r3, r2, #4
 800bdba:	667b      	str	r3, [r7, #100]	; 0x64
 800bdbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdbe:	1d19      	adds	r1, r3, #4
 800bdc0:	6639      	str	r1, [r7, #96]	; 0x60
 800bdc2:	6812      	ldr	r2, [r2, #0]
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f1      	bne.n	800bdb6 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bdd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bdd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d116      	bne.n	800be0c <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	629a      	str	r2, [r3, #40]	; 0x28
 800bde4:	e021      	b.n	800be2a <_tx_queue_receive+0x242>
 800bde6:	bf00      	nop
 800bde8:	20001ca0 	.word	0x20001ca0
 800bdec:	20001ca4 	.word	0x20001ca4
 800bdf0:	2000000c 	.word	0x2000000c
 800bdf4:	20001684 	.word	0x20001684
 800bdf8:	e0001004 	.word	0xe0001004
 800bdfc:	20001c9c 	.word	0x20001c9c
 800be00:	20001c98 	.word	0x20001c98
 800be04:	20001c8c 	.word	0x20001c8c
 800be08:	20001ca8 	.word	0x20001ca8
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800be0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be10:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be16:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800be18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be22:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800be24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be28:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	2200      	movs	r2, #0
 800be34:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800be3e:	4b8e      	ldr	r3, [pc, #568]	; (800c078 <_tx_queue_receive+0x490>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	4a8c      	ldr	r2, [pc, #560]	; (800c078 <_tx_queue_receive+0x490>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	f383 8810 	msr	PRIMASK, r3
}
 800be52:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800be54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be56:	f001 f973 	bl	800d140 <_tx_thread_system_resume>
 800be5a:	e107      	b.n	800c06c <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800be6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be6e:	1d13      	adds	r3, r2, #4
 800be70:	667b      	str	r3, [r7, #100]	; 0x64
 800be72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be74:	1d19      	adds	r1, r3, #4
 800be76:	6639      	str	r1, [r7, #96]	; 0x60
 800be78:	6812      	ldr	r2, [r2, #0]
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d90e      	bls.n	800bea0 <_tx_queue_receive+0x2b8>
 800be82:	e007      	b.n	800be94 <_tx_queue_receive+0x2ac>
 800be84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be86:	1d13      	adds	r3, r2, #4
 800be88:	667b      	str	r3, [r7, #100]	; 0x64
 800be8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be8c:	1d19      	adds	r1, r3, #4
 800be8e:	6639      	str	r1, [r7, #96]	; 0x60
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be96:	3b01      	subs	r3, #1
 800be98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f1      	bne.n	800be84 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d102      	bne.n	800beb0 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800beb4:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800beb6:	4b70      	ldr	r3, [pc, #448]	; (800c078 <_tx_queue_receive+0x490>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3301      	adds	r3, #1
 800bebc:	4a6e      	ldr	r2, [pc, #440]	; (800c078 <_tx_queue_receive+0x490>)
 800bebe:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bec0:	4b6d      	ldr	r3, [pc, #436]	; (800c078 <_tx_queue_receive+0x490>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	4a6c      	ldr	r2, [pc, #432]	; (800c078 <_tx_queue_receive+0x490>)
 800bec8:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800beca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800becc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bece:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bedc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bede:	1d13      	adds	r3, r2, #4
 800bee0:	667b      	str	r3, [r7, #100]	; 0x64
 800bee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bee4:	1d19      	adds	r1, r3, #4
 800bee6:	6639      	str	r1, [r7, #96]	; 0x60
 800bee8:	6812      	ldr	r2, [r2, #0]
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d90e      	bls.n	800bf10 <_tx_queue_receive+0x328>
 800bef2:	e007      	b.n	800bf04 <_tx_queue_receive+0x31c>
 800bef4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bef6:	1d13      	adds	r3, r2, #4
 800bef8:	667b      	str	r3, [r7, #100]	; 0x64
 800befa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800befc:	1d19      	adds	r1, r3, #4
 800befe:	6639      	str	r1, [r7, #96]	; 0x60
 800bf00:	6812      	ldr	r2, [r2, #0]
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf06:	3b01      	subs	r3, #1
 800bf08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f1      	bne.n	800bef4 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	69db      	ldr	r3, [r3, #28]
 800bf14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d102      	bne.n	800bf20 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf24:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bf2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bf32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d103      	bne.n	800bf40 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	629a      	str	r2, [r3, #40]	; 0x28
 800bf3e:	e00e      	b.n	800bf5e <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf44:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf4a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf56:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf5c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf62:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf66:	2200      	movs	r2, #0
 800bf68:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bf72:	4b41      	ldr	r3, [pc, #260]	; (800c078 <_tx_queue_receive+0x490>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3301      	adds	r3, #1
 800bf78:	4a3f      	ldr	r2, [pc, #252]	; (800c078 <_tx_queue_receive+0x490>)
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	f383 8810 	msr	PRIMASK, r3
}
 800bf86:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bf88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf8a:	f001 f8d9 	bl	800d140 <_tx_thread_system_resume>
 800bf8e:	e06d      	b.n	800c06c <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d062      	beq.n	800c05c <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bf96:	4b38      	ldr	r3, [pc, #224]	; (800c078 <_tx_queue_receive+0x490>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <_tx_queue_receive+0x3c8>
 800bf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	f383 8810 	msr	PRIMASK, r3
}
 800bfa8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bfaa:	230a      	movs	r3, #10
 800bfac:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfae:	e05d      	b.n	800c06c <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bfb0:	4b32      	ldr	r3, [pc, #200]	; (800c07c <_tx_queue_receive+0x494>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb8:	4a31      	ldr	r2, [pc, #196]	; (800c080 <_tx_queue_receive+0x498>)
 800bfba:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfda:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfe8:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfee:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bff4:	675a      	str	r2, [r3, #116]	; 0x74
 800bff6:	e011      	b.n	800c01c <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c002:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c008:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c00e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c014:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c01a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01e:	1c5a      	adds	r2, r3, #1
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c026:	2205      	movs	r2, #5
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	2201      	movs	r2, #1
 800c02e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c036:	4b10      	ldr	r3, [pc, #64]	; (800c078 <_tx_queue_receive+0x490>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3301      	adds	r3, #1
 800c03c:	4a0e      	ldr	r2, [pc, #56]	; (800c078 <_tx_queue_receive+0x490>)
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c042:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f383 8810 	msr	PRIMASK, r3
}
 800c04a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c04c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c04e:	f001 fa31 	bl	800d4b4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c058:	65bb      	str	r3, [r7, #88]	; 0x58
 800c05a:	e007      	b.n	800c06c <_tx_queue_receive+0x484>
 800c05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f383 8810 	msr	PRIMASK, r3
}
 800c066:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800c068:	230a      	movs	r3, #10
 800c06a:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c06c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3768      	adds	r7, #104	; 0x68
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	2000171c 	.word	0x2000171c
 800c07c:	20001684 	.word	0x20001684
 800c080:	0800b6bd 	.word	0x0800b6bd

0800c084 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b09a      	sub	sp, #104	; 0x68
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c090:	2300      	movs	r3, #0
 800c092:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c094:	f3ef 8310 	mrs	r3, PRIMASK
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c09e:	b672      	cpsid	i
    return(int_posture);
 800c0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c0a4:	4b7a      	ldr	r3, [pc, #488]	; (800c290 <_tx_queue_send+0x20c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d06c      	beq.n	800c18a <_tx_queue_send+0x106>
 800c0b0:	4b78      	ldr	r3, [pc, #480]	; (800c294 <_tx_queue_send+0x210>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d066      	beq.n	800c18a <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0bc:	f3ef 8305 	mrs	r3, IPSR
 800c0c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c4:	4b74      	ldr	r3, [pc, #464]	; (800c298 <_tx_queue_send+0x214>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c0cc:	4b73      	ldr	r3, [pc, #460]	; (800c29c <_tx_queue_send+0x218>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	653b      	str	r3, [r7, #80]	; 0x50
 800c0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <_tx_queue_send+0x6c>
 800c0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	657b      	str	r3, [r7, #84]	; 0x54
 800c0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e2:	041a      	lsls	r2, r3, #16
 800c0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0ec:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ee:	e00e      	b.n	800c10e <_tx_queue_send+0x8a>
 800c0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0f6:	d205      	bcs.n	800c104 <_tx_queue_send+0x80>
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c100:	653b      	str	r3, [r7, #80]	; 0x50
 800c102:	e004      	b.n	800c10e <_tx_queue_send+0x8a>
 800c104:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c108:	653b      	str	r3, [r7, #80]	; 0x50
 800c10a:	2300      	movs	r3, #0
 800c10c:	657b      	str	r3, [r7, #84]	; 0x54
 800c10e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c118:	605a      	str	r2, [r3, #4]
 800c11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c11c:	2245      	movs	r2, #69	; 0x45
 800c11e:	609a      	str	r2, [r3, #8]
 800c120:	4b5f      	ldr	r3, [pc, #380]	; (800c2a0 <_tx_queue_send+0x21c>)
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c126:	60da      	str	r2, [r3, #12]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c12c:	611a      	str	r2, [r3, #16]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c132:	615a      	str	r2, [r3, #20]
 800c134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	619a      	str	r2, [r3, #24]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	691a      	ldr	r2, [r3, #16]
 800c13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c140:	61da      	str	r2, [r3, #28]
 800c142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c144:	3320      	adds	r3, #32
 800c146:	64bb      	str	r3, [r7, #72]	; 0x48
 800c148:	4b56      	ldr	r3, [pc, #344]	; (800c2a4 <_tx_queue_send+0x220>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c14e:	429a      	cmp	r2, r3
 800c150:	d314      	bcc.n	800c17c <_tx_queue_send+0xf8>
 800c152:	4b55      	ldr	r3, [pc, #340]	; (800c2a8 <_tx_queue_send+0x224>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	64bb      	str	r3, [r7, #72]	; 0x48
 800c158:	4a4d      	ldr	r2, [pc, #308]	; (800c290 <_tx_queue_send+0x20c>)
 800c15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	4b53      	ldr	r3, [pc, #332]	; (800c2ac <_tx_queue_send+0x228>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c164:	621a      	str	r2, [r3, #32]
 800c166:	4b52      	ldr	r3, [pc, #328]	; (800c2b0 <_tx_queue_send+0x22c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00d      	beq.n	800c18a <_tx_queue_send+0x106>
 800c16e:	4b50      	ldr	r3, [pc, #320]	; (800c2b0 <_tx_queue_send+0x22c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a4e      	ldr	r2, [pc, #312]	; (800c2ac <_tx_queue_send+0x228>)
 800c174:	6812      	ldr	r2, [r2, #0]
 800c176:	4610      	mov	r0, r2
 800c178:	4798      	blx	r3
 800c17a:	e006      	b.n	800c18a <_tx_queue_send+0x106>
 800c17c:	4a44      	ldr	r2, [pc, #272]	; (800c290 <_tx_queue_send+0x20c>)
 800c17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	4b4a      	ldr	r3, [pc, #296]	; (800c2ac <_tx_queue_send+0x228>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c188:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 80ae 	beq.w	800c2f6 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d13c      	bne.n	800c21a <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	1e5a      	subs	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	1c5a      	adds	r2, r3, #1
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1bc:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c1c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1c6:	1d13      	adds	r3, r2, #4
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1cc:	1d19      	adds	r1, r3, #4
 800c1ce:	6639      	str	r1, [r7, #96]	; 0x60
 800c1d0:	6812      	ldr	r2, [r2, #0]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d90e      	bls.n	800c1f8 <_tx_queue_send+0x174>
 800c1da:	e007      	b.n	800c1ec <_tx_queue_send+0x168>
 800c1dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1de:	1d13      	adds	r3, r2, #4
 800c1e0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e4:	1d19      	adds	r1, r3, #4
 800c1e6:	6639      	str	r1, [r7, #96]	; 0x60
 800c1e8:	6812      	ldr	r2, [r2, #0]
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1f1      	bne.n	800c1dc <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d102      	bne.n	800c208 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c20c:	625a      	str	r2, [r3, #36]	; 0x24
 800c20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	f383 8810 	msr	PRIMASK, r3
}
 800c218:	e0db      	b.n	800c3d2 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c222:	3b01      	subs	r3, #1
 800c224:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	629a      	str	r2, [r3, #40]	; 0x28
 800c232:	e012      	b.n	800c25a <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c240:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c246:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c24c:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c252:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c258:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c25e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c262:	2200      	movs	r2, #0
 800c264:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26e:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c276:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c278:	1d13      	adds	r3, r2, #4
 800c27a:	667b      	str	r3, [r7, #100]	; 0x64
 800c27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c27e:	1d19      	adds	r1, r3, #4
 800c280:	6639      	str	r1, [r7, #96]	; 0x60
 800c282:	6812      	ldr	r2, [r2, #0]
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d921      	bls.n	800c2d0 <_tx_queue_send+0x24c>
 800c28c:	e01a      	b.n	800c2c4 <_tx_queue_send+0x240>
 800c28e:	bf00      	nop
 800c290:	20001ca0 	.word	0x20001ca0
 800c294:	20001ca4 	.word	0x20001ca4
 800c298:	2000000c 	.word	0x2000000c
 800c29c:	20001684 	.word	0x20001684
 800c2a0:	e0001004 	.word	0xe0001004
 800c2a4:	20001c9c 	.word	0x20001c9c
 800c2a8:	20001c98 	.word	0x20001c98
 800c2ac:	20001c8c 	.word	0x20001c8c
 800c2b0:	20001ca8 	.word	0x20001ca8
 800c2b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2b6:	1d13      	adds	r3, r2, #4
 800c2b8:	667b      	str	r3, [r7, #100]	; 0x64
 800c2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2bc:	1d19      	adds	r1, r3, #4
 800c2be:	6639      	str	r1, [r7, #96]	; 0x60
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1f1      	bne.n	800c2b4 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2d8:	4b40      	ldr	r3, [pc, #256]	; (800c3dc <_tx_queue_send+0x358>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	4a3f      	ldr	r2, [pc, #252]	; (800c3dc <_tx_queue_send+0x358>)
 800c2e0:	6013      	str	r3, [r2, #0]
 800c2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	f383 8810 	msr	PRIMASK, r3
}
 800c2ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c2ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2f0:	f000 ff26 	bl	800d140 <_tx_thread_system_resume>
 800c2f4:	e06d      	b.n	800c3d2 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d062      	beq.n	800c3c2 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c2fc:	4b37      	ldr	r3, [pc, #220]	; (800c3dc <_tx_queue_send+0x358>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d008      	beq.n	800c316 <_tx_queue_send+0x292>
 800c304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c306:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	f383 8810 	msr	PRIMASK, r3
}
 800c30e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c310:	230b      	movs	r3, #11
 800c312:	65bb      	str	r3, [r7, #88]	; 0x58
 800c314:	e05d      	b.n	800c3d2 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c316:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <_tx_queue_send+0x35c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c31e:	4a31      	ldr	r2, [pc, #196]	; (800c3e4 <_tx_queue_send+0x360>)
 800c320:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c330:	2200      	movs	r2, #0
 800c332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c338:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c340:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c34e:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c354:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c35a:	675a      	str	r2, [r3, #116]	; 0x74
 800c35c:	e011      	b.n	800c382 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c368:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36e:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c374:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c37a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c380:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38c:	2205      	movs	r2, #5
 800c38e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c392:	2201      	movs	r2, #1
 800c394:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c39c:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <_tx_queue_send+0x358>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a0e      	ldr	r2, [pc, #56]	; (800c3dc <_tx_queue_send+0x358>)
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	f383 8810 	msr	PRIMASK, r3
}
 800c3b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c3b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c3b4:	f001 f87e 	bl	800d4b4 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3c0:	e007      	b.n	800c3d2 <_tx_queue_send+0x34e>
 800c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f383 8810 	msr	PRIMASK, r3
}
 800c3cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c3ce:	230b      	movs	r3, #11
 800c3d0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3768      	adds	r7, #104	; 0x68
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	2000171c 	.word	0x2000171c
 800c3e0:	20001684 	.word	0x20001684
 800c3e4:	0800b6bd 	.word	0x0800b6bd

0800c3e8 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b092      	sub	sp, #72	; 0x48
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3fa:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c3fc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c3fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c400:	b672      	cpsid	i
    return(int_posture);
 800c402:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c404:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c406:	4b67      	ldr	r3, [pc, #412]	; (800c5a4 <_tx_semaphore_ceiling_put+0x1bc>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	637b      	str	r3, [r7, #52]	; 0x34
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d06d      	beq.n	800c4ee <_tx_semaphore_ceiling_put+0x106>
 800c412:	4b65      	ldr	r3, [pc, #404]	; (800c5a8 <_tx_semaphore_ceiling_put+0x1c0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d067      	beq.n	800c4ee <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c41e:	f3ef 8305 	mrs	r3, IPSR
 800c422:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	4b61      	ldr	r3, [pc, #388]	; (800c5ac <_tx_semaphore_ceiling_put+0x1c4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	633b      	str	r3, [r7, #48]	; 0x30
 800c42e:	4b60      	ldr	r3, [pc, #384]	; (800c5b0 <_tx_semaphore_ceiling_put+0x1c8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10b      	bne.n	800c452 <_tx_semaphore_ceiling_put+0x6a>
 800c43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43e:	643b      	str	r3, [r7, #64]	; 0x40
 800c440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c444:	041a      	lsls	r2, r3, #16
 800c446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c448:	4313      	orrs	r3, r2
 800c44a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c44e:	643b      	str	r3, [r7, #64]	; 0x40
 800c450:	e00e      	b.n	800c470 <_tx_semaphore_ceiling_put+0x88>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c458:	d205      	bcs.n	800c466 <_tx_semaphore_ceiling_put+0x7e>
 800c45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45c:	643b      	str	r3, [r7, #64]	; 0x40
 800c45e:	f04f 33ff 	mov.w	r3, #4294967295
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c464:	e004      	b.n	800c470 <_tx_semaphore_ceiling_put+0x88>
 800c466:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c46c:	2300      	movs	r3, #0
 800c46e:	643b      	str	r3, [r7, #64]	; 0x40
 800c470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c47a:	605a      	str	r2, [r3, #4]
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	2250      	movs	r2, #80	; 0x50
 800c480:	609a      	str	r2, [r3, #8]
 800c482:	4b4c      	ldr	r3, [pc, #304]	; (800c5b4 <_tx_semaphore_ceiling_put+0x1cc>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c488:	60da      	str	r2, [r3, #12]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	611a      	str	r2, [r3, #16]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	615a      	str	r2, [r3, #20]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49e:	619a      	str	r2, [r3, #24]
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	61da      	str	r2, [r3, #28]
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	3320      	adds	r3, #32
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ac:	4b42      	ldr	r3, [pc, #264]	; (800c5b8 <_tx_semaphore_ceiling_put+0x1d0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d314      	bcc.n	800c4e0 <_tx_semaphore_ceiling_put+0xf8>
 800c4b6:	4b41      	ldr	r3, [pc, #260]	; (800c5bc <_tx_semaphore_ceiling_put+0x1d4>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c4bc:	4a39      	ldr	r2, [pc, #228]	; (800c5a4 <_tx_semaphore_ceiling_put+0x1bc>)
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	4b3f      	ldr	r3, [pc, #252]	; (800c5c0 <_tx_semaphore_ceiling_put+0x1d8>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c8:	621a      	str	r2, [r3, #32]
 800c4ca:	4b3e      	ldr	r3, [pc, #248]	; (800c5c4 <_tx_semaphore_ceiling_put+0x1dc>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00d      	beq.n	800c4ee <_tx_semaphore_ceiling_put+0x106>
 800c4d2:	4b3c      	ldr	r3, [pc, #240]	; (800c5c4 <_tx_semaphore_ceiling_put+0x1dc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a3a      	ldr	r2, [pc, #232]	; (800c5c0 <_tx_semaphore_ceiling_put+0x1d8>)
 800c4d8:	6812      	ldr	r2, [r2, #0]
 800c4da:	4610      	mov	r0, r2
 800c4dc:	4798      	blx	r3
 800c4de:	e006      	b.n	800c4ee <_tx_semaphore_ceiling_put+0x106>
 800c4e0:	4a30      	ldr	r2, [pc, #192]	; (800c5a4 <_tx_semaphore_ceiling_put+0x1bc>)
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	4b36      	ldr	r3, [pc, #216]	; (800c5c0 <_tx_semaphore_ceiling_put+0x1d8>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ec:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d11b      	bne.n	800c532 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d808      	bhi.n	800c516 <_tx_semaphore_ceiling_put+0x12e>
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f383 8810 	msr	PRIMASK, r3
}
 800c50e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c510:	2321      	movs	r3, #33	; 0x21
 800c512:	647b      	str	r3, [r7, #68]	; 0x44
 800c514:	e041      	b.n	800c59a <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	609a      	str	r2, [r3, #8]
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f383 8810 	msr	PRIMASK, r3
}
 800c52a:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c52c:	2300      	movs	r3, #0
 800c52e:	647b      	str	r3, [r7, #68]	; 0x44
 800c530:	e033      	b.n	800c59a <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	3b01      	subs	r3, #1
 800c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	e00e      	b.n	800c56a <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c556:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c55c:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	6a3a      	ldr	r2, [r7, #32]
 800c562:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c568:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c56e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	2200      	movs	r2, #0
 800c574:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	2200      	movs	r2, #0
 800c57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c57e:	4b12      	ldr	r3, [pc, #72]	; (800c5c8 <_tx_semaphore_ceiling_put+0x1e0>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3301      	adds	r3, #1
 800c584:	4a10      	ldr	r2, [pc, #64]	; (800c5c8 <_tx_semaphore_ceiling_put+0x1e0>)
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f383 8810 	msr	PRIMASK, r3
}
 800c592:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c596:	f000 fdd3 	bl	800d140 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3748      	adds	r7, #72	; 0x48
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20001ca0 	.word	0x20001ca0
 800c5a8:	20001ca4 	.word	0x20001ca4
 800c5ac:	2000000c 	.word	0x2000000c
 800c5b0:	20001684 	.word	0x20001684
 800c5b4:	e0001004 	.word	0xe0001004
 800c5b8:	20001c9c 	.word	0x20001c9c
 800c5bc:	20001c98 	.word	0x20001c98
 800c5c0:	20001c8c 	.word	0x20001c8c
 800c5c4:	20001ca8 	.word	0x20001ca8
 800c5c8:	2000171c 	.word	0x2000171c

0800c5cc <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08e      	sub	sp, #56	; 0x38
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c5da:	623b      	str	r3, [r7, #32]
    return(posture);
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c5de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5e0:	b672      	cpsid	i
    return(int_posture);
 800c5e2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c5e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5ea:	4a33      	ldr	r2, [pc, #204]	; (800c6b8 <_tx_semaphore_cleanup+0xec>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d158      	bne.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d152      	bne.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c600:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	2b00      	cmp	r3, #0
 800c606:	d04c      	beq.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a2b      	ldr	r2, [pc, #172]	; (800c6bc <_tx_semaphore_cleanup+0xf0>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d147      	bne.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d043      	beq.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	1e5a      	subs	r2, r3, #1
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2200      	movs	r2, #0
 800c63a:	60da      	str	r2, [r3, #12]
 800c63c:	e013      	b.n	800c666 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c642:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c648:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c64e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c654:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d102      	bne.n	800c666 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c664:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	2b06      	cmp	r3, #6
 800c66c:	d119      	bne.n	800c6a2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	220d      	movs	r2, #13
 800c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c676:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <_tx_semaphore_cleanup+0xf4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4a10      	ldr	r2, [pc, #64]	; (800c6c0 <_tx_semaphore_cleanup+0xf4>)
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c682:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	f383 8810 	msr	PRIMASK, r3
}
 800c68a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fd57 	bl	800d140 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c692:	f3ef 8310 	mrs	r3, PRIMASK
 800c696:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c698:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c69a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c69c:	b672      	cpsid	i
    return(int_posture);
 800c69e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f383 8810 	msr	PRIMASK, r3
}
 800c6ac:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c6ae:	bf00      	nop
 800c6b0:	3738      	adds	r7, #56	; 0x38
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0800c5cd 	.word	0x0800c5cd
 800c6bc:	53454d41 	.word	0x53454d41
 800c6c0:	2000171c 	.word	0x2000171c

0800c6c4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b092      	sub	sp, #72	; 0x48
 800c6c8:	af02      	add	r7, sp, #8
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c6d0:	221c      	movs	r2, #28
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f008 fb93 	bl	8014e00 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c6ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6f0:	b672      	cpsid	i
    return(int_posture);
 800c6f2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c6f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4a56      	ldr	r2, [pc, #344]	; (800c854 <_tx_semaphore_create+0x190>)
 800c6fa:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c6fc:	4b56      	ldr	r3, [pc, #344]	; (800c858 <_tx_semaphore_create+0x194>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c704:	4a55      	ldr	r2, [pc, #340]	; (800c85c <_tx_semaphore_create+0x198>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	619a      	str	r2, [r3, #24]
 800c716:	e011      	b.n	800c73c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c718:	4b50      	ldr	r3, [pc, #320]	; (800c85c <_tx_semaphore_create+0x198>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c734:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c73c:	4b46      	ldr	r3, [pc, #280]	; (800c858 <_tx_semaphore_create+0x194>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	4a45      	ldr	r2, [pc, #276]	; (800c858 <_tx_semaphore_create+0x194>)
 800c744:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c746:	2300      	movs	r3, #0
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	2004      	movs	r0, #4
 800c752:	f001 fc17 	bl	800df84 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c756:	4b42      	ldr	r3, [pc, #264]	; (800c860 <_tx_semaphore_create+0x19c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d06c      	beq.n	800c83c <_tx_semaphore_create+0x178>
 800c762:	4b40      	ldr	r3, [pc, #256]	; (800c864 <_tx_semaphore_create+0x1a0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d066      	beq.n	800c83c <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c76e:	f3ef 8305 	mrs	r3, IPSR
 800c772:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c774:	69fa      	ldr	r2, [r7, #28]
 800c776:	4b3c      	ldr	r3, [pc, #240]	; (800c868 <_tx_semaphore_create+0x1a4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c77e:	4b3b      	ldr	r3, [pc, #236]	; (800c86c <_tx_semaphore_create+0x1a8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10b      	bne.n	800c7a2 <_tx_semaphore_create+0xde>
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c794:	041a      	lsls	r2, r3, #16
 800c796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c798:	4313      	orrs	r3, r2
 800c79a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a0:	e00e      	b.n	800c7c0 <_tx_semaphore_create+0xfc>
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c7a8:	d205      	bcs.n	800c7b6 <_tx_semaphore_create+0xf2>
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7b4:	e004      	b.n	800c7c0 <_tx_semaphore_create+0xfc>
 800c7b6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c7ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7bc:	2300      	movs	r3, #0
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7ca:	605a      	str	r2, [r3, #4]
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	2251      	movs	r2, #81	; 0x51
 800c7d0:	609a      	str	r2, [r3, #8]
 800c7d2:	4b27      	ldr	r3, [pc, #156]	; (800c870 <_tx_semaphore_create+0x1ac>)
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	60da      	str	r2, [r3, #12]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	611a      	str	r2, [r3, #16]
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	615a      	str	r2, [r3, #20]
 800c7e6:	f107 0214 	add.w	r2, r7, #20
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	619a      	str	r2, [r3, #24]
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	61da      	str	r2, [r3, #28]
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	3320      	adds	r3, #32
 800c7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7fa:	4b1e      	ldr	r3, [pc, #120]	; (800c874 <_tx_semaphore_create+0x1b0>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c800:	429a      	cmp	r2, r3
 800c802:	d314      	bcc.n	800c82e <_tx_semaphore_create+0x16a>
 800c804:	4b1c      	ldr	r3, [pc, #112]	; (800c878 <_tx_semaphore_create+0x1b4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c80a:	4a15      	ldr	r2, [pc, #84]	; (800c860 <_tx_semaphore_create+0x19c>)
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <_tx_semaphore_create+0x1b8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c816:	621a      	str	r2, [r3, #32]
 800c818:	4b19      	ldr	r3, [pc, #100]	; (800c880 <_tx_semaphore_create+0x1bc>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00d      	beq.n	800c83c <_tx_semaphore_create+0x178>
 800c820:	4b17      	ldr	r3, [pc, #92]	; (800c880 <_tx_semaphore_create+0x1bc>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a15      	ldr	r2, [pc, #84]	; (800c87c <_tx_semaphore_create+0x1b8>)
 800c826:	6812      	ldr	r2, [r2, #0]
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
 800c82c:	e006      	b.n	800c83c <_tx_semaphore_create+0x178>
 800c82e:	4a0c      	ldr	r2, [pc, #48]	; (800c860 <_tx_semaphore_create+0x19c>)
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	4b11      	ldr	r3, [pc, #68]	; (800c87c <_tx_semaphore_create+0x1b8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c83a:	621a      	str	r2, [r3, #32]
 800c83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	f383 8810 	msr	PRIMASK, r3
}
 800c846:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3740      	adds	r7, #64	; 0x40
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	53454d41 	.word	0x53454d41
 800c858:	20001650 	.word	0x20001650
 800c85c:	2000164c 	.word	0x2000164c
 800c860:	20001ca0 	.word	0x20001ca0
 800c864:	20001ca4 	.word	0x20001ca4
 800c868:	2000000c 	.word	0x2000000c
 800c86c:	20001684 	.word	0x20001684
 800c870:	e0001004 	.word	0xe0001004
 800c874:	20001c9c 	.word	0x20001c9c
 800c878:	20001c98 	.word	0x20001c98
 800c87c:	20001c8c 	.word	0x20001c8c
 800c880:	20001ca8 	.word	0x20001ca8

0800c884 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b092      	sub	sp, #72	; 0x48
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c88e:	2300      	movs	r3, #0
 800c890:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c892:	f3ef 8310 	mrs	r3, PRIMASK
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c89a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c89c:	b672      	cpsid	i
    return(int_posture);
 800c89e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c8a0:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c8a2:	4b78      	ldr	r3, [pc, #480]	; (800ca84 <_tx_semaphore_get+0x200>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d06d      	beq.n	800c98a <_tx_semaphore_get+0x106>
 800c8ae:	4b76      	ldr	r3, [pc, #472]	; (800ca88 <_tx_semaphore_get+0x204>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d067      	beq.n	800c98a <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c8ba:	f3ef 8305 	mrs	r3, IPSR
 800c8be:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c8c0:	69fa      	ldr	r2, [r7, #28]
 800c8c2:	4b72      	ldr	r3, [pc, #456]	; (800ca8c <_tx_semaphore_get+0x208>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ca:	4b71      	ldr	r3, [pc, #452]	; (800ca90 <_tx_semaphore_get+0x20c>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10b      	bne.n	800c8ee <_tx_semaphore_get+0x6a>
 800c8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	643b      	str	r3, [r7, #64]	; 0x40
 800c8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e0:	041a      	lsls	r2, r3, #16
 800c8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c8ec:	e00e      	b.n	800c90c <_tx_semaphore_get+0x88>
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c8f4:	d205      	bcs.n	800c902 <_tx_semaphore_get+0x7e>
 800c8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f8:	643b      	str	r3, [r7, #64]	; 0x40
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c900:	e004      	b.n	800c90c <_tx_semaphore_get+0x88>
 800c902:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c908:	2300      	movs	r3, #0
 800c90a:	643b      	str	r3, [r7, #64]	; 0x40
 800c90c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c916:	605a      	str	r2, [r3, #4]
 800c918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c91a:	2253      	movs	r2, #83	; 0x53
 800c91c:	609a      	str	r2, [r3, #8]
 800c91e:	4b5d      	ldr	r3, [pc, #372]	; (800ca94 <_tx_semaphore_get+0x210>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92a:	611a      	str	r2, [r3, #16]
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	615a      	str	r2, [r3, #20]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689a      	ldr	r2, [r3, #8]
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	619a      	str	r2, [r3, #24]
 800c93a:	f107 0208 	add.w	r2, r7, #8
 800c93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c940:	61da      	str	r2, [r3, #28]
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c944:	3320      	adds	r3, #32
 800c946:	637b      	str	r3, [r7, #52]	; 0x34
 800c948:	4b53      	ldr	r3, [pc, #332]	; (800ca98 <_tx_semaphore_get+0x214>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94e:	429a      	cmp	r2, r3
 800c950:	d314      	bcc.n	800c97c <_tx_semaphore_get+0xf8>
 800c952:	4b52      	ldr	r3, [pc, #328]	; (800ca9c <_tx_semaphore_get+0x218>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	637b      	str	r3, [r7, #52]	; 0x34
 800c958:	4a4a      	ldr	r2, [pc, #296]	; (800ca84 <_tx_semaphore_get+0x200>)
 800c95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	4b50      	ldr	r3, [pc, #320]	; (800caa0 <_tx_semaphore_get+0x21c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c964:	621a      	str	r2, [r3, #32]
 800c966:	4b4f      	ldr	r3, [pc, #316]	; (800caa4 <_tx_semaphore_get+0x220>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00d      	beq.n	800c98a <_tx_semaphore_get+0x106>
 800c96e:	4b4d      	ldr	r3, [pc, #308]	; (800caa4 <_tx_semaphore_get+0x220>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a4b      	ldr	r2, [pc, #300]	; (800caa0 <_tx_semaphore_get+0x21c>)
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	4610      	mov	r0, r2
 800c978:	4798      	blx	r3
 800c97a:	e006      	b.n	800c98a <_tx_semaphore_get+0x106>
 800c97c:	4a41      	ldr	r2, [pc, #260]	; (800ca84 <_tx_semaphore_get+0x200>)
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	4b47      	ldr	r3, [pc, #284]	; (800caa0 <_tx_semaphore_get+0x21c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c988:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00a      	beq.n	800c9a8 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	1e5a      	subs	r2, r3, #1
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	609a      	str	r2, [r3, #8]
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	f383 8810 	msr	PRIMASK, r3
}
 800c9a6:	e068      	b.n	800ca7a <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d05d      	beq.n	800ca6a <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c9ae:	4b3e      	ldr	r3, [pc, #248]	; (800caa8 <_tx_semaphore_get+0x224>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d008      	beq.n	800c9c8 <_tx_semaphore_get+0x144>
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f383 8810 	msr	PRIMASK, r3
}
 800c9c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c9c2:	230d      	movs	r3, #13
 800c9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c6:	e058      	b.n	800ca7a <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c9c8:	4b31      	ldr	r3, [pc, #196]	; (800ca90 <_tx_semaphore_get+0x20c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4a36      	ldr	r2, [pc, #216]	; (800caac <_tx_semaphore_get+0x228>)
 800c9d2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c9e0:	3201      	adds	r2, #1
 800c9e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d109      	bne.n	800ca02 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	675a      	str	r2, [r3, #116]	; 0x74
 800ca00:	e011      	b.n	800ca26 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca0c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca12:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca18:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2206      	movs	r2, #6
 800ca34:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ca42:	4b19      	ldr	r3, [pc, #100]	; (800caa8 <_tx_semaphore_get+0x224>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <_tx_semaphore_get+0x224>)
 800ca4a:	6013      	str	r3, [r2, #0]
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f383 8810 	msr	PRIMASK, r3
}
 800ca56:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 fd2a 	bl	800d4b4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca66:	647b      	str	r3, [r7, #68]	; 0x44
 800ca68:	e007      	b.n	800ca7a <_tx_semaphore_get+0x1f6>
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f383 8810 	msr	PRIMASK, r3
}
 800ca74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800ca76:	230d      	movs	r3, #13
 800ca78:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800ca7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3748      	adds	r7, #72	; 0x48
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20001ca0 	.word	0x20001ca0
 800ca88:	20001ca4 	.word	0x20001ca4
 800ca8c:	2000000c 	.word	0x2000000c
 800ca90:	20001684 	.word	0x20001684
 800ca94:	e0001004 	.word	0xe0001004
 800ca98:	20001c9c 	.word	0x20001c9c
 800ca9c:	20001c98 	.word	0x20001c98
 800caa0:	20001c8c 	.word	0x20001c8c
 800caa4:	20001ca8 	.word	0x20001ca8
 800caa8:	2000171c 	.word	0x2000171c
 800caac:	0800c5cd 	.word	0x0800c5cd

0800cab0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b09a      	sub	sp, #104	; 0x68
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cabe:	2300      	movs	r3, #0
 800cac0:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cac2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cac4:	21ef      	movs	r1, #239	; 0xef
 800cac6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cac8:	f008 f99a 	bl	8014e00 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cacc:	22b0      	movs	r2, #176	; 0xb0
 800cace:	2100      	movs	r1, #0
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f008 f995 	bl	8014e00 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800caec:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800caf2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800caf8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cafe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb06:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb0c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2220      	movs	r2, #32
 800cb12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cb16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb18:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cb1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb20:	4413      	add	r3, r2
 800cb22:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb28:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cb2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d007      	beq.n	800cb42 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cb40:	e006      	b.n	800cb50 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb46:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2203      	movs	r2, #3
 800cb54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4a86      	ldr	r2, [pc, #536]	; (800cd74 <_tx_thread_create+0x2c4>)
 800cb5a:	655a      	str	r2, [r3, #84]	; 0x54
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cb62:	4985      	ldr	r1, [pc, #532]	; (800cd78 <_tx_thread_create+0x2c8>)
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7f3 fc31 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb6a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cb72:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb74:	b672      	cpsid	i
    return(int_posture);
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cb78:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4a7f      	ldr	r2, [pc, #508]	; (800cd7c <_tx_thread_create+0x2cc>)
 800cb7e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cb80:	4b7f      	ldr	r3, [pc, #508]	; (800cd80 <_tx_thread_create+0x2d0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10b      	bne.n	800cba0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cb88:	4a7e      	ldr	r2, [pc, #504]	; (800cd84 <_tx_thread_create+0x2d4>)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800cb9e:	e016      	b.n	800cbce <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cba0:	4b78      	ldr	r3, [pc, #480]	; (800cd84 <_tx_thread_create+0x2d4>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbac:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cbce:	4b6c      	ldr	r3, [pc, #432]	; (800cd80 <_tx_thread_create+0x2d0>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	4a6a      	ldr	r2, [pc, #424]	; (800cd80 <_tx_thread_create+0x2d0>)
 800cbd6:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800cbd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f001 f9cd 	bl	800df84 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800cbea:	4b67      	ldr	r3, [pc, #412]	; (800cd88 <_tx_thread_create+0x2d8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d06b      	beq.n	800ccce <_tx_thread_create+0x21e>
 800cbf6:	4b65      	ldr	r3, [pc, #404]	; (800cd8c <_tx_thread_create+0x2dc>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d065      	beq.n	800ccce <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc02:	f3ef 8305 	mrs	r3, IPSR
 800cc06:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800cc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc0a:	4b61      	ldr	r3, [pc, #388]	; (800cd90 <_tx_thread_create+0x2e0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc12:	4b60      	ldr	r3, [pc, #384]	; (800cd94 <_tx_thread_create+0x2e4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	653b      	str	r3, [r7, #80]	; 0x50
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10b      	bne.n	800cc36 <_tx_thread_create+0x186>
 800cc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc22:	657b      	str	r3, [r7, #84]	; 0x54
 800cc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc28:	041a      	lsls	r2, r3, #16
 800cc2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc32:	657b      	str	r3, [r7, #84]	; 0x54
 800cc34:	e00e      	b.n	800cc54 <_tx_thread_create+0x1a4>
 800cc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc38:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc3c:	d205      	bcs.n	800cc4a <_tx_thread_create+0x19a>
 800cc3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc40:	657b      	str	r3, [r7, #84]	; 0x54
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295
 800cc46:	653b      	str	r3, [r7, #80]	; 0x50
 800cc48:	e004      	b.n	800cc54 <_tx_thread_create+0x1a4>
 800cc4a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cc4e:	653b      	str	r3, [r7, #80]	; 0x50
 800cc50:	2300      	movs	r3, #0
 800cc52:	657b      	str	r3, [r7, #84]	; 0x54
 800cc54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc5e:	605a      	str	r2, [r3, #4]
 800cc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc62:	2264      	movs	r2, #100	; 0x64
 800cc64:	609a      	str	r2, [r3, #8]
 800cc66:	4b4c      	ldr	r3, [pc, #304]	; (800cd98 <_tx_thread_create+0x2e8>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6c:	60da      	str	r2, [r3, #12]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc72:	611a      	str	r2, [r3, #16]
 800cc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc78:	615a      	str	r2, [r3, #20]
 800cc7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7e:	619a      	str	r2, [r3, #24]
 800cc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc84:	61da      	str	r2, [r3, #28]
 800cc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc88:	3320      	adds	r3, #32
 800cc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8c:	4b43      	ldr	r3, [pc, #268]	; (800cd9c <_tx_thread_create+0x2ec>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d314      	bcc.n	800ccc0 <_tx_thread_create+0x210>
 800cc96:	4b42      	ldr	r3, [pc, #264]	; (800cda0 <_tx_thread_create+0x2f0>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc9c:	4a3a      	ldr	r2, [pc, #232]	; (800cd88 <_tx_thread_create+0x2d8>)
 800cc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	4b40      	ldr	r3, [pc, #256]	; (800cda4 <_tx_thread_create+0x2f4>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cca8:	621a      	str	r2, [r3, #32]
 800ccaa:	4b3f      	ldr	r3, [pc, #252]	; (800cda8 <_tx_thread_create+0x2f8>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00d      	beq.n	800ccce <_tx_thread_create+0x21e>
 800ccb2:	4b3d      	ldr	r3, [pc, #244]	; (800cda8 <_tx_thread_create+0x2f8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a3b      	ldr	r2, [pc, #236]	; (800cda4 <_tx_thread_create+0x2f4>)
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	4610      	mov	r0, r2
 800ccbc:	4798      	blx	r3
 800ccbe:	e006      	b.n	800ccce <_tx_thread_create+0x21e>
 800ccc0:	4a31      	ldr	r2, [pc, #196]	; (800cd88 <_tx_thread_create+0x2d8>)
 800ccc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <_tx_thread_create+0x2f4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cccc:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ccce:	4b37      	ldr	r3, [pc, #220]	; (800cdac <_tx_thread_create+0x2fc>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	4a35      	ldr	r2, [pc, #212]	; (800cdac <_tx_thread_create+0x2fc>)
 800ccd6:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ccd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d129      	bne.n	800cd32 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ccde:	f3ef 8305 	mrs	r3, IPSR
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cce6:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <_tx_thread_create+0x2e0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ccf0:	d30d      	bcc.n	800cd0e <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ccf2:	4b2f      	ldr	r3, [pc, #188]	; (800cdb0 <_tx_thread_create+0x300>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ccf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d009      	beq.n	800cd12 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ccfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd02:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cd04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd0a:	63da      	str	r2, [r3, #60]	; 0x3c
 800cd0c:	e001      	b.n	800cd12 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	f383 8810 	msr	PRIMASK, r3
}
 800cd1c:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 fa0e 	bl	800d140 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01e      	beq.n	800cd68 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cd2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd2e:	63da      	str	r2, [r3, #60]	; 0x3c
 800cd30:	e01a      	b.n	800cd68 <_tx_thread_create+0x2b8>
 800cd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f383 8810 	msr	PRIMASK, r3
}
 800cd3c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cd42:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cd44:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cd46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd48:	b672      	cpsid	i
    return(int_posture);
 800cd4a:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cd4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cd4e:	4b17      	ldr	r3, [pc, #92]	; (800cdac <_tx_thread_create+0x2fc>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	4a15      	ldr	r2, [pc, #84]	; (800cdac <_tx_thread_create+0x2fc>)
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	f383 8810 	msr	PRIMASK, r3
}
 800cd62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cd64:	f000 f9b2 	bl	800d0cc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3760      	adds	r7, #96	; 0x60
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	0800da55 	.word	0x0800da55
 800cd78:	0800ce31 	.word	0x0800ce31
 800cd7c:	54485244 	.word	0x54485244
 800cd80:	20001690 	.word	0x20001690
 800cd84:	2000168c 	.word	0x2000168c
 800cd88:	20001ca0 	.word	0x20001ca0
 800cd8c:	20001ca4 	.word	0x20001ca4
 800cd90:	2000000c 	.word	0x2000000c
 800cd94:	20001684 	.word	0x20001684
 800cd98:	e0001004 	.word	0xe0001004
 800cd9c:	20001c9c 	.word	0x20001c9c
 800cda0:	20001c98 	.word	0x20001c98
 800cda4:	20001c8c 	.word	0x20001c8c
 800cda8:	20001ca8 	.word	0x20001ca8
 800cdac:	2000171c 	.word	0x2000171c
 800cdb0:	20001688 	.word	0x20001688

0800cdb4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cdb8:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <_tx_thread_initialize+0x54>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cdbe:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <_tx_thread_initialize+0x58>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	4b12      	ldr	r3, [pc, #72]	; (800ce10 <_tx_thread_initialize+0x5c>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cdca:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <_tx_thread_initialize+0x60>)
 800cdcc:	2220      	movs	r2, #32
 800cdce:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cdd0:	2280      	movs	r2, #128	; 0x80
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4810      	ldr	r0, [pc, #64]	; (800ce18 <_tx_thread_initialize+0x64>)
 800cdd6:	f008 f813 	bl	8014e00 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cdda:	4b10      	ldr	r3, [pc, #64]	; (800ce1c <_tx_thread_initialize+0x68>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cde0:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <_tx_thread_initialize+0x6c>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cde6:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <_tx_thread_initialize+0x70>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <_tx_thread_initialize+0x74>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cdf2:	4b0e      	ldr	r3, [pc, #56]	; (800ce2c <_tx_thread_initialize+0x78>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cdfa:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cdfe:	4a0b      	ldr	r2, [pc, #44]	; (800ce2c <_tx_thread_initialize+0x78>)
 800ce00:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800ce02:	bf00      	nop
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20001684 	.word	0x20001684
 800ce0c:	20001688 	.word	0x20001688
 800ce10:	20001694 	.word	0x20001694
 800ce14:	20001698 	.word	0x20001698
 800ce18:	2000169c 	.word	0x2000169c
 800ce1c:	2000168c 	.word	0x2000168c
 800ce20:	20001690 	.word	0x20001690
 800ce24:	2000171c 	.word	0x2000171c
 800ce28:	20001720 	.word	0x20001720
 800ce2c:	20001724 	.word	0x20001724

0800ce30 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ce36:	4b21      	ldr	r3, [pc, #132]	; (800cebc <_tx_thread_shell_entry+0x8c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ce44:	4610      	mov	r0, r2
 800ce46:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ce48:	4b1d      	ldr	r3, [pc, #116]	; (800cec0 <_tx_thread_shell_entry+0x90>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ce50:	4b1b      	ldr	r3, [pc, #108]	; (800cec0 <_tx_thread_shell_entry+0x90>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	69f8      	ldr	r0, [r7, #28]
 800ce56:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce58:	f3ef 8310 	mrs	r3, PRIMASK
 800ce5c:	607b      	str	r3, [r7, #4]
    return(posture);
 800ce5e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ce60:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce62:	b672      	cpsid	i
    return(int_posture);
 800ce64:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ce66:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	2201      	movs	r2, #1
 800ce72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	2200      	movs	r2, #0
 800ce78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ce7a:	4b12      	ldr	r3, [pc, #72]	; (800cec4 <_tx_thread_shell_entry+0x94>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	4a10      	ldr	r2, [pc, #64]	; (800cec4 <_tx_thread_shell_entry+0x94>)
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	f383 8810 	msr	PRIMASK, r3
}
 800ce8e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ce90:	f3ef 8314 	mrs	r3, CONTROL
 800ce94:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ce96:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f023 0304 	bic.w	r3, r3, #4
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f383 8814 	msr	CONTROL, r3
}
 800ceac:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ceae:	69f8      	ldr	r0, [r7, #28]
 800ceb0:	f000 fb00 	bl	800d4b4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ceb4:	bf00      	nop
 800ceb6:	3720      	adds	r7, #32
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20001684 	.word	0x20001684
 800cec0:	20001720 	.word	0x20001720
 800cec4:	2000171c 	.word	0x2000171c

0800cec8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b094      	sub	sp, #80	; 0x50
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ced0:	f3ef 8310 	mrs	r3, PRIMASK
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ced8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceda:	b672      	cpsid	i
    return(int_posture);
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cede:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cee0:	4b6f      	ldr	r3, [pc, #444]	; (800d0a0 <_tx_thread_sleep+0x1d8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d108      	bne.n	800cefe <_tx_thread_sleep+0x36>
 800ceec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceee:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef2:	f383 8810 	msr	PRIMASK, r3
}
 800cef6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cef8:	2313      	movs	r3, #19
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	e0ca      	b.n	800d094 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cefe:	f3ef 8305 	mrs	r3, IPSR
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cf04:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf06:	4b67      	ldr	r3, [pc, #412]	; (800d0a4 <_tx_thread_sleep+0x1dc>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d008      	beq.n	800cf22 <_tx_thread_sleep+0x5a>
 800cf10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	f383 8810 	msr	PRIMASK, r3
}
 800cf1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf1c:	2313      	movs	r3, #19
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e0b8      	b.n	800d094 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cf22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf24:	4a60      	ldr	r2, [pc, #384]	; (800d0a8 <_tx_thread_sleep+0x1e0>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d108      	bne.n	800cf3c <_tx_thread_sleep+0x74>
 800cf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf2c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	f383 8810 	msr	PRIMASK, r3
}
 800cf34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf36:	2313      	movs	r3, #19
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	e0ab      	b.n	800d094 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d108      	bne.n	800cf54 <_tx_thread_sleep+0x8c>
 800cf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	f383 8810 	msr	PRIMASK, r3
}
 800cf4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	e09f      	b.n	800d094 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cf54:	4b55      	ldr	r3, [pc, #340]	; (800d0ac <_tx_thread_sleep+0x1e4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d008      	beq.n	800cf6e <_tx_thread_sleep+0xa6>
 800cf5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf5e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f383 8810 	msr	PRIMASK, r3
}
 800cf66:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cf68:	2313      	movs	r3, #19
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e092      	b.n	800d094 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800cf6e:	4b50      	ldr	r3, [pc, #320]	; (800d0b0 <_tx_thread_sleep+0x1e8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d06d      	beq.n	800d056 <_tx_thread_sleep+0x18e>
 800cf7a:	4b4e      	ldr	r3, [pc, #312]	; (800d0b4 <_tx_thread_sleep+0x1ec>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d067      	beq.n	800d056 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf86:	f3ef 8305 	mrs	r3, IPSR
 800cf8a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	4b45      	ldr	r3, [pc, #276]	; (800d0a4 <_tx_thread_sleep+0x1dc>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf96:	4b42      	ldr	r3, [pc, #264]	; (800d0a0 <_tx_thread_sleep+0x1d8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10b      	bne.n	800cfba <_tx_thread_sleep+0xf2>
 800cfa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfac:	041a      	lsls	r2, r3, #16
 800cfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfb8:	e00e      	b.n	800cfd8 <_tx_thread_sleep+0x110>
 800cfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cfc0:	d205      	bcs.n	800cfce <_tx_thread_sleep+0x106>
 800cfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfca:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfcc:	e004      	b.n	800cfd8 <_tx_thread_sleep+0x110>
 800cfce:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cfd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfe2:	605a      	str	r2, [r3, #4]
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe6:	2270      	movs	r2, #112	; 0x70
 800cfe8:	609a      	str	r2, [r3, #8]
 800cfea:	4b33      	ldr	r3, [pc, #204]	; (800d0b8 <_tx_thread_sleep+0x1f0>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	60da      	str	r2, [r3, #12]
 800cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	611a      	str	r2, [r3, #16]
 800cff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffe:	615a      	str	r2, [r3, #20]
 800d000:	f107 020c 	add.w	r2, r7, #12
 800d004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d006:	619a      	str	r2, [r3, #24]
 800d008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00a:	2200      	movs	r2, #0
 800d00c:	61da      	str	r2, [r3, #28]
 800d00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d010:	3320      	adds	r3, #32
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d014:	4b29      	ldr	r3, [pc, #164]	; (800d0bc <_tx_thread_sleep+0x1f4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d314      	bcc.n	800d048 <_tx_thread_sleep+0x180>
 800d01e:	4b28      	ldr	r3, [pc, #160]	; (800d0c0 <_tx_thread_sleep+0x1f8>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d024:	4a22      	ldr	r2, [pc, #136]	; (800d0b0 <_tx_thread_sleep+0x1e8>)
 800d026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	4b26      	ldr	r3, [pc, #152]	; (800d0c4 <_tx_thread_sleep+0x1fc>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d030:	621a      	str	r2, [r3, #32]
 800d032:	4b25      	ldr	r3, [pc, #148]	; (800d0c8 <_tx_thread_sleep+0x200>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00d      	beq.n	800d056 <_tx_thread_sleep+0x18e>
 800d03a:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <_tx_thread_sleep+0x200>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a21      	ldr	r2, [pc, #132]	; (800d0c4 <_tx_thread_sleep+0x1fc>)
 800d040:	6812      	ldr	r2, [r2, #0]
 800d042:	4610      	mov	r0, r2
 800d044:	4798      	blx	r3
 800d046:	e006      	b.n	800d056 <_tx_thread_sleep+0x18e>
 800d048:	4a19      	ldr	r2, [pc, #100]	; (800d0b0 <_tx_thread_sleep+0x1e8>)
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	4b1d      	ldr	r3, [pc, #116]	; (800d0c4 <_tx_thread_sleep+0x1fc>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d054:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d058:	2204      	movs	r2, #4
 800d05a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05e:	2201      	movs	r2, #1
 800d060:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d064:	2200      	movs	r2, #0
 800d066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d070:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <_tx_thread_sleep+0x1e4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	4a0d      	ldr	r2, [pc, #52]	; (800d0ac <_tx_thread_sleep+0x1e4>)
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d07c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f383 8810 	msr	PRIMASK, r3
}
 800d084:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d086:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d088:	f000 fa14 	bl	800d4b4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d092:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d094:	68fb      	ldr	r3, [r7, #12]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3750      	adds	r7, #80	; 0x50
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20001684 	.word	0x20001684
 800d0a4:	2000000c 	.word	0x2000000c
 800d0a8:	200017cc 	.word	0x200017cc
 800d0ac:	2000171c 	.word	0x2000171c
 800d0b0:	20001ca0 	.word	0x20001ca0
 800d0b4:	20001ca4 	.word	0x20001ca4
 800d0b8:	e0001004 	.word	0xe0001004
 800d0bc:	20001c9c 	.word	0x20001c9c
 800d0c0:	20001c98 	.word	0x20001c98
 800d0c4:	20001c8c 	.word	0x20001c8c
 800d0c8:	20001ca8 	.word	0x20001ca8

0800d0cc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b089      	sub	sp, #36	; 0x24
 800d0d0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d0d2:	4b17      	ldr	r3, [pc, #92]	; (800d130 <_tx_thread_system_preempt_check+0x64>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d121      	bne.n	800d122 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d0de:	4b15      	ldr	r3, [pc, #84]	; (800d134 <_tx_thread_system_preempt_check+0x68>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d0e4:	4b14      	ldr	r3, [pc, #80]	; (800d138 <_tx_thread_system_preempt_check+0x6c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d017      	beq.n	800d122 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <_tx_thread_system_preempt_check+0x70>)
 800d0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0fa:	f3ef 8305 	mrs	r3, IPSR
 800d0fe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d100:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10c      	bne.n	800d120 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d106:	f3ef 8310 	mrs	r3, PRIMASK
 800d10a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d10c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d10e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d110:	b662      	cpsie	i
}
 800d112:	bf00      	nop
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f383 8810 	msr	PRIMASK, r3
}
 800d11e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d120:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d122:	bf00      	nop
 800d124:	3724      	adds	r7, #36	; 0x24
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	2000171c 	.word	0x2000171c
 800d134:	20001684 	.word	0x20001684
 800d138:	20001688 	.word	0x20001688
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b09e      	sub	sp, #120	; 0x78
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d148:	2300      	movs	r3, #0
 800d14a:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d14c:	f3ef 8310 	mrs	r3, PRIMASK
 800d150:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d156:	b672      	cpsid	i
    return(int_posture);
 800d158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d15a:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	334c      	adds	r3, #76	; 0x4c
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 fdaf 	bl	800dccc <_tx_timer_system_deactivate>
 800d16e:	e002      	b.n	800d176 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d176:	4b8b      	ldr	r3, [pc, #556]	; (800d3a4 <_tx_thread_system_resume+0x264>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d17c:	4b89      	ldr	r3, [pc, #548]	; (800d3a4 <_tx_thread_system_resume+0x264>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	663b      	str	r3, [r7, #96]	; 0x60
 800d182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d184:	2b00      	cmp	r3, #0
 800d186:	d06f      	beq.n	800d268 <_tx_thread_system_resume+0x128>
 800d188:	4b87      	ldr	r3, [pc, #540]	; (800d3a8 <_tx_thread_system_resume+0x268>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	2b00      	cmp	r3, #0
 800d192:	d069      	beq.n	800d268 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d194:	f3ef 8305 	mrs	r3, IPSR
 800d198:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d19a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d19c:	4b83      	ldr	r3, [pc, #524]	; (800d3ac <_tx_thread_system_resume+0x26c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1a4:	4b82      	ldr	r3, [pc, #520]	; (800d3b0 <_tx_thread_system_resume+0x270>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10b      	bne.n	800d1c8 <_tx_thread_system_resume+0x88>
 800d1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	041a      	lsls	r2, r3, #16
 800d1bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1c4:	673b      	str	r3, [r7, #112]	; 0x70
 800d1c6:	e00e      	b.n	800d1e6 <_tx_thread_system_resume+0xa6>
 800d1c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d1ce:	d205      	bcs.n	800d1dc <_tx_thread_system_resume+0x9c>
 800d1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1d2:	673b      	str	r3, [r7, #112]	; 0x70
 800d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1da:	e004      	b.n	800d1e6 <_tx_thread_system_resume+0xa6>
 800d1dc:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d1e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	673b      	str	r3, [r7, #112]	; 0x70
 800d1e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d1f0:	605a      	str	r2, [r3, #4]
 800d1f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	609a      	str	r2, [r3, #8]
 800d1f8:	4b6e      	ldr	r3, [pc, #440]	; (800d3b4 <_tx_thread_system_resume+0x274>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1fe:	60da      	str	r2, [r3, #12]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d204:	611a      	str	r2, [r3, #16]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d20a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d20c:	615a      	str	r2, [r3, #20]
 800d20e:	f107 020c 	add.w	r2, r7, #12
 800d212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d214:	619a      	str	r2, [r3, #24]
 800d216:	4b68      	ldr	r3, [pc, #416]	; (800d3b8 <_tx_thread_system_resume+0x278>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d21e:	61da      	str	r2, [r3, #28]
 800d220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d222:	3320      	adds	r3, #32
 800d224:	663b      	str	r3, [r7, #96]	; 0x60
 800d226:	4b65      	ldr	r3, [pc, #404]	; (800d3bc <_tx_thread_system_resume+0x27c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d314      	bcc.n	800d25a <_tx_thread_system_resume+0x11a>
 800d230:	4b63      	ldr	r3, [pc, #396]	; (800d3c0 <_tx_thread_system_resume+0x280>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	663b      	str	r3, [r7, #96]	; 0x60
 800d236:	4a5b      	ldr	r2, [pc, #364]	; (800d3a4 <_tx_thread_system_resume+0x264>)
 800d238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	4b61      	ldr	r3, [pc, #388]	; (800d3c4 <_tx_thread_system_resume+0x284>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d242:	621a      	str	r2, [r3, #32]
 800d244:	4b60      	ldr	r3, [pc, #384]	; (800d3c8 <_tx_thread_system_resume+0x288>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00d      	beq.n	800d268 <_tx_thread_system_resume+0x128>
 800d24c:	4b5e      	ldr	r3, [pc, #376]	; (800d3c8 <_tx_thread_system_resume+0x288>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a5c      	ldr	r2, [pc, #368]	; (800d3c4 <_tx_thread_system_resume+0x284>)
 800d252:	6812      	ldr	r2, [r2, #0]
 800d254:	4610      	mov	r0, r2
 800d256:	4798      	blx	r3
 800d258:	e006      	b.n	800d268 <_tx_thread_system_resume+0x128>
 800d25a:	4a52      	ldr	r2, [pc, #328]	; (800d3a4 <_tx_thread_system_resume+0x264>)
 800d25c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	4b58      	ldr	r3, [pc, #352]	; (800d3c4 <_tx_thread_system_resume+0x284>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d266:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d26e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d274:	4b55      	ldr	r3, [pc, #340]	; (800d3cc <_tx_thread_system_resume+0x28c>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3b01      	subs	r3, #1
 800d27a:	4a54      	ldr	r2, [pc, #336]	; (800d3cc <_tx_thread_system_resume+0x28c>)
 800d27c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	2b00      	cmp	r3, #0
 800d284:	f040 80b3 	bne.w	800d3ee <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 80c7 	beq.w	800d420 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d296:	2b00      	cmp	r3, #0
 800d298:	f040 80a2 	bne.w	800d3e0 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d2a8:	4a49      	ldr	r2, [pc, #292]	; (800d3d0 <_tx_thread_system_resume+0x290>)
 800d2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b0:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d2b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d164      	bne.n	800d382 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d2b8:	4945      	ldr	r1, [pc, #276]	; (800d3d0 <_tx_thread_system_resume+0x290>)
 800d2ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d2d8:	4b3e      	ldr	r3, [pc, #248]	; (800d3d4 <_tx_thread_system_resume+0x294>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	4a3c      	ldr	r2, [pc, #240]	; (800d3d4 <_tx_thread_system_resume+0x294>)
 800d2e2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d2e4:	4b3c      	ldr	r3, [pc, #240]	; (800d3d8 <_tx_thread_system_resume+0x298>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	f080 8098 	bcs.w	800d420 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d2f0:	4a39      	ldr	r2, [pc, #228]	; (800d3d8 <_tx_thread_system_resume+0x298>)
 800d2f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2f4:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d2f6:	4b30      	ldr	r3, [pc, #192]	; (800d3b8 <_tx_thread_system_resume+0x278>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d103      	bne.n	800d30a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d302:	4a2d      	ldr	r2, [pc, #180]	; (800d3b8 <_tx_thread_system_resume+0x278>)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	e08a      	b.n	800d420 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d310:	429a      	cmp	r2, r3
 800d312:	f080 8085 	bcs.w	800d420 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d316:	4a28      	ldr	r2, [pc, #160]	; (800d3b8 <_tx_thread_system_resume+0x278>)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d009      	beq.n	800d336 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d328:	429a      	cmp	r2, r3
 800d32a:	d104      	bne.n	800d336 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d32c:	4b22      	ldr	r3, [pc, #136]	; (800d3b8 <_tx_thread_system_resume+0x278>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d334:	61da      	str	r2, [r3, #28]
 800d336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d338:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33c:	f383 8810 	msr	PRIMASK, r3
}
 800d340:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d342:	4b22      	ldr	r3, [pc, #136]	; (800d3cc <_tx_thread_system_resume+0x28c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 80a1 	bne.w	800d492 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d350:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <_tx_thread_system_resume+0x29c>)
 800d352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d356:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d358:	f3ef 8305 	mrs	r3, IPSR
 800d35c:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 8098 	bne.w	800d496 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d366:	f3ef 8310 	mrs	r3, PRIMASK
 800d36a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d36e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d370:	b662      	cpsie	i
}
 800d372:	bf00      	nop
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	f383 8810 	msr	PRIMASK, r3
}
 800d37e:	bf00      	nop
}
 800d380:	e089      	b.n	800d496 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d386:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d398:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d39e:	621a      	str	r2, [r3, #32]
 800d3a0:	e03e      	b.n	800d420 <_tx_thread_system_resume+0x2e0>
 800d3a2:	bf00      	nop
 800d3a4:	20001ca0 	.word	0x20001ca0
 800d3a8:	20001ca4 	.word	0x20001ca4
 800d3ac:	2000000c 	.word	0x2000000c
 800d3b0:	20001684 	.word	0x20001684
 800d3b4:	e0001004 	.word	0xe0001004
 800d3b8:	20001688 	.word	0x20001688
 800d3bc:	20001c9c 	.word	0x20001c9c
 800d3c0:	20001c98 	.word	0x20001c98
 800d3c4:	20001c8c 	.word	0x20001c8c
 800d3c8:	20001ca8 	.word	0x20001ca8
 800d3cc:	2000171c 	.word	0x2000171c
 800d3d0:	2000169c 	.word	0x2000169c
 800d3d4:	20001694 	.word	0x20001694
 800d3d8:	20001698 	.word	0x20001698
 800d3dc:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2203      	movs	r2, #3
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30
 800d3ec:	e018      	b.n	800d420 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d014      	beq.n	800d420 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d010      	beq.n	800d420 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	631a      	str	r2, [r3, #48]	; 0x30
 800d412:	e005      	b.n	800d420 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2203      	movs	r2, #3
 800d41e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d104      	bne.n	800d43a <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d430:	4b1c      	ldr	r3, [pc, #112]	; (800d4a4 <_tx_thread_system_resume+0x364>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d438:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d43a:	4b1b      	ldr	r3, [pc, #108]	; (800d4a8 <_tx_thread_system_resume+0x368>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	647b      	str	r3, [r7, #68]	; 0x44
 800d440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d442:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	f383 8810 	msr	PRIMASK, r3
}
 800d44a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d44c:	4b15      	ldr	r3, [pc, #84]	; (800d4a4 <_tx_thread_system_resume+0x364>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d452:	429a      	cmp	r2, r3
 800d454:	d022      	beq.n	800d49c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d456:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <_tx_thread_system_resume+0x36c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d11c      	bne.n	800d49c <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d462:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <_tx_thread_system_resume+0x370>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d46a:	f3ef 8305 	mrs	r3, IPSR
 800d46e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d470:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d472:	2b00      	cmp	r3, #0
 800d474:	d111      	bne.n	800d49a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d476:	f3ef 8310 	mrs	r3, PRIMASK
 800d47a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d47c:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d47e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d480:	b662      	cpsie	i
}
 800d482:	bf00      	nop
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f383 8810 	msr	PRIMASK, r3
}
 800d48e:	bf00      	nop
}
 800d490:	e003      	b.n	800d49a <_tx_thread_system_resume+0x35a>
                                return;
 800d492:	bf00      	nop
 800d494:	e002      	b.n	800d49c <_tx_thread_system_resume+0x35c>
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <_tx_thread_system_resume+0x35c>
 800d49a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d49c:	3778      	adds	r7, #120	; 0x78
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20001688 	.word	0x20001688
 800d4a8:	20001684 	.word	0x20001684
 800d4ac:	2000171c 	.word	0x2000171c
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b0a4      	sub	sp, #144	; 0x90
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d4c2:	4b98      	ldr	r3, [pc, #608]	; (800d724 <_tx_thread_system_suspend+0x270>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ce:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4d4:	b672      	cpsid	i
    return(int_posture);
 800d4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d4d8:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d112      	bne.n	800d50a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e8:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d4ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d008      	beq.n	800d502 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f6:	d004      	beq.n	800d502 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	334c      	adds	r3, #76	; 0x4c
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 fb83 	bl	800dc08 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	4a88      	ldr	r2, [pc, #544]	; (800d728 <_tx_thread_system_suspend+0x274>)
 800d508:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d50a:	4b88      	ldr	r3, [pc, #544]	; (800d72c <_tx_thread_system_suspend+0x278>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3b01      	subs	r3, #1
 800d510:	4a86      	ldr	r2, [pc, #536]	; (800d72c <_tx_thread_system_suspend+0x278>)
 800d512:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	2b01      	cmp	r3, #1
 800d51a:	f040 817d 	bne.w	800d818 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d51e:	4b84      	ldr	r3, [pc, #528]	; (800d730 <_tx_thread_system_suspend+0x27c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d524:	4b82      	ldr	r3, [pc, #520]	; (800d730 <_tx_thread_system_suspend+0x27c>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	673b      	str	r3, [r7, #112]	; 0x70
 800d52a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d07c      	beq.n	800d62a <_tx_thread_system_suspend+0x176>
 800d530:	4b80      	ldr	r3, [pc, #512]	; (800d734 <_tx_thread_system_suspend+0x280>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d076      	beq.n	800d62a <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d53c:	f3ef 8305 	mrs	r3, IPSR
 800d540:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d544:	4b7c      	ldr	r3, [pc, #496]	; (800d738 <_tx_thread_system_suspend+0x284>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4313      	orrs	r3, r2
 800d54a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d54c:	4b75      	ldr	r3, [pc, #468]	; (800d724 <_tx_thread_system_suspend+0x270>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d110      	bne.n	800d57c <_tx_thread_system_suspend+0xc8>
 800d55a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	041a      	lsls	r2, r3, #16
 800d56c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d570:	4313      	orrs	r3, r2
 800d572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d57a:	e013      	b.n	800d5a4 <_tx_thread_system_suspend+0xf0>
 800d57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d57e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d582:	d208      	bcs.n	800d596 <_tx_thread_system_suspend+0xe2>
 800d584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d58c:	f04f 33ff 	mov.w	r3, #4294967295
 800d590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d594:	e006      	b.n	800d5a4 <_tx_thread_system_suspend+0xf0>
 800d596:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d59a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d5a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d5a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5b2:	605a      	str	r2, [r3, #4]
 800d5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5b6:	2202      	movs	r2, #2
 800d5b8:	609a      	str	r2, [r3, #8]
 800d5ba:	4b60      	ldr	r3, [pc, #384]	; (800d73c <_tx_thread_system_suspend+0x288>)
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5c0:	60da      	str	r2, [r3, #12]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5c6:	611a      	str	r2, [r3, #16]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5ce:	615a      	str	r2, [r3, #20]
 800d5d0:	f107 0208 	add.w	r2, r7, #8
 800d5d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5d6:	619a      	str	r2, [r3, #24]
 800d5d8:	4b59      	ldr	r3, [pc, #356]	; (800d740 <_tx_thread_system_suspend+0x28c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5e0:	61da      	str	r2, [r3, #28]
 800d5e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5e4:	3320      	adds	r3, #32
 800d5e6:	673b      	str	r3, [r7, #112]	; 0x70
 800d5e8:	4b56      	ldr	r3, [pc, #344]	; (800d744 <_tx_thread_system_suspend+0x290>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d314      	bcc.n	800d61c <_tx_thread_system_suspend+0x168>
 800d5f2:	4b55      	ldr	r3, [pc, #340]	; (800d748 <_tx_thread_system_suspend+0x294>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	673b      	str	r3, [r7, #112]	; 0x70
 800d5f8:	4a4d      	ldr	r2, [pc, #308]	; (800d730 <_tx_thread_system_suspend+0x27c>)
 800d5fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	4b53      	ldr	r3, [pc, #332]	; (800d74c <_tx_thread_system_suspend+0x298>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d604:	621a      	str	r2, [r3, #32]
 800d606:	4b52      	ldr	r3, [pc, #328]	; (800d750 <_tx_thread_system_suspend+0x29c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00d      	beq.n	800d62a <_tx_thread_system_suspend+0x176>
 800d60e:	4b50      	ldr	r3, [pc, #320]	; (800d750 <_tx_thread_system_suspend+0x29c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a4e      	ldr	r2, [pc, #312]	; (800d74c <_tx_thread_system_suspend+0x298>)
 800d614:	6812      	ldr	r2, [r2, #0]
 800d616:	4610      	mov	r0, r2
 800d618:	4798      	blx	r3
 800d61a:	e006      	b.n	800d62a <_tx_thread_system_suspend+0x176>
 800d61c:	4a44      	ldr	r2, [pc, #272]	; (800d730 <_tx_thread_system_suspend+0x27c>)
 800d61e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d620:	6013      	str	r3, [r2, #0]
 800d622:	4b4a      	ldr	r3, [pc, #296]	; (800d74c <_tx_thread_system_suspend+0x298>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d628:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d003      	beq.n	800d638 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d642:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d64a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d016      	beq.n	800d680 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d656:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d65a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d65c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d65e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d662:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	4a3b      	ldr	r2, [pc, #236]	; (800d754 <_tx_thread_system_suspend+0x2a0>)
 800d668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	429a      	cmp	r2, r3
 800d670:	f040 8085 	bne.w	800d77e <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	4937      	ldr	r1, [pc, #220]	; (800d754 <_tx_thread_system_suspend+0x2a0>)
 800d678:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d67e:	e07e      	b.n	800d77e <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4a34      	ldr	r2, [pc, #208]	; (800d754 <_tx_thread_system_suspend+0x2a0>)
 800d684:	2100      	movs	r1, #0
 800d686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2201      	movs	r2, #1
 800d68e:	fa02 f303 	lsl.w	r3, r2, r3
 800d692:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d694:	4b30      	ldr	r3, [pc, #192]	; (800d758 <_tx_thread_system_suspend+0x2a4>)
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d69a:	43db      	mvns	r3, r3
 800d69c:	4013      	ands	r3, r2
 800d69e:	4a2e      	ldr	r2, [pc, #184]	; (800d758 <_tx_thread_system_suspend+0x2a4>)
 800d6a0:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d6a6:	4b2c      	ldr	r3, [pc, #176]	; (800d758 <_tx_thread_system_suspend+0x2a4>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d6ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d158      	bne.n	800d764 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d6b2:	4b2a      	ldr	r3, [pc, #168]	; (800d75c <_tx_thread_system_suspend+0x2a8>)
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d6b8:	4b21      	ldr	r3, [pc, #132]	; (800d740 <_tx_thread_system_suspend+0x28c>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d6be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d008      	beq.n	800d6d6 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d102      	bne.n	800d6d6 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d6d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	61da      	str	r2, [r3, #28]
 800d6d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6d8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6dc:	f383 8810 	msr	PRIMASK, r3
}
 800d6e0:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d6e2:	4b12      	ldr	r3, [pc, #72]	; (800d72c <_tx_thread_system_suspend+0x278>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d6e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f040 80bf 	bne.w	800d86e <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d6f0:	4b1b      	ldr	r3, [pc, #108]	; (800d760 <_tx_thread_system_suspend+0x2ac>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6f8:	f3ef 8305 	mrs	r3, IPSR
 800d6fc:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10c      	bne.n	800d71e <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d704:	f3ef 8310 	mrs	r3, PRIMASK
 800d708:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d70c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d70e:	b662      	cpsie	i
}
 800d710:	bf00      	nop
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d718:	f383 8810 	msr	PRIMASK, r3
}
 800d71c:	bf00      	nop
}
 800d71e:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d720:	e0a5      	b.n	800d86e <_tx_thread_system_suspend+0x3ba>
 800d722:	bf00      	nop
 800d724:	20001684 	.word	0x20001684
 800d728:	20001c88 	.word	0x20001c88
 800d72c:	2000171c 	.word	0x2000171c
 800d730:	20001ca0 	.word	0x20001ca0
 800d734:	20001ca4 	.word	0x20001ca4
 800d738:	2000000c 	.word	0x2000000c
 800d73c:	e0001004 	.word	0xe0001004
 800d740:	20001688 	.word	0x20001688
 800d744:	20001c9c 	.word	0x20001c9c
 800d748:	20001c98 	.word	0x20001c98
 800d74c:	20001c8c 	.word	0x20001c8c
 800d750:	20001ca8 	.word	0x20001ca8
 800d754:	2000169c 	.word	0x2000169c
 800d758:	20001694 	.word	0x20001694
 800d75c:	20001698 	.word	0x20001698
 800d760:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d766:	fa93 f3a3 	rbit	r3, r3
 800d76a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d76c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d76e:	fab3 f383 	clz	r3, r3
 800d772:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d778:	4413      	add	r3, r2
 800d77a:	4a41      	ldr	r2, [pc, #260]	; (800d880 <_tx_thread_system_suspend+0x3cc>)
 800d77c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d77e:	4b41      	ldr	r3, [pc, #260]	; (800d884 <_tx_thread_system_suspend+0x3d0>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d139      	bne.n	800d7fc <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d788:	4b3d      	ldr	r3, [pc, #244]	; (800d880 <_tx_thread_system_suspend+0x3cc>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a3e      	ldr	r2, [pc, #248]	; (800d888 <_tx_thread_system_suspend+0x3d4>)
 800d78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d792:	4a3c      	ldr	r2, [pc, #240]	; (800d884 <_tx_thread_system_suspend+0x3d0>)
 800d794:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00a      	beq.n	800d7b2 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d104      	bne.n	800d7b2 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d7a8:	4b36      	ldr	r3, [pc, #216]	; (800d884 <_tx_thread_system_suspend+0x3d0>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7b0:	61da      	str	r2, [r3, #28]
 800d7b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7b4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	f383 8810 	msr	PRIMASK, r3
}
 800d7bc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7be:	4b33      	ldr	r3, [pc, #204]	; (800d88c <_tx_thread_system_suspend+0x3d8>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d7c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d153      	bne.n	800d872 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d7ca:	4b31      	ldr	r3, [pc, #196]	; (800d890 <_tx_thread_system_suspend+0x3dc>)
 800d7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7d2:	f3ef 8305 	mrs	r3, IPSR
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10c      	bne.n	800d7f8 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7de:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7e8:	b662      	cpsie	i
}
 800d7ea:	bf00      	nop
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	f383 8810 	msr	PRIMASK, r3
}
 800d7f6:	bf00      	nop
}
 800d7f8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d7fa:	e03a      	b.n	800d872 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00a      	beq.n	800d818 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d104      	bne.n	800d818 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d80e:	4b1d      	ldr	r3, [pc, #116]	; (800d884 <_tx_thread_system_suspend+0x3d0>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d816:	61da      	str	r2, [r3, #28]
 800d818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d81a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f383 8810 	msr	PRIMASK, r3
}
 800d822:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d824:	4b17      	ldr	r3, [pc, #92]	; (800d884 <_tx_thread_system_suspend+0x3d0>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d022      	beq.n	800d876 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d830:	4b16      	ldr	r3, [pc, #88]	; (800d88c <_tx_thread_system_suspend+0x3d8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d11c      	bne.n	800d876 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d83c:	4b14      	ldr	r3, [pc, #80]	; (800d890 <_tx_thread_system_suspend+0x3dc>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d844:	f3ef 8305 	mrs	r3, IPSR
 800d848:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d84a:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10c      	bne.n	800d86a <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d850:	f3ef 8310 	mrs	r3, PRIMASK
 800d854:	617b      	str	r3, [r7, #20]
    return(posture);
 800d856:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d858:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d85a:	b662      	cpsie	i
}
 800d85c:	bf00      	nop
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f383 8810 	msr	PRIMASK, r3
}
 800d868:	bf00      	nop
}
 800d86a:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d86c:	e003      	b.n	800d876 <_tx_thread_system_suspend+0x3c2>
                return;
 800d86e:	bf00      	nop
 800d870:	e002      	b.n	800d878 <_tx_thread_system_suspend+0x3c4>
            return;
 800d872:	bf00      	nop
 800d874:	e000      	b.n	800d878 <_tx_thread_system_suspend+0x3c4>
    return;
 800d876:	bf00      	nop
}
 800d878:	3790      	adds	r7, #144	; 0x90
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20001698 	.word	0x20001698
 800d884:	20001688 	.word	0x20001688
 800d888:	2000169c 	.word	0x2000169c
 800d88c:	2000171c 	.word	0x2000171c
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08e      	sub	sp, #56	; 0x38
 800d898:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d89a:	4b5f      	ldr	r3, [pc, #380]	; (800da18 <_tx_thread_time_slice+0x184>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d8a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d8a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d8a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8aa:	b672      	cpsid	i
    return(int_posture);
 800d8ac:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d8ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d8b0:	4b5a      	ldr	r3, [pc, #360]	; (800da1c <_tx_thread_time_slice+0x188>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d024      	beq.n	800d906 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d120      	bne.n	800d906 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	69d2      	ldr	r2, [r2, #28]
 800d8ca:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	4a53      	ldr	r2, [pc, #332]	; (800da20 <_tx_thread_time_slice+0x18c>)
 800d8d2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a1a      	ldr	r2, [r3, #32]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d013      	beq.n	800d906 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d10d      	bne.n	800d906 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f0:	6a12      	ldr	r2, [r2, #32]
 800d8f2:	494c      	ldr	r1, [pc, #304]	; (800da24 <_tx_thread_time_slice+0x190>)
 800d8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d8f8:	4b4b      	ldr	r3, [pc, #300]	; (800da28 <_tx_thread_time_slice+0x194>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a49      	ldr	r2, [pc, #292]	; (800da24 <_tx_thread_time_slice+0x190>)
 800d8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d902:	4a4a      	ldr	r2, [pc, #296]	; (800da2c <_tx_thread_time_slice+0x198>)
 800d904:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d906:	f3ef 8305 	mrs	r3, IPSR
 800d90a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d90c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d90e:	4b48      	ldr	r3, [pc, #288]	; (800da30 <_tx_thread_time_slice+0x19c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4313      	orrs	r3, r2
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d916:	4b47      	ldr	r3, [pc, #284]	; (800da34 <_tx_thread_time_slice+0x1a0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d91c:	4b46      	ldr	r3, [pc, #280]	; (800da38 <_tx_thread_time_slice+0x1a4>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	623b      	str	r3, [r7, #32]
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d06d      	beq.n	800da04 <_tx_thread_time_slice+0x170>
 800d928:	4b44      	ldr	r3, [pc, #272]	; (800da3c <_tx_thread_time_slice+0x1a8>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f003 0301 	and.w	r3, r3, #1
 800d930:	2b00      	cmp	r3, #0
 800d932:	d067      	beq.n	800da04 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d934:	f3ef 8305 	mrs	r3, IPSR
 800d938:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	4b3c      	ldr	r3, [pc, #240]	; (800da30 <_tx_thread_time_slice+0x19c>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4313      	orrs	r3, r2
 800d942:	61fb      	str	r3, [r7, #28]
 800d944:	4b34      	ldr	r3, [pc, #208]	; (800da18 <_tx_thread_time_slice+0x184>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	633b      	str	r3, [r7, #48]	; 0x30
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10b      	bne.n	800d968 <_tx_thread_time_slice+0xd4>
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	637b      	str	r3, [r7, #52]	; 0x34
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95a:	041a      	lsls	r2, r3, #16
 800d95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95e:	4313      	orrs	r3, r2
 800d960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d964:	637b      	str	r3, [r7, #52]	; 0x34
 800d966:	e00e      	b.n	800d986 <_tx_thread_time_slice+0xf2>
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d96e:	d205      	bcs.n	800d97c <_tx_thread_time_slice+0xe8>
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	637b      	str	r3, [r7, #52]	; 0x34
 800d974:	f04f 33ff 	mov.w	r3, #4294967295
 800d978:	633b      	str	r3, [r7, #48]	; 0x30
 800d97a:	e004      	b.n	800d986 <_tx_thread_time_slice+0xf2>
 800d97c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d980:	633b      	str	r3, [r7, #48]	; 0x30
 800d982:	2300      	movs	r3, #0
 800d984:	637b      	str	r3, [r7, #52]	; 0x34
 800d986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d990:	605a      	str	r2, [r3, #4]
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	2205      	movs	r2, #5
 800d996:	609a      	str	r2, [r3, #8]
 800d998:	4b29      	ldr	r3, [pc, #164]	; (800da40 <_tx_thread_time_slice+0x1ac>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	60da      	str	r2, [r3, #12]
 800d9a0:	4b22      	ldr	r3, [pc, #136]	; (800da2c <_tx_thread_time_slice+0x198>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	611a      	str	r2, [r3, #16]
 800d9aa:	6a3b      	ldr	r3, [r7, #32]
 800d9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ae:	615a      	str	r2, [r3, #20]
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b4:	619a      	str	r2, [r3, #24]
 800d9b6:	1d3a      	adds	r2, r7, #4
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
 800d9ba:	61da      	str	r2, [r3, #28]
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	3320      	adds	r3, #32
 800d9c0:	623b      	str	r3, [r7, #32]
 800d9c2:	4b20      	ldr	r3, [pc, #128]	; (800da44 <_tx_thread_time_slice+0x1b0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6a3a      	ldr	r2, [r7, #32]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d314      	bcc.n	800d9f6 <_tx_thread_time_slice+0x162>
 800d9cc:	4b1e      	ldr	r3, [pc, #120]	; (800da48 <_tx_thread_time_slice+0x1b4>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	623b      	str	r3, [r7, #32]
 800d9d2:	4a19      	ldr	r2, [pc, #100]	; (800da38 <_tx_thread_time_slice+0x1a4>)
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	4b1c      	ldr	r3, [pc, #112]	; (800da4c <_tx_thread_time_slice+0x1b8>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6a3a      	ldr	r2, [r7, #32]
 800d9de:	621a      	str	r2, [r3, #32]
 800d9e0:	4b1b      	ldr	r3, [pc, #108]	; (800da50 <_tx_thread_time_slice+0x1bc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00d      	beq.n	800da04 <_tx_thread_time_slice+0x170>
 800d9e8:	4b19      	ldr	r3, [pc, #100]	; (800da50 <_tx_thread_time_slice+0x1bc>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a17      	ldr	r2, [pc, #92]	; (800da4c <_tx_thread_time_slice+0x1b8>)
 800d9ee:	6812      	ldr	r2, [r2, #0]
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	e006      	b.n	800da04 <_tx_thread_time_slice+0x170>
 800d9f6:	4a10      	ldr	r2, [pc, #64]	; (800da38 <_tx_thread_time_slice+0x1a4>)
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	4b13      	ldr	r3, [pc, #76]	; (800da4c <_tx_thread_time_slice+0x1b8>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6a3a      	ldr	r2, [r7, #32]
 800da02:	621a      	str	r2, [r3, #32]
 800da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	f383 8810 	msr	PRIMASK, r3
}
 800da0e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800da10:	bf00      	nop
 800da12:	3738      	adds	r7, #56	; 0x38
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20001684 	.word	0x20001684
 800da1c:	2000172c 	.word	0x2000172c
 800da20:	20001c88 	.word	0x20001c88
 800da24:	2000169c 	.word	0x2000169c
 800da28:	20001698 	.word	0x20001698
 800da2c:	20001688 	.word	0x20001688
 800da30:	2000000c 	.word	0x2000000c
 800da34:	2000171c 	.word	0x2000171c
 800da38:	20001ca0 	.word	0x20001ca0
 800da3c:	20001ca4 	.word	0x20001ca4
 800da40:	e0001004 	.word	0xe0001004
 800da44:	20001c9c 	.word	0x20001c9c
 800da48:	20001c98 	.word	0x20001c98
 800da4c:	20001c8c 	.word	0x20001c8c
 800da50:	20001ca8 	.word	0x20001ca8

0800da54 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	; 0x28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da60:	f3ef 8310 	mrs	r3, PRIMASK
 800da64:	617b      	str	r3, [r7, #20]
    return(posture);
 800da66:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800da68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da6a:	b672      	cpsid	i
    return(int_posture);
 800da6c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800da6e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da74:	2b04      	cmp	r3, #4
 800da76:	d10e      	bne.n	800da96 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800da78:	4b13      	ldr	r3, [pc, #76]	; (800dac8 <_tx_thread_timeout+0x74>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	4a12      	ldr	r2, [pc, #72]	; (800dac8 <_tx_thread_timeout+0x74>)
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	6a3b      	ldr	r3, [r7, #32]
 800da84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f383 8810 	msr	PRIMASK, r3
}
 800da8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800da8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da90:	f7ff fb56 	bl	800d140 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800da94:	e013      	b.n	800dabe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f383 8810 	msr	PRIMASK, r3
}
 800daae:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d003      	beq.n	800dabe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	69b9      	ldr	r1, [r7, #24]
 800daba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dabc:	4798      	blx	r3
}
 800dabe:	bf00      	nop
 800dac0:	3728      	adds	r7, #40	; 0x28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	2000171c 	.word	0x2000171c

0800dacc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dad2:	f3ef 8310 	mrs	r3, PRIMASK
 800dad6:	607b      	str	r3, [r7, #4]
    return(posture);
 800dad8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800dada:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dadc:	b672      	cpsid	i
    return(int_posture);
 800dade:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800dae0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800dae2:	4b09      	ldr	r3, [pc, #36]	; (800db08 <_tx_timer_expiration_process+0x3c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3301      	adds	r3, #1
 800dae8:	4a07      	ldr	r2, [pc, #28]	; (800db08 <_tx_timer_expiration_process+0x3c>)
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	f383 8810 	msr	PRIMASK, r3
}
 800daf6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800daf8:	4804      	ldr	r0, [pc, #16]	; (800db0c <_tx_timer_expiration_process+0x40>)
 800dafa:	f7ff fb21 	bl	800d140 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800dafe:	bf00      	nop
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	2000171c 	.word	0x2000171c
 800db0c:	200017cc 	.word	0x200017cc

0800db10 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800db10:	b590      	push	{r4, r7, lr}
 800db12:	b089      	sub	sp, #36	; 0x24
 800db14:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800db16:	4b28      	ldr	r3, [pc, #160]	; (800dbb8 <_tx_timer_initialize+0xa8>)
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800db1c:	4b27      	ldr	r3, [pc, #156]	; (800dbbc <_tx_timer_initialize+0xac>)
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800db22:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <_tx_timer_initialize+0xb0>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800db28:	4b26      	ldr	r3, [pc, #152]	; (800dbc4 <_tx_timer_initialize+0xb4>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800db2e:	4b26      	ldr	r3, [pc, #152]	; (800dbc8 <_tx_timer_initialize+0xb8>)
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800db34:	2280      	movs	r2, #128	; 0x80
 800db36:	2100      	movs	r1, #0
 800db38:	4824      	ldr	r0, [pc, #144]	; (800dbcc <_tx_timer_initialize+0xbc>)
 800db3a:	f007 f961 	bl	8014e00 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800db3e:	4b24      	ldr	r3, [pc, #144]	; (800dbd0 <_tx_timer_initialize+0xc0>)
 800db40:	4a22      	ldr	r2, [pc, #136]	; (800dbcc <_tx_timer_initialize+0xbc>)
 800db42:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800db44:	4b23      	ldr	r3, [pc, #140]	; (800dbd4 <_tx_timer_initialize+0xc4>)
 800db46:	4a21      	ldr	r2, [pc, #132]	; (800dbcc <_tx_timer_initialize+0xbc>)
 800db48:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800db4a:	4b23      	ldr	r3, [pc, #140]	; (800dbd8 <_tx_timer_initialize+0xc8>)
 800db4c:	4a23      	ldr	r2, [pc, #140]	; (800dbdc <_tx_timer_initialize+0xcc>)
 800db4e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800db50:	4b21      	ldr	r3, [pc, #132]	; (800dbd8 <_tx_timer_initialize+0xc8>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3304      	adds	r3, #4
 800db56:	4a20      	ldr	r2, [pc, #128]	; (800dbd8 <_tx_timer_initialize+0xc8>)
 800db58:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800db5a:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <_tx_timer_initialize+0xd0>)
 800db5c:	4a21      	ldr	r2, [pc, #132]	; (800dbe4 <_tx_timer_initialize+0xd4>)
 800db5e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800db60:	4b21      	ldr	r3, [pc, #132]	; (800dbe8 <_tx_timer_initialize+0xd8>)
 800db62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db66:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800db68:	4b20      	ldr	r3, [pc, #128]	; (800dbec <_tx_timer_initialize+0xdc>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800db6e:	4b1c      	ldr	r3, [pc, #112]	; (800dbe0 <_tx_timer_initialize+0xd0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a1d      	ldr	r2, [pc, #116]	; (800dbe8 <_tx_timer_initialize+0xd8>)
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	491d      	ldr	r1, [pc, #116]	; (800dbec <_tx_timer_initialize+0xdc>)
 800db78:	6809      	ldr	r1, [r1, #0]
 800db7a:	481c      	ldr	r0, [pc, #112]	; (800dbec <_tx_timer_initialize+0xdc>)
 800db7c:	6800      	ldr	r0, [r0, #0]
 800db7e:	2400      	movs	r4, #0
 800db80:	9405      	str	r4, [sp, #20]
 800db82:	2400      	movs	r4, #0
 800db84:	9404      	str	r4, [sp, #16]
 800db86:	9003      	str	r0, [sp, #12]
 800db88:	9102      	str	r1, [sp, #8]
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4b18      	ldr	r3, [pc, #96]	; (800dbf0 <_tx_timer_initialize+0xe0>)
 800db90:	4a18      	ldr	r2, [pc, #96]	; (800dbf4 <_tx_timer_initialize+0xe4>)
 800db92:	4919      	ldr	r1, [pc, #100]	; (800dbf8 <_tx_timer_initialize+0xe8>)
 800db94:	4819      	ldr	r0, [pc, #100]	; (800dbfc <_tx_timer_initialize+0xec>)
 800db96:	f7fe ff8b 	bl	800cab0 <_tx_thread_create>
 800db9a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1e5      	bne.n	800db6e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800dba2:	4b17      	ldr	r3, [pc, #92]	; (800dc00 <_tx_timer_initialize+0xf0>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800dba8:	4b16      	ldr	r3, [pc, #88]	; (800dc04 <_tx_timer_initialize+0xf4>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800dbae:	bf00      	nop
 800dbb0:	370c      	adds	r7, #12
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd90      	pop	{r4, r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20001728 	.word	0x20001728
 800dbbc:	20001c88 	.word	0x20001c88
 800dbc0:	2000172c 	.word	0x2000172c
 800dbc4:	200017bc 	.word	0x200017bc
 800dbc8:	200017c8 	.word	0x200017c8
 800dbcc:	20001730 	.word	0x20001730
 800dbd0:	200017b0 	.word	0x200017b0
 800dbd4:	200017b8 	.word	0x200017b8
 800dbd8:	200017b4 	.word	0x200017b4
 800dbdc:	200017ac 	.word	0x200017ac
 800dbe0:	2000187c 	.word	0x2000187c
 800dbe4:	20001888 	.word	0x20001888
 800dbe8:	20001880 	.word	0x20001880
 800dbec:	20001884 	.word	0x20001884
 800dbf0:	4154494d 	.word	0x4154494d
 800dbf4:	0800dd3d 	.word	0x0800dd3d
 800dbf8:	080158f4 	.word	0x080158f4
 800dbfc:	200017cc 	.word	0x200017cc
 800dc00:	200017c0 	.word	0x200017c0
 800dc04:	200017c4 	.word	0x200017c4

0800dc08 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b089      	sub	sp, #36	; 0x24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d04a      	beq.n	800dcb2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d046      	beq.n	800dcb2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d142      	bne.n	800dcb2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b20      	cmp	r3, #32
 800dc30:	d902      	bls.n	800dc38 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dc32:	231f      	movs	r3, #31
 800dc34:	61bb      	str	r3, [r7, #24]
 800dc36:	e002      	b.n	800dc3e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dc3e:	4b20      	ldr	r3, [pc, #128]	; (800dcc0 <_tx_timer_system_activate+0xb8>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dc4a:	4b1e      	ldr	r3, [pc, #120]	; (800dcc4 <_tx_timer_system_activate+0xbc>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d30b      	bcc.n	800dc6c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dc54:	4b1b      	ldr	r3, [pc, #108]	; (800dcc4 <_tx_timer_system_activate+0xbc>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	69fa      	ldr	r2, [r7, #28]
 800dc5a:	1ad3      	subs	r3, r2, r3
 800dc5c:	109b      	asrs	r3, r3, #2
 800dc5e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dc60:	4b19      	ldr	r3, [pc, #100]	; (800dcc8 <_tx_timer_system_activate+0xc0>)
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4413      	add	r3, r2
 800dc6a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d109      	bne.n	800dc88 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	e011      	b.n	800dcac <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dcb2:	bf00      	nop
 800dcb4:	3724      	adds	r7, #36	; 0x24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	200017b8 	.word	0x200017b8
 800dcc4:	200017b4 	.word	0x200017b4
 800dcc8:	200017b0 	.word	0x200017b0

0800dccc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b087      	sub	sp, #28
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d026      	beq.n	800dd2e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d108      	bne.n	800dd00 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d117      	bne.n	800dd28 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	e013      	b.n	800dd28 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	695b      	ldr	r3, [r3, #20]
 800dd04:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	693a      	ldr	r2, [r7, #16]
 800dd10:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d105      	bne.n	800dd28 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	619a      	str	r2, [r3, #24]
    }
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
	...

0800dd3c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b098      	sub	sp, #96	; 0x60
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dd44:	2300      	movs	r3, #0
 800dd46:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a73      	ldr	r2, [pc, #460]	; (800df18 <_tx_timer_thread_entry+0x1dc>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	f040 80de 	bne.w	800df0e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd52:	f3ef 8310 	mrs	r3, PRIMASK
 800dd56:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd5c:	b672      	cpsid	i
    return(int_posture);
 800dd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dd60:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dd62:	4b6e      	ldr	r3, [pc, #440]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d003      	beq.n	800dd78 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f107 020c 	add.w	r2, r7, #12
 800dd76:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dd78:	4b68      	ldr	r3, [pc, #416]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dd80:	4b66      	ldr	r3, [pc, #408]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3304      	adds	r3, #4
 800dd86:	4a65      	ldr	r2, [pc, #404]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd88:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dd8a:	4b64      	ldr	r3, [pc, #400]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	4b64      	ldr	r3, [pc, #400]	; (800df20 <_tx_timer_thread_entry+0x1e4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d103      	bne.n	800dd9e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dd96:	4b63      	ldr	r3, [pc, #396]	; (800df24 <_tx_timer_thread_entry+0x1e8>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a60      	ldr	r2, [pc, #384]	; (800df1c <_tx_timer_thread_entry+0x1e0>)
 800dd9c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dd9e:	4b62      	ldr	r3, [pc, #392]	; (800df28 <_tx_timer_thread_entry+0x1ec>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dda6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	f383 8810 	msr	PRIMASK, r3
}
 800ddae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ddb4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ddb8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddba:	b672      	cpsid	i
    return(int_posture);
 800ddbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ddbe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ddc0:	e07f      	b.n	800dec2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ddd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d102      	bne.n	800ddde <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	e00e      	b.n	800ddfc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ddde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dde8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ddea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddee:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ddf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf2:	f107 020c 	add.w	r2, r7, #12
 800ddf6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ddf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddfa:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ddfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b20      	cmp	r3, #32
 800de02:	d911      	bls.n	800de28 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800de04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800de0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800de14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de16:	f107 0208 	add.w	r2, r7, #8
 800de1a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800de1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de20:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800de22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de24:	60bb      	str	r3, [r7, #8]
 800de26:	e01a      	b.n	800de5e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800de28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800de2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800de34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800de3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d009      	beq.n	800de58 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800de44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de46:	f107 0208 	add.w	r2, r7, #8
 800de4a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800de4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de50:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800de52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de54:	60bb      	str	r3, [r7, #8]
 800de56:	e002      	b.n	800de5e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800de58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de5a:	2200      	movs	r2, #0
 800de5c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800de5e:	4a33      	ldr	r2, [pc, #204]	; (800df2c <_tx_timer_thread_entry+0x1f0>)
 800de60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	f383 8810 	msr	PRIMASK, r3
}
 800de6e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800de70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800de76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de7a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de7c:	f3ef 8310 	mrs	r3, PRIMASK
 800de80:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800de84:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800de86:	b672      	cpsid	i
    return(int_posture);
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de8a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800de8c:	4b27      	ldr	r3, [pc, #156]	; (800df2c <_tx_timer_thread_entry+0x1f0>)
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de96:	429a      	cmp	r2, r3
 800de98:	d105      	bne.n	800dea6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800de9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de9c:	2200      	movs	r2, #0
 800de9e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800dea0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dea2:	f7ff feb1 	bl	800dc08 <_tx_timer_system_activate>
 800dea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dea8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	f383 8810 	msr	PRIMASK, r3
}
 800deb0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800deb2:	f3ef 8310 	mrs	r3, PRIMASK
 800deb6:	623b      	str	r3, [r7, #32]
    return(posture);
 800deb8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800deba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800debc:	b672      	cpsid	i
    return(int_posture);
 800debe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dec0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f47f af7c 	bne.w	800ddc2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800deca:	4b17      	ldr	r3, [pc, #92]	; (800df28 <_tx_timer_thread_entry+0x1ec>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d116      	bne.n	800df00 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800ded2:	4b17      	ldr	r3, [pc, #92]	; (800df30 <_tx_timer_thread_entry+0x1f4>)
 800ded4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ded6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded8:	2203      	movs	r2, #3
 800deda:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dedc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dede:	2201      	movs	r2, #1
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800dee2:	4b14      	ldr	r3, [pc, #80]	; (800df34 <_tx_timer_thread_entry+0x1f8>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3301      	adds	r3, #1
 800dee8:	4a12      	ldr	r2, [pc, #72]	; (800df34 <_tx_timer_thread_entry+0x1f8>)
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f383 8810 	msr	PRIMASK, r3
}
 800def6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800def8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800defa:	f7ff fadb 	bl	800d4b4 <_tx_thread_system_suspend>
 800defe:	e728      	b.n	800dd52 <_tx_timer_thread_entry+0x16>
 800df00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f383 8810 	msr	PRIMASK, r3
}
 800df0a:	bf00      	nop
            TX_DISABLE
 800df0c:	e721      	b.n	800dd52 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800df0e:	bf00      	nop
 800df10:	3760      	adds	r7, #96	; 0x60
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	4154494d 	.word	0x4154494d
 800df1c:	200017b8 	.word	0x200017b8
 800df20:	200017b4 	.word	0x200017b4
 800df24:	200017b0 	.word	0x200017b0
 800df28:	200017bc 	.word	0x200017bc
 800df2c:	200017c8 	.word	0x200017c8
 800df30:	200017cc 	.word	0x200017cc
 800df34:	2000171c 	.word	0x2000171c

0800df38 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800df3c:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <_tx_trace_initialize+0x34>)
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800df42:	4b0b      	ldr	r3, [pc, #44]	; (800df70 <_tx_trace_initialize+0x38>)
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800df48:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <_tx_trace_initialize+0x3c>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800df4e:	4b0a      	ldr	r3, [pc, #40]	; (800df78 <_tx_trace_initialize+0x40>)
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800df54:	4b09      	ldr	r3, [pc, #36]	; (800df7c <_tx_trace_initialize+0x44>)
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <_tx_trace_initialize+0x48>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800df60:	bf00      	nop
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20001c8c 	.word	0x20001c8c
 800df70:	20001c90 	.word	0x20001c90
 800df74:	20001c94 	.word	0x20001c94
 800df78:	20001c98 	.word	0x20001c98
 800df7c:	20001c9c 	.word	0x20001c9c
 800df80:	20001ca0 	.word	0x20001ca0

0800df84 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800df84:	b480      	push	{r7}
 800df86:	b08d      	sub	sp, #52	; 0x34
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	603b      	str	r3, [r7, #0]
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800df94:	4b6f      	ldr	r3, [pc, #444]	; (800e154 <_tx_trace_object_register+0x1d0>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f000 80d5 	beq.w	800e148 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800df9e:	4b6e      	ldr	r3, [pc, #440]	; (800e158 <_tx_trace_object_register+0x1d4>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800dfa4:	4b6d      	ldr	r3, [pc, #436]	; (800e15c <_tx_trace_object_register+0x1d8>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 80cd 	beq.w	800e148 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800dfb6:	4b6a      	ldr	r3, [pc, #424]	; (800e160 <_tx_trace_object_register+0x1dc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dfbc:	4b65      	ldr	r3, [pc, #404]	; (800e154 <_tx_trace_object_register+0x1d0>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800dfc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	011b      	lsls	r3, r3, #4
 800dfcc:	461a      	mov	r2, r3
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d103      	bne.n	800dffa <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff4:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dff6:	2301      	movs	r3, #1
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d02d      	beq.n	800e05c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d11a      	bne.n	800e03e <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800e008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d102      	bne.n	800e016 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	62bb      	str	r3, [r7, #40]	; 0x28
 800e014:	e013      	b.n	800e03e <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e016:	4b4f      	ldr	r3, [pc, #316]	; (800e154 <_tx_trace_object_register+0x1d0>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e01c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e01e:	4613      	mov	r3, r2
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	4413      	add	r3, r2
 800e024:	011b      	lsls	r3, r3, #4
 800e026:	461a      	mov	r2, r3
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	4413      	add	r3, r2
 800e02c:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	785b      	ldrb	r3, [r3, #1]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800e03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e040:	3301      	adds	r3, #1
 800e042:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800e044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e046:	6a3b      	ldr	r3, [r7, #32]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d301      	bcc.n	800e050 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800e04c:	2300      	movs	r3, #0
 800e04e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800e050:	4b43      	ldr	r3, [pc, #268]	; (800e160 <_tx_trace_object_register+0x1dc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e056:	429a      	cmp	r2, r3
 800e058:	d1b0      	bne.n	800dfbc <_tx_trace_object_register+0x38>
 800e05a:	e000      	b.n	800e05e <_tx_trace_object_register+0xda>
                    break;
 800e05c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800e05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	429a      	cmp	r2, r3
 800e064:	d270      	bcs.n	800e148 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800e066:	4b3d      	ldr	r3, [pc, #244]	; (800e15c <_tx_trace_object_register+0x1d8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	4a3b      	ldr	r2, [pc, #236]	; (800e15c <_tx_trace_object_register+0x1d8>)
 800e06e:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	3301      	adds	r3, #1
 800e074:	6a3a      	ldr	r2, [r7, #32]
 800e076:	429a      	cmp	r2, r3
 800e078:	d904      	bls.n	800e084 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800e07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07c:	3301      	adds	r3, #1
 800e07e:	4a38      	ldr	r2, [pc, #224]	; (800e160 <_tx_trace_object_register+0x1dc>)
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	e002      	b.n	800e08a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800e084:	4b36      	ldr	r3, [pc, #216]	; (800e160 <_tx_trace_object_register+0x1dc>)
 800e086:	2200      	movs	r2, #0
 800e088:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e08a:	4b32      	ldr	r3, [pc, #200]	; (800e154 <_tx_trace_object_register+0x1d0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e092:	4613      	mov	r3, r2
 800e094:	005b      	lsls	r3, r3, #1
 800e096:	4413      	add	r3, r2
 800e098:	011b      	lsls	r3, r3, #4
 800e09a:	461a      	mov	r2, r3
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	4413      	add	r3, r2
 800e0a0:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	7bfa      	ldrb	r2, [r7, #15]
 800e0b0:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0c2:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0c8:	e017      	b.n	800e0fa <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e0ce:	69fa      	ldr	r2, [r7, #28]
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	4413      	add	r3, r2
 800e0d4:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d012      	beq.n	800e102 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	7819      	ldrb	r1, [r3, #0]
 800e0e0:	69ba      	ldr	r2, [r7, #24]
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	4413      	add	r3, r2
 800e0e6:	3310      	adds	r3, #16
 800e0e8:	460a      	mov	r2, r1
 800e0ea:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d008      	beq.n	800e106 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fc:	2b1e      	cmp	r3, #30
 800e0fe:	d9e4      	bls.n	800e0ca <_tx_trace_object_register+0x146>
 800e100:	e002      	b.n	800e108 <_tx_trace_object_register+0x184>
                        break;
 800e102:	bf00      	nop
 800e104:	e000      	b.n	800e108 <_tx_trace_object_register+0x184>
                    {
                        break;
 800e106:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	4413      	add	r3, r2
 800e10e:	3310      	adds	r3, #16
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d110      	bne.n	800e13c <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b2db      	uxtb	r3, r3
 800e126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e134:	b2da      	uxtb	r2, r3
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e13a:	e005      	b.n	800e148 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	2200      	movs	r2, #0
 800e140:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	2200      	movs	r2, #0
 800e146:	70da      	strb	r2, [r3, #3]
}
 800e148:	bf00      	nop
 800e14a:	3734      	adds	r7, #52	; 0x34
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	20001c90 	.word	0x20001c90
 800e158:	20001cac 	.word	0x20001cac
 800e15c:	20001cb0 	.word	0x20001cb0
 800e160:	20001cb4 	.word	0x20001cb4

0800e164 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b092      	sub	sp, #72	; 0x48
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e172:	2300      	movs	r3, #0
 800e174:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d102      	bne.n	800e182 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e17c:	2302      	movs	r3, #2
 800e17e:	647b      	str	r3, [r7, #68]	; 0x44
 800e180:	e075      	b.n	800e26e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e184:	2b34      	cmp	r3, #52	; 0x34
 800e186:	d002      	beq.n	800e18e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e188:	2302      	movs	r3, #2
 800e18a:	647b      	str	r3, [r7, #68]	; 0x44
 800e18c:	e06f      	b.n	800e26e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e18e:	f3ef 8310 	mrs	r3, PRIMASK
 800e192:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e196:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e198:	b672      	cpsid	i
    return(int_posture);
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e19c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e19e:	4b3b      	ldr	r3, [pc, #236]	; (800e28c <_txe_byte_pool_create+0x128>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	4a39      	ldr	r2, [pc, #228]	; (800e28c <_txe_byte_pool_create+0x128>)
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ae:	f383 8810 	msr	PRIMASK, r3
}
 800e1b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e1b4:	4b36      	ldr	r3, [pc, #216]	; (800e290 <_txe_byte_pool_create+0x12c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	643b      	str	r3, [r7, #64]	; 0x40
 800e1be:	e009      	b.n	800e1d4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d00b      	beq.n	800e1e0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	643b      	str	r3, [r7, #64]	; 0x40
 800e1d4:	4b2f      	ldr	r3, [pc, #188]	; (800e294 <_txe_byte_pool_create+0x130>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d3f0      	bcc.n	800e1c0 <_txe_byte_pool_create+0x5c>
 800e1de:	e000      	b.n	800e1e2 <_txe_byte_pool_create+0x7e>
                break;
 800e1e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1e2:	f3ef 8310 	mrs	r3, PRIMASK
 800e1e6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e1ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1ec:	b672      	cpsid	i
    return(int_posture);
 800e1ee:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e1f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e1f2:	4b26      	ldr	r3, [pc, #152]	; (800e28c <_txe_byte_pool_create+0x128>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	4a24      	ldr	r2, [pc, #144]	; (800e28c <_txe_byte_pool_create+0x128>)
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	f383 8810 	msr	PRIMASK, r3
}
 800e206:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e208:	f7fe ff60 	bl	800d0cc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e210:	429a      	cmp	r2, r3
 800e212:	d102      	bne.n	800e21a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e214:	2302      	movs	r3, #2
 800e216:	647b      	str	r3, [r7, #68]	; 0x44
 800e218:	e029      	b.n	800e26e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e220:	2303      	movs	r3, #3
 800e222:	647b      	str	r3, [r7, #68]	; 0x44
 800e224:	e023      	b.n	800e26e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b63      	cmp	r3, #99	; 0x63
 800e22a:	d802      	bhi.n	800e232 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e22c:	2305      	movs	r3, #5
 800e22e:	647b      	str	r3, [r7, #68]	; 0x44
 800e230:	e01d      	b.n	800e26e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <_txe_byte_pool_create+0x134>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23a:	4a18      	ldr	r2, [pc, #96]	; (800e29c <_txe_byte_pool_create+0x138>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d101      	bne.n	800e244 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e240:	2313      	movs	r3, #19
 800e242:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e244:	f3ef 8305 	mrs	r3, IPSR
 800e248:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e24a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e24c:	4b14      	ldr	r3, [pc, #80]	; (800e2a0 <_txe_byte_pool_create+0x13c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4313      	orrs	r3, r2
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00b      	beq.n	800e26e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e256:	f3ef 8305 	mrs	r3, IPSR
 800e25a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e25c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e25e:	4b10      	ldr	r3, [pc, #64]	; (800e2a0 <_txe_byte_pool_create+0x13c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4313      	orrs	r3, r2
 800e264:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e268:	d201      	bcs.n	800e26e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e26a:	2313      	movs	r3, #19
 800e26c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	68b9      	ldr	r1, [r7, #8]
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7fd f88a 	bl	800b394 <_tx_byte_pool_create>
 800e280:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e284:	4618      	mov	r0, r3
 800e286:	3748      	adds	r7, #72	; 0x48
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	2000171c 	.word	0x2000171c
 800e290:	20001674 	.word	0x20001674
 800e294:	20001678 	.word	0x20001678
 800e298:	20001684 	.word	0x20001684
 800e29c:	200017cc 	.word	0x200017cc
 800e2a0:	2000000c 	.word	0x2000000c

0800e2a4 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b094      	sub	sp, #80	; 0x50
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e2bc:	2309      	movs	r3, #9
 800e2be:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c0:	e083      	b.n	800e3ca <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2c4:	2b38      	cmp	r3, #56	; 0x38
 800e2c6:	d002      	beq.n	800e2ce <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e2c8:	2309      	movs	r3, #9
 800e2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e2cc:	e07d      	b.n	800e3ca <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e2d6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2d8:	b672      	cpsid	i
    return(int_posture);
 800e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e2dc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e2de:	4b43      	ldr	r3, [pc, #268]	; (800e3ec <_txe_queue_create+0x148>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	4a41      	ldr	r2, [pc, #260]	; (800e3ec <_txe_queue_create+0x148>)
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ee:	f383 8810 	msr	PRIMASK, r3
}
 800e2f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e2f4:	4b3e      	ldr	r3, [pc, #248]	; (800e3f0 <_txe_queue_create+0x14c>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800e2fe:	e009      	b.n	800e314 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e304:	429a      	cmp	r2, r3
 800e306:	d00b      	beq.n	800e320 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e310:	3301      	adds	r3, #1
 800e312:	643b      	str	r3, [r7, #64]	; 0x40
 800e314:	4b37      	ldr	r3, [pc, #220]	; (800e3f4 <_txe_queue_create+0x150>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d3f0      	bcc.n	800e300 <_txe_queue_create+0x5c>
 800e31e:	e000      	b.n	800e322 <_txe_queue_create+0x7e>
                break;
 800e320:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e322:	f3ef 8310 	mrs	r3, PRIMASK
 800e326:	623b      	str	r3, [r7, #32]
    return(posture);
 800e328:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e32a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e32c:	b672      	cpsid	i
    return(int_posture);
 800e32e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e330:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e332:	4b2e      	ldr	r3, [pc, #184]	; (800e3ec <_txe_queue_create+0x148>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3b01      	subs	r3, #1
 800e338:	4a2c      	ldr	r2, [pc, #176]	; (800e3ec <_txe_queue_create+0x148>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	f383 8810 	msr	PRIMASK, r3
}
 800e346:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e348:	f7fe fec0 	bl	800d0cc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e350:	429a      	cmp	r2, r3
 800e352:	d102      	bne.n	800e35a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e354:	2309      	movs	r3, #9
 800e356:	647b      	str	r3, [r7, #68]	; 0x44
 800e358:	e037      	b.n	800e3ca <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e360:	2303      	movs	r3, #3
 800e362:	647b      	str	r3, [r7, #68]	; 0x44
 800e364:	e031      	b.n	800e3ca <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d102      	bne.n	800e372 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e36c:	2305      	movs	r3, #5
 800e36e:	647b      	str	r3, [r7, #68]	; 0x44
 800e370:	e02b      	b.n	800e3ca <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b10      	cmp	r3, #16
 800e376:	d902      	bls.n	800e37e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e378:	2305      	movs	r3, #5
 800e37a:	647b      	str	r3, [r7, #68]	; 0x44
 800e37c:	e025      	b.n	800e3ca <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e380:	089b      	lsrs	r3, r3, #2
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	429a      	cmp	r2, r3
 800e386:	d902      	bls.n	800e38e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e388:	2305      	movs	r3, #5
 800e38a:	647b      	str	r3, [r7, #68]	; 0x44
 800e38c:	e01d      	b.n	800e3ca <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e38e:	4b1a      	ldr	r3, [pc, #104]	; (800e3f8 <_txe_queue_create+0x154>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e396:	4a19      	ldr	r2, [pc, #100]	; (800e3fc <_txe_queue_create+0x158>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d101      	bne.n	800e3a0 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e39c:	2313      	movs	r3, #19
 800e39e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3a0:	f3ef 8305 	mrs	r3, IPSR
 800e3a4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e3a6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e3a8:	4b15      	ldr	r3, [pc, #84]	; (800e400 <_txe_queue_create+0x15c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00b      	beq.n	800e3ca <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3b2:	f3ef 8305 	mrs	r3, IPSR
 800e3b6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e3b8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e3ba:	4b11      	ldr	r3, [pc, #68]	; (800e400 <_txe_queue_create+0x15c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e3c4:	d201      	bcs.n	800e3ca <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e3c6:	2313      	movs	r3, #19
 800e3c8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d108      	bne.n	800e3e2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68b9      	ldr	r1, [r7, #8]
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7fd f9f2 	bl	800b7c4 <_tx_queue_create>
 800e3e0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e3e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3748      	adds	r7, #72	; 0x48
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	2000171c 	.word	0x2000171c
 800e3f0:	20001654 	.word	0x20001654
 800e3f4:	20001658 	.word	0x20001658
 800e3f8:	20001684 	.word	0x20001684
 800e3fc:	200017cc 	.word	0x200017cc
 800e400:	2000000c 	.word	0x2000000c

0800e404 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e412:	2309      	movs	r3, #9
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	e00b      	b.n	800e430 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a07      	ldr	r2, [pc, #28]	; (800e43c <_txe_queue_flush+0x38>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d002      	beq.n	800e428 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e422:	2309      	movs	r3, #9
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	e003      	b.n	800e430 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7fd facb 	bl	800b9c4 <_tx_queue_flush>
 800e42e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e430:	68fb      	ldr	r3, [r7, #12]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	51554555 	.word	0x51554555

0800e440 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e44c:	2300      	movs	r3, #0
 800e44e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e456:	2309      	movs	r3, #9
 800e458:	61fb      	str	r3, [r7, #28]
 800e45a:	e025      	b.n	800e4a8 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a18      	ldr	r2, [pc, #96]	; (800e4c4 <_txe_queue_receive+0x84>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d002      	beq.n	800e46c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e466:	2309      	movs	r3, #9
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	e01d      	b.n	800e4a8 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d102      	bne.n	800e478 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e472:	2303      	movs	r3, #3
 800e474:	61fb      	str	r3, [r7, #28]
 800e476:	e017      	b.n	800e4a8 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d014      	beq.n	800e4a8 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e47e:	f3ef 8305 	mrs	r3, IPSR
 800e482:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e484:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e486:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <_txe_queue_receive+0x88>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e490:	2304      	movs	r3, #4
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	e008      	b.n	800e4a8 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e496:	4b0d      	ldr	r3, [pc, #52]	; (800e4cc <_txe_queue_receive+0x8c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	4a0c      	ldr	r2, [pc, #48]	; (800e4d0 <_txe_queue_receive+0x90>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d101      	bne.n	800e4a8 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e4a4:	2304      	movs	r3, #4
 800e4a6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d105      	bne.n	800e4ba <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7fd fb98 	bl	800bbe8 <_tx_queue_receive>
 800e4b8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e4ba:	69fb      	ldr	r3, [r7, #28]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3720      	adds	r7, #32
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	51554555 	.word	0x51554555
 800e4c8:	2000000c 	.word	0x2000000c
 800e4cc:	20001684 	.word	0x20001684
 800e4d0:	200017cc 	.word	0x200017cc

0800e4d4 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4ea:	2309      	movs	r3, #9
 800e4ec:	61fb      	str	r3, [r7, #28]
 800e4ee:	e025      	b.n	800e53c <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a18      	ldr	r2, [pc, #96]	; (800e558 <_txe_queue_send+0x84>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d002      	beq.n	800e500 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4fa:	2309      	movs	r3, #9
 800e4fc:	61fb      	str	r3, [r7, #28]
 800e4fe:	e01d      	b.n	800e53c <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d102      	bne.n	800e50c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e506:	2303      	movs	r3, #3
 800e508:	61fb      	str	r3, [r7, #28]
 800e50a:	e017      	b.n	800e53c <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d014      	beq.n	800e53c <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e512:	f3ef 8305 	mrs	r3, IPSR
 800e516:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e518:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e51a:	4b10      	ldr	r3, [pc, #64]	; (800e55c <_txe_queue_send+0x88>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4313      	orrs	r3, r2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e524:	2304      	movs	r3, #4
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	e008      	b.n	800e53c <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e52a:	4b0d      	ldr	r3, [pc, #52]	; (800e560 <_txe_queue_send+0x8c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	4a0c      	ldr	r2, [pc, #48]	; (800e564 <_txe_queue_send+0x90>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d101      	bne.n	800e53c <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e538:	2304      	movs	r3, #4
 800e53a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d105      	bne.n	800e54e <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	68b9      	ldr	r1, [r7, #8]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f7fd fd9c 	bl	800c084 <_tx_queue_send>
 800e54c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e54e:	69fb      	ldr	r3, [r7, #28]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	51554555 	.word	0x51554555
 800e55c:	2000000c 	.word	0x2000000c
 800e560:	20001684 	.word	0x20001684
 800e564:	200017cc 	.word	0x200017cc

0800e568 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e578:	230c      	movs	r3, #12
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	e012      	b.n	800e5a4 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4a0b      	ldr	r2, [pc, #44]	; (800e5b0 <_txe_semaphore_ceiling_put+0x48>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d002      	beq.n	800e58e <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e588:	230c      	movs	r3, #12
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e00a      	b.n	800e5a4 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e594:	2322      	movs	r3, #34	; 0x22
 800e596:	60fb      	str	r3, [r7, #12]
 800e598:	e004      	b.n	800e5a4 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7fd ff23 	bl	800c3e8 <_tx_semaphore_ceiling_put>
 800e5a2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	53454d41 	.word	0x53454d41

0800e5b4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b092      	sub	sp, #72	; 0x48
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d102      	bne.n	800e5d2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e5cc:	230c      	movs	r3, #12
 800e5ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e5d0:	e054      	b.n	800e67c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	2b1c      	cmp	r3, #28
 800e5d6:	d002      	beq.n	800e5de <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e5d8:	230c      	movs	r3, #12
 800e5da:	647b      	str	r3, [r7, #68]	; 0x44
 800e5dc:	e04e      	b.n	800e67c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5de:	f3ef 8310 	mrs	r3, PRIMASK
 800e5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5e8:	b672      	cpsid	i
    return(int_posture);
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e5ee:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <_txe_semaphore_create+0x114>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a34      	ldr	r2, [pc, #208]	; (800e6c8 <_txe_semaphore_create+0x114>)
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	f383 8810 	msr	PRIMASK, r3
}
 800e602:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e604:	4b31      	ldr	r3, [pc, #196]	; (800e6cc <_txe_semaphore_create+0x118>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e60a:	2300      	movs	r3, #0
 800e60c:	643b      	str	r3, [r7, #64]	; 0x40
 800e60e:	e009      	b.n	800e624 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e614:	429a      	cmp	r2, r3
 800e616:	d00b      	beq.n	800e630 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e620:	3301      	adds	r3, #1
 800e622:	643b      	str	r3, [r7, #64]	; 0x40
 800e624:	4b2a      	ldr	r3, [pc, #168]	; (800e6d0 <_txe_semaphore_create+0x11c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d3f0      	bcc.n	800e610 <_txe_semaphore_create+0x5c>
 800e62e:	e000      	b.n	800e632 <_txe_semaphore_create+0x7e>
                break;
 800e630:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e632:	f3ef 8310 	mrs	r3, PRIMASK
 800e636:	623b      	str	r3, [r7, #32]
    return(posture);
 800e638:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e63a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e63c:	b672      	cpsid	i
    return(int_posture);
 800e63e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e640:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e642:	4b21      	ldr	r3, [pc, #132]	; (800e6c8 <_txe_semaphore_create+0x114>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3b01      	subs	r3, #1
 800e648:	4a1f      	ldr	r2, [pc, #124]	; (800e6c8 <_txe_semaphore_create+0x114>)
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	f383 8810 	msr	PRIMASK, r3
}
 800e656:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e658:	f7fe fd38 	bl	800d0cc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e660:	429a      	cmp	r2, r3
 800e662:	d102      	bne.n	800e66a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e664:	230c      	movs	r3, #12
 800e666:	647b      	str	r3, [r7, #68]	; 0x44
 800e668:	e008      	b.n	800e67c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e66a:	4b1a      	ldr	r3, [pc, #104]	; (800e6d4 <_txe_semaphore_create+0x120>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e672:	4a19      	ldr	r2, [pc, #100]	; (800e6d8 <_txe_semaphore_create+0x124>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d101      	bne.n	800e67c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e678:	2313      	movs	r3, #19
 800e67a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d114      	bne.n	800e6ac <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e682:	f3ef 8305 	mrs	r3, IPSR
 800e686:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e688:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e68a:	4b14      	ldr	r3, [pc, #80]	; (800e6dc <_txe_semaphore_create+0x128>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4313      	orrs	r3, r2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00b      	beq.n	800e6ac <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e694:	f3ef 8305 	mrs	r3, IPSR
 800e698:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e69a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e69c:	4b0f      	ldr	r3, [pc, #60]	; (800e6dc <_txe_semaphore_create+0x128>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e6a6:	d201      	bcs.n	800e6ac <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e6a8:	2313      	movs	r3, #19
 800e6aa:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d105      	bne.n	800e6be <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f7fe f804 	bl	800c6c4 <_tx_semaphore_create>
 800e6bc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3748      	adds	r7, #72	; 0x48
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	2000171c 	.word	0x2000171c
 800e6cc:	2000164c 	.word	0x2000164c
 800e6d0:	20001650 	.word	0x20001650
 800e6d4:	20001684 	.word	0x20001684
 800e6d8:	200017cc 	.word	0x200017cc
 800e6dc:	2000000c 	.word	0x2000000c

0800e6e0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e6f4:	230c      	movs	r3, #12
 800e6f6:	617b      	str	r3, [r7, #20]
 800e6f8:	e01f      	b.n	800e73a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a15      	ldr	r2, [pc, #84]	; (800e754 <_txe_semaphore_get+0x74>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d002      	beq.n	800e70a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e704:	230c      	movs	r3, #12
 800e706:	617b      	str	r3, [r7, #20]
 800e708:	e017      	b.n	800e73a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d014      	beq.n	800e73a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e710:	f3ef 8305 	mrs	r3, IPSR
 800e714:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e716:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e718:	4b0f      	ldr	r3, [pc, #60]	; (800e758 <_txe_semaphore_get+0x78>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e722:	2304      	movs	r3, #4
 800e724:	617b      	str	r3, [r7, #20]
 800e726:	e008      	b.n	800e73a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e728:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <_txe_semaphore_get+0x7c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	4a0b      	ldr	r2, [pc, #44]	; (800e760 <_txe_semaphore_get+0x80>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d101      	bne.n	800e73a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e736:	2304      	movs	r3, #4
 800e738:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d104      	bne.n	800e74a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7fe f89e 	bl	800c884 <_tx_semaphore_get>
 800e748:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e74a:	697b      	ldr	r3, [r7, #20]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	53454d41 	.word	0x53454d41
 800e758:	2000000c 	.word	0x2000000c
 800e75c:	20001684 	.word	0x20001684
 800e760:	200017cc 	.word	0x200017cc

0800e764 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b09a      	sub	sp, #104	; 0x68
 800e768:	af06      	add	r7, sp, #24
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e772:	2300      	movs	r3, #0
 800e774:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d102      	bne.n	800e782 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e77c:	230e      	movs	r3, #14
 800e77e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e780:	e0bb      	b.n	800e8fa <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e784:	2bb0      	cmp	r3, #176	; 0xb0
 800e786:	d002      	beq.n	800e78e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e788:	230e      	movs	r3, #14
 800e78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e78c:	e0b5      	b.n	800e8fa <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e78e:	f3ef 8310 	mrs	r3, PRIMASK
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e796:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e798:	b672      	cpsid	i
    return(int_posture);
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e79e:	4b64      	ldr	r3, [pc, #400]	; (800e930 <_txe_thread_create+0x1cc>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	4a62      	ldr	r2, [pc, #392]	; (800e930 <_txe_thread_create+0x1cc>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	f383 8810 	msr	PRIMASK, r3
}
 800e7b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e7b8:	4b5e      	ldr	r3, [pc, #376]	; (800e934 <_txe_thread_create+0x1d0>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e7be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7c0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e7c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7c8:	4413      	add	r3, r2
 800e7ca:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7d4:	e02b      	b.n	800e82e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d101      	bne.n	800e7e2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d028      	beq.n	800e83a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d308      	bcc.n	800e804 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d203      	bcs.n	800e804 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e800:	2301      	movs	r3, #1
 800e802:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d308      	bcc.n	800e820 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e814:	429a      	cmp	r2, r3
 800e816:	d203      	bcs.n	800e820 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e81c:	2301      	movs	r3, #1
 800e81e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e826:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e82a:	3301      	adds	r3, #1
 800e82c:	647b      	str	r3, [r7, #68]	; 0x44
 800e82e:	4b42      	ldr	r3, [pc, #264]	; (800e938 <_txe_thread_create+0x1d4>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e834:	429a      	cmp	r2, r3
 800e836:	d3ce      	bcc.n	800e7d6 <_txe_thread_create+0x72>
 800e838:	e000      	b.n	800e83c <_txe_thread_create+0xd8>
                break;
 800e83a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e83c:	f3ef 8310 	mrs	r3, PRIMASK
 800e840:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e842:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e844:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e846:	b672      	cpsid	i
    return(int_posture);
 800e848:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e84c:	4b38      	ldr	r3, [pc, #224]	; (800e930 <_txe_thread_create+0x1cc>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3b01      	subs	r3, #1
 800e852:	4a37      	ldr	r2, [pc, #220]	; (800e930 <_txe_thread_create+0x1cc>)
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	f383 8810 	msr	PRIMASK, r3
}
 800e860:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e862:	f7fe fc33 	bl	800d0cc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d102      	bne.n	800e874 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e86e:	230e      	movs	r3, #14
 800e870:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e872:	e042      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e87a:	2303      	movs	r3, #3
 800e87c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e87e:	e03c      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d102      	bne.n	800e88c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e886:	2303      	movs	r3, #3
 800e888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e88a:	e036      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e88c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e88e:	2bc7      	cmp	r3, #199	; 0xc7
 800e890:	d802      	bhi.n	800e898 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e892:	2305      	movs	r3, #5
 800e894:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e896:	e030      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e89a:	2b1f      	cmp	r3, #31
 800e89c:	d902      	bls.n	800e8a4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e89e:	230f      	movs	r3, #15
 800e8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8a2:	e02a      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e8a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d902      	bls.n	800e8b2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e8ac:	2318      	movs	r3, #24
 800e8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8b0:	e023      	b.n	800e8fa <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d902      	bls.n	800e8be <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e8b8:	2310      	movs	r3, #16
 800e8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8bc:	e01d      	b.n	800e8fa <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e8be:	4b1f      	ldr	r3, [pc, #124]	; (800e93c <_txe_thread_create+0x1d8>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c6:	4a1e      	ldr	r2, [pc, #120]	; (800e940 <_txe_thread_create+0x1dc>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d101      	bne.n	800e8d0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e8cc:	2313      	movs	r3, #19
 800e8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e8d0:	f3ef 8305 	mrs	r3, IPSR
 800e8d4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e8d6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e8d8:	4b1a      	ldr	r3, [pc, #104]	; (800e944 <_txe_thread_create+0x1e0>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00b      	beq.n	800e8fa <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e8e2:	f3ef 8305 	mrs	r3, IPSR
 800e8e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e8e8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e8ea:	4b16      	ldr	r3, [pc, #88]	; (800e944 <_txe_thread_create+0x1e0>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e8f4:	d201      	bcs.n	800e8fa <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e8f6:	2313      	movs	r3, #19
 800e8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d112      	bne.n	800e926 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e902:	9305      	str	r3, [sp, #20]
 800e904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e906:	9304      	str	r3, [sp, #16]
 800e908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e90a:	9303      	str	r3, [sp, #12]
 800e90c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e90e:	9302      	str	r3, [sp, #8]
 800e910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e912:	9301      	str	r3, [sp, #4]
 800e914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	68b9      	ldr	r1, [r7, #8]
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7fe f8c6 	bl	800cab0 <_tx_thread_create>
 800e924:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3750      	adds	r7, #80	; 0x50
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	2000171c 	.word	0x2000171c
 800e934:	2000168c 	.word	0x2000168c
 800e938:	20001690 	.word	0x20001690
 800e93c:	20001684 	.word	0x20001684
 800e940:	200017cc 	.word	0x200017cc
 800e944:	2000000c 	.word	0x2000000c

0800e948 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e94e:	f3ef 8310 	mrs	r3, PRIMASK
 800e952:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e954:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e956:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e958:	b672      	cpsid	i
    return(int_posture);
 800e95a:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e95c:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e95e:	463b      	mov	r3, r7
 800e960:	4618      	mov	r0, r3
 800e962:	f000 f835 	bl	800e9d0 <tx_timer_get_next>
 800e966:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d103      	bne.n	800e976 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	4618      	mov	r0, r3
 800e972:	f7f1 ffcd 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e976:	4b07      	ldr	r3, [pc, #28]	; (800e994 <tx_low_power_enter+0x4c>)
 800e978:	2201      	movs	r2, #1
 800e97a:	601a      	str	r2, [r3, #0]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f383 8810 	msr	PRIMASK, r3
}
 800e986:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e988:	f7f1 fff6 	bl	8000978 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e98c:	bf00      	nop
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20001cb8 	.word	0x20001cb8

0800e998 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e99e:	4b0b      	ldr	r3, [pc, #44]	; (800e9cc <tx_low_power_exit+0x34>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00d      	beq.n	800e9c2 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e9a6:	4b09      	ldr	r3, [pc, #36]	; (800e9cc <tx_low_power_exit+0x34>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e9ac:	f7f1 fff2 	bl	8000994 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e9b0:	f7f1 fffe 	bl	80009b0 <App_ThreadX_LowPower_Timer_Adjust>
 800e9b4:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 f86f 	bl	800eaa0 <tx_time_increment>
        }
    }
}
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20001cb8 	.word	0x20001cb8

0800e9d0 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b08d      	sub	sp, #52	; 0x34
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9de:	f3ef 8310 	mrs	r3, PRIMASK
 800e9e2:	617b      	str	r3, [r7, #20]
    return(posture);
 800e9e4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e9e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9e8:	b672      	cpsid	i
    return(int_posture);
 800e9ea:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e9ec:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e9ee:	4b29      	ldr	r3, [pc, #164]	; (800ea94 <tx_timer_get_next+0xc4>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e9f8:	e02f      	b.n	800ea5a <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01d      	beq.n	800ea3e <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b20      	cmp	r3, #32
 800ea0e:	d906      	bls.n	800ea1e <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	4413      	add	r3, r2
 800ea18:	3b20      	subs	r3, #32
 800ea1a:	623b      	str	r3, [r7, #32]
 800ea1c:	e001      	b.n	800ea22 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800ea22:	69fa      	ldr	r2, [r7, #28]
 800ea24:	6a3b      	ldr	r3, [r7, #32]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d901      	bls.n	800ea2e <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800ea2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d1e4      	bne.n	800ea08 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	3304      	adds	r3, #4
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ea44:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <tx_timer_get_next+0xc8>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d302      	bcc.n	800ea54 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ea4e:	4b13      	ldr	r3, [pc, #76]	; (800ea9c <tx_timer_get_next+0xcc>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	3301      	adds	r3, #1
 800ea58:	627b      	str	r3, [r7, #36]	; 0x24
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	2b1f      	cmp	r3, #31
 800ea5e:	d9cc      	bls.n	800e9fa <tx_timer_get_next+0x2a>
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f383 8810 	msr	PRIMASK, r3
}
 800ea6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea72:	d004      	beq.n	800ea7e <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	69fa      	ldr	r2, [r7, #28]
 800ea78:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e003      	b.n	800ea86 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800ea84:	2300      	movs	r3, #0
    }
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3734      	adds	r7, #52	; 0x34
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	200017b8 	.word	0x200017b8
 800ea98:	200017b4 	.word	0x200017b4
 800ea9c:	200017b0 	.word	0x200017b0

0800eaa0 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b08a      	sub	sp, #40	; 0x28
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 809b 	beq.w	800ebe6 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eab0:	f3ef 8310 	mrs	r3, PRIMASK
 800eab4:	613b      	str	r3, [r7, #16]
    return(posture);
 800eab6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800eab8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eaba:	b672      	cpsid	i
    return(int_posture);
 800eabc:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800eabe:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800eac0:	4b4b      	ldr	r3, [pc, #300]	; (800ebf0 <tx_time_increment+0x150>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4413      	add	r3, r2
 800eac8:	4a49      	ldr	r2, [pc, #292]	; (800ebf0 <tx_time_increment+0x150>)
 800eaca:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800eacc:	4b49      	ldr	r3, [pc, #292]	; (800ebf4 <tx_time_increment+0x154>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00e      	beq.n	800eaf2 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800ead4:	4b47      	ldr	r3, [pc, #284]	; (800ebf4 <tx_time_increment+0x154>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d206      	bcs.n	800eaec <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800eade:	4b45      	ldr	r3, [pc, #276]	; (800ebf4 <tx_time_increment+0x154>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	4a43      	ldr	r2, [pc, #268]	; (800ebf4 <tx_time_increment+0x154>)
 800eae8:	6013      	str	r3, [r2, #0]
 800eaea:	e002      	b.n	800eaf2 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800eaec:	4b41      	ldr	r3, [pc, #260]	; (800ebf4 <tx_time_increment+0x154>)
 800eaee:	2201      	movs	r2, #1
 800eaf0:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800eaf2:	4b41      	ldr	r3, [pc, #260]	; (800ebf8 <tx_time_increment+0x158>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eafc:	2300      	movs	r3, #0
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
 800eb00:	e046      	b.n	800eb90 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800eb02:	6a3b      	ldr	r3, [r7, #32]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d034      	beq.n	800eb74 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b20      	cmp	r3, #32
 800eb16:	d908      	bls.n	800eb2a <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	4413      	add	r3, r2
 800eb20:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	601a      	str	r2, [r3, #0]
 800eb28:	e003      	b.n	800eb32 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d1e6      	bne.n	800eb10 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	695b      	ldr	r3, [r3, #20]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	61bb      	str	r3, [r7, #24]
 800eb58:	e009      	b.n	800eb6e <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	6a3a      	ldr	r2, [r7, #32]
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800eb64:	6a3b      	ldr	r3, [r7, #32]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	695a      	ldr	r2, [r3, #20]
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800eb6e:	6a3b      	ldr	r3, [r7, #32]
 800eb70:	2200      	movs	r2, #0
 800eb72:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800eb74:	6a3b      	ldr	r3, [r7, #32]
 800eb76:	3304      	adds	r3, #4
 800eb78:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800eb7a:	4b20      	ldr	r3, [pc, #128]	; (800ebfc <tx_time_increment+0x15c>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6a3a      	ldr	r2, [r7, #32]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d302      	bcc.n	800eb8a <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800eb84:	4b1e      	ldr	r3, [pc, #120]	; (800ec00 <tx_time_increment+0x160>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	2b1f      	cmp	r3, #31
 800eb94:	d9b5      	bls.n	800eb02 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800eb96:	4b1a      	ldr	r3, [pc, #104]	; (800ec00 <tx_time_increment+0x160>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a17      	ldr	r2, [pc, #92]	; (800ebf8 <tx_time_increment+0x158>)
 800eb9c:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800eb9e:	e019      	b.n	800ebd4 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d206      	bcs.n	800ebc2 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	1ad2      	subs	r2, r2, r3
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	e002      	b.n	800ebc8 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800ebce:	69f8      	ldr	r0, [r7, #28]
 800ebd0:	f7ff f81a 	bl	800dc08 <_tx_timer_system_activate>
    while (temp_list_head)
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1e2      	bne.n	800eba0 <tx_time_increment+0x100>
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f383 8810 	msr	PRIMASK, r3
}
 800ebe4:	e000      	b.n	800ebe8 <tx_time_increment+0x148>
        return;
 800ebe6:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ebe8:	3728      	adds	r7, #40	; 0x28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	20001728 	.word	0x20001728
 800ebf4:	20001c88 	.word	0x20001c88
 800ebf8:	200017b8 	.word	0x200017b8
 800ebfc:	200017b4 	.word	0x200017b4
 800ec00:	200017b0 	.word	0x200017b0

0800ec04 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af02      	add	r7, sp, #8
    int date_int = 0;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ec0e:	f000 f845 	bl	800ec9c <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800ec12:	4b0d      	ldr	r3, [pc, #52]	; (800ec48 <fm_calendar_format_date+0x44>)
 800ec14:	789b      	ldrb	r3, [r3, #2]
 800ec16:	461a      	mov	r2, r3
 800ec18:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <fm_calendar_format_date+0x44>)
 800ec1a:	785b      	ldrb	r3, [r3, #1]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <fm_calendar_format_date+0x44>)
 800ec20:	78db      	ldrb	r3, [r3, #3]
 800ec22:	4638      	mov	r0, r7
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	460b      	mov	r3, r1
 800ec28:	4908      	ldr	r1, [pc, #32]	; (800ec4c <fm_calendar_format_date+0x48>)
 800ec2a:	f006 f925 	bl	8014e78 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800ec2e:	463b      	mov	r3, r7
 800ec30:	4618      	mov	r0, r3
 800ec32:	f006 f8b7 	bl	8014da4 <atoi>
 800ec36:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	f000 fa4f 	bl	800f0dc <fm_factory_modify_fp_date>
}
 800ec3e:	bf00      	nop
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20001cd0 	.word	0x20001cd0
 800ec4c:	08015908 	.word	0x08015908

0800ec50 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af02      	add	r7, sp, #8
    int time_int = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ec5a:	f000 f81f 	bl	800ec9c <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ec5e:	4b0d      	ldr	r3, [pc, #52]	; (800ec94 <fm_calendar_format_time+0x44>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	4b0b      	ldr	r3, [pc, #44]	; (800ec94 <fm_calendar_format_time+0x44>)
 800ec66:	785b      	ldrb	r3, [r3, #1]
 800ec68:	4619      	mov	r1, r3
    sTime.Seconds);
 800ec6a:	4b0a      	ldr	r3, [pc, #40]	; (800ec94 <fm_calendar_format_time+0x44>)
 800ec6c:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ec6e:	4638      	mov	r0, r7
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	460b      	mov	r3, r1
 800ec74:	4908      	ldr	r1, [pc, #32]	; (800ec98 <fm_calendar_format_time+0x48>)
 800ec76:	f006 f8ff 	bl	8014e78 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f006 f891 	bl	8014da4 <atoi>
 800ec82:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ec84:	6978      	ldr	r0, [r7, #20]
 800ec86:	f000 fa39 	bl	800f0fc <fm_factory_modify_fp_time>
}
 800ec8a:	bf00      	nop
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20001cbc 	.word	0x20001cbc
 800ec98:	08015918 	.word	0x08015918

0800ec9c <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800eca0:	2200      	movs	r2, #0
 800eca2:	4905      	ldr	r1, [pc, #20]	; (800ecb8 <fm_calendar_get+0x1c>)
 800eca4:	4805      	ldr	r0, [pc, #20]	; (800ecbc <fm_calendar_get+0x20>)
 800eca6:	f7fa fa3b 	bl	8009120 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ecaa:	2200      	movs	r2, #0
 800ecac:	4904      	ldr	r1, [pc, #16]	; (800ecc0 <fm_calendar_get+0x24>)
 800ecae:	4803      	ldr	r0, [pc, #12]	; (800ecbc <fm_calendar_get+0x20>)
 800ecb0:	f7fa fb2e 	bl	8009310 <HAL_RTC_GetDate>
}
 800ecb4:	bf00      	nop
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20001cbc 	.word	0x20001cbc
 800ecbc:	200014a4 	.word	0x200014a4
 800ecc0:	20001cd0 	.word	0x20001cd0

0800ecc4 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ecc8:	f7ff ffe8 	bl	800ec9c <fm_calendar_get>
    return (sDate.Date);
 800eccc:	4b01      	ldr	r3, [pc, #4]	; (800ecd4 <fm_calendar_get_day+0x10>)
 800ecce:	789b      	ldrb	r3, [r3, #2]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20001cd0 	.word	0x20001cd0

0800ecd8 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ecdc:	f7ff ffde 	bl	800ec9c <fm_calendar_get>
    return (sTime.Hours);
 800ece0:	4b01      	ldr	r3, [pc, #4]	; (800ece8 <fm_calendar_get_hour+0x10>)
 800ece2:	781b      	ldrb	r3, [r3, #0]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	20001cbc 	.word	0x20001cbc

0800ecec <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ecf0:	f7ff ffd4 	bl	800ec9c <fm_calendar_get>
    return (sTime.Minutes);
 800ecf4:	4b01      	ldr	r3, [pc, #4]	; (800ecfc <fm_calendar_get_minute+0x10>)
 800ecf6:	785b      	ldrb	r3, [r3, #1]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	20001cbc 	.word	0x20001cbc

0800ed00 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leido del calendario.
 */
int fm_calendar_get_month()
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed04:	f7ff ffca 	bl	800ec9c <fm_calendar_get>
    return (sDate.Month);
 800ed08:	4b01      	ldr	r3, [pc, #4]	; (800ed10 <fm_calendar_get_month+0x10>)
 800ed0a:	785b      	ldrb	r3, [r3, #1]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	20001cd0 	.word	0x20001cd0

0800ed14 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed18:	f7ff ffc0 	bl	800ec9c <fm_calendar_get>
    return (sTime.Seconds);
 800ed1c:	4b01      	ldr	r3, [pc, #4]	; (800ed24 <fm_calendar_get_second+0x10>)
 800ed1e:	789b      	ldrb	r3, [r3, #2]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	20001cbc 	.word	0x20001cbc

0800ed28 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed2c:	f7ff ffb6 	bl	800ec9c <fm_calendar_get>
    return (sDate.Year);
 800ed30:	4b01      	ldr	r3, [pc, #4]	; (800ed38 <fm_calendar_get_year+0x10>)
 800ed32:	78db      	ldrb	r3, [r3, #3]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20001cd0 	.word	0x20001cd0

0800ed3c <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800ed48:	2302      	movs	r3, #2
 800ed4a:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800ed4c:	e008      	b.n	800ed60 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800ed4e:	78fb      	ldrb	r3, [r7, #3]
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	230a      	movs	r3, #10
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	4806      	ldr	r0, [pc, #24]	; (800ed70 <fm_debug_msg_uart+0x34>)
 800ed58:	f7fb fdc0 	bl	800a8dc <HAL_UART_Transmit>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d0f3      	beq.n	800ed4e <fm_debug_msg_uart+0x12>
    }

}
 800ed66:	bf00      	nop
 800ed68:	bf00      	nop
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	20001564 	.word	0x20001564

0800ed74 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800ed74:	b4b0      	push	{r4, r5, r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a07      	ldr	r2, [pc, #28]	; (800ed9c <fm_factory_get_acm+0x28>)
 800ed80:	461c      	mov	r4, r3
 800ed82:	4615      	mov	r5, r2
 800ed84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bcb0      	pop	{r4, r5, r7}
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	20000030 	.word	0x20000030

0800eda0 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800eda0:	b4b0      	push	{r4, r5, r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
    return (date_time_config);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a07      	ldr	r2, [pc, #28]	; (800edc8 <fm_factory_get_date_time+0x28>)
 800edac:	461c      	mov	r4, r3
 800edae:	4615      	mov	r5, r2
 800edb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800edb8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bcb0      	pop	{r4, r5, r7}
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	2000007c 	.word	0x2000007c

0800edcc <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
    return (date_user);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a05      	ldr	r2, [pc, #20]	; (800edec <fm_factory_get_fp_date+0x20>)
 800edd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eddc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20000104 	.word	0x20000104

0800edf0 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
    return (date_config);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a05      	ldr	r2, [pc, #20]	; (800ee10 <fm_factory_get_fp_date_conf+0x20>)
 800edfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee00:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	20000114 	.word	0x20000114

0800ee14 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
    return (time_user);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a05      	ldr	r2, [pc, #20]	; (800ee34 <fm_factory_get_fp_time+0x20>)
 800ee20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee24:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr
 800ee34:	200000fc 	.word	0x200000fc

0800ee38 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
    return (time_config);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a05      	ldr	r2, [pc, #20]	; (800ee58 <fm_factory_get_fp_time_conf+0x20>)
 800ee44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee48:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	2000010c 	.word	0x2000010c

0800ee5c <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if (k_sel == K_LIN_1)
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d106      	bne.n	800ee7c <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800ee6e:	4b1d      	ldr	r3, [pc, #116]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800ee70:	4a1d      	ldr	r2, [pc, #116]	; (800eee8 <fm_factory_get_frec_lin+0x8c>)
 800ee72:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee76:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee7a:	e026      	b.n	800eeca <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_2)
 800ee7c:	78fb      	ldrb	r3, [r7, #3]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d106      	bne.n	800ee90 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ee82:	4b18      	ldr	r3, [pc, #96]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800ee84:	4a19      	ldr	r2, [pc, #100]	; (800eeec <fm_factory_get_frec_lin+0x90>)
 800ee86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee8a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee8e:	e01c      	b.n	800eeca <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_3)
 800ee90:	78fb      	ldrb	r3, [r7, #3]
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d106      	bne.n	800eea4 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ee96:	4b13      	ldr	r3, [pc, #76]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800ee98:	4a15      	ldr	r2, [pc, #84]	; (800eef0 <fm_factory_get_frec_lin+0x94>)
 800ee9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee9e:	e883 0003 	stmia.w	r3, {r0, r1}
 800eea2:	e012      	b.n	800eeca <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_4)
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d106      	bne.n	800eeb8 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800eeaa:	4b0e      	ldr	r3, [pc, #56]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800eeac:	4a11      	ldr	r2, [pc, #68]	; (800eef4 <fm_factory_get_frec_lin+0x98>)
 800eeae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeb2:	e883 0003 	stmia.w	r3, {r0, r1}
 800eeb6:	e008      	b.n	800eeca <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_5)
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	2b05      	cmp	r3, #5
 800eebc:	d105      	bne.n	800eeca <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800eebe:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800eec0:	4a0d      	ldr	r2, [pc, #52]	; (800eef8 <fm_factory_get_frec_lin+0x9c>)
 800eec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eec6:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a05      	ldr	r2, [pc, #20]	; (800eee4 <fm_factory_get_frec_lin+0x88>)
 800eece:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eed2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20001cec 	.word	0x20001cec
 800eee8:	200000a4 	.word	0x200000a4
 800eeec:	200000ac 	.word	0x200000ac
 800eef0:	200000b4 	.word	0x200000b4
 800eef4:	200000bc 	.word	0x200000bc
 800eef8:	200000c4 	.word	0x200000c4

0800eefc <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if (k_sel == K_FACTOR)
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ef0e:	4b22      	ldr	r3, [pc, #136]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef10:	4a22      	ldr	r2, [pc, #136]	; (800ef9c <fm_factory_get_k_factor+0xa0>)
 800ef12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef16:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef1a:	e030      	b.n	800ef7e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_1)
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d106      	bne.n	800ef30 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800ef22:	4b1d      	ldr	r3, [pc, #116]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef24:	4a1e      	ldr	r2, [pc, #120]	; (800efa0 <fm_factory_get_k_factor+0xa4>)
 800ef26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef2e:	e026      	b.n	800ef7e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_2)
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d106      	bne.n	800ef44 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800ef36:	4b18      	ldr	r3, [pc, #96]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef38:	4a1a      	ldr	r2, [pc, #104]	; (800efa4 <fm_factory_get_k_factor+0xa8>)
 800ef3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef3e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef42:	e01c      	b.n	800ef7e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_3)
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d106      	bne.n	800ef58 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800ef4a:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef4c:	4a16      	ldr	r2, [pc, #88]	; (800efa8 <fm_factory_get_k_factor+0xac>)
 800ef4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef52:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef56:	e012      	b.n	800ef7e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_4)
 800ef58:	78fb      	ldrb	r3, [r7, #3]
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	d106      	bne.n	800ef6c <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800ef5e:	4b0e      	ldr	r3, [pc, #56]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef60:	4a12      	ldr	r2, [pc, #72]	; (800efac <fm_factory_get_k_factor+0xb0>)
 800ef62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef66:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef6a:	e008      	b.n	800ef7e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_5)
 800ef6c:	78fb      	ldrb	r3, [r7, #3]
 800ef6e:	2b05      	cmp	r3, #5
 800ef70:	d105      	bne.n	800ef7e <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800ef72:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef74:	4a0e      	ldr	r2, [pc, #56]	; (800efb0 <fm_factory_get_k_factor+0xb4>)
 800ef76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef7a:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a05      	ldr	r2, [pc, #20]	; (800ef98 <fm_factory_get_k_factor+0x9c>)
 800ef82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef86:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	20001cf4 	.word	0x20001cf4
 800ef9c:	200000f4 	.word	0x200000f4
 800efa0:	200000cc 	.word	0x200000cc
 800efa4:	200000d4 	.word	0x200000d4
 800efa8:	200000dc 	.word	0x200000dc
 800efac:	200000e4 	.word	0x200000e4
 800efb0:	200000ec 	.word	0x200000ec

0800efb4 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800efb4:	b4b0      	push	{r4, r5, r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a07      	ldr	r2, [pc, #28]	; (800efdc <fm_factory_get_rate+0x28>)
 800efc0:	461c      	mov	r4, r3
 800efc2:	4615      	mov	r5, r2
 800efc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800efcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bcb0      	pop	{r4, r5, r7}
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	20000050 	.word	0x20000050

0800efe0 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a05      	ldr	r2, [pc, #20]	; (800f000 <fm_factory_get_temp+0x20>)
 800efec:	ca07      	ldmia	r2, {r0, r1, r2}
 800efee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	20000070 	.word	0x20000070

0800f004 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800f004:	b4b0      	push	{r4, r5, r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a07      	ldr	r2, [pc, #28]	; (800f02c <fm_factory_get_ttl+0x28>)
 800f010:	461c      	mov	r4, r3
 800f012:	4615      	mov	r5, r2
 800f014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f018:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f01c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	bcb0      	pop	{r4, r5, r7}
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	20000010 	.word	0x20000010

0800f030 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a05      	ldr	r2, [pc, #20]	; (800f050 <fm_factory_get_units_tim+0x20>)
 800f03c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f040:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	20000094 	.word	0x20000094

0800f054 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a05      	ldr	r2, [pc, #20]	; (800f074 <fm_factory_get_units_vol+0x20>)
 800f060:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f064:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	2000009c 	.word	0x2000009c

0800f078 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
    static const int century = 2000;
    static const int day_mult = 1000000;
    static const int month_mult = 10000;

    date_time_config.day = mod_day;
 800f084:	4a10      	ldr	r2, [pc, #64]	; (800f0c8 <fm_factory_modify_date+0x50>)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f08a:	4a0f      	ldr	r2, [pc, #60]	; (800f0c8 <fm_factory_modify_date+0x50>)
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f090:	4a0d      	ldr	r2, [pc, #52]	; (800f0c8 <fm_factory_modify_date+0x50>)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f096:	4b0d      	ldr	r3, [pc, #52]	; (800f0cc <fm_factory_modify_date+0x54>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	fb03 f202 	mul.w	r2, r3, r2
 800f0a0:	4b0b      	ldr	r3, [pc, #44]	; (800f0d0 <fm_factory_modify_date+0x58>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	fb01 f303 	mul.w	r3, r1, r3
 800f0aa:	441a      	add	r2, r3
 800f0ac:	4b09      	ldr	r3, [pc, #36]	; (800f0d4 <fm_factory_modify_date+0x5c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	441a      	add	r2, r3
    + mod_year;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	461a      	mov	r2, r3
    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f0b8:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <fm_factory_modify_date+0x60>)
 800f0ba:	601a      	str	r2, [r3, #0]
}
 800f0bc:	bf00      	nop
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr
 800f0c8:	2000007c 	.word	0x2000007c
 800f0cc:	08015c1c 	.word	0x08015c1c
 800f0d0:	08015c20 	.word	0x08015c20
 800f0d4:	08015c24 	.word	0x08015c24
 800f0d8:	20000114 	.word	0x20000114

0800f0dc <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a04      	ldr	r2, [pc, #16]	; (800f0f8 <fm_factory_modify_fp_date+0x1c>)
 800f0e8:	6013      	str	r3, [r2, #0]
}
 800f0ea:	bf00      	nop
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	20000104 	.word	0x20000104

0800f0fc <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a04      	ldr	r2, [pc, #16]	; (800f118 <fm_factory_modify_fp_time+0x1c>)
 800f108:	6013      	str	r3, [r2, #0]
}
 800f10a:	bf00      	nop
 800f10c:	370c      	adds	r7, #12
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	200000fc 	.word	0x200000fc

0800f11c <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f126:	2300      	movs	r3, #0
 800f128:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f12a:	f000 faf7 	bl	800f71c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	f1c3 0307 	rsb	r3, r3, #7
 800f134:	4a17      	ldr	r2, [pc, #92]	; (800f194 <fm_factory_modify_k_factor_add+0x78>)
 800f136:	5cd3      	ldrb	r3, [r2, r3]
 800f138:	2b08      	cmp	r3, #8
 800f13a:	d809      	bhi.n	800f150 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	f1c3 0307 	rsb	r3, r3, #7
 800f142:	4a14      	ldr	r2, [pc, #80]	; (800f194 <fm_factory_modify_k_factor_add+0x78>)
 800f144:	5cd2      	ldrb	r2, [r2, r3]
 800f146:	3201      	adds	r2, #1
 800f148:	b2d1      	uxtb	r1, r2
 800f14a:	4a12      	ldr	r2, [pc, #72]	; (800f194 <fm_factory_modify_k_factor_add+0x78>)
 800f14c:	54d1      	strb	r1, [r2, r3]
 800f14e:	e005      	b.n	800f15c <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f150:	79fb      	ldrb	r3, [r7, #7]
 800f152:	f1c3 0307 	rsb	r3, r3, #7
 800f156:	4a0f      	ldr	r2, [pc, #60]	; (800f194 <fm_factory_modify_k_factor_add+0x78>)
 800f158:	2100      	movs	r1, #0
 800f15a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f15c:	2300      	movs	r3, #0
 800f15e:	60bb      	str	r3, [r7, #8]
 800f160:	e00d      	b.n	800f17e <fm_factory_modify_k_factor_add+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f162:	230a      	movs	r3, #10
 800f164:	461a      	mov	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	fb02 f303 	mul.w	r3, r2, r3
 800f16c:	4909      	ldr	r1, [pc, #36]	; (800f194 <fm_factory_modify_k_factor_add+0x78>)
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	440a      	add	r2, r1
 800f172:	7812      	ldrb	r2, [r2, #0]
 800f174:	4413      	add	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	3301      	adds	r3, #1
 800f17c:	60bb      	str	r3, [r7, #8]
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	2b07      	cmp	r3, #7
 800f182:	ddee      	ble.n	800f162 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f184:	4a04      	ldr	r2, [pc, #16]	; (800f198 <fm_factory_modify_k_factor_add+0x7c>)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20001cd4 	.word	0x20001cd4
 800f198:	200000f4 	.word	0x200000f4

0800f19c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f1aa:	f000 fab7 	bl	800f71c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f1ae:	79fb      	ldrb	r3, [r7, #7]
 800f1b0:	f1c3 0307 	rsb	r3, r3, #7
 800f1b4:	4a17      	ldr	r2, [pc, #92]	; (800f214 <fm_factory_modify_k_factor_subs+0x78>)
 800f1b6:	5cd3      	ldrb	r3, [r2, r3]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d009      	beq.n	800f1d0 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f1bc:	79fb      	ldrb	r3, [r7, #7]
 800f1be:	f1c3 0307 	rsb	r3, r3, #7
 800f1c2:	4a14      	ldr	r2, [pc, #80]	; (800f214 <fm_factory_modify_k_factor_subs+0x78>)
 800f1c4:	5cd2      	ldrb	r2, [r2, r3]
 800f1c6:	3a01      	subs	r2, #1
 800f1c8:	b2d1      	uxtb	r1, r2
 800f1ca:	4a12      	ldr	r2, [pc, #72]	; (800f214 <fm_factory_modify_k_factor_subs+0x78>)
 800f1cc:	54d1      	strb	r1, [r2, r3]
 800f1ce:	e005      	b.n	800f1dc <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	f1c3 0307 	rsb	r3, r3, #7
 800f1d6:	4a0f      	ldr	r2, [pc, #60]	; (800f214 <fm_factory_modify_k_factor_subs+0x78>)
 800f1d8:	2109      	movs	r1, #9
 800f1da:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60bb      	str	r3, [r7, #8]
 800f1e0:	e00d      	b.n	800f1fe <fm_factory_modify_k_factor_subs+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f1e2:	230a      	movs	r3, #10
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	fb02 f303 	mul.w	r3, r2, r3
 800f1ec:	4909      	ldr	r1, [pc, #36]	; (800f214 <fm_factory_modify_k_factor_subs+0x78>)
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	440a      	add	r2, r1
 800f1f2:	7812      	ldrb	r2, [r2, #0]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	60bb      	str	r3, [r7, #8]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b07      	cmp	r3, #7
 800f202:	ddee      	ble.n	800f1e2 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f204:	4a04      	ldr	r2, [pc, #16]	; (800f218 <fm_factory_modify_k_factor_subs+0x7c>)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6013      	str	r3, [r2, #0]
}
 800f20a:	bf00      	nop
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	20001cd4 	.word	0x20001cd4
 800f218:	200000f4 	.word	0x200000f4

0800f21c <fm_factory_modify_k_lin_add>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	4603      	mov	r3, r0
 800f224:	460a      	mov	r2, r1
 800f226:	71fb      	strb	r3, [r7, #7]
 800f228:	4613      	mov	r3, r2
 800f22a:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f230:	2300      	movs	r3, #0
 800f232:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f234:	79bb      	ldrb	r3, [r7, #6]
 800f236:	4618      	mov	r0, r3
 800f238:	f000 faa8 	bl	800f78c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f23c:	79fb      	ldrb	r3, [r7, #7]
 800f23e:	2b07      	cmp	r3, #7
 800f240:	d84d      	bhi.n	800f2de <fm_factory_modify_k_lin_add+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f242:	79fb      	ldrb	r3, [r7, #7]
 800f244:	f1c3 0307 	rsb	r3, r3, #7
 800f248:	4a5d      	ldr	r2, [pc, #372]	; (800f3c0 <fm_factory_modify_k_lin_add+0x1a4>)
 800f24a:	5cd3      	ldrb	r3, [r2, r3]
 800f24c:	2b08      	cmp	r3, #8
 800f24e:	d809      	bhi.n	800f264 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	f1c3 0307 	rsb	r3, r3, #7
 800f256:	4a5a      	ldr	r2, [pc, #360]	; (800f3c0 <fm_factory_modify_k_lin_add+0x1a4>)
 800f258:	5cd2      	ldrb	r2, [r2, r3]
 800f25a:	3201      	adds	r2, #1
 800f25c:	b2d1      	uxtb	r1, r2
 800f25e:	4a58      	ldr	r2, [pc, #352]	; (800f3c0 <fm_factory_modify_k_lin_add+0x1a4>)
 800f260:	54d1      	strb	r1, [r2, r3]
 800f262:	e005      	b.n	800f270 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	f1c3 0307 	rsb	r3, r3, #7
 800f26a:	4a55      	ldr	r2, [pc, #340]	; (800f3c0 <fm_factory_modify_k_lin_add+0x1a4>)
 800f26c:	2100      	movs	r1, #0
 800f26e:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f270:	2300      	movs	r3, #0
 800f272:	60fb      	str	r3, [r7, #12]
 800f274:	e00d      	b.n	800f292 <fm_factory_modify_k_lin_add+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f276:	230a      	movs	r3, #10
 800f278:	461a      	mov	r2, r3
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	fb02 f303 	mul.w	r3, r2, r3
 800f280:	494f      	ldr	r1, [pc, #316]	; (800f3c0 <fm_factory_modify_k_lin_add+0x1a4>)
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	440a      	add	r2, r1
 800f286:	7812      	ldrb	r2, [r2, #0]
 800f288:	4413      	add	r3, r2
 800f28a:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	3301      	adds	r3, #1
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2b07      	cmp	r3, #7
 800f296:	ddee      	ble.n	800f276 <fm_factory_modify_k_lin_add+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f298:	79bb      	ldrb	r3, [r7, #6]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d103      	bne.n	800f2a6 <fm_factory_modify_k_lin_add+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f29e:	4a49      	ldr	r2, [pc, #292]	; (800f3c4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f2a4:	e088      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f2a6:	79bb      	ldrb	r3, [r7, #6]
 800f2a8:	2b02      	cmp	r3, #2
 800f2aa:	d103      	bne.n	800f2b4 <fm_factory_modify_k_lin_add+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f2ac:	4a46      	ldr	r2, [pc, #280]	; (800f3c8 <fm_factory_modify_k_lin_add+0x1ac>)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	6013      	str	r3, [r2, #0]
}
 800f2b2:	e081      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f2b4:	79bb      	ldrb	r3, [r7, #6]
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d103      	bne.n	800f2c2 <fm_factory_modify_k_lin_add+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f2ba:	4a44      	ldr	r2, [pc, #272]	; (800f3cc <fm_factory_modify_k_lin_add+0x1b0>)
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	6013      	str	r3, [r2, #0]
}
 800f2c0:	e07a      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f2c2:	79bb      	ldrb	r3, [r7, #6]
 800f2c4:	2b04      	cmp	r3, #4
 800f2c6:	d103      	bne.n	800f2d0 <fm_factory_modify_k_lin_add+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f2c8:	4a41      	ldr	r2, [pc, #260]	; (800f3d0 <fm_factory_modify_k_lin_add+0x1b4>)
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	6013      	str	r3, [r2, #0]
}
 800f2ce:	e073      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f2d0:	79bb      	ldrb	r3, [r7, #6]
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d170      	bne.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f2d6:	4a3f      	ldr	r2, [pc, #252]	; (800f3d4 <fm_factory_modify_k_lin_add+0x1b8>)
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	6013      	str	r3, [r2, #0]
}
 800f2dc:	e06c      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f2de:	79fb      	ldrb	r3, [r7, #7]
 800f2e0:	2b07      	cmp	r3, #7
 800f2e2:	d969      	bls.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	f1c3 030e 	rsb	r3, r3, #14
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d017      	beq.n	800f31e <fm_factory_modify_k_lin_add+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	f1c3 030e 	rsb	r3, r3, #14
 800f2f4:	4a38      	ldr	r2, [pc, #224]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2f6:	5cd3      	ldrb	r3, [r2, r3]
 800f2f8:	2b08      	cmp	r3, #8
 800f2fa:	d809      	bhi.n	800f310 <fm_factory_modify_k_lin_add+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	f1c3 030e 	rsb	r3, r3, #14
 800f302:	4a35      	ldr	r2, [pc, #212]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f304:	5cd2      	ldrb	r2, [r2, r3]
 800f306:	3201      	adds	r2, #1
 800f308:	b2d1      	uxtb	r1, r2
 800f30a:	4a33      	ldr	r2, [pc, #204]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f30c:	54d1      	strb	r1, [r2, r3]
 800f30e:	e01d      	b.n	800f34c <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	f1c3 030e 	rsb	r3, r3, #14
 800f316:	4a30      	ldr	r2, [pc, #192]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f318:	2100      	movs	r1, #0
 800f31a:	54d1      	strb	r1, [r2, r3]
 800f31c:	e016      	b.n	800f34c <fm_factory_modify_k_lin_add+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f31e:	79fb      	ldrb	r3, [r7, #7]
 800f320:	f1c3 030e 	rsb	r3, r3, #14
 800f324:	4a2c      	ldr	r2, [pc, #176]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f326:	5cd3      	ldrb	r3, [r2, r3]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d109      	bne.n	800f340 <fm_factory_modify_k_lin_add+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	f1c3 030e 	rsb	r3, r3, #14
 800f332:	4a29      	ldr	r2, [pc, #164]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f334:	5cd2      	ldrb	r2, [r2, r3]
 800f336:	3201      	adds	r2, #1
 800f338:	b2d1      	uxtb	r1, r2
 800f33a:	4a27      	ldr	r2, [pc, #156]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f33c:	54d1      	strb	r1, [r2, r3]
 800f33e:	e005      	b.n	800f34c <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f340:	79fb      	ldrb	r3, [r7, #7]
 800f342:	f1c3 030e 	rsb	r3, r3, #14
 800f346:	4a24      	ldr	r2, [pc, #144]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f348:	2100      	movs	r1, #0
 800f34a:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f34c:	2300      	movs	r3, #0
 800f34e:	60bb      	str	r3, [r7, #8]
 800f350:	e00d      	b.n	800f36e <fm_factory_modify_k_lin_add+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f352:	230a      	movs	r3, #10
 800f354:	461a      	mov	r2, r3
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f35c:	491e      	ldr	r1, [pc, #120]	; (800f3d8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	440a      	add	r2, r1
 800f362:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f364:	4413      	add	r3, r2
 800f366:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	3301      	adds	r3, #1
 800f36c:	60bb      	str	r3, [r7, #8]
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b06      	cmp	r3, #6
 800f372:	ddee      	ble.n	800f352 <fm_factory_modify_k_lin_add+0x136>
        if (k_sel == K_LIN_1)
 800f374:	79bb      	ldrb	r3, [r7, #6]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d103      	bne.n	800f382 <fm_factory_modify_k_lin_add+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f37a:	4a18      	ldr	r2, [pc, #96]	; (800f3dc <fm_factory_modify_k_lin_add+0x1c0>)
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	6013      	str	r3, [r2, #0]
}
 800f380:	e01a      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f382:	79bb      	ldrb	r3, [r7, #6]
 800f384:	2b02      	cmp	r3, #2
 800f386:	d103      	bne.n	800f390 <fm_factory_modify_k_lin_add+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f388:	4a15      	ldr	r2, [pc, #84]	; (800f3e0 <fm_factory_modify_k_lin_add+0x1c4>)
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	6013      	str	r3, [r2, #0]
}
 800f38e:	e013      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f390:	79bb      	ldrb	r3, [r7, #6]
 800f392:	2b03      	cmp	r3, #3
 800f394:	d103      	bne.n	800f39e <fm_factory_modify_k_lin_add+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f396:	4a13      	ldr	r2, [pc, #76]	; (800f3e4 <fm_factory_modify_k_lin_add+0x1c8>)
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	6013      	str	r3, [r2, #0]
}
 800f39c:	e00c      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f39e:	79bb      	ldrb	r3, [r7, #6]
 800f3a0:	2b04      	cmp	r3, #4
 800f3a2:	d103      	bne.n	800f3ac <fm_factory_modify_k_lin_add+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f3a4:	4a10      	ldr	r2, [pc, #64]	; (800f3e8 <fm_factory_modify_k_lin_add+0x1cc>)
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	6013      	str	r3, [r2, #0]
}
 800f3aa:	e005      	b.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f3ac:	79bb      	ldrb	r3, [r7, #6]
 800f3ae:	2b05      	cmp	r3, #5
 800f3b0:	d102      	bne.n	800f3b8 <fm_factory_modify_k_lin_add+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f3b2:	4a0e      	ldr	r2, [pc, #56]	; (800f3ec <fm_factory_modify_k_lin_add+0x1d0>)
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6013      	str	r3, [r2, #0]
}
 800f3b8:	bf00      	nop
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20001cdc 	.word	0x20001cdc
 800f3c4:	200000cc 	.word	0x200000cc
 800f3c8:	200000d4 	.word	0x200000d4
 800f3cc:	200000dc 	.word	0x200000dc
 800f3d0:	200000e4 	.word	0x200000e4
 800f3d4:	200000ec 	.word	0x200000ec
 800f3d8:	20001ce4 	.word	0x20001ce4
 800f3dc:	200000a4 	.word	0x200000a4
 800f3e0:	200000ac 	.word	0x200000ac
 800f3e4:	200000b4 	.word	0x200000b4
 800f3e8:	200000bc 	.word	0x200000bc
 800f3ec:	200000c4 	.word	0x200000c4

0800f3f0 <fm_factory_modify_k_lin_subs>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	460a      	mov	r2, r1
 800f3fa:	71fb      	strb	r3, [r7, #7]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f408:	79bb      	ldrb	r3, [r7, #6]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 f9be 	bl	800f78c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	2b07      	cmp	r3, #7
 800f414:	d84d      	bhi.n	800f4b2 <fm_factory_modify_k_lin_subs+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	f1c3 0307 	rsb	r3, r3, #7
 800f41c:	4a5d      	ldr	r2, [pc, #372]	; (800f594 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f41e:	5cd3      	ldrb	r3, [r2, r3]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d009      	beq.n	800f438 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	f1c3 0307 	rsb	r3, r3, #7
 800f42a:	4a5a      	ldr	r2, [pc, #360]	; (800f594 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f42c:	5cd2      	ldrb	r2, [r2, r3]
 800f42e:	3a01      	subs	r2, #1
 800f430:	b2d1      	uxtb	r1, r2
 800f432:	4a58      	ldr	r2, [pc, #352]	; (800f594 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f434:	54d1      	strb	r1, [r2, r3]
 800f436:	e005      	b.n	800f444 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	f1c3 0307 	rsb	r3, r3, #7
 800f43e:	4a55      	ldr	r2, [pc, #340]	; (800f594 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f440:	2109      	movs	r1, #9
 800f442:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f444:	2300      	movs	r3, #0
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	e00d      	b.n	800f466 <fm_factory_modify_k_lin_subs+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f44a:	230a      	movs	r3, #10
 800f44c:	461a      	mov	r2, r3
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	fb02 f303 	mul.w	r3, r2, r3
 800f454:	494f      	ldr	r1, [pc, #316]	; (800f594 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	440a      	add	r2, r1
 800f45a:	7812      	ldrb	r2, [r2, #0]
 800f45c:	4413      	add	r3, r2
 800f45e:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	3301      	adds	r3, #1
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2b07      	cmp	r3, #7
 800f46a:	ddee      	ble.n	800f44a <fm_factory_modify_k_lin_subs+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f46c:	79bb      	ldrb	r3, [r7, #6]
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d103      	bne.n	800f47a <fm_factory_modify_k_lin_subs+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f472:	4a49      	ldr	r2, [pc, #292]	; (800f598 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f478:	e088      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f47a:	79bb      	ldrb	r3, [r7, #6]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d103      	bne.n	800f488 <fm_factory_modify_k_lin_subs+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f480:	4a46      	ldr	r2, [pc, #280]	; (800f59c <fm_factory_modify_k_lin_subs+0x1ac>)
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	6013      	str	r3, [r2, #0]
}
 800f486:	e081      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f488:	79bb      	ldrb	r3, [r7, #6]
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d103      	bne.n	800f496 <fm_factory_modify_k_lin_subs+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f48e:	4a44      	ldr	r2, [pc, #272]	; (800f5a0 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	6013      	str	r3, [r2, #0]
}
 800f494:	e07a      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f496:	79bb      	ldrb	r3, [r7, #6]
 800f498:	2b04      	cmp	r3, #4
 800f49a:	d103      	bne.n	800f4a4 <fm_factory_modify_k_lin_subs+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f49c:	4a41      	ldr	r2, [pc, #260]	; (800f5a4 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	6013      	str	r3, [r2, #0]
}
 800f4a2:	e073      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f4a4:	79bb      	ldrb	r3, [r7, #6]
 800f4a6:	2b05      	cmp	r3, #5
 800f4a8:	d170      	bne.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f4aa:	4a3f      	ldr	r2, [pc, #252]	; (800f5a8 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	6013      	str	r3, [r2, #0]
}
 800f4b0:	e06c      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	2b07      	cmp	r3, #7
 800f4b6:	d969      	bls.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	f1c3 030e 	rsb	r3, r3, #14
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d017      	beq.n	800f4f2 <fm_factory_modify_k_lin_subs+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f4c2:	79fb      	ldrb	r3, [r7, #7]
 800f4c4:	f1c3 030e 	rsb	r3, r3, #14
 800f4c8:	4a38      	ldr	r2, [pc, #224]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4ca:	5cd3      	ldrb	r3, [r2, r3]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d009      	beq.n	800f4e4 <fm_factory_modify_k_lin_subs+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	f1c3 030e 	rsb	r3, r3, #14
 800f4d6:	4a35      	ldr	r2, [pc, #212]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4d8:	5cd2      	ldrb	r2, [r2, r3]
 800f4da:	3a01      	subs	r2, #1
 800f4dc:	b2d1      	uxtb	r1, r2
 800f4de:	4a33      	ldr	r2, [pc, #204]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4e0:	54d1      	strb	r1, [r2, r3]
 800f4e2:	e01d      	b.n	800f520 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	f1c3 030e 	rsb	r3, r3, #14
 800f4ea:	4a30      	ldr	r2, [pc, #192]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4ec:	2109      	movs	r1, #9
 800f4ee:	54d1      	strb	r1, [r2, r3]
 800f4f0:	e016      	b.n	800f520 <fm_factory_modify_k_lin_subs+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f4f2:	79fb      	ldrb	r3, [r7, #7]
 800f4f4:	f1c3 030e 	rsb	r3, r3, #14
 800f4f8:	4a2c      	ldr	r2, [pc, #176]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4fa:	5cd3      	ldrb	r3, [r2, r3]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d009      	beq.n	800f514 <fm_factory_modify_k_lin_subs+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	f1c3 030e 	rsb	r3, r3, #14
 800f506:	4a29      	ldr	r2, [pc, #164]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f508:	5cd2      	ldrb	r2, [r2, r3]
 800f50a:	3a01      	subs	r2, #1
 800f50c:	b2d1      	uxtb	r1, r2
 800f50e:	4a27      	ldr	r2, [pc, #156]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f510:	54d1      	strb	r1, [r2, r3]
 800f512:	e005      	b.n	800f520 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	f1c3 030e 	rsb	r3, r3, #14
 800f51a:	4a24      	ldr	r2, [pc, #144]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f51c:	2101      	movs	r1, #1
 800f51e:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f520:	2300      	movs	r3, #0
 800f522:	60bb      	str	r3, [r7, #8]
 800f524:	e00d      	b.n	800f542 <fm_factory_modify_k_lin_subs+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f526:	230a      	movs	r3, #10
 800f528:	461a      	mov	r2, r3
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f530:	491e      	ldr	r1, [pc, #120]	; (800f5ac <fm_factory_modify_k_lin_subs+0x1bc>)
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	440a      	add	r2, r1
 800f536:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f538:	4413      	add	r3, r2
 800f53a:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	3301      	adds	r3, #1
 800f540:	60bb      	str	r3, [r7, #8]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	2b06      	cmp	r3, #6
 800f546:	ddee      	ble.n	800f526 <fm_factory_modify_k_lin_subs+0x136>
        if (k_sel == K_LIN_1)
 800f548:	79bb      	ldrb	r3, [r7, #6]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d103      	bne.n	800f556 <fm_factory_modify_k_lin_subs+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f54e:	4a18      	ldr	r2, [pc, #96]	; (800f5b0 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	6013      	str	r3, [r2, #0]
}
 800f554:	e01a      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f556:	79bb      	ldrb	r3, [r7, #6]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d103      	bne.n	800f564 <fm_factory_modify_k_lin_subs+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f55c:	4a15      	ldr	r2, [pc, #84]	; (800f5b4 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	6013      	str	r3, [r2, #0]
}
 800f562:	e013      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f564:	79bb      	ldrb	r3, [r7, #6]
 800f566:	2b03      	cmp	r3, #3
 800f568:	d103      	bne.n	800f572 <fm_factory_modify_k_lin_subs+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f56a:	4a13      	ldr	r2, [pc, #76]	; (800f5b8 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	6013      	str	r3, [r2, #0]
}
 800f570:	e00c      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f572:	79bb      	ldrb	r3, [r7, #6]
 800f574:	2b04      	cmp	r3, #4
 800f576:	d103      	bne.n	800f580 <fm_factory_modify_k_lin_subs+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f578:	4a10      	ldr	r2, [pc, #64]	; (800f5bc <fm_factory_modify_k_lin_subs+0x1cc>)
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	6013      	str	r3, [r2, #0]
}
 800f57e:	e005      	b.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f580:	79bb      	ldrb	r3, [r7, #6]
 800f582:	2b05      	cmp	r3, #5
 800f584:	d102      	bne.n	800f58c <fm_factory_modify_k_lin_subs+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f586:	4a0e      	ldr	r2, [pc, #56]	; (800f5c0 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	6013      	str	r3, [r2, #0]
}
 800f58c:	bf00      	nop
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20001cdc 	.word	0x20001cdc
 800f598:	200000cc 	.word	0x200000cc
 800f59c:	200000d4 	.word	0x200000d4
 800f5a0:	200000dc 	.word	0x200000dc
 800f5a4:	200000e4 	.word	0x200000e4
 800f5a8:	200000ec 	.word	0x200000ec
 800f5ac:	20001ce4 	.word	0x20001ce4
 800f5b0:	200000a4 	.word	0x200000a4
 800f5b4:	200000ac 	.word	0x200000ac
 800f5b8:	200000b4 	.word	0x200000b4
 800f5bc:	200000bc 	.word	0x200000bc
 800f5c0:	200000c4 	.word	0x200000c4

0800f5c4 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	71fb      	strb	r3, [r7, #7]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	71bb      	strb	r3, [r7, #6]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f5d6:	4a07      	ldr	r2, [pc, #28]	; (800f5f4 <fm_factory_modify_res_acm_ttl+0x30>)
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f5dc:	4a06      	ldr	r2, [pc, #24]	; (800f5f8 <fm_factory_modify_res_acm_ttl+0x34>)
 800f5de:	79bb      	ldrb	r3, [r7, #6]
 800f5e0:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f5e2:	4a06      	ldr	r2, [pc, #24]	; (800f5fc <fm_factory_modify_res_acm_ttl+0x38>)
 800f5e4:	797b      	ldrb	r3, [r7, #5]
 800f5e6:	7313      	strb	r3, [r2, #12]
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	2000009c 	.word	0x2000009c
 800f5f8:	20000030 	.word	0x20000030
 800f5fc:	20000010 	.word	0x20000010

0800f600 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	4603      	mov	r3, r0
 800f608:	460a      	mov	r2, r1
 800f60a:	71fb      	strb	r3, [r7, #7]
 800f60c:	4613      	mov	r3, r2
 800f60e:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f610:	4a05      	ldr	r2, [pc, #20]	; (800f628 <fm_factory_modify_res_rate+0x28>)
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f616:	4a05      	ldr	r2, [pc, #20]	; (800f62c <fm_factory_modify_res_rate+0x2c>)
 800f618:	79bb      	ldrb	r3, [r7, #6]
 800f61a:	7313      	strb	r3, [r2, #12]
}
 800f61c:	bf00      	nop
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	20000094 	.word	0x20000094
 800f62c:	20000050 	.word	0x20000050

0800f630 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
    static const int hour_mult = 10000;
    static const int min_mult = 100;

    date_time_config.hour = mod_hour;
 800f63c:	4a0f      	ldr	r2, [pc, #60]	; (800f67c <fm_factory_modify_time+0x4c>)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f642:	4a0e      	ldr	r2, [pc, #56]	; (800f67c <fm_factory_modify_time+0x4c>)
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f648:	4a0c      	ldr	r2, [pc, #48]	; (800f67c <fm_factory_modify_time+0x4c>)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * hour_mult + mod_minute * min_mult + mod_second;
 800f64e:	4b0c      	ldr	r3, [pc, #48]	; (800f680 <fm_factory_modify_time+0x50>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	fb03 f202 	mul.w	r2, r3, r2
 800f658:	4b0a      	ldr	r3, [pc, #40]	; (800f684 <fm_factory_modify_time+0x54>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68b9      	ldr	r1, [r7, #8]
 800f65e:	fb01 f303 	mul.w	r3, r1, r3
 800f662:	441a      	add	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4413      	add	r3, r2
 800f668:	461a      	mov	r2, r3
 800f66a:	4b07      	ldr	r3, [pc, #28]	; (800f688 <fm_factory_modify_time+0x58>)
 800f66c:	601a      	str	r2, [r3, #0]
}
 800f66e:	bf00      	nop
 800f670:	3714      	adds	r7, #20
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	2000007c 	.word	0x2000007c
 800f680:	08015c28 	.word	0x08015c28
 800f684:	08015c2c 	.word	0x08015c2c
 800f688:	2000010c 	.word	0x2000010c

0800f68c <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	4603      	mov	r3, r0
 800f694:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f696:	4a07      	ldr	r2, [pc, #28]	; (800f6b4 <fm_factory_modify_time_units+0x28>)
 800f698:	79fb      	ldrb	r3, [r7, #7]
 800f69a:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f69c:	4a06      	ldr	r2, [pc, #24]	; (800f6b8 <fm_factory_modify_time_units+0x2c>)
 800f69e:	79fb      	ldrb	r3, [r7, #7]
 800f6a0:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f6a2:	4a06      	ldr	r2, [pc, #24]	; (800f6bc <fm_factory_modify_time_units+0x30>)
 800f6a4:	79fb      	ldrb	r3, [r7, #7]
 800f6a6:	7653      	strb	r3, [r2, #25]
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	20000030 	.word	0x20000030
 800f6b8:	20000010 	.word	0x20000010
 800f6bc:	20000050 	.word	0x20000050

0800f6c0 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f6ca:	4a07      	ldr	r2, [pc, #28]	; (800f6e8 <fm_factory_modify_volume_units+0x28>)
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f6d0:	4a06      	ldr	r2, [pc, #24]	; (800f6ec <fm_factory_modify_volume_units+0x2c>)
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f6d6:	4a06      	ldr	r2, [pc, #24]	; (800f6f0 <fm_factory_modify_volume_units+0x30>)
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	7613      	strb	r3, [r2, #24]
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	20000030 	.word	0x20000030
 800f6ec:	20000010 	.word	0x20000010
 800f6f0:	20000050 	.word	0x20000050

0800f6f4 <fm_factory_reset_acm>:
 * funcionalidad del botón ENTER en el menú de usuario ACM-RATE.
 * @param None
 * @retval None
 */
void fm_factory_reset_acm()
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f6f8:	4907      	ldr	r1, [pc, #28]	; (800f718 <fm_factory_reset_acm+0x24>)
 800f6fa:	f04f 0200 	mov.w	r2, #0
 800f6fe:	f04f 0300 	mov.w	r3, #0
 800f702:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f706:	4b04      	ldr	r3, [pc, #16]	; (800f718 <fm_factory_reset_acm+0x24>)
 800f708:	2200      	movs	r2, #0
 800f70a:	609a      	str	r2, [r3, #8]
}
 800f70c:	bf00      	nop
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	20000030 	.word	0x20000030

0800f71c <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f722:	2307      	movs	r3, #7
 800f724:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f726:	463b      	mov	r3, r7
 800f728:	2100      	movs	r1, #0
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff fbe6 	bl	800eefc <fm_factory_get_k_factor>
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f734:	e01f      	b.n	800f776 <fm_factory_separate_k_factor+0x5a>
    {
        if (k_num > 0)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d014      	beq.n	800f766 <fm_factory_separate_k_factor+0x4a>
        {
            k_array[i] = k_num % ten_multipllier;
 800f73c:	230a      	movs	r3, #10
 800f73e:	461a      	mov	r2, r3
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	fbb3 f1f2 	udiv	r1, r3, r2
 800f746:	fb01 f202 	mul.w	r2, r1, r2
 800f74a:	1a9b      	subs	r3, r3, r2
 800f74c:	b2d9      	uxtb	r1, r3
 800f74e:	4a0e      	ldr	r2, [pc, #56]	; (800f788 <fm_factory_separate_k_factor+0x6c>)
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4413      	add	r3, r2
 800f754:	460a      	mov	r2, r1
 800f756:	701a      	strb	r2, [r3, #0]
            k_num /= ten_multipllier;
 800f758:	230a      	movs	r3, #10
 800f75a:	461a      	mov	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	e004      	b.n	800f770 <fm_factory_separate_k_factor+0x54>
        }
        else
        {
            k_array[i] = 0;
 800f766:	4a08      	ldr	r2, [pc, #32]	; (800f788 <fm_factory_separate_k_factor+0x6c>)
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4413      	add	r3, r2
 800f76c:	2200      	movs	r2, #0
 800f76e:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	3b01      	subs	r3, #1
 800f774:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	dadc      	bge.n	800f736 <fm_factory_separate_k_factor+0x1a>
    }
}
 800f77c:	bf00      	nop
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20001cd4 	.word	0x20001cd4

0800f78c <fm_factory_separate_k_lin_and_frec>:
 * y los guarda en un arreglo global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08a      	sub	sp, #40	; 0x28
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f796:	2307      	movs	r3, #7
 800f798:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f79a:	2306      	movs	r3, #6
 800f79c:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f79e:	f107 0308 	add.w	r3, r7, #8
 800f7a2:	79fa      	ldrb	r2, [r7, #7]
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7ff fba8 	bl	800eefc <fm_factory_get_k_factor>
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f7b0:	f107 0310 	add.w	r3, r7, #16
 800f7b4:	79fa      	ldrb	r2, [r7, #7]
 800f7b6:	4611      	mov	r1, r2
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7ff fb4f 	bl	800ee5c <fm_factory_get_frec_lin>
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f7c2:	e01f      	b.n	800f804 <fm_factory_separate_k_lin_and_frec+0x78>
    {
        if (k_lin_num > 0)
 800f7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d014      	beq.n	800f7f4 <fm_factory_separate_k_lin_and_frec+0x68>
        {
            k_lin_array[i] = k_lin_num % ten_multipllier;
 800f7ca:	230a      	movs	r3, #10
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7d4:	fb01 f202 	mul.w	r2, r1, r2
 800f7d8:	1a9b      	subs	r3, r3, r2
 800f7da:	b2d9      	uxtb	r1, r3
 800f7dc:	4a1f      	ldr	r2, [pc, #124]	; (800f85c <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	460a      	mov	r2, r1
 800f7e4:	701a      	strb	r2, [r3, #0]
            k_lin_num /= ten_multipllier;
 800f7e6:	230a      	movs	r3, #10
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f7f2:	e004      	b.n	800f7fe <fm_factory_separate_k_lin_and_frec+0x72>
        }
        else
        {
            k_lin_array[i] = 0;
 800f7f4:	4a19      	ldr	r2, [pc, #100]	; (800f85c <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	3b01      	subs	r3, #1
 800f802:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	2b00      	cmp	r3, #0
 800f808:	dadc      	bge.n	800f7c4 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f80a:	e01f      	b.n	800f84c <fm_factory_separate_k_lin_and_frec+0xc0>
    {
        if (frec_num > 0)
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d014      	beq.n	800f83c <fm_factory_separate_k_lin_and_frec+0xb0>
        {
            frec_array[j] = frec_num % ten_multipllier;
 800f812:	230a      	movs	r3, #10
 800f814:	461a      	mov	r2, r3
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	fbb3 f1f2 	udiv	r1, r3, r2
 800f81c:	fb01 f202 	mul.w	r2, r1, r2
 800f820:	1a9b      	subs	r3, r3, r2
 800f822:	b2d9      	uxtb	r1, r3
 800f824:	4a0e      	ldr	r2, [pc, #56]	; (800f860 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	4413      	add	r3, r2
 800f82a:	460a      	mov	r2, r1
 800f82c:	701a      	strb	r2, [r3, #0]
            frec_num /= ten_multipllier;
 800f82e:	230a      	movs	r3, #10
 800f830:	461a      	mov	r2, r3
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	fbb3 f3f2 	udiv	r3, r3, r2
 800f838:	623b      	str	r3, [r7, #32]
 800f83a:	e004      	b.n	800f846 <fm_factory_separate_k_lin_and_frec+0xba>
        }
        else
        {
            frec_array[j] = 0;
 800f83c:	4a08      	ldr	r2, [pc, #32]	; (800f860 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	4413      	add	r3, r2
 800f842:	2200      	movs	r2, #0
 800f844:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	3b01      	subs	r3, #1
 800f84a:	61bb      	str	r3, [r7, #24]
    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	dadc      	bge.n	800f80c <fm_factory_separate_k_lin_and_frec+0x80>
    }
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	3728      	adds	r7, #40	; 0x28
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20001cdc 	.word	0x20001cdc
 800f860:	20001ce4 	.word	0x20001ce4

0800f864 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f86e:	2015      	movs	r0, #21
 800f870:	f7f4 fba4 	bl	8003fbc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f874:	2016      	movs	r0, #22
 800f876:	f7f4 fba1 	bl	8003fbc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f87a:	2017      	movs	r0, #23
 800f87c:	f7f4 fb9e 	bl	8003fbc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f880:	2018      	movs	r0, #24
 800f882:	f7f4 fb9b 	bl	8003fbc <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f88c:	d018      	beq.n	800f8c0 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f88e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f892:	dc18      	bgt.n	800f8c6 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f898:	d00f      	beq.n	800f8ba <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f89e:	dc12      	bgt.n	800f8c6 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f8a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8a4:	d003      	beq.n	800f8ae <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f8a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8aa:	d003      	beq.n	800f8b4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f8ac:	e00b      	b.n	800f8c6 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	73fb      	strb	r3, [r7, #15]
        break;
 800f8b2:	e009      	b.n	800f8c8 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f8b4:	2303      	movs	r3, #3
 800f8b6:	73fb      	strb	r3, [r7, #15]
        break;
 800f8b8:	e006      	b.n	800f8c8 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f8ba:	2304      	movs	r3, #4
 800f8bc:	73fb      	strb	r3, [r7, #15]
        break;
 800f8be:	e003      	b.n	800f8c8 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f8c0:	2305      	movs	r3, #5
 800f8c2:	73fb      	strb	r3, [r7, #15]
        break;
 800f8c4:	e000      	b.n	800f8c8 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f8c6:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f8c8:	f107 030f 	add.w	r3, r7, #15
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4805      	ldr	r0, [pc, #20]	; (800f8e8 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f8d2:	f7fe fdff 	bl	800e4d4 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	4804      	ldr	r0, [pc, #16]	; (800f8ec <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f8da:	f7fe fe45 	bl	800e568 <_txe_semaphore_ceiling_put>
}
 800f8de:	bf00      	nop
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	20001388 	.word	0x20001388
 800f8ec:	2000136c 	.word	0x2000136c

0800f8f0 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b0b8      	sub	sp, #224	; 0xe0
 800f8f4:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f8f6:	f107 0318 	add.w	r3, r7, #24
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f005 f90e 	bl	8014b1c <fmc_get_acm>
 800f900:	2314      	movs	r3, #20
 800f902:	9301      	str	r3, [sp, #4]
 800f904:	1d3b      	adds	r3, r7, #4
 800f906:	9300      	str	r3, [sp, #0]
 800f908:	2309      	movs	r3, #9
 800f90a:	2220      	movs	r2, #32
 800f90c:	f107 0120 	add.w	r1, r7, #32
 800f910:	c903      	ldmia	r1, {r0, r1}
 800f912:	f000 fa13 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f91a:	4618      	mov	r0, r3
 800f91c:	f005 f8fe 	bl	8014b1c <fmc_get_acm>
 800f920:	1d3a      	adds	r2, r7, #4
 800f922:	2314      	movs	r3, #20
 800f924:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f928:	c903      	ldmia	r1, {r0, r1}
 800f92a:	f000 f9c3 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f92e:	1d3b      	adds	r3, r7, #4
 800f930:	2100      	movs	r1, #0
 800f932:	4618      	mov	r0, r3
 800f934:	f000 fbea 	bl	801010c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f938:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f93c:	4618      	mov	r0, r3
 800f93e:	f005 f92d 	bl	8014b9c <fmc_get_rate>
 800f942:	2314      	movs	r3, #20
 800f944:	9301      	str	r3, [sp, #4]
 800f946:	1d3b      	adds	r3, r7, #4
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	2308      	movs	r3, #8
 800f94c:	2220      	movs	r2, #32
 800f94e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f952:	c903      	ldmia	r1, {r0, r1}
 800f954:	f000 f9f2 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f958:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f95c:	4618      	mov	r0, r3
 800f95e:	f005 f91d 	bl	8014b9c <fmc_get_rate>
 800f962:	1d3a      	adds	r2, r7, #4
 800f964:	2314      	movs	r3, #20
 800f966:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f96a:	c903      	ldmia	r1, {r0, r1}
 800f96c:	f000 f9a2 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f970:	1d3b      	adds	r3, r7, #4
 800f972:	2101      	movs	r1, #1
 800f974:	4618      	mov	r0, r3
 800f976:	f000 fbc9 	bl	801010c <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f97a:	2100      	movs	r1, #0
 800f97c:	2006      	movs	r0, #6
 800f97e:	f001 ff2b 	bl	80117d8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f982:	2100      	movs	r1, #0
 800f984:	2002      	movs	r0, #2
 800f986:	f001 ff27 	bl	80117d8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f98a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f98e:	4618      	mov	r0, r3
 800f990:	f005 f8c4 	bl	8014b1c <fmc_get_acm>
 800f994:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f998:	2100      	movs	r1, #0
 800f99a:	4618      	mov	r0, r3
 800f99c:	f002 fadc 	bl	8011f58 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	2007      	movs	r0, #7
 800f9a4:	f001 ff18 	bl	80117d8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f9a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f005 f8b5 	bl	8014b1c <fmc_get_acm>
 800f9b2:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f002 fa8b 	bl	8011ed4 <lcd_set_time_unit>
}
 800f9be:	bf00      	nop
 800f9c0:	37d8      	adds	r7, #216	; 0xd8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b0a2      	sub	sp, #136	; 0x88
 800f9ca:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f9cc:	f107 0318 	add.w	r3, r7, #24
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f005 f8a3 	bl	8014b1c <fmc_get_acm>
 800f9d6:	2314      	movs	r3, #20
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	1d3b      	adds	r3, r7, #4
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	2309      	movs	r3, #9
 800f9e0:	2220      	movs	r2, #32
 800f9e2:	f107 0120 	add.w	r1, r7, #32
 800f9e6:	c903      	ldmia	r1, {r0, r1}
 800f9e8:	f000 f9a8 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f9ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f005 f893 	bl	8014b1c <fmc_get_acm>
 800f9f6:	1d3a      	adds	r2, r7, #4
 800f9f8:	2314      	movs	r3, #20
 800f9fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f9fe:	c903      	ldmia	r1, {r0, r1}
 800fa00:	f000 f958 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fa04:	1d3b      	adds	r3, r7, #4
 800fa06:	2100      	movs	r1, #0
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 fb7f 	bl	801010c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800fa0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fa12:	4618      	mov	r0, r3
 800fa14:	f005 f902 	bl	8014c1c <fmc_get_stm32_temp>
 800fa18:	2314      	movs	r3, #20
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	1d3b      	adds	r3, r7, #4
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	2308      	movs	r3, #8
 800fa22:	2220      	movs	r2, #32
 800fa24:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fa28:	c903      	ldmia	r1, {r0, r1}
 800fa2a:	f000 f987 	bl	800fd3c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800fa2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fa32:	4618      	mov	r0, r3
 800fa34:	f005 f8f2 	bl	8014c1c <fmc_get_stm32_temp>
 800fa38:	1d3a      	adds	r2, r7, #4
 800fa3a:	2314      	movs	r3, #20
 800fa3c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800fa40:	c903      	ldmia	r1, {r0, r1}
 800fa42:	f000 f937 	bl	800fcb4 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fa46:	1d3b      	adds	r3, r7, #4
 800fa48:	2101      	movs	r1, #1
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fb5e 	bl	801010c <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fa50:	2100      	movs	r1, #0
 800fa52:	2006      	movs	r0, #6
 800fa54:	f001 fec0 	bl	80117d8 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800fa58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f005 f8dd 	bl	8014c1c <fmc_get_stm32_temp>
 800fa62:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fa66:	2100      	movs	r1, #0
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f002 fa75 	bl	8011f58 <lcd_set_vol_unit>
}
 800fa6e:	bf00      	nop
 800fa70:	3780      	adds	r7, #128	; 0x80
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fa7a:	f000 fd5f 	bl	801053c <lcd_clear_all>
}
 800fa7e:	bf00      	nop
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <fm_lcd_date_hour>:
 * @param Campo seleccionado el cual debe titilar.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b090      	sub	sp, #64	; 0x40
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]
 800fa8e:	460b      	mov	r3, r1
 800fa90:	73bb      	strb	r3, [r7, #14]
 800fa92:	4613      	mov	r3, r2
 800fa94:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if (configuration)
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00a      	beq.n	800fab2 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fa9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff f9a5 	bl	800edf0 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800faa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff f9c4 	bl	800ee38 <fm_factory_get_fp_time_conf>
 800fab0:	e019      	b.n	800fae6 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fab2:	f7ff f8a7 	bl	800ec04 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fab6:	f7ff f8cb 	bl	800ec50 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800faba:	463b      	mov	r3, r7
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7ff f985 	bl	800edcc <fm_factory_get_fp_date>
 800fac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fac6:	463a      	mov	r2, r7
 800fac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800facc:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fad0:	463b      	mov	r3, r7
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff f99e 	bl	800ee14 <fm_factory_get_fp_time>
 800fad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fadc:	463a      	mov	r2, r7
 800fade:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fae2:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fae6:	2314      	movs	r3, #20
 800fae8:	9301      	str	r3, [sp, #4]
 800faea:	f107 0314 	add.w	r3, r7, #20
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	2309      	movs	r3, #9
 800faf2:	2230      	movs	r2, #48	; 0x30
 800faf4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800faf8:	c903      	ldmia	r1, {r0, r1}
 800fafa:	f000 f91f 	bl	800fd3c <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	2100      	movs	r1, #0
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 fb01 	bl	801010c <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fb0a:	2101      	movs	r1, #1
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	f001 fdb7 	bl	8011680 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fb12:	2103      	movs	r1, #3
 800fb14:	2000      	movs	r0, #0
 800fb16:	f001 fdb3 	bl	8011680 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fb1a:	2314      	movs	r3, #20
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	f107 0314 	add.w	r3, r7, #20
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	2308      	movs	r3, #8
 800fb26:	2230      	movs	r2, #48	; 0x30
 800fb28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fb2c:	c903      	ldmia	r1, {r0, r1}
 800fb2e:	f000 f905 	bl	800fd3c <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fb32:	f107 0314 	add.w	r3, r7, #20
 800fb36:	2101      	movs	r1, #1
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f000 fae7 	bl	801010c <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fb3e:	2101      	movs	r1, #1
 800fb40:	2000      	movs	r0, #0
 800fb42:	f000 fd23 	bl	801058c <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fb46:	2102      	movs	r1, #2
 800fb48:	2001      	movs	r0, #1
 800fb4a:	f001 fd99 	bl	8011680 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800fb4e:	2104      	movs	r1, #4
 800fb50:	2001      	movs	r0, #1
 800fb52:	f001 fd95 	bl	8011680 <lcd_set_point>

    if (configuration)
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d07e      	beq.n	800fc5a <fm_lcd_date_hour+0x1d6>
    {
        if (event_id == EVENT_KEY_ENTER
 800fb5c:	7bbb      	ldrb	r3, [r7, #14]
 800fb5e:	2b04      	cmp	r3, #4
 800fb60:	d006      	beq.n	800fb70 <fm_lcd_date_hour+0xec>
        || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fb62:	4b40      	ldr	r3, [pc, #256]	; (800fc64 <fm_lcd_date_hour+0x1e0>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	2b04      	cmp	r3, #4
 800fb68:	d106      	bne.n	800fb78 <fm_lcd_date_hour+0xf4>
 800fb6a:	7bbb      	ldrb	r3, [r7, #14]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d103      	bne.n	800fb78 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800fb70:	4b3d      	ldr	r3, [pc, #244]	; (800fc68 <fm_lcd_date_hour+0x1e4>)
 800fb72:	2201      	movs	r2, #1
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	e016      	b.n	800fba6 <fm_lcd_date_hour+0x122>
        }
        else if (event_id == EVENT_KEY_DOWN
 800fb78:	7bbb      	ldrb	r3, [r7, #14]
 800fb7a:	2b03      	cmp	r3, #3
 800fb7c:	d010      	beq.n	800fba0 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fb7e:	4b39      	ldr	r3, [pc, #228]	; (800fc64 <fm_lcd_date_hour+0x1e0>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b03      	cmp	r3, #3
 800fb84:	d102      	bne.n	800fb8c <fm_lcd_date_hour+0x108>
 800fb86:	7bbb      	ldrb	r3, [r7, #14]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d009      	beq.n	800fba0 <fm_lcd_date_hour+0x11c>
        || event_id == EVENT_KEY_UP
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d006      	beq.n	800fba0 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fb92:	4b34      	ldr	r3, [pc, #208]	; (800fc64 <fm_lcd_date_hour+0x1e0>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d105      	bne.n	800fba6 <fm_lcd_date_hour+0x122>
 800fb9a:	7bbb      	ldrb	r3, [r7, #14]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d102      	bne.n	800fba6 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fba0:	4b31      	ldr	r3, [pc, #196]	; (800fc68 <fm_lcd_date_hour+0x1e4>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]
        }

        if (blink == 1)
 800fba6:	4b30      	ldr	r3, [pc, #192]	; (800fc68 <fm_lcd_date_hour+0x1e4>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d152      	bne.n	800fc54 <fm_lcd_date_hour+0x1d0>
        {
            if (field == DAY)
 800fbae:	7b7b      	ldrb	r3, [r7, #13]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d108      	bne.n	800fbc6 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	f000 fce8 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	f000 fce4 	bl	801058c <lcd_clear_digit>
 800fbc4:	e042      	b.n	800fc4c <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MONTH)
 800fbc6:	7b7b      	ldrb	r3, [r7, #13]
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d108      	bne.n	800fbde <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fbcc:	2100      	movs	r1, #0
 800fbce:	2003      	movs	r0, #3
 800fbd0:	f000 fcdc 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	2002      	movs	r0, #2
 800fbd8:	f000 fcd8 	bl	801058c <lcd_clear_digit>
 800fbdc:	e036      	b.n	800fc4c <fm_lcd_date_hour+0x1c8>
            }
            else if (field == YEAR)
 800fbde:	7b7b      	ldrb	r3, [r7, #13]
 800fbe0:	2b02      	cmp	r3, #2
 800fbe2:	d110      	bne.n	800fc06 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	2007      	movs	r0, #7
 800fbe8:	f000 fcd0 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fbec:	2100      	movs	r1, #0
 800fbee:	2006      	movs	r0, #6
 800fbf0:	f000 fccc 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	2005      	movs	r0, #5
 800fbf8:	f000 fcc8 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	2004      	movs	r0, #4
 800fc00:	f000 fcc4 	bl	801058c <lcd_clear_digit>
 800fc04:	e022      	b.n	800fc4c <fm_lcd_date_hour+0x1c8>
            }
            else if (field == HOUR)
 800fc06:	7b7b      	ldrb	r3, [r7, #13]
 800fc08:	2b03      	cmp	r3, #3
 800fc0a:	d108      	bne.n	800fc1e <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	2002      	movs	r0, #2
 800fc10:	f000 fcbc 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fc14:	2101      	movs	r1, #1
 800fc16:	2001      	movs	r0, #1
 800fc18:	f000 fcb8 	bl	801058c <lcd_clear_digit>
 800fc1c:	e016      	b.n	800fc4c <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MINUTE)
 800fc1e:	7b7b      	ldrb	r3, [r7, #13]
 800fc20:	2b04      	cmp	r3, #4
 800fc22:	d108      	bne.n	800fc36 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fc24:	2101      	movs	r1, #1
 800fc26:	2004      	movs	r0, #4
 800fc28:	f000 fcb0 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	2003      	movs	r0, #3
 800fc30:	f000 fcac 	bl	801058c <lcd_clear_digit>
 800fc34:	e00a      	b.n	800fc4c <fm_lcd_date_hour+0x1c8>
            }
            else if (field == SECOND)
 800fc36:	7b7b      	ldrb	r3, [r7, #13]
 800fc38:	2b05      	cmp	r3, #5
 800fc3a:	d107      	bne.n	800fc4c <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	2006      	movs	r0, #6
 800fc40:	f000 fca4 	bl	801058c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fc44:	2101      	movs	r1, #1
 800fc46:	2005      	movs	r0, #5
 800fc48:	f000 fca0 	bl	801058c <lcd_clear_digit>
            }

            blink = 0;
 800fc4c:	4b06      	ldr	r3, [pc, #24]	; (800fc68 <fm_lcd_date_hour+0x1e4>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800fc52:	e002      	b.n	800fc5a <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800fc54:	4b04      	ldr	r3, [pc, #16]	; (800fc68 <fm_lcd_date_hour+0x1e4>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	601a      	str	r2, [r3, #0]
}
 800fc5a:	bf00      	nop
 800fc5c:	3738      	adds	r7, #56	; 0x38
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20001dbb 	.word	0x20001dbb
 800fc68:	2000011c 	.word	0x2000011c

0800fc6c <fm_lcd_format_number_in_line>:
 * @param Longitud de este String.
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
 800fc76:	603b      	str	r3, [r7, #0]
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	4a09      	ldr	r2, [pc, #36]	; (800fcac <fm_lcd_format_number_in_line+0x40>)
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f005 f8c1 	bl	8014e10 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fc8e:	e008      	b.n	800fca2 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fc90:	7bfb      	ldrb	r3, [r7, #15]
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d105      	bne.n	800fca2 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	4a05      	ldr	r2, [pc, #20]	; (800fcb0 <fm_lcd_format_number_in_line+0x44>)
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f005 f8b7 	bl	8014e10 <sniprintf>
}
 800fca2:	bf00      	nop
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	08015928 	.word	0x08015928
 800fcb0:	08015930 	.word	0x08015930

0800fcb4 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	f107 0408 	add.w	r4, r7, #8
 800fcbe:	e884 0003 	stmia.w	r4, {r0, r1}
 800fcc2:	607a      	str	r2, [r7, #4]
 800fcc4:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fcc6:	7b3b      	ldrb	r3, [r7, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d101      	bne.n	800fcd0 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fccc:	2300      	movs	r3, #0
 800fcce:	e031      	b.n	800fd34 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7f0 fbf7 	bl	80004c4 <strlen>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	3302      	adds	r3, #2
 800fcde:	683a      	ldr	r2, [r7, #0]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	dc02      	bgt.n	800fcea <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fce4:	f04f 33ff 	mov.w	r3, #4294967295
 800fce8:	e024      	b.n	800fd34 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fcea:	7b3b      	ldrb	r3, [r7, #12]
 800fcec:	461a      	mov	r2, r3
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	1a9b      	subs	r3, r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fcf4:	e00b      	b.n	800fd0e <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	441a      	add	r2, r3
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	6879      	ldr	r1, [r7, #4]
 800fd02:	440b      	add	r3, r1
 800fd04:	7812      	ldrb	r2, [r2, #0]
 800fd06:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	3b01      	subs	r3, #1
 800fd0c:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d1ef      	bne.n	800fcf6 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	441a      	add	r2, r3
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	440b      	add	r3, r1
 800fd24:	7812      	ldrb	r2, [r2, #0]
 800fd26:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	222e      	movs	r2, #46	; 0x2e
 800fd30:	701a      	strb	r2, [r3, #0]

    return (0);
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	371c      	adds	r7, #28
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd90      	pop	{r4, r7, pc}

0800fd3c <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fd3c:	b490      	push	{r4, r7}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	f107 0408 	add.w	r4, r7, #8
 800fd46:	e884 0003 	stmia.w	r4, {r0, r1}
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd56:	2b13      	cmp	r3, #19
 800fd58:	dc02      	bgt.n	800fd60 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd5e:	e07d      	b.n	800fe5c <fm_lcd_fp_to_str+0x120>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	220a      	movs	r2, #10
 800fd64:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd68:	fb01 f202 	mul.w	r2, r1, r2
 800fd6c:	1a9b      	subs	r3, r3, r2
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd74:	440b      	add	r3, r1
 800fd76:	3230      	adds	r2, #48	; 0x30
 800fd78:	b2d2      	uxtb	r2, r2
 800fd7a:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / ten_multiplier)
 800fd80:	e015      	b.n	800fdae <fm_lcd_fp_to_str+0x72>
    {
        idx_1++;
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	3301      	adds	r3, #1
 800fd86:	61fb      	str	r3, [r7, #28]
        fp.num /= ten_multiplier;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	220a      	movs	r2, #10
 800fd8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd90:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	220a      	movs	r2, #10
 800fd96:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd9a:	fb01 f202 	mul.w	r2, r1, r2
 800fd9e:	1a9b      	subs	r3, r3, r2
 800fda0:	b2da      	uxtb	r2, r3
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fda6:	440b      	add	r3, r1
 800fda8:	3230      	adds	r2, #48	; 0x30
 800fdaa:	b2d2      	uxtb	r2, r2
 800fdac:	701a      	strb	r2, [r3, #0]
    while (fp.num / ten_multiplier)
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	220a      	movs	r2, #10
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d2e5      	bcs.n	800fd82 <fm_lcd_fp_to_str+0x46>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d116      	bne.n	800fdea <fm_lcd_fp_to_str+0xae>
    {
        while (idx_1 < fp.res)
 800fdbc:	e010      	b.n	800fde0 <fm_lcd_fp_to_str+0xa4>
        {
            idx_1++;
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	220a      	movs	r2, #10
 800fdc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdcc:	fb01 f202 	mul.w	r2, r1, r2
 800fdd0:	1a9b      	subs	r3, r3, r2
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdd8:	440b      	add	r3, r1
 800fdda:	3230      	adds	r2, #48	; 0x30
 800fddc:	b2d2      	uxtb	r2, r2
 800fdde:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fde0:	7b3b      	ldrb	r3, [r7, #12]
 800fde2:	461a      	mov	r2, r3
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	4293      	cmp	r3, r2
 800fde8:	dbe9      	blt.n	800fdbe <fm_lcd_fp_to_str+0x82>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d00d      	beq.n	800fe0c <fm_lcd_fp_to_str+0xd0>
    {
        while (idx_1 < str_width - 1)
 800fdf0:	e007      	b.n	800fe02 <fm_lcd_fp_to_str+0xc6>
        {
            idx_1++;
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdfc:	4413      	add	r3, r2
 800fdfe:	79fa      	ldrb	r2, [r7, #7]
 800fe00:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	69fa      	ldr	r2, [r7, #28]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	dbf2      	blt.n	800fdf2 <fm_lcd_fp_to_str+0xb6>
        }
    }
    p_str[idx_1] = '\0';
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe10:	4413      	add	r3, r2
 800fe12:	2200      	movs	r2, #0
 800fe14:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fe16:	69fb      	ldr	r3, [r7, #28]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fe20:	e017      	b.n	800fe52 <fm_lcd_fp_to_str+0x116>
    {
        ch_temp = p_str[idx_1];
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe26:	4413      	add	r3, r2
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe30:	441a      	add	r2, r3
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe36:	440b      	add	r3, r1
 800fe38:	7812      	ldrb	r2, [r2, #0]
 800fe3a:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe40:	4413      	add	r3, r2
 800fe42:	7cfa      	ldrb	r2, [r7, #19]
 800fe44:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	dce3      	bgt.n	800fe22 <fm_lcd_fp_to_str+0xe6>
    }

    return (0);
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3720      	adds	r7, #32
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bc90      	pop	{r4, r7}
 800fe64:	4770      	bx	lr

0800fe66 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fe6a:	f000 fb67 	bl	801053c <lcd_clear_all>
    lcd_init();
 800fe6e:	f001 f9fd 	bl	801126c <lcd_init>
}
 800fe72:	bf00      	nop
 800fe74:	bd80      	pop	{r7, pc}
	...

0800fe78 <fm_lcd_k_factor>:
 * @param Evento actual con el que se imprime esta pantalla.
 * @param Dígito a modificar el cual debe titilar.
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08e      	sub	sp, #56	; 0x38
 800fe7c:	af02      	add	r7, sp, #8
 800fe7e:	4603      	mov	r3, r0
 800fe80:	460a      	mov	r2, r1
 800fe82:	71fb      	strb	r3, [r7, #7]
 800fe84:	4613      	mov	r3, r2
 800fe86:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fe88:	f107 0320 	add.w	r3, r7, #32
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7ff f834 	bl	800eefc <fm_factory_get_k_factor>
 800fe94:	2314      	movs	r3, #20
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	f107 030c 	add.w	r3, r7, #12
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	2309      	movs	r3, #9
 800fea0:	2230      	movs	r2, #48	; 0x30
 800fea2:	f107 0120 	add.w	r1, r7, #32
 800fea6:	c903      	ldmia	r1, {r0, r1}
 800fea8:	f7ff ff48 	bl	800fd3c <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800feac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feb0:	2100      	movs	r1, #0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff f822 	bl	800eefc <fm_factory_get_k_factor>
 800feb8:	f107 020c 	add.w	r2, r7, #12
 800febc:	2314      	movs	r3, #20
 800febe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fec2:	c903      	ldmia	r1, {r0, r1}
 800fec4:	f7ff fef6 	bl	800fcb4 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fec8:	f107 030c 	add.w	r3, r7, #12
 800fecc:	2100      	movs	r1, #0
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 f91c 	bl	801010c <fm_lcd_puts>

    if (event_id == EVENT_KEY_ENTER
 800fed4:	79fb      	ldrb	r3, [r7, #7]
 800fed6:	2b04      	cmp	r3, #4
 800fed8:	d006      	beq.n	800fee8 <fm_lcd_k_factor+0x70>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800feda:	4b1e      	ldr	r3, [pc, #120]	; (800ff54 <fm_lcd_k_factor+0xdc>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b04      	cmp	r3, #4
 800fee0:	d106      	bne.n	800fef0 <fm_lcd_k_factor+0x78>
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d103      	bne.n	800fef0 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fee8:	4b1b      	ldr	r3, [pc, #108]	; (800ff58 <fm_lcd_k_factor+0xe0>)
 800feea:	2201      	movs	r2, #1
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e016      	b.n	800ff1e <fm_lcd_k_factor+0xa6>
    }
    else if (event_id == EVENT_KEY_DOWN
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d010      	beq.n	800ff18 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fef6:	4b17      	ldr	r3, [pc, #92]	; (800ff54 <fm_lcd_k_factor+0xdc>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	2b03      	cmp	r3, #3
 800fefc:	d102      	bne.n	800ff04 <fm_lcd_k_factor+0x8c>
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d009      	beq.n	800ff18 <fm_lcd_k_factor+0xa0>
    || event_id == EVENT_KEY_UP
 800ff04:	79fb      	ldrb	r3, [r7, #7]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	d006      	beq.n	800ff18 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800ff0a:	4b12      	ldr	r3, [pc, #72]	; (800ff54 <fm_lcd_k_factor+0xdc>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b02      	cmp	r3, #2
 800ff10:	d105      	bne.n	800ff1e <fm_lcd_k_factor+0xa6>
 800ff12:	79fb      	ldrb	r3, [r7, #7]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d102      	bne.n	800ff1e <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800ff18:	4b0f      	ldr	r3, [pc, #60]	; (800ff58 <fm_lcd_k_factor+0xe0>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 800ff1e:	4b0e      	ldr	r3, [pc, #56]	; (800ff58 <fm_lcd_k_factor+0xe0>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d10b      	bne.n	800ff3e <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800ff26:	79bb      	ldrb	r3, [r7, #6]
 800ff28:	f1c3 0307 	rsb	r3, r3, #7
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2100      	movs	r1, #0
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 fb2b 	bl	801058c <lcd_clear_digit>
        blink = 0;
 800ff36:	4b08      	ldr	r3, [pc, #32]	; (800ff58 <fm_lcd_k_factor+0xe0>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]
 800ff3c:	e002      	b.n	800ff44 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800ff3e:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <fm_lcd_k_factor+0xe0>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800ff44:	2100      	movs	r1, #0
 800ff46:	200b      	movs	r0, #11
 800ff48:	f001 fc46 	bl	80117d8 <lcd_set_symbol>
}
 800ff4c:	bf00      	nop
 800ff4e:	3730      	adds	r7, #48	; 0x30
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20001dbb 	.word	0x20001dbb
 800ff58:	2000011c 	.word	0x2000011c

0800ff5c <fm_lcd_k_lin>:
 * @param Evento actual con el que se imprimió esta pantalla.
 * @param Digito a modificar, el cual debe parpadear.
 */
void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id,
sel_digit_k_lin_t digit_lin_modify)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b090      	sub	sp, #64	; 0x40
 800ff60:	af02      	add	r7, sp, #8
 800ff62:	4603      	mov	r3, r0
 800ff64:	71fb      	strb	r3, [r7, #7]
 800ff66:	460b      	mov	r3, r1
 800ff68:	71bb      	strb	r3, [r7, #6]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800ff6e:	f107 0320 	add.w	r3, r7, #32
 800ff72:	79fa      	ldrb	r2, [r7, #7]
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe ffc0 	bl	800eefc <fm_factory_get_k_factor>
 800ff7c:	2314      	movs	r3, #20
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	f107 030c 	add.w	r3, r7, #12
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	2309      	movs	r3, #9
 800ff88:	2230      	movs	r2, #48	; 0x30
 800ff8a:	f107 0120 	add.w	r1, r7, #32
 800ff8e:	c903      	ldmia	r1, {r0, r1}
 800ff90:	f7ff fed4 	bl	800fd3c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg, sizeof(lcd_msg));
 800ff94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff98:	79fa      	ldrb	r2, [r7, #7]
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fe ffad 	bl	800eefc <fm_factory_get_k_factor>
 800ffa2:	f107 020c 	add.w	r2, r7, #12
 800ffa6:	2314      	movs	r3, #20
 800ffa8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ffac:	c903      	ldmia	r1, {r0, r1}
 800ffae:	f7ff fe81 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ffb2:	f107 030c 	add.w	r3, r7, #12
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 f8a7 	bl	801010c <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800ffbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ffc2:	79fa      	ldrb	r2, [r7, #7]
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fe ff48 	bl	800ee5c <fm_factory_get_frec_lin>
 800ffcc:	2314      	movs	r3, #20
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	f107 030c 	add.w	r3, r7, #12
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	2308      	movs	r3, #8
 800ffd8:	2230      	movs	r2, #48	; 0x30
 800ffda:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ffde:	c903      	ldmia	r1, {r0, r1}
 800ffe0:	f7ff feac 	bl	800fd3c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ffe4:	f107 030c 	add.w	r3, r7, #12
 800ffe8:	2101      	movs	r1, #1
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 f88e 	bl	801010c <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fff0:	2101      	movs	r1, #1
 800fff2:	2000      	movs	r0, #0
 800fff4:	f000 faca 	bl	801058c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fff8:	2101      	movs	r1, #1
 800fffa:	2001      	movs	r0, #1
 800fffc:	f000 fac6 	bl	801058c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 8010000:	2101      	movs	r1, #1
 8010002:	2002      	movs	r0, #2
 8010004:	f000 fac2 	bl	801058c <lcd_clear_digit>

    if (event_id == EVENT_KEY_ENTER
 8010008:	79bb      	ldrb	r3, [r7, #6]
 801000a:	2b04      	cmp	r3, #4
 801000c:	d006      	beq.n	801001c <fm_lcd_k_lin+0xc0>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 801000e:	4b3d      	ldr	r3, [pc, #244]	; (8010104 <fm_lcd_k_lin+0x1a8>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b04      	cmp	r3, #4
 8010014:	d106      	bne.n	8010024 <fm_lcd_k_lin+0xc8>
 8010016:	79bb      	ldrb	r3, [r7, #6]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d103      	bne.n	8010024 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 801001c:	4b3a      	ldr	r3, [pc, #232]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 801001e:	2201      	movs	r2, #1
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	e016      	b.n	8010052 <fm_lcd_k_lin+0xf6>
    }
    else if (event_id == EVENT_KEY_DOWN
 8010024:	79bb      	ldrb	r3, [r7, #6]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d010      	beq.n	801004c <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 801002a:	4b36      	ldr	r3, [pc, #216]	; (8010104 <fm_lcd_k_lin+0x1a8>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	2b03      	cmp	r3, #3
 8010030:	d102      	bne.n	8010038 <fm_lcd_k_lin+0xdc>
 8010032:	79bb      	ldrb	r3, [r7, #6]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d009      	beq.n	801004c <fm_lcd_k_lin+0xf0>
    || event_id == EVENT_KEY_UP
 8010038:	79bb      	ldrb	r3, [r7, #6]
 801003a:	2b02      	cmp	r3, #2
 801003c:	d006      	beq.n	801004c <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 801003e:	4b31      	ldr	r3, [pc, #196]	; (8010104 <fm_lcd_k_lin+0x1a8>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d105      	bne.n	8010052 <fm_lcd_k_lin+0xf6>
 8010046:	79bb      	ldrb	r3, [r7, #6]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d102      	bne.n	8010052 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 801004c:	4b2e      	ldr	r3, [pc, #184]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
    }

    if (digit_lin_modify <= DIG_LIN_7)
 8010052:	797b      	ldrb	r3, [r7, #5]
 8010054:	2b07      	cmp	r3, #7
 8010056:	d813      	bhi.n	8010080 <fm_lcd_k_lin+0x124>
    {
        if (blink == 1)
 8010058:	4b2b      	ldr	r3, [pc, #172]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d10b      	bne.n	8010078 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 8010060:	797b      	ldrb	r3, [r7, #5]
 8010062:	f1c3 0307 	rsb	r3, r3, #7
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2100      	movs	r1, #0
 801006a:	4618      	mov	r0, r3
 801006c:	f000 fa8e 	bl	801058c <lcd_clear_digit>
            blink = 0;
 8010070:	4b25      	ldr	r3, [pc, #148]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 8010072:	2200      	movs	r2, #0
 8010074:	601a      	str	r2, [r3, #0]
 8010076:	e016      	b.n	80100a6 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010078:	4b23      	ldr	r3, [pc, #140]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 801007a:	2201      	movs	r2, #1
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	e012      	b.n	80100a6 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if (blink == 1)
 8010080:	4b21      	ldr	r3, [pc, #132]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d10b      	bne.n	80100a0 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010088:	797b      	ldrb	r3, [r7, #5]
 801008a:	f1c3 030e 	rsb	r3, r3, #14
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2101      	movs	r1, #1
 8010092:	4618      	mov	r0, r3
 8010094:	f000 fa7a 	bl	801058c <lcd_clear_digit>
            blink = 0;
 8010098:	4b1b      	ldr	r3, [pc, #108]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
 801009e:	e002      	b.n	80100a6 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 80100a0:	4b19      	ldr	r3, [pc, #100]	; (8010108 <fm_lcd_k_lin+0x1ac>)
 80100a2:	2201      	movs	r2, #1
 80100a4:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 80100a6:	2100      	movs	r1, #0
 80100a8:	2010      	movs	r0, #16
 80100aa:	f001 fb95 	bl	80117d8 <lcd_set_symbol>
    if (k_sel == K_LIN_1)
 80100ae:	79fb      	ldrb	r3, [r7, #7]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d103      	bne.n	80100bc <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 80100b4:	2100      	movs	r1, #0
 80100b6:	2011      	movs	r0, #17
 80100b8:	f001 fb8e 	bl	80117d8 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_2)
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d103      	bne.n	80100ca <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 80100c2:	2100      	movs	r1, #0
 80100c4:	2012      	movs	r0, #18
 80100c6:	f001 fb87 	bl	80117d8 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_3)
 80100ca:	79fb      	ldrb	r3, [r7, #7]
 80100cc:	2b03      	cmp	r3, #3
 80100ce:	d103      	bne.n	80100d8 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 80100d0:	2100      	movs	r1, #0
 80100d2:	2013      	movs	r0, #19
 80100d4:	f001 fb80 	bl	80117d8 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_4)
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	2b04      	cmp	r3, #4
 80100dc:	d103      	bne.n	80100e6 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 80100de:	2100      	movs	r1, #0
 80100e0:	2014      	movs	r0, #20
 80100e2:	f001 fb79 	bl	80117d8 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_5)
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	2b05      	cmp	r3, #5
 80100ea:	d103      	bne.n	80100f4 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 80100ec:	2100      	movs	r1, #0
 80100ee:	2015      	movs	r0, #21
 80100f0:	f001 fb72 	bl	80117d8 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ, 0x00);
 80100f4:	2100      	movs	r1, #0
 80100f6:	2016      	movs	r0, #22
 80100f8:	f001 fb6e 	bl	80117d8 <lcd_set_symbol>
}
 80100fc:	bf00      	nop
 80100fe:	3738      	adds	r7, #56	; 0x38
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	20001dbb 	.word	0x20001dbb
 8010108:	2000011c 	.word	0x2000011c

0801010c <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d102      	bne.n	8010128 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 8010122:	2308      	movs	r3, #8
 8010124:	73bb      	strb	r3, [r7, #14]
 8010126:	e026      	b.n	8010176 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 8010128:	2307      	movs	r3, #7
 801012a:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 801012c:	e023      	b.n	8010176 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2b2f      	cmp	r3, #47	; 0x2f
 8010134:	d903      	bls.n	801013e <fm_lcd_puts+0x32>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	2b39      	cmp	r3, #57	; 0x39
 801013c:	d907      	bls.n	801014e <fm_lcd_puts+0x42>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	2b20      	cmp	r3, #32
 8010144:	d003      	beq.n	801014e <fm_lcd_puts+0x42>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b2e      	cmp	r3, #46	; 0x2e
 801014c:	d106      	bne.n	801015c <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	78fa      	ldrb	r2, [r7, #3]
 8010154:	7bf9      	ldrb	r1, [r7, #15]
 8010156:	4618      	mov	r0, r3
 8010158:	f001 f88e 	bl	8011278 <lcd_put_char>
        }
        col++;
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	3301      	adds	r3, #1
 8010160:	73fb      	strb	r3, [r7, #15]
        c++;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	3301      	adds	r3, #1
 8010166:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b2e      	cmp	r3, #46	; 0x2e
 801016e:	d102      	bne.n	8010176 <fm_lcd_puts+0x6a>
        {
            col--;
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	3b01      	subs	r3, #1
 8010174:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <fm_lcd_puts+0x7a>
 801017e:	7bfa      	ldrb	r2, [r7, #15]
 8010180:	7bbb      	ldrb	r3, [r7, #14]
 8010182:	429a      	cmp	r2, r3
 8010184:	d3d3      	bcc.n	801012e <fm_lcd_puts+0x22>
        }
    }
}
 8010186:	bf00      	nop
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 801018e:	b580      	push	{r7, lr}
 8010190:	af00      	add	r7, sp, #0
    lcd_refresh();
 8010192:	f001 fa6f 	bl	8011674 <lcd_refresh>
}
 8010196:	bf00      	nop
 8010198:	bd80      	pop	{r7, pc}

0801019a <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b0b8      	sub	sp, #224	; 0xe0
 801019e:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 80101a0:	f107 0318 	add.w	r3, r7, #24
 80101a4:	4618      	mov	r0, r3
 80101a6:	f004 fd5f 	bl	8014c68 <fmc_get_ttl>
 80101aa:	2314      	movs	r3, #20
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	1d3b      	adds	r3, r7, #4
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	2309      	movs	r3, #9
 80101b4:	2220      	movs	r2, #32
 80101b6:	f107 0120 	add.w	r1, r7, #32
 80101ba:	c903      	ldmia	r1, {r0, r1}
 80101bc:	f7ff fdbe 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 80101c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101c4:	4618      	mov	r0, r3
 80101c6:	f004 fd4f 	bl	8014c68 <fmc_get_ttl>
 80101ca:	1d3a      	adds	r2, r7, #4
 80101cc:	2314      	movs	r3, #20
 80101ce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80101d2:	c903      	ldmia	r1, {r0, r1}
 80101d4:	f7ff fd6e 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80101d8:	1d3b      	adds	r3, r7, #4
 80101da:	2100      	movs	r1, #0
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff ff95 	bl	801010c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 80101e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80101e6:	4618      	mov	r0, r3
 80101e8:	f004 fcd8 	bl	8014b9c <fmc_get_rate>
 80101ec:	2314      	movs	r3, #20
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	1d3b      	adds	r3, r7, #4
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	2308      	movs	r3, #8
 80101f6:	2220      	movs	r2, #32
 80101f8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80101fc:	c903      	ldmia	r1, {r0, r1}
 80101fe:	f7ff fd9d 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 8010202:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010206:	4618      	mov	r0, r3
 8010208:	f004 fcc8 	bl	8014b9c <fmc_get_rate>
 801020c:	1d3a      	adds	r2, r7, #4
 801020e:	2314      	movs	r3, #20
 8010210:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8010214:	c903      	ldmia	r1, {r0, r1}
 8010216:	f7ff fd4d 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801021a:	1d3b      	adds	r3, r7, #4
 801021c:	2101      	movs	r1, #1
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff ff74 	bl	801010c <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 8010224:	2100      	movs	r1, #0
 8010226:	2005      	movs	r0, #5
 8010228:	f001 fad6 	bl	80117d8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 801022c:	2100      	movs	r1, #0
 801022e:	2002      	movs	r0, #2
 8010230:	f001 fad2 	bl	80117d8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 8010234:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010238:	4618      	mov	r0, r3
 801023a:	f004 fd15 	bl	8014c68 <fmc_get_ttl>
 801023e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010242:	2100      	movs	r1, #0
 8010244:	4618      	mov	r0, r3
 8010246:	f001 fe87 	bl	8011f58 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 801024a:	2100      	movs	r1, #0
 801024c:	2007      	movs	r0, #7
 801024e:	f001 fac3 	bl	80117d8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 8010252:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010256:	4618      	mov	r0, r3
 8010258:	f004 fd06 	bl	8014c68 <fmc_get_ttl>
 801025c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8010260:	2100      	movs	r1, #0
 8010262:	4618      	mov	r0, r3
 8010264:	f001 fe36 	bl	8011ed4 <lcd_set_time_unit>
}
 8010268:	bf00      	nop
 801026a:	37d8      	adds	r7, #216	; 0xd8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b0a6      	sub	sp, #152	; 0x98
 8010274:	af02      	add	r7, sp, #8
 8010276:	4603      	mov	r3, r0
 8010278:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 801027a:	f107 0320 	add.w	r3, r7, #32
 801027e:	4618      	mov	r0, r3
 8010280:	f7fe fed6 	bl	800f030 <fm_factory_get_units_tim>
 8010284:	2314      	movs	r3, #20
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	f107 030c 	add.w	r3, r7, #12
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	2308      	movs	r3, #8
 8010290:	2230      	movs	r2, #48	; 0x30
 8010292:	f107 0120 	add.w	r1, r7, #32
 8010296:	c903      	ldmia	r1, {r0, r1}
 8010298:	f7ff fd50 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 801029c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fe fec5 	bl	800f030 <fm_factory_get_units_tim>
 80102a6:	f107 020c 	add.w	r2, r7, #12
 80102aa:	2314      	movs	r3, #20
 80102ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80102b0:	c903      	ldmia	r1, {r0, r1}
 80102b2:	f7ff fcff 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80102b6:	f107 030c 	add.w	r3, r7, #12
 80102ba:	2101      	movs	r1, #1
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff ff25 	bl	801010c <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 80102c2:	79fb      	ldrb	r3, [r7, #7]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d106      	bne.n	80102d6 <fm_lcd_units_tim+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80102c8:	4b35      	ldr	r3, [pc, #212]	; (80103a0 <fm_lcd_units_tim+0x130>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d005      	beq.n	80102dc <fm_lcd_units_tim+0x6c>
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d102      	bne.n	80102dc <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 80102d6:	4b33      	ldr	r3, [pc, #204]	; (80103a4 <fm_lcd_units_tim+0x134>)
 80102d8:	2200      	movs	r2, #0
 80102da:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 80102dc:	4b31      	ldr	r3, [pc, #196]	; (80103a4 <fm_lcd_units_tim+0x134>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d146      	bne.n	8010372 <fm_lcd_units_tim+0x102>
    {
        if (fm_factory_get_units_tim().res == DECIMAL_1)
 80102e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fe fea1 	bl	800f030 <fm_factory_get_units_tim>
 80102ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d109      	bne.n	801030a <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 80102f6:	2305      	movs	r3, #5
 80102f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80102fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010300:	4619      	mov	r1, r3
 8010302:	2001      	movs	r0, #1
 8010304:	f000 fc80 	bl	8010c08 <lcd_clear_point>
 8010308:	e024      	b.n	8010354 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_2)
 801030a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801030e:	4618      	mov	r0, r3
 8010310:	f7fe fe8e 	bl	800f030 <fm_factory_get_units_tim>
 8010314:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010318:	2b02      	cmp	r3, #2
 801031a:	d109      	bne.n	8010330 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 801031c:	2304      	movs	r3, #4
 801031e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010322:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010326:	4619      	mov	r1, r3
 8010328:	2001      	movs	r0, #1
 801032a:	f000 fc6d 	bl	8010c08 <lcd_clear_point>
 801032e:	e011      	b.n	8010354 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_3)
 8010330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe fe7b 	bl	800f030 <fm_factory_get_units_tim>
 801033a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801033e:	2b03      	cmp	r3, #3
 8010340:	d108      	bne.n	8010354 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 8010342:	2303      	movs	r3, #3
 8010344:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010348:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801034c:	4619      	mov	r1, r3
 801034e:	2001      	movs	r0, #1
 8010350:	f000 fc5a 	bl	8010c08 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 8010354:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010358:	4618      	mov	r0, r3
 801035a:	f004 fc1f 	bl	8014b9c <fmc_get_rate>
 801035e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8010362:	2100      	movs	r1, #0
 8010364:	4618      	mov	r0, r3
 8010366:	f000 fcfb 	bl	8010d60 <lcd_clear_time_unit>

        blink = 0;
 801036a:	4b0e      	ldr	r3, [pc, #56]	; (80103a4 <fm_lcd_units_tim+0x134>)
 801036c:	2200      	movs	r2, #0
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	e00d      	b.n	801038e <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 8010372:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010376:	4618      	mov	r0, r3
 8010378:	f004 fc10 	bl	8014b9c <fmc_get_rate>
 801037c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010380:	2100      	movs	r1, #0
 8010382:	4618      	mov	r0, r3
 8010384:	f001 fda6 	bl	8011ed4 <lcd_set_time_unit>
        blink = 1;
 8010388:	4b06      	ldr	r3, [pc, #24]	; (80103a4 <fm_lcd_units_tim+0x134>)
 801038a:	2201      	movs	r2, #1
 801038c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 801038e:	2100      	movs	r1, #0
 8010390:	2002      	movs	r0, #2
 8010392:	f001 fa21 	bl	80117d8 <lcd_set_symbol>
}
 8010396:	bf00      	nop
 8010398:	3790      	adds	r7, #144	; 0x90
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20001dbb 	.word	0x20001dbb
 80103a4:	2000011c 	.word	0x2000011c

080103a8 <fm_lcd_units_vol>:
 * TTL.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b0a6      	sub	sp, #152	; 0x98
 80103ac:	af02      	add	r7, sp, #8
 80103ae:	4603      	mov	r3, r0
 80103b0:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS, lcd_msg,
 80103b2:	f107 0320 	add.w	r3, r7, #32
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fe fe4c 	bl	800f054 <fm_factory_get_units_vol>
 80103bc:	2314      	movs	r3, #20
 80103be:	9301      	str	r3, [sp, #4]
 80103c0:	f107 030c 	add.w	r3, r7, #12
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	2309      	movs	r3, #9
 80103c8:	2230      	movs	r2, #48	; 0x30
 80103ca:	f107 0120 	add.w	r1, r7, #32
 80103ce:	c903      	ldmia	r1, {r0, r1}
 80103d0:	f7ff fcb4 	bl	800fd3c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 80103d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fe fe3b 	bl	800f054 <fm_factory_get_units_vol>
 80103de:	f107 020c 	add.w	r2, r7, #12
 80103e2:	2314      	movs	r3, #20
 80103e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80103e8:	c903      	ldmia	r1, {r0, r1}
 80103ea:	f7ff fc63 	bl	800fcb4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80103ee:	f107 030c 	add.w	r3, r7, #12
 80103f2:	2100      	movs	r1, #0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff fe89 	bl	801010c <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 80103fa:	79fb      	ldrb	r3, [r7, #7]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d106      	bne.n	801040e <fm_lcd_units_vol+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010400:	4b37      	ldr	r3, [pc, #220]	; (80104e0 <fm_lcd_units_vol+0x138>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d005      	beq.n	8010414 <fm_lcd_units_vol+0x6c>
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d102      	bne.n	8010414 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 801040e:	4b35      	ldr	r3, [pc, #212]	; (80104e4 <fm_lcd_units_vol+0x13c>)
 8010410:	2200      	movs	r2, #0
 8010412:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 8010414:	4b33      	ldr	r3, [pc, #204]	; (80104e4 <fm_lcd_units_vol+0x13c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d146      	bne.n	80104aa <fm_lcd_units_vol+0x102>
    {
        if (fm_factory_get_units_vol().res == DECIMAL_1)
 801041c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010420:	4618      	mov	r0, r3
 8010422:	f7fe fe17 	bl	800f054 <fm_factory_get_units_vol>
 8010426:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801042a:	2b01      	cmp	r3, #1
 801042c:	d109      	bne.n	8010442 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 801042e:	2306      	movs	r3, #6
 8010430:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010434:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010438:	4619      	mov	r1, r3
 801043a:	2000      	movs	r0, #0
 801043c:	f000 fbe4 	bl	8010c08 <lcd_clear_point>
 8010440:	e024      	b.n	801048c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_2)
 8010442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010446:	4618      	mov	r0, r3
 8010448:	f7fe fe04 	bl	800f054 <fm_factory_get_units_vol>
 801044c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010450:	2b02      	cmp	r3, #2
 8010452:	d109      	bne.n	8010468 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 8010454:	2305      	movs	r3, #5
 8010456:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 801045a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801045e:	4619      	mov	r1, r3
 8010460:	2000      	movs	r0, #0
 8010462:	f000 fbd1 	bl	8010c08 <lcd_clear_point>
 8010466:	e011      	b.n	801048c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_3)
 8010468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801046c:	4618      	mov	r0, r3
 801046e:	f7fe fdf1 	bl	800f054 <fm_factory_get_units_vol>
 8010472:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010476:	2b03      	cmp	r3, #3
 8010478:	d108      	bne.n	801048c <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 801047a:	2304      	movs	r3, #4
 801047c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010480:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010484:	4619      	mov	r1, r3
 8010486:	2000      	movs	r0, #0
 8010488:	f000 fbbe 	bl	8010c08 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801048c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010490:	4618      	mov	r0, r3
 8010492:	f004 fb43 	bl	8014b1c <fmc_get_acm>
 8010496:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801049a:	2100      	movs	r1, #0
 801049c:	4618      	mov	r0, r3
 801049e:	f000 fca1 	bl	8010de4 <lcd_clear_vol_unit>

        blink = 0;
 80104a2:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <fm_lcd_units_vol+0x13c>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	e00d      	b.n	80104c6 <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 80104aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104ae:	4618      	mov	r0, r3
 80104b0:	f004 fb34 	bl	8014b1c <fmc_get_acm>
 80104b4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80104b8:	2100      	movs	r1, #0
 80104ba:	4618      	mov	r0, r3
 80104bc:	f001 fd4c 	bl	8011f58 <lcd_set_vol_unit>
        blink = 1;
 80104c0:	4b08      	ldr	r3, [pc, #32]	; (80104e4 <fm_lcd_units_vol+0x13c>)
 80104c2:	2201      	movs	r2, #1
 80104c4:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 80104c6:	2100      	movs	r1, #0
 80104c8:	2006      	movs	r0, #6
 80104ca:	f001 f985 	bl	80117d8 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 80104ce:	2100      	movs	r1, #0
 80104d0:	2005      	movs	r0, #5
 80104d2:	f001 f981 	bl	80117d8 <lcd_set_symbol>
}
 80104d6:	bf00      	nop
 80104d8:	3790      	adds	r7, #144	; 0x90
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	20001dbb 	.word	0x20001dbb
 80104e4:	2000011c 	.word	0x2000011c

080104e8 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b086      	sub	sp, #24
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	460a      	mov	r2, r1
 80104f2:	71fb      	strb	r3, [r7, #7]
 80104f4:	4613      	mov	r3, r2
 80104f6:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 80104f8:	f004 faf6 	bl	8014ae8 <fm_version_get>
 80104fc:	4601      	mov	r1, r0
 80104fe:	f107 020c 	add.w	r2, r7, #12
 8010502:	230c      	movs	r3, #12
 8010504:	2001      	movs	r0, #1
 8010506:	f7ff fbb1 	bl	800fc6c <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801050a:	f107 030c 	add.w	r3, r7, #12
 801050e:	2101      	movs	r1, #1
 8010510:	4618      	mov	r0, r3
 8010512:	f7ff fdfb 	bl	801010c <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	4619      	mov	r1, r3
 801051a:	2001      	movs	r0, #1
 801051c:	f001 f8b0 	bl	8011680 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 8010520:	79bb      	ldrb	r3, [r7, #6]
 8010522:	4619      	mov	r1, r3
 8010524:	2001      	movs	r0, #1
 8010526:	f001 f8ab 	bl	8011680 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 801052a:	2100      	movs	r1, #0
 801052c:	2009      	movs	r0, #9
 801052e:	f001 f953 	bl	80117d8 <lcd_set_symbol>
}
 8010532:	bf00      	nop
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <lcd_clear_all>:
 * bits de los segmentos a imprimir.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 8010542:	f002 f873 	bl	801262c <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 8010546:	2300      	movs	r3, #0
 8010548:	607b      	str	r3, [r7, #4]
 801054a:	e013      	b.n	8010574 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 801054c:	2300      	movs	r3, #0
 801054e:	603b      	str	r3, [r7, #0]
 8010550:	e00a      	b.n	8010568 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 8010552:	4a0d      	ldr	r2, [pc, #52]	; (8010588 <lcd_clear_all+0x4c>)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	00db      	lsls	r3, r3, #3
 8010558:	441a      	add	r2, r3
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	4413      	add	r3, r2
 801055e:	2200      	movs	r2, #0
 8010560:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	3301      	adds	r3, #1
 8010566:	603b      	str	r3, [r7, #0]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	2b07      	cmp	r3, #7
 801056c:	ddf1      	ble.n	8010552 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	3301      	adds	r3, #1
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b01      	cmp	r3, #1
 8010578:	dde8      	ble.n	801054c <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 801057a:	2000      	movs	r0, #0
 801057c:	f002 f8e6 	bl	801274c <pcf8553_write_all>
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20001cfc 	.word	0x20001cfc

0801058c <lcd_clear_digit>:
 * @param Dígito a borrar de la pantalla.
 * @param Fila de este dígito.
 * @retval None
 */
void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	4603      	mov	r3, r0
 8010594:	460a      	mov	r2, r1
 8010596:	71fb      	strb	r3, [r7, #7]
 8010598:	4613      	mov	r3, r2
 801059a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 801059c:	79bb      	ldrb	r3, [r7, #6]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f040 81aa 	bne.w	80108f8 <lcd_clear_digit+0x36c>
    {
        switch (digit)
 80105a4:	79fb      	ldrb	r3, [r7, #7]
 80105a6:	2b07      	cmp	r3, #7
 80105a8:	f200 8320 	bhi.w	8010bec <lcd_clear_digit+0x660>
 80105ac:	a201      	add	r2, pc, #4	; (adr r2, 80105b4 <lcd_clear_digit+0x28>)
 80105ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b2:	bf00      	nop
 80105b4:	080105d5 	.word	0x080105d5
 80105b8:	08010639 	.word	0x08010639
 80105bc:	0801069d 	.word	0x0801069d
 80105c0:	08010701 	.word	0x08010701
 80105c4:	08010765 	.word	0x08010765
 80105c8:	080107c9 	.word	0x080107c9
 80105cc:	08010831 	.word	0x08010831
 80105d0:	08010895 	.word	0x08010895
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 80105d4:	4b95      	ldr	r3, [pc, #596]	; (801082c <lcd_clear_digit+0x2a0>)
 80105d6:	7b1b      	ldrb	r3, [r3, #12]
 80105d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b93      	ldr	r3, [pc, #588]	; (801082c <lcd_clear_digit+0x2a0>)
 80105e0:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 80105e2:	4b92      	ldr	r3, [pc, #584]	; (801082c <lcd_clear_digit+0x2a0>)
 80105e4:	7b1b      	ldrb	r3, [r3, #12]
 80105e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	4b8f      	ldr	r3, [pc, #572]	; (801082c <lcd_clear_digit+0x2a0>)
 80105ee:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 80105f0:	4b8e      	ldr	r3, [pc, #568]	; (801082c <lcd_clear_digit+0x2a0>)
 80105f2:	7c5b      	ldrb	r3, [r3, #17]
 80105f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b8c      	ldr	r3, [pc, #560]	; (801082c <lcd_clear_digit+0x2a0>)
 80105fc:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 80105fe:	4b8b      	ldr	r3, [pc, #556]	; (801082c <lcd_clear_digit+0x2a0>)
 8010600:	7c5b      	ldrb	r3, [r3, #17]
 8010602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4b88      	ldr	r3, [pc, #544]	; (801082c <lcd_clear_digit+0x2a0>)
 801060a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 801060c:	4b87      	ldr	r3, [pc, #540]	; (801082c <lcd_clear_digit+0x2a0>)
 801060e:	789b      	ldrb	r3, [r3, #2]
 8010610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b85      	ldr	r3, [pc, #532]	; (801082c <lcd_clear_digit+0x2a0>)
 8010618:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 801061a:	4b84      	ldr	r3, [pc, #528]	; (801082c <lcd_clear_digit+0x2a0>)
 801061c:	789b      	ldrb	r3, [r3, #2]
 801061e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010622:	b2da      	uxtb	r2, r3
 8010624:	4b81      	ldr	r3, [pc, #516]	; (801082c <lcd_clear_digit+0x2a0>)
 8010626:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 8010628:	4b80      	ldr	r3, [pc, #512]	; (801082c <lcd_clear_digit+0x2a0>)
 801062a:	79db      	ldrb	r3, [r3, #7]
 801062c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010630:	b2da      	uxtb	r2, r3
 8010632:	4b7e      	ldr	r3, [pc, #504]	; (801082c <lcd_clear_digit+0x2a0>)
 8010634:	71da      	strb	r2, [r3, #7]
            break;
 8010636:	e2de      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 8010638:	4b7c      	ldr	r3, [pc, #496]	; (801082c <lcd_clear_digit+0x2a0>)
 801063a:	7b5b      	ldrb	r3, [r3, #13]
 801063c:	f023 0302 	bic.w	r3, r3, #2
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b7a      	ldr	r3, [pc, #488]	; (801082c <lcd_clear_digit+0x2a0>)
 8010644:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 8010646:	4b79      	ldr	r3, [pc, #484]	; (801082c <lcd_clear_digit+0x2a0>)
 8010648:	7b5b      	ldrb	r3, [r3, #13]
 801064a:	f023 0301 	bic.w	r3, r3, #1
 801064e:	b2da      	uxtb	r2, r3
 8010650:	4b76      	ldr	r3, [pc, #472]	; (801082c <lcd_clear_digit+0x2a0>)
 8010652:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 8010654:	4b75      	ldr	r3, [pc, #468]	; (801082c <lcd_clear_digit+0x2a0>)
 8010656:	7c9b      	ldrb	r3, [r3, #18]
 8010658:	f023 0302 	bic.w	r3, r3, #2
 801065c:	b2da      	uxtb	r2, r3
 801065e:	4b73      	ldr	r3, [pc, #460]	; (801082c <lcd_clear_digit+0x2a0>)
 8010660:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 8010662:	4b72      	ldr	r3, [pc, #456]	; (801082c <lcd_clear_digit+0x2a0>)
 8010664:	7c9b      	ldrb	r3, [r3, #18]
 8010666:	f023 0301 	bic.w	r3, r3, #1
 801066a:	b2da      	uxtb	r2, r3
 801066c:	4b6f      	ldr	r3, [pc, #444]	; (801082c <lcd_clear_digit+0x2a0>)
 801066e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 8010670:	4b6e      	ldr	r3, [pc, #440]	; (801082c <lcd_clear_digit+0x2a0>)
 8010672:	78db      	ldrb	r3, [r3, #3]
 8010674:	f023 0301 	bic.w	r3, r3, #1
 8010678:	b2da      	uxtb	r2, r3
 801067a:	4b6c      	ldr	r3, [pc, #432]	; (801082c <lcd_clear_digit+0x2a0>)
 801067c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 801067e:	4b6b      	ldr	r3, [pc, #428]	; (801082c <lcd_clear_digit+0x2a0>)
 8010680:	78db      	ldrb	r3, [r3, #3]
 8010682:	f023 0302 	bic.w	r3, r3, #2
 8010686:	b2da      	uxtb	r2, r3
 8010688:	4b68      	ldr	r3, [pc, #416]	; (801082c <lcd_clear_digit+0x2a0>)
 801068a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 801068c:	4b67      	ldr	r3, [pc, #412]	; (801082c <lcd_clear_digit+0x2a0>)
 801068e:	7a1b      	ldrb	r3, [r3, #8]
 8010690:	f023 0301 	bic.w	r3, r3, #1
 8010694:	b2da      	uxtb	r2, r3
 8010696:	4b65      	ldr	r3, [pc, #404]	; (801082c <lcd_clear_digit+0x2a0>)
 8010698:	721a      	strb	r2, [r3, #8]
            break;
 801069a:	e2ac      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 801069c:	4b63      	ldr	r3, [pc, #396]	; (801082c <lcd_clear_digit+0x2a0>)
 801069e:	7b5b      	ldrb	r3, [r3, #13]
 80106a0:	f023 0308 	bic.w	r3, r3, #8
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	4b61      	ldr	r3, [pc, #388]	; (801082c <lcd_clear_digit+0x2a0>)
 80106a8:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 80106aa:	4b60      	ldr	r3, [pc, #384]	; (801082c <lcd_clear_digit+0x2a0>)
 80106ac:	7b5b      	ldrb	r3, [r3, #13]
 80106ae:	f023 0304 	bic.w	r3, r3, #4
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	4b5d      	ldr	r3, [pc, #372]	; (801082c <lcd_clear_digit+0x2a0>)
 80106b6:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 80106b8:	4b5c      	ldr	r3, [pc, #368]	; (801082c <lcd_clear_digit+0x2a0>)
 80106ba:	7c9b      	ldrb	r3, [r3, #18]
 80106bc:	f023 0308 	bic.w	r3, r3, #8
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	4b5a      	ldr	r3, [pc, #360]	; (801082c <lcd_clear_digit+0x2a0>)
 80106c4:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 80106c6:	4b59      	ldr	r3, [pc, #356]	; (801082c <lcd_clear_digit+0x2a0>)
 80106c8:	7c9b      	ldrb	r3, [r3, #18]
 80106ca:	f023 0304 	bic.w	r3, r3, #4
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	4b56      	ldr	r3, [pc, #344]	; (801082c <lcd_clear_digit+0x2a0>)
 80106d2:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 80106d4:	4b55      	ldr	r3, [pc, #340]	; (801082c <lcd_clear_digit+0x2a0>)
 80106d6:	78db      	ldrb	r3, [r3, #3]
 80106d8:	f023 0304 	bic.w	r3, r3, #4
 80106dc:	b2da      	uxtb	r2, r3
 80106de:	4b53      	ldr	r3, [pc, #332]	; (801082c <lcd_clear_digit+0x2a0>)
 80106e0:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 80106e2:	4b52      	ldr	r3, [pc, #328]	; (801082c <lcd_clear_digit+0x2a0>)
 80106e4:	78db      	ldrb	r3, [r3, #3]
 80106e6:	f023 0308 	bic.w	r3, r3, #8
 80106ea:	b2da      	uxtb	r2, r3
 80106ec:	4b4f      	ldr	r3, [pc, #316]	; (801082c <lcd_clear_digit+0x2a0>)
 80106ee:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 80106f0:	4b4e      	ldr	r3, [pc, #312]	; (801082c <lcd_clear_digit+0x2a0>)
 80106f2:	7a1b      	ldrb	r3, [r3, #8]
 80106f4:	f023 0304 	bic.w	r3, r3, #4
 80106f8:	b2da      	uxtb	r2, r3
 80106fa:	4b4c      	ldr	r3, [pc, #304]	; (801082c <lcd_clear_digit+0x2a0>)
 80106fc:	721a      	strb	r2, [r3, #8]
            break;
 80106fe:	e27a      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 8010700:	4b4a      	ldr	r3, [pc, #296]	; (801082c <lcd_clear_digit+0x2a0>)
 8010702:	7b5b      	ldrb	r3, [r3, #13]
 8010704:	f023 0320 	bic.w	r3, r3, #32
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4b48      	ldr	r3, [pc, #288]	; (801082c <lcd_clear_digit+0x2a0>)
 801070c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 801070e:	4b47      	ldr	r3, [pc, #284]	; (801082c <lcd_clear_digit+0x2a0>)
 8010710:	7b5b      	ldrb	r3, [r3, #13]
 8010712:	f023 0310 	bic.w	r3, r3, #16
 8010716:	b2da      	uxtb	r2, r3
 8010718:	4b44      	ldr	r3, [pc, #272]	; (801082c <lcd_clear_digit+0x2a0>)
 801071a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 801071c:	4b43      	ldr	r3, [pc, #268]	; (801082c <lcd_clear_digit+0x2a0>)
 801071e:	7c9b      	ldrb	r3, [r3, #18]
 8010720:	f023 0320 	bic.w	r3, r3, #32
 8010724:	b2da      	uxtb	r2, r3
 8010726:	4b41      	ldr	r3, [pc, #260]	; (801082c <lcd_clear_digit+0x2a0>)
 8010728:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 801072a:	4b40      	ldr	r3, [pc, #256]	; (801082c <lcd_clear_digit+0x2a0>)
 801072c:	7c9b      	ldrb	r3, [r3, #18]
 801072e:	f023 0310 	bic.w	r3, r3, #16
 8010732:	b2da      	uxtb	r2, r3
 8010734:	4b3d      	ldr	r3, [pc, #244]	; (801082c <lcd_clear_digit+0x2a0>)
 8010736:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 8010738:	4b3c      	ldr	r3, [pc, #240]	; (801082c <lcd_clear_digit+0x2a0>)
 801073a:	78db      	ldrb	r3, [r3, #3]
 801073c:	f023 0310 	bic.w	r3, r3, #16
 8010740:	b2da      	uxtb	r2, r3
 8010742:	4b3a      	ldr	r3, [pc, #232]	; (801082c <lcd_clear_digit+0x2a0>)
 8010744:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 8010746:	4b39      	ldr	r3, [pc, #228]	; (801082c <lcd_clear_digit+0x2a0>)
 8010748:	78db      	ldrb	r3, [r3, #3]
 801074a:	f023 0320 	bic.w	r3, r3, #32
 801074e:	b2da      	uxtb	r2, r3
 8010750:	4b36      	ldr	r3, [pc, #216]	; (801082c <lcd_clear_digit+0x2a0>)
 8010752:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 8010754:	4b35      	ldr	r3, [pc, #212]	; (801082c <lcd_clear_digit+0x2a0>)
 8010756:	7a1b      	ldrb	r3, [r3, #8]
 8010758:	f023 0310 	bic.w	r3, r3, #16
 801075c:	b2da      	uxtb	r2, r3
 801075e:	4b33      	ldr	r3, [pc, #204]	; (801082c <lcd_clear_digit+0x2a0>)
 8010760:	721a      	strb	r2, [r3, #8]
            break;
 8010762:	e248      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 8010764:	4b31      	ldr	r3, [pc, #196]	; (801082c <lcd_clear_digit+0x2a0>)
 8010766:	7b5b      	ldrb	r3, [r3, #13]
 8010768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801076c:	b2da      	uxtb	r2, r3
 801076e:	4b2f      	ldr	r3, [pc, #188]	; (801082c <lcd_clear_digit+0x2a0>)
 8010770:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 8010772:	4b2e      	ldr	r3, [pc, #184]	; (801082c <lcd_clear_digit+0x2a0>)
 8010774:	7b5b      	ldrb	r3, [r3, #13]
 8010776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801077a:	b2da      	uxtb	r2, r3
 801077c:	4b2b      	ldr	r3, [pc, #172]	; (801082c <lcd_clear_digit+0x2a0>)
 801077e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010780:	4b2a      	ldr	r3, [pc, #168]	; (801082c <lcd_clear_digit+0x2a0>)
 8010782:	7c9b      	ldrb	r3, [r3, #18]
 8010784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010788:	b2da      	uxtb	r2, r3
 801078a:	4b28      	ldr	r3, [pc, #160]	; (801082c <lcd_clear_digit+0x2a0>)
 801078c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 801078e:	4b27      	ldr	r3, [pc, #156]	; (801082c <lcd_clear_digit+0x2a0>)
 8010790:	7c9b      	ldrb	r3, [r3, #18]
 8010792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010796:	b2da      	uxtb	r2, r3
 8010798:	4b24      	ldr	r3, [pc, #144]	; (801082c <lcd_clear_digit+0x2a0>)
 801079a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 801079c:	4b23      	ldr	r3, [pc, #140]	; (801082c <lcd_clear_digit+0x2a0>)
 801079e:	78db      	ldrb	r3, [r3, #3]
 80107a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	4b21      	ldr	r3, [pc, #132]	; (801082c <lcd_clear_digit+0x2a0>)
 80107a8:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 80107aa:	4b20      	ldr	r3, [pc, #128]	; (801082c <lcd_clear_digit+0x2a0>)
 80107ac:	78db      	ldrb	r3, [r3, #3]
 80107ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	4b1d      	ldr	r3, [pc, #116]	; (801082c <lcd_clear_digit+0x2a0>)
 80107b6:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 80107b8:	4b1c      	ldr	r3, [pc, #112]	; (801082c <lcd_clear_digit+0x2a0>)
 80107ba:	7a1b      	ldrb	r3, [r3, #8]
 80107bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	4b1a      	ldr	r3, [pc, #104]	; (801082c <lcd_clear_digit+0x2a0>)
 80107c4:	721a      	strb	r2, [r3, #8]
            break;
 80107c6:	e216      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 80107c8:	4b18      	ldr	r3, [pc, #96]	; (801082c <lcd_clear_digit+0x2a0>)
 80107ca:	7b9b      	ldrb	r3, [r3, #14]
 80107cc:	f023 0302 	bic.w	r3, r3, #2
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	4b16      	ldr	r3, [pc, #88]	; (801082c <lcd_clear_digit+0x2a0>)
 80107d4:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 80107d6:	4b15      	ldr	r3, [pc, #84]	; (801082c <lcd_clear_digit+0x2a0>)
 80107d8:	7b9b      	ldrb	r3, [r3, #14]
 80107da:	f023 0301 	bic.w	r3, r3, #1
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	4b12      	ldr	r3, [pc, #72]	; (801082c <lcd_clear_digit+0x2a0>)
 80107e2:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 80107e4:	4b11      	ldr	r3, [pc, #68]	; (801082c <lcd_clear_digit+0x2a0>)
 80107e6:	7cdb      	ldrb	r3, [r3, #19]
 80107e8:	f023 0302 	bic.w	r3, r3, #2
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	4b0f      	ldr	r3, [pc, #60]	; (801082c <lcd_clear_digit+0x2a0>)
 80107f0:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 80107f2:	4b0e      	ldr	r3, [pc, #56]	; (801082c <lcd_clear_digit+0x2a0>)
 80107f4:	7cdb      	ldrb	r3, [r3, #19]
 80107f6:	f023 0301 	bic.w	r3, r3, #1
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	4b0b      	ldr	r3, [pc, #44]	; (801082c <lcd_clear_digit+0x2a0>)
 80107fe:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <lcd_clear_digit+0x2a0>)
 8010802:	791b      	ldrb	r3, [r3, #4]
 8010804:	f023 0301 	bic.w	r3, r3, #1
 8010808:	b2da      	uxtb	r2, r3
 801080a:	4b08      	ldr	r3, [pc, #32]	; (801082c <lcd_clear_digit+0x2a0>)
 801080c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 801080e:	4b07      	ldr	r3, [pc, #28]	; (801082c <lcd_clear_digit+0x2a0>)
 8010810:	791b      	ldrb	r3, [r3, #4]
 8010812:	f023 0302 	bic.w	r3, r3, #2
 8010816:	b2da      	uxtb	r2, r3
 8010818:	4b04      	ldr	r3, [pc, #16]	; (801082c <lcd_clear_digit+0x2a0>)
 801081a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 801081c:	4b03      	ldr	r3, [pc, #12]	; (801082c <lcd_clear_digit+0x2a0>)
 801081e:	7a5b      	ldrb	r3, [r3, #9]
 8010820:	f023 0301 	bic.w	r3, r3, #1
 8010824:	b2da      	uxtb	r2, r3
 8010826:	4b01      	ldr	r3, [pc, #4]	; (801082c <lcd_clear_digit+0x2a0>)
 8010828:	725a      	strb	r2, [r3, #9]
            break;
 801082a:	e1e4      	b.n	8010bf6 <lcd_clear_digit+0x66a>
 801082c:	20001da0 	.word	0x20001da0
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 8010830:	4ba2      	ldr	r3, [pc, #648]	; (8010abc <lcd_clear_digit+0x530>)
 8010832:	7b9b      	ldrb	r3, [r3, #14]
 8010834:	f023 0308 	bic.w	r3, r3, #8
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4ba0      	ldr	r3, [pc, #640]	; (8010abc <lcd_clear_digit+0x530>)
 801083c:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 801083e:	4b9f      	ldr	r3, [pc, #636]	; (8010abc <lcd_clear_digit+0x530>)
 8010840:	7b9b      	ldrb	r3, [r3, #14]
 8010842:	f023 0304 	bic.w	r3, r3, #4
 8010846:	b2da      	uxtb	r2, r3
 8010848:	4b9c      	ldr	r3, [pc, #624]	; (8010abc <lcd_clear_digit+0x530>)
 801084a:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 801084c:	4b9b      	ldr	r3, [pc, #620]	; (8010abc <lcd_clear_digit+0x530>)
 801084e:	7cdb      	ldrb	r3, [r3, #19]
 8010850:	f023 0308 	bic.w	r3, r3, #8
 8010854:	b2da      	uxtb	r2, r3
 8010856:	4b99      	ldr	r3, [pc, #612]	; (8010abc <lcd_clear_digit+0x530>)
 8010858:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 801085a:	4b98      	ldr	r3, [pc, #608]	; (8010abc <lcd_clear_digit+0x530>)
 801085c:	7cdb      	ldrb	r3, [r3, #19]
 801085e:	f023 0304 	bic.w	r3, r3, #4
 8010862:	b2da      	uxtb	r2, r3
 8010864:	4b95      	ldr	r3, [pc, #596]	; (8010abc <lcd_clear_digit+0x530>)
 8010866:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 8010868:	4b94      	ldr	r3, [pc, #592]	; (8010abc <lcd_clear_digit+0x530>)
 801086a:	791b      	ldrb	r3, [r3, #4]
 801086c:	f023 0304 	bic.w	r3, r3, #4
 8010870:	b2da      	uxtb	r2, r3
 8010872:	4b92      	ldr	r3, [pc, #584]	; (8010abc <lcd_clear_digit+0x530>)
 8010874:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 8010876:	4b91      	ldr	r3, [pc, #580]	; (8010abc <lcd_clear_digit+0x530>)
 8010878:	791b      	ldrb	r3, [r3, #4]
 801087a:	f023 0308 	bic.w	r3, r3, #8
 801087e:	b2da      	uxtb	r2, r3
 8010880:	4b8e      	ldr	r3, [pc, #568]	; (8010abc <lcd_clear_digit+0x530>)
 8010882:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010884:	4b8d      	ldr	r3, [pc, #564]	; (8010abc <lcd_clear_digit+0x530>)
 8010886:	7a5b      	ldrb	r3, [r3, #9]
 8010888:	f023 0304 	bic.w	r3, r3, #4
 801088c:	b2da      	uxtb	r2, r3
 801088e:	4b8b      	ldr	r3, [pc, #556]	; (8010abc <lcd_clear_digit+0x530>)
 8010890:	725a      	strb	r2, [r3, #9]
            break;
 8010892:	e1b0      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010894:	4b89      	ldr	r3, [pc, #548]	; (8010abc <lcd_clear_digit+0x530>)
 8010896:	7b9b      	ldrb	r3, [r3, #14]
 8010898:	f023 0320 	bic.w	r3, r3, #32
 801089c:	b2da      	uxtb	r2, r3
 801089e:	4b87      	ldr	r3, [pc, #540]	; (8010abc <lcd_clear_digit+0x530>)
 80108a0:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 80108a2:	4b86      	ldr	r3, [pc, #536]	; (8010abc <lcd_clear_digit+0x530>)
 80108a4:	7b9b      	ldrb	r3, [r3, #14]
 80108a6:	f023 0310 	bic.w	r3, r3, #16
 80108aa:	b2da      	uxtb	r2, r3
 80108ac:	4b83      	ldr	r3, [pc, #524]	; (8010abc <lcd_clear_digit+0x530>)
 80108ae:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 80108b0:	4b82      	ldr	r3, [pc, #520]	; (8010abc <lcd_clear_digit+0x530>)
 80108b2:	7cdb      	ldrb	r3, [r3, #19]
 80108b4:	f023 0320 	bic.w	r3, r3, #32
 80108b8:	b2da      	uxtb	r2, r3
 80108ba:	4b80      	ldr	r3, [pc, #512]	; (8010abc <lcd_clear_digit+0x530>)
 80108bc:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 80108be:	4b7f      	ldr	r3, [pc, #508]	; (8010abc <lcd_clear_digit+0x530>)
 80108c0:	7cdb      	ldrb	r3, [r3, #19]
 80108c2:	f023 0310 	bic.w	r3, r3, #16
 80108c6:	b2da      	uxtb	r2, r3
 80108c8:	4b7c      	ldr	r3, [pc, #496]	; (8010abc <lcd_clear_digit+0x530>)
 80108ca:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 80108cc:	4b7b      	ldr	r3, [pc, #492]	; (8010abc <lcd_clear_digit+0x530>)
 80108ce:	791b      	ldrb	r3, [r3, #4]
 80108d0:	f023 0310 	bic.w	r3, r3, #16
 80108d4:	b2da      	uxtb	r2, r3
 80108d6:	4b79      	ldr	r3, [pc, #484]	; (8010abc <lcd_clear_digit+0x530>)
 80108d8:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 80108da:	4b78      	ldr	r3, [pc, #480]	; (8010abc <lcd_clear_digit+0x530>)
 80108dc:	791b      	ldrb	r3, [r3, #4]
 80108de:	f023 0320 	bic.w	r3, r3, #32
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	4b75      	ldr	r3, [pc, #468]	; (8010abc <lcd_clear_digit+0x530>)
 80108e6:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 80108e8:	4b74      	ldr	r3, [pc, #464]	; (8010abc <lcd_clear_digit+0x530>)
 80108ea:	7a5b      	ldrb	r3, [r3, #9]
 80108ec:	f023 0310 	bic.w	r3, r3, #16
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	4b72      	ldr	r3, [pc, #456]	; (8010abc <lcd_clear_digit+0x530>)
 80108f4:	725a      	strb	r2, [r3, #9]
            break;
 80108f6:	e17e      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 80108f8:	79bb      	ldrb	r3, [r7, #6]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	f040 8178 	bne.w	8010bf0 <lcd_clear_digit+0x664>
    {
        switch (digit)
 8010900:	79fb      	ldrb	r3, [r7, #7]
 8010902:	2b06      	cmp	r3, #6
 8010904:	f200 8176 	bhi.w	8010bf4 <lcd_clear_digit+0x668>
 8010908:	a201      	add	r2, pc, #4	; (adr r2, 8010910 <lcd_clear_digit+0x384>)
 801090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801090e:	bf00      	nop
 8010910:	0801092d 	.word	0x0801092d
 8010914:	08010991 	.word	0x08010991
 8010918:	080109f5 	.word	0x080109f5
 801091c:	08010a59 	.word	0x08010a59
 8010920:	08010ac1 	.word	0x08010ac1
 8010924:	08010b25 	.word	0x08010b25
 8010928:	08010b89 	.word	0x08010b89
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 801092c:	4b63      	ldr	r3, [pc, #396]	; (8010abc <lcd_clear_digit+0x530>)
 801092e:	7b1b      	ldrb	r3, [r3, #12]
 8010930:	f023 0304 	bic.w	r3, r3, #4
 8010934:	b2da      	uxtb	r2, r3
 8010936:	4b61      	ldr	r3, [pc, #388]	; (8010abc <lcd_clear_digit+0x530>)
 8010938:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 801093a:	4b60      	ldr	r3, [pc, #384]	; (8010abc <lcd_clear_digit+0x530>)
 801093c:	7b1b      	ldrb	r3, [r3, #12]
 801093e:	f023 0308 	bic.w	r3, r3, #8
 8010942:	b2da      	uxtb	r2, r3
 8010944:	4b5d      	ldr	r3, [pc, #372]	; (8010abc <lcd_clear_digit+0x530>)
 8010946:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 8010948:	4b5c      	ldr	r3, [pc, #368]	; (8010abc <lcd_clear_digit+0x530>)
 801094a:	7c5b      	ldrb	r3, [r3, #17]
 801094c:	f023 0304 	bic.w	r3, r3, #4
 8010950:	b2da      	uxtb	r2, r3
 8010952:	4b5a      	ldr	r3, [pc, #360]	; (8010abc <lcd_clear_digit+0x530>)
 8010954:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 8010956:	4b59      	ldr	r3, [pc, #356]	; (8010abc <lcd_clear_digit+0x530>)
 8010958:	7c5b      	ldrb	r3, [r3, #17]
 801095a:	f023 0308 	bic.w	r3, r3, #8
 801095e:	b2da      	uxtb	r2, r3
 8010960:	4b56      	ldr	r3, [pc, #344]	; (8010abc <lcd_clear_digit+0x530>)
 8010962:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 8010964:	4b55      	ldr	r3, [pc, #340]	; (8010abc <lcd_clear_digit+0x530>)
 8010966:	789b      	ldrb	r3, [r3, #2]
 8010968:	f023 0304 	bic.w	r3, r3, #4
 801096c:	b2da      	uxtb	r2, r3
 801096e:	4b53      	ldr	r3, [pc, #332]	; (8010abc <lcd_clear_digit+0x530>)
 8010970:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 8010972:	4b52      	ldr	r3, [pc, #328]	; (8010abc <lcd_clear_digit+0x530>)
 8010974:	789b      	ldrb	r3, [r3, #2]
 8010976:	f023 0308 	bic.w	r3, r3, #8
 801097a:	b2da      	uxtb	r2, r3
 801097c:	4b4f      	ldr	r3, [pc, #316]	; (8010abc <lcd_clear_digit+0x530>)
 801097e:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010980:	4b4e      	ldr	r3, [pc, #312]	; (8010abc <lcd_clear_digit+0x530>)
 8010982:	79db      	ldrb	r3, [r3, #7]
 8010984:	f023 0308 	bic.w	r3, r3, #8
 8010988:	b2da      	uxtb	r2, r3
 801098a:	4b4c      	ldr	r3, [pc, #304]	; (8010abc <lcd_clear_digit+0x530>)
 801098c:	71da      	strb	r2, [r3, #7]
            break;
 801098e:	e132      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010990:	4b4a      	ldr	r3, [pc, #296]	; (8010abc <lcd_clear_digit+0x530>)
 8010992:	7b1b      	ldrb	r3, [r3, #12]
 8010994:	f023 0301 	bic.w	r3, r3, #1
 8010998:	b2da      	uxtb	r2, r3
 801099a:	4b48      	ldr	r3, [pc, #288]	; (8010abc <lcd_clear_digit+0x530>)
 801099c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 801099e:	4b47      	ldr	r3, [pc, #284]	; (8010abc <lcd_clear_digit+0x530>)
 80109a0:	7b1b      	ldrb	r3, [r3, #12]
 80109a2:	f023 0302 	bic.w	r3, r3, #2
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	4b44      	ldr	r3, [pc, #272]	; (8010abc <lcd_clear_digit+0x530>)
 80109aa:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 80109ac:	4b43      	ldr	r3, [pc, #268]	; (8010abc <lcd_clear_digit+0x530>)
 80109ae:	7c5b      	ldrb	r3, [r3, #17]
 80109b0:	f023 0301 	bic.w	r3, r3, #1
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	4b41      	ldr	r3, [pc, #260]	; (8010abc <lcd_clear_digit+0x530>)
 80109b8:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 80109ba:	4b40      	ldr	r3, [pc, #256]	; (8010abc <lcd_clear_digit+0x530>)
 80109bc:	7c5b      	ldrb	r3, [r3, #17]
 80109be:	f023 0302 	bic.w	r3, r3, #2
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	4b3d      	ldr	r3, [pc, #244]	; (8010abc <lcd_clear_digit+0x530>)
 80109c6:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 80109c8:	4b3c      	ldr	r3, [pc, #240]	; (8010abc <lcd_clear_digit+0x530>)
 80109ca:	789b      	ldrb	r3, [r3, #2]
 80109cc:	f023 0301 	bic.w	r3, r3, #1
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b3a      	ldr	r3, [pc, #232]	; (8010abc <lcd_clear_digit+0x530>)
 80109d4:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 80109d6:	4b39      	ldr	r3, [pc, #228]	; (8010abc <lcd_clear_digit+0x530>)
 80109d8:	789b      	ldrb	r3, [r3, #2]
 80109da:	f023 0302 	bic.w	r3, r3, #2
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	4b36      	ldr	r3, [pc, #216]	; (8010abc <lcd_clear_digit+0x530>)
 80109e2:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 80109e4:	4b35      	ldr	r3, [pc, #212]	; (8010abc <lcd_clear_digit+0x530>)
 80109e6:	79db      	ldrb	r3, [r3, #7]
 80109e8:	f023 0302 	bic.w	r3, r3, #2
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	4b33      	ldr	r3, [pc, #204]	; (8010abc <lcd_clear_digit+0x530>)
 80109f0:	71da      	strb	r2, [r3, #7]
            break;
 80109f2:	e100      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 80109f4:	4b31      	ldr	r3, [pc, #196]	; (8010abc <lcd_clear_digit+0x530>)
 80109f6:	7adb      	ldrb	r3, [r3, #11]
 80109f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	4b2f      	ldr	r3, [pc, #188]	; (8010abc <lcd_clear_digit+0x530>)
 8010a00:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010a02:	4b2e      	ldr	r3, [pc, #184]	; (8010abc <lcd_clear_digit+0x530>)
 8010a04:	7adb      	ldrb	r3, [r3, #11]
 8010a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	4b2b      	ldr	r3, [pc, #172]	; (8010abc <lcd_clear_digit+0x530>)
 8010a0e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010a10:	4b2a      	ldr	r3, [pc, #168]	; (8010abc <lcd_clear_digit+0x530>)
 8010a12:	7c1b      	ldrb	r3, [r3, #16]
 8010a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	4b28      	ldr	r3, [pc, #160]	; (8010abc <lcd_clear_digit+0x530>)
 8010a1c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 8010a1e:	4b27      	ldr	r3, [pc, #156]	; (8010abc <lcd_clear_digit+0x530>)
 8010a20:	7c1b      	ldrb	r3, [r3, #16]
 8010a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	4b24      	ldr	r3, [pc, #144]	; (8010abc <lcd_clear_digit+0x530>)
 8010a2a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010a2c:	4b23      	ldr	r3, [pc, #140]	; (8010abc <lcd_clear_digit+0x530>)
 8010a2e:	785b      	ldrb	r3, [r3, #1]
 8010a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	4b21      	ldr	r3, [pc, #132]	; (8010abc <lcd_clear_digit+0x530>)
 8010a38:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 8010a3a:	4b20      	ldr	r3, [pc, #128]	; (8010abc <lcd_clear_digit+0x530>)
 8010a3c:	785b      	ldrb	r3, [r3, #1]
 8010a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	4b1d      	ldr	r3, [pc, #116]	; (8010abc <lcd_clear_digit+0x530>)
 8010a46:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 8010a48:	4b1c      	ldr	r3, [pc, #112]	; (8010abc <lcd_clear_digit+0x530>)
 8010a4a:	799b      	ldrb	r3, [r3, #6]
 8010a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	4b1a      	ldr	r3, [pc, #104]	; (8010abc <lcd_clear_digit+0x530>)
 8010a54:	719a      	strb	r2, [r3, #6]
            break;
 8010a56:	e0ce      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 8010a58:	4b18      	ldr	r3, [pc, #96]	; (8010abc <lcd_clear_digit+0x530>)
 8010a5a:	7adb      	ldrb	r3, [r3, #11]
 8010a5c:	f023 0310 	bic.w	r3, r3, #16
 8010a60:	b2da      	uxtb	r2, r3
 8010a62:	4b16      	ldr	r3, [pc, #88]	; (8010abc <lcd_clear_digit+0x530>)
 8010a64:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 8010a66:	4b15      	ldr	r3, [pc, #84]	; (8010abc <lcd_clear_digit+0x530>)
 8010a68:	7adb      	ldrb	r3, [r3, #11]
 8010a6a:	f023 0320 	bic.w	r3, r3, #32
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	4b12      	ldr	r3, [pc, #72]	; (8010abc <lcd_clear_digit+0x530>)
 8010a72:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 8010a74:	4b11      	ldr	r3, [pc, #68]	; (8010abc <lcd_clear_digit+0x530>)
 8010a76:	7c1b      	ldrb	r3, [r3, #16]
 8010a78:	f023 0310 	bic.w	r3, r3, #16
 8010a7c:	b2da      	uxtb	r2, r3
 8010a7e:	4b0f      	ldr	r3, [pc, #60]	; (8010abc <lcd_clear_digit+0x530>)
 8010a80:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010a82:	4b0e      	ldr	r3, [pc, #56]	; (8010abc <lcd_clear_digit+0x530>)
 8010a84:	7c1b      	ldrb	r3, [r3, #16]
 8010a86:	f023 0320 	bic.w	r3, r3, #32
 8010a8a:	b2da      	uxtb	r2, r3
 8010a8c:	4b0b      	ldr	r3, [pc, #44]	; (8010abc <lcd_clear_digit+0x530>)
 8010a8e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010a90:	4b0a      	ldr	r3, [pc, #40]	; (8010abc <lcd_clear_digit+0x530>)
 8010a92:	785b      	ldrb	r3, [r3, #1]
 8010a94:	f023 0310 	bic.w	r3, r3, #16
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	4b08      	ldr	r3, [pc, #32]	; (8010abc <lcd_clear_digit+0x530>)
 8010a9c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010a9e:	4b07      	ldr	r3, [pc, #28]	; (8010abc <lcd_clear_digit+0x530>)
 8010aa0:	785b      	ldrb	r3, [r3, #1]
 8010aa2:	f023 0320 	bic.w	r3, r3, #32
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	4b04      	ldr	r3, [pc, #16]	; (8010abc <lcd_clear_digit+0x530>)
 8010aaa:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010aac:	4b03      	ldr	r3, [pc, #12]	; (8010abc <lcd_clear_digit+0x530>)
 8010aae:	799b      	ldrb	r3, [r3, #6]
 8010ab0:	f023 0320 	bic.w	r3, r3, #32
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	4b01      	ldr	r3, [pc, #4]	; (8010abc <lcd_clear_digit+0x530>)
 8010ab8:	719a      	strb	r2, [r3, #6]
            break;
 8010aba:	e09c      	b.n	8010bf6 <lcd_clear_digit+0x66a>
 8010abc:	20001da0 	.word	0x20001da0
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010ac0:	4b50      	ldr	r3, [pc, #320]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ac2:	7adb      	ldrb	r3, [r3, #11]
 8010ac4:	f023 0304 	bic.w	r3, r3, #4
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	4b4e      	ldr	r3, [pc, #312]	; (8010c04 <lcd_clear_digit+0x678>)
 8010acc:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010ace:	4b4d      	ldr	r3, [pc, #308]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ad0:	7adb      	ldrb	r3, [r3, #11]
 8010ad2:	f023 0308 	bic.w	r3, r3, #8
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	4b4a      	ldr	r3, [pc, #296]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ada:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010adc:	4b49      	ldr	r3, [pc, #292]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ade:	7c1b      	ldrb	r3, [r3, #16]
 8010ae0:	f023 0304 	bic.w	r3, r3, #4
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b47      	ldr	r3, [pc, #284]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ae8:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010aea:	4b46      	ldr	r3, [pc, #280]	; (8010c04 <lcd_clear_digit+0x678>)
 8010aec:	7c1b      	ldrb	r3, [r3, #16]
 8010aee:	f023 0308 	bic.w	r3, r3, #8
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	4b43      	ldr	r3, [pc, #268]	; (8010c04 <lcd_clear_digit+0x678>)
 8010af6:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010af8:	4b42      	ldr	r3, [pc, #264]	; (8010c04 <lcd_clear_digit+0x678>)
 8010afa:	785b      	ldrb	r3, [r3, #1]
 8010afc:	f023 0304 	bic.w	r3, r3, #4
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b40      	ldr	r3, [pc, #256]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b04:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010b06:	4b3f      	ldr	r3, [pc, #252]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b08:	785b      	ldrb	r3, [r3, #1]
 8010b0a:	f023 0308 	bic.w	r3, r3, #8
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	4b3c      	ldr	r3, [pc, #240]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b12:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010b14:	4b3b      	ldr	r3, [pc, #236]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b16:	799b      	ldrb	r3, [r3, #6]
 8010b18:	f023 0308 	bic.w	r3, r3, #8
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	4b39      	ldr	r3, [pc, #228]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b20:	719a      	strb	r2, [r3, #6]
            break;
 8010b22:	e068      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010b24:	4b37      	ldr	r3, [pc, #220]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b26:	7adb      	ldrb	r3, [r3, #11]
 8010b28:	f023 0301 	bic.w	r3, r3, #1
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b35      	ldr	r3, [pc, #212]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b30:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010b32:	4b34      	ldr	r3, [pc, #208]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b34:	7adb      	ldrb	r3, [r3, #11]
 8010b36:	f023 0302 	bic.w	r3, r3, #2
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	4b31      	ldr	r3, [pc, #196]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b3e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010b40:	4b30      	ldr	r3, [pc, #192]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b42:	7c1b      	ldrb	r3, [r3, #16]
 8010b44:	f023 0301 	bic.w	r3, r3, #1
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	4b2e      	ldr	r3, [pc, #184]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b4c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010b4e:	4b2d      	ldr	r3, [pc, #180]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b50:	7c1b      	ldrb	r3, [r3, #16]
 8010b52:	f023 0302 	bic.w	r3, r3, #2
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4b2a      	ldr	r3, [pc, #168]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b5a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010b5c:	4b29      	ldr	r3, [pc, #164]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b5e:	785b      	ldrb	r3, [r3, #1]
 8010b60:	f023 0301 	bic.w	r3, r3, #1
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	4b27      	ldr	r3, [pc, #156]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b68:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010b6a:	4b26      	ldr	r3, [pc, #152]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b6c:	785b      	ldrb	r3, [r3, #1]
 8010b6e:	f023 0302 	bic.w	r3, r3, #2
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	4b23      	ldr	r3, [pc, #140]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b76:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010b78:	4b22      	ldr	r3, [pc, #136]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b7a:	799b      	ldrb	r3, [r3, #6]
 8010b7c:	f023 0302 	bic.w	r3, r3, #2
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	4b20      	ldr	r3, [pc, #128]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b84:	719a      	strb	r2, [r3, #6]
            break;
 8010b86:	e036      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010b88:	4b1e      	ldr	r3, [pc, #120]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b8a:	7a9b      	ldrb	r3, [r3, #10]
 8010b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	4b1c      	ldr	r3, [pc, #112]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b94:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010b96:	4b1b      	ldr	r3, [pc, #108]	; (8010c04 <lcd_clear_digit+0x678>)
 8010b98:	7a9b      	ldrb	r3, [r3, #10]
 8010b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	4b18      	ldr	r3, [pc, #96]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ba2:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010ba4:	4b17      	ldr	r3, [pc, #92]	; (8010c04 <lcd_clear_digit+0x678>)
 8010ba6:	7bdb      	ldrb	r3, [r3, #15]
 8010ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	4b15      	ldr	r3, [pc, #84]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bb0:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010bb2:	4b14      	ldr	r3, [pc, #80]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bb4:	7bdb      	ldrb	r3, [r3, #15]
 8010bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4b11      	ldr	r3, [pc, #68]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bbe:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010bc0:	4b10      	ldr	r3, [pc, #64]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	4b0e      	ldr	r3, [pc, #56]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bcc:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010bce:	4b0d      	ldr	r3, [pc, #52]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	4b0a      	ldr	r3, [pc, #40]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bda:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <lcd_clear_digit+0x678>)
 8010bde:	795b      	ldrb	r3, [r3, #5]
 8010be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	4b07      	ldr	r3, [pc, #28]	; (8010c04 <lcd_clear_digit+0x678>)
 8010be8:	715a      	strb	r2, [r3, #5]
            break;
 8010bea:	e004      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            break;
 8010bec:	bf00      	nop
 8010bee:	e002      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010bf0:	bf00      	nop
 8010bf2:	e000      	b.n	8010bf6 <lcd_clear_digit+0x66a>
            break;
 8010bf4:	bf00      	nop
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20001da0 	.word	0x20001da0

08010c08 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	4603      	mov	r3, r0
 8010c10:	460a      	mov	r2, r1
 8010c12:	71fb      	strb	r3, [r7, #7]
 8010c14:	4613      	mov	r3, r2
 8010c16:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010c18:	79fb      	ldrb	r3, [r7, #7]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d14c      	bne.n	8010cb8 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010c1e:	79bb      	ldrb	r3, [r7, #6]
 8010c20:	2b06      	cmp	r3, #6
 8010c22:	f200 808f 	bhi.w	8010d44 <lcd_clear_point+0x13c>
 8010c26:	a201      	add	r2, pc, #4	; (adr r2, 8010c2c <lcd_clear_point+0x24>)
 8010c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2c:	08010c49 	.word	0x08010c49
 8010c30:	08010c59 	.word	0x08010c59
 8010c34:	08010c69 	.word	0x08010c69
 8010c38:	08010c79 	.word	0x08010c79
 8010c3c:	08010c89 	.word	0x08010c89
 8010c40:	08010c99 	.word	0x08010c99
 8010c44:	08010ca9 	.word	0x08010ca9
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010c48:	4b44      	ldr	r3, [pc, #272]	; (8010d5c <lcd_clear_point+0x154>)
 8010c4a:	79db      	ldrb	r3, [r3, #7]
 8010c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	4b42      	ldr	r3, [pc, #264]	; (8010d5c <lcd_clear_point+0x154>)
 8010c54:	71da      	strb	r2, [r3, #7]
            break;
 8010c56:	e07a      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010c58:	4b40      	ldr	r3, [pc, #256]	; (8010d5c <lcd_clear_point+0x154>)
 8010c5a:	7a1b      	ldrb	r3, [r3, #8]
 8010c5c:	f023 0302 	bic.w	r3, r3, #2
 8010c60:	b2da      	uxtb	r2, r3
 8010c62:	4b3e      	ldr	r3, [pc, #248]	; (8010d5c <lcd_clear_point+0x154>)
 8010c64:	721a      	strb	r2, [r3, #8]
            break;
 8010c66:	e072      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010c68:	4b3c      	ldr	r3, [pc, #240]	; (8010d5c <lcd_clear_point+0x154>)
 8010c6a:	7a1b      	ldrb	r3, [r3, #8]
 8010c6c:	f023 0308 	bic.w	r3, r3, #8
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	4b3a      	ldr	r3, [pc, #232]	; (8010d5c <lcd_clear_point+0x154>)
 8010c74:	721a      	strb	r2, [r3, #8]
            break;
 8010c76:	e06a      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010c78:	4b38      	ldr	r3, [pc, #224]	; (8010d5c <lcd_clear_point+0x154>)
 8010c7a:	7a1b      	ldrb	r3, [r3, #8]
 8010c7c:	f023 0320 	bic.w	r3, r3, #32
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	4b36      	ldr	r3, [pc, #216]	; (8010d5c <lcd_clear_point+0x154>)
 8010c84:	721a      	strb	r2, [r3, #8]
            break;
 8010c86:	e062      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010c88:	4b34      	ldr	r3, [pc, #208]	; (8010d5c <lcd_clear_point+0x154>)
 8010c8a:	7a1b      	ldrb	r3, [r3, #8]
 8010c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	4b32      	ldr	r3, [pc, #200]	; (8010d5c <lcd_clear_point+0x154>)
 8010c94:	721a      	strb	r2, [r3, #8]
            break;
 8010c96:	e05a      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010c98:	4b30      	ldr	r3, [pc, #192]	; (8010d5c <lcd_clear_point+0x154>)
 8010c9a:	7a5b      	ldrb	r3, [r3, #9]
 8010c9c:	f023 0302 	bic.w	r3, r3, #2
 8010ca0:	b2da      	uxtb	r2, r3
 8010ca2:	4b2e      	ldr	r3, [pc, #184]	; (8010d5c <lcd_clear_point+0x154>)
 8010ca4:	725a      	strb	r2, [r3, #9]
            break;
 8010ca6:	e052      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010ca8:	4b2c      	ldr	r3, [pc, #176]	; (8010d5c <lcd_clear_point+0x154>)
 8010caa:	7a5b      	ldrb	r3, [r3, #9]
 8010cac:	f023 0308 	bic.w	r3, r3, #8
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	4b2a      	ldr	r3, [pc, #168]	; (8010d5c <lcd_clear_point+0x154>)
 8010cb4:	725a      	strb	r2, [r3, #9]
            break;
 8010cb6:	e04a      	b.n	8010d4e <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d144      	bne.n	8010d48 <lcd_clear_point+0x140>
    {
        switch (point)
 8010cbe:	79bb      	ldrb	r3, [r7, #6]
 8010cc0:	2b05      	cmp	r3, #5
 8010cc2:	d843      	bhi.n	8010d4c <lcd_clear_point+0x144>
 8010cc4:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <lcd_clear_point+0xc4>)
 8010cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cca:	bf00      	nop
 8010ccc:	08010ce5 	.word	0x08010ce5
 8010cd0:	08010cf5 	.word	0x08010cf5
 8010cd4:	08010d05 	.word	0x08010d05
 8010cd8:	08010d15 	.word	0x08010d15
 8010cdc:	08010d25 	.word	0x08010d25
 8010ce0:	08010d35 	.word	0x08010d35
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010ce4:	4b1d      	ldr	r3, [pc, #116]	; (8010d5c <lcd_clear_point+0x154>)
 8010ce6:	79db      	ldrb	r3, [r3, #7]
 8010ce8:	f023 0304 	bic.w	r3, r3, #4
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b1b      	ldr	r3, [pc, #108]	; (8010d5c <lcd_clear_point+0x154>)
 8010cf0:	71da      	strb	r2, [r3, #7]
            break;
 8010cf2:	e02c      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010cf4:	4b19      	ldr	r3, [pc, #100]	; (8010d5c <lcd_clear_point+0x154>)
 8010cf6:	79db      	ldrb	r3, [r3, #7]
 8010cf8:	f023 0301 	bic.w	r3, r3, #1
 8010cfc:	b2da      	uxtb	r2, r3
 8010cfe:	4b17      	ldr	r3, [pc, #92]	; (8010d5c <lcd_clear_point+0x154>)
 8010d00:	71da      	strb	r2, [r3, #7]
            break;
 8010d02:	e024      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <lcd_clear_point+0x154>)
 8010d06:	799b      	ldrb	r3, [r3, #6]
 8010d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	4b13      	ldr	r3, [pc, #76]	; (8010d5c <lcd_clear_point+0x154>)
 8010d10:	719a      	strb	r2, [r3, #6]
            break;
 8010d12:	e01c      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010d14:	4b11      	ldr	r3, [pc, #68]	; (8010d5c <lcd_clear_point+0x154>)
 8010d16:	799b      	ldrb	r3, [r3, #6]
 8010d18:	f023 0310 	bic.w	r3, r3, #16
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <lcd_clear_point+0x154>)
 8010d20:	719a      	strb	r2, [r3, #6]
            break;
 8010d22:	e014      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010d24:	4b0d      	ldr	r3, [pc, #52]	; (8010d5c <lcd_clear_point+0x154>)
 8010d26:	799b      	ldrb	r3, [r3, #6]
 8010d28:	f023 0304 	bic.w	r3, r3, #4
 8010d2c:	b2da      	uxtb	r2, r3
 8010d2e:	4b0b      	ldr	r3, [pc, #44]	; (8010d5c <lcd_clear_point+0x154>)
 8010d30:	719a      	strb	r2, [r3, #6]
            break;
 8010d32:	e00c      	b.n	8010d4e <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010d34:	4b09      	ldr	r3, [pc, #36]	; (8010d5c <lcd_clear_point+0x154>)
 8010d36:	799b      	ldrb	r3, [r3, #6]
 8010d38:	f023 0301 	bic.w	r3, r3, #1
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	4b07      	ldr	r3, [pc, #28]	; (8010d5c <lcd_clear_point+0x154>)
 8010d40:	719a      	strb	r2, [r3, #6]
            break;
 8010d42:	e004      	b.n	8010d4e <lcd_clear_point+0x146>
            break;
 8010d44:	bf00      	nop
 8010d46:	e002      	b.n	8010d4e <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010d48:	bf00      	nop
 8010d4a:	e000      	b.n	8010d4e <lcd_clear_point+0x146>
            break;
 8010d4c:	bf00      	nop
}
 8010d4e:	bf00      	nop
 8010d50:	370c      	adds	r7, #12
 8010d52:	46bd      	mov	sp, r7
 8010d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop
 8010d5c:	20001da0 	.word	0x20001da0

08010d60 <lcd_clear_time_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	460a      	mov	r2, r1
 8010d6a:	71fb      	strb	r3, [r7, #7]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010d70:	79fb      	ldrb	r3, [r7, #7]
 8010d72:	2b03      	cmp	r3, #3
 8010d74:	d82a      	bhi.n	8010dcc <lcd_clear_time_unit+0x6c>
 8010d76:	a201      	add	r2, pc, #4	; (adr r2, 8010d7c <lcd_clear_time_unit+0x1c>)
 8010d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d7c:	08010d8d 	.word	0x08010d8d
 8010d80:	08010d9d 	.word	0x08010d9d
 8010d84:	08010dad 	.word	0x08010dad
 8010d88:	08010dbd 	.word	0x08010dbd
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010d8c:	4b14      	ldr	r3, [pc, #80]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010d8e:	795b      	ldrb	r3, [r3, #5]
 8010d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	4b12      	ldr	r3, [pc, #72]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010d98:	715a      	strb	r2, [r3, #5]
        break;
 8010d9a:	e018      	b.n	8010dce <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010d9c:	4b10      	ldr	r3, [pc, #64]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010d9e:	7a5b      	ldrb	r3, [r3, #9]
 8010da0:	f023 0320 	bic.w	r3, r3, #32
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010da8:	725a      	strb	r2, [r3, #9]
        break;
 8010daa:	e010      	b.n	8010dce <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010dac:	4b0c      	ldr	r3, [pc, #48]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010dae:	7a9b      	ldrb	r3, [r3, #10]
 8010db0:	f023 0320 	bic.w	r3, r3, #32
 8010db4:	b2da      	uxtb	r2, r3
 8010db6:	4b0a      	ldr	r3, [pc, #40]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010db8:	729a      	strb	r2, [r3, #10]
        break;
 8010dba:	e008      	b.n	8010dce <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010dbc:	4b08      	ldr	r3, [pc, #32]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010dbe:	7a5b      	ldrb	r3, [r3, #9]
 8010dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc4:	b2da      	uxtb	r2, r3
 8010dc6:	4b06      	ldr	r3, [pc, #24]	; (8010de0 <lcd_clear_time_unit+0x80>)
 8010dc8:	725a      	strb	r2, [r3, #9]
        break;
 8010dca:	e000      	b.n	8010dce <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010dcc:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010dce:	79bb      	ldrb	r3, [r7, #6]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f001 fbff 	bl	80125d4 <pcf8553_blink>
}
 8010dd6:	bf00      	nop
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	20001da0 	.word	0x20001da0

08010de4 <lcd_clear_vol_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	460a      	mov	r2, r1
 8010dee:	71fb      	strb	r3, [r7, #7]
 8010df0:	4613      	mov	r3, r2
 8010df2:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010df4:	79fb      	ldrb	r3, [r7, #7]
 8010df6:	2b07      	cmp	r3, #7
 8010df8:	f200 822c 	bhi.w	8011254 <lcd_clear_vol_unit+0x470>
 8010dfc:	a201      	add	r2, pc, #4	; (adr r2, 8010e04 <lcd_clear_vol_unit+0x20>)
 8010dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e02:	bf00      	nop
 8010e04:	08010e25 	.word	0x08010e25
 8010e08:	08010f17 	.word	0x08010f17
 8010e0c:	08010fc1 	.word	0x08010fc1
 8010e10:	08010e7b 	.word	0x08010e7b
 8010e14:	0801111b 	.word	0x0801111b
 8010e18:	08011055 	.word	0x08011055
 8010e1c:	0801119b 	.word	0x0801119b
 8010e20:	0801121b 	.word	0x0801121b
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e24:	4b8a      	ldr	r3, [pc, #552]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e26:	7bdb      	ldrb	r3, [r3, #15]
 8010e28:	f023 0320 	bic.w	r3, r3, #32
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	4b88      	ldr	r3, [pc, #544]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e30:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e32:	4b87      	ldr	r3, [pc, #540]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	f023 0320 	bic.w	r3, r3, #32
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	4b84      	ldr	r3, [pc, #528]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e3e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010e40:	4b83      	ldr	r3, [pc, #524]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e42:	795b      	ldrb	r3, [r3, #5]
 8010e44:	f023 0320 	bic.w	r3, r3, #32
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b81      	ldr	r3, [pc, #516]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e4c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010e4e:	4b80      	ldr	r3, [pc, #512]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e50:	7b9b      	ldrb	r3, [r3, #14]
 8010e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	4b7d      	ldr	r3, [pc, #500]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e5a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010e5c:	4b7c      	ldr	r3, [pc, #496]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e5e:	7a9b      	ldrb	r3, [r3, #10]
 8010e60:	f023 0301 	bic.w	r3, r3, #1
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	4b7a      	ldr	r3, [pc, #488]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e68:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010e6a:	4b79      	ldr	r3, [pc, #484]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e6c:	7a5b      	ldrb	r3, [r3, #9]
 8010e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b76      	ldr	r3, [pc, #472]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e76:	725a      	strb	r2, [r3, #9]
        break;
 8010e78:	e1ed      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e7a:	4b75      	ldr	r3, [pc, #468]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e7c:	7bdb      	ldrb	r3, [r3, #15]
 8010e7e:	f023 0320 	bic.w	r3, r3, #32
 8010e82:	b2da      	uxtb	r2, r3
 8010e84:	4b72      	ldr	r3, [pc, #456]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e86:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010e88:	4b71      	ldr	r3, [pc, #452]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e8a:	7bdb      	ldrb	r3, [r3, #15]
 8010e8c:	f023 0310 	bic.w	r3, r3, #16
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	4b6f      	ldr	r3, [pc, #444]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e94:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010e96:	4b6e      	ldr	r3, [pc, #440]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010e98:	7bdb      	ldrb	r3, [r3, #15]
 8010e9a:	f023 0304 	bic.w	r3, r3, #4
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	4b6b      	ldr	r3, [pc, #428]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ea2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010ea4:	4b6a      	ldr	r3, [pc, #424]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	f023 0320 	bic.w	r3, r3, #32
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	4b68      	ldr	r3, [pc, #416]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010eb0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010eb2:	4b67      	ldr	r3, [pc, #412]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010eb4:	795b      	ldrb	r3, [r3, #5]
 8010eb6:	f023 0310 	bic.w	r3, r3, #16
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	4b64      	ldr	r3, [pc, #400]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ebe:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ec0:	4b63      	ldr	r3, [pc, #396]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ec2:	7b9b      	ldrb	r3, [r3, #14]
 8010ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	4b61      	ldr	r3, [pc, #388]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ecc:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010ece:	4b60      	ldr	r3, [pc, #384]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ed0:	7bdb      	ldrb	r3, [r3, #15]
 8010ed2:	f023 0302 	bic.w	r3, r3, #2
 8010ed6:	b2da      	uxtb	r2, r3
 8010ed8:	4b5d      	ldr	r3, [pc, #372]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010eda:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010edc:	4b5c      	ldr	r3, [pc, #368]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	f023 0301 	bic.w	r3, r3, #1
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	4b5a      	ldr	r3, [pc, #360]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ee8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010eea:	4b59      	ldr	r3, [pc, #356]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	f023 0302 	bic.w	r3, r3, #2
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	4b56      	ldr	r3, [pc, #344]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ef6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010ef8:	4b55      	ldr	r3, [pc, #340]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010efa:	791b      	ldrb	r3, [r3, #4]
 8010efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	4b53      	ldr	r3, [pc, #332]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f04:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010f06:	4b52      	ldr	r3, [pc, #328]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f08:	795b      	ldrb	r3, [r3, #5]
 8010f0a:	f023 0302 	bic.w	r3, r3, #2
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	4b4f      	ldr	r3, [pc, #316]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f12:	715a      	strb	r2, [r3, #5]
        break;
 8010f14:	e19f      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010f16:	4b4e      	ldr	r3, [pc, #312]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f18:	7bdb      	ldrb	r3, [r3, #15]
 8010f1a:	f023 0320 	bic.w	r3, r3, #32
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	4b4b      	ldr	r3, [pc, #300]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f22:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010f24:	4b4a      	ldr	r3, [pc, #296]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f26:	7a9b      	ldrb	r3, [r3, #10]
 8010f28:	f023 0304 	bic.w	r3, r3, #4
 8010f2c:	b2da      	uxtb	r2, r3
 8010f2e:	4b48      	ldr	r3, [pc, #288]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f30:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010f32:	4b47      	ldr	r3, [pc, #284]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f34:	7bdb      	ldrb	r3, [r3, #15]
 8010f36:	f023 0310 	bic.w	r3, r3, #16
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	4b44      	ldr	r3, [pc, #272]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f3e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010f40:	4b43      	ldr	r3, [pc, #268]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f42:	7bdb      	ldrb	r3, [r3, #15]
 8010f44:	f023 0308 	bic.w	r3, r3, #8
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b41      	ldr	r3, [pc, #260]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f4c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010f4e:	4b40      	ldr	r3, [pc, #256]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f023 0320 	bic.w	r3, r3, #32
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4b3d      	ldr	r3, [pc, #244]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f5a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010f5c:	4b3c      	ldr	r3, [pc, #240]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	f023 0308 	bic.w	r3, r3, #8
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	4b3a      	ldr	r3, [pc, #232]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f68:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010f6a:	4b39      	ldr	r3, [pc, #228]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f6c:	7b9b      	ldrb	r3, [r3, #14]
 8010f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	4b36      	ldr	r3, [pc, #216]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f76:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010f78:	4b35      	ldr	r3, [pc, #212]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f7a:	7cdb      	ldrb	r3, [r3, #19]
 8010f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	4b33      	ldr	r3, [pc, #204]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f84:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f86:	4b32      	ldr	r3, [pc, #200]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f88:	7cdb      	ldrb	r3, [r3, #19]
 8010f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	4b2f      	ldr	r3, [pc, #188]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f92:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f94:	4b2e      	ldr	r3, [pc, #184]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	f023 0301 	bic.w	r3, r3, #1
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	4b2c      	ldr	r3, [pc, #176]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fa0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010fa2:	4b2b      	ldr	r3, [pc, #172]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fa4:	791b      	ldrb	r3, [r3, #4]
 8010fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	4b28      	ldr	r3, [pc, #160]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fae:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010fb0:	4b27      	ldr	r3, [pc, #156]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fb2:	795b      	ldrb	r3, [r3, #5]
 8010fb4:	f023 0302 	bic.w	r3, r3, #2
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	4b25      	ldr	r3, [pc, #148]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fbc:	715a      	strb	r2, [r3, #5]
        break;
 8010fbe:	e14a      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010fc0:	4b23      	ldr	r3, [pc, #140]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fc2:	7bdb      	ldrb	r3, [r3, #15]
 8010fc4:	f023 0320 	bic.w	r3, r3, #32
 8010fc8:	b2da      	uxtb	r2, r3
 8010fca:	4b21      	ldr	r3, [pc, #132]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fcc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010fce:	4b20      	ldr	r3, [pc, #128]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fd0:	7a9b      	ldrb	r3, [r3, #10]
 8010fd2:	f023 0304 	bic.w	r3, r3, #4
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	4b1d      	ldr	r3, [pc, #116]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fda:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010fdc:	4b1c      	ldr	r3, [pc, #112]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fde:	7bdb      	ldrb	r3, [r3, #15]
 8010fe0:	f023 0310 	bic.w	r3, r3, #16
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	4b1a      	ldr	r3, [pc, #104]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fe8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010fea:	4b19      	ldr	r3, [pc, #100]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010fec:	7bdb      	ldrb	r3, [r3, #15]
 8010fee:	f023 0308 	bic.w	r3, r3, #8
 8010ff2:	b2da      	uxtb	r2, r3
 8010ff4:	4b16      	ldr	r3, [pc, #88]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ff6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010ff8:	4b15      	ldr	r3, [pc, #84]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	f023 0320 	bic.w	r3, r3, #32
 8011000:	b2da      	uxtb	r2, r3
 8011002:	4b13      	ldr	r3, [pc, #76]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011004:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011006:	4b12      	ldr	r3, [pc, #72]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	f023 0308 	bic.w	r3, r3, #8
 801100e:	b2da      	uxtb	r2, r3
 8011010:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011012:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011014:	4b0e      	ldr	r3, [pc, #56]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011016:	7b9b      	ldrb	r3, [r3, #14]
 8011018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801101c:	b2da      	uxtb	r2, r3
 801101e:	4b0c      	ldr	r3, [pc, #48]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011020:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011022:	4b0b      	ldr	r3, [pc, #44]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011024:	7bdb      	ldrb	r3, [r3, #15]
 8011026:	f023 0302 	bic.w	r3, r3, #2
 801102a:	b2da      	uxtb	r2, r3
 801102c:	4b08      	ldr	r3, [pc, #32]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 801102e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	f023 0302 	bic.w	r3, r3, #2
 8011038:	b2da      	uxtb	r2, r3
 801103a:	4b05      	ldr	r3, [pc, #20]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 801103c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801103e:	4b04      	ldr	r3, [pc, #16]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 8011040:	795b      	ldrb	r3, [r3, #5]
 8011042:	f023 0302 	bic.w	r3, r3, #2
 8011046:	b2da      	uxtb	r2, r3
 8011048:	4b01      	ldr	r3, [pc, #4]	; (8011050 <lcd_clear_vol_unit+0x26c>)
 801104a:	715a      	strb	r2, [r3, #5]
        break;
 801104c:	e103      	b.n	8011256 <lcd_clear_vol_unit+0x472>
 801104e:	bf00      	nop
 8011050:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011054:	4b84      	ldr	r3, [pc, #528]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011056:	7a9b      	ldrb	r3, [r3, #10]
 8011058:	f023 0308 	bic.w	r3, r3, #8
 801105c:	b2da      	uxtb	r2, r3
 801105e:	4b82      	ldr	r3, [pc, #520]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011060:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8011062:	4b81      	ldr	r3, [pc, #516]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011064:	7a9b      	ldrb	r3, [r3, #10]
 8011066:	f023 0310 	bic.w	r3, r3, #16
 801106a:	b2da      	uxtb	r2, r3
 801106c:	4b7e      	ldr	r3, [pc, #504]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801106e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011070:	4b7d      	ldr	r3, [pc, #500]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011072:	7bdb      	ldrb	r3, [r3, #15]
 8011074:	f023 0308 	bic.w	r3, r3, #8
 8011078:	b2da      	uxtb	r2, r3
 801107a:	4b7b      	ldr	r3, [pc, #492]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801107c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801107e:	4b7a      	ldr	r3, [pc, #488]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	f023 0310 	bic.w	r3, r3, #16
 8011086:	b2da      	uxtb	r2, r3
 8011088:	4b77      	ldr	r3, [pc, #476]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801108a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 801108c:	4b76      	ldr	r3, [pc, #472]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801108e:	795b      	ldrb	r3, [r3, #5]
 8011090:	f023 0304 	bic.w	r3, r3, #4
 8011094:	b2da      	uxtb	r2, r3
 8011096:	4b74      	ldr	r3, [pc, #464]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011098:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801109a:	4b73      	ldr	r3, [pc, #460]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	f023 0308 	bic.w	r3, r3, #8
 80110a2:	b2da      	uxtb	r2, r3
 80110a4:	4b70      	ldr	r3, [pc, #448]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110a6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 80110a8:	4b6f      	ldr	r3, [pc, #444]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110aa:	795b      	ldrb	r3, [r3, #5]
 80110ac:	f023 0320 	bic.w	r3, r3, #32
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	4b6d      	ldr	r3, [pc, #436]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110b4:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80110b6:	4b6c      	ldr	r3, [pc, #432]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110b8:	7b9b      	ldrb	r3, [r3, #14]
 80110ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b69      	ldr	r3, [pc, #420]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110c2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80110c4:	4b68      	ldr	r3, [pc, #416]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110c6:	7bdb      	ldrb	r3, [r3, #15]
 80110c8:	f023 0302 	bic.w	r3, r3, #2
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	4b66      	ldr	r3, [pc, #408]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110d0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 80110d2:	4b65      	ldr	r3, [pc, #404]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110d4:	7cdb      	ldrb	r3, [r3, #19]
 80110d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110da:	b2da      	uxtb	r2, r3
 80110dc:	4b62      	ldr	r3, [pc, #392]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110de:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80110e0:	4b61      	ldr	r3, [pc, #388]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110e2:	7cdb      	ldrb	r3, [r3, #19]
 80110e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	4b5f      	ldr	r3, [pc, #380]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110ec:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80110ee:	4b5e      	ldr	r3, [pc, #376]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	f023 0301 	bic.w	r3, r3, #1
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	4b5b      	ldr	r3, [pc, #364]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110fa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80110fc:	4b5a      	ldr	r3, [pc, #360]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f023 0302 	bic.w	r3, r3, #2
 8011104:	b2da      	uxtb	r2, r3
 8011106:	4b58      	ldr	r3, [pc, #352]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011108:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 801110a:	4b57      	ldr	r3, [pc, #348]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801110c:	795b      	ldrb	r3, [r3, #5]
 801110e:	f023 0301 	bic.w	r3, r3, #1
 8011112:	b2da      	uxtb	r2, r3
 8011114:	4b54      	ldr	r3, [pc, #336]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011116:	715a      	strb	r2, [r3, #5]
        break;
 8011118:	e09d      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801111a:	4b53      	ldr	r3, [pc, #332]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801111c:	7a9b      	ldrb	r3, [r3, #10]
 801111e:	f023 0308 	bic.w	r3, r3, #8
 8011122:	b2da      	uxtb	r2, r3
 8011124:	4b50      	ldr	r3, [pc, #320]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011126:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011128:	4b4f      	ldr	r3, [pc, #316]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801112a:	7bdb      	ldrb	r3, [r3, #15]
 801112c:	f023 0320 	bic.w	r3, r3, #32
 8011130:	b2da      	uxtb	r2, r3
 8011132:	4b4d      	ldr	r3, [pc, #308]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011134:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011136:	4b4c      	ldr	r3, [pc, #304]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	f023 0310 	bic.w	r3, r3, #16
 801113e:	b2da      	uxtb	r2, r3
 8011140:	4b49      	ldr	r3, [pc, #292]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011142:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011144:	4b48      	ldr	r3, [pc, #288]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	f023 0320 	bic.w	r3, r3, #32
 801114c:	b2da      	uxtb	r2, r3
 801114e:	4b46      	ldr	r3, [pc, #280]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011150:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011152:	4b45      	ldr	r3, [pc, #276]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	f023 0308 	bic.w	r3, r3, #8
 801115a:	b2da      	uxtb	r2, r3
 801115c:	4b42      	ldr	r3, [pc, #264]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801115e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011160:	4b41      	ldr	r3, [pc, #260]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011162:	795b      	ldrb	r3, [r3, #5]
 8011164:	f023 0320 	bic.w	r3, r3, #32
 8011168:	b2da      	uxtb	r2, r3
 801116a:	4b3f      	ldr	r3, [pc, #252]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801116c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801116e:	4b3e      	ldr	r3, [pc, #248]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011170:	7bdb      	ldrb	r3, [r3, #15]
 8011172:	f023 0302 	bic.w	r3, r3, #2
 8011176:	b2da      	uxtb	r2, r3
 8011178:	4b3b      	ldr	r3, [pc, #236]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801117a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801117c:	4b3a      	ldr	r3, [pc, #232]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	f023 0302 	bic.w	r3, r3, #2
 8011184:	b2da      	uxtb	r2, r3
 8011186:	4b38      	ldr	r3, [pc, #224]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011188:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801118a:	4b37      	ldr	r3, [pc, #220]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801118c:	795b      	ldrb	r3, [r3, #5]
 801118e:	f023 0302 	bic.w	r3, r3, #2
 8011192:	b2da      	uxtb	r2, r3
 8011194:	4b34      	ldr	r3, [pc, #208]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011196:	715a      	strb	r2, [r3, #5]
        break;
 8011198:	e05d      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801119a:	4b33      	ldr	r3, [pc, #204]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801119c:	7a9b      	ldrb	r3, [r3, #10]
 801119e:	f023 0308 	bic.w	r3, r3, #8
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	4b30      	ldr	r3, [pc, #192]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111a6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80111a8:	4b2f      	ldr	r3, [pc, #188]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111aa:	7bdb      	ldrb	r3, [r3, #15]
 80111ac:	f023 0320 	bic.w	r3, r3, #32
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	4b2d      	ldr	r3, [pc, #180]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111b4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 80111b6:	4b2c      	ldr	r3, [pc, #176]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111b8:	7bdb      	ldrb	r3, [r3, #15]
 80111ba:	f023 0308 	bic.w	r3, r3, #8
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	4b29      	ldr	r3, [pc, #164]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111c2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80111c4:	4b28      	ldr	r3, [pc, #160]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111c6:	7bdb      	ldrb	r3, [r3, #15]
 80111c8:	f023 0304 	bic.w	r3, r3, #4
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	4b26      	ldr	r3, [pc, #152]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111d0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80111d2:	4b25      	ldr	r3, [pc, #148]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	f023 0310 	bic.w	r3, r3, #16
 80111da:	b2da      	uxtb	r2, r3
 80111dc:	4b22      	ldr	r3, [pc, #136]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111de:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80111e0:	4b21      	ldr	r3, [pc, #132]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111e2:	7b9b      	ldrb	r3, [r3, #14]
 80111e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	4b1f      	ldr	r3, [pc, #124]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111ec:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80111ee:	4b1e      	ldr	r3, [pc, #120]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111f0:	7bdb      	ldrb	r3, [r3, #15]
 80111f2:	f023 0302 	bic.w	r3, r3, #2
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	4b1b      	ldr	r3, [pc, #108]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111fa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80111fc:	4b1a      	ldr	r3, [pc, #104]	; (8011268 <lcd_clear_vol_unit+0x484>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f023 0302 	bic.w	r3, r3, #2
 8011204:	b2da      	uxtb	r2, r3
 8011206:	4b18      	ldr	r3, [pc, #96]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011208:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801120a:	4b17      	ldr	r3, [pc, #92]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801120c:	795b      	ldrb	r3, [r3, #5]
 801120e:	f023 0302 	bic.w	r3, r3, #2
 8011212:	b2da      	uxtb	r2, r3
 8011214:	4b14      	ldr	r3, [pc, #80]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011216:	715a      	strb	r2, [r3, #5]
        break;
 8011218:	e01d      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 801121a:	4b13      	ldr	r3, [pc, #76]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801121c:	7bdb      	ldrb	r3, [r3, #15]
 801121e:	f023 0304 	bic.w	r3, r3, #4
 8011222:	b2da      	uxtb	r2, r3
 8011224:	4b10      	ldr	r3, [pc, #64]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011226:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011228:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <lcd_clear_vol_unit+0x484>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	f023 0310 	bic.w	r3, r3, #16
 8011230:	b2da      	uxtb	r2, r3
 8011232:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011234:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011236:	4b0c      	ldr	r3, [pc, #48]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011238:	7cdb      	ldrb	r3, [r3, #19]
 801123a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801123e:	b2da      	uxtb	r2, r3
 8011240:	4b09      	ldr	r3, [pc, #36]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011242:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011244:	4b08      	ldr	r3, [pc, #32]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f023 0301 	bic.w	r3, r3, #1
 801124c:	b2da      	uxtb	r2, r3
 801124e:	4b06      	ldr	r3, [pc, #24]	; (8011268 <lcd_clear_vol_unit+0x484>)
 8011250:	701a      	strb	r2, [r3, #0]
        break;
 8011252:	e000      	b.n	8011256 <lcd_clear_vol_unit+0x472>
        default:
        break;
 8011254:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011256:	79bb      	ldrb	r3, [r7, #6]
 8011258:	4618      	mov	r0, r3
 801125a:	f001 f9bb 	bl	80125d4 <pcf8553_blink>
}
 801125e:	bf00      	nop
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20001da0 	.word	0x20001da0

0801126c <lcd_init>:
 * @brief Inicialización de la pantalla LCD mediante el puerto SPI1.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 801126c:	b580      	push	{r7, lr}
 801126e:	af00      	add	r7, sp, #0
    pcf8553_init();
 8011270:	f001 fa22 	bl	80126b8 <pcf8553_init>
}
 8011274:	bf00      	nop
 8011276:	bd80      	pop	{r7, pc}

08011278 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	4603      	mov	r3, r0
 8011280:	71fb      	strb	r3, [r7, #7]
 8011282:	460b      	mov	r3, r1
 8011284:	71bb      	strb	r3, [r7, #6]
 8011286:	4613      	mov	r3, r2
 8011288:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 801128a:	797b      	ldrb	r3, [r7, #5]
 801128c:	3301      	adds	r3, #1
 801128e:	b2da      	uxtb	r2, r3
 8011290:	4bde      	ldr	r3, [pc, #888]	; (801160c <lcd_put_char+0x394>)
 8011292:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if (in_configuration == 0)
 8011294:	4bde      	ldr	r3, [pc, #888]	; (8011610 <lcd_put_char+0x398>)
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d10a      	bne.n	80112b2 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 801129c:	797a      	ldrb	r2, [r7, #5]
 801129e:	79bb      	ldrb	r3, [r7, #6]
 80112a0:	49dc      	ldr	r1, [pc, #880]	; (8011614 <lcd_put_char+0x39c>)
 80112a2:	00d2      	lsls	r2, r2, #3
 80112a4:	440a      	add	r2, r1
 80112a6:	4413      	add	r3, r2
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	79fa      	ldrb	r2, [r7, #7]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	f000 81d6 	beq.w	801165e <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 80112b2:	797a      	ldrb	r2, [r7, #5]
 80112b4:	79bb      	ldrb	r3, [r7, #6]
 80112b6:	49d7      	ldr	r1, [pc, #860]	; (8011614 <lcd_put_char+0x39c>)
 80112b8:	00d2      	lsls	r2, r2, #3
 80112ba:	440a      	add	r2, r1
 80112bc:	4413      	add	r3, r2
 80112be:	79fa      	ldrb	r2, [r7, #7]
 80112c0:	701a      	strb	r2, [r3, #0]

    switch (row)
 80112c2:	797b      	ldrb	r3, [r7, #5]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d002      	beq.n	80112ce <lcd_put_char+0x56>
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d008      	beq.n	80112de <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 80112cc:	e1ce      	b.n	801166c <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 80112ce:	79bb      	ldrb	r3, [r7, #6]
 80112d0:	2b07      	cmp	r3, #7
 80112d2:	f200 81c6 	bhi.w	8011662 <lcd_put_char+0x3ea>
                g_col = col;
 80112d6:	4ad0      	ldr	r2, [pc, #832]	; (8011618 <lcd_put_char+0x3a0>)
 80112d8:	79bb      	ldrb	r3, [r7, #6]
 80112da:	7013      	strb	r3, [r2, #0]
        break;
 80112dc:	e00a      	b.n	80112f4 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 80112de:	79bb      	ldrb	r3, [r7, #6]
 80112e0:	2b06      	cmp	r3, #6
 80112e2:	f200 81c0 	bhi.w	8011666 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 80112e6:	79bb      	ldrb	r3, [r7, #6]
 80112e8:	f1c3 0306 	rsb	r3, r3, #6
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4bca      	ldr	r3, [pc, #808]	; (8011618 <lcd_put_char+0x3a0>)
 80112f0:	701a      	strb	r2, [r3, #0]
        break;
 80112f2:	bf00      	nop
        break;
    }

    switch (c)
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	3b20      	subs	r3, #32
 80112f8:	2b19      	cmp	r3, #25
 80112fa:	f200 81b6 	bhi.w	801166a <lcd_put_char+0x3f2>
 80112fe:	a201      	add	r2, pc, #4	; (adr r2, 8011304 <lcd_put_char+0x8c>)
 8011300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011304:	0801136d 	.word	0x0801136d
 8011308:	0801166b 	.word	0x0801166b
 801130c:	0801166b 	.word	0x0801166b
 8011310:	0801166b 	.word	0x0801166b
 8011314:	0801166b 	.word	0x0801166b
 8011318:	0801166b 	.word	0x0801166b
 801131c:	0801166b 	.word	0x0801166b
 8011320:	0801166b 	.word	0x0801166b
 8011324:	0801166b 	.word	0x0801166b
 8011328:	0801166b 	.word	0x0801166b
 801132c:	0801166b 	.word	0x0801166b
 8011330:	0801166b 	.word	0x0801166b
 8011334:	0801166b 	.word	0x0801166b
 8011338:	0801166b 	.word	0x0801166b
 801133c:	080113af 	.word	0x080113af
 8011340:	0801166b 	.word	0x0801166b
 8011344:	080113b9 	.word	0x080113b9
 8011348:	080113fb 	.word	0x080113fb
 801134c:	0801143d 	.word	0x0801143d
 8011350:	0801147f 	.word	0x0801147f
 8011354:	080114c1 	.word	0x080114c1
 8011358:	08011503 	.word	0x08011503
 801135c:	08011545 	.word	0x08011545
 8011360:	08011587 	.word	0x08011587
 8011364:	080115c9 	.word	0x080115c9
 8011368:	0801161d 	.word	0x0801161d
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 801136c:	2100      	movs	r1, #0
 801136e:	2000      	movs	r0, #0
 8011370:	f001 f836 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011374:	2100      	movs	r1, #0
 8011376:	2001      	movs	r0, #1
 8011378:	f001 f832 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801137c:	2100      	movs	r1, #0
 801137e:	2002      	movs	r0, #2
 8011380:	f001 f82e 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011384:	2100      	movs	r1, #0
 8011386:	2003      	movs	r0, #3
 8011388:	f001 f82a 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801138c:	2100      	movs	r1, #0
 801138e:	2004      	movs	r0, #4
 8011390:	f001 f826 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011394:	2100      	movs	r1, #0
 8011396:	2005      	movs	r0, #5
 8011398:	f001 f822 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801139c:	2100      	movs	r1, #0
 801139e:	2006      	movs	r0, #6
 80113a0:	f001 f81e 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113a4:	2100      	movs	r1, #0
 80113a6:	2007      	movs	r0, #7
 80113a8:	f001 f81a 	bl	80123e0 <lcd_write_line>
        break;
 80113ac:	e15e      	b.n	801166c <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 80113ae:	2101      	movs	r1, #1
 80113b0:	2007      	movs	r0, #7
 80113b2:	f001 f815 	bl	80123e0 <lcd_write_line>
        break;
 80113b6:	e159      	b.n	801166c <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 80113b8:	2101      	movs	r1, #1
 80113ba:	2000      	movs	r0, #0
 80113bc:	f001 f810 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80113c0:	2101      	movs	r1, #1
 80113c2:	2001      	movs	r0, #1
 80113c4:	f001 f80c 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80113c8:	2101      	movs	r1, #1
 80113ca:	2002      	movs	r0, #2
 80113cc:	f001 f808 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80113d0:	2100      	movs	r1, #0
 80113d2:	2003      	movs	r0, #3
 80113d4:	f001 f804 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80113d8:	2101      	movs	r1, #1
 80113da:	2004      	movs	r0, #4
 80113dc:	f001 f800 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80113e0:	2101      	movs	r1, #1
 80113e2:	2005      	movs	r0, #5
 80113e4:	f000 fffc 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80113e8:	2101      	movs	r1, #1
 80113ea:	2006      	movs	r0, #6
 80113ec:	f000 fff8 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113f0:	2100      	movs	r1, #0
 80113f2:	2007      	movs	r0, #7
 80113f4:	f000 fff4 	bl	80123e0 <lcd_write_line>
        break;
 80113f8:	e138      	b.n	801166c <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80113fa:	2100      	movs	r1, #0
 80113fc:	2000      	movs	r0, #0
 80113fe:	f000 ffef 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011402:	2100      	movs	r1, #0
 8011404:	2001      	movs	r0, #1
 8011406:	f000 ffeb 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801140a:	2101      	movs	r1, #1
 801140c:	2002      	movs	r0, #2
 801140e:	f000 ffe7 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011412:	2100      	movs	r1, #0
 8011414:	2003      	movs	r0, #3
 8011416:	f000 ffe3 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801141a:	2100      	movs	r1, #0
 801141c:	2004      	movs	r0, #4
 801141e:	f000 ffdf 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011422:	2101      	movs	r1, #1
 8011424:	2005      	movs	r0, #5
 8011426:	f000 ffdb 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801142a:	2100      	movs	r1, #0
 801142c:	2006      	movs	r0, #6
 801142e:	f000 ffd7 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011432:	2100      	movs	r1, #0
 8011434:	2007      	movs	r0, #7
 8011436:	f000 ffd3 	bl	80123e0 <lcd_write_line>
        break;
 801143a:	e117      	b.n	801166c <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 801143c:	2101      	movs	r1, #1
 801143e:	2000      	movs	r0, #0
 8011440:	f000 ffce 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011444:	2101      	movs	r1, #1
 8011446:	2001      	movs	r0, #1
 8011448:	f000 ffca 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801144c:	2100      	movs	r1, #0
 801144e:	2002      	movs	r0, #2
 8011450:	f000 ffc6 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011454:	2101      	movs	r1, #1
 8011456:	2003      	movs	r0, #3
 8011458:	f000 ffc2 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801145c:	2100      	movs	r1, #0
 801145e:	2004      	movs	r0, #4
 8011460:	f000 ffbe 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011464:	2101      	movs	r1, #1
 8011466:	2005      	movs	r0, #5
 8011468:	f000 ffba 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801146c:	2101      	movs	r1, #1
 801146e:	2006      	movs	r0, #6
 8011470:	f000 ffb6 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011474:	2100      	movs	r1, #0
 8011476:	2007      	movs	r0, #7
 8011478:	f000 ffb2 	bl	80123e0 <lcd_write_line>
        break;
 801147c:	e0f6      	b.n	801166c <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 801147e:	2101      	movs	r1, #1
 8011480:	2000      	movs	r0, #0
 8011482:	f000 ffad 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011486:	2100      	movs	r1, #0
 8011488:	2001      	movs	r0, #1
 801148a:	f000 ffa9 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801148e:	2101      	movs	r1, #1
 8011490:	2002      	movs	r0, #2
 8011492:	f000 ffa5 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011496:	2101      	movs	r1, #1
 8011498:	2003      	movs	r0, #3
 801149a:	f000 ffa1 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801149e:	2100      	movs	r1, #0
 80114a0:	2004      	movs	r0, #4
 80114a2:	f000 ff9d 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80114a6:	2101      	movs	r1, #1
 80114a8:	2005      	movs	r0, #5
 80114aa:	f000 ff99 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80114ae:	2101      	movs	r1, #1
 80114b0:	2006      	movs	r0, #6
 80114b2:	f000 ff95 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114b6:	2100      	movs	r1, #0
 80114b8:	2007      	movs	r0, #7
 80114ba:	f000 ff91 	bl	80123e0 <lcd_write_line>
        break;
 80114be:	e0d5      	b.n	801166c <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 80114c0:	2100      	movs	r1, #0
 80114c2:	2000      	movs	r0, #0
 80114c4:	f000 ff8c 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80114c8:	2100      	movs	r1, #0
 80114ca:	2001      	movs	r0, #1
 80114cc:	f000 ff88 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80114d0:	2101      	movs	r1, #1
 80114d2:	2002      	movs	r0, #2
 80114d4:	f000 ff84 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80114d8:	2101      	movs	r1, #1
 80114da:	2003      	movs	r0, #3
 80114dc:	f000 ff80 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80114e0:	2101      	movs	r1, #1
 80114e2:	2004      	movs	r0, #4
 80114e4:	f000 ff7c 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80114e8:	2101      	movs	r1, #1
 80114ea:	2005      	movs	r0, #5
 80114ec:	f000 ff78 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80114f0:	2100      	movs	r1, #0
 80114f2:	2006      	movs	r0, #6
 80114f4:	f000 ff74 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114f8:	2100      	movs	r1, #0
 80114fa:	2007      	movs	r0, #7
 80114fc:	f000 ff70 	bl	80123e0 <lcd_write_line>
        break;
 8011500:	e0b4      	b.n	801166c <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 8011502:	2101      	movs	r1, #1
 8011504:	2000      	movs	r0, #0
 8011506:	f000 ff6b 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801150a:	2100      	movs	r1, #0
 801150c:	2001      	movs	r0, #1
 801150e:	f000 ff67 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011512:	2101      	movs	r1, #1
 8011514:	2002      	movs	r0, #2
 8011516:	f000 ff63 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801151a:	2101      	movs	r1, #1
 801151c:	2003      	movs	r0, #3
 801151e:	f000 ff5f 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011522:	2101      	movs	r1, #1
 8011524:	2004      	movs	r0, #4
 8011526:	f000 ff5b 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801152a:	2100      	movs	r1, #0
 801152c:	2005      	movs	r0, #5
 801152e:	f000 ff57 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011532:	2101      	movs	r1, #1
 8011534:	2006      	movs	r0, #6
 8011536:	f000 ff53 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801153a:	2100      	movs	r1, #0
 801153c:	2007      	movs	r0, #7
 801153e:	f000 ff4f 	bl	80123e0 <lcd_write_line>
        break;
 8011542:	e093      	b.n	801166c <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011544:	2101      	movs	r1, #1
 8011546:	2000      	movs	r0, #0
 8011548:	f000 ff4a 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 801154c:	2101      	movs	r1, #1
 801154e:	2001      	movs	r0, #1
 8011550:	f000 ff46 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011554:	2101      	movs	r1, #1
 8011556:	2002      	movs	r0, #2
 8011558:	f000 ff42 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801155c:	2101      	movs	r1, #1
 801155e:	2003      	movs	r0, #3
 8011560:	f000 ff3e 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011564:	2101      	movs	r1, #1
 8011566:	2004      	movs	r0, #4
 8011568:	f000 ff3a 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801156c:	2100      	movs	r1, #0
 801156e:	2005      	movs	r0, #5
 8011570:	f000 ff36 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011574:	2101      	movs	r1, #1
 8011576:	2006      	movs	r0, #6
 8011578:	f000 ff32 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801157c:	2100      	movs	r1, #0
 801157e:	2007      	movs	r0, #7
 8011580:	f000 ff2e 	bl	80123e0 <lcd_write_line>
        break;
 8011584:	e072      	b.n	801166c <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011586:	2100      	movs	r1, #0
 8011588:	2000      	movs	r0, #0
 801158a:	f000 ff29 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801158e:	2100      	movs	r1, #0
 8011590:	2001      	movs	r0, #1
 8011592:	f000 ff25 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011596:	2101      	movs	r1, #1
 8011598:	2002      	movs	r0, #2
 801159a:	f000 ff21 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801159e:	2100      	movs	r1, #0
 80115a0:	2003      	movs	r0, #3
 80115a2:	f000 ff1d 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80115a6:	2100      	movs	r1, #0
 80115a8:	2004      	movs	r0, #4
 80115aa:	f000 ff19 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80115ae:	2101      	movs	r1, #1
 80115b0:	2005      	movs	r0, #5
 80115b2:	f000 ff15 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80115b6:	2101      	movs	r1, #1
 80115b8:	2006      	movs	r0, #6
 80115ba:	f000 ff11 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80115be:	2100      	movs	r1, #0
 80115c0:	2007      	movs	r0, #7
 80115c2:	f000 ff0d 	bl	80123e0 <lcd_write_line>
        break;
 80115c6:	e051      	b.n	801166c <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 80115c8:	2101      	movs	r1, #1
 80115ca:	2000      	movs	r0, #0
 80115cc:	f000 ff08 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80115d0:	2101      	movs	r1, #1
 80115d2:	2001      	movs	r0, #1
 80115d4:	f000 ff04 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80115d8:	2101      	movs	r1, #1
 80115da:	2002      	movs	r0, #2
 80115dc:	f000 ff00 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80115e0:	2101      	movs	r1, #1
 80115e2:	2003      	movs	r0, #3
 80115e4:	f000 fefc 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80115e8:	2101      	movs	r1, #1
 80115ea:	2004      	movs	r0, #4
 80115ec:	f000 fef8 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80115f0:	2101      	movs	r1, #1
 80115f2:	2005      	movs	r0, #5
 80115f4:	f000 fef4 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80115f8:	2101      	movs	r1, #1
 80115fa:	2006      	movs	r0, #6
 80115fc:	f000 fef0 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011600:	2100      	movs	r1, #0
 8011602:	2007      	movs	r0, #7
 8011604:	f000 feec 	bl	80123e0 <lcd_write_line>
        break;
 8011608:	e030      	b.n	801166c <lcd_put_char+0x3f4>
 801160a:	bf00      	nop
 801160c:	20001d0d 	.word	0x20001d0d
 8011610:	20001dbc 	.word	0x20001dbc
 8011614:	20001cfc 	.word	0x20001cfc
 8011618:	20001d0c 	.word	0x20001d0c
        case '9':
            lcd_write_line(SEG_A, 0);
 801161c:	2100      	movs	r1, #0
 801161e:	2000      	movs	r0, #0
 8011620:	f000 fede 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011624:	2100      	movs	r1, #0
 8011626:	2001      	movs	r0, #1
 8011628:	f000 feda 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801162c:	2101      	movs	r1, #1
 801162e:	2002      	movs	r0, #2
 8011630:	f000 fed6 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011634:	2101      	movs	r1, #1
 8011636:	2003      	movs	r0, #3
 8011638:	f000 fed2 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801163c:	2101      	movs	r1, #1
 801163e:	2004      	movs	r0, #4
 8011640:	f000 fece 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011644:	2101      	movs	r1, #1
 8011646:	2005      	movs	r0, #5
 8011648:	f000 feca 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801164c:	2101      	movs	r1, #1
 801164e:	2006      	movs	r0, #6
 8011650:	f000 fec6 	bl	80123e0 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011654:	2100      	movs	r1, #0
 8011656:	2007      	movs	r0, #7
 8011658:	f000 fec2 	bl	80123e0 <lcd_write_line>
        break;
 801165c:	e006      	b.n	801166c <lcd_put_char+0x3f4>
            return;
 801165e:	bf00      	nop
 8011660:	e004      	b.n	801166c <lcd_put_char+0x3f4>
                return;
 8011662:	bf00      	nop
 8011664:	e002      	b.n	801166c <lcd_put_char+0x3f4>
                return;
 8011666:	bf00      	nop
 8011668:	e000      	b.n	801166c <lcd_put_char+0x3f4>
        default:
        break;
 801166a:	bf00      	nop
    }
}
 801166c:	3708      	adds	r7, #8
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop

08011674 <lcd_refresh>:
 * enviar en dicho buffer y luego enviar todo junto.
 * @param None
 * @retval None
 */
void lcd_refresh()
{
 8011674:	b580      	push	{r7, lr}
 8011676:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011678:	f000 fff2 	bl	8012660 <pcf8553_dump>
}
 801167c:	bf00      	nop
 801167e:	bd80      	pop	{r7, pc}

08011680 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	460a      	mov	r2, r1
 801168a:	71fb      	strb	r3, [r7, #7]
 801168c:	4613      	mov	r3, r2
 801168e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011690:	79fb      	ldrb	r3, [r7, #7]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d14c      	bne.n	8011730 <lcd_set_point+0xb0>
    {
        switch (point)
 8011696:	79bb      	ldrb	r3, [r7, #6]
 8011698:	2b06      	cmp	r3, #6
 801169a:	f200 808f 	bhi.w	80117bc <lcd_set_point+0x13c>
 801169e:	a201      	add	r2, pc, #4	; (adr r2, 80116a4 <lcd_set_point+0x24>)
 80116a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a4:	080116c1 	.word	0x080116c1
 80116a8:	080116d1 	.word	0x080116d1
 80116ac:	080116e1 	.word	0x080116e1
 80116b0:	080116f1 	.word	0x080116f1
 80116b4:	08011701 	.word	0x08011701
 80116b8:	08011711 	.word	0x08011711
 80116bc:	08011721 	.word	0x08011721
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 80116c0:	4b44      	ldr	r3, [pc, #272]	; (80117d4 <lcd_set_point+0x154>)
 80116c2:	79db      	ldrb	r3, [r3, #7]
 80116c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	4b42      	ldr	r3, [pc, #264]	; (80117d4 <lcd_set_point+0x154>)
 80116cc:	71da      	strb	r2, [r3, #7]
            break;
 80116ce:	e07a      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 80116d0:	4b40      	ldr	r3, [pc, #256]	; (80117d4 <lcd_set_point+0x154>)
 80116d2:	7a1b      	ldrb	r3, [r3, #8]
 80116d4:	f043 0302 	orr.w	r3, r3, #2
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	4b3e      	ldr	r3, [pc, #248]	; (80117d4 <lcd_set_point+0x154>)
 80116dc:	721a      	strb	r2, [r3, #8]
            break;
 80116de:	e072      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 80116e0:	4b3c      	ldr	r3, [pc, #240]	; (80117d4 <lcd_set_point+0x154>)
 80116e2:	7a1b      	ldrb	r3, [r3, #8]
 80116e4:	f043 0308 	orr.w	r3, r3, #8
 80116e8:	b2da      	uxtb	r2, r3
 80116ea:	4b3a      	ldr	r3, [pc, #232]	; (80117d4 <lcd_set_point+0x154>)
 80116ec:	721a      	strb	r2, [r3, #8]
            break;
 80116ee:	e06a      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80116f0:	4b38      	ldr	r3, [pc, #224]	; (80117d4 <lcd_set_point+0x154>)
 80116f2:	7a1b      	ldrb	r3, [r3, #8]
 80116f4:	f043 0320 	orr.w	r3, r3, #32
 80116f8:	b2da      	uxtb	r2, r3
 80116fa:	4b36      	ldr	r3, [pc, #216]	; (80117d4 <lcd_set_point+0x154>)
 80116fc:	721a      	strb	r2, [r3, #8]
            break;
 80116fe:	e062      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 8011700:	4b34      	ldr	r3, [pc, #208]	; (80117d4 <lcd_set_point+0x154>)
 8011702:	7a1b      	ldrb	r3, [r3, #8]
 8011704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011708:	b2da      	uxtb	r2, r3
 801170a:	4b32      	ldr	r3, [pc, #200]	; (80117d4 <lcd_set_point+0x154>)
 801170c:	721a      	strb	r2, [r3, #8]
            break;
 801170e:	e05a      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 8011710:	4b30      	ldr	r3, [pc, #192]	; (80117d4 <lcd_set_point+0x154>)
 8011712:	7a5b      	ldrb	r3, [r3, #9]
 8011714:	f043 0302 	orr.w	r3, r3, #2
 8011718:	b2da      	uxtb	r2, r3
 801171a:	4b2e      	ldr	r3, [pc, #184]	; (80117d4 <lcd_set_point+0x154>)
 801171c:	725a      	strb	r2, [r3, #9]
            break;
 801171e:	e052      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011720:	4b2c      	ldr	r3, [pc, #176]	; (80117d4 <lcd_set_point+0x154>)
 8011722:	7a5b      	ldrb	r3, [r3, #9]
 8011724:	f043 0308 	orr.w	r3, r3, #8
 8011728:	b2da      	uxtb	r2, r3
 801172a:	4b2a      	ldr	r3, [pc, #168]	; (80117d4 <lcd_set_point+0x154>)
 801172c:	725a      	strb	r2, [r3, #9]
            break;
 801172e:	e04a      	b.n	80117c6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d144      	bne.n	80117c0 <lcd_set_point+0x140>
    {
        switch (point)
 8011736:	79bb      	ldrb	r3, [r7, #6]
 8011738:	2b05      	cmp	r3, #5
 801173a:	d843      	bhi.n	80117c4 <lcd_set_point+0x144>
 801173c:	a201      	add	r2, pc, #4	; (adr r2, 8011744 <lcd_set_point+0xc4>)
 801173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011742:	bf00      	nop
 8011744:	0801175d 	.word	0x0801175d
 8011748:	0801176d 	.word	0x0801176d
 801174c:	0801177d 	.word	0x0801177d
 8011750:	0801178d 	.word	0x0801178d
 8011754:	0801179d 	.word	0x0801179d
 8011758:	080117ad 	.word	0x080117ad
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 801175c:	4b1d      	ldr	r3, [pc, #116]	; (80117d4 <lcd_set_point+0x154>)
 801175e:	79db      	ldrb	r3, [r3, #7]
 8011760:	f043 0304 	orr.w	r3, r3, #4
 8011764:	b2da      	uxtb	r2, r3
 8011766:	4b1b      	ldr	r3, [pc, #108]	; (80117d4 <lcd_set_point+0x154>)
 8011768:	71da      	strb	r2, [r3, #7]
            break;
 801176a:	e02c      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 801176c:	4b19      	ldr	r3, [pc, #100]	; (80117d4 <lcd_set_point+0x154>)
 801176e:	79db      	ldrb	r3, [r3, #7]
 8011770:	f043 0301 	orr.w	r3, r3, #1
 8011774:	b2da      	uxtb	r2, r3
 8011776:	4b17      	ldr	r3, [pc, #92]	; (80117d4 <lcd_set_point+0x154>)
 8011778:	71da      	strb	r2, [r3, #7]
            break;
 801177a:	e024      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 801177c:	4b15      	ldr	r3, [pc, #84]	; (80117d4 <lcd_set_point+0x154>)
 801177e:	799b      	ldrb	r3, [r3, #6]
 8011780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011784:	b2da      	uxtb	r2, r3
 8011786:	4b13      	ldr	r3, [pc, #76]	; (80117d4 <lcd_set_point+0x154>)
 8011788:	719a      	strb	r2, [r3, #6]
            break;
 801178a:	e01c      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 801178c:	4b11      	ldr	r3, [pc, #68]	; (80117d4 <lcd_set_point+0x154>)
 801178e:	799b      	ldrb	r3, [r3, #6]
 8011790:	f043 0310 	orr.w	r3, r3, #16
 8011794:	b2da      	uxtb	r2, r3
 8011796:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <lcd_set_point+0x154>)
 8011798:	719a      	strb	r2, [r3, #6]
            break;
 801179a:	e014      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 801179c:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <lcd_set_point+0x154>)
 801179e:	799b      	ldrb	r3, [r3, #6]
 80117a0:	f043 0304 	orr.w	r3, r3, #4
 80117a4:	b2da      	uxtb	r2, r3
 80117a6:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <lcd_set_point+0x154>)
 80117a8:	719a      	strb	r2, [r3, #6]
            break;
 80117aa:	e00c      	b.n	80117c6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 80117ac:	4b09      	ldr	r3, [pc, #36]	; (80117d4 <lcd_set_point+0x154>)
 80117ae:	799b      	ldrb	r3, [r3, #6]
 80117b0:	f043 0301 	orr.w	r3, r3, #1
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <lcd_set_point+0x154>)
 80117b8:	719a      	strb	r2, [r3, #6]
            break;
 80117ba:	e004      	b.n	80117c6 <lcd_set_point+0x146>
            break;
 80117bc:	bf00      	nop
 80117be:	e002      	b.n	80117c6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 80117c0:	bf00      	nop
 80117c2:	e000      	b.n	80117c6 <lcd_set_point+0x146>
            break;
 80117c4:	bf00      	nop
}
 80117c6:	bf00      	nop
 80117c8:	370c      	adds	r7, #12
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	20001da0 	.word	0x20001da0

080117d8 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	460a      	mov	r2, r1
 80117e2:	71fb      	strb	r3, [r7, #7]
 80117e4:	4613      	mov	r3, r2
 80117e6:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 80117e8:	79fb      	ldrb	r3, [r7, #7]
 80117ea:	2b16      	cmp	r3, #22
 80117ec:	f200 8366 	bhi.w	8011ebc <lcd_set_symbol+0x6e4>
 80117f0:	a201      	add	r2, pc, #4	; (adr r2, 80117f8 <lcd_set_symbol+0x20>)
 80117f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f6:	bf00      	nop
 80117f8:	08011865 	.word	0x08011865
 80117fc:	08011855 	.word	0x08011855
 8011800:	08011885 	.word	0x08011885
 8011804:	08011895 	.word	0x08011895
 8011808:	08011875 	.word	0x08011875
 801180c:	080118c5 	.word	0x080118c5
 8011810:	080118b5 	.word	0x080118b5
 8011814:	080118d5 	.word	0x080118d5
 8011818:	080118a5 	.word	0x080118a5
 801181c:	080118e5 	.word	0x080118e5
 8011820:	08011973 	.word	0x08011973
 8011824:	08011aa1 	.word	0x08011aa1
 8011828:	08011ae9 	.word	0x08011ae9
 801182c:	08011b77 	.word	0x08011b77
 8011830:	08011bdb 	.word	0x08011bdb
 8011834:	08011c3f 	.word	0x08011c3f
 8011838:	08011ca3 	.word	0x08011ca3
 801183c:	08011cdd 	.word	0x08011cdd
 8011840:	08011d01 	.word	0x08011d01
 8011844:	08011d49 	.word	0x08011d49
 8011848:	08011d91 	.word	0x08011d91
 801184c:	08011dcb 	.word	0x08011dcb
 8011850:	08011e13 	.word	0x08011e13
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011854:	4b91      	ldr	r3, [pc, #580]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011856:	789b      	ldrb	r3, [r3, #2]
 8011858:	f043 0320 	orr.w	r3, r3, #32
 801185c:	b2da      	uxtb	r2, r3
 801185e:	4b8f      	ldr	r3, [pc, #572]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011860:	709a      	strb	r2, [r3, #2]
        break;
 8011862:	e32c      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011864:	4b8d      	ldr	r3, [pc, #564]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011866:	79db      	ldrb	r3, [r3, #7]
 8011868:	f043 0320 	orr.w	r3, r3, #32
 801186c:	b2da      	uxtb	r2, r3
 801186e:	4b8b      	ldr	r3, [pc, #556]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011870:	71da      	strb	r2, [r3, #7]
        break;
 8011872:	e324      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011874:	4b89      	ldr	r3, [pc, #548]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011876:	7b1b      	ldrb	r3, [r3, #12]
 8011878:	f043 0320 	orr.w	r3, r3, #32
 801187c:	b2da      	uxtb	r2, r3
 801187e:	4b87      	ldr	r3, [pc, #540]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011880:	731a      	strb	r2, [r3, #12]
        break;
 8011882:	e31c      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011884:	4b85      	ldr	r3, [pc, #532]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011886:	7c5b      	ldrb	r3, [r3, #17]
 8011888:	f043 0320 	orr.w	r3, r3, #32
 801188c:	b2da      	uxtb	r2, r3
 801188e:	4b83      	ldr	r3, [pc, #524]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011890:	745a      	strb	r2, [r3, #17]
        break;
 8011892:	e314      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011894:	4b81      	ldr	r3, [pc, #516]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011896:	789b      	ldrb	r3, [r3, #2]
 8011898:	f043 0310 	orr.w	r3, r3, #16
 801189c:	b2da      	uxtb	r2, r3
 801189e:	4b7f      	ldr	r3, [pc, #508]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118a0:	709a      	strb	r2, [r3, #2]
        break;
 80118a2:	e30c      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 80118a4:	4b7d      	ldr	r3, [pc, #500]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118a6:	79db      	ldrb	r3, [r3, #7]
 80118a8:	f043 0310 	orr.w	r3, r3, #16
 80118ac:	b2da      	uxtb	r2, r3
 80118ae:	4b7b      	ldr	r3, [pc, #492]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118b0:	71da      	strb	r2, [r3, #7]
        break;
 80118b2:	e304      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 80118b4:	4b79      	ldr	r3, [pc, #484]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118b6:	7b1b      	ldrb	r3, [r3, #12]
 80118b8:	f043 0310 	orr.w	r3, r3, #16
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	4b77      	ldr	r3, [pc, #476]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118c0:	731a      	strb	r2, [r3, #12]
        break;
 80118c2:	e2fc      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 80118c4:	4b75      	ldr	r3, [pc, #468]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118c6:	7c5b      	ldrb	r3, [r3, #17]
 80118c8:	f043 0310 	orr.w	r3, r3, #16
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	4b73      	ldr	r3, [pc, #460]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118d0:	745a      	strb	r2, [r3, #17]
        break;
 80118d2:	e2f4      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 80118d4:	4b71      	ldr	r3, [pc, #452]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118d6:	7a9b      	ldrb	r3, [r3, #10]
 80118d8:	f043 0302 	orr.w	r3, r3, #2
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b6f      	ldr	r3, [pc, #444]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118e0:	729a      	strb	r2, [r3, #10]
        break;
 80118e2:	e2ec      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80118e4:	4b6d      	ldr	r3, [pc, #436]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118e6:	7bdb      	ldrb	r3, [r3, #15]
 80118e8:	f043 0320 	orr.w	r3, r3, #32
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	4b6b      	ldr	r3, [pc, #428]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118f0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80118f2:	4b6a      	ldr	r3, [pc, #424]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118f4:	7bdb      	ldrb	r3, [r3, #15]
 80118f6:	f043 0310 	orr.w	r3, r3, #16
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	4b67      	ldr	r3, [pc, #412]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80118fe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011900:	4b66      	ldr	r3, [pc, #408]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f043 0320 	orr.w	r3, r3, #32
 8011908:	b2da      	uxtb	r2, r3
 801190a:	4b64      	ldr	r3, [pc, #400]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801190c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 801190e:	4b63      	ldr	r3, [pc, #396]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	f043 0304 	orr.w	r3, r3, #4
 8011916:	b2da      	uxtb	r2, r3
 8011918:	4b60      	ldr	r3, [pc, #384]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801191a:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801191c:	4b5f      	ldr	r3, [pc, #380]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801191e:	7b9b      	ldrb	r3, [r3, #14]
 8011920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011924:	b2da      	uxtb	r2, r3
 8011926:	4b5d      	ldr	r3, [pc, #372]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011928:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801192a:	4b5c      	ldr	r3, [pc, #368]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801192c:	7bdb      	ldrb	r3, [r3, #15]
 801192e:	f043 0302 	orr.w	r3, r3, #2
 8011932:	b2da      	uxtb	r2, r3
 8011934:	4b59      	ldr	r3, [pc, #356]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011936:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011938:	4b58      	ldr	r3, [pc, #352]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801193a:	7cdb      	ldrb	r3, [r3, #19]
 801193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011940:	b2da      	uxtb	r2, r3
 8011942:	4b56      	ldr	r3, [pc, #344]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011944:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011946:	4b55      	ldr	r3, [pc, #340]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	f043 0301 	orr.w	r3, r3, #1
 801194e:	b2da      	uxtb	r2, r3
 8011950:	4b52      	ldr	r3, [pc, #328]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011952:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011954:	4b51      	ldr	r3, [pc, #324]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	f043 0302 	orr.w	r3, r3, #2
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b4f      	ldr	r3, [pc, #316]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011960:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011962:	4b4e      	ldr	r3, [pc, #312]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011964:	795b      	ldrb	r3, [r3, #5]
 8011966:	f043 0302 	orr.w	r3, r3, #2
 801196a:	b2da      	uxtb	r2, r3
 801196c:	4b4b      	ldr	r3, [pc, #300]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801196e:	715a      	strb	r2, [r3, #5]
        break;
 8011970:	e2a5      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011972:	4b4a      	ldr	r3, [pc, #296]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011974:	7b5b      	ldrb	r3, [r3, #13]
 8011976:	f043 0302 	orr.w	r3, r3, #2
 801197a:	b2da      	uxtb	r2, r3
 801197c:	4b47      	ldr	r3, [pc, #284]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801197e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011980:	4b46      	ldr	r3, [pc, #280]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011982:	7b5b      	ldrb	r3, [r3, #13]
 8011984:	f043 0301 	orr.w	r3, r3, #1
 8011988:	b2da      	uxtb	r2, r3
 801198a:	4b44      	ldr	r3, [pc, #272]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801198c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 801198e:	4b43      	ldr	r3, [pc, #268]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011990:	7c9b      	ldrb	r3, [r3, #18]
 8011992:	f043 0302 	orr.w	r3, r3, #2
 8011996:	b2da      	uxtb	r2, r3
 8011998:	4b40      	ldr	r3, [pc, #256]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801199a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 801199c:	4b3f      	ldr	r3, [pc, #252]	; (8011a9c <lcd_set_symbol+0x2c4>)
 801199e:	7c9b      	ldrb	r3, [r3, #18]
 80119a0:	f043 0301 	orr.w	r3, r3, #1
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	4b3d      	ldr	r3, [pc, #244]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119a8:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 80119aa:	4b3c      	ldr	r3, [pc, #240]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119ac:	78db      	ldrb	r3, [r3, #3]
 80119ae:	f043 0301 	orr.w	r3, r3, #1
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	4b39      	ldr	r3, [pc, #228]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119b6:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 80119b8:	4b38      	ldr	r3, [pc, #224]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119ba:	7b5b      	ldrb	r3, [r3, #13]
 80119bc:	f043 0308 	orr.w	r3, r3, #8
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	4b36      	ldr	r3, [pc, #216]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119c4:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 80119c6:	4b35      	ldr	r3, [pc, #212]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119c8:	7b5b      	ldrb	r3, [r3, #13]
 80119ca:	f043 0304 	orr.w	r3, r3, #4
 80119ce:	b2da      	uxtb	r2, r3
 80119d0:	4b32      	ldr	r3, [pc, #200]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119d2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 80119d4:	4b31      	ldr	r3, [pc, #196]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119d6:	7c9b      	ldrb	r3, [r3, #18]
 80119d8:	f043 0308 	orr.w	r3, r3, #8
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	4b2f      	ldr	r3, [pc, #188]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119e0:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 80119e2:	4b2e      	ldr	r3, [pc, #184]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119e4:	7c9b      	ldrb	r3, [r3, #18]
 80119e6:	f043 0304 	orr.w	r3, r3, #4
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	4b2b      	ldr	r3, [pc, #172]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119ee:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 80119f0:	4b2a      	ldr	r3, [pc, #168]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119f2:	78db      	ldrb	r3, [r3, #3]
 80119f4:	f043 0304 	orr.w	r3, r3, #4
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	4b28      	ldr	r3, [pc, #160]	; (8011a9c <lcd_set_symbol+0x2c4>)
 80119fc:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 80119fe:	4b27      	ldr	r3, [pc, #156]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a00:	78db      	ldrb	r3, [r3, #3]
 8011a02:	f043 0308 	orr.w	r3, r3, #8
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	4b24      	ldr	r3, [pc, #144]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a0a:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 8011a0c:	4b23      	ldr	r3, [pc, #140]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a0e:	7b5b      	ldrb	r3, [r3, #13]
 8011a10:	f043 0320 	orr.w	r3, r3, #32
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	4b21      	ldr	r3, [pc, #132]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a18:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 8011a1a:	4b20      	ldr	r3, [pc, #128]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a1c:	7b5b      	ldrb	r3, [r3, #13]
 8011a1e:	f043 0310 	orr.w	r3, r3, #16
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	4b1d      	ldr	r3, [pc, #116]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a26:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011a28:	4b1c      	ldr	r3, [pc, #112]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a2a:	7c9b      	ldrb	r3, [r3, #18]
 8011a2c:	f043 0310 	orr.w	r3, r3, #16
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	4b1a      	ldr	r3, [pc, #104]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a34:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011a36:	4b19      	ldr	r3, [pc, #100]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a38:	78db      	ldrb	r3, [r3, #3]
 8011a3a:	f043 0320 	orr.w	r3, r3, #32
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	4b16      	ldr	r3, [pc, #88]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a42:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011a44:	4b15      	ldr	r3, [pc, #84]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a46:	7a1b      	ldrb	r3, [r3, #8]
 8011a48:	f043 0310 	orr.w	r3, r3, #16
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a50:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011a52:	4b12      	ldr	r3, [pc, #72]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a54:	7b5b      	ldrb	r3, [r3, #13]
 8011a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	4b0f      	ldr	r3, [pc, #60]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a5e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011a60:	4b0e      	ldr	r3, [pc, #56]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a62:	7b5b      	ldrb	r3, [r3, #13]
 8011a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	4b0c      	ldr	r3, [pc, #48]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a6c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 8011a6e:	4b0b      	ldr	r3, [pc, #44]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a70:	7c9b      	ldrb	r3, [r3, #18]
 8011a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	4b08      	ldr	r3, [pc, #32]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a7a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011a7c:	4b07      	ldr	r3, [pc, #28]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a7e:	78db      	ldrb	r3, [r3, #3]
 8011a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a84:	b2da      	uxtb	r2, r3
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a88:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011a8a:	4b04      	ldr	r3, [pc, #16]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a8c:	7a1b      	ldrb	r3, [r3, #8]
 8011a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a92:	b2da      	uxtb	r2, r3
 8011a94:	4b01      	ldr	r3, [pc, #4]	; (8011a9c <lcd_set_symbol+0x2c4>)
 8011a96:	721a      	strb	r2, [r3, #8]

        break;
 8011a98:	e211      	b.n	8011ebe <lcd_set_symbol+0x6e6>
 8011a9a:	bf00      	nop
 8011a9c:	20001da0 	.word	0x20001da0
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011aa0:	4b96      	ldr	r3, [pc, #600]	; (8011cfc <lcd_set_symbol+0x524>)
 8011aa2:	7bdb      	ldrb	r3, [r3, #15]
 8011aa4:	f043 0320 	orr.w	r3, r3, #32
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	4b94      	ldr	r3, [pc, #592]	; (8011cfc <lcd_set_symbol+0x524>)
 8011aac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011aae:	4b93      	ldr	r3, [pc, #588]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ab0:	7bdb      	ldrb	r3, [r3, #15]
 8011ab2:	f043 0310 	orr.w	r3, r3, #16
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	4b90      	ldr	r3, [pc, #576]	; (8011cfc <lcd_set_symbol+0x524>)
 8011aba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011abc:	4b8f      	ldr	r3, [pc, #572]	; (8011cfc <lcd_set_symbol+0x524>)
 8011abe:	7bdb      	ldrb	r3, [r3, #15]
 8011ac0:	f043 0304 	orr.w	r3, r3, #4
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	4b8d      	ldr	r3, [pc, #564]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ac8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011aca:	4b8c      	ldr	r3, [pc, #560]	; (8011cfc <lcd_set_symbol+0x524>)
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	f043 0320 	orr.w	r3, r3, #32
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	4b89      	ldr	r3, [pc, #548]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ad6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011ad8:	4b88      	ldr	r3, [pc, #544]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ada:	795b      	ldrb	r3, [r3, #5]
 8011adc:	f043 0310 	orr.w	r3, r3, #16
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	4b86      	ldr	r3, [pc, #536]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ae4:	715a      	strb	r2, [r3, #5]
        break;
 8011ae6:	e1ea      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011ae8:	4b84      	ldr	r3, [pc, #528]	; (8011cfc <lcd_set_symbol+0x524>)
 8011aea:	7bdb      	ldrb	r3, [r3, #15]
 8011aec:	f043 0320 	orr.w	r3, r3, #32
 8011af0:	b2da      	uxtb	r2, r3
 8011af2:	4b82      	ldr	r3, [pc, #520]	; (8011cfc <lcd_set_symbol+0x524>)
 8011af4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011af6:	4b81      	ldr	r3, [pc, #516]	; (8011cfc <lcd_set_symbol+0x524>)
 8011af8:	7bdb      	ldrb	r3, [r3, #15]
 8011afa:	f043 0310 	orr.w	r3, r3, #16
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	4b7e      	ldr	r3, [pc, #504]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b02:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011b04:	4b7d      	ldr	r3, [pc, #500]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b06:	7bdb      	ldrb	r3, [r3, #15]
 8011b08:	f043 0304 	orr.w	r3, r3, #4
 8011b0c:	b2da      	uxtb	r2, r3
 8011b0e:	4b7b      	ldr	r3, [pc, #492]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b10:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011b12:	4b7a      	ldr	r3, [pc, #488]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	f043 0320 	orr.w	r3, r3, #32
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	4b77      	ldr	r3, [pc, #476]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b1e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011b20:	4b76      	ldr	r3, [pc, #472]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b22:	795b      	ldrb	r3, [r3, #5]
 8011b24:	f043 0310 	orr.w	r3, r3, #16
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b74      	ldr	r3, [pc, #464]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b2c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011b2e:	4b73      	ldr	r3, [pc, #460]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b30:	7cdb      	ldrb	r3, [r3, #19]
 8011b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b36:	b2da      	uxtb	r2, r3
 8011b38:	4b70      	ldr	r3, [pc, #448]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b3a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011b3c:	4b6f      	ldr	r3, [pc, #444]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	f043 0301 	orr.w	r3, r3, #1
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	4b6d      	ldr	r3, [pc, #436]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b48:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011b4a:	4b6c      	ldr	r3, [pc, #432]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	f043 0302 	orr.w	r3, r3, #2
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	4b69      	ldr	r3, [pc, #420]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b56:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011b58:	4b68      	ldr	r3, [pc, #416]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b5a:	791b      	ldrb	r3, [r3, #4]
 8011b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b60:	b2da      	uxtb	r2, r3
 8011b62:	4b66      	ldr	r3, [pc, #408]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b64:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011b66:	4b65      	ldr	r3, [pc, #404]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b68:	795b      	ldrb	r3, [r3, #5]
 8011b6a:	f043 0302 	orr.w	r3, r3, #2
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	4b62      	ldr	r3, [pc, #392]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b72:	715a      	strb	r2, [r3, #5]
        break;
 8011b74:	e1a3      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011b76:	4b61      	ldr	r3, [pc, #388]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b78:	7b1b      	ldrb	r3, [r3, #12]
 8011b7a:	f043 0301 	orr.w	r3, r3, #1
 8011b7e:	b2da      	uxtb	r2, r3
 8011b80:	4b5e      	ldr	r3, [pc, #376]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b82:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011b84:	4b5d      	ldr	r3, [pc, #372]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b86:	7b1b      	ldrb	r3, [r3, #12]
 8011b88:	f043 0302 	orr.w	r3, r3, #2
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	4b5b      	ldr	r3, [pc, #364]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b90:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011b92:	4b5a      	ldr	r3, [pc, #360]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b94:	7c5b      	ldrb	r3, [r3, #17]
 8011b96:	f043 0301 	orr.w	r3, r3, #1
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	4b57      	ldr	r3, [pc, #348]	; (8011cfc <lcd_set_symbol+0x524>)
 8011b9e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011ba0:	4b56      	ldr	r3, [pc, #344]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ba2:	7c5b      	ldrb	r3, [r3, #17]
 8011ba4:	f043 0302 	orr.w	r3, r3, #2
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	4b54      	ldr	r3, [pc, #336]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bac:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011bae:	4b53      	ldr	r3, [pc, #332]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bb0:	789b      	ldrb	r3, [r3, #2]
 8011bb2:	f043 0302 	orr.w	r3, r3, #2
 8011bb6:	b2da      	uxtb	r2, r3
 8011bb8:	4b50      	ldr	r3, [pc, #320]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bba:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011bbc:	4b4f      	ldr	r3, [pc, #316]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bbe:	789b      	ldrb	r3, [r3, #2]
 8011bc0:	f043 0301 	orr.w	r3, r3, #1
 8011bc4:	b2da      	uxtb	r2, r3
 8011bc6:	4b4d      	ldr	r3, [pc, #308]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bc8:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011bca:	4b4c      	ldr	r3, [pc, #304]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bcc:	79db      	ldrb	r3, [r3, #7]
 8011bce:	f043 0302 	orr.w	r3, r3, #2
 8011bd2:	b2da      	uxtb	r2, r3
 8011bd4:	4b49      	ldr	r3, [pc, #292]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bd6:	71da      	strb	r2, [r3, #7]
        break;
 8011bd8:	e171      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011bda:	4b48      	ldr	r3, [pc, #288]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bdc:	7adb      	ldrb	r3, [r3, #11]
 8011bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	4b45      	ldr	r3, [pc, #276]	; (8011cfc <lcd_set_symbol+0x524>)
 8011be6:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011be8:	4b44      	ldr	r3, [pc, #272]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bea:	7adb      	ldrb	r3, [r3, #11]
 8011bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	4b42      	ldr	r3, [pc, #264]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bf4:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011bf6:	4b41      	ldr	r3, [pc, #260]	; (8011cfc <lcd_set_symbol+0x524>)
 8011bf8:	7c1b      	ldrb	r3, [r3, #16]
 8011bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bfe:	b2da      	uxtb	r2, r3
 8011c00:	4b3e      	ldr	r3, [pc, #248]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c02:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011c04:	4b3d      	ldr	r3, [pc, #244]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c06:	7c1b      	ldrb	r3, [r3, #16]
 8011c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c0c:	b2da      	uxtb	r2, r3
 8011c0e:	4b3b      	ldr	r3, [pc, #236]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c10:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011c12:	4b3a      	ldr	r3, [pc, #232]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c14:	785b      	ldrb	r3, [r3, #1]
 8011c16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c1a:	b2da      	uxtb	r2, r3
 8011c1c:	4b37      	ldr	r3, [pc, #220]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c1e:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011c20:	4b36      	ldr	r3, [pc, #216]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c22:	785b      	ldrb	r3, [r3, #1]
 8011c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	4b34      	ldr	r3, [pc, #208]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c2c:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011c2e:	4b33      	ldr	r3, [pc, #204]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c30:	799b      	ldrb	r3, [r3, #6]
 8011c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c36:	b2da      	uxtb	r2, r3
 8011c38:	4b30      	ldr	r3, [pc, #192]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c3a:	719a      	strb	r2, [r3, #6]
        break;
 8011c3c:	e13f      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011c3e:	4b2f      	ldr	r3, [pc, #188]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c40:	7adb      	ldrb	r3, [r3, #11]
 8011c42:	f043 0310 	orr.w	r3, r3, #16
 8011c46:	b2da      	uxtb	r2, r3
 8011c48:	4b2c      	ldr	r3, [pc, #176]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c4a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011c4c:	4b2b      	ldr	r3, [pc, #172]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c4e:	7adb      	ldrb	r3, [r3, #11]
 8011c50:	f043 0320 	orr.w	r3, r3, #32
 8011c54:	b2da      	uxtb	r2, r3
 8011c56:	4b29      	ldr	r3, [pc, #164]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c58:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011c5a:	4b28      	ldr	r3, [pc, #160]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c5c:	7c1b      	ldrb	r3, [r3, #16]
 8011c5e:	f043 0310 	orr.w	r3, r3, #16
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	4b25      	ldr	r3, [pc, #148]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c66:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011c68:	4b24      	ldr	r3, [pc, #144]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c6a:	7c1b      	ldrb	r3, [r3, #16]
 8011c6c:	f043 0320 	orr.w	r3, r3, #32
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	4b22      	ldr	r3, [pc, #136]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c74:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011c76:	4b21      	ldr	r3, [pc, #132]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c78:	785b      	ldrb	r3, [r3, #1]
 8011c7a:	f043 0320 	orr.w	r3, r3, #32
 8011c7e:	b2da      	uxtb	r2, r3
 8011c80:	4b1e      	ldr	r3, [pc, #120]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c82:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011c84:	4b1d      	ldr	r3, [pc, #116]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c86:	785b      	ldrb	r3, [r3, #1]
 8011c88:	f043 0310 	orr.w	r3, r3, #16
 8011c8c:	b2da      	uxtb	r2, r3
 8011c8e:	4b1b      	ldr	r3, [pc, #108]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c90:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011c92:	4b1a      	ldr	r3, [pc, #104]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c94:	799b      	ldrb	r3, [r3, #6]
 8011c96:	f043 0320 	orr.w	r3, r3, #32
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	4b17      	ldr	r3, [pc, #92]	; (8011cfc <lcd_set_symbol+0x524>)
 8011c9e:	719a      	strb	r2, [r3, #6]
        break;
 8011ca0:	e10d      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011ca2:	4b16      	ldr	r3, [pc, #88]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ca4:	7b1b      	ldrb	r3, [r3, #12]
 8011ca6:	f043 0304 	orr.w	r3, r3, #4
 8011caa:	b2da      	uxtb	r2, r3
 8011cac:	4b13      	ldr	r3, [pc, #76]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cae:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011cb0:	4b12      	ldr	r3, [pc, #72]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cb2:	7b1b      	ldrb	r3, [r3, #12]
 8011cb4:	f043 0308 	orr.w	r3, r3, #8
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	4b10      	ldr	r3, [pc, #64]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cbc:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011cbe:	4b0f      	ldr	r3, [pc, #60]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cc0:	7c5b      	ldrb	r3, [r3, #17]
 8011cc2:	f043 0308 	orr.w	r3, r3, #8
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cca:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_3);
 8011ccc:	4b0b      	ldr	r3, [pc, #44]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cce:	789b      	ldrb	r3, [r3, #2]
 8011cd0:	f043 0308 	orr.w	r3, r3, #8
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cd8:	709a      	strb	r2, [r3, #2]
        break;
 8011cda:	e0f0      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011cdc:	4b07      	ldr	r3, [pc, #28]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cde:	7c5b      	ldrb	r3, [r3, #17]
 8011ce0:	f043 0301 	orr.w	r3, r3, #1
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	4b05      	ldr	r3, [pc, #20]	; (8011cfc <lcd_set_symbol+0x524>)
 8011ce8:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011cea:	4b04      	ldr	r3, [pc, #16]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cec:	789b      	ldrb	r3, [r3, #2]
 8011cee:	f043 0301 	orr.w	r3, r3, #1
 8011cf2:	b2da      	uxtb	r2, r3
 8011cf4:	4b01      	ldr	r3, [pc, #4]	; (8011cfc <lcd_set_symbol+0x524>)
 8011cf6:	709a      	strb	r2, [r3, #2]
        break;
 8011cf8:	e0e1      	b.n	8011ebe <lcd_set_symbol+0x6e6>
 8011cfa:	bf00      	nop
 8011cfc:	20001da0 	.word	0x20001da0
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011d00:	4b73      	ldr	r3, [pc, #460]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d02:	7b1b      	ldrb	r3, [r3, #12]
 8011d04:	f043 0301 	orr.w	r3, r3, #1
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	4b71      	ldr	r3, [pc, #452]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d0c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d0e:	4b70      	ldr	r3, [pc, #448]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d10:	7c5b      	ldrb	r3, [r3, #17]
 8011d12:	f043 0301 	orr.w	r3, r3, #1
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	4b6d      	ldr	r3, [pc, #436]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d1a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d1c:	4b6c      	ldr	r3, [pc, #432]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d1e:	7c5b      	ldrb	r3, [r3, #17]
 8011d20:	f043 0302 	orr.w	r3, r3, #2
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4b6a      	ldr	r3, [pc, #424]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d28:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011d2a:	4b69      	ldr	r3, [pc, #420]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d2c:	789b      	ldrb	r3, [r3, #2]
 8011d2e:	f043 0302 	orr.w	r3, r3, #2
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	4b66      	ldr	r3, [pc, #408]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d36:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011d38:	4b65      	ldr	r3, [pc, #404]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d3a:	79db      	ldrb	r3, [r3, #7]
 8011d3c:	f043 0302 	orr.w	r3, r3, #2
 8011d40:	b2da      	uxtb	r2, r3
 8011d42:	4b63      	ldr	r3, [pc, #396]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d44:	71da      	strb	r2, [r3, #7]
        break;
 8011d46:	e0ba      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011d48:	4b61      	ldr	r3, [pc, #388]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d4a:	7b1b      	ldrb	r3, [r3, #12]
 8011d4c:	f043 0301 	orr.w	r3, r3, #1
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	4b5f      	ldr	r3, [pc, #380]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d54:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d56:	4b5e      	ldr	r3, [pc, #376]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d58:	7c5b      	ldrb	r3, [r3, #17]
 8011d5a:	f043 0301 	orr.w	r3, r3, #1
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	4b5b      	ldr	r3, [pc, #364]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d62:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d64:	4b5a      	ldr	r3, [pc, #360]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d66:	7c5b      	ldrb	r3, [r3, #17]
 8011d68:	f043 0302 	orr.w	r3, r3, #2
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b58      	ldr	r3, [pc, #352]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d70:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011d72:	4b57      	ldr	r3, [pc, #348]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d74:	789b      	ldrb	r3, [r3, #2]
 8011d76:	f043 0301 	orr.w	r3, r3, #1
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	4b54      	ldr	r3, [pc, #336]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d7e:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011d80:	4b53      	ldr	r3, [pc, #332]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d82:	79db      	ldrb	r3, [r3, #7]
 8011d84:	f043 0302 	orr.w	r3, r3, #2
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	4b51      	ldr	r3, [pc, #324]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d8c:	71da      	strb	r2, [r3, #7]
        break;
 8011d8e:	e096      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011d90:	4b4f      	ldr	r3, [pc, #316]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d92:	7b1b      	ldrb	r3, [r3, #12]
 8011d94:	f043 0302 	orr.w	r3, r3, #2
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	4b4d      	ldr	r3, [pc, #308]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011d9c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d9e:	4b4c      	ldr	r3, [pc, #304]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011da0:	7c5b      	ldrb	r3, [r3, #17]
 8011da2:	f043 0301 	orr.w	r3, r3, #1
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	4b49      	ldr	r3, [pc, #292]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011daa:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011dac:	4b48      	ldr	r3, [pc, #288]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dae:	7c5b      	ldrb	r3, [r3, #17]
 8011db0:	f043 0302 	orr.w	r3, r3, #2
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	4b46      	ldr	r3, [pc, #280]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011db8:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011dba:	4b45      	ldr	r3, [pc, #276]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dbc:	789b      	ldrb	r3, [r3, #2]
 8011dbe:	f043 0301 	orr.w	r3, r3, #1
 8011dc2:	b2da      	uxtb	r2, r3
 8011dc4:	4b42      	ldr	r3, [pc, #264]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dc6:	709a      	strb	r2, [r3, #2]
        break;
 8011dc8:	e079      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011dca:	4b41      	ldr	r3, [pc, #260]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dcc:	7b1b      	ldrb	r3, [r3, #12]
 8011dce:	f043 0301 	orr.w	r3, r3, #1
 8011dd2:	b2da      	uxtb	r2, r3
 8011dd4:	4b3e      	ldr	r3, [pc, #248]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dd6:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011dd8:	4b3d      	ldr	r3, [pc, #244]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011dda:	7b1b      	ldrb	r3, [r3, #12]
 8011ddc:	f043 0302 	orr.w	r3, r3, #2
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b3b      	ldr	r3, [pc, #236]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011de4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011de6:	4b3a      	ldr	r3, [pc, #232]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011de8:	7c5b      	ldrb	r3, [r3, #17]
 8011dea:	f043 0302 	orr.w	r3, r3, #2
 8011dee:	b2da      	uxtb	r2, r3
 8011df0:	4b37      	ldr	r3, [pc, #220]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011df2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011df4:	4b36      	ldr	r3, [pc, #216]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011df6:	789b      	ldrb	r3, [r3, #2]
 8011df8:	f043 0301 	orr.w	r3, r3, #1
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	4b34      	ldr	r3, [pc, #208]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e00:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011e02:	4b33      	ldr	r3, [pc, #204]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e04:	79db      	ldrb	r3, [r3, #7]
 8011e06:	f043 0302 	orr.w	r3, r3, #2
 8011e0a:	b2da      	uxtb	r2, r3
 8011e0c:	4b30      	ldr	r3, [pc, #192]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e0e:	71da      	strb	r2, [r3, #7]
        break;
 8011e10:	e055      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011e12:	4b2f      	ldr	r3, [pc, #188]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e14:	7bdb      	ldrb	r3, [r3, #15]
 8011e16:	f043 0320 	orr.w	r3, r3, #32
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	4b2c      	ldr	r3, [pc, #176]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e1e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011e20:	4b2b      	ldr	r3, [pc, #172]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e22:	7bdb      	ldrb	r3, [r3, #15]
 8011e24:	f043 0308 	orr.w	r3, r3, #8
 8011e28:	b2da      	uxtb	r2, r3
 8011e2a:	4b29      	ldr	r3, [pc, #164]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e2c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011e2e:	4b28      	ldr	r3, [pc, #160]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e30:	7bdb      	ldrb	r3, [r3, #15]
 8011e32:	f043 0304 	orr.w	r3, r3, #4
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	4b25      	ldr	r3, [pc, #148]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e3a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011e3c:	4b24      	ldr	r3, [pc, #144]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	f043 0310 	orr.w	r3, r3, #16
 8011e44:	b2da      	uxtb	r2, r3
 8011e46:	4b22      	ldr	r3, [pc, #136]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e48:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011e4a:	4b21      	ldr	r3, [pc, #132]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	f043 0320 	orr.w	r3, r3, #32
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	4b1e      	ldr	r3, [pc, #120]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e56:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011e58:	4b1d      	ldr	r3, [pc, #116]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	f043 0308 	orr.w	r3, r3, #8
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	4b1b      	ldr	r3, [pc, #108]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e64:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e66:	4b1a      	ldr	r3, [pc, #104]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e68:	7b9b      	ldrb	r3, [r3, #14]
 8011e6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	4b17      	ldr	r3, [pc, #92]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e72:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8011e74:	4b16      	ldr	r3, [pc, #88]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e76:	7bdb      	ldrb	r3, [r3, #15]
 8011e78:	f043 0301 	orr.w	r3, r3, #1
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	4b14      	ldr	r3, [pc, #80]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e80:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e82:	4b13      	ldr	r3, [pc, #76]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e84:	7cdb      	ldrb	r3, [r3, #19]
 8011e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	4b10      	ldr	r3, [pc, #64]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e8e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011e90:	4b0f      	ldr	r3, [pc, #60]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f043 0301 	orr.w	r3, r3, #1
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4b0d      	ldr	r3, [pc, #52]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011e9c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_6);
 8011e9e:	4b0c      	ldr	r3, [pc, #48]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011ea0:	791b      	ldrb	r3, [r3, #4]
 8011ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	4b09      	ldr	r3, [pc, #36]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011eaa:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011eac:	4b08      	ldr	r3, [pc, #32]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011eae:	795b      	ldrb	r3, [r3, #5]
 8011eb0:	f043 0302 	orr.w	r3, r3, #2
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	4b06      	ldr	r3, [pc, #24]	; (8011ed0 <lcd_set_symbol+0x6f8>)
 8011eb8:	715a      	strb	r2, [r3, #5]
        break;
 8011eba:	e000      	b.n	8011ebe <lcd_set_symbol+0x6e6>
        default:
        break;
 8011ebc:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011ebe:	79bb      	ldrb	r3, [r7, #6]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f000 fb87 	bl	80125d4 <pcf8553_blink>
}
 8011ec6:	bf00      	nop
 8011ec8:	3708      	adds	r7, #8
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	20001da0 	.word	0x20001da0

08011ed4 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	4603      	mov	r3, r0
 8011edc:	460a      	mov	r2, r1
 8011ede:	71fb      	strb	r3, [r7, #7]
 8011ee0:	4613      	mov	r3, r2
 8011ee2:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	2b03      	cmp	r3, #3
 8011ee8:	d82a      	bhi.n	8011f40 <lcd_set_time_unit+0x6c>
 8011eea:	a201      	add	r2, pc, #4	; (adr r2, 8011ef0 <lcd_set_time_unit+0x1c>)
 8011eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef0:	08011f01 	.word	0x08011f01
 8011ef4:	08011f11 	.word	0x08011f11
 8011ef8:	08011f21 	.word	0x08011f21
 8011efc:	08011f31 	.word	0x08011f31
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011f00:	4b14      	ldr	r3, [pc, #80]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f02:	795b      	ldrb	r3, [r3, #5]
 8011f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	4b12      	ldr	r3, [pc, #72]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f0c:	715a      	strb	r2, [r3, #5]
        break;
 8011f0e:	e018      	b.n	8011f42 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011f10:	4b10      	ldr	r3, [pc, #64]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f12:	7a5b      	ldrb	r3, [r3, #9]
 8011f14:	f043 0320 	orr.w	r3, r3, #32
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	4b0e      	ldr	r3, [pc, #56]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f1c:	725a      	strb	r2, [r3, #9]
        break;
 8011f1e:	e010      	b.n	8011f42 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011f20:	4b0c      	ldr	r3, [pc, #48]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f22:	7a9b      	ldrb	r3, [r3, #10]
 8011f24:	f043 0320 	orr.w	r3, r3, #32
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f2c:	729a      	strb	r2, [r3, #10]
        break;
 8011f2e:	e008      	b.n	8011f42 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011f30:	4b08      	ldr	r3, [pc, #32]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f32:	7a5b      	ldrb	r3, [r3, #9]
 8011f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <lcd_set_time_unit+0x80>)
 8011f3c:	725a      	strb	r2, [r3, #9]
        break;
 8011f3e:	e000      	b.n	8011f42 <lcd_set_time_unit+0x6e>
        default:
        break;
 8011f40:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011f42:	79bb      	ldrb	r3, [r7, #6]
 8011f44:	4618      	mov	r0, r3
 8011f46:	f000 fb45 	bl	80125d4 <pcf8553_blink>
}
 8011f4a:	bf00      	nop
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	20001da0 	.word	0x20001da0

08011f58 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	4603      	mov	r3, r0
 8011f60:	460a      	mov	r2, r1
 8011f62:	71fb      	strb	r3, [r7, #7]
 8011f64:	4613      	mov	r3, r2
 8011f66:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011f68:	79fb      	ldrb	r3, [r7, #7]
 8011f6a:	2b07      	cmp	r3, #7
 8011f6c:	f200 822c 	bhi.w	80123c8 <lcd_set_vol_unit+0x470>
 8011f70:	a201      	add	r2, pc, #4	; (adr r2, 8011f78 <lcd_set_vol_unit+0x20>)
 8011f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f76:	bf00      	nop
 8011f78:	08011f99 	.word	0x08011f99
 8011f7c:	0801208b 	.word	0x0801208b
 8011f80:	08012135 	.word	0x08012135
 8011f84:	08011fef 	.word	0x08011fef
 8011f88:	0801228f 	.word	0x0801228f
 8011f8c:	080121c9 	.word	0x080121c9
 8011f90:	0801230f 	.word	0x0801230f
 8011f94:	0801238f 	.word	0x0801238f
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f98:	4b8a      	ldr	r3, [pc, #552]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011f9a:	7bdb      	ldrb	r3, [r3, #15]
 8011f9c:	f043 0320 	orr.w	r3, r3, #32
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	4b88      	ldr	r3, [pc, #544]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fa4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011fa6:	4b87      	ldr	r3, [pc, #540]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	f043 0320 	orr.w	r3, r3, #32
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	4b84      	ldr	r3, [pc, #528]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fb2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011fb4:	4b83      	ldr	r3, [pc, #524]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fb6:	795b      	ldrb	r3, [r3, #5]
 8011fb8:	f043 0320 	orr.w	r3, r3, #32
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	4b81      	ldr	r3, [pc, #516]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fc0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011fc2:	4b80      	ldr	r3, [pc, #512]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fc4:	7b9b      	ldrb	r3, [r3, #14]
 8011fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011fca:	b2da      	uxtb	r2, r3
 8011fcc:	4b7d      	ldr	r3, [pc, #500]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fce:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011fd0:	4b7c      	ldr	r3, [pc, #496]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fd2:	7a9b      	ldrb	r3, [r3, #10]
 8011fd4:	f043 0301 	orr.w	r3, r3, #1
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b7a      	ldr	r3, [pc, #488]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fdc:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011fde:	4b79      	ldr	r3, [pc, #484]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fe0:	7a5b      	ldrb	r3, [r3, #9]
 8011fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	4b76      	ldr	r3, [pc, #472]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011fea:	725a      	strb	r2, [r3, #9]
        break;
 8011fec:	e1ed      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011fee:	4b75      	ldr	r3, [pc, #468]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011ff0:	7bdb      	ldrb	r3, [r3, #15]
 8011ff2:	f043 0320 	orr.w	r3, r3, #32
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	4b72      	ldr	r3, [pc, #456]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011ffa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011ffc:	4b71      	ldr	r3, [pc, #452]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8011ffe:	7bdb      	ldrb	r3, [r3, #15]
 8012000:	f043 0310 	orr.w	r3, r3, #16
 8012004:	b2da      	uxtb	r2, r3
 8012006:	4b6f      	ldr	r3, [pc, #444]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012008:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801200a:	4b6e      	ldr	r3, [pc, #440]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801200c:	7bdb      	ldrb	r3, [r3, #15]
 801200e:	f043 0304 	orr.w	r3, r3, #4
 8012012:	b2da      	uxtb	r2, r3
 8012014:	4b6b      	ldr	r3, [pc, #428]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012016:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012018:	4b6a      	ldr	r3, [pc, #424]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	f043 0320 	orr.w	r3, r3, #32
 8012020:	b2da      	uxtb	r2, r3
 8012022:	4b68      	ldr	r3, [pc, #416]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012024:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8012026:	4b67      	ldr	r3, [pc, #412]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012028:	795b      	ldrb	r3, [r3, #5]
 801202a:	f043 0310 	orr.w	r3, r3, #16
 801202e:	b2da      	uxtb	r2, r3
 8012030:	4b64      	ldr	r3, [pc, #400]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012032:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012034:	4b63      	ldr	r3, [pc, #396]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012036:	7b9b      	ldrb	r3, [r3, #14]
 8012038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801203c:	b2da      	uxtb	r2, r3
 801203e:	4b61      	ldr	r3, [pc, #388]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012040:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012042:	4b60      	ldr	r3, [pc, #384]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012044:	7bdb      	ldrb	r3, [r3, #15]
 8012046:	f043 0302 	orr.w	r3, r3, #2
 801204a:	b2da      	uxtb	r2, r3
 801204c:	4b5d      	ldr	r3, [pc, #372]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801204e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012050:	4b5c      	ldr	r3, [pc, #368]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	f043 0301 	orr.w	r3, r3, #1
 8012058:	b2da      	uxtb	r2, r3
 801205a:	4b5a      	ldr	r3, [pc, #360]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801205c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801205e:	4b59      	ldr	r3, [pc, #356]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	f043 0302 	orr.w	r3, r3, #2
 8012066:	b2da      	uxtb	r2, r3
 8012068:	4b56      	ldr	r3, [pc, #344]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801206a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 801206c:	4b55      	ldr	r3, [pc, #340]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801206e:	791b      	ldrb	r3, [r3, #4]
 8012070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b53      	ldr	r3, [pc, #332]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012078:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801207a:	4b52      	ldr	r3, [pc, #328]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801207c:	795b      	ldrb	r3, [r3, #5]
 801207e:	f043 0302 	orr.w	r3, r3, #2
 8012082:	b2da      	uxtb	r2, r3
 8012084:	4b4f      	ldr	r3, [pc, #316]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012086:	715a      	strb	r2, [r3, #5]
        break;
 8012088:	e19f      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801208a:	4b4e      	ldr	r3, [pc, #312]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801208c:	7bdb      	ldrb	r3, [r3, #15]
 801208e:	f043 0320 	orr.w	r3, r3, #32
 8012092:	b2da      	uxtb	r2, r3
 8012094:	4b4b      	ldr	r3, [pc, #300]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012096:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012098:	4b4a      	ldr	r3, [pc, #296]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801209a:	7a9b      	ldrb	r3, [r3, #10]
 801209c:	f043 0304 	orr.w	r3, r3, #4
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	4b48      	ldr	r3, [pc, #288]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120a4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80120a6:	4b47      	ldr	r3, [pc, #284]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120a8:	7bdb      	ldrb	r3, [r3, #15]
 80120aa:	f043 0310 	orr.w	r3, r3, #16
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	4b44      	ldr	r3, [pc, #272]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120b2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80120b4:	4b43      	ldr	r3, [pc, #268]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120b6:	7bdb      	ldrb	r3, [r3, #15]
 80120b8:	f043 0308 	orr.w	r3, r3, #8
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	4b41      	ldr	r3, [pc, #260]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120c0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80120c2:	4b40      	ldr	r3, [pc, #256]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	f043 0320 	orr.w	r3, r3, #32
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	4b3d      	ldr	r3, [pc, #244]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120ce:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80120d0:	4b3c      	ldr	r3, [pc, #240]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	f043 0308 	orr.w	r3, r3, #8
 80120d8:	b2da      	uxtb	r2, r3
 80120da:	4b3a      	ldr	r3, [pc, #232]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120dc:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80120de:	4b39      	ldr	r3, [pc, #228]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120e0:	7b9b      	ldrb	r3, [r3, #14]
 80120e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	4b36      	ldr	r3, [pc, #216]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120ea:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80120ec:	4b35      	ldr	r3, [pc, #212]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120ee:	7cdb      	ldrb	r3, [r3, #19]
 80120f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	4b33      	ldr	r3, [pc, #204]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120f8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80120fa:	4b32      	ldr	r3, [pc, #200]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80120fc:	7cdb      	ldrb	r3, [r3, #19]
 80120fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012102:	b2da      	uxtb	r2, r3
 8012104:	4b2f      	ldr	r3, [pc, #188]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012106:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012108:	4b2e      	ldr	r3, [pc, #184]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	f043 0301 	orr.w	r3, r3, #1
 8012110:	b2da      	uxtb	r2, r3
 8012112:	4b2c      	ldr	r3, [pc, #176]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012114:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8012116:	4b2b      	ldr	r3, [pc, #172]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012118:	791b      	ldrb	r3, [r3, #4]
 801211a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801211e:	b2da      	uxtb	r2, r3
 8012120:	4b28      	ldr	r3, [pc, #160]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012122:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012124:	4b27      	ldr	r3, [pc, #156]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012126:	795b      	ldrb	r3, [r3, #5]
 8012128:	f043 0302 	orr.w	r3, r3, #2
 801212c:	b2da      	uxtb	r2, r3
 801212e:	4b25      	ldr	r3, [pc, #148]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012130:	715a      	strb	r2, [r3, #5]
        break;
 8012132:	e14a      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012134:	4b23      	ldr	r3, [pc, #140]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012136:	7bdb      	ldrb	r3, [r3, #15]
 8012138:	f043 0320 	orr.w	r3, r3, #32
 801213c:	b2da      	uxtb	r2, r3
 801213e:	4b21      	ldr	r3, [pc, #132]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012140:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012142:	4b20      	ldr	r3, [pc, #128]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012144:	7a9b      	ldrb	r3, [r3, #10]
 8012146:	f043 0304 	orr.w	r3, r3, #4
 801214a:	b2da      	uxtb	r2, r3
 801214c:	4b1d      	ldr	r3, [pc, #116]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801214e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012150:	4b1c      	ldr	r3, [pc, #112]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012152:	7bdb      	ldrb	r3, [r3, #15]
 8012154:	f043 0310 	orr.w	r3, r3, #16
 8012158:	b2da      	uxtb	r2, r3
 801215a:	4b1a      	ldr	r3, [pc, #104]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801215c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801215e:	4b19      	ldr	r3, [pc, #100]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012160:	7bdb      	ldrb	r3, [r3, #15]
 8012162:	f043 0308 	orr.w	r3, r3, #8
 8012166:	b2da      	uxtb	r2, r3
 8012168:	4b16      	ldr	r3, [pc, #88]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801216a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801216c:	4b15      	ldr	r3, [pc, #84]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	f043 0320 	orr.w	r3, r3, #32
 8012174:	b2da      	uxtb	r2, r3
 8012176:	4b13      	ldr	r3, [pc, #76]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012178:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801217a:	4b12      	ldr	r3, [pc, #72]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	f043 0308 	orr.w	r3, r3, #8
 8012182:	b2da      	uxtb	r2, r3
 8012184:	4b0f      	ldr	r3, [pc, #60]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012186:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012188:	4b0e      	ldr	r3, [pc, #56]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 801218a:	7b9b      	ldrb	r3, [r3, #14]
 801218c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012190:	b2da      	uxtb	r2, r3
 8012192:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012194:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012196:	4b0b      	ldr	r3, [pc, #44]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 8012198:	7bdb      	ldrb	r3, [r3, #15]
 801219a:	f043 0302 	orr.w	r3, r3, #2
 801219e:	b2da      	uxtb	r2, r3
 80121a0:	4b08      	ldr	r3, [pc, #32]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80121a2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80121a4:	4b07      	ldr	r3, [pc, #28]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f043 0302 	orr.w	r3, r3, #2
 80121ac:	b2da      	uxtb	r2, r3
 80121ae:	4b05      	ldr	r3, [pc, #20]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80121b0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80121b2:	4b04      	ldr	r3, [pc, #16]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80121b4:	795b      	ldrb	r3, [r3, #5]
 80121b6:	f043 0302 	orr.w	r3, r3, #2
 80121ba:	b2da      	uxtb	r2, r3
 80121bc:	4b01      	ldr	r3, [pc, #4]	; (80121c4 <lcd_set_vol_unit+0x26c>)
 80121be:	715a      	strb	r2, [r3, #5]
        break;
 80121c0:	e103      	b.n	80123ca <lcd_set_vol_unit+0x472>
 80121c2:	bf00      	nop
 80121c4:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80121c8:	4b84      	ldr	r3, [pc, #528]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121ca:	7a9b      	ldrb	r3, [r3, #10]
 80121cc:	f043 0308 	orr.w	r3, r3, #8
 80121d0:	b2da      	uxtb	r2, r3
 80121d2:	4b82      	ldr	r3, [pc, #520]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121d4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 80121d6:	4b81      	ldr	r3, [pc, #516]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121d8:	7a9b      	ldrb	r3, [r3, #10]
 80121da:	f043 0310 	orr.w	r3, r3, #16
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	4b7e      	ldr	r3, [pc, #504]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121e2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80121e4:	4b7d      	ldr	r3, [pc, #500]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121e6:	7bdb      	ldrb	r3, [r3, #15]
 80121e8:	f043 0308 	orr.w	r3, r3, #8
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	4b7b      	ldr	r3, [pc, #492]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121f0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80121f2:	4b7a      	ldr	r3, [pc, #488]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	f043 0310 	orr.w	r3, r3, #16
 80121fa:	b2da      	uxtb	r2, r3
 80121fc:	4b77      	ldr	r3, [pc, #476]	; (80123dc <lcd_set_vol_unit+0x484>)
 80121fe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 8012200:	4b76      	ldr	r3, [pc, #472]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012202:	795b      	ldrb	r3, [r3, #5]
 8012204:	f043 0304 	orr.w	r3, r3, #4
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b74      	ldr	r3, [pc, #464]	; (80123dc <lcd_set_vol_unit+0x484>)
 801220c:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801220e:	4b73      	ldr	r3, [pc, #460]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	f043 0308 	orr.w	r3, r3, #8
 8012216:	b2da      	uxtb	r2, r3
 8012218:	4b70      	ldr	r3, [pc, #448]	; (80123dc <lcd_set_vol_unit+0x484>)
 801221a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 801221c:	4b6f      	ldr	r3, [pc, #444]	; (80123dc <lcd_set_vol_unit+0x484>)
 801221e:	795b      	ldrb	r3, [r3, #5]
 8012220:	f043 0320 	orr.w	r3, r3, #32
 8012224:	b2da      	uxtb	r2, r3
 8012226:	4b6d      	ldr	r3, [pc, #436]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012228:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801222a:	4b6c      	ldr	r3, [pc, #432]	; (80123dc <lcd_set_vol_unit+0x484>)
 801222c:	7b9b      	ldrb	r3, [r3, #14]
 801222e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012232:	b2da      	uxtb	r2, r3
 8012234:	4b69      	ldr	r3, [pc, #420]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012236:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012238:	4b68      	ldr	r3, [pc, #416]	; (80123dc <lcd_set_vol_unit+0x484>)
 801223a:	7bdb      	ldrb	r3, [r3, #15]
 801223c:	f043 0302 	orr.w	r3, r3, #2
 8012240:	b2da      	uxtb	r2, r3
 8012242:	4b66      	ldr	r3, [pc, #408]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012244:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8012246:	4b65      	ldr	r3, [pc, #404]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012248:	7cdb      	ldrb	r3, [r3, #19]
 801224a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801224e:	b2da      	uxtb	r2, r3
 8012250:	4b62      	ldr	r3, [pc, #392]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012252:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8012254:	4b61      	ldr	r3, [pc, #388]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012256:	7cdb      	ldrb	r3, [r3, #19]
 8012258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801225c:	b2da      	uxtb	r2, r3
 801225e:	4b5f      	ldr	r3, [pc, #380]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012260:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012262:	4b5e      	ldr	r3, [pc, #376]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	f043 0301 	orr.w	r3, r3, #1
 801226a:	b2da      	uxtb	r2, r3
 801226c:	4b5b      	ldr	r3, [pc, #364]	; (80123dc <lcd_set_vol_unit+0x484>)
 801226e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012270:	4b5a      	ldr	r3, [pc, #360]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f043 0302 	orr.w	r3, r3, #2
 8012278:	b2da      	uxtb	r2, r3
 801227a:	4b58      	ldr	r3, [pc, #352]	; (80123dc <lcd_set_vol_unit+0x484>)
 801227c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 801227e:	4b57      	ldr	r3, [pc, #348]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012280:	795b      	ldrb	r3, [r3, #5]
 8012282:	f043 0301 	orr.w	r3, r3, #1
 8012286:	b2da      	uxtb	r2, r3
 8012288:	4b54      	ldr	r3, [pc, #336]	; (80123dc <lcd_set_vol_unit+0x484>)
 801228a:	715a      	strb	r2, [r3, #5]
        break;
 801228c:	e09d      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801228e:	4b53      	ldr	r3, [pc, #332]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012290:	7a9b      	ldrb	r3, [r3, #10]
 8012292:	f043 0308 	orr.w	r3, r3, #8
 8012296:	b2da      	uxtb	r2, r3
 8012298:	4b50      	ldr	r3, [pc, #320]	; (80123dc <lcd_set_vol_unit+0x484>)
 801229a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801229c:	4b4f      	ldr	r3, [pc, #316]	; (80123dc <lcd_set_vol_unit+0x484>)
 801229e:	7bdb      	ldrb	r3, [r3, #15]
 80122a0:	f043 0320 	orr.w	r3, r3, #32
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	4b4d      	ldr	r3, [pc, #308]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80122aa:	4b4c      	ldr	r3, [pc, #304]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	f043 0310 	orr.w	r3, r3, #16
 80122b2:	b2da      	uxtb	r2, r3
 80122b4:	4b49      	ldr	r3, [pc, #292]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122b6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80122b8:	4b48      	ldr	r3, [pc, #288]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	f043 0320 	orr.w	r3, r3, #32
 80122c0:	b2da      	uxtb	r2, r3
 80122c2:	4b46      	ldr	r3, [pc, #280]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122c4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80122c6:	4b45      	ldr	r3, [pc, #276]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	f043 0308 	orr.w	r3, r3, #8
 80122ce:	b2da      	uxtb	r2, r3
 80122d0:	4b42      	ldr	r3, [pc, #264]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122d2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80122d4:	4b41      	ldr	r3, [pc, #260]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122d6:	795b      	ldrb	r3, [r3, #5]
 80122d8:	f043 0320 	orr.w	r3, r3, #32
 80122dc:	b2da      	uxtb	r2, r3
 80122de:	4b3f      	ldr	r3, [pc, #252]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122e0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 80122e2:	4b3e      	ldr	r3, [pc, #248]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122e4:	7bdb      	ldrb	r3, [r3, #15]
 80122e6:	f043 0302 	orr.w	r3, r3, #2
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	4b3b      	ldr	r3, [pc, #236]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80122f0:	4b3a      	ldr	r3, [pc, #232]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	f043 0302 	orr.w	r3, r3, #2
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	4b38      	ldr	r3, [pc, #224]	; (80123dc <lcd_set_vol_unit+0x484>)
 80122fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80122fe:	4b37      	ldr	r3, [pc, #220]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012300:	795b      	ldrb	r3, [r3, #5]
 8012302:	f043 0302 	orr.w	r3, r3, #2
 8012306:	b2da      	uxtb	r2, r3
 8012308:	4b34      	ldr	r3, [pc, #208]	; (80123dc <lcd_set_vol_unit+0x484>)
 801230a:	715a      	strb	r2, [r3, #5]
        break;
 801230c:	e05d      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801230e:	4b33      	ldr	r3, [pc, #204]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012310:	7a9b      	ldrb	r3, [r3, #10]
 8012312:	f043 0308 	orr.w	r3, r3, #8
 8012316:	b2da      	uxtb	r2, r3
 8012318:	4b30      	ldr	r3, [pc, #192]	; (80123dc <lcd_set_vol_unit+0x484>)
 801231a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801231c:	4b2f      	ldr	r3, [pc, #188]	; (80123dc <lcd_set_vol_unit+0x484>)
 801231e:	7bdb      	ldrb	r3, [r3, #15]
 8012320:	f043 0320 	orr.w	r3, r3, #32
 8012324:	b2da      	uxtb	r2, r3
 8012326:	4b2d      	ldr	r3, [pc, #180]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012328:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801232a:	4b2c      	ldr	r3, [pc, #176]	; (80123dc <lcd_set_vol_unit+0x484>)
 801232c:	7bdb      	ldrb	r3, [r3, #15]
 801232e:	f043 0308 	orr.w	r3, r3, #8
 8012332:	b2da      	uxtb	r2, r3
 8012334:	4b29      	ldr	r3, [pc, #164]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012336:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8012338:	4b28      	ldr	r3, [pc, #160]	; (80123dc <lcd_set_vol_unit+0x484>)
 801233a:	7bdb      	ldrb	r3, [r3, #15]
 801233c:	f043 0304 	orr.w	r3, r3, #4
 8012340:	b2da      	uxtb	r2, r3
 8012342:	4b26      	ldr	r3, [pc, #152]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012344:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012346:	4b25      	ldr	r3, [pc, #148]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	f043 0310 	orr.w	r3, r3, #16
 801234e:	b2da      	uxtb	r2, r3
 8012350:	4b22      	ldr	r3, [pc, #136]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012352:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012354:	4b21      	ldr	r3, [pc, #132]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012356:	7b9b      	ldrb	r3, [r3, #14]
 8012358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801235c:	b2da      	uxtb	r2, r3
 801235e:	4b1f      	ldr	r3, [pc, #124]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012360:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012362:	4b1e      	ldr	r3, [pc, #120]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012364:	7bdb      	ldrb	r3, [r3, #15]
 8012366:	f043 0302 	orr.w	r3, r3, #2
 801236a:	b2da      	uxtb	r2, r3
 801236c:	4b1b      	ldr	r3, [pc, #108]	; (80123dc <lcd_set_vol_unit+0x484>)
 801236e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012370:	4b1a      	ldr	r3, [pc, #104]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	f043 0302 	orr.w	r3, r3, #2
 8012378:	b2da      	uxtb	r2, r3
 801237a:	4b18      	ldr	r3, [pc, #96]	; (80123dc <lcd_set_vol_unit+0x484>)
 801237c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801237e:	4b17      	ldr	r3, [pc, #92]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012380:	795b      	ldrb	r3, [r3, #5]
 8012382:	f043 0302 	orr.w	r3, r3, #2
 8012386:	b2da      	uxtb	r2, r3
 8012388:	4b14      	ldr	r3, [pc, #80]	; (80123dc <lcd_set_vol_unit+0x484>)
 801238a:	715a      	strb	r2, [r3, #5]
        break;
 801238c:	e01d      	b.n	80123ca <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801238e:	4b13      	ldr	r3, [pc, #76]	; (80123dc <lcd_set_vol_unit+0x484>)
 8012390:	7bdb      	ldrb	r3, [r3, #15]
 8012392:	f043 0304 	orr.w	r3, r3, #4
 8012396:	b2da      	uxtb	r2, r3
 8012398:	4b10      	ldr	r3, [pc, #64]	; (80123dc <lcd_set_vol_unit+0x484>)
 801239a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801239c:	4b0f      	ldr	r3, [pc, #60]	; (80123dc <lcd_set_vol_unit+0x484>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f043 0310 	orr.w	r3, r3, #16
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <lcd_set_vol_unit+0x484>)
 80123a8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80123aa:	4b0c      	ldr	r3, [pc, #48]	; (80123dc <lcd_set_vol_unit+0x484>)
 80123ac:	7cdb      	ldrb	r3, [r3, #19]
 80123ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123b2:	b2da      	uxtb	r2, r3
 80123b4:	4b09      	ldr	r3, [pc, #36]	; (80123dc <lcd_set_vol_unit+0x484>)
 80123b6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80123b8:	4b08      	ldr	r3, [pc, #32]	; (80123dc <lcd_set_vol_unit+0x484>)
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	f043 0301 	orr.w	r3, r3, #1
 80123c0:	b2da      	uxtb	r2, r3
 80123c2:	4b06      	ldr	r3, [pc, #24]	; (80123dc <lcd_set_vol_unit+0x484>)
 80123c4:	701a      	strb	r2, [r3, #0]
        break;
 80123c6:	e000      	b.n	80123ca <lcd_set_vol_unit+0x472>
        default:
        break;
 80123c8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80123ca:	79bb      	ldrb	r3, [r7, #6]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f000 f901 	bl	80125d4 <pcf8553_blink>
}
 80123d2:	bf00      	nop
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	20001da0 	.word	0x20001da0

080123e0 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	460a      	mov	r2, r1
 80123ea:	71fb      	strb	r3, [r7, #7]
 80123ec:	4613      	mov	r3, r2
 80123ee:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 80123f4:	2300      	movs	r3, #0
 80123f6:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 80123f8:	4b33      	ldr	r3, [pc, #204]	; (80124c8 <lcd_write_line+0xe8>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d002      	beq.n	8012406 <lcd_write_line+0x26>
 8012400:	2b02      	cmp	r3, #2
 8012402:	d01b      	beq.n	801243c <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 8012404:	e035      	b.n	8012472 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	4a30      	ldr	r2, [pc, #192]	; (80124cc <lcd_write_line+0xec>)
 801240a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801240e:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012410:	4b2f      	ldr	r3, [pc, #188]	; (80124d0 <lcd_write_line+0xf0>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	b2da      	uxtb	r2, r3
 8012418:	7bbb      	ldrb	r3, [r7, #14]
 801241a:	4413      	add	r3, r2
 801241c:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 801241e:	7bbb      	ldrb	r3, [r7, #14]
 8012420:	08db      	lsrs	r3, r3, #3
 8012422:	b2da      	uxtb	r2, r3
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	4929      	ldr	r1, [pc, #164]	; (80124cc <lcd_write_line+0xec>)
 8012428:	005b      	lsls	r3, r3, #1
 801242a:	440b      	add	r3, r1
 801242c:	785b      	ldrb	r3, [r3, #1]
 801242e:	4413      	add	r3, r2
 8012430:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012432:	7bbb      	ldrb	r3, [r7, #14]
 8012434:	f003 0307 	and.w	r3, r3, #7
 8012438:	73bb      	strb	r3, [r7, #14]
        break;
 801243a:	e01a      	b.n	8012472 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 801243c:	79fb      	ldrb	r3, [r7, #7]
 801243e:	4a25      	ldr	r2, [pc, #148]	; (80124d4 <lcd_write_line+0xf4>)
 8012440:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012444:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012446:	4b22      	ldr	r3, [pc, #136]	; (80124d0 <lcd_write_line+0xf0>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	b2da      	uxtb	r2, r3
 801244e:	7bbb      	ldrb	r3, [r7, #14]
 8012450:	4413      	add	r3, r2
 8012452:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 8012454:	7bbb      	ldrb	r3, [r7, #14]
 8012456:	08db      	lsrs	r3, r3, #3
 8012458:	b2da      	uxtb	r2, r3
 801245a:	79fb      	ldrb	r3, [r7, #7]
 801245c:	491d      	ldr	r1, [pc, #116]	; (80124d4 <lcd_write_line+0xf4>)
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	440b      	add	r3, r1
 8012462:	785b      	ldrb	r3, [r3, #1]
 8012464:	4413      	add	r3, r2
 8012466:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012468:	7bbb      	ldrb	r3, [r7, #14]
 801246a:	f003 0307 	and.w	r3, r3, #7
 801246e:	73bb      	strb	r3, [r7, #14]
        break;
 8012470:	bf00      	nop
    }

    if (data)
 8012472:	79bb      	ldrb	r3, [r7, #6]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00f      	beq.n	8012498 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012478:	7bfb      	ldrb	r3, [r7, #15]
 801247a:	4a17      	ldr	r2, [pc, #92]	; (80124d8 <lcd_write_line+0xf8>)
 801247c:	5cd3      	ldrb	r3, [r2, r3]
 801247e:	b25a      	sxtb	r2, r3
 8012480:	7bbb      	ldrb	r3, [r7, #14]
 8012482:	2101      	movs	r1, #1
 8012484:	fa01 f303 	lsl.w	r3, r1, r3
 8012488:	b25b      	sxtb	r3, r3
 801248a:	4313      	orrs	r3, r2
 801248c:	b25a      	sxtb	r2, r3
 801248e:	7bfb      	ldrb	r3, [r7, #15]
 8012490:	b2d1      	uxtb	r1, r2
 8012492:	4a11      	ldr	r2, [pc, #68]	; (80124d8 <lcd_write_line+0xf8>)
 8012494:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 8012496:	e010      	b.n	80124ba <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012498:	7bfb      	ldrb	r3, [r7, #15]
 801249a:	4a0f      	ldr	r2, [pc, #60]	; (80124d8 <lcd_write_line+0xf8>)
 801249c:	5cd3      	ldrb	r3, [r2, r3]
 801249e:	b25a      	sxtb	r2, r3
 80124a0:	7bbb      	ldrb	r3, [r7, #14]
 80124a2:	2101      	movs	r1, #1
 80124a4:	fa01 f303 	lsl.w	r3, r1, r3
 80124a8:	b25b      	sxtb	r3, r3
 80124aa:	43db      	mvns	r3, r3
 80124ac:	b25b      	sxtb	r3, r3
 80124ae:	4013      	ands	r3, r2
 80124b0:	b25a      	sxtb	r2, r3
 80124b2:	7bfb      	ldrb	r3, [r7, #15]
 80124b4:	b2d1      	uxtb	r1, r2
 80124b6:	4a08      	ldr	r2, [pc, #32]	; (80124d8 <lcd_write_line+0xf8>)
 80124b8:	54d1      	strb	r1, [r2, r3]
}
 80124ba:	bf00      	nop
 80124bc:	3714      	adds	r7, #20
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop
 80124c8:	20001d0d 	.word	0x20001d0d
 80124cc:	20000120 	.word	0x20000120
 80124d0:	20001d0c 	.word	0x20001d0c
 80124d4:	20000130 	.word	0x20000130
 80124d8:	20001da0 	.word	0x20001da0

080124dc <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 80124e6:	79fb      	ldrb	r3, [r7, #7]
 80124e8:	f003 031f 	and.w	r3, r3, #31
 80124ec:	b2da      	uxtb	r2, r3
 80124ee:	7b3b      	ldrb	r3, [r7, #12]
 80124f0:	f362 0304 	bfi	r3, r2, #0, #5
 80124f4:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80124f6:	7b3b      	ldrb	r3, [r7, #12]
 80124f8:	f36f 1346 	bfc	r3, #5, #2
 80124fc:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80124fe:	7b3b      	ldrb	r3, [r7, #12]
 8012500:	f36f 13c7 	bfc	r3, #7, #1
 8012504:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 8012506:	2314      	movs	r3, #20
 8012508:	f107 010c 	add.w	r1, r7, #12
 801250c:	2201      	movs	r2, #1
 801250e:	4803      	ldr	r0, [pc, #12]	; (801251c <prepare_to_send+0x40>)
 8012510:	f7f7 fa62 	bl	80099d8 <HAL_SPI_Transmit>
}
 8012514:	bf00      	nop
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	20001d10 	.word	0x20001d10

08012520 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 8012524:	4b29      	ldr	r3, [pc, #164]	; (80125cc <spi1_init+0xac>)
 8012526:	4a2a      	ldr	r2, [pc, #168]	; (80125d0 <spi1_init+0xb0>)
 8012528:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 801252a:	4b28      	ldr	r3, [pc, #160]	; (80125cc <spi1_init+0xac>)
 801252c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8012530:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 8012532:	4b26      	ldr	r3, [pc, #152]	; (80125cc <spi1_init+0xac>)
 8012534:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012538:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801253a:	4b24      	ldr	r3, [pc, #144]	; (80125cc <spi1_init+0xac>)
 801253c:	2207      	movs	r2, #7
 801253e:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012540:	4b22      	ldr	r3, [pc, #136]	; (80125cc <spi1_init+0xac>)
 8012542:	2200      	movs	r2, #0
 8012544:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012546:	4b21      	ldr	r3, [pc, #132]	; (80125cc <spi1_init+0xac>)
 8012548:	2200      	movs	r2, #0
 801254a:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 801254c:	4b1f      	ldr	r3, [pc, #124]	; (80125cc <spi1_init+0xac>)
 801254e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012552:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012554:	4b1d      	ldr	r3, [pc, #116]	; (80125cc <spi1_init+0xac>)
 8012556:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801255a:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801255c:	4b1b      	ldr	r3, [pc, #108]	; (80125cc <spi1_init+0xac>)
 801255e:	2200      	movs	r2, #0
 8012560:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012562:	4b1a      	ldr	r3, [pc, #104]	; (80125cc <spi1_init+0xac>)
 8012564:	2200      	movs	r2, #0
 8012566:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012568:	4b18      	ldr	r3, [pc, #96]	; (80125cc <spi1_init+0xac>)
 801256a:	2200      	movs	r2, #0
 801256c:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 801256e:	4b17      	ldr	r3, [pc, #92]	; (80125cc <spi1_init+0xac>)
 8012570:	2207      	movs	r2, #7
 8012572:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012574:	4b15      	ldr	r3, [pc, #84]	; (80125cc <spi1_init+0xac>)
 8012576:	2200      	movs	r2, #0
 8012578:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801257a:	4b14      	ldr	r3, [pc, #80]	; (80125cc <spi1_init+0xac>)
 801257c:	2200      	movs	r2, #0
 801257e:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012580:	4b12      	ldr	r3, [pc, #72]	; (80125cc <spi1_init+0xac>)
 8012582:	2200      	movs	r2, #0
 8012584:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8012586:	4b11      	ldr	r3, [pc, #68]	; (80125cc <spi1_init+0xac>)
 8012588:	2200      	movs	r2, #0
 801258a:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801258c:	4b0f      	ldr	r3, [pc, #60]	; (80125cc <spi1_init+0xac>)
 801258e:	2200      	movs	r2, #0
 8012590:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8012592:	4b0e      	ldr	r3, [pc, #56]	; (80125cc <spi1_init+0xac>)
 8012594:	2200      	movs	r2, #0
 8012596:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012598:	4b0c      	ldr	r3, [pc, #48]	; (80125cc <spi1_init+0xac>)
 801259a:	2200      	movs	r2, #0
 801259c:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801259e:	4b0b      	ldr	r3, [pc, #44]	; (80125cc <spi1_init+0xac>)
 80125a0:	2200      	movs	r2, #0
 80125a2:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80125a4:	4b09      	ldr	r3, [pc, #36]	; (80125cc <spi1_init+0xac>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80125aa:	4b08      	ldr	r3, [pc, #32]	; (80125cc <spi1_init+0xac>)
 80125ac:	2200      	movs	r2, #0
 80125ae:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80125b0:	4b06      	ldr	r3, [pc, #24]	; (80125cc <spi1_init+0xac>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 80125b6:	4805      	ldr	r0, [pc, #20]	; (80125cc <spi1_init+0xac>)
 80125b8:	f7f7 f8f8 	bl	80097ac <HAL_SPI_Init>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d001      	beq.n	80125c6 <spi1_init+0xa6>
    {
        Error_Handler();
 80125c2:	f7ee fea1 	bl	8001308 <Error_Handler>
    }
}
 80125c6:	bf00      	nop
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	20001d10 	.word	0x20001d10
 80125d0:	40013000 	.word	0x40013000

080125d4 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	4603      	mov	r3, r0
 80125dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80125de:	2200      	movs	r2, #0
 80125e0:	2110      	movs	r1, #16
 80125e2:	480f      	ldr	r0, [pc, #60]	; (8012620 <pcf8553_blink+0x4c>)
 80125e4:	f7f1 fed0 	bl	8004388 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80125e8:	79fb      	ldrb	r3, [r7, #7]
 80125ea:	f003 0303 	and.w	r3, r3, #3
 80125ee:	b2d9      	uxtb	r1, r3
 80125f0:	4a0c      	ldr	r2, [pc, #48]	; (8012624 <pcf8553_blink+0x50>)
 80125f2:	7813      	ldrb	r3, [r2, #0]
 80125f4:	f361 0342 	bfi	r3, r1, #1, #2
 80125f8:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80125fa:	2003      	movs	r0, #3
 80125fc:	f7ff ff6e 	bl	80124dc <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012600:	2314      	movs	r3, #20
 8012602:	2201      	movs	r2, #1
 8012604:	4907      	ldr	r1, [pc, #28]	; (8012624 <pcf8553_blink+0x50>)
 8012606:	4808      	ldr	r0, [pc, #32]	; (8012628 <pcf8553_blink+0x54>)
 8012608:	f7f7 f9e6 	bl	80099d8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 801260c:	2201      	movs	r2, #1
 801260e:	2110      	movs	r1, #16
 8012610:	4803      	ldr	r0, [pc, #12]	; (8012620 <pcf8553_blink+0x4c>)
 8012612:	f7f1 feb9 	bl	8004388 <HAL_GPIO_WritePin>
}
 8012616:	bf00      	nop
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	42020000 	.word	0x42020000
 8012624:	20001db8 	.word	0x20001db8
 8012628:	20001d10 	.word	0x20001d10

0801262c <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012632:	2300      	movs	r3, #0
 8012634:	607b      	str	r3, [r7, #4]
 8012636:	e007      	b.n	8012648 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 8012638:	4a08      	ldr	r2, [pc, #32]	; (801265c <pcf8553_clear_buff+0x30>)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4413      	add	r3, r2
 801263e:	2200      	movs	r2, #0
 8012640:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	3301      	adds	r3, #1
 8012646:	607b      	str	r3, [r7, #4]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b13      	cmp	r3, #19
 801264c:	ddf4      	ble.n	8012638 <pcf8553_clear_buff+0xc>
    }
}
 801264e:	bf00      	nop
 8012650:	bf00      	nop
 8012652:	370c      	adds	r7, #12
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr
 801265c:	20001da0 	.word	0x20001da0

08012660 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012666:	2200      	movs	r2, #0
 8012668:	2110      	movs	r1, #16
 801266a:	4810      	ldr	r0, [pc, #64]	; (80126ac <pcf8553_dump+0x4c>)
 801266c:	f7f1 fe8c 	bl	8004388 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012670:	2004      	movs	r0, #4
 8012672:	f7ff ff33 	bl	80124dc <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012676:	2300      	movs	r3, #0
 8012678:	607b      	str	r3, [r7, #4]
 801267a:	e00a      	b.n	8012692 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4a0c      	ldr	r2, [pc, #48]	; (80126b0 <pcf8553_dump+0x50>)
 8012680:	1899      	adds	r1, r3, r2
 8012682:	2314      	movs	r3, #20
 8012684:	2201      	movs	r2, #1
 8012686:	480b      	ldr	r0, [pc, #44]	; (80126b4 <pcf8553_dump+0x54>)
 8012688:	f7f7 f9a6 	bl	80099d8 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	3301      	adds	r3, #1
 8012690:	607b      	str	r3, [r7, #4]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b13      	cmp	r3, #19
 8012696:	ddf1      	ble.n	801267c <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012698:	2201      	movs	r2, #1
 801269a:	2110      	movs	r1, #16
 801269c:	4803      	ldr	r0, [pc, #12]	; (80126ac <pcf8553_dump+0x4c>)
 801269e:	f7f1 fe73 	bl	8004388 <HAL_GPIO_WritePin>
}
 80126a2:	bf00      	nop
 80126a4:	3708      	adds	r7, #8
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	42020000 	.word	0x42020000
 80126b0:	20001da0 	.word	0x20001da0
 80126b4:	20001d10 	.word	0x20001d10

080126b8 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	af00      	add	r7, sp, #0
    spi1_init();
 80126bc:	f7ff ff30 	bl	8012520 <spi1_init>
    pcf8553_reset();
 80126c0:	f000 f830 	bl	8012724 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 80126c4:	2314      	movs	r3, #20
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7ef f986 	bl	80019d8 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80126cc:	2200      	movs	r2, #0
 80126ce:	2110      	movs	r1, #16
 80126d0:	480f      	ldr	r0, [pc, #60]	; (8012710 <pcf8553_init+0x58>)
 80126d2:	f7f1 fe59 	bl	8004388 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 80126d6:	2001      	movs	r0, #1
 80126d8:	f7ff ff00 	bl	80124dc <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 80126dc:	2314      	movs	r3, #20
 80126de:	2201      	movs	r2, #1
 80126e0:	490c      	ldr	r1, [pc, #48]	; (8012714 <pcf8553_init+0x5c>)
 80126e2:	480d      	ldr	r0, [pc, #52]	; (8012718 <pcf8553_init+0x60>)
 80126e4:	f7f7 f978 	bl	80099d8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80126e8:	2314      	movs	r3, #20
 80126ea:	2201      	movs	r2, #1
 80126ec:	490b      	ldr	r1, [pc, #44]	; (801271c <pcf8553_init+0x64>)
 80126ee:	480a      	ldr	r0, [pc, #40]	; (8012718 <pcf8553_init+0x60>)
 80126f0:	f7f7 f972 	bl	80099d8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80126f4:	2314      	movs	r3, #20
 80126f6:	2201      	movs	r2, #1
 80126f8:	4909      	ldr	r1, [pc, #36]	; (8012720 <pcf8553_init+0x68>)
 80126fa:	4807      	ldr	r0, [pc, #28]	; (8012718 <pcf8553_init+0x60>)
 80126fc:	f7f7 f96c 	bl	80099d8 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012700:	2201      	movs	r2, #1
 8012702:	2110      	movs	r1, #16
 8012704:	4802      	ldr	r0, [pc, #8]	; (8012710 <pcf8553_init+0x58>)
 8012706:	f7f1 fe3f 	bl	8004388 <HAL_GPIO_WritePin>
}
 801270a:	bf00      	nop
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	42020000 	.word	0x42020000
 8012714:	20001db4 	.word	0x20001db4
 8012718:	20001d10 	.word	0x20001d10
 801271c:	20000140 	.word	0x20000140
 8012720:	20001db8 	.word	0x20001db8

08012724 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 8012728:	2200      	movs	r2, #0
 801272a:	2140      	movs	r1, #64	; 0x40
 801272c:	4806      	ldr	r0, [pc, #24]	; (8012748 <pcf8553_reset+0x24>)
 801272e:	f7f1 fe2b 	bl	8004388 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 8012732:	2314      	movs	r3, #20
 8012734:	4618      	mov	r0, r3
 8012736:	f7ef f94f 	bl	80019d8 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 801273a:	2201      	movs	r2, #1
 801273c:	2140      	movs	r1, #64	; 0x40
 801273e:	4802      	ldr	r0, [pc, #8]	; (8012748 <pcf8553_reset+0x24>)
 8012740:	f7f1 fe22 	bl	8004388 <HAL_GPIO_WritePin>
}
 8012744:	bf00      	nop
 8012746:	bd80      	pop	{r7, pc}
 8012748:	42020000 	.word	0x42020000

0801274c <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012756:	2300      	movs	r3, #0
 8012758:	60fb      	str	r3, [r7, #12]
 801275a:	e007      	b.n	801276c <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 801275c:	4a08      	ldr	r2, [pc, #32]	; (8012780 <pcf8553_write_all+0x34>)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	4413      	add	r3, r2
 8012762:	79fa      	ldrb	r2, [r7, #7]
 8012764:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3301      	adds	r3, #1
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b13      	cmp	r3, #19
 8012770:	ddf4      	ble.n	801275c <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012772:	f7ff ff75 	bl	8012660 <pcf8553_dump>
}
 8012776:	bf00      	nop
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	20001da0 	.word	0x20001da0

08012784 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012784:	b5b0      	push	{r4, r5, r7, lr}
 8012786:	b0b4      	sub	sp, #208	; 0xd0
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 801278e:	4b9d      	ldr	r3, [pc, #628]	; (8012a04 <fm_menu_config_date_hour+0x280>)
 8012790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 8012794:	4b9c      	ldr	r3, [pc, #624]	; (8012a08 <fm_menu_config_date_hour+0x284>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	2b01      	cmp	r3, #1
 801279a:	d107      	bne.n	80127ac <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 801279c:	4b9b      	ldr	r3, [pc, #620]	; (8012a0c <fm_menu_config_date_hour+0x288>)
 801279e:	2200      	movs	r2, #0
 80127a0:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 80127a2:	f7fd f968 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80127a6:	4b98      	ldr	r3, [pc, #608]	; (8012a08 <fm_menu_config_date_hour+0x284>)
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 80127ac:	4b97      	ldr	r3, [pc, #604]	; (8012a0c <fm_menu_config_date_hour+0x288>)
 80127ae:	781a      	ldrb	r2, [r3, #0]
 80127b0:	79fb      	ldrb	r3, [r7, #7]
 80127b2:	4619      	mov	r1, r3
 80127b4:	2001      	movs	r0, #1
 80127b6:	f7fd f965 	bl	800fa84 <fm_lcd_date_hour>
    fm_lcd_refresh();
 80127ba:	f7fd fce8 	bl	801018e <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 80127be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fc faec 	bl	800eda0 <fm_factory_get_date_time>
 80127c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	4b90      	ldr	r3, [pc, #576]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80127ce:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 80127d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7fc fae3 	bl	800eda0 <fm_factory_get_date_time>
 80127da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127dc:	b2da      	uxtb	r2, r3
 80127de:	4b8d      	ldr	r3, [pc, #564]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80127e0:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 80127e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fc fada 	bl	800eda0 <fm_factory_get_date_time>
 80127ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127ee:	b2da      	uxtb	r2, r3
 80127f0:	4b89      	ldr	r3, [pc, #548]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 80127f2:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 80127f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7fc fad1 	bl	800eda0 <fm_factory_get_date_time>
 80127fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012802:	b2da      	uxtb	r2, r3
 8012804:	4b85      	ldr	r3, [pc, #532]	; (8012a1c <fm_menu_config_date_hour+0x298>)
 8012806:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 8012808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801280c:	4618      	mov	r0, r3
 801280e:	f7fc fac7 	bl	800eda0 <fm_factory_get_date_time>
 8012812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012816:	b2da      	uxtb	r2, r3
 8012818:	4b81      	ldr	r3, [pc, #516]	; (8012a20 <fm_menu_config_date_hour+0x29c>)
 801281a:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 801281c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012820:	4618      	mov	r0, r3
 8012822:	f7fc fabd 	bl	800eda0 <fm_factory_get_date_time>
 8012826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801282a:	b2da      	uxtb	r2, r3
 801282c:	4b7d      	ldr	r3, [pc, #500]	; (8012a24 <fm_menu_config_date_hour+0x2a0>)
 801282e:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012830:	79fb      	ldrb	r3, [r7, #7]
 8012832:	3b01      	subs	r3, #1
 8012834:	2b04      	cmp	r3, #4
 8012836:	f200 83be 	bhi.w	8012fb6 <fm_menu_config_date_hour+0x832>
 801283a:	a201      	add	r2, pc, #4	; (adr r2, 8012840 <fm_menu_config_date_hour+0xbc>)
 801283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012840:	08012fb7 	.word	0x08012fb7
 8012844:	08012855 	.word	0x08012855
 8012848:	08012ba9 	.word	0x08012ba9
 801284c:	08012f19 	.word	0x08012f19
 8012850:	08012f95 	.word	0x08012f95
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012854:	4b74      	ldr	r3, [pc, #464]	; (8012a28 <fm_menu_config_date_hour+0x2a4>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	f000 83ae 	beq.w	8012fba <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 801285e:	4b6b      	ldr	r3, [pc, #428]	; (8012a0c <fm_menu_config_date_hour+0x288>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	f040 809b 	bne.w	801299e <fm_menu_config_date_hour+0x21a>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012868:	4b6a      	ldr	r3, [pc, #424]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b01      	cmp	r3, #1
 801286e:	d017      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
 8012870:	4b68      	ldr	r3, [pc, #416]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b03      	cmp	r3, #3
 8012876:	d013      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
                    || month_enum == MAY || month_enum == JULY
 8012878:	4b66      	ldr	r3, [pc, #408]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b05      	cmp	r3, #5
 801287e:	d00f      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
 8012880:	4b64      	ldr	r3, [pc, #400]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b07      	cmp	r3, #7
 8012886:	d00b      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012888:	4b62      	ldr	r3, [pc, #392]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	2b08      	cmp	r3, #8
 801288e:	d007      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
 8012890:	4b60      	ldr	r3, [pc, #384]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b0a      	cmp	r3, #10
 8012896:	d003      	beq.n	80128a0 <fm_menu_config_date_hour+0x11c>
                    || month_enum == DECEMBER)
 8012898:	4b5e      	ldr	r3, [pc, #376]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2b0c      	cmp	r3, #12
 801289e:	d119      	bne.n	80128d4 <fm_menu_config_date_hour+0x150>
                    {
                        if (day_enum < DAY_31)
 80128a0:	4b5b      	ldr	r3, [pc, #364]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	2b1e      	cmp	r3, #30
 80128a6:	d80b      	bhi.n	80128c0 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 80128a8:	4b59      	ldr	r3, [pc, #356]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	3301      	adds	r3, #1
 80128ae:	4a59      	ldr	r2, [pc, #356]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128b0:	7812      	ldrb	r2, [r2, #0]
 80128b2:	4611      	mov	r1, r2
 80128b4:	4a58      	ldr	r2, [pc, #352]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 80128b6:	7812      	ldrb	r2, [r2, #0]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7fc fbdd 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 80128be:	e168      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 80128c0:	4b54      	ldr	r3, [pc, #336]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	4619      	mov	r1, r3
 80128c6:	4b54      	ldr	r3, [pc, #336]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	461a      	mov	r2, r3
 80128cc:	2001      	movs	r0, #1
 80128ce:	f7fc fbd3 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 80128d2:	e15e      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 80128d4:	4b4f      	ldr	r3, [pc, #316]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	2b04      	cmp	r3, #4
 80128da:	d00b      	beq.n	80128f4 <fm_menu_config_date_hour+0x170>
 80128dc:	4b4d      	ldr	r3, [pc, #308]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2b06      	cmp	r3, #6
 80128e2:	d007      	beq.n	80128f4 <fm_menu_config_date_hour+0x170>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 80128e4:	4b4b      	ldr	r3, [pc, #300]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	2b09      	cmp	r3, #9
 80128ea:	d003      	beq.n	80128f4 <fm_menu_config_date_hour+0x170>
 80128ec:	4b49      	ldr	r3, [pc, #292]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	2b0b      	cmp	r3, #11
 80128f2:	d119      	bne.n	8012928 <fm_menu_config_date_hour+0x1a4>
                    {
                        if (day_enum < DAY_30)
 80128f4:	4b46      	ldr	r3, [pc, #280]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2b1d      	cmp	r3, #29
 80128fa:	d80b      	bhi.n	8012914 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 80128fc:	4b44      	ldr	r3, [pc, #272]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	3301      	adds	r3, #1
 8012902:	4a44      	ldr	r2, [pc, #272]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012904:	7812      	ldrb	r2, [r2, #0]
 8012906:	4611      	mov	r1, r2
 8012908:	4a43      	ldr	r2, [pc, #268]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 801290a:	7812      	ldrb	r2, [r2, #0]
 801290c:	4618      	mov	r0, r3
 801290e:	f7fc fbb3 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012912:	e13e      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012914:	4b3f      	ldr	r3, [pc, #252]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	4619      	mov	r1, r3
 801291a:	4b3f      	ldr	r3, [pc, #252]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	461a      	mov	r2, r3
 8012920:	2001      	movs	r0, #1
 8012922:	f7fc fba9 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012926:	e134      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012928:	4b3b      	ldr	r3, [pc, #236]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f003 0303 	and.w	r3, r3, #3
 8012930:	b2db      	uxtb	r3, r3
 8012932:	2b00      	cmp	r3, #0
 8012934:	d119      	bne.n	801296a <fm_menu_config_date_hour+0x1e6>
                        {
                            if (day_enum < DAY_29)
 8012936:	4b36      	ldr	r3, [pc, #216]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b1c      	cmp	r3, #28
 801293c:	d80b      	bhi.n	8012956 <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 801293e:	4b34      	ldr	r3, [pc, #208]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	3301      	adds	r3, #1
 8012944:	4a33      	ldr	r2, [pc, #204]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012946:	7812      	ldrb	r2, [r2, #0]
 8012948:	4611      	mov	r1, r2
 801294a:	4a33      	ldr	r2, [pc, #204]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 801294c:	7812      	ldrb	r2, [r2, #0]
 801294e:	4618      	mov	r0, r3
 8012950:	f7fc fb92 	bl	800f078 <fm_factory_modify_date>
 8012954:	e11d      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012956:	4b2f      	ldr	r3, [pc, #188]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	4619      	mov	r1, r3
 801295c:	4b2e      	ldr	r3, [pc, #184]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	2001      	movs	r0, #1
 8012964:	f7fc fb88 	bl	800f078 <fm_factory_modify_date>
 8012968:	e113      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum < DAY_28)
 801296a:	4b29      	ldr	r3, [pc, #164]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	2b1b      	cmp	r3, #27
 8012970:	d80b      	bhi.n	801298a <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012972:	4b27      	ldr	r3, [pc, #156]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	3301      	adds	r3, #1
 8012978:	4a26      	ldr	r2, [pc, #152]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801297a:	7812      	ldrb	r2, [r2, #0]
 801297c:	4611      	mov	r1, r2
 801297e:	4a26      	ldr	r2, [pc, #152]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 8012980:	7812      	ldrb	r2, [r2, #0]
 8012982:	4618      	mov	r0, r3
 8012984:	f7fc fb78 	bl	800f078 <fm_factory_modify_date>
 8012988:	e103      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801298a:	4b22      	ldr	r3, [pc, #136]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	4619      	mov	r1, r3
 8012990:	4b21      	ldr	r3, [pc, #132]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	461a      	mov	r2, r3
 8012996:	2001      	movs	r0, #1
 8012998:	f7fc fb6e 	bl	800f078 <fm_factory_modify_date>
 801299c:	e0f9      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 801299e:	4b1b      	ldr	r3, [pc, #108]	; (8012a0c <fm_menu_config_date_hour+0x288>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d16a      	bne.n	8012a7c <fm_menu_config_date_hour+0x2f8>
                {
                    if (month_enum < DECEMBER)
 80129a6:	4b1b      	ldr	r3, [pc, #108]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	2b0b      	cmp	r3, #11
 80129ac:	d85c      	bhi.n	8012a68 <fm_menu_config_date_hour+0x2e4>
                    {
                        if ((month_enum + 1 == APRIL || month_enum + 1 == JUNE
 80129ae:	4b19      	ldr	r3, [pc, #100]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	2b03      	cmp	r3, #3
 80129b4:	d00b      	beq.n	80129ce <fm_menu_config_date_hour+0x24a>
 80129b6:	4b17      	ldr	r3, [pc, #92]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	2b05      	cmp	r3, #5
 80129bc:	d007      	beq.n	80129ce <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == SEPTEMBER
 80129be:	4b15      	ldr	r3, [pc, #84]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b08      	cmp	r3, #8
 80129c4:	d003      	beq.n	80129ce <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == NOVEMBER) && (day_enum > DAY_30))
 80129c6:	4b13      	ldr	r3, [pc, #76]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b0a      	cmp	r3, #10
 80129cc:	d107      	bne.n	80129de <fm_menu_config_date_hour+0x25a>
 80129ce:	4b10      	ldr	r3, [pc, #64]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b1e      	cmp	r3, #30
 80129d4:	d903      	bls.n	80129de <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 80129d6:	4b0e      	ldr	r3, [pc, #56]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80129d8:	221e      	movs	r2, #30
 80129da:	701a      	strb	r2, [r3, #0]
 80129dc:	e038      	b.n	8012a50 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 80129de:	4b0d      	ldr	r3, [pc, #52]	; (8012a14 <fm_menu_config_date_hour+0x290>)
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d122      	bne.n	8012a2c <fm_menu_config_date_hour+0x2a8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 80129e6:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <fm_menu_config_date_hour+0x294>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	f003 0303 	and.w	r3, r3, #3
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d11b      	bne.n	8012a2c <fm_menu_config_date_hour+0x2a8>
 80129f4:	4b06      	ldr	r3, [pc, #24]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	2b1d      	cmp	r3, #29
 80129fa:	d917      	bls.n	8012a2c <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 80129fc:	4b04      	ldr	r3, [pc, #16]	; (8012a10 <fm_menu_config_date_hour+0x28c>)
 80129fe:	221d      	movs	r2, #29
 8012a00:	701a      	strb	r2, [r3, #0]
 8012a02:	e025      	b.n	8012a50 <fm_menu_config_date_hour+0x2cc>
 8012a04:	08012785 	.word	0x08012785
 8012a08:	20000141 	.word	0x20000141
 8012a0c:	20001dbd 	.word	0x20001dbd
 8012a10:	20001dbe 	.word	0x20001dbe
 8012a14:	20001dbf 	.word	0x20001dbf
 8012a18:	20001dc0 	.word	0x20001dc0
 8012a1c:	20001dc1 	.word	0x20001dc1
 8012a20:	20001dc2 	.word	0x20001dc2
 8012a24:	20001dc3 	.word	0x20001dc3
 8012a28:	20001dba 	.word	0x20001dba
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012a2c:	4b93      	ldr	r3, [pc, #588]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d10d      	bne.n	8012a50 <fm_menu_config_date_hour+0x2cc>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012a34:	4b92      	ldr	r3, [pc, #584]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	f003 0303 	and.w	r3, r3, #3
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d006      	beq.n	8012a50 <fm_menu_config_date_hour+0x2cc>
 8012a42:	4b90      	ldr	r3, [pc, #576]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	2b1c      	cmp	r3, #28
 8012a48:	d902      	bls.n	8012a50 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012a4a:	4b8e      	ldr	r3, [pc, #568]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012a4c:	221c      	movs	r2, #28
 8012a4e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012a50:	4b8c      	ldr	r3, [pc, #560]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	4618      	mov	r0, r3
 8012a56:	4b89      	ldr	r3, [pc, #548]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	4a88      	ldr	r2, [pc, #544]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012a5e:	7812      	ldrb	r2, [r2, #0]
 8012a60:	4619      	mov	r1, r3
 8012a62:	f7fc fb09 	bl	800f078 <fm_factory_modify_date>
 8012a66:	e094      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012a68:	4b86      	ldr	r3, [pc, #536]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	4b84      	ldr	r3, [pc, #528]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	461a      	mov	r2, r3
 8012a74:	2101      	movs	r1, #1
 8012a76:	f7fc faff 	bl	800f078 <fm_factory_modify_date>
 8012a7a:	e08a      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == YEAR)
 8012a7c:	4b82      	ldr	r3, [pc, #520]	; (8012c88 <fm_menu_config_date_hour+0x504>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b02      	cmp	r3, #2
 8012a82:	d12c      	bne.n	8012ade <fm_menu_config_date_hour+0x35a>
                {
                    if (year_enum < YEAR_99)
 8012a84:	4b7e      	ldr	r3, [pc, #504]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b62      	cmp	r3, #98	; 0x62
 8012a8a:	d81e      	bhi.n	8012aca <fm_menu_config_date_hour+0x346>
                    {
                        if (((year_enum + 1) % YEAR_4 != YEAR_0)
 8012a8c:	4b7c      	ldr	r3, [pc, #496]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	3301      	adds	r3, #1
 8012a92:	f003 0303 	and.w	r3, r3, #3
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00a      	beq.n	8012ab0 <fm_menu_config_date_hour+0x32c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012a9a:	4b78      	ldr	r3, [pc, #480]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	d106      	bne.n	8012ab0 <fm_menu_config_date_hour+0x32c>
 8012aa2:	4b78      	ldr	r3, [pc, #480]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b1c      	cmp	r3, #28
 8012aa8:	d902      	bls.n	8012ab0 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012aaa:	4b76      	ldr	r3, [pc, #472]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012aac:	221c      	movs	r2, #28
 8012aae:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012ab0:	4b74      	ldr	r3, [pc, #464]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	4b71      	ldr	r3, [pc, #452]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	4619      	mov	r1, r3
 8012abc:	4b70      	ldr	r3, [pc, #448]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	f7fc fad8 	bl	800f078 <fm_factory_modify_date>
 8012ac8:	e063      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        year_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012aca:	4b6e      	ldr	r3, [pc, #440]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	4b6a      	ldr	r3, [pc, #424]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	f7fc face 	bl	800f078 <fm_factory_modify_date>
 8012adc:	e059      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == HOUR)
 8012ade:	4b6a      	ldr	r3, [pc, #424]	; (8012c88 <fm_menu_config_date_hour+0x504>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b03      	cmp	r3, #3
 8012ae4:	d119      	bne.n	8012b1a <fm_menu_config_date_hour+0x396>
                {
                    if (hour_enum < HOUR_23)
 8012ae6:	4b69      	ldr	r3, [pc, #420]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b16      	cmp	r3, #22
 8012aec:	d80b      	bhi.n	8012b06 <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1, minute_enum,
 8012aee:	4b67      	ldr	r3, [pc, #412]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	3301      	adds	r3, #1
 8012af4:	4a66      	ldr	r2, [pc, #408]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012af6:	7812      	ldrb	r2, [r2, #0]
 8012af8:	4611      	mov	r1, r2
 8012afa:	4a66      	ldr	r2, [pc, #408]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012afc:	7812      	ldrb	r2, [r2, #0]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fc fd96 	bl	800f630 <fm_factory_modify_time>
 8012b04:	e045      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012b06:	4b62      	ldr	r3, [pc, #392]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	4b61      	ldr	r3, [pc, #388]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	461a      	mov	r2, r3
 8012b12:	2000      	movs	r0, #0
 8012b14:	f7fc fd8c 	bl	800f630 <fm_factory_modify_time>
 8012b18:	e03b      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012b1a:	4b5b      	ldr	r3, [pc, #364]	; (8012c88 <fm_menu_config_date_hour+0x504>)
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b04      	cmp	r3, #4
 8012b20:	d119      	bne.n	8012b56 <fm_menu_config_date_hour+0x3d2>
                {
                    if (minute_enum < MINU_59)
 8012b22:	4b5b      	ldr	r3, [pc, #364]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	2b3a      	cmp	r3, #58	; 0x3a
 8012b28:	d80b      	bhi.n	8012b42 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum + 1,
 8012b2a:	4b58      	ldr	r3, [pc, #352]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	4b57      	ldr	r3, [pc, #348]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	3301      	adds	r3, #1
 8012b36:	4a57      	ldr	r2, [pc, #348]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012b38:	7812      	ldrb	r2, [r2, #0]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	f7fc fd78 	bl	800f630 <fm_factory_modify_time>
 8012b40:	e027      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_0, second_enum);
 8012b42:	4b52      	ldr	r3, [pc, #328]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	4618      	mov	r0, r3
 8012b48:	4b52      	ldr	r3, [pc, #328]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	2100      	movs	r1, #0
 8012b50:	f7fc fd6e 	bl	800f630 <fm_factory_modify_time>
 8012b54:	e01d      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == SECOND)
 8012b56:	4b4c      	ldr	r3, [pc, #304]	; (8012c88 <fm_menu_config_date_hour+0x504>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b05      	cmp	r3, #5
 8012b5c:	d119      	bne.n	8012b92 <fm_menu_config_date_hour+0x40e>
                {
                    if (second_enum < SEC_59)
 8012b5e:	4b4d      	ldr	r3, [pc, #308]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	2b3a      	cmp	r3, #58	; 0x3a
 8012b64:	d80c      	bhi.n	8012b80 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012b66:	4b49      	ldr	r3, [pc, #292]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	4b48      	ldr	r3, [pc, #288]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	4619      	mov	r1, r3
 8012b72:	4b48      	ldr	r3, [pc, #288]	; (8012c94 <fm_menu_config_date_hour+0x510>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	3301      	adds	r3, #1
 8012b78:	461a      	mov	r2, r3
 8012b7a:	f7fc fd59 	bl	800f630 <fm_factory_modify_time>
 8012b7e:	e008      	b.n	8012b92 <fm_menu_config_date_hour+0x40e>
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_0);
 8012b80:	4b42      	ldr	r3, [pc, #264]	; (8012c8c <fm_menu_config_date_hour+0x508>)
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	4618      	mov	r0, r3
 8012b86:	4b42      	ldr	r3, [pc, #264]	; (8012c90 <fm_menu_config_date_hour+0x50c>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	f7fc fd4f 	bl	800f630 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012b92:	2301      	movs	r3, #1
 8012b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b98:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	483d      	ldr	r0, [pc, #244]	; (8012c98 <fm_menu_config_date_hour+0x514>)
 8012ba2:	f7fb fc97 	bl	800e4d4 <_txe_queue_send>
            }
        break;
 8012ba6:	e208      	b.n	8012fba <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012ba8:	4b3c      	ldr	r3, [pc, #240]	; (8012c9c <fm_menu_config_date_hour+0x518>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	f000 8206 	beq.w	8012fbe <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012bb2:	4b35      	ldr	r3, [pc, #212]	; (8012c88 <fm_menu_config_date_hour+0x504>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f040 80ad 	bne.w	8012d16 <fm_menu_config_date_hour+0x592>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012bbc:	4b2f      	ldr	r3, [pc, #188]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d017      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
 8012bc4:	4b2d      	ldr	r3, [pc, #180]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	d013      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
                    || month_enum == MAY || month_enum == JULY
 8012bcc:	4b2b      	ldr	r3, [pc, #172]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b05      	cmp	r3, #5
 8012bd2:	d00f      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
 8012bd4:	4b29      	ldr	r3, [pc, #164]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b07      	cmp	r3, #7
 8012bda:	d00b      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012bdc:	4b27      	ldr	r3, [pc, #156]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b08      	cmp	r3, #8
 8012be2:	d007      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
 8012be4:	4b25      	ldr	r3, [pc, #148]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b0a      	cmp	r3, #10
 8012bea:	d003      	beq.n	8012bf4 <fm_menu_config_date_hour+0x470>
                    || month_enum == DECEMBER)
 8012bec:	4b23      	ldr	r3, [pc, #140]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	2b0c      	cmp	r3, #12
 8012bf2:	d119      	bne.n	8012c28 <fm_menu_config_date_hour+0x4a4>
                    {
                        if (day_enum > DAY_1)
 8012bf4:	4b23      	ldr	r3, [pc, #140]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d90b      	bls.n	8012c14 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012bfc:	4b21      	ldr	r3, [pc, #132]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	4a1e      	ldr	r2, [pc, #120]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c04:	7812      	ldrb	r2, [r2, #0]
 8012c06:	4611      	mov	r1, r2
 8012c08:	4a1d      	ldr	r2, [pc, #116]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012c0a:	7812      	ldrb	r2, [r2, #0]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fc fa33 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012c12:	e166      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012c14:	4b19      	ldr	r3, [pc, #100]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4b19      	ldr	r3, [pc, #100]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	461a      	mov	r2, r3
 8012c20:	201f      	movs	r0, #31
 8012c22:	f7fc fa29 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012c26:	e15c      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012c28:	4b14      	ldr	r3, [pc, #80]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b04      	cmp	r3, #4
 8012c2e:	d00b      	beq.n	8012c48 <fm_menu_config_date_hour+0x4c4>
 8012c30:	4b12      	ldr	r3, [pc, #72]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b06      	cmp	r3, #6
 8012c36:	d007      	beq.n	8012c48 <fm_menu_config_date_hour+0x4c4>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012c38:	4b10      	ldr	r3, [pc, #64]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	2b09      	cmp	r3, #9
 8012c3e:	d003      	beq.n	8012c48 <fm_menu_config_date_hour+0x4c4>
 8012c40:	4b0e      	ldr	r3, [pc, #56]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	2b0b      	cmp	r3, #11
 8012c46:	d12b      	bne.n	8012ca0 <fm_menu_config_date_hour+0x51c>
                    {
                        if (day_enum > DAY_1)
 8012c48:	4b0e      	ldr	r3, [pc, #56]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d90b      	bls.n	8012c68 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012c50:	4b0c      	ldr	r3, [pc, #48]	; (8012c84 <fm_menu_config_date_hour+0x500>)
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	3b01      	subs	r3, #1
 8012c56:	4a09      	ldr	r2, [pc, #36]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c58:	7812      	ldrb	r2, [r2, #0]
 8012c5a:	4611      	mov	r1, r2
 8012c5c:	4a08      	ldr	r2, [pc, #32]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012c5e:	7812      	ldrb	r2, [r2, #0]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fc fa09 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012c66:	e13c      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012c68:	4b04      	ldr	r3, [pc, #16]	; (8012c7c <fm_menu_config_date_hour+0x4f8>)
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4b04      	ldr	r3, [pc, #16]	; (8012c80 <fm_menu_config_date_hour+0x4fc>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	461a      	mov	r2, r3
 8012c74:	201e      	movs	r0, #30
 8012c76:	f7fc f9ff 	bl	800f078 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012c7a:	e132      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
 8012c7c:	20001dbf 	.word	0x20001dbf
 8012c80:	20001dc0 	.word	0x20001dc0
 8012c84:	20001dbe 	.word	0x20001dbe
 8012c88:	20001dbd 	.word	0x20001dbd
 8012c8c:	20001dc1 	.word	0x20001dc1
 8012c90:	20001dc2 	.word	0x20001dc2
 8012c94:	20001dc3 	.word	0x20001dc3
 8012c98:	20001388 	.word	0x20001388
 8012c9c:	20001dba 	.word	0x20001dba
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012ca0:	4b95      	ldr	r3, [pc, #596]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	f003 0303 	and.w	r3, r3, #3
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d119      	bne.n	8012ce2 <fm_menu_config_date_hour+0x55e>
                        {
                            if (day_enum > DAY_1)
 8012cae:	4b93      	ldr	r3, [pc, #588]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d90b      	bls.n	8012cce <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012cb6:	4b91      	ldr	r3, [pc, #580]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	3b01      	subs	r3, #1
 8012cbc:	4a90      	ldr	r2, [pc, #576]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012cbe:	7812      	ldrb	r2, [r2, #0]
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	4a8d      	ldr	r2, [pc, #564]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012cc4:	7812      	ldrb	r2, [r2, #0]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fc f9d6 	bl	800f078 <fm_factory_modify_date>
 8012ccc:	e109      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012cce:	4b8c      	ldr	r3, [pc, #560]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	4b88      	ldr	r3, [pc, #544]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	461a      	mov	r2, r3
 8012cda:	201d      	movs	r0, #29
 8012cdc:	f7fc f9cc 	bl	800f078 <fm_factory_modify_date>
 8012ce0:	e0ff      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum > DAY_1)
 8012ce2:	4b86      	ldr	r3, [pc, #536]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d90b      	bls.n	8012d02 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012cea:	4b84      	ldr	r3, [pc, #528]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	4a83      	ldr	r2, [pc, #524]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012cf2:	7812      	ldrb	r2, [r2, #0]
 8012cf4:	4611      	mov	r1, r2
 8012cf6:	4a80      	ldr	r2, [pc, #512]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012cf8:	7812      	ldrb	r2, [r2, #0]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fc f9bc 	bl	800f078 <fm_factory_modify_date>
 8012d00:	e0ef      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012d02:	4b7f      	ldr	r3, [pc, #508]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	4619      	mov	r1, r3
 8012d08:	4b7b      	ldr	r3, [pc, #492]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	201c      	movs	r0, #28
 8012d10:	f7fc f9b2 	bl	800f078 <fm_factory_modify_date>
 8012d14:	e0e5      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012d16:	4b7b      	ldr	r3, [pc, #492]	; (8012f04 <fm_menu_config_date_hour+0x780>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d156      	bne.n	8012dcc <fm_menu_config_date_hour+0x648>
                {
                    if (month_enum > JANUARY)
 8012d1e:	4b78      	ldr	r3, [pc, #480]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d948      	bls.n	8012db8 <fm_menu_config_date_hour+0x634>
                    {
                        if ((month_enum - 1 == APRIL || month_enum - 1 == JUNE
 8012d26:	4b76      	ldr	r3, [pc, #472]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b05      	cmp	r3, #5
 8012d2c:	d00b      	beq.n	8012d46 <fm_menu_config_date_hour+0x5c2>
 8012d2e:	4b74      	ldr	r3, [pc, #464]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b07      	cmp	r3, #7
 8012d34:	d007      	beq.n	8012d46 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == SEPTEMBER
 8012d36:	4b72      	ldr	r3, [pc, #456]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	2b0a      	cmp	r3, #10
 8012d3c:	d003      	beq.n	8012d46 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012d3e:	4b70      	ldr	r3, [pc, #448]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	2b0c      	cmp	r3, #12
 8012d44:	d107      	bne.n	8012d56 <fm_menu_config_date_hour+0x5d2>
 8012d46:	4b6d      	ldr	r3, [pc, #436]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	2b1e      	cmp	r3, #30
 8012d4c:	d903      	bls.n	8012d56 <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012d4e:	4b6b      	ldr	r3, [pc, #428]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d50:	221e      	movs	r2, #30
 8012d52:	701a      	strb	r2, [r3, #0]
 8012d54:	e024      	b.n	8012da0 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012d56:	4b6a      	ldr	r3, [pc, #424]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	2b03      	cmp	r3, #3
 8012d5c:	d10e      	bne.n	8012d7c <fm_menu_config_date_hour+0x5f8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012d5e:	4b66      	ldr	r3, [pc, #408]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	f003 0303 	and.w	r3, r3, #3
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d107      	bne.n	8012d7c <fm_menu_config_date_hour+0x5f8>
 8012d6c:	4b63      	ldr	r3, [pc, #396]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	2b1d      	cmp	r3, #29
 8012d72:	d903      	bls.n	8012d7c <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012d74:	4b61      	ldr	r3, [pc, #388]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d76:	221d      	movs	r2, #29
 8012d78:	701a      	strb	r2, [r3, #0]
 8012d7a:	e011      	b.n	8012da0 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012d7c:	4b60      	ldr	r3, [pc, #384]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d10d      	bne.n	8012da0 <fm_menu_config_date_hour+0x61c>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012d84:	4b5c      	ldr	r3, [pc, #368]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f003 0303 	and.w	r3, r3, #3
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d006      	beq.n	8012da0 <fm_menu_config_date_hour+0x61c>
 8012d92:	4b5a      	ldr	r3, [pc, #360]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	2b1c      	cmp	r3, #28
 8012d98:	d902      	bls.n	8012da0 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012d9a:	4b58      	ldr	r3, [pc, #352]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012d9c:	221c      	movs	r2, #28
 8012d9e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012da0:	4b56      	ldr	r3, [pc, #344]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	4618      	mov	r0, r3
 8012da6:	4b56      	ldr	r3, [pc, #344]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	3b01      	subs	r3, #1
 8012dac:	4a52      	ldr	r2, [pc, #328]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012dae:	7812      	ldrb	r2, [r2, #0]
 8012db0:	4619      	mov	r1, r3
 8012db2:	f7fc f961 	bl	800f078 <fm_factory_modify_date>
 8012db6:	e094      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8012db8:	4b50      	ldr	r3, [pc, #320]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	4b4e      	ldr	r3, [pc, #312]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	210c      	movs	r1, #12
 8012dc6:	f7fc f957 	bl	800f078 <fm_factory_modify_date>
 8012dca:	e08a      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == YEAR)
 8012dcc:	4b4d      	ldr	r3, [pc, #308]	; (8012f04 <fm_menu_config_date_hour+0x780>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d12c      	bne.n	8012e2e <fm_menu_config_date_hour+0x6aa>
                {
                    if (year_enum > YEAR_0)
 8012dd4:	4b48      	ldr	r3, [pc, #288]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d01e      	beq.n	8012e1a <fm_menu_config_date_hour+0x696>
                    {
                        if (((year_enum - 1) % YEAR_4 != YEAR_0)
 8012ddc:	4b46      	ldr	r3, [pc, #280]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	3b01      	subs	r3, #1
 8012de2:	f003 0303 	and.w	r3, r3, #3
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00a      	beq.n	8012e00 <fm_menu_config_date_hour+0x67c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012dea:	4b45      	ldr	r3, [pc, #276]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	d106      	bne.n	8012e00 <fm_menu_config_date_hour+0x67c>
 8012df2:	4b42      	ldr	r3, [pc, #264]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b1c      	cmp	r3, #28
 8012df8:	d902      	bls.n	8012e00 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 8012dfa:	4b40      	ldr	r3, [pc, #256]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012dfc:	221c      	movs	r2, #28
 8012dfe:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012e00:	4b3e      	ldr	r3, [pc, #248]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	4618      	mov	r0, r3
 8012e06:	4b3e      	ldr	r3, [pc, #248]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	4b3a      	ldr	r3, [pc, #232]	; (8012ef8 <fm_menu_config_date_hour+0x774>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	3b01      	subs	r3, #1
 8012e12:	461a      	mov	r2, r3
 8012e14:	f7fc f930 	bl	800f078 <fm_factory_modify_date>
 8012e18:	e063      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012e1a:	4b38      	ldr	r3, [pc, #224]	; (8012efc <fm_menu_config_date_hour+0x778>)
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	4b37      	ldr	r3, [pc, #220]	; (8012f00 <fm_menu_config_date_hour+0x77c>)
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	2263      	movs	r2, #99	; 0x63
 8012e26:	4619      	mov	r1, r3
 8012e28:	f7fc f926 	bl	800f078 <fm_factory_modify_date>
 8012e2c:	e059      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == HOUR)
 8012e2e:	4b35      	ldr	r3, [pc, #212]	; (8012f04 <fm_menu_config_date_hour+0x780>)
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b03      	cmp	r3, #3
 8012e34:	d119      	bne.n	8012e6a <fm_menu_config_date_hour+0x6e6>
                {
                    if (hour_enum > HOUR_0)
 8012e36:	4b34      	ldr	r3, [pc, #208]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d00b      	beq.n	8012e56 <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012e3e:	4b32      	ldr	r3, [pc, #200]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	3b01      	subs	r3, #1
 8012e44:	4a31      	ldr	r2, [pc, #196]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012e46:	7812      	ldrb	r2, [r2, #0]
 8012e48:	4611      	mov	r1, r2
 8012e4a:	4a31      	ldr	r2, [pc, #196]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012e4c:	7812      	ldrb	r2, [r2, #0]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fc fbee 	bl	800f630 <fm_factory_modify_time>
 8012e54:	e045      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012e56:	4b2d      	ldr	r3, [pc, #180]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4b2c      	ldr	r3, [pc, #176]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	461a      	mov	r2, r3
 8012e62:	2017      	movs	r0, #23
 8012e64:	f7fc fbe4 	bl	800f630 <fm_factory_modify_time>
 8012e68:	e03b      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012e6a:	4b26      	ldr	r3, [pc, #152]	; (8012f04 <fm_menu_config_date_hour+0x780>)
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	2b04      	cmp	r3, #4
 8012e70:	d119      	bne.n	8012ea6 <fm_menu_config_date_hour+0x722>
                {
                    if (minute_enum > MINU_0)
 8012e72:	4b26      	ldr	r3, [pc, #152]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00b      	beq.n	8012e92 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012e7a:	4b23      	ldr	r3, [pc, #140]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	4b22      	ldr	r3, [pc, #136]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	3b01      	subs	r3, #1
 8012e86:	4a22      	ldr	r2, [pc, #136]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012e88:	7812      	ldrb	r2, [r2, #0]
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	f7fc fbd0 	bl	800f630 <fm_factory_modify_time>
 8012e90:	e027      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012e92:	4b1d      	ldr	r3, [pc, #116]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	4618      	mov	r0, r3
 8012e98:	4b1d      	ldr	r3, [pc, #116]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	213b      	movs	r1, #59	; 0x3b
 8012ea0:	f7fc fbc6 	bl	800f630 <fm_factory_modify_time>
 8012ea4:	e01d      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == SECOND)
 8012ea6:	4b17      	ldr	r3, [pc, #92]	; (8012f04 <fm_menu_config_date_hour+0x780>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2b05      	cmp	r3, #5
 8012eac:	d119      	bne.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                {
                    if (second_enum > SEC_0)
 8012eae:	4b18      	ldr	r3, [pc, #96]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00c      	beq.n	8012ed0 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	4b13      	ldr	r3, [pc, #76]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	4b13      	ldr	r3, [pc, #76]	; (8012f10 <fm_menu_config_date_hour+0x78c>)
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	461a      	mov	r2, r3
 8012eca:	f7fc fbb1 	bl	800f630 <fm_factory_modify_time>
 8012ece:	e008      	b.n	8012ee2 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012ed0:	4b0d      	ldr	r3, [pc, #52]	; (8012f08 <fm_menu_config_date_hour+0x784>)
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	4b0d      	ldr	r3, [pc, #52]	; (8012f0c <fm_menu_config_date_hour+0x788>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	223b      	movs	r2, #59	; 0x3b
 8012edc:	4619      	mov	r1, r3
 8012ede:	f7fc fba7 	bl	800f630 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ee8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012eec:	2200      	movs	r2, #0
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4808      	ldr	r0, [pc, #32]	; (8012f14 <fm_menu_config_date_hour+0x790>)
 8012ef2:	f7fb faef 	bl	800e4d4 <_txe_queue_send>
            }
        break;
 8012ef6:	e062      	b.n	8012fbe <fm_menu_config_date_hour+0x83a>
 8012ef8:	20001dc0 	.word	0x20001dc0
 8012efc:	20001dbe 	.word	0x20001dbe
 8012f00:	20001dbf 	.word	0x20001dbf
 8012f04:	20001dbd 	.word	0x20001dbd
 8012f08:	20001dc1 	.word	0x20001dc1
 8012f0c:	20001dc2 	.word	0x20001dc2
 8012f10:	20001dc3 	.word	0x20001dc3
 8012f14:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012f18:	4b5b      	ldr	r3, [pc, #364]	; (8013088 <fm_menu_config_date_hour+0x904>)
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d050      	beq.n	8012fc2 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if (field == DAY)
 8012f20:	4b5a      	ldr	r3, [pc, #360]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d103      	bne.n	8012f30 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012f28:	4b58      	ldr	r3, [pc, #352]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	701a      	strb	r2, [r3, #0]
 8012f2e:	e026      	b.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MONTH)
 8012f30:	4b56      	ldr	r3, [pc, #344]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d103      	bne.n	8012f40 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012f38:	4b54      	ldr	r3, [pc, #336]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	701a      	strb	r2, [r3, #0]
 8012f3e:	e01e      	b.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == YEAR)
 8012f40:	4b52      	ldr	r3, [pc, #328]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b02      	cmp	r3, #2
 8012f46:	d103      	bne.n	8012f50 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012f48:	4b50      	ldr	r3, [pc, #320]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f4a:	2203      	movs	r2, #3
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	e016      	b.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == HOUR)
 8012f50:	4b4e      	ldr	r3, [pc, #312]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b03      	cmp	r3, #3
 8012f56:	d103      	bne.n	8012f60 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012f58:	4b4c      	ldr	r3, [pc, #304]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f5a:	2204      	movs	r2, #4
 8012f5c:	701a      	strb	r2, [r3, #0]
 8012f5e:	e00e      	b.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MINUTE)
 8012f60:	4b4a      	ldr	r3, [pc, #296]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	2b04      	cmp	r3, #4
 8012f66:	d103      	bne.n	8012f70 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012f68:	4b48      	ldr	r3, [pc, #288]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f6a:	2205      	movs	r2, #5
 8012f6c:	701a      	strb	r2, [r3, #0]
 8012f6e:	e006      	b.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == SECOND)
 8012f70:	4b46      	ldr	r3, [pc, #280]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	2b05      	cmp	r3, #5
 8012f76:	d102      	bne.n	8012f7e <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012f78:	4b44      	ldr	r3, [pc, #272]	; (801308c <fm_menu_config_date_hour+0x908>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f84:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f88:	2200      	movs	r2, #0
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	4840      	ldr	r0, [pc, #256]	; (8013090 <fm_menu_config_date_hour+0x90c>)
 8012f8e:	f7fb faa1 	bl	800e4d4 <_txe_queue_send>
            }
        break;
 8012f92:	e016      	b.n	8012fc2 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012f94:	4b3f      	ldr	r3, [pc, #252]	; (8013094 <fm_menu_config_date_hour+0x910>)
 8012f96:	2201      	movs	r2, #1
 8012f98:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012f9a:	4b3f      	ldr	r3, [pc, #252]	; (8013098 <fm_menu_config_date_hour+0x914>)
 8012f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012fa6:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012faa:	2200      	movs	r2, #0
 8012fac:	4619      	mov	r1, r3
 8012fae:	4838      	ldr	r0, [pc, #224]	; (8013090 <fm_menu_config_date_hour+0x90c>)
 8012fb0:	f7fb fa90 	bl	800e4d4 <_txe_queue_send>
        break;
 8012fb4:	e006      	b.n	8012fc4 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012fb6:	bf00      	nop
 8012fb8:	e004      	b.n	8012fc4 <fm_menu_config_date_hour+0x840>
        break;
 8012fba:	bf00      	nop
 8012fbc:	e002      	b.n	8012fc4 <fm_menu_config_date_hour+0x840>
        break;
 8012fbe:	bf00      	nop
 8012fc0:	e000      	b.n	8012fc4 <fm_menu_config_date_hour+0x840>
        break;
 8012fc2:	bf00      	nop
    }

    previous_event = event_id;
 8012fc4:	4a35      	ldr	r2, [pc, #212]	; (801309c <fm_menu_config_date_hour+0x918>)
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 8012fca:	4b35      	ldr	r3, [pc, #212]	; (80130a0 <fm_menu_config_date_hour+0x91c>)
 8012fcc:	f107 0408 	add.w	r4, r7, #8
 8012fd0:	461d      	mov	r5, r3
 8012fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012fda:	c403      	stmia	r4!, {r0, r1}
 8012fdc:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012fde:	f107 0308 	add.w	r3, r7, #8
 8012fe2:	2119      	movs	r1, #25
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7fb fea9 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8012fea:	4b2a      	ldr	r3, [pc, #168]	; (8013094 <fm_menu_config_date_hour+0x910>)
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d143      	bne.n	801307a <fm_menu_config_date_hour+0x8f6>
    {
        if (correct_password)
 8012ff2:	4b25      	ldr	r3, [pc, #148]	; (8013088 <fm_menu_config_date_hour+0x904>)
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d036      	beq.n	8013068 <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012ffa:	4b2a      	ldr	r3, [pc, #168]	; (80130a4 <fm_menu_config_date_hour+0x920>)
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8013002:	4b29      	ldr	r3, [pc, #164]	; (80130a8 <fm_menu_config_date_hour+0x924>)
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 801300a:	4b28      	ldr	r3, [pc, #160]	; (80130ac <fm_menu_config_date_hour+0x928>)
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8013012:	2305      	movs	r3, #5
 8013014:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8013018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801301c:	2200      	movs	r2, #0
 801301e:	4619      	mov	r1, r3
 8013020:	4823      	ldr	r0, [pc, #140]	; (80130b0 <fm_menu_config_date_hour+0x92c>)
 8013022:	f7f6 f8ef 	bl	8009204 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8013026:	4b23      	ldr	r3, [pc, #140]	; (80130b4 <fm_menu_config_date_hour+0x930>)
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 801302e:	4b22      	ldr	r3, [pc, #136]	; (80130b8 <fm_menu_config_date_hour+0x934>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8013036:	4b21      	ldr	r3, [pc, #132]	; (80130bc <fm_menu_config_date_hour+0x938>)
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 801303e:	2300      	movs	r3, #0
 8013040:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013042:	2300      	movs	r3, #0
 8013044:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8013046:	2300      	movs	r3, #0
 8013048:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 801304e:	2300      	movs	r3, #0
 8013050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8013054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013058:	2200      	movs	r2, #0
 801305a:	4619      	mov	r1, r3
 801305c:	4814      	ldr	r0, [pc, #80]	; (80130b0 <fm_menu_config_date_hour+0x92c>)
 801305e:	f7f5 ffc3 	bl	8008fe8 <HAL_RTC_SetTime>

            correct_password = 0;
 8013062:	4b09      	ldr	r3, [pc, #36]	; (8013088 <fm_menu_config_date_hour+0x904>)
 8013064:	2200      	movs	r2, #0
 8013066:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8013068:	4b15      	ldr	r3, [pc, #84]	; (80130c0 <fm_menu_config_date_hour+0x93c>)
 801306a:	2200      	movs	r2, #0
 801306c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801306e:	4b15      	ldr	r3, [pc, #84]	; (80130c4 <fm_menu_config_date_hour+0x940>)
 8013070:	2201      	movs	r2, #1
 8013072:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013074:	4b07      	ldr	r3, [pc, #28]	; (8013094 <fm_menu_config_date_hour+0x910>)
 8013076:	2200      	movs	r2, #0
 8013078:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801307a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 801307e:	4618      	mov	r0, r3
 8013080:	37d0      	adds	r7, #208	; 0xd0
 8013082:	46bd      	mov	sp, r7
 8013084:	bdb0      	pop	{r4, r5, r7, pc}
 8013086:	bf00      	nop
 8013088:	20001dba 	.word	0x20001dba
 801308c:	20001dbd 	.word	0x20001dbd
 8013090:	20001388 	.word	0x20001388
 8013094:	20001dc4 	.word	0x20001dc4
 8013098:	080146d5 	.word	0x080146d5
 801309c:	20001dbb 	.word	0x20001dbb
 80130a0:	08015938 	.word	0x08015938
 80130a4:	20001dbe 	.word	0x20001dbe
 80130a8:	20001dbf 	.word	0x20001dbf
 80130ac:	20001dc0 	.word	0x20001dc0
 80130b0:	200014a4 	.word	0x200014a4
 80130b4:	20001dc1 	.word	0x20001dc1
 80130b8:	20001dc2 	.word	0x20001dc2
 80130bc:	20001dc3 	.word	0x20001dc3
 80130c0:	20001dbc 	.word	0x20001dbc
 80130c4:	20000141 	.word	0x20000141

080130c8 <fm_menu_config_k_lin_1>:
 * @brief Función que imprime el menú del K linealizado 1.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 80130c8:	b5b0      	push	{r4, r5, r7, lr}
 80130ca:	b08c      	sub	sp, #48	; 0x30
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	4603      	mov	r3, r0
 80130d0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 80130d2:	4b51      	ldr	r3, [pc, #324]	; (8013218 <fm_menu_config_k_lin_1+0x150>)
 80130d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80130d6:	4b51      	ldr	r3, [pc, #324]	; (801321c <fm_menu_config_k_lin_1+0x154>)
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d104      	bne.n	80130e8 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 80130de:	f7fc fcca 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80130e2:	4b4e      	ldr	r3, [pc, #312]	; (801321c <fm_menu_config_k_lin_1+0x154>)
 80130e4:	2200      	movs	r2, #0
 80130e6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 80130e8:	4b4d      	ldr	r3, [pc, #308]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 80130ea:	781a      	ldrb	r2, [r3, #0]
 80130ec:	79fb      	ldrb	r3, [r7, #7]
 80130ee:	4619      	mov	r1, r3
 80130f0:	2001      	movs	r0, #1
 80130f2:	f7fc ff33 	bl	800ff5c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80130f6:	f7fd f84a 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 80130fa:	79fb      	ldrb	r3, [r7, #7]
 80130fc:	3b01      	subs	r3, #1
 80130fe:	2b04      	cmp	r3, #4
 8013100:	d863      	bhi.n	80131ca <fm_menu_config_k_lin_1+0x102>
 8013102:	a201      	add	r2, pc, #4	; (adr r2, 8013108 <fm_menu_config_k_lin_1+0x40>)
 8013104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013108:	080131cb 	.word	0x080131cb
 801310c:	0801311d 	.word	0x0801311d
 8013110:	08013147 	.word	0x08013147
 8013114:	08013171 	.word	0x08013171
 8013118:	080131ab 	.word	0x080131ab
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801311c:	4b41      	ldr	r3, [pc, #260]	; (8013224 <fm_menu_config_k_lin_1+0x15c>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d005      	beq.n	8013130 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 8013124:	4b3e      	ldr	r3, [pc, #248]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	2101      	movs	r1, #1
 801312a:	4618      	mov	r0, r3
 801312c:	f7fc f876 	bl	800f21c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013130:	2301      	movs	r3, #1
 8013132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013136:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801313a:	2200      	movs	r2, #0
 801313c:	4619      	mov	r1, r3
 801313e:	483a      	ldr	r0, [pc, #232]	; (8013228 <fm_menu_config_k_lin_1+0x160>)
 8013140:	f7fb f9c8 	bl	800e4d4 <_txe_queue_send>
        break;
 8013144:	e042      	b.n	80131cc <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013146:	4b37      	ldr	r3, [pc, #220]	; (8013224 <fm_menu_config_k_lin_1+0x15c>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d005      	beq.n	801315a <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 801314e:	4b34      	ldr	r3, [pc, #208]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	2101      	movs	r1, #1
 8013154:	4618      	mov	r0, r3
 8013156:	f7fc f94b 	bl	800f3f0 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801315a:	2301      	movs	r3, #1
 801315c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013160:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013164:	2200      	movs	r2, #0
 8013166:	4619      	mov	r1, r3
 8013168:	482f      	ldr	r0, [pc, #188]	; (8013228 <fm_menu_config_k_lin_1+0x160>)
 801316a:	f7fb f9b3 	bl	800e4d4 <_txe_queue_send>
        break;
 801316e:	e02d      	b.n	80131cc <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013170:	4b2c      	ldr	r3, [pc, #176]	; (8013224 <fm_menu_config_k_lin_1+0x15c>)
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00d      	beq.n	8013194 <fm_menu_config_k_lin_1+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013178:	4b29      	ldr	r3, [pc, #164]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	2b0a      	cmp	r3, #10
 801317e:	d806      	bhi.n	801318e <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8013180:	4b27      	ldr	r3, [pc, #156]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	3301      	adds	r3, #1
 8013186:	b2da      	uxtb	r2, r3
 8013188:	4b25      	ldr	r3, [pc, #148]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 801318a:	701a      	strb	r2, [r3, #0]
 801318c:	e002      	b.n	8013194 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801318e:	4b24      	ldr	r3, [pc, #144]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 8013190:	2200      	movs	r2, #0
 8013192:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013194:	2301      	movs	r3, #1
 8013196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801319a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801319e:	2200      	movs	r2, #0
 80131a0:	4619      	mov	r1, r3
 80131a2:	4821      	ldr	r0, [pc, #132]	; (8013228 <fm_menu_config_k_lin_1+0x160>)
 80131a4:	f7fb f996 	bl	800e4d4 <_txe_queue_send>
        break;
 80131a8:	e010      	b.n	80131cc <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80131aa:	4b20      	ldr	r3, [pc, #128]	; (801322c <fm_menu_config_k_lin_1+0x164>)
 80131ac:	2201      	movs	r2, #1
 80131ae:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 80131b0:	4b1f      	ldr	r3, [pc, #124]	; (8013230 <fm_menu_config_k_lin_1+0x168>)
 80131b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80131b4:	2301      	movs	r3, #1
 80131b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131ba:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131be:	2200      	movs	r2, #0
 80131c0:	4619      	mov	r1, r3
 80131c2:	4819      	ldr	r0, [pc, #100]	; (8013228 <fm_menu_config_k_lin_1+0x160>)
 80131c4:	f7fb f986 	bl	800e4d4 <_txe_queue_send>
        break;
 80131c8:	e000      	b.n	80131cc <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80131ca:	bf00      	nop
    }

    previous_event = event_id;
 80131cc:	4a19      	ldr	r2, [pc, #100]	; (8013234 <fm_menu_config_k_lin_1+0x16c>)
 80131ce:	79fb      	ldrb	r3, [r7, #7]
 80131d0:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_1\n";
 80131d2:	4b19      	ldr	r3, [pc, #100]	; (8013238 <fm_menu_config_k_lin_1+0x170>)
 80131d4:	f107 040c 	add.w	r4, r7, #12
 80131d8:	461d      	mov	r5, r3
 80131da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80131e2:	c407      	stmia	r4!, {r0, r1, r2}
 80131e4:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80131e6:	f107 030c 	add.w	r3, r7, #12
 80131ea:	211e      	movs	r1, #30
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7fb fda5 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80131f2:	4b0e      	ldr	r3, [pc, #56]	; (801322c <fm_menu_config_k_lin_1+0x164>)
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d108      	bne.n	801320c <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80131fa:	4b09      	ldr	r3, [pc, #36]	; (8013220 <fm_menu_config_k_lin_1+0x158>)
 80131fc:	2200      	movs	r2, #0
 80131fe:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013200:	4b06      	ldr	r3, [pc, #24]	; (801321c <fm_menu_config_k_lin_1+0x154>)
 8013202:	2201      	movs	r2, #1
 8013204:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013206:	4b09      	ldr	r3, [pc, #36]	; (801322c <fm_menu_config_k_lin_1+0x164>)
 8013208:	2200      	movs	r2, #0
 801320a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801320e:	4618      	mov	r0, r3
 8013210:	3730      	adds	r7, #48	; 0x30
 8013212:	46bd      	mov	sp, r7
 8013214:	bdb0      	pop	{r4, r5, r7, pc}
 8013216:	bf00      	nop
 8013218:	080130c9 	.word	0x080130c9
 801321c:	20000142 	.word	0x20000142
 8013220:	20001dc5 	.word	0x20001dc5
 8013224:	20001dba 	.word	0x20001dba
 8013228:	20001388 	.word	0x20001388
 801322c:	20001dc6 	.word	0x20001dc6
 8013230:	0801323d 	.word	0x0801323d
 8013234:	20001dbb 	.word	0x20001dbb
 8013238:	08015974 	.word	0x08015974

0801323c <fm_menu_config_k_lin_2>:
 * @brief Función que imprime el menú del K linealizado 2.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 801323c:	b5b0      	push	{r4, r5, r7, lr}
 801323e:	b08c      	sub	sp, #48	; 0x30
 8013240:	af00      	add	r7, sp, #0
 8013242:	4603      	mov	r3, r0
 8013244:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013246:	4b51      	ldr	r3, [pc, #324]	; (801338c <fm_menu_config_k_lin_2+0x150>)
 8013248:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801324a:	4b51      	ldr	r3, [pc, #324]	; (8013390 <fm_menu_config_k_lin_2+0x154>)
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d104      	bne.n	801325c <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 8013252:	f7fc fc10 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 8013256:	4b4e      	ldr	r3, [pc, #312]	; (8013390 <fm_menu_config_k_lin_2+0x154>)
 8013258:	2200      	movs	r2, #0
 801325a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 801325c:	4b4d      	ldr	r3, [pc, #308]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 801325e:	781a      	ldrb	r2, [r3, #0]
 8013260:	79fb      	ldrb	r3, [r7, #7]
 8013262:	4619      	mov	r1, r3
 8013264:	2002      	movs	r0, #2
 8013266:	f7fc fe79 	bl	800ff5c <fm_lcd_k_lin>
    fm_lcd_refresh();
 801326a:	f7fc ff90 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	3b01      	subs	r3, #1
 8013272:	2b04      	cmp	r3, #4
 8013274:	d863      	bhi.n	801333e <fm_menu_config_k_lin_2+0x102>
 8013276:	a201      	add	r2, pc, #4	; (adr r2, 801327c <fm_menu_config_k_lin_2+0x40>)
 8013278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327c:	0801333f 	.word	0x0801333f
 8013280:	08013291 	.word	0x08013291
 8013284:	080132bb 	.word	0x080132bb
 8013288:	080132e5 	.word	0x080132e5
 801328c:	0801331f 	.word	0x0801331f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013290:	4b41      	ldr	r3, [pc, #260]	; (8013398 <fm_menu_config_k_lin_2+0x15c>)
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d005      	beq.n	80132a4 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8013298:	4b3e      	ldr	r3, [pc, #248]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	2102      	movs	r1, #2
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fb ffbc 	bl	800f21c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80132a4:	2301      	movs	r3, #1
 80132a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132aa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132ae:	2200      	movs	r2, #0
 80132b0:	4619      	mov	r1, r3
 80132b2:	483a      	ldr	r0, [pc, #232]	; (801339c <fm_menu_config_k_lin_2+0x160>)
 80132b4:	f7fb f90e 	bl	800e4d4 <_txe_queue_send>
        break;
 80132b8:	e042      	b.n	8013340 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80132ba:	4b37      	ldr	r3, [pc, #220]	; (8013398 <fm_menu_config_k_lin_2+0x15c>)
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d005      	beq.n	80132ce <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 80132c2:	4b34      	ldr	r3, [pc, #208]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	2102      	movs	r1, #2
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fc f891 	bl	800f3f0 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80132ce:	2301      	movs	r3, #1
 80132d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132d4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132d8:	2200      	movs	r2, #0
 80132da:	4619      	mov	r1, r3
 80132dc:	482f      	ldr	r0, [pc, #188]	; (801339c <fm_menu_config_k_lin_2+0x160>)
 80132de:	f7fb f8f9 	bl	800e4d4 <_txe_queue_send>
        break;
 80132e2:	e02d      	b.n	8013340 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80132e4:	4b2c      	ldr	r3, [pc, #176]	; (8013398 <fm_menu_config_k_lin_2+0x15c>)
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00d      	beq.n	8013308 <fm_menu_config_k_lin_2+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80132ec:	4b29      	ldr	r3, [pc, #164]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	2b0a      	cmp	r3, #10
 80132f2:	d806      	bhi.n	8013302 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 80132f4:	4b27      	ldr	r3, [pc, #156]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	3301      	adds	r3, #1
 80132fa:	b2da      	uxtb	r2, r3
 80132fc:	4b25      	ldr	r3, [pc, #148]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 80132fe:	701a      	strb	r2, [r3, #0]
 8013300:	e002      	b.n	8013308 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013302:	4b24      	ldr	r3, [pc, #144]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 8013304:	2200      	movs	r2, #0
 8013306:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013308:	2301      	movs	r3, #1
 801330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801330e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013312:	2200      	movs	r2, #0
 8013314:	4619      	mov	r1, r3
 8013316:	4821      	ldr	r0, [pc, #132]	; (801339c <fm_menu_config_k_lin_2+0x160>)
 8013318:	f7fb f8dc 	bl	800e4d4 <_txe_queue_send>
        break;
 801331c:	e010      	b.n	8013340 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801331e:	4b20      	ldr	r3, [pc, #128]	; (80133a0 <fm_menu_config_k_lin_2+0x164>)
 8013320:	2201      	movs	r2, #1
 8013322:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8013324:	4b1f      	ldr	r3, [pc, #124]	; (80133a4 <fm_menu_config_k_lin_2+0x168>)
 8013326:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013328:	2301      	movs	r3, #1
 801332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801332e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013332:	2200      	movs	r2, #0
 8013334:	4619      	mov	r1, r3
 8013336:	4819      	ldr	r0, [pc, #100]	; (801339c <fm_menu_config_k_lin_2+0x160>)
 8013338:	f7fb f8cc 	bl	800e4d4 <_txe_queue_send>
        break;
 801333c:	e000      	b.n	8013340 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801333e:	bf00      	nop
    }

    previous_event = event_id;
 8013340:	4a19      	ldr	r2, [pc, #100]	; (80133a8 <fm_menu_config_k_lin_2+0x16c>)
 8013342:	79fb      	ldrb	r3, [r7, #7]
 8013344:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_2\n";
 8013346:	4b19      	ldr	r3, [pc, #100]	; (80133ac <fm_menu_config_k_lin_2+0x170>)
 8013348:	f107 040c 	add.w	r4, r7, #12
 801334c:	461d      	mov	r5, r3
 801334e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013352:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013356:	c407      	stmia	r4!, {r0, r1, r2}
 8013358:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801335a:	f107 030c 	add.w	r3, r7, #12
 801335e:	211e      	movs	r1, #30
 8013360:	4618      	mov	r0, r3
 8013362:	f7fb fceb 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013366:	4b0e      	ldr	r3, [pc, #56]	; (80133a0 <fm_menu_config_k_lin_2+0x164>)
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d108      	bne.n	8013380 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801336e:	4b09      	ldr	r3, [pc, #36]	; (8013394 <fm_menu_config_k_lin_2+0x158>)
 8013370:	2200      	movs	r2, #0
 8013372:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013374:	4b06      	ldr	r3, [pc, #24]	; (8013390 <fm_menu_config_k_lin_2+0x154>)
 8013376:	2201      	movs	r2, #1
 8013378:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801337a:	4b09      	ldr	r3, [pc, #36]	; (80133a0 <fm_menu_config_k_lin_2+0x164>)
 801337c:	2200      	movs	r2, #0
 801337e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013382:	4618      	mov	r0, r3
 8013384:	3730      	adds	r7, #48	; 0x30
 8013386:	46bd      	mov	sp, r7
 8013388:	bdb0      	pop	{r4, r5, r7, pc}
 801338a:	bf00      	nop
 801338c:	0801323d 	.word	0x0801323d
 8013390:	20000143 	.word	0x20000143
 8013394:	20001dc7 	.word	0x20001dc7
 8013398:	20001dba 	.word	0x20001dba
 801339c:	20001388 	.word	0x20001388
 80133a0:	20001dc8 	.word	0x20001dc8
 80133a4:	080133b1 	.word	0x080133b1
 80133a8:	20001dbb 	.word	0x20001dbb
 80133ac:	08015994 	.word	0x08015994

080133b0 <fm_menu_config_k_lin_3>:
 * @brief Función que imprime el menú del K linealizado 3.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 80133b0:	b5b0      	push	{r4, r5, r7, lr}
 80133b2:	b08c      	sub	sp, #48	; 0x30
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	4603      	mov	r3, r0
 80133b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 80133ba:	4b51      	ldr	r3, [pc, #324]	; (8013500 <fm_menu_config_k_lin_3+0x150>)
 80133bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80133be:	4b51      	ldr	r3, [pc, #324]	; (8013504 <fm_menu_config_k_lin_3+0x154>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d104      	bne.n	80133d0 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 80133c6:	f7fc fb56 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80133ca:	4b4e      	ldr	r3, [pc, #312]	; (8013504 <fm_menu_config_k_lin_3+0x154>)
 80133cc:	2200      	movs	r2, #0
 80133ce:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 80133d0:	4b4d      	ldr	r3, [pc, #308]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 80133d2:	781a      	ldrb	r2, [r3, #0]
 80133d4:	79fb      	ldrb	r3, [r7, #7]
 80133d6:	4619      	mov	r1, r3
 80133d8:	2003      	movs	r0, #3
 80133da:	f7fc fdbf 	bl	800ff5c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80133de:	f7fc fed6 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	3b01      	subs	r3, #1
 80133e6:	2b04      	cmp	r3, #4
 80133e8:	d863      	bhi.n	80134b2 <fm_menu_config_k_lin_3+0x102>
 80133ea:	a201      	add	r2, pc, #4	; (adr r2, 80133f0 <fm_menu_config_k_lin_3+0x40>)
 80133ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f0:	080134b3 	.word	0x080134b3
 80133f4:	08013405 	.word	0x08013405
 80133f8:	0801342f 	.word	0x0801342f
 80133fc:	08013459 	.word	0x08013459
 8013400:	08013493 	.word	0x08013493
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013404:	4b41      	ldr	r3, [pc, #260]	; (801350c <fm_menu_config_k_lin_3+0x15c>)
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d005      	beq.n	8013418 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 801340c:	4b3e      	ldr	r3, [pc, #248]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	2103      	movs	r1, #3
 8013412:	4618      	mov	r0, r3
 8013414:	f7fb ff02 	bl	800f21c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013418:	2301      	movs	r3, #1
 801341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801341e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013422:	2200      	movs	r2, #0
 8013424:	4619      	mov	r1, r3
 8013426:	483a      	ldr	r0, [pc, #232]	; (8013510 <fm_menu_config_k_lin_3+0x160>)
 8013428:	f7fb f854 	bl	800e4d4 <_txe_queue_send>
        break;
 801342c:	e042      	b.n	80134b4 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801342e:	4b37      	ldr	r3, [pc, #220]	; (801350c <fm_menu_config_k_lin_3+0x15c>)
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 8013436:	4b34      	ldr	r3, [pc, #208]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	2103      	movs	r1, #3
 801343c:	4618      	mov	r0, r3
 801343e:	f7fb ffd7 	bl	800f3f0 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013442:	2301      	movs	r3, #1
 8013444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013448:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801344c:	2200      	movs	r2, #0
 801344e:	4619      	mov	r1, r3
 8013450:	482f      	ldr	r0, [pc, #188]	; (8013510 <fm_menu_config_k_lin_3+0x160>)
 8013452:	f7fb f83f 	bl	800e4d4 <_txe_queue_send>
        break;
 8013456:	e02d      	b.n	80134b4 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013458:	4b2c      	ldr	r3, [pc, #176]	; (801350c <fm_menu_config_k_lin_3+0x15c>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00d      	beq.n	801347c <fm_menu_config_k_lin_3+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013460:	4b29      	ldr	r3, [pc, #164]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	2b0a      	cmp	r3, #10
 8013466:	d806      	bhi.n	8013476 <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 8013468:	4b27      	ldr	r3, [pc, #156]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	3301      	adds	r3, #1
 801346e:	b2da      	uxtb	r2, r3
 8013470:	4b25      	ldr	r3, [pc, #148]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 8013472:	701a      	strb	r2, [r3, #0]
 8013474:	e002      	b.n	801347c <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013476:	4b24      	ldr	r3, [pc, #144]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 8013478:	2200      	movs	r2, #0
 801347a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801347c:	2301      	movs	r3, #1
 801347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013482:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013486:	2200      	movs	r2, #0
 8013488:	4619      	mov	r1, r3
 801348a:	4821      	ldr	r0, [pc, #132]	; (8013510 <fm_menu_config_k_lin_3+0x160>)
 801348c:	f7fb f822 	bl	800e4d4 <_txe_queue_send>
        break;
 8013490:	e010      	b.n	80134b4 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013492:	4b20      	ldr	r3, [pc, #128]	; (8013514 <fm_menu_config_k_lin_3+0x164>)
 8013494:	2201      	movs	r2, #1
 8013496:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013498:	4b1f      	ldr	r3, [pc, #124]	; (8013518 <fm_menu_config_k_lin_3+0x168>)
 801349a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801349c:	2301      	movs	r3, #1
 801349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80134a2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80134a6:	2200      	movs	r2, #0
 80134a8:	4619      	mov	r1, r3
 80134aa:	4819      	ldr	r0, [pc, #100]	; (8013510 <fm_menu_config_k_lin_3+0x160>)
 80134ac:	f7fb f812 	bl	800e4d4 <_txe_queue_send>
        break;
 80134b0:	e000      	b.n	80134b4 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80134b2:	bf00      	nop
    }

    previous_event = event_id;
 80134b4:	4a19      	ldr	r2, [pc, #100]	; (801351c <fm_menu_config_k_lin_3+0x16c>)
 80134b6:	79fb      	ldrb	r3, [r7, #7]
 80134b8:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_3\n";
 80134ba:	4b19      	ldr	r3, [pc, #100]	; (8013520 <fm_menu_config_k_lin_3+0x170>)
 80134bc:	f107 040c 	add.w	r4, r7, #12
 80134c0:	461d      	mov	r5, r3
 80134c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80134ca:	c407      	stmia	r4!, {r0, r1, r2}
 80134cc:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80134ce:	f107 030c 	add.w	r3, r7, #12
 80134d2:	211e      	movs	r1, #30
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fb fc31 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80134da:	4b0e      	ldr	r3, [pc, #56]	; (8013514 <fm_menu_config_k_lin_3+0x164>)
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d108      	bne.n	80134f4 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <fm_menu_config_k_lin_3+0x158>)
 80134e4:	2200      	movs	r2, #0
 80134e6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80134e8:	4b06      	ldr	r3, [pc, #24]	; (8013504 <fm_menu_config_k_lin_3+0x154>)
 80134ea:	2201      	movs	r2, #1
 80134ec:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80134ee:	4b09      	ldr	r3, [pc, #36]	; (8013514 <fm_menu_config_k_lin_3+0x164>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80134f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3730      	adds	r7, #48	; 0x30
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bdb0      	pop	{r4, r5, r7, pc}
 80134fe:	bf00      	nop
 8013500:	080133b1 	.word	0x080133b1
 8013504:	20000144 	.word	0x20000144
 8013508:	20001dc9 	.word	0x20001dc9
 801350c:	20001dba 	.word	0x20001dba
 8013510:	20001388 	.word	0x20001388
 8013514:	20001dca 	.word	0x20001dca
 8013518:	08013525 	.word	0x08013525
 801351c:	20001dbb 	.word	0x20001dbb
 8013520:	080159b4 	.word	0x080159b4

08013524 <fm_menu_config_k_lin_4>:
 * @brief Función que imprime el menú del K linealizado 4.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013524:	b5b0      	push	{r4, r5, r7, lr}
 8013526:	b08c      	sub	sp, #48	; 0x30
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 801352e:	4b51      	ldr	r3, [pc, #324]	; (8013674 <fm_menu_config_k_lin_4+0x150>)
 8013530:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013532:	4b51      	ldr	r3, [pc, #324]	; (8013678 <fm_menu_config_k_lin_4+0x154>)
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	2b01      	cmp	r3, #1
 8013538:	d104      	bne.n	8013544 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 801353a:	f7fc fa9c 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 801353e:	4b4e      	ldr	r3, [pc, #312]	; (8013678 <fm_menu_config_k_lin_4+0x154>)
 8013540:	2200      	movs	r2, #0
 8013542:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013544:	4b4d      	ldr	r3, [pc, #308]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 8013546:	781a      	ldrb	r2, [r3, #0]
 8013548:	79fb      	ldrb	r3, [r7, #7]
 801354a:	4619      	mov	r1, r3
 801354c:	2004      	movs	r0, #4
 801354e:	f7fc fd05 	bl	800ff5c <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013552:	f7fc fe1c 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	3b01      	subs	r3, #1
 801355a:	2b04      	cmp	r3, #4
 801355c:	d863      	bhi.n	8013626 <fm_menu_config_k_lin_4+0x102>
 801355e:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <fm_menu_config_k_lin_4+0x40>)
 8013560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013564:	08013627 	.word	0x08013627
 8013568:	08013579 	.word	0x08013579
 801356c:	080135a3 	.word	0x080135a3
 8013570:	080135cd 	.word	0x080135cd
 8013574:	08013607 	.word	0x08013607
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013578:	4b41      	ldr	r3, [pc, #260]	; (8013680 <fm_menu_config_k_lin_4+0x15c>)
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d005      	beq.n	801358c <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013580:	4b3e      	ldr	r3, [pc, #248]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2104      	movs	r1, #4
 8013586:	4618      	mov	r0, r3
 8013588:	f7fb fe48 	bl	800f21c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801358c:	2301      	movs	r3, #1
 801358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013592:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013596:	2200      	movs	r2, #0
 8013598:	4619      	mov	r1, r3
 801359a:	483a      	ldr	r0, [pc, #232]	; (8013684 <fm_menu_config_k_lin_4+0x160>)
 801359c:	f7fa ff9a 	bl	800e4d4 <_txe_queue_send>
        break;
 80135a0:	e042      	b.n	8013628 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80135a2:	4b37      	ldr	r3, [pc, #220]	; (8013680 <fm_menu_config_k_lin_4+0x15c>)
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d005      	beq.n	80135b6 <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 80135aa:	4b34      	ldr	r3, [pc, #208]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	2104      	movs	r1, #4
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fb ff1d 	bl	800f3f0 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80135b6:	2301      	movs	r3, #1
 80135b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135bc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135c0:	2200      	movs	r2, #0
 80135c2:	4619      	mov	r1, r3
 80135c4:	482f      	ldr	r0, [pc, #188]	; (8013684 <fm_menu_config_k_lin_4+0x160>)
 80135c6:	f7fa ff85 	bl	800e4d4 <_txe_queue_send>
        break;
 80135ca:	e02d      	b.n	8013628 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80135cc:	4b2c      	ldr	r3, [pc, #176]	; (8013680 <fm_menu_config_k_lin_4+0x15c>)
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00d      	beq.n	80135f0 <fm_menu_config_k_lin_4+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80135d4:	4b29      	ldr	r3, [pc, #164]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b0a      	cmp	r3, #10
 80135da:	d806      	bhi.n	80135ea <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 80135dc:	4b27      	ldr	r3, [pc, #156]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	3301      	adds	r3, #1
 80135e2:	b2da      	uxtb	r2, r3
 80135e4:	4b25      	ldr	r3, [pc, #148]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 80135e6:	701a      	strb	r2, [r3, #0]
 80135e8:	e002      	b.n	80135f0 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80135ea:	4b24      	ldr	r3, [pc, #144]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80135f0:	2301      	movs	r3, #1
 80135f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135f6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135fa:	2200      	movs	r2, #0
 80135fc:	4619      	mov	r1, r3
 80135fe:	4821      	ldr	r0, [pc, #132]	; (8013684 <fm_menu_config_k_lin_4+0x160>)
 8013600:	f7fa ff68 	bl	800e4d4 <_txe_queue_send>
        break;
 8013604:	e010      	b.n	8013628 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013606:	4b20      	ldr	r3, [pc, #128]	; (8013688 <fm_menu_config_k_lin_4+0x164>)
 8013608:	2201      	movs	r2, #1
 801360a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 801360c:	4b1f      	ldr	r3, [pc, #124]	; (801368c <fm_menu_config_k_lin_4+0x168>)
 801360e:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013610:	2301      	movs	r3, #1
 8013612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013616:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801361a:	2200      	movs	r2, #0
 801361c:	4619      	mov	r1, r3
 801361e:	4819      	ldr	r0, [pc, #100]	; (8013684 <fm_menu_config_k_lin_4+0x160>)
 8013620:	f7fa ff58 	bl	800e4d4 <_txe_queue_send>
        break;
 8013624:	e000      	b.n	8013628 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013626:	bf00      	nop
    }

    previous_event = event_id;
 8013628:	4a19      	ldr	r2, [pc, #100]	; (8013690 <fm_menu_config_k_lin_4+0x16c>)
 801362a:	79fb      	ldrb	r3, [r7, #7]
 801362c:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_4\n";
 801362e:	4b19      	ldr	r3, [pc, #100]	; (8013694 <fm_menu_config_k_lin_4+0x170>)
 8013630:	f107 040c 	add.w	r4, r7, #12
 8013634:	461d      	mov	r5, r3
 8013636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801363a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801363e:	c407      	stmia	r4!, {r0, r1, r2}
 8013640:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013642:	f107 030c 	add.w	r3, r7, #12
 8013646:	211e      	movs	r1, #30
 8013648:	4618      	mov	r0, r3
 801364a:	f7fb fb77 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801364e:	4b0e      	ldr	r3, [pc, #56]	; (8013688 <fm_menu_config_k_lin_4+0x164>)
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	2b01      	cmp	r3, #1
 8013654:	d108      	bne.n	8013668 <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8013656:	4b09      	ldr	r3, [pc, #36]	; (801367c <fm_menu_config_k_lin_4+0x158>)
 8013658:	2200      	movs	r2, #0
 801365a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801365c:	4b06      	ldr	r3, [pc, #24]	; (8013678 <fm_menu_config_k_lin_4+0x154>)
 801365e:	2201      	movs	r2, #1
 8013660:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013662:	4b09      	ldr	r3, [pc, #36]	; (8013688 <fm_menu_config_k_lin_4+0x164>)
 8013664:	2200      	movs	r2, #0
 8013666:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801366a:	4618      	mov	r0, r3
 801366c:	3730      	adds	r7, #48	; 0x30
 801366e:	46bd      	mov	sp, r7
 8013670:	bdb0      	pop	{r4, r5, r7, pc}
 8013672:	bf00      	nop
 8013674:	08013525 	.word	0x08013525
 8013678:	20000145 	.word	0x20000145
 801367c:	20001dcb 	.word	0x20001dcb
 8013680:	20001dba 	.word	0x20001dba
 8013684:	20001388 	.word	0x20001388
 8013688:	20001dcc 	.word	0x20001dcc
 801368c:	08013699 	.word	0x08013699
 8013690:	20001dbb 	.word	0x20001dbb
 8013694:	080159d4 	.word	0x080159d4

08013698 <fm_menu_config_k_lin_5>:
 * @brief Función que imprime el menú del K linealizado 5.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013698:	b5b0      	push	{r4, r5, r7, lr}
 801369a:	b08c      	sub	sp, #48	; 0x30
 801369c:	af00      	add	r7, sp, #0
 801369e:	4603      	mov	r3, r0
 80136a0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80136a2:	4b52      	ldr	r3, [pc, #328]	; (80137ec <fm_menu_config_k_lin_5+0x154>)
 80136a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80136a6:	4b52      	ldr	r3, [pc, #328]	; (80137f0 <fm_menu_config_k_lin_5+0x158>)
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d104      	bne.n	80136b8 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 80136ae:	f7fc f9e2 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80136b2:	4b4f      	ldr	r3, [pc, #316]	; (80137f0 <fm_menu_config_k_lin_5+0x158>)
 80136b4:	2200      	movs	r2, #0
 80136b6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 80136b8:	4b4e      	ldr	r3, [pc, #312]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 80136ba:	781a      	ldrb	r2, [r3, #0]
 80136bc:	79fb      	ldrb	r3, [r7, #7]
 80136be:	4619      	mov	r1, r3
 80136c0:	2005      	movs	r0, #5
 80136c2:	f7fc fc4b 	bl	800ff5c <fm_lcd_k_lin>
    fm_lcd_refresh();
 80136c6:	f7fc fd62 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	2b04      	cmp	r3, #4
 80136d0:	d866      	bhi.n	80137a0 <fm_menu_config_k_lin_5+0x108>
 80136d2:	a201      	add	r2, pc, #4	; (adr r2, 80136d8 <fm_menu_config_k_lin_5+0x40>)
 80136d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d8:	080137a1 	.word	0x080137a1
 80136dc:	080136ed 	.word	0x080136ed
 80136e0:	08013717 	.word	0x08013717
 80136e4:	08013741 	.word	0x08013741
 80136e8:	0801377b 	.word	0x0801377b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80136ec:	4b42      	ldr	r3, [pc, #264]	; (80137f8 <fm_menu_config_k_lin_5+0x160>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d005      	beq.n	8013700 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80136f4:	4b3f      	ldr	r3, [pc, #252]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	2105      	movs	r1, #5
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fb fd8e 	bl	800f21c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013700:	2301      	movs	r3, #1
 8013702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013706:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801370a:	2200      	movs	r2, #0
 801370c:	4619      	mov	r1, r3
 801370e:	483b      	ldr	r0, [pc, #236]	; (80137fc <fm_menu_config_k_lin_5+0x164>)
 8013710:	f7fa fee0 	bl	800e4d4 <_txe_queue_send>
        break;
 8013714:	e045      	b.n	80137a2 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013716:	4b38      	ldr	r3, [pc, #224]	; (80137f8 <fm_menu_config_k_lin_5+0x160>)
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 801371e:	4b35      	ldr	r3, [pc, #212]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	2105      	movs	r1, #5
 8013724:	4618      	mov	r0, r3
 8013726:	f7fb fe63 	bl	800f3f0 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801372a:	2301      	movs	r3, #1
 801372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013730:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013734:	2200      	movs	r2, #0
 8013736:	4619      	mov	r1, r3
 8013738:	4830      	ldr	r0, [pc, #192]	; (80137fc <fm_menu_config_k_lin_5+0x164>)
 801373a:	f7fa fecb 	bl	800e4d4 <_txe_queue_send>
        break;
 801373e:	e030      	b.n	80137a2 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013740:	4b2d      	ldr	r3, [pc, #180]	; (80137f8 <fm_menu_config_k_lin_5+0x160>)
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00d      	beq.n	8013764 <fm_menu_config_k_lin_5+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013748:	4b2a      	ldr	r3, [pc, #168]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	2b0a      	cmp	r3, #10
 801374e:	d806      	bhi.n	801375e <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 8013750:	4b28      	ldr	r3, [pc, #160]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	3301      	adds	r3, #1
 8013756:	b2da      	uxtb	r2, r3
 8013758:	4b26      	ldr	r3, [pc, #152]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 801375a:	701a      	strb	r2, [r3, #0]
 801375c:	e002      	b.n	8013764 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801375e:	4b25      	ldr	r3, [pc, #148]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 8013760:	2200      	movs	r2, #0
 8013762:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013764:	2301      	movs	r3, #1
 8013766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801376a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801376e:	2200      	movs	r2, #0
 8013770:	4619      	mov	r1, r3
 8013772:	4822      	ldr	r0, [pc, #136]	; (80137fc <fm_menu_config_k_lin_5+0x164>)
 8013774:	f7fa feae 	bl	800e4d4 <_txe_queue_send>
        break;
 8013778:	e013      	b.n	80137a2 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ESC:
            correct_password = 0;
 801377a:	4b1f      	ldr	r3, [pc, #124]	; (80137f8 <fm_menu_config_k_lin_5+0x160>)
 801377c:	2200      	movs	r2, #0
 801377e:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 8013780:	4b1f      	ldr	r3, [pc, #124]	; (8013800 <fm_menu_config_k_lin_5+0x168>)
 8013782:	2201      	movs	r2, #1
 8013784:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013786:	4b1f      	ldr	r3, [pc, #124]	; (8013804 <fm_menu_config_k_lin_5+0x16c>)
 8013788:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801378a:	2301      	movs	r3, #1
 801378c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013790:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013794:	2200      	movs	r2, #0
 8013796:	4619      	mov	r1, r3
 8013798:	4818      	ldr	r0, [pc, #96]	; (80137fc <fm_menu_config_k_lin_5+0x164>)
 801379a:	f7fa fe9b 	bl	800e4d4 <_txe_queue_send>
        break;
 801379e:	e000      	b.n	80137a2 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80137a0:	bf00      	nop
    }

    previous_event = event_id;
 80137a2:	4a19      	ldr	r2, [pc, #100]	; (8013808 <fm_menu_config_k_lin_5+0x170>)
 80137a4:	79fb      	ldrb	r3, [r7, #7]
 80137a6:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_5\n";
 80137a8:	4b18      	ldr	r3, [pc, #96]	; (801380c <fm_menu_config_k_lin_5+0x174>)
 80137aa:	f107 040c 	add.w	r4, r7, #12
 80137ae:	461d      	mov	r5, r3
 80137b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80137b8:	c407      	stmia	r4!, {r0, r1, r2}
 80137ba:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80137bc:	f107 030c 	add.w	r3, r7, #12
 80137c0:	211e      	movs	r1, #30
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fb faba 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80137c8:	4b0d      	ldr	r3, [pc, #52]	; (8013800 <fm_menu_config_k_lin_5+0x168>)
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d108      	bne.n	80137e2 <fm_menu_config_k_lin_5+0x14a>
    {
        digit_lin_modify = DIG_LIN_0;
 80137d0:	4b08      	ldr	r3, [pc, #32]	; (80137f4 <fm_menu_config_k_lin_5+0x15c>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80137d6:	4b06      	ldr	r3, [pc, #24]	; (80137f0 <fm_menu_config_k_lin_5+0x158>)
 80137d8:	2201      	movs	r2, #1
 80137da:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80137dc:	4b08      	ldr	r3, [pc, #32]	; (8013800 <fm_menu_config_k_lin_5+0x168>)
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80137e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3730      	adds	r7, #48	; 0x30
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bdb0      	pop	{r4, r5, r7, pc}
 80137ec:	08013699 	.word	0x08013699
 80137f0:	20000146 	.word	0x20000146
 80137f4:	20001dcd 	.word	0x20001dcd
 80137f8:	20001dba 	.word	0x20001dba
 80137fc:	20001388 	.word	0x20001388
 8013800:	20001dce 	.word	0x20001dce
 8013804:	080146d5 	.word	0x080146d5
 8013808:	20001dbb 	.word	0x20001dbb
 801380c:	080159f4 	.word	0x080159f4

08013810 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 8013810:	b5b0      	push	{r4, r5, r7, lr}
 8013812:	b08a      	sub	sp, #40	; 0x28
 8013814:	af00      	add	r7, sp, #0
 8013816:	4603      	mov	r3, r0
 8013818:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 801381a:	4b69      	ldr	r3, [pc, #420]	; (80139c0 <fm_menu_config_k_param+0x1b0>)
 801381c:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 801381e:	4b69      	ldr	r3, [pc, #420]	; (80139c4 <fm_menu_config_k_param+0x1b4>)
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	2b01      	cmp	r3, #1
 8013824:	d104      	bne.n	8013830 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 8013826:	f7fc f926 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 801382a:	4b66      	ldr	r3, [pc, #408]	; (80139c4 <fm_menu_config_k_param+0x1b4>)
 801382c:	2200      	movs	r2, #0
 801382e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013830:	4b65      	ldr	r3, [pc, #404]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013832:	781a      	ldrb	r2, [r3, #0]
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f7fc fb1d 	bl	800fe78 <fm_lcd_k_factor>
    fm_lcd_refresh();
 801383e:	f7fc fca6 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8013842:	79fb      	ldrb	r3, [r7, #7]
 8013844:	3b01      	subs	r3, #1
 8013846:	2b04      	cmp	r3, #4
 8013848:	f200 8094 	bhi.w	8013974 <fm_menu_config_k_param+0x164>
 801384c:	a201      	add	r2, pc, #4	; (adr r2, 8013854 <fm_menu_config_k_param+0x44>)
 801384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013852:	bf00      	nop
 8013854:	08013975 	.word	0x08013975
 8013858:	08013869 	.word	0x08013869
 801385c:	08013891 	.word	0x08013891
 8013860:	080138b9 	.word	0x080138b9
 8013864:	08013955 	.word	0x08013955
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013868:	4b58      	ldr	r3, [pc, #352]	; (80139cc <fm_menu_config_k_param+0x1bc>)
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d004      	beq.n	801387a <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013870:	4b55      	ldr	r3, [pc, #340]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	4618      	mov	r0, r3
 8013876:	f7fb fc51 	bl	800f11c <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801387a:	2301      	movs	r3, #1
 801387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013880:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013884:	2200      	movs	r2, #0
 8013886:	4619      	mov	r1, r3
 8013888:	4851      	ldr	r0, [pc, #324]	; (80139d0 <fm_menu_config_k_param+0x1c0>)
 801388a:	f7fa fe23 	bl	800e4d4 <_txe_queue_send>
        break;
 801388e:	e072      	b.n	8013976 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013890:	4b4e      	ldr	r3, [pc, #312]	; (80139cc <fm_menu_config_k_param+0x1bc>)
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d004      	beq.n	80138a2 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013898:	4b4b      	ldr	r3, [pc, #300]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	4618      	mov	r0, r3
 801389e:	f7fb fc7d 	bl	800f19c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80138a2:	2301      	movs	r3, #1
 80138a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138a8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80138ac:	2200      	movs	r2, #0
 80138ae:	4619      	mov	r1, r3
 80138b0:	4847      	ldr	r0, [pc, #284]	; (80139d0 <fm_menu_config_k_param+0x1c0>)
 80138b2:	f7fa fe0f 	bl	800e4d4 <_txe_queue_send>
        break;
 80138b6:	e05e      	b.n	8013976 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80138b8:	4b44      	ldr	r3, [pc, #272]	; (80139cc <fm_menu_config_k_param+0x1bc>)
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d03e      	beq.n	801393e <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 80138c0:	4b41      	ldr	r3, [pc, #260]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d103      	bne.n	80138d0 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 80138c8:	4b3f      	ldr	r3, [pc, #252]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138ca:	2201      	movs	r2, #1
 80138cc:	701a      	strb	r2, [r3, #0]
 80138ce:	e036      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 80138d0:	4b3d      	ldr	r3, [pc, #244]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d103      	bne.n	80138e0 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 80138d8:	4b3b      	ldr	r3, [pc, #236]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138da:	2202      	movs	r2, #2
 80138dc:	701a      	strb	r2, [r3, #0]
 80138de:	e02e      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 80138e0:	4b39      	ldr	r3, [pc, #228]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	2b02      	cmp	r3, #2
 80138e6:	d103      	bne.n	80138f0 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 80138e8:	4b37      	ldr	r3, [pc, #220]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138ea:	2203      	movs	r2, #3
 80138ec:	701a      	strb	r2, [r3, #0]
 80138ee:	e026      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 80138f0:	4b35      	ldr	r3, [pc, #212]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b03      	cmp	r3, #3
 80138f6:	d103      	bne.n	8013900 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 80138f8:	4b33      	ldr	r3, [pc, #204]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80138fa:	2204      	movs	r2, #4
 80138fc:	701a      	strb	r2, [r3, #0]
 80138fe:	e01e      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 8013900:	4b31      	ldr	r3, [pc, #196]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	2b04      	cmp	r3, #4
 8013906:	d103      	bne.n	8013910 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 8013908:	4b2f      	ldr	r3, [pc, #188]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 801390a:	2205      	movs	r2, #5
 801390c:	701a      	strb	r2, [r3, #0]
 801390e:	e016      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 8013910:	4b2d      	ldr	r3, [pc, #180]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b05      	cmp	r3, #5
 8013916:	d103      	bne.n	8013920 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 8013918:	4b2b      	ldr	r3, [pc, #172]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 801391a:	2206      	movs	r2, #6
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	e00e      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 8013920:	4b29      	ldr	r3, [pc, #164]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	2b06      	cmp	r3, #6
 8013926:	d103      	bne.n	8013930 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 8013928:	4b27      	ldr	r3, [pc, #156]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 801392a:	2207      	movs	r2, #7
 801392c:	701a      	strb	r2, [r3, #0]
 801392e:	e006      	b.n	801393e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 8013930:	4b25      	ldr	r3, [pc, #148]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b07      	cmp	r3, #7
 8013936:	d102      	bne.n	801393e <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 8013938:	4b23      	ldr	r3, [pc, #140]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 801393a:	2200      	movs	r2, #0
 801393c:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801393e:	2301      	movs	r3, #1
 8013940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013944:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013948:	2200      	movs	r2, #0
 801394a:	4619      	mov	r1, r3
 801394c:	4820      	ldr	r0, [pc, #128]	; (80139d0 <fm_menu_config_k_param+0x1c0>)
 801394e:	f7fa fdc1 	bl	800e4d4 <_txe_queue_send>
        break;
 8013952:	e010      	b.n	8013976 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013954:	4b1f      	ldr	r3, [pc, #124]	; (80139d4 <fm_menu_config_k_param+0x1c4>)
 8013956:	2201      	movs	r2, #1
 8013958:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 801395a:	4b1f      	ldr	r3, [pc, #124]	; (80139d8 <fm_menu_config_k_param+0x1c8>)
 801395c:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 801395e:	2301      	movs	r3, #1
 8013960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013964:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013968:	2200      	movs	r2, #0
 801396a:	4619      	mov	r1, r3
 801396c:	4818      	ldr	r0, [pc, #96]	; (80139d0 <fm_menu_config_k_param+0x1c0>)
 801396e:	f7fa fdb1 	bl	800e4d4 <_txe_queue_send>
        break;
 8013972:	e000      	b.n	8013976 <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013974:	bf00      	nop
    }

    previous_event = event_id;
 8013976:	4a19      	ldr	r2, [pc, #100]	; (80139dc <fm_menu_config_k_param+0x1cc>)
 8013978:	79fb      	ldrb	r3, [r7, #7]
 801397a:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 801397c:	4b18      	ldr	r3, [pc, #96]	; (80139e0 <fm_menu_config_k_param+0x1d0>)
 801397e:	f107 0408 	add.w	r4, r7, #8
 8013982:	461d      	mov	r5, r3
 8013984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013988:	e895 0003 	ldmia.w	r5, {r0, r1}
 801398c:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013990:	f107 0308 	add.w	r3, r7, #8
 8013994:	2118      	movs	r1, #24
 8013996:	4618      	mov	r0, r3
 8013998:	f7fb f9d0 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801399c:	4b0d      	ldr	r3, [pc, #52]	; (80139d4 <fm_menu_config_k_param+0x1c4>)
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d108      	bne.n	80139b6 <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 80139a4:	4b08      	ldr	r3, [pc, #32]	; (80139c8 <fm_menu_config_k_param+0x1b8>)
 80139a6:	2200      	movs	r2, #0
 80139a8:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80139aa:	4b06      	ldr	r3, [pc, #24]	; (80139c4 <fm_menu_config_k_param+0x1b4>)
 80139ac:	2201      	movs	r2, #1
 80139ae:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <fm_menu_config_k_param+0x1c4>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80139b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3728      	adds	r7, #40	; 0x28
 80139bc:	46bd      	mov	sp, r7
 80139be:	bdb0      	pop	{r4, r5, r7, pc}
 80139c0:	08013811 	.word	0x08013811
 80139c4:	20000147 	.word	0x20000147
 80139c8:	20001dcf 	.word	0x20001dcf
 80139cc:	20001dba 	.word	0x20001dba
 80139d0:	20001388 	.word	0x20001388
 80139d4:	20001dd0 	.word	0x20001dd0
 80139d8:	080130c9 	.word	0x080130c9
 80139dc:	20001dbb 	.word	0x20001dbb
 80139e0:	08015a14 	.word	0x08015a14

080139e4 <fm_menu_config_pass>:
 * regresa al menú de inicio donde se encienden todos los leds.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 80139e4:	b5b0      	push	{r4, r5, r7, lr}
 80139e6:	b086      	sub	sp, #24
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	4603      	mov	r3, r0
 80139ec:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80139ee:	4ba8      	ldr	r3, [pc, #672]	; (8013c90 <fm_menu_config_pass+0x2ac>)
 80139f0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80139f2:	4ba8      	ldr	r3, [pc, #672]	; (8013c94 <fm_menu_config_pass+0x2b0>)
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d10a      	bne.n	8013a10 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 80139fa:	4ba7      	ldr	r3, [pc, #668]	; (8013c98 <fm_menu_config_pass+0x2b4>)
 80139fc:	2201      	movs	r2, #1
 80139fe:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013a00:	4ba6      	ldr	r3, [pc, #664]	; (8013c9c <fm_menu_config_pass+0x2b8>)
 8013a02:	2200      	movs	r2, #0
 8013a04:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8013a06:	f7fc f836 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 8013a0a:	4ba2      	ldr	r3, [pc, #648]	; (8013c94 <fm_menu_config_pass+0x2b0>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013a10:	2100      	movs	r1, #0
 8013a12:	200a      	movs	r0, #10
 8013a14:	f7fd fee0 	bl	80117d8 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 8013a18:	4ba1      	ldr	r3, [pc, #644]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d104      	bne.n	8013a2a <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013a20:	2100      	movs	r1, #0
 8013a22:	200d      	movs	r0, #13
 8013a24:	f7fd fed8 	bl	80117d8 <lcd_set_symbol>
 8013a28:	e010      	b.n	8013a4c <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 8013a2a:	4b9d      	ldr	r3, [pc, #628]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	d104      	bne.n	8013a3c <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013a32:	2100      	movs	r1, #0
 8013a34:	200e      	movs	r0, #14
 8013a36:	f7fd fecf 	bl	80117d8 <lcd_set_symbol>
 8013a3a:	e007      	b.n	8013a4c <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013a3c:	4b98      	ldr	r3, [pc, #608]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	2b03      	cmp	r3, #3
 8013a42:	d103      	bne.n	8013a4c <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013a44:	2100      	movs	r1, #0
 8013a46:	200f      	movs	r0, #15
 8013a48:	f7fd fec6 	bl	80117d8 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013a4c:	f7fc fb9f 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8013a50:	79fb      	ldrb	r3, [r7, #7]
 8013a52:	3b01      	subs	r3, #1
 8013a54:	2b04      	cmp	r3, #4
 8013a56:	f200 8085 	bhi.w	8013b64 <fm_menu_config_pass+0x180>
 8013a5a:	a201      	add	r2, pc, #4	; (adr r2, 8013a60 <fm_menu_config_pass+0x7c>)
 8013a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a60:	08013b65 	.word	0x08013b65
 8013a64:	08013a75 	.word	0x08013a75
 8013a68:	08013ab1 	.word	0x08013ab1
 8013a6c:	08013aed 	.word	0x08013aed
 8013a70:	08013b29 	.word	0x08013b29
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013a74:	4b8a      	ldr	r3, [pc, #552]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	4b8a      	ldr	r3, [pc, #552]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013a7c:	2101      	movs	r1, #1
 8013a7e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a80:	4b87      	ldr	r3, [pc, #540]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	d80f      	bhi.n	8013aa8 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a8c:	f107 0313 	add.w	r3, r7, #19
 8013a90:	2200      	movs	r2, #0
 8013a92:	4619      	mov	r1, r3
 8013a94:	4884      	ldr	r0, [pc, #528]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013a96:	f7fa fd1d 	bl	800e4d4 <_txe_queue_send>
                password_index++;
 8013a9a:	4b81      	ldr	r3, [pc, #516]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	b2da      	uxtb	r2, r3
 8013aa2:	4b7f      	ldr	r3, [pc, #508]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013aa4:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013aa6:	e05e      	b.n	8013b66 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013aa8:	4b80      	ldr	r3, [pc, #512]	; (8013cac <fm_menu_config_pass+0x2c8>)
 8013aaa:	2201      	movs	r2, #1
 8013aac:	701a      	strb	r2, [r3, #0]
        break;
 8013aae:	e05a      	b.n	8013b66 <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013ab0:	4b7b      	ldr	r3, [pc, #492]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	4b7b      	ldr	r3, [pc, #492]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013ab8:	2102      	movs	r1, #2
 8013aba:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013abc:	4b78      	ldr	r3, [pc, #480]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	d80f      	bhi.n	8013ae4 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ac8:	f107 0313 	add.w	r3, r7, #19
 8013acc:	2200      	movs	r2, #0
 8013ace:	4619      	mov	r1, r3
 8013ad0:	4875      	ldr	r0, [pc, #468]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013ad2:	f7fa fcff 	bl	800e4d4 <_txe_queue_send>
                password_index++;
 8013ad6:	4b72      	ldr	r3, [pc, #456]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	3301      	adds	r3, #1
 8013adc:	b2da      	uxtb	r2, r3
 8013ade:	4b70      	ldr	r3, [pc, #448]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013ae0:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013ae2:	e040      	b.n	8013b66 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013ae4:	4b71      	ldr	r3, [pc, #452]	; (8013cac <fm_menu_config_pass+0x2c8>)
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	701a      	strb	r2, [r3, #0]
        break;
 8013aea:	e03c      	b.n	8013b66 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013aec:	4b6c      	ldr	r3, [pc, #432]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	461a      	mov	r2, r3
 8013af2:	4b6c      	ldr	r3, [pc, #432]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013af4:	2103      	movs	r1, #3
 8013af6:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013af8:	4b69      	ldr	r3, [pc, #420]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d80f      	bhi.n	8013b20 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013b00:	2301      	movs	r3, #1
 8013b02:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b04:	f107 0313 	add.w	r3, r7, #19
 8013b08:	2200      	movs	r2, #0
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	4866      	ldr	r0, [pc, #408]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013b0e:	f7fa fce1 	bl	800e4d4 <_txe_queue_send>
                password_index++;
 8013b12:	4b63      	ldr	r3, [pc, #396]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	3301      	adds	r3, #1
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	4b61      	ldr	r3, [pc, #388]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b1c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013b1e:	e022      	b.n	8013b66 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b20:	4b62      	ldr	r3, [pc, #392]	; (8013cac <fm_menu_config_pass+0x2c8>)
 8013b22:	2201      	movs	r2, #1
 8013b24:	701a      	strb	r2, [r3, #0]
        break;
 8013b26:	e01e      	b.n	8013b66 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013b28:	4b5d      	ldr	r3, [pc, #372]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4b5d      	ldr	r3, [pc, #372]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013b30:	2104      	movs	r1, #4
 8013b32:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013b34:	4b5a      	ldr	r3, [pc, #360]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d80f      	bhi.n	8013b5c <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b40:	f107 0313 	add.w	r3, r7, #19
 8013b44:	2200      	movs	r2, #0
 8013b46:	4619      	mov	r1, r3
 8013b48:	4857      	ldr	r0, [pc, #348]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013b4a:	f7fa fcc3 	bl	800e4d4 <_txe_queue_send>
                password_index++;
 8013b4e:	4b54      	ldr	r3, [pc, #336]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	3301      	adds	r3, #1
 8013b54:	b2da      	uxtb	r2, r3
 8013b56:	4b52      	ldr	r3, [pc, #328]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b58:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013b5a:	e004      	b.n	8013b66 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b5c:	4b53      	ldr	r3, [pc, #332]	; (8013cac <fm_menu_config_pass+0x2c8>)
 8013b5e:	2201      	movs	r2, #1
 8013b60:	701a      	strb	r2, [r3, #0]
        break;
 8013b62:	e000      	b.n	8013b66 <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013b64:	bf00      	nop
    }

    previous_event = event_id;
 8013b66:	4a52      	ldr	r2, [pc, #328]	; (8013cb0 <fm_menu_config_pass+0x2cc>)
 8013b68:	79fb      	ldrb	r3, [r7, #7]
 8013b6a:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 8013b6c:	4a51      	ldr	r2, [pc, #324]	; (8013cb4 <fm_menu_config_pass+0x2d0>)
 8013b6e:	f107 0308 	add.w	r3, r7, #8
 8013b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8013b74:	c303      	stmia	r3!, {r0, r1}
 8013b76:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013b78:	f107 0308 	add.w	r3, r7, #8
 8013b7c:	210a      	movs	r1, #10
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fb f8dc 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013b84:	4b49      	ldr	r3, [pc, #292]	; (8013cac <fm_menu_config_pass+0x2c8>)
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	f040 80c0 	bne.w	8013d0e <fm_menu_config_pass+0x32a>
 8013b8e:	4b44      	ldr	r3, [pc, #272]	; (8013ca0 <fm_menu_config_pass+0x2bc>)
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	f240 80bb 	bls.w	8013d0e <fm_menu_config_pass+0x32a>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == PASS_DOWN && password[1] == PASS_UP
 8013b98:	4b42      	ldr	r3, [pc, #264]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b02      	cmp	r3, #2
 8013b9e:	d11d      	bne.n	8013bdc <fm_menu_config_pass+0x1f8>
 8013ba0:	4b40      	ldr	r3, [pc, #256]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013ba2:	785b      	ldrb	r3, [r3, #1]
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	d119      	bne.n	8013bdc <fm_menu_config_pass+0x1f8>
        && password[2] == PASS_UP
 8013ba8:	4b3e      	ldr	r3, [pc, #248]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013baa:	789b      	ldrb	r3, [r3, #2]
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d115      	bne.n	8013bdc <fm_menu_config_pass+0x1f8>
        && password[PASSWORD_LENGTH - 1] == PASS_ENTER)
 8013bb0:	4b3c      	ldr	r3, [pc, #240]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013bb2:	78db      	ldrb	r3, [r3, #3]
 8013bb4:	2b03      	cmp	r3, #3
 8013bb6:	d111      	bne.n	8013bdc <fm_menu_config_pass+0x1f8>
        {
            correct_password = 1;
 8013bb8:	4b38      	ldr	r3, [pc, #224]	; (8013c9c <fm_menu_config_pass+0x2b8>)
 8013bba:	2201      	movs	r2, #1
 8013bbc:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013bbe:	4b3e      	ldr	r3, [pc, #248]	; (8013cb8 <fm_menu_config_pass+0x2d4>)
 8013bc0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bc6:	f107 0313 	add.w	r3, r7, #19
 8013bca:	2200      	movs	r2, #0
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4836      	ldr	r0, [pc, #216]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013bd0:	f7fa fc80 	bl	800e4d4 <_txe_queue_send>

            password_try = 0;
 8013bd4:	4b39      	ldr	r3, [pc, #228]	; (8013cbc <fm_menu_config_pass+0x2d8>)
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	701a      	strb	r2, [r3, #0]
 8013bda:	e083      	b.n	8013ce4 <fm_menu_config_pass+0x300>
        }
        else if (password[0] == PASS_DOWN && password[1] == PASS_DOWN
 8013bdc:	4b31      	ldr	r3, [pc, #196]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d139      	bne.n	8013c58 <fm_menu_config_pass+0x274>
 8013be4:	4b2f      	ldr	r3, [pc, #188]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013be6:	785b      	ldrb	r3, [r3, #1]
 8013be8:	2b02      	cmp	r3, #2
 8013bea:	d135      	bne.n	8013c58 <fm_menu_config_pass+0x274>
        && password[2] == PASS_UP && password[PASSWORD_LENGTH - 1] == PASS_UP)
 8013bec:	4b2d      	ldr	r3, [pc, #180]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013bee:	789b      	ldrb	r3, [r3, #2]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d131      	bne.n	8013c58 <fm_menu_config_pass+0x274>
 8013bf4:	4b2b      	ldr	r3, [pc, #172]	; (8013ca4 <fm_menu_config_pass+0x2c0>)
 8013bf6:	78db      	ldrb	r3, [r3, #3]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d12d      	bne.n	8013c58 <fm_menu_config_pass+0x274>
        {
            correct_password = 1;
 8013bfc:	4b27      	ldr	r3, [pc, #156]	; (8013c9c <fm_menu_config_pass+0x2b8>)
 8013bfe:	2201      	movs	r2, #1
 8013c00:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013c02:	4b2f      	ldr	r3, [pc, #188]	; (8013cc0 <fm_menu_config_pass+0x2dc>)
 8013c04:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013c06:	2301      	movs	r3, #1
 8013c08:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c0a:	f107 0313 	add.w	r3, r7, #19
 8013c0e:	2200      	movs	r2, #0
 8013c10:	4619      	mov	r1, r3
 8013c12:	4825      	ldr	r0, [pc, #148]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013c14:	f7fa fc5e 	bl	800e4d4 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013c18:	f7fb f854 	bl	800ecc4 <fm_calendar_get_day>
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	f7fb f86f 	bl	800ed00 <fm_calendar_get_month>
 8013c22:	4605      	mov	r5, r0
 8013c24:	f7fb f880 	bl	800ed28 <fm_calendar_get_year>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f7fb fa22 	bl	800f078 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013c34:	f7fb f850 	bl	800ecd8 <fm_calendar_get_hour>
 8013c38:	4604      	mov	r4, r0
 8013c3a:	f7fb f857 	bl	800ecec <fm_calendar_get_minute>
 8013c3e:	4605      	mov	r5, r0
 8013c40:	f7fb f868 	bl	800ed14 <fm_calendar_get_second>
 8013c44:	4603      	mov	r3, r0
 8013c46:	461a      	mov	r2, r3
 8013c48:	4629      	mov	r1, r5
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f7fb fcf0 	bl	800f630 <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013c50:	4b1a      	ldr	r3, [pc, #104]	; (8013cbc <fm_menu_config_pass+0x2d8>)
 8013c52:	2200      	movs	r2, #0
 8013c54:	701a      	strb	r2, [r3, #0]
 8013c56:	e045      	b.n	8013ce4 <fm_menu_config_pass+0x300>
        }
        else
        {
            correct_password = 0;
 8013c58:	4b10      	ldr	r3, [pc, #64]	; (8013c9c <fm_menu_config_pass+0x2b8>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013c5e:	4b17      	ldr	r3, [pc, #92]	; (8013cbc <fm_menu_config_pass+0x2d8>)
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	3301      	adds	r3, #1
 8013c64:	b2da      	uxtb	r2, r3
 8013c66:	4b15      	ldr	r3, [pc, #84]	; (8013cbc <fm_menu_config_pass+0x2d8>)
 8013c68:	701a      	strb	r2, [r3, #0]

            if (password_try < password_try_max)
 8013c6a:	4b14      	ldr	r3, [pc, #80]	; (8013cbc <fm_menu_config_pass+0x2d8>)
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	4b15      	ldr	r3, [pc, #84]	; (8013cc4 <fm_menu_config_pass+0x2e0>)
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d228      	bcs.n	8013cc8 <fm_menu_config_pass+0x2e4>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013c76:	4b06      	ldr	r3, [pc, #24]	; (8013c90 <fm_menu_config_pass+0x2ac>)
 8013c78:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c7e:	f107 0313 	add.w	r3, r7, #19
 8013c82:	2200      	movs	r2, #0
 8013c84:	4619      	mov	r1, r3
 8013c86:	4808      	ldr	r0, [pc, #32]	; (8013ca8 <fm_menu_config_pass+0x2c4>)
 8013c88:	f7fa fc24 	bl	800e4d4 <_txe_queue_send>
 8013c8c:	e02a      	b.n	8013ce4 <fm_menu_config_pass+0x300>
 8013c8e:	bf00      	nop
 8013c90:	080139e5 	.word	0x080139e5
 8013c94:	20000148 	.word	0x20000148
 8013c98:	20001dbc 	.word	0x20001dbc
 8013c9c:	20001dba 	.word	0x20001dba
 8013ca0:	20001dd1 	.word	0x20001dd1
 8013ca4:	20001dd4 	.word	0x20001dd4
 8013ca8:	20001388 	.word	0x20001388
 8013cac:	20001dd8 	.word	0x20001dd8
 8013cb0:	20001dbb 	.word	0x20001dbb
 8013cb4:	08015a48 	.word	0x08015a48
 8013cb8:	08013811 	.word	0x08013811
 8013cbc:	20001dd9 	.word	0x20001dd9
 8013cc0:	08014009 	.word	0x08014009
 8013cc4:	08015c30 	.word	0x08015c30
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013cc8:	4b13      	ldr	r3, [pc, #76]	; (8013d18 <fm_menu_config_pass+0x334>)
 8013cca:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013cd0:	f107 0313 	add.w	r3, r7, #19
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	4810      	ldr	r0, [pc, #64]	; (8013d1c <fm_menu_config_pass+0x338>)
 8013cda:	f7fa fbfb 	bl	800e4d4 <_txe_queue_send>

                password_try = 0;
 8013cde:	4b10      	ldr	r3, [pc, #64]	; (8013d20 <fm_menu_config_pass+0x33c>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = PASS_0;
 8013ce4:	4b0f      	ldr	r3, [pc, #60]	; (8013d24 <fm_menu_config_pass+0x340>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	701a      	strb	r2, [r3, #0]
        password[0] = PASS_0;
 8013cea:	4b0f      	ldr	r3, [pc, #60]	; (8013d28 <fm_menu_config_pass+0x344>)
 8013cec:	2200      	movs	r2, #0
 8013cee:	701a      	strb	r2, [r3, #0]
        password[1] = PASS_0;
 8013cf0:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <fm_menu_config_pass+0x344>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	705a      	strb	r2, [r3, #1]
        password[2] = PASS_0;
 8013cf6:	4b0c      	ldr	r3, [pc, #48]	; (8013d28 <fm_menu_config_pass+0x344>)
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = PASS_0;
 8013cfc:	4b0a      	ldr	r3, [pc, #40]	; (8013d28 <fm_menu_config_pass+0x344>)
 8013cfe:	2200      	movs	r2, #0
 8013d00:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013d02:	4b0a      	ldr	r3, [pc, #40]	; (8013d2c <fm_menu_config_pass+0x348>)
 8013d04:	2201      	movs	r2, #1
 8013d06:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013d08:	4b09      	ldr	r3, [pc, #36]	; (8013d30 <fm_menu_config_pass+0x34c>)
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013d0e:	697b      	ldr	r3, [r7, #20]
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3718      	adds	r7, #24
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bdb0      	pop	{r4, r5, r7, pc}
 8013d18:	080146d5 	.word	0x080146d5
 8013d1c:	20001388 	.word	0x20001388
 8013d20:	20001dd9 	.word	0x20001dd9
 8013d24:	20001dd1 	.word	0x20001dd1
 8013d28:	20001dd4 	.word	0x20001dd4
 8013d2c:	20000148 	.word	0x20000148
 8013d30:	20001dd8 	.word	0x20001dd8

08013d34 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013d34:	b5b0      	push	{r4, r5, r7, lr}
 8013d36:	b0d8      	sub	sp, #352	; 0x160
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d40:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d44:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013d46:	4ba8      	ldr	r3, [pc, #672]	; (8013fe8 <fm_menu_config_units_tim+0x2b4>)
 8013d48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    fm_event_t event_now;

    if (new_entry == 1)
 8013d4c:	4ba7      	ldr	r3, [pc, #668]	; (8013fec <fm_menu_config_units_tim+0x2b8>)
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d104      	bne.n	8013d5e <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013d54:	f7fb fe8f 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 8013d58:	4ba4      	ldr	r3, [pc, #656]	; (8013fec <fm_menu_config_units_tim+0x2b8>)
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013d5e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d62:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fc fa81 	bl	8010270 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013d6e:	f7fc fa0e 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8013d72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d76:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	3b01      	subs	r3, #1
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	f200 8103 	bhi.w	8013f8a <fm_menu_config_units_tim+0x256>
 8013d84:	a201      	add	r2, pc, #4	; (adr r2, 8013d8c <fm_menu_config_units_tim+0x58>)
 8013d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d8a:	bf00      	nop
 8013d8c:	08013f8b 	.word	0x08013f8b
 8013d90:	08013da1 	.word	0x08013da1
 8013d94:	08013e43 	.word	0x08013e43
 8013d98:	08013ed1 	.word	0x08013ed1
 8013d9c:	08013f63 	.word	0x08013f63
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013da0:	4b93      	ldr	r3, [pc, #588]	; (8013ff0 <fm_menu_config_units_tim+0x2bc>)
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d03e      	beq.n	8013e26 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013da8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fb f8ff 	bl	800efb4 <fm_factory_get_rate>
 8013db6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013dbe:	7e5b      	ldrb	r3, [r3, #25]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d103      	bne.n	8013dcc <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013dc4:	2001      	movs	r0, #1
 8013dc6:	f7fb fc61 	bl	800f68c <fm_factory_modify_time_units>
 8013dca:	e02a      	b.n	8013e22 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013dcc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fb f8ed 	bl	800efb4 <fm_factory_get_rate>
 8013dda:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013de2:	7e5b      	ldrb	r3, [r3, #25]
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d103      	bne.n	8013df0 <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013de8:	2002      	movs	r0, #2
 8013dea:	f7fb fc4f 	bl	800f68c <fm_factory_modify_time_units>
 8013dee:	e018      	b.n	8013e22 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013df0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fb f8dd 	bl	800efb4 <fm_factory_get_rate>
 8013dfa:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d103      	bne.n	8013e0a <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013e02:	2003      	movs	r0, #3
 8013e04:	f7fb fc42 	bl	800f68c <fm_factory_modify_time_units>
 8013e08:	e00b      	b.n	8013e22 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013e0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7fb f8d0 	bl	800efb4 <fm_factory_get_rate>
 8013e14:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	d102      	bne.n	8013e22 <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	f7fb fc35 	bl	800f68c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013e22:	f7fb fe28 	bl	800fa76 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013e26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013e2e:	2201      	movs	r2, #1
 8013e30:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e32:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013e36:	2200      	movs	r2, #0
 8013e38:	4619      	mov	r1, r3
 8013e3a:	486e      	ldr	r0, [pc, #440]	; (8013ff4 <fm_menu_config_units_tim+0x2c0>)
 8013e3c:	f7fa fb4a 	bl	800e4d4 <_txe_queue_send>
        break;
 8013e40:	e0a4      	b.n	8013f8c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013e42:	4b6b      	ldr	r3, [pc, #428]	; (8013ff0 <fm_menu_config_units_tim+0x2bc>)
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d034      	beq.n	8013eb4 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013e4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7fb f8b0 	bl	800efb4 <fm_factory_get_rate>
 8013e54:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d103      	bne.n	8013e64 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013e5c:	2003      	movs	r0, #3
 8013e5e:	f7fb fc15 	bl	800f68c <fm_factory_modify_time_units>
 8013e62:	e025      	b.n	8013eb0 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013e64:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fb f8a3 	bl	800efb4 <fm_factory_get_rate>
 8013e6e:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013e72:	2b03      	cmp	r3, #3
 8013e74:	d103      	bne.n	8013e7e <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013e76:	2002      	movs	r0, #2
 8013e78:	f7fb fc08 	bl	800f68c <fm_factory_modify_time_units>
 8013e7c:	e018      	b.n	8013eb0 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013e7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fb f896 	bl	800efb4 <fm_factory_get_rate>
 8013e88:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013e8c:	2b02      	cmp	r3, #2
 8013e8e:	d103      	bne.n	8013e98 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013e90:	2001      	movs	r0, #1
 8013e92:	f7fb fbfb 	bl	800f68c <fm_factory_modify_time_units>
 8013e96:	e00b      	b.n	8013eb0 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013e98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7fb f889 	bl	800efb4 <fm_factory_get_rate>
 8013ea2:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d102      	bne.n	8013eb0 <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8013eaa:	2000      	movs	r0, #0
 8013eac:	f7fb fbee 	bl	800f68c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013eb0:	f7fb fde1 	bl	800fa76 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013eb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013eb8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ec0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	484a      	ldr	r0, [pc, #296]	; (8013ff4 <fm_menu_config_units_tim+0x2c0>)
 8013eca:	f7fa fb03 	bl	800e4d4 <_txe_queue_send>
        break;
 8013ece:	e05d      	b.n	8013f8c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013ed0:	4b47      	ldr	r3, [pc, #284]	; (8013ff0 <fm_menu_config_units_tim+0x2bc>)
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d036      	beq.n	8013f46 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013ed8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fb f8a7 	bl	800f030 <fm_factory_get_units_tim>
 8013ee2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d104      	bne.n	8013ef4 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013eea:	2101      	movs	r1, #1
 8013eec:	2001      	movs	r0, #1
 8013eee:	f7fb fb87 	bl	800f600 <fm_factory_modify_res_rate>
 8013ef2:	e028      	b.n	8013f46 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8013ef4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fb f899 	bl	800f030 <fm_factory_get_units_tim>
 8013efe:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d104      	bne.n	8013f10 <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8013f06:	2102      	movs	r1, #2
 8013f08:	2002      	movs	r0, #2
 8013f0a:	f7fb fb79 	bl	800f600 <fm_factory_modify_res_rate>
 8013f0e:	e01a      	b.n	8013f46 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 8013f10:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fb f88b 	bl	800f030 <fm_factory_get_units_tim>
 8013f1a:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8013f1e:	2b02      	cmp	r3, #2
 8013f20:	d104      	bne.n	8013f2c <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 8013f22:	2103      	movs	r1, #3
 8013f24:	2003      	movs	r0, #3
 8013f26:	f7fb fb6b 	bl	800f600 <fm_factory_modify_res_rate>
 8013f2a:	e00c      	b.n	8013f46 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8013f2c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fb f87d 	bl	800f030 <fm_factory_get_units_tim>
 8013f36:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d103      	bne.n	8013f46 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 8013f3e:	2100      	movs	r1, #0
 8013f40:	2000      	movs	r0, #0
 8013f42:	f7fb fb5d 	bl	800f600 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013f46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f4e:	2201      	movs	r2, #1
 8013f50:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f52:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013f56:	2200      	movs	r2, #0
 8013f58:	4619      	mov	r1, r3
 8013f5a:	4826      	ldr	r0, [pc, #152]	; (8013ff4 <fm_menu_config_units_tim+0x2c0>)
 8013f5c:	f7fa faba 	bl	800e4d4 <_txe_queue_send>
        break;
 8013f60:	e014      	b.n	8013f8c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013f62:	4b25      	ldr	r3, [pc, #148]	; (8013ff8 <fm_menu_config_units_tim+0x2c4>)
 8013f64:	2201      	movs	r2, #1
 8013f66:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013f68:	4b24      	ldr	r3, [pc, #144]	; (8013ffc <fm_menu_config_units_tim+0x2c8>)
 8013f6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            event_now = EVENT_LCD_REFRESH;
 8013f6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f76:	2201      	movs	r2, #1
 8013f78:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f7a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013f7e:	2200      	movs	r2, #0
 8013f80:	4619      	mov	r1, r3
 8013f82:	481c      	ldr	r0, [pc, #112]	; (8013ff4 <fm_menu_config_units_tim+0x2c0>)
 8013f84:	f7fa faa6 	bl	800e4d4 <_txe_queue_send>
        break;
 8013f88:	e000      	b.n	8013f8c <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013f8a:	bf00      	nop
    }

    previous_event = event_id;
 8013f8c:	4a1c      	ldr	r2, [pc, #112]	; (8014000 <fm_menu_config_units_tim+0x2cc>)
 8013f8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f92:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013f9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f9e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013fa2:	4a18      	ldr	r2, [pc, #96]	; (8014004 <fm_menu_config_units_tim+0x2d0>)
 8013fa4:	461c      	mov	r4, r3
 8013fa6:	4615      	mov	r5, r2
 8013fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013fb8:	f107 0308 	add.w	r3, r7, #8
 8013fbc:	212c      	movs	r1, #44	; 0x2c
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fa febc 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013fc4:	4b0c      	ldr	r3, [pc, #48]	; (8013ff8 <fm_menu_config_units_tim+0x2c4>)
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	d105      	bne.n	8013fd8 <fm_menu_config_units_tim+0x2a4>
    {
        new_entry = 1;
 8013fcc:	4b07      	ldr	r3, [pc, #28]	; (8013fec <fm_menu_config_units_tim+0x2b8>)
 8013fce:	2201      	movs	r2, #1
 8013fd0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013fd2:	4b09      	ldr	r3, [pc, #36]	; (8013ff8 <fm_menu_config_units_tim+0x2c4>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013fd8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	08013d35 	.word	0x08013d35
 8013fec:	20000149 	.word	0x20000149
 8013ff0:	20001dba 	.word	0x20001dba
 8013ff4:	20001388 	.word	0x20001388
 8013ff8:	20001dda 	.word	0x20001dda
 8013ffc:	08012785 	.word	0x08012785
 8014000:	20001dbb 	.word	0x20001dbb
 8014004:	08015a68 	.word	0x08015a68

08014008 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8014008:	b5b0      	push	{r4, r5, r7, lr}
 801400a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 801400e:	af00      	add	r7, sp, #0
 8014010:	4602      	mov	r2, r0
 8014012:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014016:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 801401a:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 801401c:	4bc8      	ldr	r3, [pc, #800]	; (8014340 <fm_menu_config_units_vol+0x338>)
 801401e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    fm_event_t event_now;

    if (new_entry == 1)
 8014022:	4bc8      	ldr	r3, [pc, #800]	; (8014344 <fm_menu_config_units_vol+0x33c>)
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d104      	bne.n	8014034 <fm_menu_config_units_vol+0x2c>
    {
        fm_lcd_clear();
 801402a:	f7fb fd24 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 801402e:	4bc5      	ldr	r3, [pc, #788]	; (8014344 <fm_menu_config_units_vol+0x33c>)
 8014030:	2200      	movs	r2, #0
 8014032:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8014034:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014038:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	4618      	mov	r0, r3
 8014040:	f7fc f9b2 	bl	80103a8 <fm_lcd_units_vol>
    fm_lcd_refresh();
 8014044:	f7fc f8a3 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8014048:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801404c:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	3b01      	subs	r3, #1
 8014054:	2b04      	cmp	r3, #4
 8014056:	f200 817f 	bhi.w	8014358 <fm_menu_config_units_vol+0x350>
 801405a:	a201      	add	r2, pc, #4	; (adr r2, 8014060 <fm_menu_config_units_vol+0x58>)
 801405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014060:	08014359 	.word	0x08014359
 8014064:	08014075 	.word	0x08014075
 8014068:	08014197 	.word	0x08014197
 801406c:	0801427d 	.word	0x0801427d
 8014070:	08014317 	.word	0x08014317
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8014074:	4bb4      	ldr	r3, [pc, #720]	; (8014348 <fm_menu_config_units_vol+0x340>)
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d07e      	beq.n	801417a <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 801407c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014080:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014084:	4618      	mov	r0, r3
 8014086:	f7fa fe75 	bl	800ed74 <fm_factory_get_acm>
 801408a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801408e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014092:	7e1b      	ldrb	r3, [r3, #24]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d103      	bne.n	80140a0 <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 8014098:	2001      	movs	r0, #1
 801409a:	f7fb fb11 	bl	800f6c0 <fm_factory_modify_volume_units>
 801409e:	e06a      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 80140a0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140a4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7fa fe63 	bl	800ed74 <fm_factory_get_acm>
 80140ae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140b2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80140b6:	7e1b      	ldrb	r3, [r3, #24]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d103      	bne.n	80140c4 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 80140bc:	2002      	movs	r0, #2
 80140be:	f7fb faff 	bl	800f6c0 <fm_factory_modify_volume_units>
 80140c2:	e058      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 80140c4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fa fe51 	bl	800ed74 <fm_factory_get_acm>
 80140d2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80140da:	7e1b      	ldrb	r3, [r3, #24]
 80140dc:	2b02      	cmp	r3, #2
 80140de:	d103      	bne.n	80140e8 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 80140e0:	2003      	movs	r0, #3
 80140e2:	f7fb faed 	bl	800f6c0 <fm_factory_modify_volume_units>
 80140e6:	e046      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 80140e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7fa fe3f 	bl	800ed74 <fm_factory_get_acm>
 80140f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80140fe:	7e1b      	ldrb	r3, [r3, #24]
 8014100:	2b03      	cmp	r3, #3
 8014102:	d103      	bne.n	801410c <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 8014104:	2004      	movs	r0, #4
 8014106:	f7fb fadb 	bl	800f6c0 <fm_factory_modify_volume_units>
 801410a:	e034      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 801410c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014110:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014114:	4618      	mov	r0, r3
 8014116:	f7fa fe2d 	bl	800ed74 <fm_factory_get_acm>
 801411a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801411e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014122:	7e1b      	ldrb	r3, [r3, #24]
 8014124:	2b04      	cmp	r3, #4
 8014126:	d103      	bne.n	8014130 <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 8014128:	2005      	movs	r0, #5
 801412a:	f7fb fac9 	bl	800f6c0 <fm_factory_modify_volume_units>
 801412e:	e022      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8014130:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014134:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014138:	4618      	mov	r0, r3
 801413a:	f7fa fe1b 	bl	800ed74 <fm_factory_get_acm>
 801413e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014142:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014146:	7e1b      	ldrb	r3, [r3, #24]
 8014148:	2b05      	cmp	r3, #5
 801414a:	d103      	bne.n	8014154 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 801414c:	2007      	movs	r0, #7
 801414e:	f7fb fab7 	bl	800f6c0 <fm_factory_modify_volume_units>
 8014152:	e010      	b.n	8014176 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8014154:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014158:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801415c:	4618      	mov	r0, r3
 801415e:	f7fa fe09 	bl	800ed74 <fm_factory_get_acm>
 8014162:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014166:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801416a:	7e1b      	ldrb	r3, [r3, #24]
 801416c:	2b07      	cmp	r3, #7
 801416e:	d102      	bne.n	8014176 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 8014170:	2000      	movs	r0, #0
 8014172:	f7fb faa5 	bl	800f6c0 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8014176:	f7fb fc7e 	bl	800fa76 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 801417a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801417e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014182:	2201      	movs	r2, #1
 8014184:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014186:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801418a:	2200      	movs	r2, #0
 801418c:	4619      	mov	r1, r3
 801418e:	486f      	ldr	r0, [pc, #444]	; (801434c <fm_menu_config_units_vol+0x344>)
 8014190:	f7fa f9a0 	bl	800e4d4 <_txe_queue_send>
        break;
 8014194:	e0e1      	b.n	801435a <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8014196:	4b6c      	ldr	r3, [pc, #432]	; (8014348 <fm_menu_config_units_vol+0x340>)
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d060      	beq.n	8014260 <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 801419e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fa fde4 	bl	800ed74 <fm_factory_get_acm>
 80141ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141b4:	7e1b      	ldrb	r3, [r3, #24]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d103      	bne.n	80141c2 <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 80141ba:	2007      	movs	r0, #7
 80141bc:	f7fb fa80 	bl	800f6c0 <fm_factory_modify_volume_units>
 80141c0:	e04c      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 80141c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fa fdd4 	bl	800ed74 <fm_factory_get_acm>
 80141cc:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 80141d0:	2b07      	cmp	r3, #7
 80141d2:	d103      	bne.n	80141dc <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 80141d4:	2005      	movs	r0, #5
 80141d6:	f7fb fa73 	bl	800f6c0 <fm_factory_modify_volume_units>
 80141da:	e03f      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 80141dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fa fdc7 	bl	800ed74 <fm_factory_get_acm>
 80141e6:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80141ea:	2b05      	cmp	r3, #5
 80141ec:	d103      	bne.n	80141f6 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 80141ee:	2004      	movs	r0, #4
 80141f0:	f7fb fa66 	bl	800f6c0 <fm_factory_modify_volume_units>
 80141f4:	e032      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 80141f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fa fdba 	bl	800ed74 <fm_factory_get_acm>
 8014200:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8014204:	2b04      	cmp	r3, #4
 8014206:	d103      	bne.n	8014210 <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 8014208:	2003      	movs	r0, #3
 801420a:	f7fb fa59 	bl	800f6c0 <fm_factory_modify_volume_units>
 801420e:	e025      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014210:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014214:	4618      	mov	r0, r3
 8014216:	f7fa fdad 	bl	800ed74 <fm_factory_get_acm>
 801421a:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 801421e:	2b03      	cmp	r3, #3
 8014220:	d103      	bne.n	801422a <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 8014222:	2002      	movs	r0, #2
 8014224:	f7fb fa4c 	bl	800f6c0 <fm_factory_modify_volume_units>
 8014228:	e018      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 801422a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801422e:	4618      	mov	r0, r3
 8014230:	f7fa fda0 	bl	800ed74 <fm_factory_get_acm>
 8014234:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8014238:	2b02      	cmp	r3, #2
 801423a:	d103      	bne.n	8014244 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 801423c:	2001      	movs	r0, #1
 801423e:	f7fb fa3f 	bl	800f6c0 <fm_factory_modify_volume_units>
 8014242:	e00b      	b.n	801425c <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014244:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8014248:	4618      	mov	r0, r3
 801424a:	f7fa fd93 	bl	800ed74 <fm_factory_get_acm>
 801424e:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 8014252:	2b01      	cmp	r3, #1
 8014254:	d102      	bne.n	801425c <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 8014256:	2000      	movs	r0, #0
 8014258:	f7fb fa32 	bl	800f6c0 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 801425c:	f7fb fc0b 	bl	800fa76 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014260:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014264:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014268:	2201      	movs	r2, #1
 801426a:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801426c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014270:	2200      	movs	r2, #0
 8014272:	4619      	mov	r1, r3
 8014274:	4835      	ldr	r0, [pc, #212]	; (801434c <fm_menu_config_units_vol+0x344>)
 8014276:	f7fa f92d 	bl	800e4d4 <_txe_queue_send>
        break;
 801427a:	e06e      	b.n	801435a <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801427c:	4b32      	ldr	r3, [pc, #200]	; (8014348 <fm_menu_config_units_vol+0x340>)
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d03a      	beq.n	80142fa <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 8014284:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8014288:	4618      	mov	r0, r3
 801428a:	f7fa fee3 	bl	800f054 <fm_factory_get_units_vol>
 801428e:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 8014292:	2b00      	cmp	r3, #0
 8014294:	d105      	bne.n	80142a2 <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 8014296:	2201      	movs	r2, #1
 8014298:	2101      	movs	r1, #1
 801429a:	2001      	movs	r0, #1
 801429c:	f7fb f992 	bl	800f5c4 <fm_factory_modify_res_acm_ttl>
 80142a0:	e02b      	b.n	80142fa <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 80142a2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fa fed4 	bl	800f054 <fm_factory_get_units_vol>
 80142ac:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d105      	bne.n	80142c0 <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 80142b4:	2202      	movs	r2, #2
 80142b6:	2102      	movs	r1, #2
 80142b8:	2002      	movs	r0, #2
 80142ba:	f7fb f983 	bl	800f5c4 <fm_factory_modify_res_acm_ttl>
 80142be:	e01c      	b.n	80142fa <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 80142c0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fa fec5 	bl	800f054 <fm_factory_get_units_vol>
 80142ca:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80142ce:	2b02      	cmp	r3, #2
 80142d0:	d105      	bne.n	80142de <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 80142d2:	2203      	movs	r2, #3
 80142d4:	2103      	movs	r1, #3
 80142d6:	2003      	movs	r0, #3
 80142d8:	f7fb f974 	bl	800f5c4 <fm_factory_modify_res_acm_ttl>
 80142dc:	e00d      	b.n	80142fa <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 80142de:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7fa feb6 	bl	800f054 <fm_factory_get_units_vol>
 80142e8:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 80142ec:	2b03      	cmp	r3, #3
 80142ee:	d104      	bne.n	80142fa <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 80142f0:	2200      	movs	r2, #0
 80142f2:	2100      	movs	r1, #0
 80142f4:	2000      	movs	r0, #0
 80142f6:	f7fb f965 	bl	800f5c4 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80142fa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142fe:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014302:	2201      	movs	r2, #1
 8014304:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014306:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801430a:	2200      	movs	r2, #0
 801430c:	4619      	mov	r1, r3
 801430e:	480f      	ldr	r0, [pc, #60]	; (801434c <fm_menu_config_units_vol+0x344>)
 8014310:	f7fa f8e0 	bl	800e4d4 <_txe_queue_send>
        break;
 8014314:	e021      	b.n	801435a <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014316:	4b0e      	ldr	r3, [pc, #56]	; (8014350 <fm_menu_config_units_vol+0x348>)
 8014318:	2201      	movs	r2, #1
 801431a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 801431c:	4b0d      	ldr	r3, [pc, #52]	; (8014354 <fm_menu_config_units_vol+0x34c>)
 801431e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
            event_now = EVENT_LCD_REFRESH;
 8014322:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014326:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 801432a:	2201      	movs	r2, #1
 801432c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801432e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014332:	2200      	movs	r2, #0
 8014334:	4619      	mov	r1, r3
 8014336:	4805      	ldr	r0, [pc, #20]	; (801434c <fm_menu_config_units_vol+0x344>)
 8014338:	f7fa f8cc 	bl	800e4d4 <_txe_queue_send>
        break;
 801433c:	e00d      	b.n	801435a <fm_menu_config_units_vol+0x352>
 801433e:	bf00      	nop
 8014340:	08014009 	.word	0x08014009
 8014344:	2000014a 	.word	0x2000014a
 8014348:	20001dba 	.word	0x20001dba
 801434c:	20001388 	.word	0x20001388
 8014350:	20001ddb 	.word	0x20001ddb
 8014354:	08013d35 	.word	0x08013d35
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014358:	bf00      	nop
    }

    previous_event = event_id;
 801435a:	4a16      	ldr	r2, [pc, #88]	; (80143b4 <fm_menu_config_units_vol+0x3ac>)
 801435c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014360:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 8014368:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801436c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014370:	4a11      	ldr	r2, [pc, #68]	; (80143b8 <fm_menu_config_units_vol+0x3b0>)
 8014372:	461c      	mov	r4, r3
 8014374:	4615      	mov	r5, r2
 8014376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801437a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801437c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801437e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014382:	c407      	stmia	r4!, {r0, r1, r2}
 8014384:	7023      	strb	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014386:	f107 0308 	add.w	r3, r7, #8
 801438a:	212d      	movs	r1, #45	; 0x2d
 801438c:	4618      	mov	r0, r3
 801438e:	f7fa fcd5 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014392:	4b0a      	ldr	r3, [pc, #40]	; (80143bc <fm_menu_config_units_vol+0x3b4>)
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	2b01      	cmp	r3, #1
 8014398:	d105      	bne.n	80143a6 <fm_menu_config_units_vol+0x39e>
    {
        new_entry = 1;
 801439a:	4b09      	ldr	r3, [pc, #36]	; (80143c0 <fm_menu_config_units_vol+0x3b8>)
 801439c:	2201      	movs	r2, #1
 801439e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80143a0:	4b06      	ldr	r3, [pc, #24]	; (80143bc <fm_menu_config_units_vol+0x3b4>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80143a6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bdb0      	pop	{r4, r5, r7, pc}
 80143b4:	20001dbb 	.word	0x20001dbb
 80143b8:	08015a94 	.word	0x08015a94
 80143bc:	20001ddb 	.word	0x20001ddb
 80143c0:	2000014a 	.word	0x2000014a

080143c4 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	4603      	mov	r3, r0
 80143cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80143ce:	4b38      	ldr	r3, [pc, #224]	; (80144b0 <fm_menu_show_acm_rate+0xec>)
 80143d0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80143d2:	4b38      	ldr	r3, [pc, #224]	; (80144b4 <fm_menu_show_acm_rate+0xf0>)
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d104      	bne.n	80143e4 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 80143da:	f7fb fb4c 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80143de:	4b35      	ldr	r3, [pc, #212]	; (80144b4 <fm_menu_show_acm_rate+0xf0>)
 80143e0:	2200      	movs	r2, #0
 80143e2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 80143e4:	f7fb fa84 	bl	800f8f0 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 80143e8:	f7fb fed1 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 80143ec:	79fb      	ldrb	r3, [r7, #7]
 80143ee:	3b01      	subs	r3, #1
 80143f0:	2b04      	cmp	r3, #4
 80143f2:	d841      	bhi.n	8014478 <fm_menu_show_acm_rate+0xb4>
 80143f4:	a201      	add	r2, pc, #4	; (adr r2, 80143fc <fm_menu_show_acm_rate+0x38>)
 80143f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143fa:	bf00      	nop
 80143fc:	08014479 	.word	0x08014479
 8014400:	08014411 	.word	0x08014411
 8014404:	0801442f 	.word	0x0801442f
 8014408:	0801444d 	.word	0x0801444d
 801440c:	08014465 	.word	0x08014465
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014410:	4b29      	ldr	r3, [pc, #164]	; (80144b8 <fm_menu_show_acm_rate+0xf4>)
 8014412:	2201      	movs	r2, #1
 8014414:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014416:	4b29      	ldr	r3, [pc, #164]	; (80144bc <fm_menu_show_acm_rate+0xf8>)
 8014418:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801441a:	2301      	movs	r3, #1
 801441c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801441e:	f107 0313 	add.w	r3, r7, #19
 8014422:	2200      	movs	r2, #0
 8014424:	4619      	mov	r1, r3
 8014426:	4826      	ldr	r0, [pc, #152]	; (80144c0 <fm_menu_show_acm_rate+0xfc>)
 8014428:	f7fa f854 	bl	800e4d4 <_txe_queue_send>
        break;
 801442c:	e025      	b.n	801447a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801442e:	4b22      	ldr	r3, [pc, #136]	; (80144b8 <fm_menu_show_acm_rate+0xf4>)
 8014430:	2201      	movs	r2, #1
 8014432:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014434:	4b23      	ldr	r3, [pc, #140]	; (80144c4 <fm_menu_show_acm_rate+0x100>)
 8014436:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014438:	2301      	movs	r3, #1
 801443a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801443c:	f107 0313 	add.w	r3, r7, #19
 8014440:	2200      	movs	r2, #0
 8014442:	4619      	mov	r1, r3
 8014444:	481e      	ldr	r0, [pc, #120]	; (80144c0 <fm_menu_show_acm_rate+0xfc>)
 8014446:	f7fa f845 	bl	800e4d4 <_txe_queue_send>
        break;
 801444a:	e016      	b.n	801447a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 801444c:	f7fb f952 	bl	800f6f4 <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 8014450:	2301      	movs	r3, #1
 8014452:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014454:	f107 0313 	add.w	r3, r7, #19
 8014458:	2200      	movs	r2, #0
 801445a:	4619      	mov	r1, r3
 801445c:	4818      	ldr	r0, [pc, #96]	; (80144c0 <fm_menu_show_acm_rate+0xfc>)
 801445e:	f7fa f839 	bl	800e4d4 <_txe_queue_send>
        break;
 8014462:	e00a      	b.n	801447a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014464:	2301      	movs	r3, #1
 8014466:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014468:	f107 0313 	add.w	r3, r7, #19
 801446c:	2200      	movs	r2, #0
 801446e:	4619      	mov	r1, r3
 8014470:	4813      	ldr	r0, [pc, #76]	; (80144c0 <fm_menu_show_acm_rate+0xfc>)
 8014472:	f7fa f82f 	bl	800e4d4 <_txe_queue_send>
        break;
 8014476:	e000      	b.n	801447a <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014478:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 801447a:	4a13      	ldr	r2, [pc, #76]	; (80144c8 <fm_menu_show_acm_rate+0x104>)
 801447c:	f107 0308 	add.w	r3, r7, #8
 8014480:	ca07      	ldmia	r2, {r0, r1, r2}
 8014482:	c303      	stmia	r3!, {r0, r1}
 8014484:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014486:	f107 0308 	add.w	r3, r7, #8
 801448a:	210a      	movs	r1, #10
 801448c:	4618      	mov	r0, r3
 801448e:	f7fa fc55 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014492:	4b09      	ldr	r3, [pc, #36]	; (80144b8 <fm_menu_show_acm_rate+0xf4>)
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	2b01      	cmp	r3, #1
 8014498:	d105      	bne.n	80144a6 <fm_menu_show_acm_rate+0xe2>
    {
        new_entry = 1;
 801449a:	4b06      	ldr	r3, [pc, #24]	; (80144b4 <fm_menu_show_acm_rate+0xf0>)
 801449c:	2201      	movs	r2, #1
 801449e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80144a0:	4b05      	ldr	r3, [pc, #20]	; (80144b8 <fm_menu_show_acm_rate+0xf4>)
 80144a2:	2200      	movs	r2, #0
 80144a4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80144a6:	697b      	ldr	r3, [r7, #20]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3718      	adds	r7, #24
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	080143c5 	.word	0x080143c5
 80144b4:	2000014b 	.word	0x2000014b
 80144b8:	20001ddc 	.word	0x20001ddc
 80144bc:	0801480d 	.word	0x0801480d
 80144c0:	20001388 	.word	0x20001388
 80144c4:	080144cd 	.word	0x080144cd
 80144c8:	08015ac4 	.word	0x08015ac4

080144cc <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b086      	sub	sp, #24
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	4603      	mov	r3, r0
 80144d4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80144d6:	4b37      	ldr	r3, [pc, #220]	; (80145b4 <fm_menu_show_acm_temp+0xe8>)
 80144d8:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80144da:	4b37      	ldr	r3, [pc, #220]	; (80145b8 <fm_menu_show_acm_temp+0xec>)
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d104      	bne.n	80144ec <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 80144e2:	f7fb fac8 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80144e6:	4b34      	ldr	r3, [pc, #208]	; (80145b8 <fm_menu_show_acm_temp+0xec>)
 80144e8:	2200      	movs	r2, #0
 80144ea:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 80144ec:	f7fb fa6b 	bl	800f9c6 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 80144f0:	f7fb fe4d 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 80144f4:	79fb      	ldrb	r3, [r7, #7]
 80144f6:	3b01      	subs	r3, #1
 80144f8:	2b04      	cmp	r3, #4
 80144fa:	d83f      	bhi.n	801457c <fm_menu_show_acm_temp+0xb0>
 80144fc:	a201      	add	r2, pc, #4	; (adr r2, 8014504 <fm_menu_show_acm_temp+0x38>)
 80144fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014502:	bf00      	nop
 8014504:	0801457d 	.word	0x0801457d
 8014508:	08014519 	.word	0x08014519
 801450c:	08014537 	.word	0x08014537
 8014510:	08014555 	.word	0x08014555
 8014514:	08014569 	.word	0x08014569
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014518:	4b28      	ldr	r3, [pc, #160]	; (80145bc <fm_menu_show_acm_temp+0xf0>)
 801451a:	2201      	movs	r2, #1
 801451c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801451e:	4b28      	ldr	r3, [pc, #160]	; (80145c0 <fm_menu_show_acm_temp+0xf4>)
 8014520:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014522:	2301      	movs	r3, #1
 8014524:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014526:	f107 0313 	add.w	r3, r7, #19
 801452a:	2200      	movs	r2, #0
 801452c:	4619      	mov	r1, r3
 801452e:	4825      	ldr	r0, [pc, #148]	; (80145c4 <fm_menu_show_acm_temp+0xf8>)
 8014530:	f7f9 ffd0 	bl	800e4d4 <_txe_queue_send>
        break;
 8014534:	e023      	b.n	801457e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014536:	4b21      	ldr	r3, [pc, #132]	; (80145bc <fm_menu_show_acm_temp+0xf0>)
 8014538:	2201      	movs	r2, #1
 801453a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 801453c:	4b22      	ldr	r3, [pc, #136]	; (80145c8 <fm_menu_show_acm_temp+0xfc>)
 801453e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014540:	2301      	movs	r3, #1
 8014542:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014544:	f107 0313 	add.w	r3, r7, #19
 8014548:	2200      	movs	r2, #0
 801454a:	4619      	mov	r1, r3
 801454c:	481d      	ldr	r0, [pc, #116]	; (80145c4 <fm_menu_show_acm_temp+0xf8>)
 801454e:	f7f9 ffc1 	bl	800e4d4 <_txe_queue_send>
        break;
 8014552:	e014      	b.n	801457e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014554:	2301      	movs	r3, #1
 8014556:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014558:	f107 0313 	add.w	r3, r7, #19
 801455c:	2200      	movs	r2, #0
 801455e:	4619      	mov	r1, r3
 8014560:	4818      	ldr	r0, [pc, #96]	; (80145c4 <fm_menu_show_acm_temp+0xf8>)
 8014562:	f7f9 ffb7 	bl	800e4d4 <_txe_queue_send>
        break;
 8014566:	e00a      	b.n	801457e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014568:	2301      	movs	r3, #1
 801456a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801456c:	f107 0313 	add.w	r3, r7, #19
 8014570:	2200      	movs	r2, #0
 8014572:	4619      	mov	r1, r3
 8014574:	4813      	ldr	r0, [pc, #76]	; (80145c4 <fm_menu_show_acm_temp+0xf8>)
 8014576:	f7f9 ffad 	bl	800e4d4 <_txe_queue_send>
        break;
 801457a:	e000      	b.n	801457e <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801457c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 801457e:	4a13      	ldr	r2, [pc, #76]	; (80145cc <fm_menu_show_acm_temp+0x100>)
 8014580:	f107 0308 	add.w	r3, r7, #8
 8014584:	ca07      	ldmia	r2, {r0, r1, r2}
 8014586:	c303      	stmia	r3!, {r0, r1}
 8014588:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801458a:	f107 0308 	add.w	r3, r7, #8
 801458e:	210a      	movs	r1, #10
 8014590:	4618      	mov	r0, r3
 8014592:	f7fa fbd3 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014596:	4b09      	ldr	r3, [pc, #36]	; (80145bc <fm_menu_show_acm_temp+0xf0>)
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	2b01      	cmp	r3, #1
 801459c:	d105      	bne.n	80145aa <fm_menu_show_acm_temp+0xde>
    {
        new_entry = 1;
 801459e:	4b06      	ldr	r3, [pc, #24]	; (80145b8 <fm_menu_show_acm_temp+0xec>)
 80145a0:	2201      	movs	r2, #1
 80145a2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80145a4:	4b05      	ldr	r3, [pc, #20]	; (80145bc <fm_menu_show_acm_temp+0xf0>)
 80145a6:	2200      	movs	r2, #0
 80145a8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80145aa:	697b      	ldr	r3, [r7, #20]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3718      	adds	r7, #24
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	080144cd 	.word	0x080144cd
 80145b8:	2000014c 	.word	0x2000014c
 80145bc:	20001ddd 	.word	0x20001ddd
 80145c0:	080143c5 	.word	0x080143c5
 80145c4:	20001388 	.word	0x20001388
 80145c8:	080145d1 	.word	0x080145d1
 80145cc:	08015ad0 	.word	0x08015ad0

080145d0 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b086      	sub	sp, #24
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	4603      	mov	r3, r0
 80145d8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80145da:	4b38      	ldr	r3, [pc, #224]	; (80146bc <fm_menu_show_date_hour+0xec>)
 80145dc:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80145de:	4b38      	ldr	r3, [pc, #224]	; (80146c0 <fm_menu_show_date_hour+0xf0>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d104      	bne.n	80145f0 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 80145e6:	f7fb fa46 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 80145ea:	4b35      	ldr	r3, [pc, #212]	; (80146c0 <fm_menu_show_date_hour+0xf0>)
 80145ec:	2200      	movs	r2, #0
 80145ee:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 80145f0:	79fb      	ldrb	r3, [r7, #7]
 80145f2:	2200      	movs	r2, #0
 80145f4:	4619      	mov	r1, r3
 80145f6:	2000      	movs	r0, #0
 80145f8:	f7fb fa44 	bl	800fa84 <fm_lcd_date_hour>

    fm_lcd_refresh();
 80145fc:	f7fb fdc7 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	3b01      	subs	r3, #1
 8014604:	2b04      	cmp	r3, #4
 8014606:	d83a      	bhi.n	801467e <fm_menu_show_date_hour+0xae>
 8014608:	a201      	add	r2, pc, #4	; (adr r2, 8014610 <fm_menu_show_date_hour+0x40>)
 801460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801460e:	bf00      	nop
 8014610:	0801467f 	.word	0x0801467f
 8014614:	08014625 	.word	0x08014625
 8014618:	08014643 	.word	0x08014643
 801461c:	08014657 	.word	0x08014657
 8014620:	0801466b 	.word	0x0801466b
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014624:	4b27      	ldr	r3, [pc, #156]	; (80146c4 <fm_menu_show_date_hour+0xf4>)
 8014626:	2201      	movs	r2, #1
 8014628:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 801462a:	4b27      	ldr	r3, [pc, #156]	; (80146c8 <fm_menu_show_date_hour+0xf8>)
 801462c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801462e:	2301      	movs	r3, #1
 8014630:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014632:	f107 0313 	add.w	r3, r7, #19
 8014636:	2200      	movs	r2, #0
 8014638:	4619      	mov	r1, r3
 801463a:	4824      	ldr	r0, [pc, #144]	; (80146cc <fm_menu_show_date_hour+0xfc>)
 801463c:	f7f9 ff4a 	bl	800e4d4 <_txe_queue_send>
        break;
 8014640:	e01e      	b.n	8014680 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 8014642:	2301      	movs	r3, #1
 8014644:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014646:	f107 0313 	add.w	r3, r7, #19
 801464a:	2200      	movs	r2, #0
 801464c:	4619      	mov	r1, r3
 801464e:	481f      	ldr	r0, [pc, #124]	; (80146cc <fm_menu_show_date_hour+0xfc>)
 8014650:	f7f9 ff40 	bl	800e4d4 <_txe_queue_send>
        break;
 8014654:	e014      	b.n	8014680 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014656:	2301      	movs	r3, #1
 8014658:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801465a:	f107 0313 	add.w	r3, r7, #19
 801465e:	2200      	movs	r2, #0
 8014660:	4619      	mov	r1, r3
 8014662:	481a      	ldr	r0, [pc, #104]	; (80146cc <fm_menu_show_date_hour+0xfc>)
 8014664:	f7f9 ff36 	bl	800e4d4 <_txe_queue_send>
        break;
 8014668:	e00a      	b.n	8014680 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 801466a:	2301      	movs	r3, #1
 801466c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801466e:	f107 0313 	add.w	r3, r7, #19
 8014672:	2200      	movs	r2, #0
 8014674:	4619      	mov	r1, r3
 8014676:	4815      	ldr	r0, [pc, #84]	; (80146cc <fm_menu_show_date_hour+0xfc>)
 8014678:	f7f9 ff2c 	bl	800e4d4 <_txe_queue_send>
        break;
 801467c:	e000      	b.n	8014680 <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801467e:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8014680:	4a13      	ldr	r2, [pc, #76]	; (80146d0 <fm_menu_show_date_hour+0x100>)
 8014682:	f107 0308 	add.w	r3, r7, #8
 8014686:	ca07      	ldmia	r2, {r0, r1, r2}
 8014688:	c303      	stmia	r3!, {r0, r1}
 801468a:	801a      	strh	r2, [r3, #0]
 801468c:	3302      	adds	r3, #2
 801468e:	0c12      	lsrs	r2, r2, #16
 8014690:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 8014692:	f107 0308 	add.w	r3, r7, #8
 8014696:	210b      	movs	r1, #11
 8014698:	4618      	mov	r0, r3
 801469a:	f7fa fb4f 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801469e:	4b09      	ldr	r3, [pc, #36]	; (80146c4 <fm_menu_show_date_hour+0xf4>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d105      	bne.n	80146b2 <fm_menu_show_date_hour+0xe2>
    {
        new_entry = 1;
 80146a6:	4b06      	ldr	r3, [pc, #24]	; (80146c0 <fm_menu_show_date_hour+0xf0>)
 80146a8:	2201      	movs	r2, #1
 80146aa:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80146ac:	4b05      	ldr	r3, [pc, #20]	; (80146c4 <fm_menu_show_date_hour+0xf4>)
 80146ae:	2200      	movs	r2, #0
 80146b0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80146b2:	697b      	ldr	r3, [r7, #20]
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3718      	adds	r7, #24
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	080145d1 	.word	0x080145d1
 80146c0:	2000014d 	.word	0x2000014d
 80146c4:	20001dde 	.word	0x20001dde
 80146c8:	080144cd 	.word	0x080144cd
 80146cc:	20001388 	.word	0x20001388
 80146d0:	08015adc 	.word	0x08015adc

080146d4 <fm_menu_show_init>:
 * encendiendo todos los segmentos y la backlight por 3 segundos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	4603      	mov	r3, r0
 80146dc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 80146de:	231e      	movs	r3, #30
 80146e0:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 80146e2:	4b42      	ldr	r3, [pc, #264]	; (80147ec <fm_menu_show_init+0x118>)
 80146e4:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80146e6:	4b42      	ldr	r3, [pc, #264]	; (80147f0 <fm_menu_show_init+0x11c>)
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	2b01      	cmp	r3, #1
 80146ec:	d10c      	bne.n	8014708 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 80146ee:	2200      	movs	r2, #0
 80146f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80146f4:	483f      	ldr	r0, [pc, #252]	; (80147f4 <fm_menu_show_init+0x120>)
 80146f6:	f7ef fe47 	bl	8004388 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 80146fa:	f7fb fbb4 	bl	800fe66 <fm_lcd_init>
        fm_lcd_clear();
 80146fe:	f7fb f9ba 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 8014702:	4b3b      	ldr	r3, [pc, #236]	; (80147f0 <fm_menu_show_init+0x11c>)
 8014704:	2200      	movs	r2, #0
 8014706:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 8014708:	20ff      	movs	r0, #255	; 0xff
 801470a:	f7fe f81f 	bl	801274c <pcf8553_write_all>

    switch (event_id)
 801470e:	79fb      	ldrb	r3, [r7, #7]
 8014710:	3b01      	subs	r3, #1
 8014712:	2b04      	cmp	r3, #4
 8014714:	d848      	bhi.n	80147a8 <fm_menu_show_init+0xd4>
 8014716:	a201      	add	r2, pc, #4	; (adr r2, 801471c <fm_menu_show_init+0x48>)
 8014718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801471c:	08014755 	.word	0x08014755
 8014720:	080147a9 	.word	0x080147a9
 8014724:	080147a9 	.word	0x080147a9
 8014728:	08014731 	.word	0x08014731
 801472c:	080147a9 	.word	0x080147a9
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014730:	4831      	ldr	r0, [pc, #196]	; (80147f8 <fm_menu_show_init+0x124>)
 8014732:	f7f9 fe67 	bl	800e404 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014736:	4b31      	ldr	r3, [pc, #196]	; (80147fc <fm_menu_show_init+0x128>)
 8014738:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801473a:	2301      	movs	r3, #1
 801473c:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801473e:	f107 0312 	add.w	r3, r7, #18
 8014742:	2200      	movs	r2, #0
 8014744:	4619      	mov	r1, r3
 8014746:	482c      	ldr	r0, [pc, #176]	; (80147f8 <fm_menu_show_init+0x124>)
 8014748:	f7f9 fec4 	bl	800e4d4 <_txe_queue_send>
            new_exit = 1;
 801474c:	4b2c      	ldr	r3, [pc, #176]	; (8014800 <fm_menu_show_init+0x12c>)
 801474e:	2201      	movs	r2, #1
 8014750:	701a      	strb	r2, [r3, #0]
        break;
 8014752:	e02a      	b.n	80147aa <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014754:	4b2b      	ldr	r3, [pc, #172]	; (8014804 <fm_menu_show_init+0x130>)
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	7cfa      	ldrb	r2, [r7, #19]
 801475a:	429a      	cmp	r2, r3
 801475c:	d912      	bls.n	8014784 <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 801475e:	2064      	movs	r0, #100	; 0x64
 8014760:	f7ed f93a 	bl	80019d8 <HAL_Delay>
                counter++;
 8014764:	4b27      	ldr	r3, [pc, #156]	; (8014804 <fm_menu_show_init+0x130>)
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	3301      	adds	r3, #1
 801476a:	b2da      	uxtb	r2, r3
 801476c:	4b25      	ldr	r3, [pc, #148]	; (8014804 <fm_menu_show_init+0x130>)
 801476e:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014770:	2301      	movs	r3, #1
 8014772:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014774:	f107 0312 	add.w	r3, r7, #18
 8014778:	2200      	movs	r2, #0
 801477a:	4619      	mov	r1, r3
 801477c:	481e      	ldr	r0, [pc, #120]	; (80147f8 <fm_menu_show_init+0x124>)
 801477e:	f7f9 fea9 	bl	800e4d4 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014782:	e012      	b.n	80147aa <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 8014784:	481c      	ldr	r0, [pc, #112]	; (80147f8 <fm_menu_show_init+0x124>)
 8014786:	f7f9 fe3d 	bl	800e404 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801478a:	4b1c      	ldr	r3, [pc, #112]	; (80147fc <fm_menu_show_init+0x128>)
 801478c:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801478e:	2301      	movs	r3, #1
 8014790:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014792:	f107 0312 	add.w	r3, r7, #18
 8014796:	2200      	movs	r2, #0
 8014798:	4619      	mov	r1, r3
 801479a:	4817      	ldr	r0, [pc, #92]	; (80147f8 <fm_menu_show_init+0x124>)
 801479c:	f7f9 fe9a 	bl	800e4d4 <_txe_queue_send>
                new_exit = 1;
 80147a0:	4b17      	ldr	r3, [pc, #92]	; (8014800 <fm_menu_show_init+0x12c>)
 80147a2:	2201      	movs	r2, #1
 80147a4:	701a      	strb	r2, [r3, #0]
        break;
 80147a6:	e000      	b.n	80147aa <fm_menu_show_init+0xd6>
        default:
        break;
 80147a8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 80147aa:	4a17      	ldr	r2, [pc, #92]	; (8014808 <fm_menu_show_init+0x134>)
 80147ac:	f107 030c 	add.w	r3, r7, #12
 80147b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147b4:	6018      	str	r0, [r3, #0]
 80147b6:	3304      	adds	r3, #4
 80147b8:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80147ba:	f107 030c 	add.w	r3, r7, #12
 80147be:	2106      	movs	r1, #6
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fa fabb 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80147c6:	4b0e      	ldr	r3, [pc, #56]	; (8014800 <fm_menu_show_init+0x12c>)
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d108      	bne.n	80147e0 <fm_menu_show_init+0x10c>
    {
        counter = 0;
 80147ce:	4b0d      	ldr	r3, [pc, #52]	; (8014804 <fm_menu_show_init+0x130>)
 80147d0:	2200      	movs	r2, #0
 80147d2:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80147d4:	4b06      	ldr	r3, [pc, #24]	; (80147f0 <fm_menu_show_init+0x11c>)
 80147d6:	2201      	movs	r2, #1
 80147d8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80147da:	4b09      	ldr	r3, [pc, #36]	; (8014800 <fm_menu_show_init+0x12c>)
 80147dc:	2200      	movs	r2, #0
 80147de:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80147e0:	697b      	ldr	r3, [r7, #20]
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3718      	adds	r7, #24
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	080146d5 	.word	0x080146d5
 80147f0:	2000014e 	.word	0x2000014e
 80147f4:	42020800 	.word	0x42020800
 80147f8:	20001388 	.word	0x20001388
 80147fc:	08014911 	.word	0x08014911
 8014800:	20001ddf 	.word	0x20001ddf
 8014804:	20001de0 	.word	0x20001de0
 8014808:	08015ae8 	.word	0x08015ae8

0801480c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	4603      	mov	r3, r0
 8014814:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014816:	4b37      	ldr	r3, [pc, #220]	; (80148f4 <fm_menu_show_ttl_rate+0xe8>)
 8014818:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801481a:	4b37      	ldr	r3, [pc, #220]	; (80148f8 <fm_menu_show_ttl_rate+0xec>)
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	2b01      	cmp	r3, #1
 8014820:	d104      	bne.n	801482c <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 8014822:	f7fb f928 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 8014826:	4b34      	ldr	r3, [pc, #208]	; (80148f8 <fm_menu_show_ttl_rate+0xec>)
 8014828:	2200      	movs	r2, #0
 801482a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 801482c:	f7fb fcb5 	bl	801019a <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 8014830:	f7fb fcad 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8014834:	79fb      	ldrb	r3, [r7, #7]
 8014836:	3b01      	subs	r3, #1
 8014838:	2b04      	cmp	r3, #4
 801483a:	d83f      	bhi.n	80148bc <fm_menu_show_ttl_rate+0xb0>
 801483c:	a201      	add	r2, pc, #4	; (adr r2, 8014844 <fm_menu_show_ttl_rate+0x38>)
 801483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014842:	bf00      	nop
 8014844:	080148bd 	.word	0x080148bd
 8014848:	08014859 	.word	0x08014859
 801484c:	0801486d 	.word	0x0801486d
 8014850:	0801488b 	.word	0x0801488b
 8014854:	0801489f 	.word	0x0801489f
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 8014858:	2301      	movs	r3, #1
 801485a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801485c:	f107 0313 	add.w	r3, r7, #19
 8014860:	2200      	movs	r2, #0
 8014862:	4619      	mov	r1, r3
 8014864:	4825      	ldr	r0, [pc, #148]	; (80148fc <fm_menu_show_ttl_rate+0xf0>)
 8014866:	f7f9 fe35 	bl	800e4d4 <_txe_queue_send>
        break;
 801486a:	e028      	b.n	80148be <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801486c:	4b24      	ldr	r3, [pc, #144]	; (8014900 <fm_menu_show_ttl_rate+0xf4>)
 801486e:	2201      	movs	r2, #1
 8014870:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014872:	4b24      	ldr	r3, [pc, #144]	; (8014904 <fm_menu_show_ttl_rate+0xf8>)
 8014874:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014876:	2301      	movs	r3, #1
 8014878:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801487a:	f107 0313 	add.w	r3, r7, #19
 801487e:	2200      	movs	r2, #0
 8014880:	4619      	mov	r1, r3
 8014882:	481e      	ldr	r0, [pc, #120]	; (80148fc <fm_menu_show_ttl_rate+0xf0>)
 8014884:	f7f9 fe26 	bl	800e4d4 <_txe_queue_send>
        break;
 8014888:	e019      	b.n	80148be <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801488a:	2301      	movs	r3, #1
 801488c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801488e:	f107 0313 	add.w	r3, r7, #19
 8014892:	2200      	movs	r2, #0
 8014894:	4619      	mov	r1, r3
 8014896:	4819      	ldr	r0, [pc, #100]	; (80148fc <fm_menu_show_ttl_rate+0xf0>)
 8014898:	f7f9 fe1c 	bl	800e4d4 <_txe_queue_send>
        break;
 801489c:	e00f      	b.n	80148be <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801489e:	4b18      	ldr	r3, [pc, #96]	; (8014900 <fm_menu_show_ttl_rate+0xf4>)
 80148a0:	2201      	movs	r2, #1
 80148a2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80148a4:	4b18      	ldr	r3, [pc, #96]	; (8014908 <fm_menu_show_ttl_rate+0xfc>)
 80148a6:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80148a8:	2301      	movs	r3, #1
 80148aa:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80148ac:	f107 0313 	add.w	r3, r7, #19
 80148b0:	2200      	movs	r2, #0
 80148b2:	4619      	mov	r1, r3
 80148b4:	4811      	ldr	r0, [pc, #68]	; (80148fc <fm_menu_show_ttl_rate+0xf0>)
 80148b6:	f7f9 fe0d 	bl	800e4d4 <_txe_queue_send>
        break;
 80148ba:	e000      	b.n	80148be <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80148bc:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 80148be:	4a13      	ldr	r2, [pc, #76]	; (801490c <fm_menu_show_ttl_rate+0x100>)
 80148c0:	f107 0308 	add.w	r3, r7, #8
 80148c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80148c6:	c303      	stmia	r3!, {r0, r1}
 80148c8:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80148ca:	f107 0308 	add.w	r3, r7, #8
 80148ce:	210a      	movs	r1, #10
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7fa fa33 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80148d6:	4b0a      	ldr	r3, [pc, #40]	; (8014900 <fm_menu_show_ttl_rate+0xf4>)
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d105      	bne.n	80148ea <fm_menu_show_ttl_rate+0xde>
    {
        new_entry = 1;
 80148de:	4b06      	ldr	r3, [pc, #24]	; (80148f8 <fm_menu_show_ttl_rate+0xec>)
 80148e0:	2201      	movs	r2, #1
 80148e2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80148e4:	4b06      	ldr	r3, [pc, #24]	; (8014900 <fm_menu_show_ttl_rate+0xf4>)
 80148e6:	2200      	movs	r2, #0
 80148e8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80148ea:	697b      	ldr	r3, [r7, #20]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3718      	adds	r7, #24
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	0801480d 	.word	0x0801480d
 80148f8:	2000014f 	.word	0x2000014f
 80148fc:	20001388 	.word	0x20001388
 8014900:	20001de1 	.word	0x20001de1
 8014904:	080143c5 	.word	0x080143c5
 8014908:	080139e5 	.word	0x080139e5
 801490c:	08015af0 	.word	0x08015af0

08014910 <fm_menu_show_version>:
 * caudales.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af00      	add	r7, sp, #0
 8014916:	4603      	mov	r3, r0
 8014918:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 801491a:	231e      	movs	r3, #30
 801491c:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801491e:	4b42      	ldr	r3, [pc, #264]	; (8014a28 <fm_menu_show_version+0x118>)
 8014920:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014922:	4b42      	ldr	r3, [pc, #264]	; (8014a2c <fm_menu_show_version+0x11c>)
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d104      	bne.n	8014934 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 801492a:	f7fb f8a4 	bl	800fa76 <fm_lcd_clear>
        new_entry = 0;
 801492e:	4b3f      	ldr	r3, [pc, #252]	; (8014a2c <fm_menu_show_version+0x11c>)
 8014930:	2200      	movs	r2, #0
 8014932:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 8014934:	2105      	movs	r1, #5
 8014936:	2004      	movs	r0, #4
 8014938:	f7fb fdd6 	bl	80104e8 <fm_lcd_version>
    fm_lcd_refresh();
 801493c:	f7fb fc27 	bl	801018e <fm_lcd_refresh>

    switch (event_id)
 8014940:	79fb      	ldrb	r3, [r7, #7]
 8014942:	3b01      	subs	r3, #1
 8014944:	2b04      	cmp	r3, #4
 8014946:	d849      	bhi.n	80149dc <fm_menu_show_version+0xcc>
 8014948:	a201      	add	r2, pc, #4	; (adr r2, 8014950 <fm_menu_show_version+0x40>)
 801494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801494e:	bf00      	nop
 8014950:	08014989 	.word	0x08014989
 8014954:	080149dd 	.word	0x080149dd
 8014958:	080149dd 	.word	0x080149dd
 801495c:	08014965 	.word	0x08014965
 8014960:	080149dd 	.word	0x080149dd
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014964:	4832      	ldr	r0, [pc, #200]	; (8014a30 <fm_menu_show_version+0x120>)
 8014966:	f7f9 fd4d 	bl	800e404 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801496a:	4b32      	ldr	r3, [pc, #200]	; (8014a34 <fm_menu_show_version+0x124>)
 801496c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801496e:	2301      	movs	r3, #1
 8014970:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014972:	f107 0312 	add.w	r3, r7, #18
 8014976:	2200      	movs	r2, #0
 8014978:	4619      	mov	r1, r3
 801497a:	482d      	ldr	r0, [pc, #180]	; (8014a30 <fm_menu_show_version+0x120>)
 801497c:	f7f9 fdaa 	bl	800e4d4 <_txe_queue_send>
            new_exit = 1;
 8014980:	4b2d      	ldr	r3, [pc, #180]	; (8014a38 <fm_menu_show_version+0x128>)
 8014982:	2201      	movs	r2, #1
 8014984:	701a      	strb	r2, [r3, #0]
        break;
 8014986:	e02a      	b.n	80149de <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014988:	4b2c      	ldr	r3, [pc, #176]	; (8014a3c <fm_menu_show_version+0x12c>)
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	7cfa      	ldrb	r2, [r7, #19]
 801498e:	429a      	cmp	r2, r3
 8014990:	d912      	bls.n	80149b8 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014992:	2064      	movs	r0, #100	; 0x64
 8014994:	f7ed f820 	bl	80019d8 <HAL_Delay>
                counter++;
 8014998:	4b28      	ldr	r3, [pc, #160]	; (8014a3c <fm_menu_show_version+0x12c>)
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	3301      	adds	r3, #1
 801499e:	b2da      	uxtb	r2, r3
 80149a0:	4b26      	ldr	r3, [pc, #152]	; (8014a3c <fm_menu_show_version+0x12c>)
 80149a2:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 80149a4:	2301      	movs	r3, #1
 80149a6:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80149a8:	f107 0312 	add.w	r3, r7, #18
 80149ac:	2200      	movs	r2, #0
 80149ae:	4619      	mov	r1, r3
 80149b0:	481f      	ldr	r0, [pc, #124]	; (8014a30 <fm_menu_show_version+0x120>)
 80149b2:	f7f9 fd8f 	bl	800e4d4 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 80149b6:	e012      	b.n	80149de <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 80149b8:	481d      	ldr	r0, [pc, #116]	; (8014a30 <fm_menu_show_version+0x120>)
 80149ba:	f7f9 fd23 	bl	800e404 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80149be:	4b1d      	ldr	r3, [pc, #116]	; (8014a34 <fm_menu_show_version+0x124>)
 80149c0:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80149c2:	2301      	movs	r3, #1
 80149c4:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80149c6:	f107 0312 	add.w	r3, r7, #18
 80149ca:	2200      	movs	r2, #0
 80149cc:	4619      	mov	r1, r3
 80149ce:	4818      	ldr	r0, [pc, #96]	; (8014a30 <fm_menu_show_version+0x120>)
 80149d0:	f7f9 fd80 	bl	800e4d4 <_txe_queue_send>
                new_exit = 1;
 80149d4:	4b18      	ldr	r3, [pc, #96]	; (8014a38 <fm_menu_show_version+0x128>)
 80149d6:	2201      	movs	r2, #1
 80149d8:	701a      	strb	r2, [r3, #0]
        break;
 80149da:	e000      	b.n	80149de <fm_menu_show_version+0xce>
        default:
        break;
 80149dc:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 80149de:	4a18      	ldr	r2, [pc, #96]	; (8014a40 <fm_menu_show_version+0x130>)
 80149e0:	f107 0308 	add.w	r3, r7, #8
 80149e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80149e6:	c303      	stmia	r3!, {r0, r1}
 80149e8:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80149ea:	f107 0308 	add.w	r3, r7, #8
 80149ee:	2109      	movs	r1, #9
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fa f9a3 	bl	800ed3c <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80149f6:	4b10      	ldr	r3, [pc, #64]	; (8014a38 <fm_menu_show_version+0x128>)
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d10e      	bne.n	8014a1c <fm_menu_show_version+0x10c>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 80149fe:	2201      	movs	r2, #1
 8014a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014a04:	480f      	ldr	r0, [pc, #60]	; (8014a44 <fm_menu_show_version+0x134>)
 8014a06:	f7ef fcbf 	bl	8004388 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 8014a0a:	4b0c      	ldr	r3, [pc, #48]	; (8014a3c <fm_menu_show_version+0x12c>)
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014a10:	4b06      	ldr	r3, [pc, #24]	; (8014a2c <fm_menu_show_version+0x11c>)
 8014a12:	2201      	movs	r2, #1
 8014a14:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014a16:	4b08      	ldr	r3, [pc, #32]	; (8014a38 <fm_menu_show_version+0x128>)
 8014a18:	2200      	movs	r2, #0
 8014a1a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014a1c:	697b      	ldr	r3, [r7, #20]
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3718      	adds	r7, #24
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	08014911 	.word	0x08014911
 8014a2c:	20000150 	.word	0x20000150
 8014a30:	20001388 	.word	0x20001388
 8014a34:	0801480d 	.word	0x0801480d
 8014a38:	20001de2 	.word	0x20001de2
 8014a3c:	20001de3 	.word	0x20001de3
 8014a40:	08015afc 	.word	0x08015afc
 8014a44:	42020800 	.word	0x42020800

08014a48 <fm_temp_stm32_format>:
 * grados celcius.
 * @param None
 * @retval Temperatura interna del micro en grados celcius.
 */
int fm_temp_stm32_format()
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014a4e:	f000 f82f 	bl	8014ab0 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014a52:	4813      	ldr	r0, [pc, #76]	; (8014aa0 <fm_temp_stm32_format+0x58>)
 8014a54:	f7ed ffae 	bl	80029b4 <HAL_ADC_GetValue>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014a5c:	88fb      	ldrh	r3, [r7, #6]
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014a64:	fb02 f303 	mul.w	r3, r2, r3
 8014a68:	461a      	mov	r2, r3
 8014a6a:	4b0e      	ldr	r3, [pc, #56]	; (8014aa4 <fm_temp_stm32_format+0x5c>)
 8014a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8014a70:	099b      	lsrs	r3, r3, #6
 8014a72:	461a      	mov	r2, r3
 8014a74:	4b0c      	ldr	r3, [pc, #48]	; (8014aa8 <fm_temp_stm32_format+0x60>)
 8014a76:	881b      	ldrh	r3, [r3, #0]
 8014a78:	1ad3      	subs	r3, r2, r3
 8014a7a:	2264      	movs	r2, #100	; 0x64
 8014a7c:	fb03 f202 	mul.w	r2, r3, r2
 8014a80:	4b0a      	ldr	r3, [pc, #40]	; (8014aac <fm_temp_stm32_format+0x64>)
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	4619      	mov	r1, r3
 8014a86:	4b08      	ldr	r3, [pc, #32]	; (8014aa8 <fm_temp_stm32_format+0x60>)
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	1acb      	subs	r3, r1, r3
 8014a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a90:	331e      	adds	r3, #30
 8014a92:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014a94:	683b      	ldr	r3, [r7, #0]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3708      	adds	r7, #8
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	200013c8 	.word	0x200013c8
 8014aa4:	057619f1 	.word	0x057619f1
 8014aa8:	0bfa0710 	.word	0x0bfa0710
 8014aac:	0bfa0742 	.word	0x0bfa0742

08014ab0 <fm_temp_stm32_get>:
 * @brief Función que lee el ADC 1 asociado al sensor de temperatura.
 * @param None
 * @retval None
 */
void fm_temp_stm32_get()
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014ab6:	2364      	movs	r3, #100	; 0x64
 8014ab8:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8014aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014abe:	2100      	movs	r1, #0
 8014ac0:	4808      	ldr	r0, [pc, #32]	; (8014ae4 <fm_temp_stm32_get+0x34>)
 8014ac2:	f7ef f827 	bl	8003b14 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014ac6:	4807      	ldr	r0, [pc, #28]	; (8014ae4 <fm_temp_stm32_get+0x34>)
 8014ac8:	f7ed fde6 	bl	8002698 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014acc:	79fb      	ldrb	r3, [r7, #7]
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4804      	ldr	r0, [pc, #16]	; (8014ae4 <fm_temp_stm32_get+0x34>)
 8014ad2:	f7ed fe89 	bl	80027e8 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014ad6:	4803      	ldr	r0, [pc, #12]	; (8014ae4 <fm_temp_stm32_get+0x34>)
 8014ad8:	f7ed fe52 	bl	8002780 <HAL_ADC_Stop>
}
 8014adc:	bf00      	nop
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	200013c8 	.word	0x200013c8

08014ae8 <fm_version_get>:
 * @brief Esta función devuelve la versión actual del firmware.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b088      	sub	sp, #32
 8014aec:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014aee:	2300      	movs	r3, #0
 8014af0:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014af2:	4638      	mov	r0, r7
 8014af4:	2306      	movs	r3, #6
 8014af6:	9300      	str	r3, [sp, #0]
 8014af8:	2302      	movs	r3, #2
 8014afa:	2201      	movs	r2, #1
 8014afc:	4906      	ldr	r1, [pc, #24]	; (8014b18 <fm_version_get+0x30>)
 8014afe:	f000 f9bb 	bl	8014e78 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014b02:	463b      	mov	r3, r7
 8014b04:	4618      	mov	r0, r3
 8014b06:	f000 f94d 	bl	8014da4 <atoi>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	617b      	str	r3, [r7, #20]

    return (version);
 8014b0e:	697b      	ldr	r3, [r7, #20]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3718      	adds	r7, #24
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	08015b08 	.word	0x08015b08

08014b1c <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b1e:	b093      	sub	sp, #76	; 0x4c
 8014b20:	af06      	add	r7, sp, #24
 8014b22:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014b24:	4c1c      	ldr	r4, [pc, #112]	; (8014b98 <fmc_get_acm+0x7c>)
 8014b26:	f107 0308 	add.w	r3, r7, #8
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7fa f922 	bl	800ed74 <fm_factory_get_acm>
 8014b30:	4625      	mov	r5, r4
 8014b32:	f107 0408 	add.w	r4, r7, #8
 8014b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014b42:	4b15      	ldr	r3, [pc, #84]	; (8014b98 <fmc_get_acm+0x7c>)
 8014b44:	607b      	str	r3, [r7, #4]
 8014b46:	f107 0c08 	add.w	ip, r7, #8
 8014b4a:	4e13      	ldr	r6, [pc, #76]	; (8014b98 <fmc_get_acm+0x7c>)
 8014b4c:	466d      	mov	r5, sp
 8014b4e:	f106 0408 	add.w	r4, r6, #8
 8014b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014b5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b62:	4660      	mov	r0, ip
 8014b64:	f000 f8c0 	bl	8014ce8 <fmc_totalizer_init>
 8014b68:	687d      	ldr	r5, [r7, #4]
 8014b6a:	f107 0408 	add.w	r4, r7, #8
 8014b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7c:	4a06      	ldr	r2, [pc, #24]	; (8014b98 <fmc_get_acm+0x7c>)
 8014b7e:	461c      	mov	r4, r3
 8014b80:	4615      	mov	r5, r2
 8014b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b90:	3734      	adds	r7, #52	; 0x34
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b96:	bf00      	nop
 8014b98:	20001de8 	.word	0x20001de8

08014b9c <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval Caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b9e:	b093      	sub	sp, #76	; 0x4c
 8014ba0:	af06      	add	r7, sp, #24
 8014ba2:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014ba4:	4c1c      	ldr	r4, [pc, #112]	; (8014c18 <fmc_get_rate+0x7c>)
 8014ba6:	f107 0308 	add.w	r3, r7, #8
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7fa fa02 	bl	800efb4 <fm_factory_get_rate>
 8014bb0:	4625      	mov	r5, r4
 8014bb2:	f107 0408 	add.w	r4, r7, #8
 8014bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014bc2:	4b15      	ldr	r3, [pc, #84]	; (8014c18 <fmc_get_rate+0x7c>)
 8014bc4:	607b      	str	r3, [r7, #4]
 8014bc6:	f107 0c08 	add.w	ip, r7, #8
 8014bca:	4e13      	ldr	r6, [pc, #76]	; (8014c18 <fmc_get_rate+0x7c>)
 8014bcc:	466d      	mov	r5, sp
 8014bce:	f106 0408 	add.w	r4, r6, #8
 8014bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8014bde:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014be2:	4660      	mov	r0, ip
 8014be4:	f000 f880 	bl	8014ce8 <fmc_totalizer_init>
 8014be8:	687d      	ldr	r5, [r7, #4]
 8014bea:	f107 0408 	add.w	r4, r7, #8
 8014bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bf2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bf6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfc:	4a06      	ldr	r2, [pc, #24]	; (8014c18 <fmc_get_rate+0x7c>)
 8014bfe:	461c      	mov	r4, r3
 8014c00:	4615      	mov	r5, r2
 8014c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c10:	3734      	adds	r7, #52	; 0x34
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c16:	bf00      	nop
 8014c18:	20001e08 	.word	0x20001e08

08014c1c <fmc_get_stm32_temp>:
 * @param  None
 * @retval Temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014c24:	f7ff ff10 	bl	8014a48 <fm_temp_stm32_format>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	4b0d      	ldr	r3, [pc, #52]	; (8014c64 <fmc_get_stm32_temp+0x48>)
 8014c2e:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014c30:	f107 0308 	add.w	r3, r7, #8
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fa f9d3 	bl	800efe0 <fm_factory_get_temp>
 8014c3a:	7b3a      	ldrb	r2, [r7, #12]
 8014c3c:	4b09      	ldr	r3, [pc, #36]	; (8014c64 <fmc_get_stm32_temp+0x48>)
 8014c3e:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014c40:	f107 0314 	add.w	r3, r7, #20
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7fa f9cb 	bl	800efe0 <fm_factory_get_temp>
 8014c4a:	7f3a      	ldrb	r2, [r7, #28]
 8014c4c:	4b05      	ldr	r3, [pc, #20]	; (8014c64 <fmc_get_stm32_temp+0x48>)
 8014c4e:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	4a04      	ldr	r2, [pc, #16]	; (8014c64 <fmc_get_stm32_temp+0x48>)
 8014c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	3720      	adds	r7, #32
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20001e48 	.word	0x20001e48

08014c68 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c6a:	b093      	sub	sp, #76	; 0x4c
 8014c6c:	af06      	add	r7, sp, #24
 8014c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014c70:	4c1c      	ldr	r4, [pc, #112]	; (8014ce4 <fmc_get_ttl+0x7c>)
 8014c72:	f107 0308 	add.w	r3, r7, #8
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fa f9c4 	bl	800f004 <fm_factory_get_ttl>
 8014c7c:	4625      	mov	r5, r4
 8014c7e:	f107 0408 	add.w	r4, r7, #8
 8014c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014c8e:	4b15      	ldr	r3, [pc, #84]	; (8014ce4 <fmc_get_ttl+0x7c>)
 8014c90:	607b      	str	r3, [r7, #4]
 8014c92:	f107 0c08 	add.w	ip, r7, #8
 8014c96:	4e13      	ldr	r6, [pc, #76]	; (8014ce4 <fmc_get_ttl+0x7c>)
 8014c98:	466d      	mov	r5, sp
 8014c9a:	f106 0408 	add.w	r4, r6, #8
 8014c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ca2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014ca6:	e885 0003 	stmia.w	r5, {r0, r1}
 8014caa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014cae:	4660      	mov	r0, ip
 8014cb0:	f000 f81a 	bl	8014ce8 <fmc_totalizer_init>
 8014cb4:	687d      	ldr	r5, [r7, #4]
 8014cb6:	f107 0408 	add.w	r4, r7, #8
 8014cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014cc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc8:	4a06      	ldr	r2, [pc, #24]	; (8014ce4 <fmc_get_ttl+0x7c>)
 8014cca:	461c      	mov	r4, r3
 8014ccc:	4615      	mov	r5, r2
 8014cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cdc:	3734      	adds	r7, #52	; 0x34
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	20001e28 	.word	0x20001e28

08014ce8 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014ce8:	b082      	sub	sp, #8
 8014cea:	b5b0      	push	{r4, r5, r7, lr}
 8014cec:	b082      	sub	sp, #8
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	f107 0118 	add.w	r1, r7, #24
 8014cf6:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014cfa:	f107 0018 	add.w	r0, r7, #24
 8014cfe:	f000 f811 	bl	8014d24 <fmc_totalizer_refresh>

    return (totalizer);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	461d      	mov	r5, r3
 8014d06:	f107 0418 	add.w	r4, r7, #24
 8014d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014d20:	b002      	add	sp, #8
 8014d22:	4770      	bx	lr

08014d24 <fmc_totalizer_refresh>:
 * @param Puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014d24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014d28:	b084      	sub	sp, #16
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014d2e:	6879      	ldr	r1, [r7, #4]
 8014d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d34:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014d38:	6879      	ldr	r1, [r7, #4]
 8014d3a:	7d09      	ldrb	r1, [r1, #20]
 8014d3c:	4608      	mov	r0, r1
 8014d3e:	6879      	ldr	r1, [r7, #4]
 8014d40:	7b09      	ldrb	r1, [r1, #12]
 8014d42:	4401      	add	r1, r0
 8014d44:	4816      	ldr	r0, [pc, #88]	; (8014da0 <fmc_totalizer_refresh+0x7c>)
 8014d46:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	460c      	mov	r4, r1
 8014d4e:	4605      	mov	r5, r0
 8014d50:	68f9      	ldr	r1, [r7, #12]
 8014d52:	fb04 f001 	mul.w	r0, r4, r1
 8014d56:	68b9      	ldr	r1, [r7, #8]
 8014d58:	fb05 f101 	mul.w	r1, r5, r1
 8014d5c:	4401      	add	r1, r0
 8014d5e:	68b8      	ldr	r0, [r7, #8]
 8014d60:	fba0 2304 	umull	r2, r3, r0, r4
 8014d64:	4419      	add	r1, r3
 8014d66:	460b      	mov	r3, r1
 8014d68:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014d6c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	691b      	ldr	r3, [r3, #16]
 8014d74:	2200      	movs	r2, #0
 8014d76:	4698      	mov	r8, r3
 8014d78:	4691      	mov	r9, r2
 8014d7a:	4642      	mov	r2, r8
 8014d7c:	464b      	mov	r3, r9
 8014d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d82:	f7eb fba7 	bl	80004d4 <__aeabi_uldivmod>
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014d8e:	68ba      	ldr	r2, [r7, #8]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	609a      	str	r2, [r3, #8]

}
 8014d94:	bf00      	nop
 8014d96:	3710      	adds	r7, #16
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014d9e:	bf00      	nop
 8014da0:	08015c34 	.word	0x08015c34

08014da4 <atoi>:
 8014da4:	220a      	movs	r2, #10
 8014da6:	2100      	movs	r1, #0
 8014da8:	f000 b908 	b.w	8014fbc <strtol>

08014dac <__errno>:
 8014dac:	4b01      	ldr	r3, [pc, #4]	; (8014db4 <__errno+0x8>)
 8014dae:	6818      	ldr	r0, [r3, #0]
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop
 8014db4:	20000154 	.word	0x20000154

08014db8 <__libc_init_array>:
 8014db8:	b570      	push	{r4, r5, r6, lr}
 8014dba:	4d0d      	ldr	r5, [pc, #52]	; (8014df0 <__libc_init_array+0x38>)
 8014dbc:	2600      	movs	r6, #0
 8014dbe:	4c0d      	ldr	r4, [pc, #52]	; (8014df4 <__libc_init_array+0x3c>)
 8014dc0:	1b64      	subs	r4, r4, r5
 8014dc2:	10a4      	asrs	r4, r4, #2
 8014dc4:	42a6      	cmp	r6, r4
 8014dc6:	d109      	bne.n	8014ddc <__libc_init_array+0x24>
 8014dc8:	4d0b      	ldr	r5, [pc, #44]	; (8014df8 <__libc_init_array+0x40>)
 8014dca:	2600      	movs	r6, #0
 8014dcc:	4c0b      	ldr	r4, [pc, #44]	; (8014dfc <__libc_init_array+0x44>)
 8014dce:	f000 fd5d 	bl	801588c <_init>
 8014dd2:	1b64      	subs	r4, r4, r5
 8014dd4:	10a4      	asrs	r4, r4, #2
 8014dd6:	42a6      	cmp	r6, r4
 8014dd8:	d105      	bne.n	8014de6 <__libc_init_array+0x2e>
 8014dda:	bd70      	pop	{r4, r5, r6, pc}
 8014ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014de0:	3601      	adds	r6, #1
 8014de2:	4798      	blx	r3
 8014de4:	e7ee      	b.n	8014dc4 <__libc_init_array+0xc>
 8014de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dea:	3601      	adds	r6, #1
 8014dec:	4798      	blx	r3
 8014dee:	e7f2      	b.n	8014dd6 <__libc_init_array+0x1e>
 8014df0:	08015d8c 	.word	0x08015d8c
 8014df4:	08015d8c 	.word	0x08015d8c
 8014df8:	08015d8c 	.word	0x08015d8c
 8014dfc:	08015d90 	.word	0x08015d90

08014e00 <memset>:
 8014e00:	4402      	add	r2, r0
 8014e02:	4603      	mov	r3, r0
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d100      	bne.n	8014e0a <memset+0xa>
 8014e08:	4770      	bx	lr
 8014e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8014e0e:	e7f9      	b.n	8014e04 <memset+0x4>

08014e10 <sniprintf>:
 8014e10:	b40c      	push	{r2, r3}
 8014e12:	4b18      	ldr	r3, [pc, #96]	; (8014e74 <sniprintf+0x64>)
 8014e14:	b530      	push	{r4, r5, lr}
 8014e16:	1e0c      	subs	r4, r1, #0
 8014e18:	b09d      	sub	sp, #116	; 0x74
 8014e1a:	681d      	ldr	r5, [r3, #0]
 8014e1c:	da08      	bge.n	8014e30 <sniprintf+0x20>
 8014e1e:	238b      	movs	r3, #139	; 0x8b
 8014e20:	f04f 30ff 	mov.w	r0, #4294967295
 8014e24:	602b      	str	r3, [r5, #0]
 8014e26:	b01d      	add	sp, #116	; 0x74
 8014e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e2c:	b002      	add	sp, #8
 8014e2e:	4770      	bx	lr
 8014e30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014e34:	9002      	str	r0, [sp, #8]
 8014e36:	9006      	str	r0, [sp, #24]
 8014e38:	a902      	add	r1, sp, #8
 8014e3a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e3e:	bf14      	ite	ne
 8014e40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014e44:	4623      	moveq	r3, r4
 8014e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014e48:	4628      	mov	r0, r5
 8014e4a:	9304      	str	r3, [sp, #16]
 8014e4c:	9307      	str	r3, [sp, #28]
 8014e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e56:	ab21      	add	r3, sp, #132	; 0x84
 8014e58:	9301      	str	r3, [sp, #4]
 8014e5a:	f000 f915 	bl	8015088 <_svfiprintf_r>
 8014e5e:	1c43      	adds	r3, r0, #1
 8014e60:	bfbc      	itt	lt
 8014e62:	238b      	movlt	r3, #139	; 0x8b
 8014e64:	602b      	strlt	r3, [r5, #0]
 8014e66:	2c00      	cmp	r4, #0
 8014e68:	d0dd      	beq.n	8014e26 <sniprintf+0x16>
 8014e6a:	9b02      	ldr	r3, [sp, #8]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	701a      	strb	r2, [r3, #0]
 8014e70:	e7d9      	b.n	8014e26 <sniprintf+0x16>
 8014e72:	bf00      	nop
 8014e74:	20000154 	.word	0x20000154

08014e78 <siprintf>:
 8014e78:	b40e      	push	{r1, r2, r3}
 8014e7a:	b500      	push	{lr}
 8014e7c:	b09c      	sub	sp, #112	; 0x70
 8014e7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e82:	ab1d      	add	r3, sp, #116	; 0x74
 8014e84:	9002      	str	r0, [sp, #8]
 8014e86:	9006      	str	r0, [sp, #24]
 8014e88:	9107      	str	r1, [sp, #28]
 8014e8a:	9104      	str	r1, [sp, #16]
 8014e8c:	4808      	ldr	r0, [pc, #32]	; (8014eb0 <siprintf+0x38>)
 8014e8e:	4909      	ldr	r1, [pc, #36]	; (8014eb4 <siprintf+0x3c>)
 8014e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e94:	9105      	str	r1, [sp, #20]
 8014e96:	a902      	add	r1, sp, #8
 8014e98:	6800      	ldr	r0, [r0, #0]
 8014e9a:	9301      	str	r3, [sp, #4]
 8014e9c:	f000 f8f4 	bl	8015088 <_svfiprintf_r>
 8014ea0:	9b02      	ldr	r3, [sp, #8]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	701a      	strb	r2, [r3, #0]
 8014ea6:	b01c      	add	sp, #112	; 0x70
 8014ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014eac:	b003      	add	sp, #12
 8014eae:	4770      	bx	lr
 8014eb0:	20000154 	.word	0x20000154
 8014eb4:	ffff0208 	.word	0xffff0208

08014eb8 <_strtol_l.constprop.0>:
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ebe:	d001      	beq.n	8014ec4 <_strtol_l.constprop.0+0xc>
 8014ec0:	2b24      	cmp	r3, #36	; 0x24
 8014ec2:	d906      	bls.n	8014ed2 <_strtol_l.constprop.0+0x1a>
 8014ec4:	f7ff ff72 	bl	8014dac <__errno>
 8014ec8:	2316      	movs	r3, #22
 8014eca:	6003      	str	r3, [r0, #0]
 8014ecc:	2000      	movs	r0, #0
 8014ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014fb8 <_strtol_l.constprop.0+0x100>
 8014ed8:	462e      	mov	r6, r5
 8014eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ede:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014ee2:	f017 0708 	ands.w	r7, r7, #8
 8014ee6:	d1f7      	bne.n	8014ed8 <_strtol_l.constprop.0+0x20>
 8014ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8014eea:	d132      	bne.n	8014f52 <_strtol_l.constprop.0+0x9a>
 8014eec:	782c      	ldrb	r4, [r5, #0]
 8014eee:	2701      	movs	r7, #1
 8014ef0:	1cb5      	adds	r5, r6, #2
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d05b      	beq.n	8014fae <_strtol_l.constprop.0+0xf6>
 8014ef6:	2b10      	cmp	r3, #16
 8014ef8:	d109      	bne.n	8014f0e <_strtol_l.constprop.0+0x56>
 8014efa:	2c30      	cmp	r4, #48	; 0x30
 8014efc:	d107      	bne.n	8014f0e <_strtol_l.constprop.0+0x56>
 8014efe:	782c      	ldrb	r4, [r5, #0]
 8014f00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f04:	2c58      	cmp	r4, #88	; 0x58
 8014f06:	d14d      	bne.n	8014fa4 <_strtol_l.constprop.0+0xec>
 8014f08:	786c      	ldrb	r4, [r5, #1]
 8014f0a:	2310      	movs	r3, #16
 8014f0c:	3502      	adds	r5, #2
 8014f0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f12:	f04f 0c00 	mov.w	ip, #0
 8014f16:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f1a:	4666      	mov	r6, ip
 8014f1c:	fbb8 f9f3 	udiv	r9, r8, r3
 8014f20:	fb03 8a19 	mls	sl, r3, r9, r8
 8014f24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014f28:	f1be 0f09 	cmp.w	lr, #9
 8014f2c:	d816      	bhi.n	8014f5c <_strtol_l.constprop.0+0xa4>
 8014f2e:	4674      	mov	r4, lr
 8014f30:	42a3      	cmp	r3, r4
 8014f32:	dd24      	ble.n	8014f7e <_strtol_l.constprop.0+0xc6>
 8014f34:	f1bc 0f00 	cmp.w	ip, #0
 8014f38:	db1e      	blt.n	8014f78 <_strtol_l.constprop.0+0xc0>
 8014f3a:	45b1      	cmp	r9, r6
 8014f3c:	d31c      	bcc.n	8014f78 <_strtol_l.constprop.0+0xc0>
 8014f3e:	d101      	bne.n	8014f44 <_strtol_l.constprop.0+0x8c>
 8014f40:	45a2      	cmp	sl, r4
 8014f42:	db19      	blt.n	8014f78 <_strtol_l.constprop.0+0xc0>
 8014f44:	fb06 4603 	mla	r6, r6, r3, r4
 8014f48:	f04f 0c01 	mov.w	ip, #1
 8014f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f50:	e7e8      	b.n	8014f24 <_strtol_l.constprop.0+0x6c>
 8014f52:	2c2b      	cmp	r4, #43	; 0x2b
 8014f54:	bf04      	itt	eq
 8014f56:	782c      	ldrbeq	r4, [r5, #0]
 8014f58:	1cb5      	addeq	r5, r6, #2
 8014f5a:	e7ca      	b.n	8014ef2 <_strtol_l.constprop.0+0x3a>
 8014f5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014f60:	f1be 0f19 	cmp.w	lr, #25
 8014f64:	d801      	bhi.n	8014f6a <_strtol_l.constprop.0+0xb2>
 8014f66:	3c37      	subs	r4, #55	; 0x37
 8014f68:	e7e2      	b.n	8014f30 <_strtol_l.constprop.0+0x78>
 8014f6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014f6e:	f1be 0f19 	cmp.w	lr, #25
 8014f72:	d804      	bhi.n	8014f7e <_strtol_l.constprop.0+0xc6>
 8014f74:	3c57      	subs	r4, #87	; 0x57
 8014f76:	e7db      	b.n	8014f30 <_strtol_l.constprop.0+0x78>
 8014f78:	f04f 3cff 	mov.w	ip, #4294967295
 8014f7c:	e7e6      	b.n	8014f4c <_strtol_l.constprop.0+0x94>
 8014f7e:	f1bc 0f00 	cmp.w	ip, #0
 8014f82:	da05      	bge.n	8014f90 <_strtol_l.constprop.0+0xd8>
 8014f84:	2322      	movs	r3, #34	; 0x22
 8014f86:	4646      	mov	r6, r8
 8014f88:	6003      	str	r3, [r0, #0]
 8014f8a:	b942      	cbnz	r2, 8014f9e <_strtol_l.constprop.0+0xe6>
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	e79e      	b.n	8014ece <_strtol_l.constprop.0+0x16>
 8014f90:	b107      	cbz	r7, 8014f94 <_strtol_l.constprop.0+0xdc>
 8014f92:	4276      	negs	r6, r6
 8014f94:	2a00      	cmp	r2, #0
 8014f96:	d0f9      	beq.n	8014f8c <_strtol_l.constprop.0+0xd4>
 8014f98:	f1bc 0f00 	cmp.w	ip, #0
 8014f9c:	d000      	beq.n	8014fa0 <_strtol_l.constprop.0+0xe8>
 8014f9e:	1e69      	subs	r1, r5, #1
 8014fa0:	6011      	str	r1, [r2, #0]
 8014fa2:	e7f3      	b.n	8014f8c <_strtol_l.constprop.0+0xd4>
 8014fa4:	2430      	movs	r4, #48	; 0x30
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1b1      	bne.n	8014f0e <_strtol_l.constprop.0+0x56>
 8014faa:	2308      	movs	r3, #8
 8014fac:	e7af      	b.n	8014f0e <_strtol_l.constprop.0+0x56>
 8014fae:	2c30      	cmp	r4, #48	; 0x30
 8014fb0:	d0a5      	beq.n	8014efe <_strtol_l.constprop.0+0x46>
 8014fb2:	230a      	movs	r3, #10
 8014fb4:	e7ab      	b.n	8014f0e <_strtol_l.constprop.0+0x56>
 8014fb6:	bf00      	nop
 8014fb8:	08015c51 	.word	0x08015c51

08014fbc <strtol>:
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	460a      	mov	r2, r1
 8014fc0:	4601      	mov	r1, r0
 8014fc2:	4802      	ldr	r0, [pc, #8]	; (8014fcc <strtol+0x10>)
 8014fc4:	6800      	ldr	r0, [r0, #0]
 8014fc6:	f7ff bf77 	b.w	8014eb8 <_strtol_l.constprop.0>
 8014fca:	bf00      	nop
 8014fcc:	20000154 	.word	0x20000154

08014fd0 <__ssputs_r>:
 8014fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd4:	688e      	ldr	r6, [r1, #8]
 8014fd6:	4682      	mov	sl, r0
 8014fd8:	460c      	mov	r4, r1
 8014fda:	4690      	mov	r8, r2
 8014fdc:	429e      	cmp	r6, r3
 8014fde:	461f      	mov	r7, r3
 8014fe0:	d838      	bhi.n	8015054 <__ssputs_r+0x84>
 8014fe2:	898a      	ldrh	r2, [r1, #12]
 8014fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014fe8:	d032      	beq.n	8015050 <__ssputs_r+0x80>
 8014fea:	6825      	ldr	r5, [r4, #0]
 8014fec:	3301      	adds	r3, #1
 8014fee:	6909      	ldr	r1, [r1, #16]
 8014ff0:	eba5 0901 	sub.w	r9, r5, r1
 8014ff4:	6965      	ldr	r5, [r4, #20]
 8014ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ffa:	444b      	add	r3, r9
 8014ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015000:	106d      	asrs	r5, r5, #1
 8015002:	429d      	cmp	r5, r3
 8015004:	bf38      	it	cc
 8015006:	461d      	movcc	r5, r3
 8015008:	0553      	lsls	r3, r2, #21
 801500a:	d531      	bpl.n	8015070 <__ssputs_r+0xa0>
 801500c:	4629      	mov	r1, r5
 801500e:	f000 fb73 	bl	80156f8 <_malloc_r>
 8015012:	4606      	mov	r6, r0
 8015014:	b950      	cbnz	r0, 801502c <__ssputs_r+0x5c>
 8015016:	230c      	movs	r3, #12
 8015018:	f04f 30ff 	mov.w	r0, #4294967295
 801501c:	f8ca 3000 	str.w	r3, [sl]
 8015020:	89a3      	ldrh	r3, [r4, #12]
 8015022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015026:	81a3      	strh	r3, [r4, #12]
 8015028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801502c:	464a      	mov	r2, r9
 801502e:	6921      	ldr	r1, [r4, #16]
 8015030:	f000 face 	bl	80155d0 <memcpy>
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801503e:	81a3      	strh	r3, [r4, #12]
 8015040:	6126      	str	r6, [r4, #16]
 8015042:	444e      	add	r6, r9
 8015044:	6165      	str	r5, [r4, #20]
 8015046:	eba5 0509 	sub.w	r5, r5, r9
 801504a:	6026      	str	r6, [r4, #0]
 801504c:	463e      	mov	r6, r7
 801504e:	60a5      	str	r5, [r4, #8]
 8015050:	42be      	cmp	r6, r7
 8015052:	d900      	bls.n	8015056 <__ssputs_r+0x86>
 8015054:	463e      	mov	r6, r7
 8015056:	4632      	mov	r2, r6
 8015058:	4641      	mov	r1, r8
 801505a:	6820      	ldr	r0, [r4, #0]
 801505c:	f000 fac5 	bl	80155ea <memmove>
 8015060:	68a3      	ldr	r3, [r4, #8]
 8015062:	2000      	movs	r0, #0
 8015064:	1b9b      	subs	r3, r3, r6
 8015066:	60a3      	str	r3, [r4, #8]
 8015068:	6823      	ldr	r3, [r4, #0]
 801506a:	4433      	add	r3, r6
 801506c:	6023      	str	r3, [r4, #0]
 801506e:	e7db      	b.n	8015028 <__ssputs_r+0x58>
 8015070:	462a      	mov	r2, r5
 8015072:	f000 fbb5 	bl	80157e0 <_realloc_r>
 8015076:	4606      	mov	r6, r0
 8015078:	2800      	cmp	r0, #0
 801507a:	d1e1      	bne.n	8015040 <__ssputs_r+0x70>
 801507c:	6921      	ldr	r1, [r4, #16]
 801507e:	4650      	mov	r0, sl
 8015080:	f000 face 	bl	8015620 <_free_r>
 8015084:	e7c7      	b.n	8015016 <__ssputs_r+0x46>
	...

08015088 <_svfiprintf_r>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	4698      	mov	r8, r3
 801508e:	898b      	ldrh	r3, [r1, #12]
 8015090:	b09d      	sub	sp, #116	; 0x74
 8015092:	4607      	mov	r7, r0
 8015094:	061b      	lsls	r3, r3, #24
 8015096:	460d      	mov	r5, r1
 8015098:	4614      	mov	r4, r2
 801509a:	d50e      	bpl.n	80150ba <_svfiprintf_r+0x32>
 801509c:	690b      	ldr	r3, [r1, #16]
 801509e:	b963      	cbnz	r3, 80150ba <_svfiprintf_r+0x32>
 80150a0:	2140      	movs	r1, #64	; 0x40
 80150a2:	f000 fb29 	bl	80156f8 <_malloc_r>
 80150a6:	6028      	str	r0, [r5, #0]
 80150a8:	6128      	str	r0, [r5, #16]
 80150aa:	b920      	cbnz	r0, 80150b6 <_svfiprintf_r+0x2e>
 80150ac:	230c      	movs	r3, #12
 80150ae:	603b      	str	r3, [r7, #0]
 80150b0:	f04f 30ff 	mov.w	r0, #4294967295
 80150b4:	e0d1      	b.n	801525a <_svfiprintf_r+0x1d2>
 80150b6:	2340      	movs	r3, #64	; 0x40
 80150b8:	616b      	str	r3, [r5, #20]
 80150ba:	2300      	movs	r3, #0
 80150bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80150c0:	f04f 0901 	mov.w	r9, #1
 80150c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8015274 <_svfiprintf_r+0x1ec>
 80150c8:	9309      	str	r3, [sp, #36]	; 0x24
 80150ca:	2320      	movs	r3, #32
 80150cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150d0:	2330      	movs	r3, #48	; 0x30
 80150d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150d6:	4623      	mov	r3, r4
 80150d8:	469a      	mov	sl, r3
 80150da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150de:	b10a      	cbz	r2, 80150e4 <_svfiprintf_r+0x5c>
 80150e0:	2a25      	cmp	r2, #37	; 0x25
 80150e2:	d1f9      	bne.n	80150d8 <_svfiprintf_r+0x50>
 80150e4:	ebba 0b04 	subs.w	fp, sl, r4
 80150e8:	d00b      	beq.n	8015102 <_svfiprintf_r+0x7a>
 80150ea:	465b      	mov	r3, fp
 80150ec:	4622      	mov	r2, r4
 80150ee:	4629      	mov	r1, r5
 80150f0:	4638      	mov	r0, r7
 80150f2:	f7ff ff6d 	bl	8014fd0 <__ssputs_r>
 80150f6:	3001      	adds	r0, #1
 80150f8:	f000 80aa 	beq.w	8015250 <_svfiprintf_r+0x1c8>
 80150fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150fe:	445a      	add	r2, fp
 8015100:	9209      	str	r2, [sp, #36]	; 0x24
 8015102:	f89a 3000 	ldrb.w	r3, [sl]
 8015106:	2b00      	cmp	r3, #0
 8015108:	f000 80a2 	beq.w	8015250 <_svfiprintf_r+0x1c8>
 801510c:	2300      	movs	r3, #0
 801510e:	f04f 32ff 	mov.w	r2, #4294967295
 8015112:	f10a 0a01 	add.w	sl, sl, #1
 8015116:	9304      	str	r3, [sp, #16]
 8015118:	9307      	str	r3, [sp, #28]
 801511a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801511e:	931a      	str	r3, [sp, #104]	; 0x68
 8015120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015124:	4654      	mov	r4, sl
 8015126:	2205      	movs	r2, #5
 8015128:	4852      	ldr	r0, [pc, #328]	; (8015274 <_svfiprintf_r+0x1ec>)
 801512a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801512e:	f000 fa41 	bl	80155b4 <memchr>
 8015132:	9a04      	ldr	r2, [sp, #16]
 8015134:	b9d8      	cbnz	r0, 801516e <_svfiprintf_r+0xe6>
 8015136:	06d0      	lsls	r0, r2, #27
 8015138:	bf44      	itt	mi
 801513a:	2320      	movmi	r3, #32
 801513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015140:	0711      	lsls	r1, r2, #28
 8015142:	bf44      	itt	mi
 8015144:	232b      	movmi	r3, #43	; 0x2b
 8015146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801514a:	f89a 3000 	ldrb.w	r3, [sl]
 801514e:	2b2a      	cmp	r3, #42	; 0x2a
 8015150:	d015      	beq.n	801517e <_svfiprintf_r+0xf6>
 8015152:	9a07      	ldr	r2, [sp, #28]
 8015154:	4654      	mov	r4, sl
 8015156:	2000      	movs	r0, #0
 8015158:	f04f 0c0a 	mov.w	ip, #10
 801515c:	4621      	mov	r1, r4
 801515e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015162:	3b30      	subs	r3, #48	; 0x30
 8015164:	2b09      	cmp	r3, #9
 8015166:	d94e      	bls.n	8015206 <_svfiprintf_r+0x17e>
 8015168:	b1b0      	cbz	r0, 8015198 <_svfiprintf_r+0x110>
 801516a:	9207      	str	r2, [sp, #28]
 801516c:	e014      	b.n	8015198 <_svfiprintf_r+0x110>
 801516e:	eba0 0308 	sub.w	r3, r0, r8
 8015172:	46a2      	mov	sl, r4
 8015174:	fa09 f303 	lsl.w	r3, r9, r3
 8015178:	4313      	orrs	r3, r2
 801517a:	9304      	str	r3, [sp, #16]
 801517c:	e7d2      	b.n	8015124 <_svfiprintf_r+0x9c>
 801517e:	9b03      	ldr	r3, [sp, #12]
 8015180:	1d19      	adds	r1, r3, #4
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	9103      	str	r1, [sp, #12]
 8015188:	bfbb      	ittet	lt
 801518a:	425b      	neglt	r3, r3
 801518c:	f042 0202 	orrlt.w	r2, r2, #2
 8015190:	9307      	strge	r3, [sp, #28]
 8015192:	9307      	strlt	r3, [sp, #28]
 8015194:	bfb8      	it	lt
 8015196:	9204      	strlt	r2, [sp, #16]
 8015198:	7823      	ldrb	r3, [r4, #0]
 801519a:	2b2e      	cmp	r3, #46	; 0x2e
 801519c:	d10c      	bne.n	80151b8 <_svfiprintf_r+0x130>
 801519e:	7863      	ldrb	r3, [r4, #1]
 80151a0:	2b2a      	cmp	r3, #42	; 0x2a
 80151a2:	d135      	bne.n	8015210 <_svfiprintf_r+0x188>
 80151a4:	9b03      	ldr	r3, [sp, #12]
 80151a6:	3402      	adds	r4, #2
 80151a8:	1d1a      	adds	r2, r3, #4
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	9203      	str	r2, [sp, #12]
 80151b0:	bfb8      	it	lt
 80151b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80151b6:	9305      	str	r3, [sp, #20]
 80151b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015284 <_svfiprintf_r+0x1fc>
 80151bc:	2203      	movs	r2, #3
 80151be:	7821      	ldrb	r1, [r4, #0]
 80151c0:	4650      	mov	r0, sl
 80151c2:	f000 f9f7 	bl	80155b4 <memchr>
 80151c6:	b140      	cbz	r0, 80151da <_svfiprintf_r+0x152>
 80151c8:	2340      	movs	r3, #64	; 0x40
 80151ca:	eba0 000a 	sub.w	r0, r0, sl
 80151ce:	3401      	adds	r4, #1
 80151d0:	fa03 f000 	lsl.w	r0, r3, r0
 80151d4:	9b04      	ldr	r3, [sp, #16]
 80151d6:	4303      	orrs	r3, r0
 80151d8:	9304      	str	r3, [sp, #16]
 80151da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151de:	2206      	movs	r2, #6
 80151e0:	4825      	ldr	r0, [pc, #148]	; (8015278 <_svfiprintf_r+0x1f0>)
 80151e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151e6:	f000 f9e5 	bl	80155b4 <memchr>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d038      	beq.n	8015260 <_svfiprintf_r+0x1d8>
 80151ee:	4b23      	ldr	r3, [pc, #140]	; (801527c <_svfiprintf_r+0x1f4>)
 80151f0:	bb1b      	cbnz	r3, 801523a <_svfiprintf_r+0x1b2>
 80151f2:	9b03      	ldr	r3, [sp, #12]
 80151f4:	3307      	adds	r3, #7
 80151f6:	f023 0307 	bic.w	r3, r3, #7
 80151fa:	3308      	adds	r3, #8
 80151fc:	9303      	str	r3, [sp, #12]
 80151fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015200:	4433      	add	r3, r6
 8015202:	9309      	str	r3, [sp, #36]	; 0x24
 8015204:	e767      	b.n	80150d6 <_svfiprintf_r+0x4e>
 8015206:	fb0c 3202 	mla	r2, ip, r2, r3
 801520a:	460c      	mov	r4, r1
 801520c:	2001      	movs	r0, #1
 801520e:	e7a5      	b.n	801515c <_svfiprintf_r+0xd4>
 8015210:	2300      	movs	r3, #0
 8015212:	3401      	adds	r4, #1
 8015214:	f04f 0c0a 	mov.w	ip, #10
 8015218:	4619      	mov	r1, r3
 801521a:	9305      	str	r3, [sp, #20]
 801521c:	4620      	mov	r0, r4
 801521e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015222:	3a30      	subs	r2, #48	; 0x30
 8015224:	2a09      	cmp	r2, #9
 8015226:	d903      	bls.n	8015230 <_svfiprintf_r+0x1a8>
 8015228:	2b00      	cmp	r3, #0
 801522a:	d0c5      	beq.n	80151b8 <_svfiprintf_r+0x130>
 801522c:	9105      	str	r1, [sp, #20]
 801522e:	e7c3      	b.n	80151b8 <_svfiprintf_r+0x130>
 8015230:	fb0c 2101 	mla	r1, ip, r1, r2
 8015234:	4604      	mov	r4, r0
 8015236:	2301      	movs	r3, #1
 8015238:	e7f0      	b.n	801521c <_svfiprintf_r+0x194>
 801523a:	ab03      	add	r3, sp, #12
 801523c:	462a      	mov	r2, r5
 801523e:	a904      	add	r1, sp, #16
 8015240:	4638      	mov	r0, r7
 8015242:	9300      	str	r3, [sp, #0]
 8015244:	4b0e      	ldr	r3, [pc, #56]	; (8015280 <_svfiprintf_r+0x1f8>)
 8015246:	e000      	b.n	801524a <_svfiprintf_r+0x1c2>
 8015248:	bf00      	nop
 801524a:	1c42      	adds	r2, r0, #1
 801524c:	4606      	mov	r6, r0
 801524e:	d1d6      	bne.n	80151fe <_svfiprintf_r+0x176>
 8015250:	89ab      	ldrh	r3, [r5, #12]
 8015252:	065b      	lsls	r3, r3, #25
 8015254:	f53f af2c 	bmi.w	80150b0 <_svfiprintf_r+0x28>
 8015258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801525a:	b01d      	add	sp, #116	; 0x74
 801525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015260:	ab03      	add	r3, sp, #12
 8015262:	462a      	mov	r2, r5
 8015264:	a904      	add	r1, sp, #16
 8015266:	4638      	mov	r0, r7
 8015268:	9300      	str	r3, [sp, #0]
 801526a:	4b05      	ldr	r3, [pc, #20]	; (8015280 <_svfiprintf_r+0x1f8>)
 801526c:	f000 f87c 	bl	8015368 <_printf_i>
 8015270:	e7eb      	b.n	801524a <_svfiprintf_r+0x1c2>
 8015272:	bf00      	nop
 8015274:	08015d51 	.word	0x08015d51
 8015278:	08015d5b 	.word	0x08015d5b
 801527c:	00000000 	.word	0x00000000
 8015280:	08014fd1 	.word	0x08014fd1
 8015284:	08015d57 	.word	0x08015d57

08015288 <_printf_common>:
 8015288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801528c:	4616      	mov	r6, r2
 801528e:	4699      	mov	r9, r3
 8015290:	688a      	ldr	r2, [r1, #8]
 8015292:	4607      	mov	r7, r0
 8015294:	690b      	ldr	r3, [r1, #16]
 8015296:	460c      	mov	r4, r1
 8015298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801529c:	4293      	cmp	r3, r2
 801529e:	bfb8      	it	lt
 80152a0:	4613      	movlt	r3, r2
 80152a2:	6033      	str	r3, [r6, #0]
 80152a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80152a8:	b10a      	cbz	r2, 80152ae <_printf_common+0x26>
 80152aa:	3301      	adds	r3, #1
 80152ac:	6033      	str	r3, [r6, #0]
 80152ae:	6823      	ldr	r3, [r4, #0]
 80152b0:	0699      	lsls	r1, r3, #26
 80152b2:	bf42      	ittt	mi
 80152b4:	6833      	ldrmi	r3, [r6, #0]
 80152b6:	3302      	addmi	r3, #2
 80152b8:	6033      	strmi	r3, [r6, #0]
 80152ba:	6825      	ldr	r5, [r4, #0]
 80152bc:	f015 0506 	ands.w	r5, r5, #6
 80152c0:	d106      	bne.n	80152d0 <_printf_common+0x48>
 80152c2:	f104 0a19 	add.w	sl, r4, #25
 80152c6:	68e3      	ldr	r3, [r4, #12]
 80152c8:	6832      	ldr	r2, [r6, #0]
 80152ca:	1a9b      	subs	r3, r3, r2
 80152cc:	42ab      	cmp	r3, r5
 80152ce:	dc29      	bgt.n	8015324 <_printf_common+0x9c>
 80152d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80152d4:	1e13      	subs	r3, r2, #0
 80152d6:	6822      	ldr	r2, [r4, #0]
 80152d8:	bf18      	it	ne
 80152da:	2301      	movne	r3, #1
 80152dc:	0692      	lsls	r2, r2, #26
 80152de:	d42e      	bmi.n	801533e <_printf_common+0xb6>
 80152e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152e4:	4649      	mov	r1, r9
 80152e6:	4638      	mov	r0, r7
 80152e8:	47c0      	blx	r8
 80152ea:	3001      	adds	r0, #1
 80152ec:	d021      	beq.n	8015332 <_printf_common+0xaa>
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	341a      	adds	r4, #26
 80152f2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80152f6:	f003 0306 	and.w	r3, r3, #6
 80152fa:	6832      	ldr	r2, [r6, #0]
 80152fc:	2600      	movs	r6, #0
 80152fe:	2b04      	cmp	r3, #4
 8015300:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015304:	bf08      	it	eq
 8015306:	1aad      	subeq	r5, r5, r2
 8015308:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801530c:	bf14      	ite	ne
 801530e:	2500      	movne	r5, #0
 8015310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015314:	4293      	cmp	r3, r2
 8015316:	bfc4      	itt	gt
 8015318:	1a9b      	subgt	r3, r3, r2
 801531a:	18ed      	addgt	r5, r5, r3
 801531c:	42b5      	cmp	r5, r6
 801531e:	d11a      	bne.n	8015356 <_printf_common+0xce>
 8015320:	2000      	movs	r0, #0
 8015322:	e008      	b.n	8015336 <_printf_common+0xae>
 8015324:	2301      	movs	r3, #1
 8015326:	4652      	mov	r2, sl
 8015328:	4649      	mov	r1, r9
 801532a:	4638      	mov	r0, r7
 801532c:	47c0      	blx	r8
 801532e:	3001      	adds	r0, #1
 8015330:	d103      	bne.n	801533a <_printf_common+0xb2>
 8015332:	f04f 30ff 	mov.w	r0, #4294967295
 8015336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533a:	3501      	adds	r5, #1
 801533c:	e7c3      	b.n	80152c6 <_printf_common+0x3e>
 801533e:	18e1      	adds	r1, r4, r3
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	2030      	movs	r0, #48	; 0x30
 8015344:	3302      	adds	r3, #2
 8015346:	4422      	add	r2, r4
 8015348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801534c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015354:	e7c4      	b.n	80152e0 <_printf_common+0x58>
 8015356:	2301      	movs	r3, #1
 8015358:	4622      	mov	r2, r4
 801535a:	4649      	mov	r1, r9
 801535c:	4638      	mov	r0, r7
 801535e:	47c0      	blx	r8
 8015360:	3001      	adds	r0, #1
 8015362:	d0e6      	beq.n	8015332 <_printf_common+0xaa>
 8015364:	3601      	adds	r6, #1
 8015366:	e7d9      	b.n	801531c <_printf_common+0x94>

08015368 <_printf_i>:
 8015368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801536c:	7e0f      	ldrb	r7, [r1, #24]
 801536e:	4691      	mov	r9, r2
 8015370:	4680      	mov	r8, r0
 8015372:	460c      	mov	r4, r1
 8015374:	2f78      	cmp	r7, #120	; 0x78
 8015376:	469a      	mov	sl, r3
 8015378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801537a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801537e:	d807      	bhi.n	8015390 <_printf_i+0x28>
 8015380:	2f62      	cmp	r7, #98	; 0x62
 8015382:	d80a      	bhi.n	801539a <_printf_i+0x32>
 8015384:	2f00      	cmp	r7, #0
 8015386:	f000 80d8 	beq.w	801553a <_printf_i+0x1d2>
 801538a:	2f58      	cmp	r7, #88	; 0x58
 801538c:	f000 80a3 	beq.w	80154d6 <_printf_i+0x16e>
 8015390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015398:	e03a      	b.n	8015410 <_printf_i+0xa8>
 801539a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801539e:	2b15      	cmp	r3, #21
 80153a0:	d8f6      	bhi.n	8015390 <_printf_i+0x28>
 80153a2:	a101      	add	r1, pc, #4	; (adr r1, 80153a8 <_printf_i+0x40>)
 80153a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80153a8:	08015401 	.word	0x08015401
 80153ac:	08015415 	.word	0x08015415
 80153b0:	08015391 	.word	0x08015391
 80153b4:	08015391 	.word	0x08015391
 80153b8:	08015391 	.word	0x08015391
 80153bc:	08015391 	.word	0x08015391
 80153c0:	08015415 	.word	0x08015415
 80153c4:	08015391 	.word	0x08015391
 80153c8:	08015391 	.word	0x08015391
 80153cc:	08015391 	.word	0x08015391
 80153d0:	08015391 	.word	0x08015391
 80153d4:	08015521 	.word	0x08015521
 80153d8:	08015445 	.word	0x08015445
 80153dc:	08015503 	.word	0x08015503
 80153e0:	08015391 	.word	0x08015391
 80153e4:	08015391 	.word	0x08015391
 80153e8:	08015543 	.word	0x08015543
 80153ec:	08015391 	.word	0x08015391
 80153f0:	08015445 	.word	0x08015445
 80153f4:	08015391 	.word	0x08015391
 80153f8:	08015391 	.word	0x08015391
 80153fc:	0801550b 	.word	0x0801550b
 8015400:	682b      	ldr	r3, [r5, #0]
 8015402:	1d1a      	adds	r2, r3, #4
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	602a      	str	r2, [r5, #0]
 8015408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801540c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015410:	2301      	movs	r3, #1
 8015412:	e0a3      	b.n	801555c <_printf_i+0x1f4>
 8015414:	6820      	ldr	r0, [r4, #0]
 8015416:	6829      	ldr	r1, [r5, #0]
 8015418:	0606      	lsls	r6, r0, #24
 801541a:	f101 0304 	add.w	r3, r1, #4
 801541e:	d50a      	bpl.n	8015436 <_printf_i+0xce>
 8015420:	680e      	ldr	r6, [r1, #0]
 8015422:	602b      	str	r3, [r5, #0]
 8015424:	2e00      	cmp	r6, #0
 8015426:	da03      	bge.n	8015430 <_printf_i+0xc8>
 8015428:	232d      	movs	r3, #45	; 0x2d
 801542a:	4276      	negs	r6, r6
 801542c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015430:	485e      	ldr	r0, [pc, #376]	; (80155ac <_printf_i+0x244>)
 8015432:	230a      	movs	r3, #10
 8015434:	e019      	b.n	801546a <_printf_i+0x102>
 8015436:	680e      	ldr	r6, [r1, #0]
 8015438:	f010 0f40 	tst.w	r0, #64	; 0x40
 801543c:	602b      	str	r3, [r5, #0]
 801543e:	bf18      	it	ne
 8015440:	b236      	sxthne	r6, r6
 8015442:	e7ef      	b.n	8015424 <_printf_i+0xbc>
 8015444:	682b      	ldr	r3, [r5, #0]
 8015446:	6820      	ldr	r0, [r4, #0]
 8015448:	1d19      	adds	r1, r3, #4
 801544a:	6029      	str	r1, [r5, #0]
 801544c:	0601      	lsls	r1, r0, #24
 801544e:	d501      	bpl.n	8015454 <_printf_i+0xec>
 8015450:	681e      	ldr	r6, [r3, #0]
 8015452:	e002      	b.n	801545a <_printf_i+0xf2>
 8015454:	0646      	lsls	r6, r0, #25
 8015456:	d5fb      	bpl.n	8015450 <_printf_i+0xe8>
 8015458:	881e      	ldrh	r6, [r3, #0]
 801545a:	2f6f      	cmp	r7, #111	; 0x6f
 801545c:	4853      	ldr	r0, [pc, #332]	; (80155ac <_printf_i+0x244>)
 801545e:	bf0c      	ite	eq
 8015460:	2308      	moveq	r3, #8
 8015462:	230a      	movne	r3, #10
 8015464:	2100      	movs	r1, #0
 8015466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801546a:	6865      	ldr	r5, [r4, #4]
 801546c:	2d00      	cmp	r5, #0
 801546e:	60a5      	str	r5, [r4, #8]
 8015470:	bfa2      	ittt	ge
 8015472:	6821      	ldrge	r1, [r4, #0]
 8015474:	f021 0104 	bicge.w	r1, r1, #4
 8015478:	6021      	strge	r1, [r4, #0]
 801547a:	b90e      	cbnz	r6, 8015480 <_printf_i+0x118>
 801547c:	2d00      	cmp	r5, #0
 801547e:	d04d      	beq.n	801551c <_printf_i+0x1b4>
 8015480:	4615      	mov	r5, r2
 8015482:	fbb6 f1f3 	udiv	r1, r6, r3
 8015486:	fb03 6711 	mls	r7, r3, r1, r6
 801548a:	5dc7      	ldrb	r7, [r0, r7]
 801548c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015490:	4637      	mov	r7, r6
 8015492:	460e      	mov	r6, r1
 8015494:	42bb      	cmp	r3, r7
 8015496:	d9f4      	bls.n	8015482 <_printf_i+0x11a>
 8015498:	2b08      	cmp	r3, #8
 801549a:	d10b      	bne.n	80154b4 <_printf_i+0x14c>
 801549c:	6823      	ldr	r3, [r4, #0]
 801549e:	07de      	lsls	r6, r3, #31
 80154a0:	d508      	bpl.n	80154b4 <_printf_i+0x14c>
 80154a2:	6923      	ldr	r3, [r4, #16]
 80154a4:	6861      	ldr	r1, [r4, #4]
 80154a6:	4299      	cmp	r1, r3
 80154a8:	bfde      	ittt	le
 80154aa:	2330      	movle	r3, #48	; 0x30
 80154ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80154b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80154b4:	1b52      	subs	r2, r2, r5
 80154b6:	6122      	str	r2, [r4, #16]
 80154b8:	464b      	mov	r3, r9
 80154ba:	aa03      	add	r2, sp, #12
 80154bc:	4621      	mov	r1, r4
 80154be:	4640      	mov	r0, r8
 80154c0:	f8cd a000 	str.w	sl, [sp]
 80154c4:	f7ff fee0 	bl	8015288 <_printf_common>
 80154c8:	3001      	adds	r0, #1
 80154ca:	d14c      	bne.n	8015566 <_printf_i+0x1fe>
 80154cc:	f04f 30ff 	mov.w	r0, #4294967295
 80154d0:	b004      	add	sp, #16
 80154d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154d6:	4835      	ldr	r0, [pc, #212]	; (80155ac <_printf_i+0x244>)
 80154d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80154dc:	6829      	ldr	r1, [r5, #0]
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80154e4:	6029      	str	r1, [r5, #0]
 80154e6:	061d      	lsls	r5, r3, #24
 80154e8:	d514      	bpl.n	8015514 <_printf_i+0x1ac>
 80154ea:	07df      	lsls	r7, r3, #31
 80154ec:	bf44      	itt	mi
 80154ee:	f043 0320 	orrmi.w	r3, r3, #32
 80154f2:	6023      	strmi	r3, [r4, #0]
 80154f4:	b91e      	cbnz	r6, 80154fe <_printf_i+0x196>
 80154f6:	6823      	ldr	r3, [r4, #0]
 80154f8:	f023 0320 	bic.w	r3, r3, #32
 80154fc:	6023      	str	r3, [r4, #0]
 80154fe:	2310      	movs	r3, #16
 8015500:	e7b0      	b.n	8015464 <_printf_i+0xfc>
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	f043 0320 	orr.w	r3, r3, #32
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	2378      	movs	r3, #120	; 0x78
 801550c:	4828      	ldr	r0, [pc, #160]	; (80155b0 <_printf_i+0x248>)
 801550e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015512:	e7e3      	b.n	80154dc <_printf_i+0x174>
 8015514:	0659      	lsls	r1, r3, #25
 8015516:	bf48      	it	mi
 8015518:	b2b6      	uxthmi	r6, r6
 801551a:	e7e6      	b.n	80154ea <_printf_i+0x182>
 801551c:	4615      	mov	r5, r2
 801551e:	e7bb      	b.n	8015498 <_printf_i+0x130>
 8015520:	682b      	ldr	r3, [r5, #0]
 8015522:	6826      	ldr	r6, [r4, #0]
 8015524:	1d18      	adds	r0, r3, #4
 8015526:	6961      	ldr	r1, [r4, #20]
 8015528:	6028      	str	r0, [r5, #0]
 801552a:	0635      	lsls	r5, r6, #24
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	d501      	bpl.n	8015534 <_printf_i+0x1cc>
 8015530:	6019      	str	r1, [r3, #0]
 8015532:	e002      	b.n	801553a <_printf_i+0x1d2>
 8015534:	0670      	lsls	r0, r6, #25
 8015536:	d5fb      	bpl.n	8015530 <_printf_i+0x1c8>
 8015538:	8019      	strh	r1, [r3, #0]
 801553a:	2300      	movs	r3, #0
 801553c:	4615      	mov	r5, r2
 801553e:	6123      	str	r3, [r4, #16]
 8015540:	e7ba      	b.n	80154b8 <_printf_i+0x150>
 8015542:	682b      	ldr	r3, [r5, #0]
 8015544:	2100      	movs	r1, #0
 8015546:	1d1a      	adds	r2, r3, #4
 8015548:	602a      	str	r2, [r5, #0]
 801554a:	681d      	ldr	r5, [r3, #0]
 801554c:	6862      	ldr	r2, [r4, #4]
 801554e:	4628      	mov	r0, r5
 8015550:	f000 f830 	bl	80155b4 <memchr>
 8015554:	b108      	cbz	r0, 801555a <_printf_i+0x1f2>
 8015556:	1b40      	subs	r0, r0, r5
 8015558:	6060      	str	r0, [r4, #4]
 801555a:	6863      	ldr	r3, [r4, #4]
 801555c:	6123      	str	r3, [r4, #16]
 801555e:	2300      	movs	r3, #0
 8015560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015564:	e7a8      	b.n	80154b8 <_printf_i+0x150>
 8015566:	6923      	ldr	r3, [r4, #16]
 8015568:	462a      	mov	r2, r5
 801556a:	4649      	mov	r1, r9
 801556c:	4640      	mov	r0, r8
 801556e:	47d0      	blx	sl
 8015570:	3001      	adds	r0, #1
 8015572:	d0ab      	beq.n	80154cc <_printf_i+0x164>
 8015574:	6823      	ldr	r3, [r4, #0]
 8015576:	079b      	lsls	r3, r3, #30
 8015578:	d413      	bmi.n	80155a2 <_printf_i+0x23a>
 801557a:	68e0      	ldr	r0, [r4, #12]
 801557c:	9b03      	ldr	r3, [sp, #12]
 801557e:	4298      	cmp	r0, r3
 8015580:	bfb8      	it	lt
 8015582:	4618      	movlt	r0, r3
 8015584:	e7a4      	b.n	80154d0 <_printf_i+0x168>
 8015586:	2301      	movs	r3, #1
 8015588:	4632      	mov	r2, r6
 801558a:	4649      	mov	r1, r9
 801558c:	4640      	mov	r0, r8
 801558e:	47d0      	blx	sl
 8015590:	3001      	adds	r0, #1
 8015592:	d09b      	beq.n	80154cc <_printf_i+0x164>
 8015594:	3501      	adds	r5, #1
 8015596:	68e3      	ldr	r3, [r4, #12]
 8015598:	9903      	ldr	r1, [sp, #12]
 801559a:	1a5b      	subs	r3, r3, r1
 801559c:	42ab      	cmp	r3, r5
 801559e:	dcf2      	bgt.n	8015586 <_printf_i+0x21e>
 80155a0:	e7eb      	b.n	801557a <_printf_i+0x212>
 80155a2:	2500      	movs	r5, #0
 80155a4:	f104 0619 	add.w	r6, r4, #25
 80155a8:	e7f5      	b.n	8015596 <_printf_i+0x22e>
 80155aa:	bf00      	nop
 80155ac:	08015d62 	.word	0x08015d62
 80155b0:	08015d73 	.word	0x08015d73

080155b4 <memchr>:
 80155b4:	b2c9      	uxtb	r1, r1
 80155b6:	4402      	add	r2, r0
 80155b8:	b510      	push	{r4, lr}
 80155ba:	4290      	cmp	r0, r2
 80155bc:	4603      	mov	r3, r0
 80155be:	d101      	bne.n	80155c4 <memchr+0x10>
 80155c0:	2300      	movs	r3, #0
 80155c2:	e003      	b.n	80155cc <memchr+0x18>
 80155c4:	781c      	ldrb	r4, [r3, #0]
 80155c6:	3001      	adds	r0, #1
 80155c8:	428c      	cmp	r4, r1
 80155ca:	d1f6      	bne.n	80155ba <memchr+0x6>
 80155cc:	4618      	mov	r0, r3
 80155ce:	bd10      	pop	{r4, pc}

080155d0 <memcpy>:
 80155d0:	440a      	add	r2, r1
 80155d2:	1e43      	subs	r3, r0, #1
 80155d4:	4291      	cmp	r1, r2
 80155d6:	d100      	bne.n	80155da <memcpy+0xa>
 80155d8:	4770      	bx	lr
 80155da:	b510      	push	{r4, lr}
 80155dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155e0:	4291      	cmp	r1, r2
 80155e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155e6:	d1f9      	bne.n	80155dc <memcpy+0xc>
 80155e8:	bd10      	pop	{r4, pc}

080155ea <memmove>:
 80155ea:	4288      	cmp	r0, r1
 80155ec:	b510      	push	{r4, lr}
 80155ee:	eb01 0402 	add.w	r4, r1, r2
 80155f2:	d902      	bls.n	80155fa <memmove+0x10>
 80155f4:	4284      	cmp	r4, r0
 80155f6:	4623      	mov	r3, r4
 80155f8:	d807      	bhi.n	801560a <memmove+0x20>
 80155fa:	1e43      	subs	r3, r0, #1
 80155fc:	42a1      	cmp	r1, r4
 80155fe:	d008      	beq.n	8015612 <memmove+0x28>
 8015600:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015604:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015608:	e7f8      	b.n	80155fc <memmove+0x12>
 801560a:	4402      	add	r2, r0
 801560c:	4601      	mov	r1, r0
 801560e:	428a      	cmp	r2, r1
 8015610:	d100      	bne.n	8015614 <memmove+0x2a>
 8015612:	bd10      	pop	{r4, pc}
 8015614:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015618:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801561c:	e7f7      	b.n	801560e <memmove+0x24>
	...

08015620 <_free_r>:
 8015620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015622:	2900      	cmp	r1, #0
 8015624:	d043      	beq.n	80156ae <_free_r+0x8e>
 8015626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801562a:	1f0c      	subs	r4, r1, #4
 801562c:	9001      	str	r0, [sp, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	bfb8      	it	lt
 8015632:	18e4      	addlt	r4, r4, r3
 8015634:	f000 f914 	bl	8015860 <__malloc_lock>
 8015638:	4a1e      	ldr	r2, [pc, #120]	; (80156b4 <_free_r+0x94>)
 801563a:	9801      	ldr	r0, [sp, #4]
 801563c:	6813      	ldr	r3, [r2, #0]
 801563e:	b933      	cbnz	r3, 801564e <_free_r+0x2e>
 8015640:	6063      	str	r3, [r4, #4]
 8015642:	6014      	str	r4, [r2, #0]
 8015644:	b003      	add	sp, #12
 8015646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801564a:	f000 b90f 	b.w	801586c <__malloc_unlock>
 801564e:	42a3      	cmp	r3, r4
 8015650:	d908      	bls.n	8015664 <_free_r+0x44>
 8015652:	6825      	ldr	r5, [r4, #0]
 8015654:	1961      	adds	r1, r4, r5
 8015656:	428b      	cmp	r3, r1
 8015658:	bf01      	itttt	eq
 801565a:	6819      	ldreq	r1, [r3, #0]
 801565c:	685b      	ldreq	r3, [r3, #4]
 801565e:	1949      	addeq	r1, r1, r5
 8015660:	6021      	streq	r1, [r4, #0]
 8015662:	e7ed      	b.n	8015640 <_free_r+0x20>
 8015664:	461a      	mov	r2, r3
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	b10b      	cbz	r3, 801566e <_free_r+0x4e>
 801566a:	42a3      	cmp	r3, r4
 801566c:	d9fa      	bls.n	8015664 <_free_r+0x44>
 801566e:	6811      	ldr	r1, [r2, #0]
 8015670:	1855      	adds	r5, r2, r1
 8015672:	42a5      	cmp	r5, r4
 8015674:	d10b      	bne.n	801568e <_free_r+0x6e>
 8015676:	6824      	ldr	r4, [r4, #0]
 8015678:	4421      	add	r1, r4
 801567a:	1854      	adds	r4, r2, r1
 801567c:	6011      	str	r1, [r2, #0]
 801567e:	42a3      	cmp	r3, r4
 8015680:	d1e0      	bne.n	8015644 <_free_r+0x24>
 8015682:	681c      	ldr	r4, [r3, #0]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	4421      	add	r1, r4
 8015688:	6053      	str	r3, [r2, #4]
 801568a:	6011      	str	r1, [r2, #0]
 801568c:	e7da      	b.n	8015644 <_free_r+0x24>
 801568e:	d902      	bls.n	8015696 <_free_r+0x76>
 8015690:	230c      	movs	r3, #12
 8015692:	6003      	str	r3, [r0, #0]
 8015694:	e7d6      	b.n	8015644 <_free_r+0x24>
 8015696:	6825      	ldr	r5, [r4, #0]
 8015698:	1961      	adds	r1, r4, r5
 801569a:	428b      	cmp	r3, r1
 801569c:	bf02      	ittt	eq
 801569e:	6819      	ldreq	r1, [r3, #0]
 80156a0:	685b      	ldreq	r3, [r3, #4]
 80156a2:	1949      	addeq	r1, r1, r5
 80156a4:	6063      	str	r3, [r4, #4]
 80156a6:	bf08      	it	eq
 80156a8:	6021      	streq	r1, [r4, #0]
 80156aa:	6054      	str	r4, [r2, #4]
 80156ac:	e7ca      	b.n	8015644 <_free_r+0x24>
 80156ae:	b003      	add	sp, #12
 80156b0:	bd30      	pop	{r4, r5, pc}
 80156b2:	bf00      	nop
 80156b4:	20001e54 	.word	0x20001e54

080156b8 <sbrk_aligned>:
 80156b8:	b570      	push	{r4, r5, r6, lr}
 80156ba:	4e0e      	ldr	r6, [pc, #56]	; (80156f4 <sbrk_aligned+0x3c>)
 80156bc:	460c      	mov	r4, r1
 80156be:	4605      	mov	r5, r0
 80156c0:	6831      	ldr	r1, [r6, #0]
 80156c2:	b911      	cbnz	r1, 80156ca <sbrk_aligned+0x12>
 80156c4:	f000 f8bc 	bl	8015840 <_sbrk_r>
 80156c8:	6030      	str	r0, [r6, #0]
 80156ca:	4621      	mov	r1, r4
 80156cc:	4628      	mov	r0, r5
 80156ce:	f000 f8b7 	bl	8015840 <_sbrk_r>
 80156d2:	1c43      	adds	r3, r0, #1
 80156d4:	d00a      	beq.n	80156ec <sbrk_aligned+0x34>
 80156d6:	1cc4      	adds	r4, r0, #3
 80156d8:	f024 0403 	bic.w	r4, r4, #3
 80156dc:	42a0      	cmp	r0, r4
 80156de:	d007      	beq.n	80156f0 <sbrk_aligned+0x38>
 80156e0:	1a21      	subs	r1, r4, r0
 80156e2:	4628      	mov	r0, r5
 80156e4:	f000 f8ac 	bl	8015840 <_sbrk_r>
 80156e8:	3001      	adds	r0, #1
 80156ea:	d101      	bne.n	80156f0 <sbrk_aligned+0x38>
 80156ec:	f04f 34ff 	mov.w	r4, #4294967295
 80156f0:	4620      	mov	r0, r4
 80156f2:	bd70      	pop	{r4, r5, r6, pc}
 80156f4:	20001e58 	.word	0x20001e58

080156f8 <_malloc_r>:
 80156f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fc:	1ccd      	adds	r5, r1, #3
 80156fe:	4607      	mov	r7, r0
 8015700:	f025 0503 	bic.w	r5, r5, #3
 8015704:	3508      	adds	r5, #8
 8015706:	2d0c      	cmp	r5, #12
 8015708:	bf38      	it	cc
 801570a:	250c      	movcc	r5, #12
 801570c:	2d00      	cmp	r5, #0
 801570e:	db01      	blt.n	8015714 <_malloc_r+0x1c>
 8015710:	42a9      	cmp	r1, r5
 8015712:	d905      	bls.n	8015720 <_malloc_r+0x28>
 8015714:	230c      	movs	r3, #12
 8015716:	2600      	movs	r6, #0
 8015718:	603b      	str	r3, [r7, #0]
 801571a:	4630      	mov	r0, r6
 801571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015720:	4e2e      	ldr	r6, [pc, #184]	; (80157dc <_malloc_r+0xe4>)
 8015722:	f000 f89d 	bl	8015860 <__malloc_lock>
 8015726:	6833      	ldr	r3, [r6, #0]
 8015728:	461c      	mov	r4, r3
 801572a:	bb34      	cbnz	r4, 801577a <_malloc_r+0x82>
 801572c:	4629      	mov	r1, r5
 801572e:	4638      	mov	r0, r7
 8015730:	f7ff ffc2 	bl	80156b8 <sbrk_aligned>
 8015734:	1c43      	adds	r3, r0, #1
 8015736:	4604      	mov	r4, r0
 8015738:	d14d      	bne.n	80157d6 <_malloc_r+0xde>
 801573a:	6834      	ldr	r4, [r6, #0]
 801573c:	4626      	mov	r6, r4
 801573e:	2e00      	cmp	r6, #0
 8015740:	d140      	bne.n	80157c4 <_malloc_r+0xcc>
 8015742:	6823      	ldr	r3, [r4, #0]
 8015744:	4631      	mov	r1, r6
 8015746:	4638      	mov	r0, r7
 8015748:	eb04 0803 	add.w	r8, r4, r3
 801574c:	f000 f878 	bl	8015840 <_sbrk_r>
 8015750:	4580      	cmp	r8, r0
 8015752:	d13a      	bne.n	80157ca <_malloc_r+0xd2>
 8015754:	6821      	ldr	r1, [r4, #0]
 8015756:	3503      	adds	r5, #3
 8015758:	4638      	mov	r0, r7
 801575a:	1a6d      	subs	r5, r5, r1
 801575c:	f025 0503 	bic.w	r5, r5, #3
 8015760:	3508      	adds	r5, #8
 8015762:	2d0c      	cmp	r5, #12
 8015764:	bf38      	it	cc
 8015766:	250c      	movcc	r5, #12
 8015768:	4629      	mov	r1, r5
 801576a:	f7ff ffa5 	bl	80156b8 <sbrk_aligned>
 801576e:	3001      	adds	r0, #1
 8015770:	d02b      	beq.n	80157ca <_malloc_r+0xd2>
 8015772:	6823      	ldr	r3, [r4, #0]
 8015774:	442b      	add	r3, r5
 8015776:	6023      	str	r3, [r4, #0]
 8015778:	e00e      	b.n	8015798 <_malloc_r+0xa0>
 801577a:	6822      	ldr	r2, [r4, #0]
 801577c:	1b52      	subs	r2, r2, r5
 801577e:	d41e      	bmi.n	80157be <_malloc_r+0xc6>
 8015780:	2a0b      	cmp	r2, #11
 8015782:	d916      	bls.n	80157b2 <_malloc_r+0xba>
 8015784:	1961      	adds	r1, r4, r5
 8015786:	42a3      	cmp	r3, r4
 8015788:	6025      	str	r5, [r4, #0]
 801578a:	bf18      	it	ne
 801578c:	6059      	strne	r1, [r3, #4]
 801578e:	6863      	ldr	r3, [r4, #4]
 8015790:	bf08      	it	eq
 8015792:	6031      	streq	r1, [r6, #0]
 8015794:	5162      	str	r2, [r4, r5]
 8015796:	604b      	str	r3, [r1, #4]
 8015798:	f104 060b 	add.w	r6, r4, #11
 801579c:	4638      	mov	r0, r7
 801579e:	f000 f865 	bl	801586c <__malloc_unlock>
 80157a2:	1d23      	adds	r3, r4, #4
 80157a4:	f026 0607 	bic.w	r6, r6, #7
 80157a8:	1af2      	subs	r2, r6, r3
 80157aa:	d0b6      	beq.n	801571a <_malloc_r+0x22>
 80157ac:	1b9b      	subs	r3, r3, r6
 80157ae:	50a3      	str	r3, [r4, r2]
 80157b0:	e7b3      	b.n	801571a <_malloc_r+0x22>
 80157b2:	6862      	ldr	r2, [r4, #4]
 80157b4:	42a3      	cmp	r3, r4
 80157b6:	bf0c      	ite	eq
 80157b8:	6032      	streq	r2, [r6, #0]
 80157ba:	605a      	strne	r2, [r3, #4]
 80157bc:	e7ec      	b.n	8015798 <_malloc_r+0xa0>
 80157be:	4623      	mov	r3, r4
 80157c0:	6864      	ldr	r4, [r4, #4]
 80157c2:	e7b2      	b.n	801572a <_malloc_r+0x32>
 80157c4:	4634      	mov	r4, r6
 80157c6:	6876      	ldr	r6, [r6, #4]
 80157c8:	e7b9      	b.n	801573e <_malloc_r+0x46>
 80157ca:	230c      	movs	r3, #12
 80157cc:	4638      	mov	r0, r7
 80157ce:	603b      	str	r3, [r7, #0]
 80157d0:	f000 f84c 	bl	801586c <__malloc_unlock>
 80157d4:	e7a1      	b.n	801571a <_malloc_r+0x22>
 80157d6:	6025      	str	r5, [r4, #0]
 80157d8:	e7de      	b.n	8015798 <_malloc_r+0xa0>
 80157da:	bf00      	nop
 80157dc:	20001e54 	.word	0x20001e54

080157e0 <_realloc_r>:
 80157e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e4:	4680      	mov	r8, r0
 80157e6:	4614      	mov	r4, r2
 80157e8:	460e      	mov	r6, r1
 80157ea:	b921      	cbnz	r1, 80157f6 <_realloc_r+0x16>
 80157ec:	4611      	mov	r1, r2
 80157ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f2:	f7ff bf81 	b.w	80156f8 <_malloc_r>
 80157f6:	b92a      	cbnz	r2, 8015804 <_realloc_r+0x24>
 80157f8:	4625      	mov	r5, r4
 80157fa:	f7ff ff11 	bl	8015620 <_free_r>
 80157fe:	4628      	mov	r0, r5
 8015800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015804:	f000 f838 	bl	8015878 <_malloc_usable_size_r>
 8015808:	4284      	cmp	r4, r0
 801580a:	4607      	mov	r7, r0
 801580c:	d802      	bhi.n	8015814 <_realloc_r+0x34>
 801580e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015812:	d812      	bhi.n	801583a <_realloc_r+0x5a>
 8015814:	4621      	mov	r1, r4
 8015816:	4640      	mov	r0, r8
 8015818:	f7ff ff6e 	bl	80156f8 <_malloc_r>
 801581c:	4605      	mov	r5, r0
 801581e:	2800      	cmp	r0, #0
 8015820:	d0ed      	beq.n	80157fe <_realloc_r+0x1e>
 8015822:	42bc      	cmp	r4, r7
 8015824:	4622      	mov	r2, r4
 8015826:	4631      	mov	r1, r6
 8015828:	bf28      	it	cs
 801582a:	463a      	movcs	r2, r7
 801582c:	f7ff fed0 	bl	80155d0 <memcpy>
 8015830:	4631      	mov	r1, r6
 8015832:	4640      	mov	r0, r8
 8015834:	f7ff fef4 	bl	8015620 <_free_r>
 8015838:	e7e1      	b.n	80157fe <_realloc_r+0x1e>
 801583a:	4635      	mov	r5, r6
 801583c:	e7df      	b.n	80157fe <_realloc_r+0x1e>
	...

08015840 <_sbrk_r>:
 8015840:	b538      	push	{r3, r4, r5, lr}
 8015842:	2300      	movs	r3, #0
 8015844:	4d05      	ldr	r5, [pc, #20]	; (801585c <_sbrk_r+0x1c>)
 8015846:	4604      	mov	r4, r0
 8015848:	4608      	mov	r0, r1
 801584a:	602b      	str	r3, [r5, #0]
 801584c:	f7eb ffde 	bl	800180c <_sbrk>
 8015850:	1c43      	adds	r3, r0, #1
 8015852:	d102      	bne.n	801585a <_sbrk_r+0x1a>
 8015854:	682b      	ldr	r3, [r5, #0]
 8015856:	b103      	cbz	r3, 801585a <_sbrk_r+0x1a>
 8015858:	6023      	str	r3, [r4, #0]
 801585a:	bd38      	pop	{r3, r4, r5, pc}
 801585c:	20001e5c 	.word	0x20001e5c

08015860 <__malloc_lock>:
 8015860:	4801      	ldr	r0, [pc, #4]	; (8015868 <__malloc_lock+0x8>)
 8015862:	f000 b811 	b.w	8015888 <__retarget_lock_acquire_recursive>
 8015866:	bf00      	nop
 8015868:	20001e60 	.word	0x20001e60

0801586c <__malloc_unlock>:
 801586c:	4801      	ldr	r0, [pc, #4]	; (8015874 <__malloc_unlock+0x8>)
 801586e:	f000 b80c 	b.w	801588a <__retarget_lock_release_recursive>
 8015872:	bf00      	nop
 8015874:	20001e60 	.word	0x20001e60

08015878 <_malloc_usable_size_r>:
 8015878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801587c:	1f18      	subs	r0, r3, #4
 801587e:	2b00      	cmp	r3, #0
 8015880:	bfbc      	itt	lt
 8015882:	580b      	ldrlt	r3, [r1, r0]
 8015884:	18c0      	addlt	r0, r0, r3
 8015886:	4770      	bx	lr

08015888 <__retarget_lock_acquire_recursive>:
 8015888:	4770      	bx	lr

0801588a <__retarget_lock_release_recursive>:
 801588a:	4770      	bx	lr

0801588c <_init>:
 801588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588e:	bf00      	nop
 8015890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015892:	bc08      	pop	{r3}
 8015894:	469e      	mov	lr, r3
 8015896:	4770      	bx	lr

08015898 <_fini>:
 8015898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801589a:	bf00      	nop
 801589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801589e:	bc08      	pop	{r3}
 80158a0:	469e      	mov	lr, r3
 80158a2:	4770      	bx	lr
