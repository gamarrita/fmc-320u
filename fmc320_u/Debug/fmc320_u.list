
fmc320_u.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156f0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08015928  08015928  00025928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015c54  08015c54  00025c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015c5c  08015c5c  00025c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015c60  08015c60  00025c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015c64  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cf9  200001b8  08015e1c  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001eb1  08015e1c  00031eb1  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004220b  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009075  00000000  00000000  000723f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002960  00000000  00000000  0007b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002478  00000000  00000000  0007ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040659  00000000  00000000  00080248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ef54  00000000  00000000  000c08a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178566  00000000  00000000  000ff7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00277d5b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a7ec  00000000  00000000  00277dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	08015910 	.word	0x08015910

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	08015910 	.word	0x08015910

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	200016d4 	.word	0x200016d4
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fc3a 	bl	800ec0c <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fc5e 	bl	800ec5c <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20001770 	.word	0x20001770
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	200016d8 	.word	0x200016d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	200016dc 	.word	0x200016dc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001cdc 	.word	0x20001cdc

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fc94 	bl	800dd90 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d fb73 	bl	800db58 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	2000177c 	.word	0x2000177c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001cdc 	.word	0x20001cdc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20001780 	.word	0x20001780
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	2000180c 	.word	0x2000180c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	20001810 	.word	0x20001810
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	20001808 	.word	0x20001808
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20001804 	.word	0x20001804
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20001770 	.word	0x20001770
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	200016d8 	.word	0x200016d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	200016dc 	.word	0x200016dc
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fe0b 	bl	800e428 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	08015928 	.word	0x08015928
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
    tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00e f8d8 	bl	800ea28 <_txe_thread_create>
    menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

    tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00e f8c2 	bl	800ea28 <_txe_thread_create>
    0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

    tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d ffe4 	bl	800e878 <_txe_semaphore_create>

    tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fe51 	bl	800e568 <_txe_queue_create>
#ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000acd 	.word	0x08000acd
 80008d8:	0801593c 	.word	0x0801593c
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000bf1 	.word	0x08000bf1
 80008e8:	08015948 	.word	0x08015948
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	08015958 	.word	0x08015958
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	0801596c 	.word	0x0801596c
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00b f810 	bl	800b92c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

    const int rtc_clk = 32768;
 8000918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091c:	617b      	str	r3, [r7, #20]
    const int rtc_prescaller = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	613b      	str	r3, [r7, #16]

#ifdef FM_THREADX_LOW_POWER
    uint32_t ticks_to_sleep;

    g_lptim1_start = LPTIM1->CNT;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <App_ThreadX_LowPower_Timer_Setup+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <App_ThreadX_LowPower_Timer_Setup+0x5c>)
 800092a:	801a      	strh	r2, [r3, #0]
    /*
     * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
     */
    ticks_to_sleep = (rtc_clk / rtc_prescaller) * count;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fb92 f3f3 	sdiv	r3, r2, r3
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <App_ThreadX_LowPower_Timer_Setup+0x60>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <App_ThreadX_LowPower_Timer_Setup+0x64>)
 8000952:	f008 ff75 	bl	8009840 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>
    RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
    {
        Error_Handler();
 800095c:	f000 fda6 	bl	80014ac <Error_Handler>
    }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	46004400 	.word	0x46004400
 800096c:	20000608 	.word	0x20000608
 8000970:	51eb851f 	.word	0x51eb851f
 8000974:	200014f8 	.word	0x200014f8

08000978 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <App_ThreadX_LowPower_Enter+0x18>)
 8000982:	f003 fe2d 	bl	80045e0 <HAL_GPIO_WritePin>

#ifdef FM_THREADX_LOW_POWER
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000986:	2001      	movs	r0, #1
 8000988:	f004 fafe 	bl	8004f88 <HAL_PWREx_EnterSTOP2Mode>
#endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	42020400 	.word	0x42020400

08000994 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	; 0x78
 8000998:	af00      	add	r7, sp, #0
    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
#ifdef FM_THREADX_LOW_POWER
    RCC_OscInitTypeDef RCC_OscInitStruct =
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f014 fa6e 	bl	8014e84 <memset>
    {
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f004 fa09 	bl	8004dd0 <HAL_PWREx_ControlVoltageScaling>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <App_ThreadX_LowPower_Exit+0x34>
    {
        Error_Handler();
 80009c4:	f000 fd72 	bl	80014ac <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 80009c8:	f004 f9f2 	bl	8004db0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009d4:	f023 0318 	bic.w	r3, r3, #24
 80009d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80009dc:	2314      	movs	r3, #20
 80009de:	61bb      	str	r3, [r7, #24]
    | RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009e0:	2381      	movs	r3, #129	; 0x81
 80009e2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80009ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fbe0 	bl	80051c0 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <App_ThreadX_LowPower_Exit+0x76>
    {
        Error_Handler();
 8000a06:	f000 fd51 	bl	80014ac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	603b      	str	r3, [r7, #0]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 faa6 	bl	8005f78 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <App_ThreadX_LowPower_Exit+0xa2>
    {
        Error_Handler();
 8000a32:	f000 fd3b 	bl	80014ac <Error_Handler>
    }
#endif

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <App_ThreadX_LowPower_Exit+0xb8>)
 8000a3c:	f003 fdd0 	bl	80045e0 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000a40:	bf00      	nop
 8000a42:	3778      	adds	r7, #120	; 0x78
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	46020c00 	.word	0x46020c00
 8000a4c:	42020400 	.word	0x42020400

08000a50 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
    static const int lptim_clk_div_presc = 2048;

#ifdef FM_THREADX_LOW_POWER
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <App_ThreadX_LowPower_Timer_Adjust+0x68>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a5e:	801a      	strh	r2, [r3, #0]
    cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <App_ThreadX_LowPower_Timer_Adjust+0x70>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	607b      	str	r3, [r7, #4]
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2264      	movs	r2, #100	; 0x64
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	607b      	str	r3, [r7, #4]
    cnt_ret += cnt_drift;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
    cnt_drift = cnt_ret % lptim_clk_div_presc;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a90:	fb01 f202 	mul.w	r2, r1, r2
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a9a:	801a      	strh	r2, [r3, #0]
    cnt_ret /= lptim_clk_div_presc;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000aa8:	607b      	str	r3, [r7, #4]
    return (cnt_ret);
 8000aaa:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	46004400 	.word	0x46004400
 8000abc:	2000060a 	.word	0x2000060a
 8000ac0:	20000608 	.word	0x20000608
 8000ac4:	200013c0 	.word	0x200013c0
 8000ac8:	080159e0 	.word	0x080159e0

08000acc <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    static int backlight_cd = 0;
    static int pulse_counter = 0;

    char msg[30];

    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <menu_task_entry+0xf8>)
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while (1)
    {
        HAL_LPTIM_Counter_Start(&hlptim4);
 8000adc:	483a      	ldr	r0, [pc, #232]	; (8000bc8 <menu_task_entry+0xfc>)
 8000ade:	f003 fef9 	bl	80048d4 <HAL_LPTIM_Counter_Start>
        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <menu_task_entry+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f107 030f 	add.w	r3, r7, #15
 8000aec:	4619      	mov	r1, r3
 8000aee:	4838      	ldr	r0, [pc, #224]	; (8000bd0 <menu_task_entry+0x104>)
 8000af0:	f00d fe08 	bl	800e704 <_txe_queue_receive>
 8000af4:	6338      	str	r0, [r7, #48]	; 0x30
        queue_stay);
        if (ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af8:	4a32      	ldr	r2, [pc, #200]	; (8000bc4 <menu_task_entry+0xf8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d053      	beq.n	8000ba6 <menu_task_entry+0xda>
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <menu_task_entry+0x108>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d04f      	beq.n	8000ba6 <menu_task_entry+0xda>
        {

            pulse_counter = HAL_LPTIM_ReadCounter(&hlptim4);
 8000b06:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <menu_task_entry+0xfc>)
 8000b08:	f003 ff41 	bl	800498e <HAL_LPTIM_ReadCounter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <menu_task_entry+0x10c>)
 8000b12:	601a      	str	r2, [r3, #0]
            fm_factory_modify_pulse_acm_ttl(pulse_counter);
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <menu_task_entry+0x10c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f00e fe99 	bl	800f850 <fm_factory_modify_pulse_acm_ttl>
            sprintf(msg, "pulsos en este segundo: %d\n", pulse_counter);
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <menu_task_entry+0x10c>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	492d      	ldr	r1, [pc, #180]	; (8000bdc <menu_task_entry+0x110>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f014 f9e7 	bl	8014efc <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), queue_stay);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fcc6 	bl	80004c4 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <menu_task_entry+0x100>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f107 0110 	add.w	r1, r7, #16
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <menu_task_entry+0x114>)
 8000b46:	f00a f82b 	bl	800aba0 <HAL_UART_Transmit>

            HAL_LPTIM_Counter_Stop(&hlptim4);
 8000b4a:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <menu_task_entry+0xfc>)
 8000b4c:	f003 fef6 	bl	800493c <HAL_LPTIM_Counter_Stop>

            if (event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d109      	bne.n	8000b6a <menu_task_entry+0x9e>
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <menu_task_entry+0x118>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	dd05      	ble.n	8000b6a <menu_task_entry+0x9e>
            {
                backlight_cd--;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <menu_task_entry+0x118>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <menu_task_entry+0x118>)
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e01d      	b.n	8000ba6 <menu_task_entry+0xda>
            }
            else if (event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10d      	bne.n	8000b8c <menu_task_entry+0xc0>
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <menu_task_entry+0x118>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dc09      	bgt.n	8000b8c <menu_task_entry+0xc0>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	481a      	ldr	r0, [pc, #104]	; (8000be8 <menu_task_entry+0x11c>)
 8000b80:	f003 fd2e 	bl	80045e0 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <menu_task_entry+0x118>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e00c      	b.n	8000ba6 <menu_task_entry+0xda>
            }
            else if (event_next != EVENT_LCD_REFRESH)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d009      	beq.n	8000ba6 <menu_task_entry+0xda>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <menu_task_entry+0x11c>)
 8000b9a:	f003 fd21 	bl	80045e0 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = backlight_countdown;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <menu_task_entry+0x120>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <menu_task_entry+0x118>)
 8000ba4:	6013      	str	r3, [r2, #0]
            }
        }

        if (ret_status == TX_SUCCESS)
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <menu_task_entry+0xec>
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(event_next);
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4798      	blx	r3
 8000bb4:	6378      	str	r0, [r7, #52]	; 0x34
 8000bb6:	e791      	b.n	8000adc <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(EVENT_LCD_REFRESH);
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	2001      	movs	r0, #1
 8000bbc:	4798      	blx	r3
 8000bbe:	6378      	str	r0, [r7, #52]	; 0x34
        HAL_LPTIM_Counter_Start(&hlptim4);
 8000bc0:	e78c      	b.n	8000adc <menu_task_entry+0x10>
 8000bc2:	bf00      	nop
 8000bc4:	080147b1 	.word	0x080147b1
 8000bc8:	200014a8 	.word	0x200014a8
 8000bcc:	080159e4 	.word	0x080159e4
 8000bd0:	20001388 	.word	0x20001388
 8000bd4:	080149b1 	.word	0x080149b1
 8000bd8:	200013c4 	.word	0x200013c4
 8000bdc:	08015978 	.word	0x08015978
 8000be0:	200015b8 	.word	0x200015b8
 8000be4:	200013c8 	.word	0x200013c8
 8000be8:	42020800 	.word	0x42020800
 8000bec:	080159e8 	.word	0x080159e8

08000bf0 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4819      	ldr	r0, [pc, #100]	; (8000c68 <debounce_task_entry+0x78>)
 8000c02:	f00d fecf 	bl	800e9a4 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00c fabf 	bl	800d18c <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c3c:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <debounce_task_entry+0x7c>)
 8000c48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4c:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000c4e:	2015      	movs	r0, #21
 8000c50:	f003 fad2 	bl	80041f8 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000c54:	2016      	movs	r0, #22
 8000c56:	f003 facf 	bl	80041f8 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000c5a:	2017      	movs	r0, #23
 8000c5c:	f003 facc 	bl	80041f8 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000c60:	2018      	movs	r0, #24
 8000c62:	f003 fac9 	bl	80041f8 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000c66:	e7c9      	b.n	8000bfc <debounce_task_entry+0xc>
 8000c68:	2000136c 	.word	0x2000136c
 8000c6c:	46022000 	.word	0x46022000

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c74:	f000 ff8e 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c78:	f000 f82e 	bl	8000cd8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000c7c:	f000 f884 	bl	8000d88 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f000 fb08 	bl	8001294 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c84:	f000 f8ac 	bl	8000de0 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000c88:	f000 f918 	bl	8000ebc <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000c8c:	f000 f92a 	bl	8000ee4 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000c90:	f000 f9b6 	bl	8001000 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c94:	f000 fa42 	bl	800111c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c98:	f000 fab0 	bl	80011fc <MX_USART1_UART_Init>
  MX_LPTIM4_Init();
 8000c9c:	f000 f96e 	bl	8000f7c <MX_LPTIM4_Init>
  /* USER CODE BEGIN 2 */

    fm_lcd_clear();
 8000ca0:	f00f f85f 	bl	800fd62 <fm_lcd_clear>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <main+0x5c>)
 8000cac:	f003 f85e 	bl	8003d6c <HAL_ADCEx_Calibration_Start>
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <main+0x60>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <main+0x60>)
 8000cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    HAL_LPTIM_Counter_Start(&hlptim1);
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <main+0x64>)
 8000cc2:	f003 fe07 	bl	80048d4 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000cc6:	f7ff fe1d 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000cca:	e7fe      	b.n	8000cca <main+0x5a>
 8000ccc:	200013cc 	.word	0x200013cc
 8000cd0:	46020c00 	.word	0x46020c00
 8000cd4:	20001458 	.word	0x20001458

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09e      	sub	sp, #120	; 0x78
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	2260      	movs	r2, #96	; 0x60
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f014 f8cc 	bl	8014e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f004 f867 	bl	8004dd0 <HAL_PWREx_ControlVoltageScaling>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d08:	f000 fbd0 	bl	80014ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d0c:	f004 f850 	bl	8004db0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <SystemClock_Config+0xac>)
 8000d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <SystemClock_Config+0xac>)
 8000d18:	f023 0318 	bic.w	r3, r3, #24
 8000d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d20:	2314      	movs	r3, #20
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d24:	2381      	movs	r3, #129	; 0x81
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fa3e 	bl	80051c0 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fbaf 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	231f      	movs	r3, #31
 8000d50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 f904 	bl	8005f78 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fb99 	bl	80014ac <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3778      	adds	r7, #120	; 0x78
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	46020c00 	.word	0x46020c00

08000d88 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000d8c:	f004 f928 	bl	8004fe0 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d90:	f004 f946 	bl	8005020 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * SRAM Power Down In Stop Mode Config
   */
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <SystemPower_Config+0x44>)
 8000d96:	f004 f953 	bl	8005040 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DCACHE1_FULL_STOP_RETENTION);
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <SystemPower_Config+0x48>)
 8000d9c:	f004 f950 	bl	8005040 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DMA2DRAM_FULL_STOP_RETENTION);
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <SystemPower_Config+0x4c>)
 8000da2:	f004 f94d 	bl	8005040 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA32RAM_FULL_STOP_RETENTION);
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <SystemPower_Config+0x50>)
 8000da8:	f004 f94a 	bl	8005040 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PERIPHRAM_FULL_STOP_RETENTION);
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <SystemPower_Config+0x54>)
 8000dae:	f004 f947 	bl	8005040 <HAL_PWREx_DisableRAMsContentStopRetention>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000db2:	2002      	movs	r0, #2
 8000db4:	f004 f898 	bl	8004ee8 <HAL_PWREx_ConfigSupply>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000dbe:	f000 fb75 	bl	80014ac <Error_Handler>
  }

  /*
   * SRAM4 Fast In Run Mode Config
   */
  HAL_PWREx_EnableSRAM4FastWakeUp();
 8000dc2:	f004 f9ed 	bl	80051a0 <HAL_PWREx_EnableSRAM4FastWakeUp>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	00080001 	.word	0x00080001
 8000dd0:	00200001 	.word	0x00200001
 8000dd4:	00400001 	.word	0x00400001
 8000dd8:	01000001 	.word	0x01000001
 8000ddc:	00800001 	.word	0x00800001

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2220      	movs	r2, #32
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f014 f849 	bl	8014e84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <MX_ADC1_Init+0xd4>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000dfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e6a:	f001 fa77 	bl	800235c <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 fb1a 	bl	80014ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_ADC1_Init+0xd8>)
 8000e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000e80:	2306      	movs	r3, #6
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_ADC1_Init+0xd0>)
 8000e98:	f001 fec6 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea2:	f000 fb03 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200013cc 	.word	0x200013cc
 8000eb4:	42028000 	.word	0x42028000
 8000eb8:	ce080000 	.word	0xce080000

08000ebc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f003 fbd7 	bl	8004674 <HAL_ICACHE_ConfigAssociativityMode>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ecc:	f000 faee 	bl	80014ac <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ed0:	f003 fbf0 	bl	80046b4 <HAL_ICACHE_Enable>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000eda:	f000 fae7 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_LPTIM1_Init+0x90>)
 8000eec:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f02:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_LPTIM1_Init+0x8c>)
 8000f2c:	f003 fbd2 	bl	80046d4 <HAL_LPTIM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000f36:	f000 fab9 	bl	80014ac <Error_Handler>
    /*
     * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
     * configured
     *
     */
    __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <MX_LPTIM1_Init+0x94>)
 8000f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20001458 	.word	0x20001458
 8000f74:	46004400 	.word	0x46004400
 8000f78:	46020c00 	.word	0x46020c00

08000f7c <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <MX_LPTIM4_Init+0x7c>)
 8000f84:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hlptim4.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hlptim4.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	615a      	str	r2, [r3, #20]
  hlptim4.Init.Period = 65535;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fac:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim4.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim4.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim4.Init.RepetitionCounter = 1;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_LPTIM4_Init+0x78>)
 8000fd0:	f003 fb80 	bl	80046d4 <HAL_LPTIM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_LPTIM4_Init+0x62>
  {
    Error_Handler();
 8000fda:	f000 fa67 	bl	80014ac <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM4_CLKAM_ENABLE();
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_LPTIM4_Init+0x80>)
 8000fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <MX_LPTIM4_Init+0x80>)
 8000fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE END LPTIM4_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200014a8 	.word	0x200014a8
 8000ff8:	46004c00 	.word	0x46004c00
 8000ffc:	46020c00 	.word	0x46020c00

08001000 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <MX_RTC_Init+0x114>)
 8001030:	4a39      	ldr	r2, [pc, #228]	; (8001118 <MX_RTC_Init+0x118>)
 8001032:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001034:	4b37      	ldr	r3, [pc, #220]	; (8001114 <MX_RTC_Init+0x114>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_RTC_Init+0x114>)
 800103c:	227f      	movs	r2, #127	; 0x7f
 800103e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_RTC_Init+0x114>)
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_RTC_Init+0x114>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_RTC_Init+0x114>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_RTC_Init+0x114>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_RTC_Init+0x114>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MX_RTC_Init+0x114>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_RTC_Init+0x114>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <MX_RTC_Init+0x114>)
 800106e:	f008 f89b 	bl	80091a8 <HAL_RTC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001078:	f000 fa18 	bl	80014ac <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <MX_RTC_Init+0x114>)
 8001094:	f008 fcbe 	bl	8009a14 <HAL_RTCEx_PrivilegeModeSet>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800109e:	f000 fa05 	bl	80014ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80010a2:	2311      	movs	r3, #17
 80010a4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <MX_RTC_Init+0x114>)
 80010c0:	f008 f8f4 	bl	80092ac <HAL_RTC_SetTime>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80010ca:	f000 f9ef 	bl	80014ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80010ce:	2303      	movs	r3, #3
 80010d0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 80010d2:	2305      	movs	r3, #5
 80010d4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 80010da:	2317      	movs	r3, #23
 80010dc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <MX_RTC_Init+0x114>)
 80010e6:	f008 f9ef 	bl	80094c8 <HAL_RTC_SetDate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80010f0:	f000 f9dc 	bl	80014ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80010f4:	2300      	movs	r3, #0
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_RTC_Init+0x114>)
 80010fe:	f008 fb9f 	bl	8009840 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8001108:	f000 f9d0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200014f8 	.word	0x200014f8
 8001118:	46007800 	.word	0x46007800

0800111c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <MX_SPI1_Init+0xdc>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800113c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001140:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001144:	2207      	movs	r2, #7
 8001146:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001156:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800115a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800115e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001162:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001178:	2207      	movs	r2, #7
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_SPI1_Init+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_SPI1_Init+0xd8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011bc:	f008 fc58 	bl	8009a70 <HAL_SPI_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80011c6:	f000 f971 	bl	80014ac <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80011ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_SPI1_Init+0xd8>)
 80011de:	f009 f864 	bl	800a2aa <HAL_SPIEx_SetConfigAutonomousMode>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80011e8:	f000 f960 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20001528 	.word	0x20001528
 80011f8:	40013000 	.word	0x40013000

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001202:	4a23      	ldr	r2, [pc, #140]	; (8001290 <MX_USART1_UART_Init+0x94>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART1_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001246:	f009 fc5b 	bl	800ab00 <HAL_UART_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001250:	f000 f92c 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_USART1_UART_Init+0x90>)
 8001258:	f00a f934 	bl	800b4c4 <HAL_UARTEx_SetTxFifoThreshold>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001262:	f000 f923 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x90>)
 800126a:	f00a f969 	bl	800b540 <HAL_UARTEx_SetRxFifoThreshold>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 f91a 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_USART1_UART_Init+0x90>)
 800127a:	f00a f8ea 	bl	800b452 <HAL_UARTEx_DisableFifoMode>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 f912 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200015b8 	.word	0x200015b8
 8001290:	40013800 	.word	0x40013800

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b0:	4a69      	ldr	r2, [pc, #420]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b63      	ldr	r3, [pc, #396]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ce:	4a62      	ldr	r2, [pc, #392]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ec:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <MX_GPIO_Init+0x1c4>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b54      	ldr	r3, [pc, #336]	; (8001458 <MX_GPIO_Init+0x1c4>)
 8001306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130a:	4a53      	ldr	r2, [pc, #332]	; (8001458 <MX_GPIO_Init+0x1c4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <MX_GPIO_Init+0x1c4>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <MX_GPIO_Init+0x1c4>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <MX_GPIO_Init+0x1c4>)
 800132a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <MX_GPIO_Init+0x1c4>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2150      	movs	r1, #80	; 0x50
 8001344:	4845      	ldr	r0, [pc, #276]	; (800145c <MX_GPIO_Init+0x1c8>)
 8001346:	f003 f94b 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4844      	ldr	r0, [pc, #272]	; (8001460 <MX_GPIO_Init+0x1cc>)
 8001350:	f003 f946 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135a:	4842      	ldr	r0, [pc, #264]	; (8001464 <MX_GPIO_Init+0x1d0>)
 800135c:	f003 f940 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	4840      	ldr	r0, [pc, #256]	; (8001468 <MX_GPIO_Init+0x1d4>)
 8001366:	f003 f93b 	bl	80045e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 800136a:	2350      	movs	r3, #80	; 0x50
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4836      	ldr	r0, [pc, #216]	; (800145c <MX_GPIO_Init+0x1c8>)
 8001382:	f002 ff55 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <MX_GPIO_Init+0x1d8>)
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4833      	ldr	r0, [pc, #204]	; (8001468 <MX_GPIO_Init+0x1d4>)
 800139c:	f002 ff48 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 80013a0:	2304      	movs	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	482a      	ldr	r0, [pc, #168]	; (8001460 <MX_GPIO_Init+0x1cc>)
 80013b8:	f002 ff3a 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 80013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_GPIO_Init+0x1d0>)
 80013d6:	f002 ff2b 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_GPIO_Init+0x1d8>)
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	481d      	ldr	r0, [pc, #116]	; (8001464 <MX_GPIO_Init+0x1d0>)
 80013f0:	f002 ff1e 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4817      	ldr	r0, [pc, #92]	; (8001468 <MX_GPIO_Init+0x1d4>)
 800140c:	f002 ff10 	bl	8004230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	2015      	movs	r0, #21
 8001416:	f002 fed5 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 800141a:	2015      	movs	r0, #21
 800141c:	f002 feec 	bl	80041f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2105      	movs	r1, #5
 8001424:	2016      	movs	r0, #22
 8001426:	f002 fecd 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 800142a:	2016      	movs	r0, #22
 800142c:	f002 fee4 	bl	80041f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2105      	movs	r1, #5
 8001434:	2017      	movs	r0, #23
 8001436:	f002 fec5 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 800143a:	2017      	movs	r0, #23
 800143c:	f002 fedc 	bl	80041f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2105      	movs	r1, #5
 8001444:	2018      	movs	r0, #24
 8001446:	f002 febd 	bl	80041c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800144a:	2018      	movs	r0, #24
 800144c:	f002 fed4 	bl	80041f8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	46020c00 	.word	0x46020c00
 800145c:	42020000 	.word	0x42020000
 8001460:	42021800 	.word	0x42021800
 8001464:	42020800 	.word	0x42020800
 8001468:	42020400 	.word	0x42020400
 800146c:	10110000 	.word	0x10110000

08001470 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f008 fa59 	bl	8009930 <HAL_RTCEx_DeactivateWakeUpTimer>

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
     */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149a:	f000 fba9 	bl	8001bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40001000 	.word	0x40001000

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x30>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x30>)
 80014d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 80014dc:	f003 fd90 	bl	8005000 <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	46020c00 	.word	0x46020c00

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0b6      	sub	sp, #216	; 0xd8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	22c8      	movs	r2, #200	; 0xc8
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f013 fcc1 	bl	8014e84 <memset>
  if(hadc->Instance==ADC1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <HAL_ADC_MspInit+0x70>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d122      	bne.n	8001552 <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800150c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f005 f935 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8001530:	f7ff ffbc 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_ADC_MspInit+0x74>)
 8001536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_ADC_MspInit+0x74>)
 800153c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001540:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_ADC_MspInit+0x74>)
 8001546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	37d8      	adds	r7, #216	; 0xd8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	42028000 	.word	0x42028000
 8001560:	46020c00 	.word	0x46020c00

08001564 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0be      	sub	sp, #248	; 0xf8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	22c8      	movs	r2, #200	; 0xc8
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f013 fc7d 	bl	8014e84 <memset>
  if(hlptim->Instance==LPTIM1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_LPTIM_MspInit+0x12c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d12b      	bne.n	80015ec <HAL_LPTIM_MspInit+0x88>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80015a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 f8f1 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_LPTIM_MspInit+0x58>
    {
      Error_Handler();
 80015b8:	f7ff ff78 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 80015be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015c2:	4a34      	ldr	r2, [pc, #208]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 80015c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 80015ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2043      	movs	r0, #67	; 0x43
 80015e0:	f002 fdf0 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80015e4:	2043      	movs	r0, #67	; 0x43
 80015e6:	f002 fe07 	bl	80041f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM4_MspInit 1 */

  /* USER CODE END LPTIM4_MspInit 1 */
  }

}
 80015ea:	e04c      	b.n	8001686 <HAL_LPTIM_MspInit+0x122>
  else if(hlptim->Instance==LPTIM4)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a29      	ldr	r2, [pc, #164]	; (8001698 <HAL_LPTIM_MspInit+0x134>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d147      	bne.n	8001686 <HAL_LPTIM_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM34;
 80015f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim34ClockSelection = RCC_LPTIM34CLKSOURCE_LSE;
 8001602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f8c0 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_LPTIM_MspInit+0xba>
      Error_Handler();
 800161a:	f7ff ff47 	bl	80014ac <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 8001620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 8001626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800162a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 8001630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 800163e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_LPTIM_MspInit+0x130>)
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LPTIM4;
 8001674:	230d      	movs	r3, #13
 8001676:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800167e:	4619      	mov	r1, r3
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <HAL_LPTIM_MspInit+0x138>)
 8001682:	f002 fdd5 	bl	8004230 <HAL_GPIO_Init>
}
 8001686:	bf00      	nop
 8001688:	37f8      	adds	r7, #248	; 0xf8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	46004400 	.word	0x46004400
 8001694:	46020c00 	.word	0x46020c00
 8001698:	46004c00 	.word	0x46004c00
 800169c:	42021400 	.word	0x42021400

080016a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0b6      	sub	sp, #216	; 0xd8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	22c8      	movs	r2, #200	; 0xc8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f013 fbe7 	bl	8014e84 <memset>
  if(hrtc->Instance==RTC)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_RTC_MspInit+0x90>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d132      	bne.n	8001726 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f85b 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80016e4:	f7ff fee2 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RTC_MspInit+0x94>)
 80016ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_RTC_MspInit+0x94>)
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_RTC_MspInit+0x94>)
 80016fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_RTC_MspInit+0x94>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RTC_MspInit+0x94>)
 800170a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800170e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2002      	movs	r0, #2
 800171c:	f002 fd52 	bl	80041c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001720:	2002      	movs	r0, #2
 8001722:	f002 fd69 	bl	80041f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	37d8      	adds	r7, #216	; 0xd8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	46007800 	.word	0x46007800
 8001734:	46020c00 	.word	0x46020c00

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0bc      	sub	sp, #240	; 0xf0
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	22c8      	movs	r2, #200	; 0xc8
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f013 fb93 	bl	8014e84 <memset>
  if(hspi->Instance==SPI1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_SPI_MspInit+0xc8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d146      	bne.n	80017f6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001768:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001774:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f005 f807 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800178c:	f7ff fe8e 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 8001792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001796:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 8001798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 80017a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 80017b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_SPI_MspInit+0xcc>)
 80017c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 80017cc:	2382      	movs	r3, #130	; 0x82
 80017ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e4:	2305      	movs	r3, #5
 80017e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_SPI_MspInit+0xd0>)
 80017f2:	f002 fd1d 	bl	8004230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	37f0      	adds	r7, #240	; 0xf0
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013000 	.word	0x40013000
 8001804:	46020c00 	.word	0x46020c00
 8001808:	42020000 	.word	0x42020000

0800180c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0bc      	sub	sp, #240	; 0xf0
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	22c8      	movs	r2, #200	; 0xc8
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f013 fb29 	bl	8014e84 <memset>
  if(huart->Instance==USART1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_UART_MspInit+0xc4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d145      	bne.n	80018c8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800183c:	f04f 0201 	mov.w	r2, #1
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001848:	2301      	movs	r3, #1
 800184a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4618      	mov	r0, r3
 8001852:	f004 ff9f 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800185c:	f7ff fe26 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_UART_MspInit+0xc8>)
 8001890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800189c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b6:	2307      	movs	r3, #7
 80018b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <HAL_UART_MspInit+0xcc>)
 80018c4:	f002 fcb4 	bl	8004230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	37f0      	adds	r7, #240	; 0xf0
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40013800 	.word	0x40013800
 80018d4:	46020c00 	.word	0x46020c00
 80018d8:	42020000 	.word	0x42020000

080018dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	; 0x38
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_InitTick+0xcc>)
 80018ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018f2:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <HAL_InitTick+0xcc>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_InitTick+0xcc>)
 80018fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190a:	f107 0210 	add.w	r2, r7, #16
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f004 fe7f 	bl	8006618 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800191a:	f004 fe41 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 800191e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001922:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_InitTick+0xd0>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3b01      	subs	r3, #1
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_InitTick+0xd4>)
 8001930:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_InitTick+0xd8>)
 8001932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_InitTick+0xd4>)
 8001936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800193c:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <HAL_InitTick+0xd4>)
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_InitTick+0xd4>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_InitTick+0xd4>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800194e:	4818      	ldr	r0, [pc, #96]	; (80019b0 <HAL_InitTick+0xd4>)
 8001950:	f008 fcec 	bl	800a32c <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800195a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001962:	4813      	ldr	r0, [pc, #76]	; (80019b0 <HAL_InitTick+0xd4>)
 8001964:	f008 fd44 	bl	800a3f0 <HAL_TIM_Base_Start_IT>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800196e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d808      	bhi.n	800198e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	2031      	movs	r0, #49	; 0x31
 8001982:	f002 fc1f 	bl	80041c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_InitTick+0xdc>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e002      	b.n	8001994 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001994:	2031      	movs	r0, #49	; 0x31
 8001996:	f002 fc2f 	bl	80041f8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800199a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	46020c00 	.word	0x46020c00
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	2000164c 	.word	0x2000164c
 80019b4:	40001000 	.word	0x40001000
 80019b8:	20000004 	.word	0x20000004

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <RTC_IRQHandler+0x10>)
 80019ee:	f007 fff7 	bl	80099e0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200014f8 	.word	0x200014f8

080019fc <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a04:	f002 fe04 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a14:	f002 fdfc 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a24:	f002 fdf4 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a34:	f002 fdec 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM6_IRQHandler+0x10>)
 8001a42:	f008 fd75 	bl	800a530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000164c 	.word	0x2000164c

08001a50 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <LPTIM1_IRQHandler+0x10>)
 8001a56:	f002 ffa7 	bl	80049a8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20001458 	.word	0x20001458

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f013 f9cc 	bl	8014e30 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200c0000 	.word	0x200c0000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20001698 	.word	0x20001698
 8001acc:	20001eb8 	.word	0x20001eb8

08001ad0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <SystemInit+0x68>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <SystemInit+0x68>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <SystemInit+0x6c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <SystemInit+0x6c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SystemInit+0x6c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <SystemInit+0x6c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <SystemInit+0x6c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <SystemInit+0x6c>)
 8001b02:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b06:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <SystemInit+0x6c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <SystemInit+0x6c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <SystemInit+0x6c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <SystemInit+0x6c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SystemInit+0x68>)
 8001b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2a:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	46020c00 	.word	0x46020c00

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b44:	f7ff ffc4 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b4a:	e003      	b.n	8001b54 <LoopCopyDataInit>

08001b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b52:	3104      	adds	r1, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b5c:	d3f6      	bcc.n	8001b4c <CopyDataInit>
	ldr	r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b60:	e002      	b.n	8001b68 <LoopFillZerobss>

08001b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b64:	f842 3b04 	str.w	r3, [r2], #4

08001b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <LoopForever+0x16>)
	cmp	r2, r3
 8001b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b6c:	d3f9      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f013 f965 	bl	8014e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7ff f87d 	bl	8000c70 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b78:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b7c:	08015c64 	.word	0x08015c64
	ldr	r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b84:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8001b88:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001b8c:	20001eb1 	.word	0x20001eb1

08001b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_Init+0x4c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_Init+0x4c>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f002 fb02 	bl	80041ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001baa:	f004 fbd7 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_Init+0x50>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	490b      	ldr	r1, [pc, #44]	; (8001be8 <HAL_Init+0x54>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x58>)
 8001bc2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f7ff fe89 	bl	80018dc <HAL_InitTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e002      	b.n	8001bda <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fc70 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	46020c00 	.word	0x46020c00
 8001be8:	080159ec 	.word	0x080159ec
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008
 8001c14:	2000169c 	.word	0x2000169c

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000169c 	.word	0x2000169c

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008

08001c78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_GetREVID+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b29b      	uxth	r3, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e0044000 	.word	0xe0044000

08001c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LL_ADC_SetResolution+0x3c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d104      	bne.n	8001d1c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f023 020c 	bic.w	r2, r3, #12
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	46021000 	.word	0x46021000

08001d3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3360      	adds	r3, #96	; 0x60
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3360      	adds	r3, #96	; 0x60
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3360      	adds	r3, #96	; 0x60
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3360      	adds	r3, #96	; 0x60
 8001e26:	461a      	mov	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	d002      	beq.n	8001e7e <LL_ADC_SetGainCompensation+0x32>
 8001e78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_SetGainCompensation+0x34>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d020      	beq.n	8001f4e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	4413      	add	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	211f      	movs	r1, #31
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 011f 	and.w	r1, r3, #31
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	431a      	orrs	r2, r3
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001f4c:	e02b      	b.n	8001fa6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	210f      	movs	r1, #15
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	401a      	ands	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e010      	b.n	8001f98 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	f001 011f 	and.w	r1, r1, #31
 8001f9e:	408b      	lsls	r3, r1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	46021000 	.word	0x46021000

08001fb8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	e015      	b.n	8002008 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	60fb      	str	r3, [r7, #12]
  return result;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2201      	movs	r2, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d042      	beq.n	80020ea <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d104      	bne.n	8002078 <LL_ADC_SetChannelSamplingTime+0x28>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e011      	b.n	800209c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	617b      	str	r3, [r7, #20]
  return result;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e003      	b.n	800209a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	0e5b      	lsrs	r3, r3, #25
 80020a0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3314      	adds	r3, #20
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	0e5b      	lsrs	r3, r3, #25
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2107      	movs	r1, #7
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80020e8:	e00e      	b.n	8002108 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	43db      	mvns	r3, r3
 80020f4:	401a      	ands	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	0219      	lsls	r1, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	400b      	ands	r3, r1
 80020fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002102:	431a      	orrs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	615a      	str	r2, [r3, #20]
}
 8002108:	bf00      	nop
 800210a:	372c      	adds	r7, #44	; 0x2c
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	46021000 	.word	0x46021000

08002118 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0318 	and.w	r3, r3, #24
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <LL_ADC_SetChannelSingleDiff+0x44>)
 800213c:	40d9      	lsrs	r1, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	400b      	ands	r3, r1
 8002142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	000fffff 	.word	0x000fffff

08002160 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6093      	str	r3, [r2, #8]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002198:	d101      	bne.n	800219e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e8:	d101      	bne.n	80021ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <LL_ADC_IsEnabled+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_ADC_IsEnabled+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d101      	bne.n	800228a <LL_ADC_IsDisableOngoing+0x18>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_ADC_IsDisableOngoing+0x1a>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ac:	f043 0204 	orr.w	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d101      	bne.n	8002300 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800231e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	609a      	str	r2, [r3, #8]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d101      	bne.n	800234e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e2b3      	b.n	80028e4 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a8b      	ldr	r2, [pc, #556]	; (80025b8 <HAL_ADC_Init+0x25c>)
 800238a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff f8a9 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fee9 	bl	8002184 <LL_ADC_IsDeepPowerDownEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fecf 	bl	8002160 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff04 	bl	80021d4 <LL_ADC_IsInternalRegulatorEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fee8 	bl	80021ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <HAL_ADC_Init+0x260>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_ADC_Init+0x264>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fee6 	bl	80021d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff59 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8002436:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8244 	bne.w	80028ce <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8240 	bne.w	80028ce <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002452:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fef2 	bl	800224c <LL_ADC_IsEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d140      	bne.n	80024f0 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_ADC_Init+0x25c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d028      	beq.n	80024ca <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_ADC_Init+0x268>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d109      	bne.n	8002496 <HAL_ADC_Init+0x13a>
 8002482:	4850      	ldr	r0, [pc, #320]	; (80025c4 <HAL_ADC_Init+0x268>)
 8002484:	f7ff fee2 	bl	800224c <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	e008      	b.n	80024a8 <HAL_ADC_Init+0x14c>
 8002496:	4848      	ldr	r0, [pc, #288]	; (80025b8 <HAL_ADC_Init+0x25c>)
 8002498:	f7ff fed8 	bl	800224c <LL_ADC_IsEnabled>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d021      	beq.n	80024f0 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_ADC_Init+0x268>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Init+0x15e>
 80024b6:	4a44      	ldr	r2, [pc, #272]	; (80025c8 <HAL_ADC_Init+0x26c>)
 80024b8:	e000      	b.n	80024bc <HAL_ADC_Init+0x160>
 80024ba:	4a44      	ldr	r2, [pc, #272]	; (80025cc <HAL_ADC_Init+0x270>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff fbe6 	bl	8001c94 <LL_ADC_SetCommonClock>
 80024c8:	e012      	b.n	80024f0 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7ff fc11 	bl	8001cfc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80024da:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <HAL_ADC_Init+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024ea:	4938      	ldr	r1, [pc, #224]	; (80025cc <HAL_ADC_Init+0x270>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_ADC_Init+0x25c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d010      	beq.n	800251c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002500:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002506:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800250c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002514:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002516:	4313      	orrs	r3, r2
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	e030      	b.n	800257e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f1b      	ldrb	r3, [r3, #28]
 8002520:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002528:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800252a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002530:	2a00      	cmp	r2, #0
 8002532:	d002      	beq.n	800253a <HAL_ADC_Init+0x1de>
 8002534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002538:	e000      	b.n	800253c <HAL_ADC_Init+0x1e0>
 800253a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800253c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002542:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da04      	bge.n	8002556 <HAL_ADC_Init+0x1fa>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002554:	e001      	b.n	800255a <HAL_ADC_Init+0x1fe>
 8002556:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800255a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4918      	ldr	r1, [pc, #96]	; (80025c4 <HAL_ADC_Init+0x268>)
 8002562:	428b      	cmp	r3, r1
 8002564:	d103      	bne.n	800256e <HAL_ADC_Init+0x212>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256c:	e003      	b.n	8002576 <HAL_ADC_Init+0x21a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002574:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002576:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	4313      	orrs	r3, r2
 800257c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d12f      	bne.n	80025e8 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_ADC_Init+0x25c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	3b01      	subs	r3, #1
 8002598:	045b      	lsls	r3, r3, #17
 800259a:	6a3a      	ldr	r2, [r7, #32]
 800259c:	4313      	orrs	r3, r2
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	e022      	b.n	80025e8 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d111      	bne.n	80025d0 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	e018      	b.n	80025e8 <HAL_ADC_Init+0x28c>
 80025b6:	bf00      	nop
 80025b8:	46021000 	.word	0x46021000
 80025bc:	20000000 	.word	0x20000000
 80025c0:	053e2d63 	.word	0x053e2d63
 80025c4:	42028000 	.word	0x42028000
 80025c8:	42028308 	.word	0x42028308
 80025cc:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_ADC_Init+0x4dc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d018      	beq.n	8002624 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4313      	orrs	r3, r2
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4313      	orrs	r3, r2
 800260c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_ADC_Init+0x4e0>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	e031      	b.n	8002688 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	4313      	orrs	r3, r2
 800263a:	6a3a      	ldr	r2, [r7, #32]
 800263c:	4313      	orrs	r3, r2
 800263e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_ADC_Init+0x4e4>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	6a39      	ldr	r1, [r7, #32]
 8002650:	430b      	orrs	r3, r1
 8002652:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_ADC_Init+0x4dc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f000 8093 	beq.w	80027ba <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fe25 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 800269e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fe46 	bl	8002336 <LL_ADC_INJ_IsConversionOngoing>
 80026aa:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d161      	bne.n	8002776 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d15e      	bne.n	8002776 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f1b      	ldrb	r3, [r3, #28]
 80026bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4960      	ldr	r1, [pc, #384]	; (8002844 <HAL_ADC_Init+0x4e8>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d102      	bne.n	80026ce <HAL_ADC_Init+0x372>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Init+0x378>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026d4:	4313      	orrs	r3, r2
 80026d6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	6a39      	ldr	r1, [r7, #32]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f7ff fba2 	bl	8001e4c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800270e:	2b01      	cmp	r3, #1
 8002710:	d11e      	bne.n	8002750 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_ADC_Init+0x4ec>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002726:	0411      	lsls	r1, r2, #16
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800273e:	0892      	lsrs	r2, r2, #2
 8002740:	430a      	orrs	r2, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e007      	b.n	8002760 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10c      	bne.n	8002798 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f023 010f 	bic.w	r1, r3, #15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
 8002796:	e007      	b.n	80027a8 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020f 	bic.w	r2, r2, #15
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ac:	f023 0303 	bic.w	r3, r3, #3
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027b8:	e092      	b.n	80028e0 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d111      	bne.n	80027e8 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80027d2:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80027d8:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_ADC_Init+0x4f0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	461a      	mov	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f7ff fb43 	bl	8001e92 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	461a      	mov	r2, r3
 8002816:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800281a:	f7ff fb3a 	bl	8001e92 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d114      	bne.n	8002850 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f062 020f 	orn	r2, r2, #15
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
 8002836:	e024      	b.n	8002882 <HAL_ADC_Init+0x526>
 8002838:	46021000 	.word	0x46021000
 800283c:	fff0c013 	.word	0xfff0c013
 8002840:	ffde800d 	.word	0xffde800d
 8002844:	42028000 	.word	0x42028000
 8002848:	fc00f81e 	.word	0xfc00f81e
 800284c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002858:	d113      	bne.n	8002882 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f003 031c 	and.w	r3, r3, #28
 800286c:	f06f 020f 	mvn.w	r2, #15
 8002870:	fa02 f103 	lsl.w	r1, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_ADC_Init+0x590>)
 800288a:	4013      	ands	r3, r2
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	429a      	cmp	r2, r3
 8002890:	d10b      	bne.n	80028aa <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289c:	f023 0303 	bic.w	r3, r3, #3
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028a8:	e01a      	b.n	80028e0 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ae:	f023 0312 	bic.w	r3, r3, #18
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028cc:	e008      	b.n	80028e0 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	833ffff3 	.word	0x833ffff3

080028f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fcf3 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d15d      	bne.n	80029c4 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADC_Start+0x26>
 8002912:	2302      	movs	r3, #2
 8002914:	e059      	b.n	80029ca <HAL_ADC_Start+0xda>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f001 f916 	bl	8003b50 <ADC_Enable>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d145      	bne.n	80029ba <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <HAL_ADC_Start+0xe4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d011      	beq.n	8002970 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d106      	bne.n	8002968 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295e:	f023 0206 	bic.w	r2, r3, #6
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	67da      	str	r2, [r3, #124]	; 0x7c
 8002966:	e006      	b.n	8002976 <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	67da      	str	r2, [r3, #124]	; 0x7c
 800296e:	e002      	b.n	8002976 <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	221c      	movs	r2, #28
 800297c:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ADC_Start+0xe4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00e      	beq.n	80029ae <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fc70 	bl	8002298 <LL_ADC_REG_StartConversion>
 80029b8:	e006      	b.n	80029c8 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80029c2:	e001      	b.n	80029c8 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	46021000 	.word	0x46021000

080029d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Stop+0x16>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e023      	b.n	8002a36 <HAL_ADC_Stop+0x5e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80029f6:	2103      	movs	r1, #3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 ffed 	bl	80039d8 <ADC_ConversionStop>
 80029fe:	4603      	mov	r3, r0
 8002a00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f001 f911 	bl	8003c30 <ADC_Disable>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d102      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002a52:	2308      	movs	r3, #8
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e027      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	; (8002c08 <HAL_ADC_PollForConversion+0x1c8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d011      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0be      	b.n	8002bfe <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002a80:	2304      	movs	r3, #4
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e010      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0ac      	b.n	8002bfe <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aa8:	f7ff f8b6 	bl	8001c18 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002aae:	e021      	b.n	8002af4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d01d      	beq.n	8002af4 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ab8:	f7ff f8ae 	bl	8001c18 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <HAL_ADC_PollForConversion+0x8e>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d112      	bne.n	8002af4 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e084      	b.n	8002bfe <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0d6      	beq.n	8002ab0 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f9dc 	bl	8001ed0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d06e      	beq.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d169      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_ADC_PollForConversion+0x1c8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02e      	beq.n	8002b90 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d111      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d104      	bne.n	8002b7c <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2208      	movs	r2, #8
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e03f      	b.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13a      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e035      	b.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d126      	bne.n	8002bec <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fba0 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d112      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 020c 	bic.w	r2, r2, #12
 8002bbc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	679a      	str	r2, [r3, #120]	; 0x78
 8002bd2:	e00b      	b.n	8002bec <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7f1b      	ldrb	r3, [r3, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	46021000 	.word	0x46021000

08002c0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0bc      	sub	sp, #240	; 0xf0
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4aa8      	ldr	r2, [pc, #672]	; (8002ee4 <HAL_ADC_ConfigChannel+0x2bc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d103      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x36>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f000 beb5 	b.w	80039c8 <HAL_ADC_ConfigChannel+0xda0>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fb3c 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8695 	bne.w	80039a2 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a99      	ldr	r2, [pc, #612]	; (8002ee4 <HAL_ADC_ConfigChannel+0x2bc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f000 83ea 	beq.w	8003458 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x7a>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	e01d      	b.n	8002cde <HAL_ADC_ConfigChannel+0xb6>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2201      	movs	r2, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	69d1      	ldr	r1, [r2, #28]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f7ff f8fd 	bl	8001ef8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff faf0 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8002d08:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fb10 	bl	8002336 <LL_ADC_INJ_IsConversionOngoing>
 8002d16:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 81ed 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 81e8 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff f988 	bl	8002050 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d046      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6919      	ldr	r1, [r3, #16]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d72:	f7fe ffe3 	bl	8001d3c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7ff f811 	bl	8001daa <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	7e9b      	ldrb	r3, [r3, #26]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d11e      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x17e>
 8002da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da4:	e000      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x180>
 8002da6:	2300      	movs	r3, #0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f7ff f834 	bl	8001e16 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x19c>
 8002dbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002dc2:	e000      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x19e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7ff f80a 	bl	8001de0 <LL_ADC_SetOffsetSignedSaturation>
 8002dcc:	e197      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7ff f81c 	bl	8001e16 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fe fff9 	bl	8001de0 <LL_ADC_SetOffsetSignedSaturation>
 8002dee:	e186      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ffc1 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1f4>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe ffb6 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 021f 	and.w	r2, r3, #31
 8002e1a:	e01e      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x232>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe ffab 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002e42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e004      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x24a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	e018      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x27c>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002e8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e004      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f7fe ff42 	bl	8001d3c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe ff5d 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x2c0>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe ff52 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 021f 	and.w	r2, r3, #31
 8002ee2:	e020      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x2fe>
 8002ee4:	46021000 	.word	0x46021000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe ff45 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e004      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002f1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x316>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	e018      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x348>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e004      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2101      	movs	r1, #1
 8002f80:	f7fe fedc 	bl	8001d3c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fef7 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x388>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe feec 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	e01e      	b.n	8002fee <HAL_ADC_ConfigChannel+0x3c6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fee1 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e004      	b.n	8002fec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x3de>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	e018      	b.n	8003038 <HAL_ADC_ConfigChannel+0x410>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800301a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e004      	b.n	8003038 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003038:	429a      	cmp	r2, r3
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	2102      	movs	r1, #2
 8003048:	f7fe fe78 	bl	8001d3c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2103      	movs	r1, #3
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fe93 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x450>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fe88 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	f003 021f 	and.w	r2, r3, #31
 8003076:	e01a      	b.n	80030ae <HAL_ADC_ConfigChannel+0x486>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2103      	movs	r1, #3
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fe7d 	bl	8001d7e <LL_ADC_GetOffsetChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e004      	b.n	80030ac <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80030a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x49e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	e011      	b.n	80030ea <HAL_ADC_ConfigChannel+0x4c2>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80030e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d107      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	2103      	movs	r1, #3
 80030fa:	f7fe fe1f 	bl	8001d3c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f8a2 	bl	800224c <LL_ADC_IsEnabled>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 8456 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	461a      	mov	r2, r3
 800311e:	f7fe fffb 	bl	8002118 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800312a:	f040 80d6 	bne.w	80032da <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x52a>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0e9b      	lsrs	r3, r3, #26
 8003140:	3301      	adds	r3, #1
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2b09      	cmp	r3, #9
 8003148:	bf94      	ite	ls
 800314a:	2301      	movls	r3, #1
 800314c:	2300      	movhi	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e019      	b.n	8003186 <HAL_ADC_ConfigChannel+0x55e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003162:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e003      	b.n	8003176 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800316e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b09      	cmp	r3, #9
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04d      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x5fe>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x57e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	3301      	adds	r3, #1
 800319e:	069b      	lsls	r3, r3, #26
 80031a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a4:	e015      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x5aa>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e003      	b.n	80031ca <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80031c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	069b      	lsls	r3, r3, #26
 80031ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x5ca>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	e017      	b.n	8003222 <HAL_ADC_ConfigChannel+0x5fa>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	4313      	orrs	r3, r2
 8003224:	e04e      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x69c>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x61a>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003240:	e015      	b.n	800326e <HAL_ADC_ConfigChannel+0x646>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003252:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800325e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3301      	adds	r3, #1
 8003268:	069b      	lsls	r3, r3, #26
 800326a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_ConfigChannel+0x666>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	e017      	b.n	80032be <HAL_ADC_ConfigChannel+0x696>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e003      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80032d6:	f7fe febb 	bl	8002050 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f280 836c 	bge.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a97      	ldr	r2, [pc, #604]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x6ca>
 80032ee:	4b97      	ldr	r3, [pc, #604]	; (800354c <HAL_ADC_ConfigChannel+0x924>)
 80032f0:	e000      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x6cc>
 80032f2:	4b97      	ldr	r3, [pc, #604]	; (8003550 <HAL_ADC_ConfigChannel+0x928>)
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fcf3 	bl	8001ce0 <LL_ADC_GetCommonPathInternalCh>
 80032fa:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a91      	ldr	r2, [pc, #580]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d109      	bne.n	800331c <HAL_ADC_ConfigChannel+0x6f4>
 8003308:	488f      	ldr	r0, [pc, #572]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 800330a:	f7fe ff9f 	bl	800224c <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e008      	b.n	800332e <HAL_ADC_ConfigChannel+0x706>
 800331c:	488d      	ldr	r0, [pc, #564]	; (8003554 <HAL_ADC_ConfigChannel+0x92c>)
 800331e:	f7fe ff95 	bl	800224c <LL_ADC_IsEnabled>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8088 	beq.w	8003444 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a87      	ldr	r2, [pc, #540]	; (8003558 <HAL_ADC_ConfigChannel+0x930>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d132      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d12c      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d005      	beq.n	8003360 <HAL_ADC_ConfigChannel+0x738>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_ADC_ConfigChannel+0x92c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f040 832b 	bne.w	80039b6 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a78      	ldr	r2, [pc, #480]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x746>
 800336a:	4a78      	ldr	r2, [pc, #480]	; (800354c <HAL_ADC_ConfigChannel+0x924>)
 800336c:	e000      	b.n	8003370 <HAL_ADC_ConfigChannel+0x748>
 800336e:	4a78      	ldr	r2, [pc, #480]	; (8003550 <HAL_ADC_ConfigChannel+0x928>)
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7fe fc9d 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_ADC_ConfigChannel+0x934>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	4a76      	ldr	r2, [pc, #472]	; (8003560 <HAL_ADC_ConfigChannel+0x938>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003392:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003394:	e002      	b.n	800339c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3b01      	subs	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f9      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a2:	e308      	b.n	80039b6 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <HAL_ADC_ConfigChannel+0x93c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d121      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11b      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a62      	ldr	r2, [pc, #392]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d005      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x7a8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a62      	ldr	r2, [pc, #392]	; (8003554 <HAL_ADC_ConfigChannel+0x92c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f040 82f5 	bne.w	80039ba <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5c      	ldr	r2, [pc, #368]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x7b6>
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_ADC_ConfigChannel+0x924>)
 80033dc:	e000      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x7b8>
 80033de:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_ADC_ConfigChannel+0x928>)
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7fe fc65 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f0:	e2e3      	b.n	80039ba <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5c      	ldr	r2, [pc, #368]	; (8003568 <HAL_ADC_ConfigChannel+0x940>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f040 82df 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 82d8 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d005      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x7fa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_ADC_ConfigChannel+0x92c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f040 82cd 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a48      	ldr	r2, [pc, #288]	; (8003548 <HAL_ADC_ConfigChannel+0x920>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x808>
 800342c:	4a47      	ldr	r2, [pc, #284]	; (800354c <HAL_ADC_ConfigChannel+0x924>)
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x80a>
 8003430:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_ADC_ConfigChannel+0x928>)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe fc3c 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 8003442:	e2bb      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003456:	e2b1      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003460:	f7fe fc0a 	bl	8001c78 <HAL_GetREVID>
 8003464:	4603      	mov	r3, r0
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d130      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_ADC_ConfigChannel+0x944>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d103      	bne.n	800347e <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_ADC_ConfigChannel+0x948>)
 8003478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800347c:	e027      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <HAL_ADC_ConfigChannel+0x94c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d103      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_ADC_ConfigChannel+0x950>)
 800348a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800348e:	e01e      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_ADC_ConfigChannel+0x954>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d103      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_ADC_ConfigChannel+0x958>)
 800349c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a0:	e015      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_ADC_ConfigChannel+0x95c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80034ac:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_ADC_ConfigChannel+0x960>)
 80034ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034b2:	e00c      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_ADC_ConfigChannel+0x964>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d103      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 80034be:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_ADC_ConfigChannel+0x95c>)
 80034c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034c4:	e003      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f000 81a2 	beq.w	800381c <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e0:	d004      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034e6:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <HAL_ADC_ConfigChannel+0x968>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d107      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fd5f 	bl	8001fb8 <LL_ADC_REG_SetSequencerChAdd>
 80034fa:	e0c1      	b.n	8003680 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	210f      	movs	r1, #15
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_ADC_ConfigChannel+0x904>
 8003520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	e037      	b.n	800359c <HAL_ADC_ConfigChannel+0x974>
 800352c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d127      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e029      	b.n	800359c <HAL_ADC_ConfigChannel+0x974>
 8003548:	42028000 	.word	0x42028000
 800354c:	42028308 	.word	0x42028308
 8003550:	46021308 	.word	0x46021308
 8003554:	46021000 	.word	0x46021000
 8003558:	ce080000 	.word	0xce080000
 800355c:	20000000 	.word	0x20000000
 8003560:	053e2d63 	.word	0x053e2d63
 8003564:	ca040000 	.word	0xca040000
 8003568:	80000001 	.word	0x80000001
 800356c:	b6002000 	.word	0xb6002000
 8003570:	da400000 	.word	0xda400000
 8003574:	ba004000 	.word	0xba004000
 8003578:	de800000 	.word	0xde800000
 800357c:	b2001000 	.word	0xb2001000
 8003580:	81000001 	.word	0x81000001
 8003584:	d6200000 	.word	0xd6200000
 8003588:	d2100000 	.word	0xd2100000
 800358c:	d7200000 	.word	0xd7200000
 8003590:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	6849      	ldr	r1, [r1, #4]
 80035a0:	f001 011f 	and.w	r1, r1, #31
 80035a4:	408b      	lsls	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d860      	bhi.n	8003680 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80035be:	f7fe fb5b 	bl	8001c78 <HAL_GetREVID>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d851      	bhi.n	800366e <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80035ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x9c4>
 80035d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035da:	0e9b      	lsrs	r3, r3, #26
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2b13      	cmp	r3, #19
 80035e2:	bf8c      	ite	hi
 80035e4:	2301      	movhi	r3, #1
 80035e6:	2300      	movls	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e016      	b.n	800361a <HAL_ADC_ConfigChannel+0x9f2>
 80035ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	61bb      	str	r3, [r7, #24]
  return result;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b13      	cmp	r3, #19
 8003612:	bf8c      	ite	hi
 8003614:	2301      	movhi	r3, #1
 8003616:	2300      	movls	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d027      	beq.n	800366e <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800361e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003622:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_ADC_ConfigChannel+0xa16>
 800362a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	3b09      	subs	r3, #9
 8003636:	2201      	movs	r2, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	e015      	b.n	800366a <HAL_ADC_ConfigChannel+0xa42>
 800363e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]
  return result;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e003      	b.n	8003662 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3b09      	subs	r3, #9
 8003664:	2201      	movs	r2, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800367a:	4619      	mov	r1, r3
 800367c:	f7fe fc3c 	bl	8001ef8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	461a      	mov	r2, r3
 800368a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800368e:	f7fe fcdf 	bl	8002050 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f280 8190 	bge.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a97      	ldr	r2, [pc, #604]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0xa82>
 80036a6:	4b97      	ldr	r3, [pc, #604]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80036a8:	e000      	b.n	80036ac <HAL_ADC_ConfigChannel+0xa84>
 80036aa:	4b97      	ldr	r3, [pc, #604]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fb17 	bl	8001ce0 <LL_ADC_GetCommonPathInternalCh>
 80036b2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a94      	ldr	r2, [pc, #592]	; (800390c <HAL_ADC_ConfigChannel+0xce4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d126      	bne.n	800370e <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d120      	bne.n	800370e <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a8b      	ldr	r2, [pc, #556]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0xab2>
 80036d6:	4a8b      	ldr	r2, [pc, #556]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80036d8:	e000      	b.n	80036dc <HAL_ADC_ConfigChannel+0xab4>
 80036da:	4a8b      	ldr	r2, [pc, #556]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe fae7 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036ec:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_ADC_ConfigChannel+0xce8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	4a88      	ldr	r2, [pc, #544]	; (8003914 <HAL_ADC_ConfigChannel+0xcec>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80036fe:	e002      	b.n	8003706 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3b01      	subs	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f9      	bne.n	8003700 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800370c:	e067      	b.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a81      	ldr	r2, [pc, #516]	; (8003918 <HAL_ADC_ConfigChannel+0xcf0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d116      	bne.n	8003746 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a75      	ldr	r2, [pc, #468]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0xb0a>
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 8003730:	e000      	b.n	8003734 <HAL_ADC_ConfigChannel+0xb0c>
 8003732:	4a75      	ldr	r2, [pc, #468]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f7fe fabb 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 8003744:	e04b      	b.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a74      	ldr	r2, [pc, #464]	; (800391c <HAL_ADC_ConfigChannel+0xcf4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d116      	bne.n	800377e <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d110      	bne.n	800377e <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0xb42>
 8003766:	4a67      	ldr	r2, [pc, #412]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0xb44>
 800376a:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fe fa9f 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 800377c:	e02f      	b.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_ADC_ConfigChannel+0xcf8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d12a      	bne.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d124      	bne.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a62      	ldr	r2, [pc, #392]	; (8003924 <HAL_ADC_ConfigChannel+0xcfc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d11f      	bne.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0xb84>
 80037a8:	4a56      	ldr	r2, [pc, #344]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80037aa:	e000      	b.n	80037ae <HAL_ADC_ConfigChannel+0xb86>
 80037ac:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fe fa7e 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80037be:	f7fe fa5b 	bl	8001c78 <HAL_GetREVID>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d809      	bhi.n	80037de <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80037de:	f7fe fa4b 	bl	8001c78 <HAL_GetREVID>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	f040 80e8 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_ADC_ConfigChannel+0xd00>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	f040 80e2 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 80db 	bne.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800381a:	e0cf      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003824:	d004      	beq.n	8003830 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800382a:	4a40      	ldr	r2, [pc, #256]	; (800392c <HAL_ADC_ConfigChannel+0xd04>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d106      	bne.n	800383e <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fbf0 	bl	800201e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f280 80ba 	bge.w	80039bc <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0xc2e>
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 8003854:	e000      	b.n	8003858 <HAL_ADC_ConfigChannel+0xc30>
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fa41 	bl	8001ce0 <LL_ADC_GetCommonPathInternalCh>
 800385e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_ADC_ConfigChannel+0xd08>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d110      	bne.n	800388e <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a23      	ldr	r2, [pc, #140]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0xc52>
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 8003878:	e000      	b.n	800387c <HAL_ADC_ConfigChannel+0xc54>
 800387a:	4a23      	ldr	r2, [pc, #140]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fe fa17 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 800388c:	e06d      	b.n	800396a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a28      	ldr	r2, [pc, #160]	; (8003934 <HAL_ADC_ConfigChannel+0xd0c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d110      	bne.n	80038ba <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0xc7e>
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80038a4:	e000      	b.n	80038a8 <HAL_ADC_ConfigChannel+0xc80>
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fe fa01 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 80038b8:	e057      	b.n	800396a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_ADC_ConfigChannel+0xcf4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d110      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0xcaa>
 80038ce:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_ConfigChannel+0xcac>
 80038d2:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_ADC_ConfigChannel+0xce0>)
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe f9eb 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 80038e4:	e041      	b.n	800396a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_ADC_ConfigChannel+0xcf8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d13c      	bne.n	800396a <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a02      	ldr	r2, [pc, #8]	; (8003900 <HAL_ADC_ConfigChannel+0xcd8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d11e      	bne.n	8003938 <HAL_ADC_ConfigChannel+0xd10>
 80038fa:	4a02      	ldr	r2, [pc, #8]	; (8003904 <HAL_ADC_ConfigChannel+0xcdc>)
 80038fc:	e01d      	b.n	800393a <HAL_ADC_ConfigChannel+0xd12>
 80038fe:	bf00      	nop
 8003900:	42028000 	.word	0x42028000
 8003904:	42028308 	.word	0x42028308
 8003908:	46021308 	.word	0x46021308
 800390c:	b6002000 	.word	0xb6002000
 8003910:	20000000 	.word	0x20000000
 8003914:	053e2d63 	.word	0x053e2d63
 8003918:	ba004000 	.word	0xba004000
 800391c:	80000001 	.word	0x80000001
 8003920:	b2001000 	.word	0xb2001000
 8003924:	46021000 	.word	0x46021000
 8003928:	d7200000 	.word	0xd7200000
 800392c:	80000010 	.word	0x80000010
 8003930:	ce080000 	.word	0xce080000
 8003934:	ca040000 	.word	0xca040000
 8003938:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <HAL_ADC_ConfigChannel+0xda8>)
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7fe f9b8 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800394a:	f7fe f995 	bl	8001c78 <HAL_GetREVID>
 800394e:	4603      	mov	r3, r0
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d809      	bhi.n	800396a <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800396a:	f7fe f985 	bl	8001c78 <HAL_GetREVID>
 800396e:	4603      	mov	r3, r0
 8003970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003974:	d122      	bne.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_ADC_ConfigChannel+0xdac>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d11d      	bne.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d117      	bne.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80039a0:	e00c      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80039b4:	e002      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ba:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80039c4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	37f0      	adds	r7, #240	; 0xf0
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	46021308 	.word	0x46021308
 80039d4:	d7200000 	.word	0xd7200000

080039d8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fc7a 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 80039f4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fc9b 	bl	8002336 <LL_ADC_INJ_IsConversionOngoing>
 8003a00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <ADC_ConversionStop+0x38>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8099 	beq.w	8003b42 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02b      	beq.n	8003a76 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d126      	bne.n	8003a76 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7f1b      	ldrb	r3, [r3, #28]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d122      	bne.n	8003a76 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a34:	e014      	b.n	8003a60 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <ADC_ConversionStop+0x174>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d90d      	bls.n	8003a5a <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	f043 0210 	orr.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e074      	b.n	8003b44 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d1e3      	bne.n	8003a36 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d014      	beq.n	8003aa6 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fc31 	bl	80022e8 <LL_ADC_REG_IsConversionOngoing>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fbee 	bl	8002272 <LL_ADC_IsDisableOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fc0d 	bl	80022c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d014      	beq.n	8003ad6 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fc40 	bl	8002336 <LL_ADC_INJ_IsConversionOngoing>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fbd6 	bl	8002272 <LL_ADC_IsDisableOngoing>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fc1c 	bl	800230e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d005      	beq.n	8003ae8 <ADC_ConversionStop+0x110>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d105      	bne.n	8003aee <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	617b      	str	r3, [r7, #20]
        break;
 8003ae6:	e005      	b.n	8003af4 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003ae8:	2308      	movs	r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
        break;
 8003aec:	e002      	b.n	8003af4 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003aee:	2304      	movs	r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
        break;
 8003af2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003af4:	f7fe f890 	bl	8001c18 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003afa:	e01b      	b.n	8003b34 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003afc:	f7fe f88c 	bl	8001c18 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d914      	bls.n	8003b34 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1c:	f043 0210 	orr.w	r2, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1dc      	bne.n	8003afc <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	000cdbff 	.word	0x000cdbff

08003b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fb75 	bl	800224c <LL_ADC_IsEnabled>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d15a      	bne.n	8003c1e <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <ADC_Enable+0xd8>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e046      	b.n	8003c20 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fb2c 	bl	80021fc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <ADC_Enable+0x66>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <ADC_Enable+0xdc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d033      	beq.n	8003c1e <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe f82f 	bl	8001c18 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bbc:	e028      	b.n	8003c10 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fb42 	bl	800224c <LL_ADC_IsEnabled>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fb12 	bl	80021fc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bd8:	f7fe f81e 	bl	8001c18 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d914      	bls.n	8003c10 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00d      	beq.n	8003c10 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf8:	f043 0210 	orr.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d1cf      	bne.n	8003bbe <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	8000003f 	.word	0x8000003f
 8003c2c:	46021000 	.word	0x46021000

08003c30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fb18 	bl	8002272 <LL_ADC_IsDisableOngoing>
 8003c42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe faff 	bl	800224c <LL_ADC_IsEnabled>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d047      	beq.n	8003ce4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d144      	bne.n	8003ce4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030d 	and.w	r3, r3, #13
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10c      	bne.n	8003c82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fad9 	bl	8002224 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2203      	movs	r2, #3
 8003c78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd ffcd 	bl	8001c18 <HAL_GetTick>
 8003c7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c80:	e029      	b.n	8003cd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e023      	b.n	8003ce6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c9e:	f7fd ffbb 	bl	8001c18 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d914      	bls.n	8003cd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1dc      	bne.n	8003c9e <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <LL_ADC_StartCalibration>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <LL_ADC_StartCalibration+0x4c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00c      	beq.n	8003d1c <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <LL_ADC_StartCalibration+0x50>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
}
 8003d1a:	e009      	b.n	8003d30 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	46021000 	.word	0x46021000
 8003d40:	7ffeffc0 	.word	0x7ffeffc0

08003d44 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_ADCEx_Calibration_Start+0x1e>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e133      	b.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x286>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff4c 	bl	8003c30 <ADC_Disable>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 8119 	bne.w	8003fda <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	f043 0202 	orr.w	r2, r3, #2
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a8e      	ldr	r2, [pc, #568]	; (8003ffc <HAL_ADCEx_Calibration_Start+0x290>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d150      	bne.n	8003e68 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0203 	bic.w	r2, r2, #3
 8003dec:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff73 	bl	8003cf0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e0a:	e014      	b.n	8003e36 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_ADCEx_Calibration_Start+0x294>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d90d      	bls.n	8003e36 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	f023 0312 	bic.w	r3, r3, #18
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0dd      	b.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff82 	bl	8003d44 <LL_ADC_IsCalibrationOnGoing>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e2      	bne.n	8003e0c <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68d9      	ldr	r1, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
 8003e66:	e0af      	b.n	8003fc8 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_ADCEx_Calibration_Start+0x298>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003e72:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_ADCEx_Calibration_Start+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f240 4255 	movw	r2, #1109	; 0x455
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d012      	beq.n	8003eac <HAL_ADCEx_Calibration_Start+0x140>
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f240 4276 	movw	r2, #1142	; 0x476
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00d      	beq.n	8003eac <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f240 4281 	movw	r2, #1153	; 0x481
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADCEx_Calibration_Start+0x138>
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	f240 4282 	movw	r2, #1154	; 0x482
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d16d      	bne.n	8003f80 <HAL_ADCEx_Calibration_Start+0x214>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eaa:	d369      	bcc.n	8003f80 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fe4f 	bl	8003b50 <ADC_Enable>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 8083 	bne.w	8003fc8 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003ed4:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ede:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003eea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003efe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fe94 	bl	8003c30 <ADC_Disable>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003f14:	d109      	bne.n	8003f2a <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f40:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f42:	e014      	b.n	8003f6e <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3301      	adds	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <HAL_ADCEx_Calibration_Start+0x294>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90d      	bls.n	8003f6e <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f56:	f023 0312 	bic.w	r3, r3, #18
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fee6 	bl	8003d44 <LL_ADC_IsCalibrationOnGoing>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e2      	bne.n	8003f44 <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003f7e:	e023      	b.n	8003fc8 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff feb2 	bl	8003cf0 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f8c:	e014      	b.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3301      	adds	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <HAL_ADCEx_Calibration_Start+0x294>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d90d      	bls.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa0:	f023 0312 	bic.w	r3, r3, #18
 8003fa4:	f043 0210 	orr.w	r2, r3, #16
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e01c      	b.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fec1 	bl	8003d44 <LL_ADC_IsCalibrationOnGoing>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e2      	bne.n	8003f8e <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fcc:	f023 0303 	bic.w	r3, r3, #3
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	679a      	str	r2, [r3, #120]	; 0x78
 8003fd8:	e005      	b.n	8003fe6 <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	f043 0210 	orr.w	r2, r3, #16
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	46021000 	.word	0x46021000
 8004000:	01ba813f 	.word	0x01ba813f
 8004004:	e0044000 	.word	0xe0044000
 8004008:	7ffeffc0 	.word	0x7ffeffc0

0800400c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004028:	4013      	ands	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <__NVIC_SetPriorityGrouping+0x44>)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	60d3      	str	r3, [r2, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <__NVIC_GetPriorityGrouping+0x18>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 0307 	and.w	r3, r3, #7
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db0b      	blt.n	800409a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <__NVIC_EnableIRQ+0x38>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2001      	movs	r0, #1
 8004092:	fa00 f202 	lsl.w	r2, r0, r2
 8004096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e100 	.word	0xe000e100

080040ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db12      	blt.n	80040e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	490a      	ldr	r1, [pc, #40]	; (80040f0 <__NVIC_DisableIRQ+0x44>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	3320      	adds	r3, #32
 80040d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040d8:	f3bf 8f4f 	dsb	sy
}
 80040dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040de:	f3bf 8f6f 	isb	sy
}
 80040e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000e100 	.word	0xe000e100

080040f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004104:	2b00      	cmp	r3, #0
 8004106:	db0a      	blt.n	800411e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	490c      	ldr	r1, [pc, #48]	; (8004140 <__NVIC_SetPriority+0x4c>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	0112      	lsls	r2, r2, #4
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	440b      	add	r3, r1
 8004118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800411c:	e00a      	b.n	8004134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	4908      	ldr	r1, [pc, #32]	; (8004144 <__NVIC_SetPriority+0x50>)
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	3b04      	subs	r3, #4
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	440b      	add	r3, r1
 8004132:	761a      	strb	r2, [r3, #24]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000e100 	.word	0xe000e100
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f1c3 0307 	rsb	r3, r3, #7
 8004162:	2b04      	cmp	r3, #4
 8004164:	bf28      	it	cs
 8004166:	2304      	movcs	r3, #4
 8004168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3304      	adds	r3, #4
 800416e:	2b06      	cmp	r3, #6
 8004170:	d902      	bls.n	8004178 <NVIC_EncodePriority+0x30>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3b03      	subs	r3, #3
 8004176:	e000      	b.n	800417a <NVIC_EncodePriority+0x32>
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43da      	mvns	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	401a      	ands	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004190:	f04f 31ff 	mov.w	r1, #4294967295
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	43d9      	mvns	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	4313      	orrs	r3, r2
         );
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ff28 	bl	800400c <__NVIC_SetPriorityGrouping>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041d2:	f7ff ff3f 	bl	8004054 <__NVIC_GetPriorityGrouping>
 80041d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	6978      	ldr	r0, [r7, #20]
 80041de:	f7ff ffb3 	bl	8004148 <NVIC_EncodePriority>
 80041e2:	4602      	mov	r2, r0
 80041e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff82 	bl	80040f4 <__NVIC_SetPriority>
}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff32 	bl	8004070 <__NVIC_EnableIRQ>
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ff42 	bl	80040ac <__NVIC_DisableIRQ>
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004242:	e1ba      	b.n	80045ba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2101      	movs	r1, #1
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 81aa 	beq.w	80045b4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a55      	ldr	r2, [pc, #340]	; (80043b8 <HAL_GPIO_Init+0x188>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d15d      	bne.n	8004324 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800426e:	2201      	movs	r2, #1
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	4013      	ands	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0201 	and.w	r2, r3, #1
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4313      	orrs	r3, r2
 8004290:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004298:	4a48      	ldr	r2, [pc, #288]	; (80043bc <HAL_GPIO_Init+0x18c>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80042a2:	4a46      	ldr	r2, [pc, #280]	; (80043bc <HAL_GPIO_Init+0x18c>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	08da      	lsrs	r2, r3, #3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	3208      	adds	r2, #8
 80042b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220b      	movs	r2, #11
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	08da      	lsrs	r2, r3, #3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3208      	adds	r2, #8
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	2203      	movs	r2, #3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	4013      	ands	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	2202      	movs	r2, #2
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	4313      	orrs	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e067      	b.n	80043f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x104>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b12      	cmp	r3, #18
 8004332:	d145      	bne.n	80043c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3208      	adds	r2, #8
 800433c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004340:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	220f      	movs	r2, #15
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	4013      	ands	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	4313      	orrs	r3, r2
 8004370:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3208      	adds	r2, #8
 800437a:	69f9      	ldr	r1, [r7, #28]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	4013      	ands	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e01e      	b.n	80043f4 <HAL_GPIO_Init+0x1c4>
 80043b6:	bf00      	nop
 80043b8:	46020000 	.word	0x46020000
 80043bc:	08015a44 	.word	0x08015a44
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	2203      	movs	r2, #3
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0203 	and.w	r2, r3, #3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d00b      	beq.n	8004414 <HAL_GPIO_Init+0x1e4>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d007      	beq.n	8004414 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004408:	2b11      	cmp	r3, #17
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b12      	cmp	r3, #18
 8004412:	d130      	bne.n	8004476 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4013      	ands	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	4313      	orrs	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800444a:	2201      	movs	r2, #1
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	4013      	ands	r3, r2
 8004458:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 0201 	and.w	r2, r3, #1
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d017      	beq.n	80044ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	4013      	ands	r3, r2
 8004494:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07c      	beq.n	80045b4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80044ba:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3318      	adds	r3, #24
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	4013      	ands	r3, r2
 80044dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0a9a      	lsrs	r2, r3, #10
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <HAL_GPIO_Init+0x3ac>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	f002 0203 	and.w	r2, r2, #3
 80044ec:	00d2      	lsls	r2, r2, #3
 80044ee:	4093      	lsls	r3, r2
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80044f6:	4938      	ldr	r1, [pc, #224]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	3318      	adds	r3, #24
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004504:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	43db      	mvns	r3, r3
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4013      	ands	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	4013      	ands	r3, r2
 800453c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004558:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	4013      	ands	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 8004588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43db      	mvns	r3, r3
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	4013      	ands	r3, r2
 8004596:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_GPIO_Init+0x3a8>)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3301      	adds	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f ae3d 	bne.w	8004244 <HAL_GPIO_Init+0x14>
  }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	3724      	adds	r7, #36	; 0x24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	46022000 	.word	0x46022000
 80045dc:	002f7f7f 	.word	0x002f7f7f

080045e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
 80045ec:	4613      	mov	r3, r2
 80045ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045f0:	787b      	ldrb	r3, [r7, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045f6:	887a      	ldrh	r2, [r7, #2]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80045fc:	e002      	b.n	8004604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004626:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	4618      	mov	r0, r3
 8004630:	f00b fa8e 	bl	800fb50 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d006      	beq.n	800464e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004640:	4a05      	ldr	r2, [pc, #20]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f807 	bl	800465c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	46022000 	.word	0x46022000

0800465c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e007      	b.n	80046a2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 0204 	bic.w	r2, r3, #4
 800469a:	4905      	ldr	r1, [pc, #20]	; (80046b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40030400 	.word	0x40030400

080046b4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_ICACHE_Enable+0x1c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <HAL_ICACHE_Enable+0x1c>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40030400 	.word	0x40030400

080046d4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0e7      	b.n	80048b6 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc ff2f 	bl	8001564 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004726:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fb0a 	bl	8004d50 <LPTIM_WaitForFlag>
 800473c:	4603      	mov	r3, r0
 800473e:	2b03      	cmp	r3, #3
 8004740:	d101      	bne.n	8004746 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0b7      	b.n	80048b6 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a12      	ldr	r2, [r2, #32]
 8004756:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004758:	2110      	movs	r1, #16
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 faf8 	bl	8004d50 <LPTIM_WaitForFlag>
 8004760:	4603      	mov	r3, r0
 8004762:	2b03      	cmp	r3, #3
 8004764:	d101      	bne.n	800476a <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0a5      	b.n	80048b6 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10e      	bne.n	8004796 <HAL_LPTIM_Init+0xc2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_LPTIM_Init+0xc2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d004      	beq.n	80047b0 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ae:	d103      	bne.n	80047b8 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 031e 	bic.w	r3, r3, #30
 80047b6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d005      	beq.n	80047d0 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80047ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_LPTIM_Init+0x1ec>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047e0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 80047e6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80047ec:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004804:	4313      	orrs	r3, r2
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d004      	beq.n	800481e <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800481c:	d107      	bne.n	800482e <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004826:	4313      	orrs	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004836:	4293      	cmp	r3, r2
 8004838:	d00a      	beq.n	8004850 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004842:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004848:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_LPTIM_Init+0x1f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_LPTIM_Init+0x198>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_LPTIM_Init+0x1f4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
 800487c:	e00e      	b.n	800489c <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_LPTIM_Init+0x1f8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_LPTIM_Init+0x1be>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <HAL_LPTIM_Init+0x1fc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d104      	bne.n	800489c <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	ff39f1fe 	.word	0xff39f1fe
 80048c4:	46004400 	.word	0x46004400
 80048c8:	40009400 	.word	0x40009400
 80048cc:	46004800 	.word	0x46004800
 80048d0:	46004c00 	.word	0x46004c00

080048d4 <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d00c      	beq.n	8004906 <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f4:	d107      	bne.n	8004906 <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004904:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0204 	orr.w	r2, r2, #4
 8004924:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <HAL_LPTIM_Counter_Stop+0x3c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_LPTIM_Counter_Stop+0x3c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69db      	ldr	r3, [r3, #28]
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d120      	bne.n	8004a00 <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d119      	bne.n	8004a00 <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f99c 	bl	8004d28 <HAL_LPTIM_IC_CaptureCallback>
 80049f0:	e002      	b.n	80049f8 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f93e 	bl	8004c74 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d122      	bne.n	8004a56 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d11a      	bne.n	8004a56 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a28:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f971 	bl	8004d28 <HAL_LPTIM_IC_CaptureCallback>
 8004a46:	e002      	b.n	8004a4e <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f913 	bl	8004c74 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	d117      	bne.n	8004a96 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d10f      	bne.n	8004a96 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a7e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f957 	bl	8004d3c <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa4:	d117      	bne.n	8004ad6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004abe:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f937 	bl	8004d3c <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d10d      	bne.n	8004b00 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d106      	bne.n	8004b00 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2202      	movs	r2, #2
 8004af8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8c4 	bl	8004c88 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d10d      	bne.n	8004b2a <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d106      	bne.n	8004b2a <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2204      	movs	r2, #4
 8004b22:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8b9 	bl	8004c9c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d111      	bne.n	8004b5c <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d10a      	bne.n	8004b5c <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8aa 	bl	8004cb0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b6a:	d113      	bne.n	8004b94 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b7a:	d10b      	bne.n	8004b94 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b84:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f88e 	bl	8004cb0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d10d      	bne.n	8004bbe <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d106      	bne.n	8004bbe <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f883 	bl	8004cc4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d10d      	bne.n	8004be8 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d106      	bne.n	8004be8 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2220      	movs	r2, #32
 8004be0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f878 	bl	8004cd8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d10d      	bne.n	8004c12 <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d106      	bne.n	8004c12 <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2240      	movs	r2, #64	; 0x40
 8004c0a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f86d 	bl	8004cec <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d10d      	bne.n	8004c3c <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d106      	bne.n	8004c3c <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f862 	bl	8004d00 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d10f      	bne.n	8004c6c <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5a:	d107      	bne.n	8004c6c <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c64:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f854 	bl	8004d14 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <LPTIM_WaitForFlag+0x58>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a12      	ldr	r2, [pc, #72]	; (8004dac <LPTIM_WaitForFlag+0x5c>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	0b9b      	lsrs	r3, r3, #14
 8004d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d002      	beq.n	8004d9a <LPTIM_WaitForFlag+0x4a>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ec      	bne.n	8004d74 <LPTIM_WaitForFlag+0x24>

  return result;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000000 	.word	0x20000000
 8004dac:	d1b71759 	.word	0xd1b71759

08004db0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	46020800 	.word	0x46020800

08004dd0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10b      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d905      	bls.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004df2:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dfc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e057      	b.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d90a      	bls.n	8004e20 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e1c:	60d3      	str	r3, [r2, #12]
 8004e1e:	e007      	b.n	8004e30 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e28:	4925      	ldr	r1, [pc, #148]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	2232      	movs	r2, #50	; 0x32
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e4e:	e002      	b.n	8004e56 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f3      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01b      	beq.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	099b      	lsrs	r3, r3, #6
 8004e7a:	2232      	movs	r2, #50	; 0x32
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e8c:	e002      	b.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f3      	bne.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	46020800 	.word	0x46020800
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	10624dd3 	.word	0x10624dd3

08004ecc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	46020800 	.word	0x46020800

08004ee8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_PWREx_ConfigSupply+0x94>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_PWREx_ConfigSupply+0x98>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2232      	movs	r2, #50	; 0x32
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_PWREx_ConfigSupply+0x98>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f1a:	f023 0302 	bic.w	r3, r3, #2
 8004f1e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f20:	e002      	b.n	8004f28 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d116      	bne.n	8004f62 <HAL_PWREx_ConfigSupply+0x7a>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f3      	bne.n	8004f22 <HAL_PWREx_ConfigSupply+0x3a>
 8004f3a:	e012      	b.n	8004f62 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f48:	e002      	b.n	8004f50 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_PWREx_ConfigSupply+0x7a>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f3      	bne.n	8004f4a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	10624dd3 	.word	0x10624dd3
 8004f84:	46020800 	.word	0x46020800

08004f88 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004fa8:	f043 0304 	orr.w	r3, r3, #4
 8004fac:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004fb4:	bf30      	wfi
 8004fb6:	e002      	b.n	8004fbe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004fb8:	bf40      	sev
    __WFE();
 8004fba:	bf20      	wfe
    __WFE();
 8004fbc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6113      	str	r3, [r2, #16]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	46020800 	.word	0x46020800
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fee:	6113      	str	r3, [r2, #16]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	46020800 	.word	0x46020800

08005000 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_PWREx_EnableVddA+0x1c>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <HAL_PWREx_EnableVddA+0x1c>)
 800500a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800500e:	6113      	str	r3, [r2, #16]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	46020800 	.word	0x46020800

08005020 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	46020800 	.word	0x46020800

08005040 <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005052:	f000 8090 	beq.w	8005176 <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 8005056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505a:	f200 8098 	bhi.w	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 800505e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005062:	d07c      	beq.n	800515e <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 8005064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005068:	f200 8091 	bhi.w	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 800506c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005070:	d069      	beq.n	8005146 <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 8005072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005076:	f200 808a 	bhi.w	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800507e:	d056      	beq.n	800512e <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 8005080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005084:	f200 8083 	bhi.w	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508c:	d043      	beq.n	8005116 <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005092:	d87c      	bhi.n	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005098:	d031      	beq.n	80050fe <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 800509a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800509e:	d876      	bhi.n	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80050a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a4:	d020      	beq.n	80050e8 <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 80050a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050aa:	d870      	bhi.n	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d003      	beq.n	80050ba <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 80050b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b6:	d00b      	beq.n	80050d0 <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR5_SRAM6PDS1) */

    default:
    {
      return;
 80050b8:	e069      	b.n	800518e <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	4935      	ldr	r1, [pc, #212]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	604b      	str	r3, [r1, #4]
      break;
 80050ce:	e05f      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 80050d8:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	492e      	ldr	r1, [pc, #184]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
      break;
 80050e6:	e053      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 80050ee:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	4929      	ldr	r1, [pc, #164]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
      break;
 80050fc:	e048      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 8005106:	4b25      	ldr	r3, [pc, #148]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	4923      	ldr	r1, [pc, #140]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
      break;
 8005114:	e03c      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	491d      	ldr	r1, [pc, #116]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
      break;
 800512c:	e030      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8005136:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	4917      	ldr	r1, [pc, #92]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
      break;
 8005144:	e024      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	4911      	ldr	r1, [pc, #68]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
      break;
 800515c:	e018      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	02db      	lsls	r3, r3, #11
 800516e:	490b      	ldr	r1, [pc, #44]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
      break;
 8005174:	e00c      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	4905      	ldr	r1, [pc, #20]	; (800519c <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
      break;
 800518c:	e000      	b.n	8005190 <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 800518e:	bf00      	nop
      break;
    }
  }
}
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	46020800 	.word	0x46020800

080051a0 <HAL_PWREx_EnableSRAM4FastWakeUp>:
  *         Stop 0, Stop 1 and Stop 2 modes, and also increases the LPDMA access time
  *         to SRAM4 during Stop modes.
  * @retval None.
  */
void HAL_PWREx_EnableSRAM4FastWakeUp(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_SRAM4FWU);
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a04      	ldr	r2, [pc, #16]	; (80051bc <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 80051aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051ae:	6053      	str	r3, [r2, #4]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	46020800 	.word	0x46020800

080051c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	; 0x38
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f000 bec8 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051da:	4b99      	ldr	r3, [pc, #612]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e4:	4b96      	ldr	r3, [pc, #600]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 816c 	beq.w	80054d4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_RCC_OscConfig+0x52>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b0c      	cmp	r3, #12
 8005206:	f040 80de 	bne.w	80053c6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 80da 	bne.w	80053c6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f000 bea5 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005224:	4b86      	ldr	r3, [pc, #536]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <HAL_RCC_OscConfig+0x7a>
 8005230:	4b83      	ldr	r3, [pc, #524]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005238:	e005      	b.n	8005246 <HAL_RCC_OscConfig+0x86>
 800523a:	4b81      	ldr	r3, [pc, #516]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800523c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005246:	4293      	cmp	r3, r2
 8005248:	d255      	bcs.n	80052f6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fa17 	bl	8006688 <RCC_SetFlashLatencyFromMSIRange>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f000 be82 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800526c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005270:	6093      	str	r3, [r2, #8]
 8005272:	4b73      	ldr	r3, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	4970      	ldr	r1, [pc, #448]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800528c:	d309      	bcc.n	80052a2 <HAL_RCC_OscConfig+0xe2>
 800528e:	4b6c      	ldr	r3, [pc, #432]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 021f 	bic.w	r2, r3, #31
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4969      	ldr	r1, [pc, #420]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800529c:	4313      	orrs	r3, r2
 800529e:	60cb      	str	r3, [r1, #12]
 80052a0:	e07e      	b.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da0a      	bge.n	80052c0 <HAL_RCC_OscConfig+0x100>
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	4961      	ldr	r1, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60cb      	str	r3, [r1, #12]
 80052be:	e06f      	b.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d30a      	bcc.n	80052e0 <HAL_RCC_OscConfig+0x120>
 80052ca:	4b5d      	ldr	r3, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	4959      	ldr	r1, [pc, #356]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	60cb      	str	r3, [r1, #12]
 80052de:	e05f      	b.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	03db      	lsls	r3, r3, #15
 80052ee:	4954      	ldr	r1, [pc, #336]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60cb      	str	r3, [r1, #12]
 80052f4:	e054      	b.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80052f6:	4b52      	ldr	r3, [pc, #328]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4a51      	ldr	r2, [pc, #324]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	494c      	ldr	r1, [pc, #304]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005310:	4313      	orrs	r3, r2
 8005312:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800531c:	d309      	bcc.n	8005332 <HAL_RCC_OscConfig+0x172>
 800531e:	4b48      	ldr	r3, [pc, #288]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f023 021f 	bic.w	r2, r3, #31
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4945      	ldr	r1, [pc, #276]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800532c:	4313      	orrs	r3, r2
 800532e:	60cb      	str	r3, [r1, #12]
 8005330:	e028      	b.n	8005384 <HAL_RCC_OscConfig+0x1c4>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0a      	bge.n	8005350 <HAL_RCC_OscConfig+0x190>
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	015b      	lsls	r3, r3, #5
 8005348:	493d      	ldr	r1, [pc, #244]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800534a:	4313      	orrs	r3, r2
 800534c:	60cb      	str	r3, [r1, #12]
 800534e:	e019      	b.n	8005384 <HAL_RCC_OscConfig+0x1c4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d30a      	bcc.n	8005370 <HAL_RCC_OscConfig+0x1b0>
 800535a:	4b39      	ldr	r3, [pc, #228]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	4935      	ldr	r1, [pc, #212]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800536a:	4313      	orrs	r3, r2
 800536c:	60cb      	str	r3, [r1, #12]
 800536e:	e009      	b.n	8005384 <HAL_RCC_OscConfig+0x1c4>
 8005370:	4b33      	ldr	r3, [pc, #204]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	03db      	lsls	r3, r3, #15
 800537e:	4930      	ldr	r1, [pc, #192]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005380:	4313      	orrs	r3, r2
 8005382:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	4618      	mov	r0, r3
 8005390:	f001 f97a 	bl	8006688 <RCC_SetFlashLatencyFromMSIRange>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f000 bde5 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80053a0:	f001 f8e4 	bl	800656c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <HAL_RCC_OscConfig+0x284>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fc fa97 	bl	80018dc <HAL_InitTick>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 808a 	beq.w	80054d2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80053be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c2:	f000 bdd2 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d066      	beq.n	800549c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053da:	f7fc fc1d 	bl	8001c18 <HAL_GetTick>
 80053de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053e0:	e009      	b.n	80053f6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e2:	f7fc fc19 	bl	8001c18 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d902      	bls.n	80053f6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	f000 bdba 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ef      	beq.n	80053e2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005402:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	4a0e      	ldr	r2, [pc, #56]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800540c:	6093      	str	r3, [r2, #8]
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	4909      	ldr	r1, [pc, #36]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005428:	d30e      	bcc.n	8005448 <HAL_RCC_OscConfig+0x288>
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f023 021f 	bic.w	r2, r3, #31
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4902      	ldr	r1, [pc, #8]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005438:	4313      	orrs	r3, r2
 800543a:	60cb      	str	r3, [r1, #12]
 800543c:	e04a      	b.n	80054d4 <HAL_RCC_OscConfig+0x314>
 800543e:	bf00      	nop
 8005440:	46020c00 	.word	0x46020c00
 8005444:	20000004 	.word	0x20000004
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	da0a      	bge.n	8005466 <HAL_RCC_OscConfig+0x2a6>
 8005450:	4b98      	ldr	r3, [pc, #608]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	015b      	lsls	r3, r3, #5
 800545e:	4995      	ldr	r1, [pc, #596]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	60cb      	str	r3, [r1, #12]
 8005464:	e036      	b.n	80054d4 <HAL_RCC_OscConfig+0x314>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d30a      	bcc.n	8005486 <HAL_RCC_OscConfig+0x2c6>
 8005470:	4b90      	ldr	r3, [pc, #576]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	498d      	ldr	r1, [pc, #564]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005480:	4313      	orrs	r3, r2
 8005482:	60cb      	str	r3, [r1, #12]
 8005484:	e026      	b.n	80054d4 <HAL_RCC_OscConfig+0x314>
 8005486:	4b8b      	ldr	r3, [pc, #556]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	03db      	lsls	r3, r3, #15
 8005494:	4987      	ldr	r1, [pc, #540]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	60cb      	str	r3, [r1, #12]
 800549a:	e01b      	b.n	80054d4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800549c:	4b85      	ldr	r3, [pc, #532]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a84      	ldr	r2, [pc, #528]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054a8:	f7fc fbb6 	bl	8001c18 <HAL_GetTick>
 80054ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80054ae:	e009      	b.n	80054c4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b0:	f7fc fbb2 	bl	8001c18 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d902      	bls.n	80054c4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	f000 bd53 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80054c4:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ef      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2f0>
 80054d0:	e000      	b.n	80054d4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 808b 	beq.w	80055f8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_OscConfig+0x334>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d109      	bne.n	8005502 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d17d      	bne.n	80055f8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f000 bd34 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x35a>
 800550c:	4b69      	ldr	r3, [pc, #420]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e041      	b.n	800559e <HAL_RCC_OscConfig+0x3de>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005522:	d112      	bne.n	800554a <HAL_RCC_OscConfig+0x38a>
 8005524:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a62      	ldr	r2, [pc, #392]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800552a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b60      	ldr	r3, [pc, #384]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5f      	ldr	r2, [pc, #380]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5c      	ldr	r2, [pc, #368]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e029      	b.n	800559e <HAL_RCC_OscConfig+0x3de>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005552:	d112      	bne.n	800557a <HAL_RCC_OscConfig+0x3ba>
 8005554:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a56      	ldr	r2, [pc, #344]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800555a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b54      	ldr	r3, [pc, #336]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e011      	b.n	800559e <HAL_RCC_OscConfig+0x3de>
 800557a:	4b4e      	ldr	r3, [pc, #312]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a4d      	ldr	r2, [pc, #308]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b4b      	ldr	r3, [pc, #300]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800558c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4b48      	ldr	r3, [pc, #288]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a47      	ldr	r2, [pc, #284]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005598:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800559c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d014      	beq.n	80055d0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80055a6:	f7fc fb37 	bl	8001c18 <HAL_GetTick>
 80055aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ac:	e009      	b.n	80055c2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ae:	f7fc fb33 	bl	8001c18 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	; 0x64
 80055ba:	d902      	bls.n	80055c2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	f000 bcd4 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c2:	4b3c      	ldr	r3, [pc, #240]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ef      	beq.n	80055ae <HAL_RCC_OscConfig+0x3ee>
 80055ce:	e013      	b.n	80055f8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80055d0:	f7fc fb22 	bl	8001c18 <HAL_GetTick>
 80055d4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d6:	e009      	b.n	80055ec <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fc fb1e 	bl	8001c18 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d902      	bls.n	80055ec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	f000 bcbf 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ef      	bne.n	80055d8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05f      	beq.n	80056c4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2b04      	cmp	r3, #4
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x456>
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	2b0c      	cmp	r3, #12
 800560e:	d114      	bne.n	800563a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b02      	cmp	r3, #2
 8005614:	d111      	bne.n	800563a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f000 bca3 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	4920      	ldr	r1, [pc, #128]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005634:	4313      	orrs	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005638:	e044      	b.n	80056c4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d024      	beq.n	800568c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800564e:	f7fc fae3 	bl	8001c18 <HAL_GetTick>
 8005652:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005654:	e009      	b.n	800566a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005656:	f7fc fadf 	bl	8001c18 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d902      	bls.n	800566a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	f000 bc80 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ef      	beq.n	8005656 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	490b      	ldr	r1, [pc, #44]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]
 800568a:	e01b      	b.n	80056c4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <HAL_RCC_OscConfig+0x4f4>)
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005698:	f7fc fabe 	bl	8001c18 <HAL_GetTick>
 800569c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a0:	f7fc faba 	bl	8001c18 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d904      	bls.n	80056b8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	f000 bc5b 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
 80056b4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b8:	4baf      	ldr	r3, [pc, #700]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ed      	bne.n	80056a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80c8 	beq.w	8005862 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d8:	4ba7      	ldr	r3, [pc, #668]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80056da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d111      	bne.n	800570a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4ba4      	ldr	r3, [pc, #656]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ec:	4aa2      	ldr	r2, [pc, #648]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80056ee:	f043 0304 	orr.w	r3, r3, #4
 80056f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80056f6:	4ba0      	ldr	r3, [pc, #640]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80056f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800570a:	4b9c      	ldr	r3, [pc, #624]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d119      	bne.n	800574a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005716:	4b99      	ldr	r3, [pc, #612]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	4a98      	ldr	r2, [pc, #608]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005722:	f7fc fa79 	bl	8001c18 <HAL_GetTick>
 8005726:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005728:	e009      	b.n	800573e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572a:	f7fc fa75 	bl	8001c18 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d902      	bls.n	800573e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	f000 bc16 	b.w	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800573e:	4b8f      	ldr	r3, [pc, #572]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ef      	beq.n	800572a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d05f      	beq.n	8005812 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005752:	4b89      	ldr	r3, [pc, #548]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005758:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005764:	429a      	cmp	r2, r3
 8005766:	d037      	beq.n	80057d8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e3f4      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01b      	beq.n	80057c2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800578a:	4b7b      	ldr	r3, [pc, #492]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800578c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005790:	4a79      	ldr	r2, [pc, #484]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005792:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005796:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800579a:	f7fc fa3d 	bl	8001c18 <HAL_GetTick>
 800579e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fc fa39 	bl	8001c18 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e3da      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057b4:	4b70      	ldr	r3, [pc, #448]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80057b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1ef      	bne.n	80057a2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80057c2:	4b6d      	ldr	r3, [pc, #436]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80057c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	4969      	ldr	r1, [pc, #420]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80057d8:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80057da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057de:	4a66      	ldr	r2, [pc, #408]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 80057e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80057e8:	f7fc fa16 	bl	8001c18 <HAL_GetTick>
 80057ec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fc fa12 	bl	8001c18 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e3b3      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005802:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <HAL_RCC_OscConfig+0x630>
 8005810:	e01b      	b.n	800584a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005812:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005818:	4a57      	ldr	r2, [pc, #348]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800581a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800581e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005822:	f7fc f9f9 	bl	8001c18 <HAL_GetTick>
 8005826:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582a:	f7fc f9f5 	bl	8001c18 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b05      	cmp	r3, #5
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e396      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800583c:	4b4e      	ldr	r3, [pc, #312]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800583e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1ef      	bne.n	800582a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800584a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4b49      	ldr	r3, [pc, #292]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005858:	4a47      	ldr	r2, [pc, #284]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800585a:	f023 0304 	bic.w	r3, r3, #4
 800585e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8111 	beq.w	8005a92 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005870:	2300      	movs	r3, #0
 8005872:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005876:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d111      	bne.n	80058a8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005884:	4b3c      	ldr	r3, [pc, #240]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800588c:	f043 0304 	orr.w	r3, r3, #4
 8005890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005894:	4b38      	ldr	r3, [pc, #224]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d118      	bne.n	80058e6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80058b4:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	4a30      	ldr	r2, [pc, #192]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c0:	f7fc f9aa 	bl	8001c18 <HAL_GetTick>
 80058c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c8:	f7fc f9a6 	bl	8001c18 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e347      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <HAL_RCC_OscConfig+0x7bc>)
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01f      	beq.n	8005932 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800590e:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800591e:	e018      	b.n	8005952 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005926:	4a14      	ldr	r2, [pc, #80]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005930:	e00f      	b.n	8005952 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005938:	4a0f      	ldr	r2, [pc, #60]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 8005944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005948:	4a0b      	ldr	r2, [pc, #44]	; (8005978 <HAL_RCC_OscConfig+0x7b8>)
 800594a:	f023 0304 	bic.w	r3, r3, #4
 800594e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d057      	beq.n	8005a0a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800595a:	f7fc f95d 	bl	8001c18 <HAL_GetTick>
 800595e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005960:	e00e      	b.n	8005980 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005962:	f7fc f959 	bl	8001c18 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005970:	4293      	cmp	r3, r2
 8005972:	d905      	bls.n	8005980 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e2f8      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
 8005978:	46020c00 	.word	0x46020c00
 800597c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005980:	4b9c      	ldr	r3, [pc, #624]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0e9      	beq.n	8005962 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01b      	beq.n	80059d2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800599a:	4b96      	ldr	r3, [pc, #600]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 800599c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059a0:	4a94      	ldr	r2, [pc, #592]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80059aa:	e00a      	b.n	80059c2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fc f934 	bl	8001c18 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e2d3      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80059c2:	4b8c      	ldr	r3, [pc, #560]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 80059c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ed      	beq.n	80059ac <HAL_RCC_OscConfig+0x7ec>
 80059d0:	e053      	b.n	8005a7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059d2:	4b88      	ldr	r3, [pc, #544]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 80059d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d8:	4a86      	ldr	r2, [pc, #536]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 80059da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fc f918 	bl	8001c18 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e2b7      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059fa:	4b7e      	ldr	r3, [pc, #504]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ed      	bne.n	80059e4 <HAL_RCC_OscConfig+0x824>
 8005a08:	e037      	b.n	8005a7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005a0a:	f7fc f905 	bl	8001c18 <HAL_GetTick>
 8005a0e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a12:	f7fc f901 	bl	8001c18 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e2a0      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a28:	4b72      	ldr	r3, [pc, #456]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ed      	bne.n	8005a12 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005a36:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01a      	beq.n	8005a7a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a44:	4b6b      	ldr	r3, [pc, #428]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a4a:	4a6a      	ldr	r2, [pc, #424]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc f8df 	bl	8001c18 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e27e      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a6c:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ed      	bne.n	8005a56 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a7a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a82:	4b5c      	ldr	r3, [pc, #368]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a88:	4a5a      	ldr	r2, [pc, #360]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005a8a:	f023 0304 	bic.w	r3, r3, #4
 8005a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d036      	beq.n	8005b0c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d019      	beq.n	8005ada <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005aa6:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ab0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005ab2:	f7fc f8b1 	bl	8001c18 <HAL_GetTick>
 8005ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aba:	f7fc f8ad 	bl	8001c18 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e24e      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x8fa>
 8005ad8:	e018      	b.n	8005b0c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005ada:	4b46      	ldr	r3, [pc, #280]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a45      	ldr	r2, [pc, #276]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005ae6:	f7fc f897 	bl	8001c18 <HAL_GetTick>
 8005aea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aee:	f7fc f893 	bl	8001c18 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e234      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b00:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d036      	beq.n	8005b86 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d019      	beq.n	8005b54 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005b20:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a33      	ldr	r2, [pc, #204]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b2c:	f7fc f874 	bl	8001c18 <HAL_GetTick>
 8005b30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005b34:	f7fc f870 	bl	8001c18 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e211      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005b46:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x974>
 8005b52:	e018      	b.n	8005b86 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b60:	f7fc f85a 	bl	8001c18 <HAL_GetTick>
 8005b64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005b68:	f7fc f856 	bl	8001c18 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e1f7      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d07f      	beq.n	8005c92 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d062      	beq.n	8005c60 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ba4:	6093      	str	r3, [r2, #8]
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	4910      	ldr	r1, [pc, #64]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005bc0:	d309      	bcc.n	8005bd6 <HAL_RCC_OscConfig+0xa16>
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 021f 	bic.w	r2, r3, #31
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	4909      	ldr	r1, [pc, #36]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60cb      	str	r3, [r1, #12]
 8005bd4:	e02a      	b.n	8005c2c <HAL_RCC_OscConfig+0xa6c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0c      	bge.n	8005bf8 <HAL_RCC_OscConfig+0xa38>
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	4901      	ldr	r1, [pc, #4]	; (8005bf4 <HAL_RCC_OscConfig+0xa34>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60cb      	str	r3, [r1, #12]
 8005bf2:	e01b      	b.n	8005c2c <HAL_RCC_OscConfig+0xa6c>
 8005bf4:	46020c00 	.word	0x46020c00
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d30a      	bcc.n	8005c18 <HAL_RCC_OscConfig+0xa58>
 8005c02:	4ba1      	ldr	r3, [pc, #644]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	029b      	lsls	r3, r3, #10
 8005c10:	499d      	ldr	r1, [pc, #628]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60cb      	str	r3, [r1, #12]
 8005c16:	e009      	b.n	8005c2c <HAL_RCC_OscConfig+0xa6c>
 8005c18:	4b9b      	ldr	r3, [pc, #620]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	03db      	lsls	r3, r3, #15
 8005c26:	4998      	ldr	r1, [pc, #608]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005c2c:	4b96      	ldr	r3, [pc, #600]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a95      	ldr	r2, [pc, #596]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c32:	f043 0310 	orr.w	r3, r3, #16
 8005c36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c38:	f7fb ffee 	bl	8001c18 <HAL_GetTick>
 8005c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c40:	f7fb ffea 	bl	8001c18 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e18b      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c52:	4b8d      	ldr	r3, [pc, #564]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0xa80>
 8005c5e:	e018      	b.n	8005c92 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005c60:	4b89      	ldr	r3, [pc, #548]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a88      	ldr	r2, [pc, #544]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c6c:	f7fb ffd4 	bl	8001c18 <HAL_GetTick>
 8005c70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c74:	f7fb ffd0 	bl	8001c18 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e171      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c86:	4b80      	ldr	r3, [pc, #512]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8166 	beq.w	8005f68 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ca2:	4b79      	ldr	r3, [pc, #484]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	f000 80f2 	beq.w	8005e94 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f040 80c5 	bne.w	8005e44 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	4b73      	ldr	r3, [pc, #460]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a72      	ldr	r2, [pc, #456]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005cc6:	f7fb ffa7 	bl	8001c18 <HAL_GetTick>
 8005cca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fb ffa3 	bl	8001c18 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e144      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ce0:	4b69      	ldr	r3, [pc, #420]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cec:	4b66      	ldr	r3, [pc, #408]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d111      	bne.n	8005d1e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	4a61      	ldr	r2, [pc, #388]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005d0a:	4b5f      	ldr	r3, [pc, #380]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005d1e:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <HAL_RCC_OscConfig+0xccc>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005d32:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <HAL_RCC_OscConfig+0xccc>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4a55      	ldr	r2, [pc, #340]	; (8005e8c <HAL_RCC_OscConfig+0xccc>)
 8005d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005d3e:	4b52      	ldr	r3, [pc, #328]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d52:	3a01      	subs	r2, #1
 8005d54:	0212      	lsls	r2, r2, #8
 8005d56:	4311      	orrs	r1, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	494a      	ldr	r1, [pc, #296]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	628b      	str	r3, [r1, #40]	; 0x28
 8005d64:	4b48      	ldr	r3, [pc, #288]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d68:	4b49      	ldr	r3, [pc, #292]	; (8005e90 <HAL_RCC_OscConfig+0xcd0>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d70:	3a01      	subs	r2, #1
 8005d72:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	0252      	lsls	r2, r2, #9
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	4311      	orrs	r1, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d86:	3a01      	subs	r2, #1
 8005d88:	0412      	lsls	r2, r2, #16
 8005d8a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d94:	3a01      	subs	r2, #1
 8005d96:	0612      	lsls	r2, r2, #24
 8005d98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	493a      	ldr	r1, [pc, #232]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005dba:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	4a32      	ldr	r2, [pc, #200]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005dc0:	f043 0310 	orr.w	r3, r3, #16
 8005dc4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005dc6:	4b30      	ldr	r3, [pc, #192]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f023 020c 	bic.w	r2, r3, #12
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd2:	492d      	ldr	r1, [pc, #180]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005dd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d105      	bne.n	8005dec <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005de0:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <HAL_RCC_OscConfig+0xccc>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <HAL_RCC_OscConfig+0xccc>)
 8005de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dea:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005dec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfa:	4a23      	ldr	r2, [pc, #140]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e1c:	f7fb fefc 	bl	8001c18 <HAL_GetTick>
 8005e20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fb fef8 	bl	8001c18 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e099      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0xc64>
 8005e42:	e091      	b.n	8005f68 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e50:	f7fb fee2 	bl	8001c18 <HAL_GetTick>
 8005e54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e58:	f7fb fede 	bl	8001c18 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e07f      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	4a03      	ldr	r2, [pc, #12]	; (8005e88 <HAL_RCC_OscConfig+0xcc8>)
 8005e7c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	6293      	str	r3, [r2, #40]	; 0x28
 8005e86:	e06f      	b.n	8005f68 <HAL_RCC_OscConfig+0xda8>
 8005e88:	46020c00 	.word	0x46020c00
 8005e8c:	46020800 	.word	0x46020800
 8005e90:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d039      	beq.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0203 	and.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d132      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d129      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d122      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d11a      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	0a5b      	lsrs	r3, r3, #9
 8005eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d111      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d108      	bne.n	8005f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	0e1b      	lsrs	r3, r3, #24
 8005f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e024      	b.n	8005f6a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	08db      	lsrs	r3, r3, #3
 8005f26:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d01a      	beq.n	8005f68 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005f32:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	4a0f      	ldr	r2, [pc, #60]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fb fe6b 	bl	8001c18 <HAL_GetTick>
 8005f42:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005f44:	bf00      	nop
 8005f46:	f7fb fe67 	bl	8001c18 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d0f9      	beq.n	8005f46 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f56:	4a07      	ldr	r2, [pc, #28]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	4a04      	ldr	r2, [pc, #16]	; (8005f74 <HAL_RCC_OscConfig+0xdb4>)
 8005f62:	f043 0310 	orr.w	r3, r3, #16
 8005f66:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3738      	adds	r7, #56	; 0x38
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	46020c00 	.word	0x46020c00

08005f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e1d9      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f8c:	4b9b      	ldr	r3, [pc, #620]	; (80061fc <HAL_RCC_ClockConfig+0x284>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d910      	bls.n	8005fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9a:	4b98      	ldr	r3, [pc, #608]	; (80061fc <HAL_RCC_ClockConfig+0x284>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 020f 	bic.w	r2, r3, #15
 8005fa2:	4996      	ldr	r1, [pc, #600]	; (80061fc <HAL_RCC_ClockConfig+0x284>)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005faa:	4b94      	ldr	r3, [pc, #592]	; (80061fc <HAL_RCC_ClockConfig+0x284>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e1c1      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d010      	beq.n	8005fea <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	4b8c      	ldr	r3, [pc, #560]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d908      	bls.n	8005fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005fd8:	4b89      	ldr	r3, [pc, #548]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	4986      	ldr	r1, [pc, #536]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	4b81      	ldr	r3, [pc, #516]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006004:	429a      	cmp	r2, r3
 8006006:	d909      	bls.n	800601c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006008:	4b7d      	ldr	r3, [pc, #500]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	497a      	ldr	r1, [pc, #488]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006018:	4313      	orrs	r3, r2
 800601a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d010      	beq.n	800604a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	4b74      	ldr	r3, [pc, #464]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006034:	429a      	cmp	r2, r3
 8006036:	d908      	bls.n	800604a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4b71      	ldr	r3, [pc, #452]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	496e      	ldr	r1, [pc, #440]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006046:	4313      	orrs	r3, r2
 8006048:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d010      	beq.n	8006078 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	4b69      	ldr	r3, [pc, #420]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	429a      	cmp	r2, r3
 8006064:	d908      	bls.n	8006078 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006066:	4b66      	ldr	r3, [pc, #408]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 020f 	bic.w	r2, r3, #15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4963      	ldr	r1, [pc, #396]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006074:	4313      	orrs	r3, r2
 8006076:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80d2 	beq.w	800622a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d143      	bne.n	800611a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006092:	4b5b      	ldr	r3, [pc, #364]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80060a0:	4b57      	ldr	r3, [pc, #348]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80060a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a6:	4a56      	ldr	r2, [pc, #344]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80060a8:	f043 0304 	orr.w	r3, r3, #4
 80060ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80060b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80060c2:	f7fb fda9 	bl	8001c18 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80060c8:	4b4e      	ldr	r3, [pc, #312]	; (8006204 <HAL_RCC_ClockConfig+0x28c>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00f      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80060d6:	f7fb fd9f 	bl	8001c18 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e12b      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80060e8:	4b46      	ldr	r3, [pc, #280]	; (8006204 <HAL_RCC_ClockConfig+0x28c>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80060fa:	4b41      	ldr	r3, [pc, #260]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80060fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006100:	4a3f      	ldr	r2, [pc, #252]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006102:	f023 0304 	bic.w	r3, r3, #4
 8006106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d121      	bne.n	800615a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e112      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006122:	4b37      	ldr	r3, [pc, #220]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d115      	bne.n	800615a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e106      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800613a:	4b31      	ldr	r3, [pc, #196]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e0fa      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800614a:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0f2      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800615a:	4b29      	ldr	r3, [pc, #164]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f023 0203 	bic.w	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4926      	ldr	r1, [pc, #152]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006168:	4313      	orrs	r3, r2
 800616a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800616c:	f7fb fd54 	bl	8001c18 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d112      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800617c:	f7fb fd4c 	bl	8001c18 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e0d6      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006192:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d1ee      	bne.n	800617c <HAL_RCC_ClockConfig+0x204>
 800619e:	e044      	b.n	800622a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d112      	bne.n	80061ce <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061aa:	f7fb fd35 	bl	8001c18 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0bf      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f003 030c 	and.w	r3, r3, #12
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d1ee      	bne.n	80061aa <HAL_RCC_ClockConfig+0x232>
 80061cc:	e02d      	b.n	800622a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d123      	bne.n	800621e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d8:	f7fb fd1e 	bl	8001c18 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0a8      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061ee:	4b04      	ldr	r3, [pc, #16]	; (8006200 <HAL_RCC_ClockConfig+0x288>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ee      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x260>
 80061fa:	e016      	b.n	800622a <HAL_RCC_ClockConfig+0x2b2>
 80061fc:	40022000 	.word	0x40022000
 8006200:	46020c00 	.word	0x46020c00
 8006204:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006208:	f7fb fd06 	bl	8001c18 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	; 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e090      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800621e:	4b4a      	ldr	r3, [pc, #296]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d1ee      	bne.n	8006208 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d010      	beq.n	8006258 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	4b43      	ldr	r3, [pc, #268]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	429a      	cmp	r2, r3
 8006244:	d208      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006246:	4b40      	ldr	r3, [pc, #256]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 020f 	bic.w	r2, r3, #15
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	493d      	ldr	r1, [pc, #244]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 8006254:	4313      	orrs	r3, r2
 8006256:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <HAL_RCC_ClockConfig+0x3d4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d210      	bcs.n	8006288 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b39      	ldr	r3, [pc, #228]	; (800634c <HAL_RCC_ClockConfig+0x3d4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 020f 	bic.w	r2, r3, #15
 800626e:	4937      	ldr	r1, [pc, #220]	; (800634c <HAL_RCC_ClockConfig+0x3d4>)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_RCC_ClockConfig+0x3d4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e05b      	b.n	8006340 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d010      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d208      	bcs.n	80062b6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80062a4:	4b28      	ldr	r3, [pc, #160]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4925      	ldr	r1, [pc, #148]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d209      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	4919      	ldr	r1, [pc, #100]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	4b13      	ldr	r3, [pc, #76]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006300:	429a      	cmp	r2, r3
 8006302:	d208      	bcs.n	8006316 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006304:	4b10      	ldr	r3, [pc, #64]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	490d      	ldr	r1, [pc, #52]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 8006312:	4313      	orrs	r3, r2
 8006314:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006316:	f000 f821 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800631a:	4602      	mov	r2, r0
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x3d0>)
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	490a      	ldr	r1, [pc, #40]	; (8006350 <HAL_RCC_ClockConfig+0x3d8>)
 8006326:	5ccb      	ldrb	r3, [r1, r3]
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <HAL_RCC_ClockConfig+0x3dc>)
 800632e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_RCC_ClockConfig+0x3e0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fb fad1 	bl	80018dc <HAL_InitTick>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]

  return status;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	46020c00 	.word	0x46020c00
 800634c:	40022000 	.word	0x40022000
 8006350:	080159ec 	.word	0x080159ec
 8006354:	20000000 	.word	0x20000000
 8006358:	20000004 	.word	0x20000004

0800635c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800635c:	b480      	push	{r7}
 800635e:	b08b      	sub	sp, #44	; 0x2c
 8006360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800636a:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006374:	4b78      	ldr	r3, [pc, #480]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x34>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b0c      	cmp	r3, #12
 8006388:	d121      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d11e      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006390:	4b71      	ldr	r3, [pc, #452]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800639c:	4b6e      	ldr	r3, [pc, #440]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800639e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063a2:	0b1b      	lsrs	r3, r3, #12
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e005      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80063ac:	4b6a      	ldr	r3, [pc, #424]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	0f1b      	lsrs	r3, r3, #28
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80063b8:	4a68      	ldr	r2, [pc, #416]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d110      	bne.n	80063ea <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063cc:	e00d      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063ce:	4b62      	ldr	r3, [pc, #392]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d102      	bne.n	80063e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063da:	4b61      	ldr	r3, [pc, #388]	; (8006560 <HAL_RCC_GetSysClockFreq+0x204>)
 80063dc:	623b      	str	r3, [r7, #32]
 80063de:	e004      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063e6:	4b5e      	ldr	r3, [pc, #376]	; (8006560 <HAL_RCC_GetSysClockFreq+0x204>)
 80063e8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	f040 80ac 	bne.w	800654a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063f2:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80063fc:	4b56      	ldr	r3, [pc, #344]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800640a:	4b53      	ldr	r3, [pc, #332]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006416:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8086 	beq.w	8006546 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d003      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0xec>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d022      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x130>
 8006446:	e043      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006564 <HAL_RCC_GetSysClockFreq+0x208>
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800646a:	ed97 6a01 	vldr	s12, [r7, #4]
 800646e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006568 <HAL_RCC_GetSysClockFreq+0x20c>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800647a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800648a:	e046      	b.n	800651a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006564 <HAL_RCC_GetSysClockFreq+0x208>
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064ae:	ed97 6a01 	vldr	s12, [r7, #4]
 80064b2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006568 <HAL_RCC_GetSysClockFreq+0x20c>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80064ce:	e024      	b.n	800651a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e8:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064f8:	ed97 6a01 	vldr	s12, [r7, #4]
 80064fc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006568 <HAL_RCC_GetSysClockFreq+0x20c>
 8006500:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006504:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006514:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006518:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	0e1b      	lsrs	r3, r3, #24
 8006520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006524:	3301      	adds	r3, #1
 8006526:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006532:	edd7 6a07 	vldr	s13, [r7, #28]
 8006536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800653e:	ee17 3a90 	vmov	r3, s15
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	e001      	b.n	800654a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800654a:	6a3b      	ldr	r3, [r7, #32]
}
 800654c:	4618      	mov	r0, r3
 800654e:	372c      	adds	r7, #44	; 0x2c
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	46020c00 	.word	0x46020c00
 800655c:	08015a04 	.word	0x08015a04
 8006560:	00f42400 	.word	0x00f42400
 8006564:	4b742400 	.word	0x4b742400
 8006568:	46000000 	.word	0x46000000

0800656c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006570:	f7ff fef4 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <HAL_RCC_GetHCLKFreq+0x28>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	4906      	ldr	r1, [pc, #24]	; (8006598 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006580:	5ccb      	ldrb	r3, [r1, r3]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	4a05      	ldr	r2, [pc, #20]	; (800659c <HAL_RCC_GetHCLKFreq+0x30>)
 8006588:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800658a:	4b04      	ldr	r3, [pc, #16]	; (800659c <HAL_RCC_GetHCLKFreq+0x30>)
 800658c:	681b      	ldr	r3, [r3, #0]
}
 800658e:	4618      	mov	r0, r3
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	46020c00 	.word	0x46020c00
 8006598:	080159ec 	.word	0x080159ec
 800659c:	20000000 	.word	0x20000000

080065a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80065a4:	f7ff ffe2 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4903      	ldr	r1, [pc, #12]	; (80065c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	46020c00 	.word	0x46020c00
 80065c4:	080159fc 	.word	0x080159fc

080065c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80065cc:	f7ff ffce 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4903      	ldr	r1, [pc, #12]	; (80065ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	46020c00 	.word	0x46020c00
 80065ec:	080159fc 	.word	0x080159fc

080065f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80065f4:	f7ff ffba 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <HAL_RCC_GetPCLK3Freq+0x20>)
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4903      	ldr	r1, [pc, #12]	; (8006614 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	46020c00 	.word	0x46020c00
 8006614:	080159fc 	.word	0x080159fc

08006618 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	221f      	movs	r2, #31
 8006626:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006628:	4b15      	ldr	r3, [pc, #84]	; (8006680 <HAL_RCC_GetClockConfig+0x68>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f003 0203 	and.w	r2, r3, #3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <HAL_RCC_GetClockConfig+0x68>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <HAL_RCC_GetClockConfig+0x68>)
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <HAL_RCC_GetClockConfig+0x68>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <HAL_RCC_GetClockConfig+0x68>)
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <HAL_RCC_GetClockConfig+0x6c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	46020c00 	.word	0x46020c00
 8006684:	40022000 	.word	0x40022000

08006688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006690:	4b3e      	ldr	r3, [pc, #248]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800669e:	f7fe fc15 	bl	8004ecc <HAL_PWREx_GetVoltageRange>
 80066a2:	6178      	str	r0, [r7, #20]
 80066a4:	e019      	b.n	80066da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	4b39      	ldr	r3, [pc, #228]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80066a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ac:	4a37      	ldr	r2, [pc, #220]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80066ae:	f043 0304 	orr.w	r3, r3, #4
 80066b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80066b6:	4b35      	ldr	r3, [pc, #212]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80066b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066c4:	f7fe fc02 	bl	8004ecc <HAL_PWREx_GetVoltageRange>
 80066c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80066ca:	4b30      	ldr	r3, [pc, #192]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80066cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d0:	4a2e      	ldr	r2, [pc, #184]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80066d2:	f023 0304 	bic.w	r3, r3, #4
 80066d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066e0:	d003      	beq.n	80066ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e8:	d109      	bne.n	80066fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f0:	d202      	bcs.n	80066f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80066f2:	2301      	movs	r3, #1
 80066f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80066f6:	e033      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80066fc:	e030      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006704:	d208      	bcs.n	8006718 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d102      	bne.n	8006714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800670e:	2303      	movs	r3, #3
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	e025      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e035      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671e:	d90f      	bls.n	8006740 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800672c:	d902      	bls.n	8006734 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	e015      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006734:	2301      	movs	r3, #1
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e012      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e00f      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006746:	d109      	bne.n	800675c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674e:	d102      	bne.n	8006756 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006750:	2301      	movs	r3, #1
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	e004      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006756:	2302      	movs	r3, #2
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	e001      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800675c:	2301      	movs	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f023 020f 	bic.w	r2, r3, #15
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d001      	beq.n	8006782 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	46020c00 	.word	0x46020c00
 8006790:	40022000 	.word	0x40022000

08006794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b0ba      	sub	sp, #232	; 0xe8
 800679a:	af00      	add	r7, sp, #0
 800679c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067a0:	2300      	movs	r3, #0
 80067a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067a6:	2300      	movs	r3, #0
 80067a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f002 0401 	and.w	r4, r2, #1
 80067b8:	2500      	movs	r5, #0
 80067ba:	ea54 0305 	orrs.w	r3, r4, r5
 80067be:	d00b      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80067c0:	4bcb      	ldr	r3, [pc, #812]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067c6:	f023 0103 	bic.w	r1, r3, #3
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	4ac7      	ldr	r2, [pc, #796]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f002 0802 	and.w	r8, r2, #2
 80067e4:	f04f 0900 	mov.w	r9, #0
 80067e8:	ea58 0309 	orrs.w	r3, r8, r9
 80067ec:	d00b      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80067ee:	4bc0      	ldr	r3, [pc, #768]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067f4:	f023 010c 	bic.w	r1, r3, #12
 80067f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	4abc      	ldr	r2, [pc, #752]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006800:	430b      	orrs	r3, r1
 8006802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f002 0a04 	and.w	sl, r2, #4
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	ea5a 030b 	orrs.w	r3, sl, fp
 800681a:	d00b      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800681c:	4bb4      	ldr	r3, [pc, #720]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800681e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006822:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682c:	4ab0      	ldr	r2, [pc, #704]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800682e:	430b      	orrs	r3, r1
 8006830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f002 0308 	and.w	r3, r2, #8
 8006840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006844:	2300      	movs	r3, #0
 8006846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800684a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d00b      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006854:	4ba6      	ldr	r3, [pc, #664]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	4aa2      	ldr	r2, [pc, #648]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006866:	430b      	orrs	r3, r1
 8006868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800686c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f002 0310 	and.w	r3, r2, #16
 8006878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006882:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d00b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800688c:	4b98      	ldr	r3, [pc, #608]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	4a94      	ldr	r2, [pc, #592]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f002 0320 	and.w	r3, r2, #32
 80068b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d00b      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80068c4:	4b8a      	ldr	r3, [pc, #552]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068ca:	f023 0107 	bic.w	r1, r3, #7
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d4:	4a86      	ldr	r2, [pc, #536]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d6:	430b      	orrs	r3, r1
 80068d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80068e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d00b      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80068fc:	4b7c      	ldr	r3, [pc, #496]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006902:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690c:	4a78      	ldr	r2, [pc, #480]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690e:	430b      	orrs	r3, r1
 8006910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d00b      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006934:	4b6e      	ldr	r3, [pc, #440]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006944:	4a6a      	ldr	r2, [pc, #424]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006946:	430b      	orrs	r3, r1
 8006948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800694c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006962:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006966:	460b      	mov	r3, r1
 8006968:	4313      	orrs	r3, r2
 800696a:	d00b      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800696c:	4b60      	ldr	r3, [pc, #384]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	4a5c      	ldr	r2, [pc, #368]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697e:	430b      	orrs	r3, r1
 8006980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006994:	2300      	movs	r3, #0
 8006996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800699a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800699e:	460b      	mov	r3, r1
 80069a0:	4313      	orrs	r3, r2
 80069a2:	d00b      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80069a4:	4b52      	ldr	r3, [pc, #328]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069aa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b4:	4a4e      	ldr	r2, [pc, #312]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b6:	430b      	orrs	r3, r1
 80069b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80069c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d00b      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80069dc:	4b44      	ldr	r3, [pc, #272]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069e2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80069e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ec:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ee:	430b      	orrs	r3, r1
 80069f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006a14:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a1a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a24:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d00c      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006a4c:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5e:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a74:	2300      	movs	r3, #0
 8006a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	d04f      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d02d      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d827      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a92:	2b60      	cmp	r3, #96	; 0x60
 8006a94:	d02e      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a96:	2b60      	cmp	r3, #96	; 0x60
 8006a98:	d823      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d006      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d81f      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d011      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006aaa:	e01a      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aac:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	4a0f      	ldr	r2, [pc, #60]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ab8:	e01d      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006abe:	3308      	adds	r3, #8
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 fa41 	bl	8008f48 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006acc:	e013      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad2:	332c      	adds	r3, #44	; 0x2c
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 facf 	bl	8009078 <RCCEx_PLL3_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ae0:	e009      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ae8:	e005      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006aea:	bf00      	nop
 8006aec:	e003      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006aee:	bf00      	nop
 8006af0:	46020c00 	.word	0x46020c00
        break;
 8006af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006afe:	4bb6      	ldr	r3, [pc, #728]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b04:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b10:	4ab1      	ldr	r2, [pc, #708]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b1e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b30:	2300      	movs	r3, #0
 8006b32:	677b      	str	r3, [r7, #116]	; 0x74
 8006b34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	d053      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4a:	d033      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d82c      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b56:	d02f      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5c:	d826      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b62:	d008      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b68:	d820      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b72:	d011      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006b74:	e01a      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b76:	4b98      	ldr	r3, [pc, #608]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	4a97      	ldr	r2, [pc, #604]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b80:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b82:	e01a      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b88:	3308      	adds	r3, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f002 f9dc 	bl	8008f48 <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b96:	e010      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b9c:	332c      	adds	r3, #44	; 0x2c
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f002 fa6a 	bl	8009078 <RCCEx_PLL3_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006baa:	e006      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006bb2:	e002      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10d      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006bc2:	4b85      	ldr	r3, [pc, #532]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bc8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd4:	4a80      	ldr	r2, [pc, #512]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006be2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d046      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c0e:	d028      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c14:	d821      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c1a:	d022      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c20:	d81b      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c26:	d01c      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2c:	d815      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c32:	d008      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d80f      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d00e      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c44:	e009      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f002 f97b 	bl	8008f48 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c58:	e004      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006c6c:	4b5a      	ldr	r3, [pc, #360]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c72:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c7e:	4a56      	ldr	r2, [pc, #344]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006c80:	430b      	orrs	r3, r1
 8006c82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	d03f      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d81e      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006ce3 	.word	0x08006ce3
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006cff 	.word	0x08006cff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cd4:	4b40      	ldr	r3, [pc, #256]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	4a3f      	ldr	r2, [pc, #252]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cde:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006ce0:	e00e      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce6:	332c      	adds	r3, #44	; 0x2c
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 f9c5 	bl	8009078 <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cf4:	e004      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cfc:	e000      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006cfe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d00:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006d08:	4b33      	ldr	r3, [pc, #204]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d0e:	f023 0107 	bic.w	r1, r3, #7
 8006d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1a:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006d22:	e003      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d04d      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d54:	d028      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d5a:	d821      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d60:	d024      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d66:	d81b      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6c:	d00e      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d72:	d815      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d110      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d7e:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006d8a:	e012      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d90:	332c      	adds	r3, #44	; 0x2c
 8006d92:	4618      	mov	r0, r3
 8006d94:	f002 f970 	bl	8009078 <RCCEx_PLL3_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d9e:	e008      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006da6:	e004      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006da8:	bf00      	nop
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006db0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006db2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d110      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dcc:	4a02      	ldr	r2, [pc, #8]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006dd6:	bf00      	nop
 8006dd8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006de0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006df0:	653b      	str	r3, [r7, #80]	; 0x50
 8006df2:	2300      	movs	r3, #0
 8006df4:	657b      	str	r3, [r7, #84]	; 0x54
 8006df6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f000 80b5 	beq.w	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e02:	2300      	movs	r3, #0
 8006e04:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e08:	4b9d      	ldr	r3, [pc, #628]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e16:	4b9a      	ldr	r3, [pc, #616]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1c:	4a98      	ldr	r2, [pc, #608]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006e26:	4b96      	ldr	r3, [pc, #600]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006e3e:	4b91      	ldr	r3, [pc, #580]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	4a90      	ldr	r2, [pc, #576]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e4a:	f7fa fee5 	bl	8001c18 <HAL_GetTick>
 8006e4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e52:	e00b      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e54:	f7fa fee0 	bl	8001c18 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d903      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e6a:	e005      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e6c:	4b85      	ldr	r3, [pc, #532]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ed      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006e78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d165      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e80:	4b7f      	ldr	r3, [pc, #508]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d023      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01b      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ea6:	4b76      	ldr	r3, [pc, #472]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006eb4:	4b72      	ldr	r3, [pc, #456]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eba:	4a71      	ldr	r2, [pc, #452]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ec4:	4b6e      	ldr	r3, [pc, #440]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eca:	4a6d      	ldr	r2, [pc, #436]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ed4:	4a6a      	ldr	r2, [pc, #424]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d019      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eea:	f7fa fe95 	bl	8001c18 <HAL_GetTick>
 8006eee:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ef2:	e00d      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fa fe90 	bl	8001c18 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f10:	4b5b      	ldr	r3, [pc, #364]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ea      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006f1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10d      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006f26:	4b56      	ldr	r3, [pc, #344]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f38:	4a51      	ldr	r2, [pc, #324]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f40:	e008      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f46:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f50:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f54:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f5c:	4b48      	ldr	r3, [pc, #288]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f62:	4a47      	ldr	r2, [pc, #284]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f64:	f023 0304 	bic.w	r3, r3, #4
 8006f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d042      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f94:	d022      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006f96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f9a:	d81b      	bhi.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa0:	d011      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa6:	d815      	bhi.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d019      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb0:	d110      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 ffc5 	bl	8008f48 <RCCEx_PLL2_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006fc4:	e00d      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006fd2:	e006      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006fda:	e002      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006fe0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006fe2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006fea:	4b25      	ldr	r3, [pc, #148]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ffc:	4a20      	ldr	r2, [pc, #128]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800700a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800700e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
 800701c:	2300      	movs	r3, #0
 800701e:	647b      	str	r3, [r7, #68]	; 0x44
 8007020:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007024:	460b      	mov	r3, r1
 8007026:	4313      	orrs	r3, r2
 8007028:	d032      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800702a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800702e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007036:	d00b      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703c:	d804      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007046:	d007      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007058:	bf00      	nop
    }
    if (ret == HAL_OK)
 800705a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d112      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007064:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007068:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800706c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007074:	4a02      	ldr	r2, [pc, #8]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007076:	430b      	orrs	r3, r1
 8007078:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800707c:	e008      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800707e:	bf00      	nop
 8007080:	46020c00 	.word	0x46020c00
 8007084:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800708c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070a6:	460b      	mov	r3, r1
 80070a8:	4313      	orrs	r3, r2
 80070aa:	d00c      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80070ac:	4b98      	ldr	r3, [pc, #608]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070b2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80070b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070be:	4a94      	ldr	r2, [pc, #592]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80070c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
 80070d4:	2300      	movs	r3, #0
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
 80070d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80070dc:	460b      	mov	r3, r1
 80070de:	4313      	orrs	r3, r2
 80070e0:	d019      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80070e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ee:	d105      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070f0:	4b87      	ldr	r3, [pc, #540]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	4a86      	ldr	r2, [pc, #536]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fa:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80070fc:	4b84      	ldr	r3, [pc, #528]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007102:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800710a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800710e:	4a80      	ldr	r2, [pc, #512]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007110:	430b      	orrs	r3, r1
 8007112:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
 8007124:	2300      	movs	r3, #0
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007128:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800712c:	460b      	mov	r3, r1
 800712e:	4313      	orrs	r3, r2
 8007130:	d00c      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800713c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007144:	4972      	ldr	r1, [pc, #456]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800714c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	2300      	movs	r3, #0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d00c      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007168:	4b69      	ldr	r3, [pc, #420]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800716a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800716e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007176:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800717a:	4965      	ldr	r1, [pc, #404]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	2300      	movs	r3, #0
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007198:	460b      	mov	r3, r1
 800719a:	4313      	orrs	r3, r2
 800719c:	d00c      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800719e:	4b5c      	ldr	r3, [pc, #368]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071a4:	f023 0218 	bic.w	r2, r3, #24
 80071a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80071b0:	4957      	ldr	r1, [pc, #348]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071ce:	460b      	mov	r3, r1
 80071d0:	4313      	orrs	r3, r2
 80071d2:	d032      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80071d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071e0:	d105      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e2:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ec:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80071ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071fa:	d108      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007200:	3308      	adds	r3, #8
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fea0 	bl	8008f48 <RCCEx_PLL2_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800720e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007216:	4b3e      	ldr	r3, [pc, #248]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007218:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800721c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007228:	4939      	ldr	r1, [pc, #228]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007236:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800723a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007246:	60bb      	str	r3, [r7, #8]
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d03a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800725a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007262:	d00e      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007268:	d815      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800726e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007272:	d110      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007274:	4b26      	ldr	r3, [pc, #152]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	4a25      	ldr	r2, [pc, #148]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800727a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007280:	e00e      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007286:	3308      	adds	r3, #8
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fe5d 	bl	8008f48 <RCCEx_PLL2_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800729e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80072a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	4915      	ldr	r1, [pc, #84]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80072c2:	e003      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80072c8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80072cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d00c      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80072f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072fa:	4905      	ldr	r1, [pc, #20]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007302:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8007306:	4618      	mov	r0, r3
 8007308:	37e8      	adds	r7, #232	; 0xe8
 800730a:	46bd      	mov	sp, r7
 800730c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007310:	46020c00 	.word	0x46020c00

08007314 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	; 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800731c:	4bad      	ldr	r3, [pc, #692]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007324:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007326:	4bab      	ldr	r3, [pc, #684]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007330:	4ba8      	ldr	r3, [pc, #672]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	3301      	adds	r3, #1
 800733c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800733e:	4ba5      	ldr	r3, [pc, #660]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	091b      	lsrs	r3, r3, #4
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800734a:	4ba2      	ldr	r3, [pc, #648]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	08db      	lsrs	r3, r3, #3
 8007350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8123 	beq.w	80075b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d062      	beq.n	800743a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b03      	cmp	r3, #3
 8007378:	f200 8081 	bhi.w	800747e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d024      	beq.n	80073cc <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d17a      	bne.n	800747e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eddf 6a91 	vldr	s13, [pc, #580]	; 80075d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739a:	4b8e      	ldr	r3, [pc, #568]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80073aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ae:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80075dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ca:	e08f      	b.n	80074ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80073cc:	4b81      	ldr	r3, [pc, #516]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80073d8:	4b7e      	ldr	r3, [pc, #504]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	0f1b      	lsrs	r3, r3, #28
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	e006      	b.n	80073f2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80073e4:	4b7b      	ldr	r3, [pc, #492]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80073e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	0f1b      	lsrs	r3, r3, #28
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	4a7b      	ldr	r2, [pc, #492]	; (80075e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80073f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	ee07 3a90 	vmov	s15, r3
 8007414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007418:	ed97 6a02 	vldr	s12, [r7, #8]
 800741c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80075dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007438:	e058      	b.n	80074ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007444:	eddf 6a64 	vldr	s13, [pc, #400]	; 80075d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744c:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800745c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007460:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80075dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007464:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007468:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800746c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007470:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007478:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747c:	e036      	b.n	80074ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800747e:	4b55      	ldr	r3, [pc, #340]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800748a:	4b52      	ldr	r3, [pc, #328]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	0f1b      	lsrs	r3, r3, #28
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	e006      	b.n	80074a4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8007496:	4b4f      	ldr	r3, [pc, #316]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	4a4e      	ldr	r2, [pc, #312]	; (80075e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80074a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ce:	eddf 5a43 	vldr	s11, [pc, #268]	; 80075dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ea:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80074ec:	4b39      	ldr	r3, [pc, #228]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d017      	beq.n	8007528 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80074f8:	4b36      	ldr	r3, [pc, #216]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80074fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800750a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800750e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007512:	edd7 6a07 	vldr	s13, [r7, #28]
 8007516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751e:	ee17 2a90 	vmov	r2, s15
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800752e:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d017      	beq.n	800756a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800753a:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800754c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007550:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007554:	edd7 6a07 	vldr	s13, [r7, #28]
 8007558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007560:	ee17 2a90 	vmov	r2, s15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800757c:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	0e1b      	lsrs	r3, r3, #24
 8007582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800758e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007592:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007596:	edd7 6a07 	vldr	s13, [r7, #28]
 800759a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a2:	ee17 2a90 	vmov	r2, s15
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80075aa:	e00c      	b.n	80075c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	609a      	str	r2, [r3, #8]
}
 80075b2:	e008      	b.n	80075c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
}
 80075c6:	bf00      	nop
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	46020c00 	.word	0x46020c00
 80075d8:	4b742400 	.word	0x4b742400
 80075dc:	46000000 	.word	0x46000000
 80075e0:	08015a04 	.word	0x08015a04

080075e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80075ec:	4bad      	ldr	r3, [pc, #692]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80075f6:	4bab      	ldr	r3, [pc, #684]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007600:	4ba8      	ldr	r3, [pc, #672]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800760e:	4ba5      	ldr	r3, [pc, #660]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	091b      	lsrs	r3, r3, #4
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800761a:	4ba2      	ldr	r3, [pc, #648]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	08db      	lsrs	r3, r3, #3
 8007620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007632:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8123 	beq.w	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d062      	beq.n	800770a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b03      	cmp	r3, #3
 8007648:	f200 8081 	bhi.w	800774e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d024      	beq.n	800769c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d17a      	bne.n	800774e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eddf 6a91 	vldr	s13, [pc, #580]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b8e      	ldr	r3, [pc, #568]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800767a:	ed97 6a02 	vldr	s12, [r7, #8]
 800767e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800768a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800769a:	e08f      	b.n	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800769c:	4b81      	ldr	r3, [pc, #516]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80076a8:	4b7e      	ldr	r3, [pc, #504]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	0f1b      	lsrs	r3, r3, #28
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	e006      	b.n	80076c2 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80076b4:	4b7b      	ldr	r3, [pc, #492]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80076b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	0f1b      	lsrs	r3, r3, #28
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	4a7b      	ldr	r2, [pc, #492]	; (80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80076c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ec:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80076f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007704:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007708:	e058      	b.n	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007714:	eddf 6a64 	vldr	s13, [pc, #400]	; 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771c:	4b61      	ldr	r3, [pc, #388]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800772c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007730:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007734:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007738:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800773c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007740:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007748:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774c:	e036      	b.n	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800774e:	4b55      	ldr	r3, [pc, #340]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800775a:	4b52      	ldr	r3, [pc, #328]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	0f1b      	lsrs	r3, r3, #28
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	e006      	b.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007766:	4b4f      	ldr	r3, [pc, #316]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	4a4e      	ldr	r2, [pc, #312]	; (80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779a:	ed97 6a02 	vldr	s12, [r7, #8]
 800779e:	eddf 5a43 	vldr	s11, [pc, #268]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80077a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80077b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ba:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80077bc:	4b39      	ldr	r3, [pc, #228]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077c8:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80077ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077cc:	0a5b      	lsrs	r3, r3, #9
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80077da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077de:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ee:	ee17 2a90 	vmov	r2, s15
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e002      	b.n	80077fe <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80077fe:	4b29      	ldr	r3, [pc, #164]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800780a:	4b26      	ldr	r3, [pc, #152]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800781c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007820:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007824:	edd7 6a07 	vldr	s13, [r7, #28]
 8007828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007830:	ee17 2a90 	vmov	r2, s15
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	605a      	str	r2, [r3, #4]
 8007838:	e002      	b.n	8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007840:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800784c:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	0e1b      	lsrs	r3, r3, #24
 8007852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800785e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007862:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007866:	edd7 6a07 	vldr	s13, [r7, #28]
 800786a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007872:	ee17 2a90 	vmov	r2, s15
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800787a:	e00c      	b.n	8007896 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]
}
 8007882:	e008      	b.n	8007896 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
}
 8007896:	bf00      	nop
 8007898:	3724      	adds	r7, #36	; 0x24
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	46020c00 	.word	0x46020c00
 80078a8:	4b742400 	.word	0x4b742400
 80078ac:	46000000 	.word	0x46000000
 80078b0:	08015a04 	.word	0x08015a04

080078b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	; 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80078bc:	4bad      	ldr	r3, [pc, #692]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80078c6:	4bab      	ldr	r3, [pc, #684]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80078d0:	4ba8      	ldr	r3, [pc, #672]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	3301      	adds	r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80078de:	4ba5      	ldr	r3, [pc, #660]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80078ea:	4ba2      	ldr	r3, [pc, #648]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8123 	beq.w	8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d062      	beq.n	80079da <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b03      	cmp	r3, #3
 8007918:	f200 8081 	bhi.w	8007a1e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d024      	beq.n	800796c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d17a      	bne.n	8007a1e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793a:	4b8e      	ldr	r3, [pc, #568]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800793c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800794a:	ed97 6a02 	vldr	s12, [r7, #8]
 800794e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007952:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800795a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800795e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007966:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800796a:	e08f      	b.n	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800796c:	4b81      	ldr	r3, [pc, #516]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007978:	4b7e      	ldr	r3, [pc, #504]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	0f1b      	lsrs	r3, r3, #28
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	e006      	b.n	8007992 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007984:	4b7b      	ldr	r3, [pc, #492]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	0f1b      	lsrs	r3, r3, #28
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	4a7b      	ldr	r2, [pc, #492]	; (8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80079bc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80079c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80079d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d8:	e058      	b.n	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80079e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ec:	4b61      	ldr	r3, [pc, #388]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80079ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80079fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a00:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1c:	e036      	b.n	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007a1e:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8007a2a:	4b52      	ldr	r3, [pc, #328]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	e006      	b.n	8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007a36:	4b4f      	ldr	r3, [pc, #316]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a3c:	041b      	lsls	r3, r3, #16
 8007a3e:	0f1b      	lsrs	r3, r3, #28
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	4a4e      	ldr	r2, [pc, #312]	; (8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a6e:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007a8c:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007a98:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007abe:	ee17 2a90 	vmov	r2, s15
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007ace:	4b29      	ldr	r3, [pc, #164]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d017      	beq.n	8007b0a <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ada:	4b26      	ldr	r3, [pc, #152]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	0c1b      	lsrs	r3, r3, #16
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b00:	ee17 2a90 	vmov	r2, s15
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	605a      	str	r2, [r3, #4]
 8007b08:	e002      	b.n	8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d017      	beq.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b20:	0e1b      	lsrs	r3, r3, #24
 8007b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b32:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b42:	ee17 2a90 	vmov	r2, s15
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007b4a:	e00c      	b.n	8007b66 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	609a      	str	r2, [r3, #8]
}
 8007b52:	e008      	b.n	8007b66 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	609a      	str	r2, [r3, #8]
}
 8007b66:	bf00      	nop
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	46020c00 	.word	0x46020c00
 8007b78:	4b742400 	.word	0x4b742400
 8007b7c:	46000000 	.word	0x46000000
 8007b80:	08015a04 	.word	0x08015a04

08007b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08e      	sub	sp, #56	; 0x38
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b92:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007b96:	430b      	orrs	r3, r1
 8007b98:	d145      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007b9a:	4ba7      	ldr	r3, [pc, #668]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007ba6:	4ba4      	ldr	r3, [pc, #656]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d108      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d104      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc2:	f001 b9b3 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007bc6:	4b9c      	ldr	r3, [pc, #624]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bd4:	d114      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d110      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bde:	4b96      	ldr	r3, [pc, #600]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bec:	d103      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007bee:	23fa      	movs	r3, #250	; 0xfa
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bf2:	f001 b99b 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007bf6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bfc:	f001 b996 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007c00:	4b8d      	ldr	r3, [pc, #564]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c14:	d103      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007c16:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1a:	f001 b987 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
 8007c22:	f001 b983 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	d151      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007c32:	4b81      	ldr	r3, [pc, #516]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d035      	beq.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d841      	bhi.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2b60      	cmp	r3, #96	; 0x60
 8007c4e:	d02a      	beq.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b60      	cmp	r3, #96	; 0x60
 8007c54:	d83b      	bhi.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	d009      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d835      	bhi.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00c      	beq.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d012      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007c6e:	e02e      	b.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fb4d 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c7e:	f001 b955 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c82:	f107 0318 	add.w	r3, r7, #24
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fcac 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c90:	f001 b94c 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fe0b 	bl	80078b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ca2:	f001 b943 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007ca6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cac:	f001 b93e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cb0:	4b61      	ldr	r3, [pc, #388]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d103      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007cbe:	4b60      	ldr	r3, [pc, #384]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007cc2:	f001 b933 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cca:	f001 b92f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd2:	f001 b92b 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cda:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	d158      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007ce2:	4b55      	ldr	r3, [pc, #340]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf4:	d03b      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfc:	d846      	bhi.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d04:	d02e      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0c:	d83e      	bhi.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d14:	d00b      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1c:	d836      	bhi.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d012      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007d2c:	e02e      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff faee 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d3c:	f001 b8f6 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d40:	f107 0318 	add.w	r3, r7, #24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fc4d 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4e:	f001 b8ed 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d52:	f107 030c 	add.w	r3, r7, #12
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fdac 	bl	80078b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d60:	f001 b8e4 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d64:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d6a:	f001 b8df 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d6e:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7a:	d103      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007d7c:	4b30      	ldr	r3, [pc, #192]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d80:	f001 b8d4 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d88:	f001 b8d0 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d90:	f001 b8cc 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d98:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	d126      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007dac:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	d106      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007dc0:	4b1f      	ldr	r3, [pc, #124]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc4:	f001 b8b2 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd4:	d107      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d103      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
 8007de2:	f001 b8a3 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	f001 b89f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007df6:	430b      	orrs	r3, r1
 8007df8:	d16e      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e00:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007e04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e0c:	d03d      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e14:	d85c      	bhi.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1c:	d014      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e24:	d854      	bhi.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01f      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e32:	d012      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007e34:	e04c      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007e36:	bf00      	nop
 8007e38:	46020c00 	.word	0x46020c00
 8007e3c:	0007a120 	.word	0x0007a120
 8007e40:	00f42400 	.word	0x00f42400
 8007e44:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fa61 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e56:	f001 b869 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e5a:	f107 0318 	add.w	r3, r7, #24
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fbc0 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e68:	f001 b860 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007e6c:	4ba7      	ldr	r3, [pc, #668]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e78:	d103      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007e7a:	4ba5      	ldr	r3, [pc, #660]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e7e:	f001 b855 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e86:	f001 b851 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e8a:	4ba0      	ldr	r3, [pc, #640]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d118      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e96:	4b9d      	ldr	r3, [pc, #628]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007ea2:	4b9a      	ldr	r3, [pc, #616]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	0e1b      	lsrs	r3, r3, #24
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	e006      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007eae:	4b97      	ldr	r3, [pc, #604]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	0e1b      	lsrs	r3, r3, #24
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	4a95      	ldr	r2, [pc, #596]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ec4:	f001 b832 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ecc:	f001 b82e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ed4:	f001 b82a 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007edc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	d17f      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007ee4:	4b89      	ldr	r3, [pc, #548]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ee6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eee:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d165      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007ef6:	4b85      	ldr	r3, [pc, #532]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007efc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007f00:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f08:	d034      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f10:	d853      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f18:	d00b      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f20:	d84b      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d016      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f2e:	d009      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007f30:	e043      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff f9ec 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f40:	f000 bff4 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f44:	f107 0318 	add.w	r3, r7, #24
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fb4b 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f52:	f000 bfeb 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007f56:	4b6d      	ldr	r3, [pc, #436]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f62:	d103      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007f64:	4b6a      	ldr	r3, [pc, #424]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007f68:	f000 bfe0 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f70:	f000 bfdc 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f74:	4b65      	ldr	r3, [pc, #404]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d118      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f80:	4b62      	ldr	r3, [pc, #392]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007f8c:	4b5f      	ldr	r3, [pc, #380]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	0e1b      	lsrs	r3, r3, #24
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	e006      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007f98:	4b5c      	ldr	r3, [pc, #368]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	4a5b      	ldr	r2, [pc, #364]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007fae:	f000 bfbd 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007fb6:	f000 bfb9 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007fbe:	f000 bfb5 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc8:	d108      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff f9a0 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	f000 bfa8 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe0:	f000 bfa4 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe8:	1e51      	subs	r1, r2, #1
 8007fea:	430b      	orrs	r3, r1
 8007fec:	d136      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007fee:	4b47      	ldr	r3, [pc, #284]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008000:	f7fe fae2 	bl	80065c8 <HAL_RCC_GetPCLK2Freq>
 8008004:	6378      	str	r0, [r7, #52]	; 0x34
 8008006:	f000 bf91 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	d104      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008010:	f7fe f9a4 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008014:	6378      	str	r0, [r7, #52]	; 0x34
 8008016:	f000 bf89 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800801a:	4b3c      	ldr	r3, [pc, #240]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008026:	d106      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	2b02      	cmp	r3, #2
 800802c:	d103      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800802e:	4b3a      	ldr	r3, [pc, #232]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	f000 bf7b 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008036:	4b35      	ldr	r3, [pc, #212]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b02      	cmp	r3, #2
 8008042:	d107      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2b03      	cmp	r3, #3
 8008048:	d104      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
 8008050:	f000 bf6c 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	f000 bf68 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	1e91      	subs	r1, r2, #2
 8008062:	430b      	orrs	r3, r1
 8008064:	d136      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800806c:	f003 030c 	and.w	r3, r3, #12
 8008070:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008078:	f7fe fa92 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 800807c:	6378      	str	r0, [r7, #52]	; 0x34
 800807e:	f000 bf55 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b04      	cmp	r3, #4
 8008086:	d104      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008088:	f7fe f968 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800808c:	6378      	str	r0, [r7, #52]	; 0x34
 800808e:	f000 bf4d 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809e:	d106      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d103      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
 80080aa:	f000 bf3f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80080ae:	4b17      	ldr	r3, [pc, #92]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d107      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	2b0c      	cmp	r3, #12
 80080c0:	d104      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80080c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
 80080c8:	f000 bf30 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	f000 bf2c 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80080d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d8:	1f11      	subs	r1, r2, #4
 80080da:	430b      	orrs	r3, r1
 80080dc:	d13f      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80080de:	4b0b      	ldr	r3, [pc, #44]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080f0:	f7fe fa56 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 80080f4:	6378      	str	r0, [r7, #52]	; 0x34
 80080f6:	f000 bf19 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d10d      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008100:	f7fe f92c 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008104:	6378      	str	r0, [r7, #52]	; 0x34
 8008106:	f000 bf11 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800810a:	bf00      	nop
 800810c:	46020c00 	.word	0x46020c00
 8008110:	02dc6c00 	.word	0x02dc6c00
 8008114:	08015a04 	.word	0x08015a04
 8008118:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800811c:	4ba6      	ldr	r3, [pc, #664]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008128:	d106      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	2b20      	cmp	r3, #32
 800812e:	d103      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008130:	4ba2      	ldr	r3, [pc, #648]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	f000 befa 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008138:	4b9f      	ldr	r3, [pc, #636]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800813a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b02      	cmp	r3, #2
 8008144:	d107      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d104      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800814c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
 8008152:	f000 beeb 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
 800815a:	f000 bee7 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800815e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008162:	f1a2 0108 	sub.w	r1, r2, #8
 8008166:	430b      	orrs	r3, r1
 8008168:	d136      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800816a:	4b93      	ldr	r3, [pc, #588]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800816c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008170:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008174:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800817c:	f7fe fa10 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 8008180:	6378      	str	r0, [r7, #52]	; 0x34
 8008182:	f000 bed3 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d104      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800818c:	f7fe f8e6 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008190:	6378      	str	r0, [r7, #52]	; 0x34
 8008192:	f000 becb 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008196:	4b88      	ldr	r3, [pc, #544]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a2:	d106      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	d103      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80081aa:	4b84      	ldr	r3, [pc, #528]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
 80081ae:	f000 bebd 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80081b2:	4b81      	ldr	r3, [pc, #516]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d107      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2bc0      	cmp	r3, #192	; 0xc0
 80081c4:	d104      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80081c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
 80081cc:	f000 beae 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
 80081d4:	f000 beaa 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80081d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081dc:	f1a2 0110 	sub.w	r1, r2, #16
 80081e0:	430b      	orrs	r3, r1
 80081e2:	d139      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80081e4:	4b74      	ldr	r3, [pc, #464]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7fe f9d3 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 80081fa:	6378      	str	r0, [r7, #52]	; 0x34
 80081fc:	f000 be96 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008206:	d104      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008208:	f7fe f8a8 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800820c:	6378      	str	r0, [r7, #52]	; 0x34
 800820e:	f000 be8d 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008212:	4b69      	ldr	r3, [pc, #420]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800821a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800821e:	d107      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008226:	d103      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008228:	4b64      	ldr	r3, [pc, #400]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800822a:	637b      	str	r3, [r7, #52]	; 0x34
 800822c:	f000 be7e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008230:	4b61      	ldr	r3, [pc, #388]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b02      	cmp	r3, #2
 800823c:	d108      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008244:	d104      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	f000 be6e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
 8008254:	f000 be6a 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825c:	f1a2 0120 	sub.w	r1, r2, #32
 8008260:	430b      	orrs	r3, r1
 8008262:	d158      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008264:	4b54      	ldr	r3, [pc, #336]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008276:	f7fe f9bb 	bl	80065f0 <HAL_RCC_GetPCLK3Freq>
 800827a:	6378      	str	r0, [r7, #52]	; 0x34
 800827c:	f000 be56 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	2b01      	cmp	r3, #1
 8008284:	d104      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008286:	f7fe f869 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800828a:	6378      	str	r0, [r7, #52]	; 0x34
 800828c:	f000 be4e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008290:	4b49      	ldr	r3, [pc, #292]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829c:	d106      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d103      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80082a4:	4b45      	ldr	r3, [pc, #276]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
 80082a8:	f000 be40 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80082ac:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d107      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d104      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80082c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
 80082c6:	f000 be31 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80082ca:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d11b      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d118      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80082e8:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	0e1b      	lsrs	r3, r3, #24
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	e006      	b.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80082f4:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	0e1b      	lsrs	r3, r3, #24
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	4a2f      	ldr	r2, [pc, #188]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
 800830a:	f000 be0f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
 8008312:	f000 be0b 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800831e:	430b      	orrs	r3, r1
 8008320:	d172      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008322:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008328:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800832c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008334:	d104      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008336:	f7fe f811 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800833a:	6378      	str	r0, [r7, #52]	; 0x34
 800833c:	f000 bdf6 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008346:	d108      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008348:	f107 0318 	add.w	r3, r7, #24
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff f949 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	f000 bde9 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008360:	f7fe f904 	bl	800656c <HAL_RCC_GetHCLKFreq>
 8008364:	6378      	str	r0, [r7, #52]	; 0x34
 8008366:	f000 bde1 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008370:	d128      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b20      	cmp	r3, #32
 800837c:	d118      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800837e:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800838a:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	0e1b      	lsrs	r3, r3, #24
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	e006      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008396:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	0e1b      	lsrs	r3, r3, #24
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	4a06      	ldr	r2, [pc, #24]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
 80083ac:	f000 bdbe 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	f000 bdba 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80083b8:	46020c00 	.word	0x46020c00
 80083bc:	00f42400 	.word	0x00f42400
 80083c0:	08015a04 	.word	0x08015a04
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80083c4:	4baf      	ldr	r3, [pc, #700]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d0:	d107      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083d8:	d103      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80083da:	4bab      	ldr	r3, [pc, #684]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
 80083de:	f000 bda5 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80083e2:	4ba8      	ldr	r3, [pc, #672]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ee:	d107      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f6:	d103      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80083f8:	4ba3      	ldr	r3, [pc, #652]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	f000 bd96 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	f000 bd92 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008410:	430b      	orrs	r3, r1
 8008412:	d158      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008414:	4b9b      	ldr	r3, [pc, #620]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008416:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2b04      	cmp	r3, #4
 8008424:	d84b      	bhi.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008465 	.word	0x08008465
 8008430:	08008441 	.word	0x08008441
 8008434:	08008453 	.word	0x08008453
 8008438:	0800846f 	.word	0x0800846f
 800843c:	08008479 	.word	0x08008479
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe ff65 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800844e:	f000 bd6d 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fa2c 	bl	80078b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008460:	f000 bd64 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008464:	f7fe f882 	bl	800656c <HAL_RCC_GetHCLKFreq>
 8008468:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800846a:	f000 bd5f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800846e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008474:	f000 bd5a 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008478:	4b82      	ldr	r3, [pc, #520]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b20      	cmp	r3, #32
 8008482:	d118      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008484:	4b7f      	ldr	r3, [pc, #508]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008490:	4b7c      	ldr	r3, [pc, #496]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	0e1b      	lsrs	r3, r3, #24
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	e006      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800849c:	4b79      	ldr	r3, [pc, #484]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800849e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	0e1b      	lsrs	r3, r3, #24
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	4a78      	ldr	r2, [pc, #480]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80084ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084b2:	f000 bd3b 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ba:	f000 bd37 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084c2:	f000 bd33 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80084c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80084ce:	430b      	orrs	r3, r1
 80084d0:	d167      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80084d2:	4b6c      	ldr	r3, [pc, #432]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80084d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084e4:	d036      	beq.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084ec:	d855      	bhi.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084f4:	d029      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084fc:	d84d      	bhi.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008504:	d013      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850c:	d845      	bhi.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d015      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851a:	d13e      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800851c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fef7 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800852a:	f000 bcff 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 030c 	add.w	r3, r7, #12
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f9be 	bl	80078b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800853c:	f000 bcf6 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008540:	f7fe f814 	bl	800656c <HAL_RCC_GetHCLKFreq>
 8008544:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008546:	f000 bcf1 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800854a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800854e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008550:	f000 bcec 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008554:	4b4b      	ldr	r3, [pc, #300]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b20      	cmp	r3, #32
 800855e:	d118      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008560:	4b48      	ldr	r3, [pc, #288]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800856c:	4b45      	ldr	r3, [pc, #276]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	0e1b      	lsrs	r3, r3, #24
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	e006      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008578:	4b42      	ldr	r3, [pc, #264]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800857a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	0e1b      	lsrs	r3, r3, #24
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	4a41      	ldr	r2, [pc, #260]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800858e:	f000 bccd 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008596:	f000 bcc9 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800859e:	f000 bcc5 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80085a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80085aa:	430b      	orrs	r3, r1
 80085ac:	d14c      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80085ae:	4b35      	ldr	r3, [pc, #212]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80085c0:	f7fd ffee 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 80085c4:	6378      	str	r0, [r7, #52]	; 0x34
 80085c6:	f000 bcb1 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d0:	d104      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80085d2:	f7fd fec3 	bl	800635c <HAL_RCC_GetSysClockFreq>
 80085d6:	6378      	str	r0, [r7, #52]	; 0x34
 80085d8:	f000 bca8 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80085dc:	4b29      	ldr	r3, [pc, #164]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f0:	d103      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80085f2:	4b25      	ldr	r3, [pc, #148]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
 80085f6:	f000 bc99 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b20      	cmp	r3, #32
 8008604:	d11c      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860c:	d118      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800861a:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	0e1b      	lsrs	r3, r3, #24
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	e006      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8008626:	4b17      	ldr	r3, [pc, #92]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800862c:	041b      	lsls	r3, r3, #16
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	f003 030f 	and.w	r3, r3, #15
 8008634:	4a15      	ldr	r2, [pc, #84]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
 800863c:	f000 bc76 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	637b      	str	r3, [r7, #52]	; 0x34
 8008644:	f000 bc72 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800864c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8008650:	430b      	orrs	r3, r1
 8008652:	d153      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008654:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800865a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800865e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2b00      	cmp	r3, #0
 8008664:	d104      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008666:	f7fd ff9b 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 800866a:	6378      	str	r0, [r7, #52]	; 0x34
 800866c:	f000 bc5e 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008676:	d10b      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008678:	f7fd fe70 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800867c:	6378      	str	r0, [r7, #52]	; 0x34
 800867e:	f000 bc55 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008682:	bf00      	nop
 8008684:	46020c00 	.word	0x46020c00
 8008688:	00f42400 	.word	0x00f42400
 800868c:	08015a04 	.word	0x08015a04
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008690:	4ba1      	ldr	r3, [pc, #644]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a4:	d103      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80086a6:	4b9d      	ldr	r3, [pc, #628]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
 80086aa:	f000 bc3f 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80086ae:	4b9a      	ldr	r3, [pc, #616]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d11c      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086c0:	d118      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086c2:	4b95      	ldr	r3, [pc, #596]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80086ce:	4b92      	ldr	r3, [pc, #584]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	0e1b      	lsrs	r3, r3, #24
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	e006      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80086da:	4b8f      	ldr	r3, [pc, #572]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	0e1b      	lsrs	r3, r3, #24
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	4a8d      	ldr	r2, [pc, #564]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80086ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
 80086f0:	f000 bc1c 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
 80086f8:	f000 bc18 	b.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80086fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008700:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008704:	430b      	orrs	r3, r1
 8008706:	d151      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008708:	4b83      	ldr	r3, [pc, #524]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800870a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800870e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008712:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2bc0      	cmp	r3, #192	; 0xc0
 8008718:	d024      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2bc0      	cmp	r3, #192	; 0xc0
 800871e:	d842      	bhi.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d00d      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	2b80      	cmp	r3, #128	; 0x80
 800872a:	d83c      	bhi.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d011      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008738:	e035      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800873a:	f7fd ff59 	bl	80065f0 <HAL_RCC_GetPCLK3Freq>
 800873e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008740:	e3f4      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008742:	4b75      	ldr	r3, [pc, #468]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800874a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800874e:	d102      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8008750:	4b72      	ldr	r3, [pc, #456]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008754:	e3ea      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800875a:	e3e7      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800875c:	f7fd fdfe 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008760:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008762:	e3e3      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008764:	4b6c      	ldr	r3, [pc, #432]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b20      	cmp	r3, #32
 800876e:	d117      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008770:	4b69      	ldr	r3, [pc, #420]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800877c:	4b66      	ldr	r3, [pc, #408]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	e006      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008788:	4b63      	ldr	r3, [pc, #396]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800878a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	0e1b      	lsrs	r3, r3, #24
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	4a62      	ldr	r2, [pc, #392]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800879e:	e3c5      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087a4:	e3c2      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087aa:	e3bf      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80087ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80087b4:	430b      	orrs	r3, r1
 80087b6:	d147      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80087b8:	4b57      	ldr	r3, [pc, #348]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80087ca:	f7fd fee9 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 80087ce:	6378      	str	r0, [r7, #52]	; 0x34
 80087d0:	e3ac      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d8:	d103      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80087da:	f7fd fdbf 	bl	800635c <HAL_RCC_GetSysClockFreq>
 80087de:	6378      	str	r0, [r7, #52]	; 0x34
 80087e0:	e3a4      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80087e2:	4b4d      	ldr	r3, [pc, #308]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ee:	d106      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f6:	d102      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80087f8:	4b48      	ldr	r3, [pc, #288]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
 80087fc:	e396      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80087fe:	4b46      	ldr	r3, [pc, #280]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b20      	cmp	r3, #32
 8008808:	d11b      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008810:	d117      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008812:	4b41      	ldr	r3, [pc, #260]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800881e:	4b3e      	ldr	r3, [pc, #248]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	e006      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800882a:	4b3b      	ldr	r3, [pc, #236]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800882c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	4a39      	ldr	r2, [pc, #228]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800883a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
 8008840:	e374      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
 8008846:	e371      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008850:	430b      	orrs	r3, r1
 8008852:	d16a      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008854:	4b30      	ldr	r3, [pc, #192]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	2b00      	cmp	r3, #0
 8008864:	d120      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008866:	4b2c      	ldr	r3, [pc, #176]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b20      	cmp	r3, #32
 8008870:	d117      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008872:	4b29      	ldr	r3, [pc, #164]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800887e:	4b26      	ldr	r3, [pc, #152]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	0e1b      	lsrs	r3, r3, #24
 8008884:	f003 030f 	and.w	r3, r3, #15
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800888a:	4b23      	ldr	r3, [pc, #140]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800888c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	0e1b      	lsrs	r3, r3, #24
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	4a21      	ldr	r2, [pc, #132]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800889a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889e:	637b      	str	r3, [r7, #52]	; 0x34
 80088a0:	e344      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
 80088a6:	e341      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80088a8:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b6:	d112      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088be:	d10e      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088c0:	4b15      	ldr	r3, [pc, #84]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80088d0:	23fa      	movs	r3, #250	; 0xfa
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088d4:	e32a      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80088d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80088da:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088dc:	e326      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80088de:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ea:	d106      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f2:	d102      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
 80088f8:	e318      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b02      	cmp	r3, #2
 8008906:	d10d      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890e:	d109      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8008910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008914:	637b      	str	r3, [r7, #52]	; 0x34
 8008916:	e309      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008918:	46020c00 	.word	0x46020c00
 800891c:	00f42400 	.word	0x00f42400
 8008920:	08015a04 	.word	0x08015a04
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
 8008928:	e300      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800892a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008932:	430b      	orrs	r3, r1
 8008934:	d164      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008936:	4ba2      	ldr	r3, [pc, #648]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800893c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008940:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	2b00      	cmp	r3, #0
 8008946:	d120      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008948:	4b9d      	ldr	r3, [pc, #628]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b20      	cmp	r3, #32
 8008952:	d117      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008954:	4b9a      	ldr	r3, [pc, #616]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8008960:	4b97      	ldr	r3, [pc, #604]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	0e1b      	lsrs	r3, r3, #24
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	e006      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800896c:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800896e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008972:	041b      	lsls	r3, r3, #16
 8008974:	0e1b      	lsrs	r3, r3, #24
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	4a92      	ldr	r2, [pc, #584]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800897c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	e2d3      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
 8008988:	e2d0      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800898a:	4b8d      	ldr	r3, [pc, #564]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800898c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008998:	d112      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a0:	d10e      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089a2:	4b87      	ldr	r3, [pc, #540]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b0:	d102      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80089b2:	23fa      	movs	r3, #250	; 0xfa
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089b6:	e2b9      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80089b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089be:	e2b5      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80089c0:	4b7f      	ldr	r3, [pc, #508]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089cc:	d106      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d4:	d102      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80089d6:	4b7c      	ldr	r3, [pc, #496]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
 80089da:	e2a7      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80089dc:	4b78      	ldr	r3, [pc, #480]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d107      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089f0:	d103      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80089f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
 80089f8:	e298      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
 80089fe:	e295      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a04:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	d147      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008a0c:	4b6c      	ldr	r3, [pc, #432]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a1e:	f7fd fdbf 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 8008a22:	6378      	str	r0, [r7, #52]	; 0x34
 8008a24:	e282      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008a26:	4b66      	ldr	r3, [pc, #408]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a34:	d112      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a3c:	d10e      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a3e:	4b60      	ldr	r3, [pc, #384]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a4c:	d102      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8008a4e:	23fa      	movs	r3, #250	; 0xfa
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a52:	e26b      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a5a:	e267      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008a5c:	4b58      	ldr	r3, [pc, #352]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a68:	d106      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a70:	d102      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8008a72:	4b55      	ldr	r3, [pc, #340]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
 8008a76:	e259      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008a78:	4b51      	ldr	r3, [pc, #324]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d107      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a8c:	d103      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8008a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
 8008a94:	e24a      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9a:	e247      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	d12d      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aae:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008ab2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008ab4:	4b42      	ldr	r3, [pc, #264]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac0:	d105      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008ac8:	4b3f      	ldr	r3, [pc, #252]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
 8008acc:	e22e      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fc1a 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae4:	e222      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aec:	d107      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aee:	f107 0318 	add.w	r3, r7, #24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fd76 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	e216      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
 8008b02:	e213      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	d15d      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b1a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b22:	d028      	beq.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b2a:	d845      	bhi.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b32:	d013      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b3a:	d83d      	bhi.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b48:	d004      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008b4a:	e035      	b.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008b4c:	f7fd fd3c 	bl	80065c8 <HAL_RCC_GetPCLK2Freq>
 8008b50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b52:	e1eb      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008b54:	f7fd fc02 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008b58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b5a:	e1e7      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b5c:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b68:	d102      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008b6a:	4b17      	ldr	r3, [pc, #92]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b6e:	e1dd      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b74:	e1da      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d117      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	0e1b      	lsrs	r3, r3, #24
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	e006      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008b9a:	4b09      	ldr	r3, [pc, #36]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	0e1b      	lsrs	r3, r3, #24
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	4a06      	ldr	r2, [pc, #24]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bb0:	e1bc      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bb6:	e1b9      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bbc:	e1b6      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008bbe:	bf00      	nop
 8008bc0:	46020c00 	.word	0x46020c00
 8008bc4:	08015a04 	.word	0x08015a04
 8008bc8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	d156      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008bd8:	4ba5      	ldr	r3, [pc, #660]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008be2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bea:	d028      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bf2:	d845      	bhi.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bfa:	d013      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c02:	d83d      	bhi.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d004      	beq.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c10:	d004      	beq.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8008c12:	e035      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008c14:	f7fd fcc4 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 8008c18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008c1a:	e187      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008c1c:	f7fd fb9e 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008c20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008c22:	e183      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c24:	4b92      	ldr	r3, [pc, #584]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c30:	d102      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8008c32:	4b90      	ldr	r3, [pc, #576]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c36:	e179      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c3c:	e176      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c3e:	4b8c      	ldr	r3, [pc, #560]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d117      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c4a:	4b89      	ldr	r3, [pc, #548]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008c56:	4b86      	ldr	r3, [pc, #536]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	0e1b      	lsrs	r3, r3, #24
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8008c62:	4b83      	ldr	r3, [pc, #524]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	0e1b      	lsrs	r3, r3, #24
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	4a81      	ldr	r2, [pc, #516]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c78:	e158      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c7e:	e155      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c84:	e152      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c8a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	d177      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008c92:	4b77      	ldr	r3, [pc, #476]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c98:	f003 0318 	and.w	r3, r3, #24
 8008c9c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	2b18      	cmp	r3, #24
 8008ca2:	d86b      	bhi.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008d11 	.word	0x08008d11
 8008cb0:	08008d7d 	.word	0x08008d7d
 8008cb4:	08008d7d 	.word	0x08008d7d
 8008cb8:	08008d7d 	.word	0x08008d7d
 8008cbc:	08008d7d 	.word	0x08008d7d
 8008cc0:	08008d7d 	.word	0x08008d7d
 8008cc4:	08008d7d 	.word	0x08008d7d
 8008cc8:	08008d7d 	.word	0x08008d7d
 8008ccc:	08008d19 	.word	0x08008d19
 8008cd0:	08008d7d 	.word	0x08008d7d
 8008cd4:	08008d7d 	.word	0x08008d7d
 8008cd8:	08008d7d 	.word	0x08008d7d
 8008cdc:	08008d7d 	.word	0x08008d7d
 8008ce0:	08008d7d 	.word	0x08008d7d
 8008ce4:	08008d7d 	.word	0x08008d7d
 8008ce8:	08008d7d 	.word	0x08008d7d
 8008cec:	08008d21 	.word	0x08008d21
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008d7d 	.word	0x08008d7d
 8008cf8:	08008d7d 	.word	0x08008d7d
 8008cfc:	08008d7d 	.word	0x08008d7d
 8008d00:	08008d7d 	.word	0x08008d7d
 8008d04:	08008d7d 	.word	0x08008d7d
 8008d08:	08008d7d 	.word	0x08008d7d
 8008d0c:	08008d3b 	.word	0x08008d3b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008d10:	f7fd fc6e 	bl	80065f0 <HAL_RCC_GetPCLK3Freq>
 8008d14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008d16:	e109      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008d18:	f7fd fb20 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008d1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008d1e:	e105      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d20:	4b53      	ldr	r3, [pc, #332]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2c:	d102      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008d2e:	4b51      	ldr	r3, [pc, #324]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008d30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d32:	e0fb      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d38:	e0f8      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d3a:	4b4d      	ldr	r3, [pc, #308]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d117      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d46:	4b4a      	ldr	r3, [pc, #296]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008d52:	4b47      	ldr	r3, [pc, #284]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	0e1b      	lsrs	r3, r3, #24
 8008d58:	f003 030f 	and.w	r3, r3, #15
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008d5e:	4b44      	ldr	r3, [pc, #272]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d64:	041b      	lsls	r3, r3, #16
 8008d66:	0e1b      	lsrs	r3, r3, #24
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	4a42      	ldr	r2, [pc, #264]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d74:	e0da      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d7a:	e0d7      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d80:	e0d4      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d86:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	d155      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008d8e:	4b38      	ldr	r3, [pc, #224]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008d98:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008da0:	d013      	beq.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008da8:	d844      	bhi.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db0:	d013      	beq.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db8:	d83c      	bhi.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d014      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc6:	d014      	beq.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008dc8:	e034      	b.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0318 	add.w	r3, r7, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fc08 	bl	80075e4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dd8:	e0a8      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fa98 	bl	8007314 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008de8:	e0a0      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008dea:	f7fd fab7 	bl	800635c <HAL_RCC_GetSysClockFreq>
 8008dee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008df0:	e09c      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008df2:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d117      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008dfe:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008e0a:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	0e1b      	lsrs	r3, r3, #24
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	e006      	b.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008e16:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	0e1b      	lsrs	r3, r3, #24
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e2c:	e07e      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e32:	e07b      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e38:	e078      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008e42:	430b      	orrs	r3, r1
 8008e44:	d138      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e50:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d10d      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6c:	e05e      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008e6e:	bf00      	nop
 8008e70:	46020c00 	.word	0x46020c00
 8008e74:	00f42400 	.word	0x00f42400
 8008e78:	08015a04 	.word	0x08015a04
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008e7c:	4b2e      	ldr	r3, [pc, #184]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e8a:	d112      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e92:	d10e      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008ea4:	23fa      	movs	r3, #250	; 0xfa
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ea8:	e040      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008eaa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008eb0:	e03c      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb6:	e039      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ebc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	d131      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008ec4:	4b1c      	ldr	r3, [pc, #112]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008eca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008ed0:	4b19      	ldr	r3, [pc, #100]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008edc:	d105      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	e020      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efe:	d102      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
 8008f04:	e012      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f12:	d106      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1a:	d102      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f20:	e004      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
 8008f26:	e001      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3738      	adds	r7, #56	; 0x38
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	46020c00 	.word	0x46020c00
 8008f3c:	02dc6c00 	.word	0x02dc6c00
 8008f40:	016e3600 	.word	0x016e3600
 8008f44:	00f42400 	.word	0x00f42400

08008f48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008f50:	4b47      	ldr	r3, [pc, #284]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a46      	ldr	r2, [pc, #280]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f5c:	f7f8 fe5c 	bl	8001c18 <HAL_GetTick>
 8008f60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f62:	e008      	b.n	8008f76 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f64:	f7f8 fe58 	bl	8001c18 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e077      	b.n	8009066 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f76:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f0      	bne.n	8008f64 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008f82:	4b3b      	ldr	r3, [pc, #236]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6811      	ldr	r1, [r2, #0]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6852      	ldr	r2, [r2, #4]
 8008f96:	3a01      	subs	r2, #1
 8008f98:	0212      	lsls	r2, r2, #8
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	4934      	ldr	r1, [pc, #208]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008fa2:	4b33      	ldr	r3, [pc, #204]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fa6:	4b33      	ldr	r3, [pc, #204]	; (8009074 <RCCEx_PLL2_Config+0x12c>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6892      	ldr	r2, [r2, #8]
 8008fae:	3a01      	subs	r2, #1
 8008fb0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68d2      	ldr	r2, [r2, #12]
 8008fb8:	3a01      	subs	r2, #1
 8008fba:	0252      	lsls	r2, r2, #9
 8008fbc:	b292      	uxth	r2, r2
 8008fbe:	4311      	orrs	r1, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6912      	ldr	r2, [r2, #16]
 8008fc4:	3a01      	subs	r2, #1
 8008fc6:	0412      	lsls	r2, r2, #16
 8008fc8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008fcc:	4311      	orrs	r1, r2
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6952      	ldr	r2, [r2, #20]
 8008fd2:	3a01      	subs	r2, #1
 8008fd4:	0612      	lsls	r2, r2, #24
 8008fd6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	4924      	ldr	r1, [pc, #144]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008fe2:	4b23      	ldr	r3, [pc, #140]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	f023 020c 	bic.w	r2, r3, #12
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	4920      	ldr	r1, [pc, #128]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	491c      	ldr	r1, [pc, #112]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009002:	4b1b      	ldr	r3, [pc, #108]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	4a1a      	ldr	r2, [pc, #104]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009008:	f023 0310 	bic.w	r3, r3, #16
 800900c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800900e:	4b18      	ldr	r3, [pc, #96]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009016:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	69d2      	ldr	r2, [r2, #28]
 800901e:	00d2      	lsls	r2, r2, #3
 8009020:	4913      	ldr	r1, [pc, #76]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009022:	4313      	orrs	r3, r2
 8009024:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009026:	4b12      	ldr	r3, [pc, #72]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	4a11      	ldr	r2, [pc, #68]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 800902c:	f043 0310 	orr.w	r3, r3, #16
 8009030:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009032:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a0e      	ldr	r2, [pc, #56]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 8009038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800903c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800903e:	f7f8 fdeb 	bl	8001c18 <HAL_GetTick>
 8009042:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009044:	e008      	b.n	8009058 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009046:	f7f8 fde7 	bl	8001c18 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <RCCEx_PLL2_Config+0x128>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009064:	2300      	movs	r3, #0

}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	46020c00 	.word	0x46020c00
 8009074:	80800000 	.word	0x80800000

08009078 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009080:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a46      	ldr	r2, [pc, #280]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800908a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800908c:	f7f8 fdc4 	bl	8001c18 <HAL_GetTick>
 8009090:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009092:	e008      	b.n	80090a6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009094:	f7f8 fdc0 	bl	8001c18 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d901      	bls.n	80090a6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e077      	b.n	8009196 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090a6:	4b3e      	ldr	r3, [pc, #248]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f0      	bne.n	8009094 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80090b2:	4b3b      	ldr	r3, [pc, #236]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6811      	ldr	r1, [r2, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6852      	ldr	r2, [r2, #4]
 80090c6:	3a01      	subs	r2, #1
 80090c8:	0212      	lsls	r2, r2, #8
 80090ca:	430a      	orrs	r2, r1
 80090cc:	4934      	ldr	r1, [pc, #208]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	630b      	str	r3, [r1, #48]	; 0x30
 80090d2:	4b33      	ldr	r3, [pc, #204]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 80090d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d6:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <RCCEx_PLL3_Config+0x12c>)
 80090d8:	4013      	ands	r3, r2
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	6892      	ldr	r2, [r2, #8]
 80090de:	3a01      	subs	r2, #1
 80090e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68d2      	ldr	r2, [r2, #12]
 80090e8:	3a01      	subs	r2, #1
 80090ea:	0252      	lsls	r2, r2, #9
 80090ec:	b292      	uxth	r2, r2
 80090ee:	4311      	orrs	r1, r2
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6912      	ldr	r2, [r2, #16]
 80090f4:	3a01      	subs	r2, #1
 80090f6:	0412      	lsls	r2, r2, #16
 80090f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80090fc:	4311      	orrs	r1, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6952      	ldr	r2, [r2, #20]
 8009102:	3a01      	subs	r2, #1
 8009104:	0612      	lsls	r2, r2, #24
 8009106:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800910a:	430a      	orrs	r2, r1
 800910c:	4924      	ldr	r1, [pc, #144]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 800910e:	4313      	orrs	r3, r2
 8009110:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009116:	f023 020c 	bic.w	r2, r3, #12
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	4920      	ldr	r1, [pc, #128]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009120:	4313      	orrs	r3, r2
 8009122:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	491c      	ldr	r1, [pc, #112]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 800912e:	4313      	orrs	r3, r2
 8009130:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	4a1a      	ldr	r2, [pc, #104]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009138:	f023 0310 	bic.w	r3, r3, #16
 800913c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800913e:	4b18      	ldr	r3, [pc, #96]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009146:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	69d2      	ldr	r2, [r2, #28]
 800914e:	00d2      	lsls	r2, r2, #3
 8009150:	4913      	ldr	r1, [pc, #76]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009152:	4313      	orrs	r3, r2
 8009154:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009156:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	4a11      	ldr	r2, [pc, #68]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 800915c:	f043 0310 	orr.w	r3, r3, #16
 8009160:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009162:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 8009168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800916e:	f7f8 fd53 	bl	8001c18 <HAL_GetTick>
 8009172:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009174:	e008      	b.n	8009188 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009176:	f7f8 fd4f 	bl	8001c18 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e006      	b.n	8009196 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <RCCEx_PLL3_Config+0x128>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	46020c00 	.word	0x46020c00
 80091a4:	80800000 	.word	0x80800000

080091a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d071      	beq.n	800929e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f8 fa66 	bl	80016a0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80091dc:	4b32      	ldr	r3, [pc, #200]	; (80092a8 <HAL_RTC_Init+0x100>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	d051      	beq.n	800928c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091e8:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <HAL_RTC_Init+0x100>)
 80091ea:	22ca      	movs	r2, #202	; 0xca
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24
 80091ee:	4b2e      	ldr	r3, [pc, #184]	; (80092a8 <HAL_RTC_Init+0x100>)
 80091f0:	2253      	movs	r2, #83	; 0x53
 80091f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fa6d 	bl	80096d4 <RTC_EnterInitMode>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d13f      	bne.n	8009284 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009204:	4b28      	ldr	r3, [pc, #160]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <HAL_RTC_Init+0x100>)
 800920a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800920e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009212:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009214:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	4319      	orrs	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	430b      	orrs	r3, r1
 8009228:	491f      	ldr	r1, [pc, #124]	; (80092a8 <HAL_RTC_Init+0x100>)
 800922a:	4313      	orrs	r3, r2
 800922c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	491b      	ldr	r1, [pc, #108]	; (80092a8 <HAL_RTC_Init+0x100>)
 800923a:	4313      	orrs	r3, r2
 800923c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	430b      	orrs	r3, r1
 8009250:	4915      	ldr	r1, [pc, #84]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009252:	4313      	orrs	r3, r2
 8009254:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa78 	bl	800974c <RTC_ExitInitMode>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10e      	bne.n	8009284 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a19      	ldr	r1, [r3, #32]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	4319      	orrs	r1, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	430b      	orrs	r3, r1
 800927e:	490a      	ldr	r1, [pc, #40]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009280:	4313      	orrs	r3, r2
 8009282:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009284:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <HAL_RTC_Init+0x100>)
 8009286:	22ff      	movs	r2, #255	; 0xff
 8009288:	625a      	str	r2, [r3, #36]	; 0x24
 800928a:	e001      	b.n	8009290 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	46007800 	.word	0x46007800

080092ac <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80092ac:	b590      	push	{r4, r7, lr}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_RTC_SetTime+0x1a>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e088      	b.n	80093d8 <HAL_RTC_SetTime+0x12c>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092d6:	4b42      	ldr	r3, [pc, #264]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 80092d8:	22ca      	movs	r2, #202	; 0xca
 80092da:	625a      	str	r2, [r3, #36]	; 0x24
 80092dc:	4b40      	ldr	r3, [pc, #256]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 80092de:	2253      	movs	r2, #83	; 0x53
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f9f6 	bl	80096d4 <RTC_EnterInitMode>
 80092e8:	4603      	mov	r3, r0
 80092ea:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80092ec:	7cfb      	ldrb	r3, [r7, #19]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d163      	bne.n	80093ba <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80092f2:	4b3b      	ldr	r3, [pc, #236]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	d057      	beq.n	80093b0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d125      	bne.n	8009352 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009306:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2200      	movs	r2, #0
 8009316:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fa53 	bl	80097c8 <RTC_ByteToBcd2>
 8009322:	4603      	mov	r3, r0
 8009324:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fa4c 	bl	80097c8 <RTC_ByteToBcd2>
 8009330:	4603      	mov	r3, r0
 8009332:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009334:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	789b      	ldrb	r3, [r3, #2]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fa44 	bl	80097c8 <RTC_ByteToBcd2>
 8009340:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009342:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	78db      	ldrb	r3, [r3, #3]
 800934a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e017      	b.n	8009382 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2200      	movs	r2, #0
 8009362:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009370:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009376:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	78db      	ldrb	r3, [r3, #3]
 800937c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8009382:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800938a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800938e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	4a12      	ldr	r2, [pc, #72]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 8009396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800939a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 800939e:	699a      	ldr	r2, [r3, #24]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	68d9      	ldr	r1, [r3, #12]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	430b      	orrs	r3, r1
 80093aa:	490d      	ldr	r1, [pc, #52]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f9cb 	bl	800974c <RTC_ExitInitMode>
 80093b6:	4603      	mov	r3, r0
 80093b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <HAL_RTC_SetTime+0x134>)
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80093c0:	7cfb      	ldrb	r3, [r7, #19]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d103      	bne.n	80093ce <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80093d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd90      	pop	{r4, r7, pc}
 80093e0:	46007800 	.word	0x46007800

080093e4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80093f0:	4b34      	ldr	r3, [pc, #208]	; (80094c4 <HAL_RTC_GetTime+0xe0>)
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80093f8:	4b32      	ldr	r3, [pc, #200]	; (80094c4 <HAL_RTC_GetTime+0xe0>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009404:	d04a      	beq.n	800949c <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <HAL_RTC_GetTime+0xe0>)
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8009412:	4b2c      	ldr	r3, [pc, #176]	; (80094c4 <HAL_RTC_GetTime+0xe0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800941a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800941e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800942a:	b2da      	uxtb	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	b2da      	uxtb	r2, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009448:	b2da      	uxtb	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	0d9b      	lsrs	r3, r3, #22
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d12a      	bne.n	80094ba <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f9cd 	bl	8009808 <RTC_Bcd2ToByte>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f9c4 	bl	8009808 <RTC_Bcd2ToByte>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	789b      	ldrb	r3, [r3, #2]
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f9bb 	bl	8009808 <RTC_Bcd2ToByte>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	709a      	strb	r2, [r3, #2]
 800949a:	e00e      	b.n	80094ba <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2200      	movs	r2, #0
 80094a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	46007800 	.word	0x46007800

080094c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_RTC_SetDate+0x1a>
 80094de:	2302      	movs	r3, #2
 80094e0:	e071      	b.n	80095c6 <HAL_RTC_SetDate+0xfe>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10e      	bne.n	8009516 <HAL_RTC_SetDate+0x4e>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	d008      	beq.n	8009516 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	f023 0310 	bic.w	r3, r3, #16
 800950c:	b2db      	uxtb	r3, r3
 800950e:	330a      	adds	r3, #10
 8009510:	b2da      	uxtb	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11c      	bne.n	8009556 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	78db      	ldrb	r3, [r3, #3]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f951 	bl	80097c8 <RTC_ByteToBcd2>
 8009526:	4603      	mov	r3, r0
 8009528:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f94a 	bl	80097c8 <RTC_ByteToBcd2>
 8009534:	4603      	mov	r3, r0
 8009536:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009538:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	789b      	ldrb	r3, [r3, #2]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f942 	bl	80097c8 <RTC_ByteToBcd2>
 8009544:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009546:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e00e      	b.n	8009574 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	78db      	ldrb	r3, [r3, #3]
 800955a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009562:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009568:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009574:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <HAL_RTC_SetDate+0x108>)
 8009576:	22ca      	movs	r2, #202	; 0xca
 8009578:	625a      	str	r2, [r3, #36]	; 0x24
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <HAL_RTC_SetDate+0x108>)
 800957c:	2253      	movs	r2, #83	; 0x53
 800957e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f8a7 	bl	80096d4 <RTC_EnterInitMode>
 8009586:	4603      	mov	r3, r0
 8009588:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800958a:	7cfb      	ldrb	r3, [r7, #19]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10b      	bne.n	80095a8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009590:	4a0f      	ldr	r2, [pc, #60]	; (80095d0 <HAL_RTC_SetDate+0x108>)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009598:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800959c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f8d4 	bl	800974c <RTC_ExitInitMode>
 80095a4:	4603      	mov	r3, r0
 80095a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095a8:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <HAL_RTC_SetDate+0x108>)
 80095aa:	22ff      	movs	r2, #255	; 0xff
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80095ae:	7cfb      	ldrb	r3, [r7, #19]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80095c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd90      	pop	{r4, r7, pc}
 80095ce:	bf00      	nop
 80095d0:	46007800 	.word	0x46007800

080095d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80095e0:	4b22      	ldr	r3, [pc, #136]	; (800966c <HAL_RTC_GetDate+0x98>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 031f 	and.w	r3, r3, #31
 8009602:	b2da      	uxtb	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	0b5b      	lsrs	r3, r3, #13
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	b2da      	uxtb	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d11a      	bne.n	8009662 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	78db      	ldrb	r3, [r3, #3]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 f8e9 	bl	8009808 <RTC_Bcd2ToByte>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	785b      	ldrb	r3, [r3, #1]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f8e0 	bl	8009808 <RTC_Bcd2ToByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	789b      	ldrb	r3, [r3, #2]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f8d7 	bl	8009808 <RTC_Bcd2ToByte>
 800965a:	4603      	mov	r3, r0
 800965c:	461a      	mov	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	46007800 	.word	0x46007800

08009670 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009678:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <HAL_RTC_WaitForSynchro+0x60>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <HAL_RTC_WaitForSynchro+0x60>)
 800967e:	f023 0320 	bic.w	r3, r3, #32
 8009682:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009684:	f7f8 fac8 	bl	8001c18 <HAL_GetTick>
 8009688:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800968a:	e013      	b.n	80096b4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800968c:	f7f8 fac4 	bl	8001c18 <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800969a:	d90b      	bls.n	80096b4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_RTC_WaitForSynchro+0x60>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10c      	bne.n	80096c2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2203      	movs	r2, #3
 80096ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e008      	b.n	80096c6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_RTC_WaitForSynchro+0x60>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0e5      	beq.n	800968c <HAL_RTC_WaitForSynchro+0x1c>
 80096c0:	e000      	b.n	80096c4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80096c2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	46007800 	.word	0x46007800

080096d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80096e0:	4b19      	ldr	r3, [pc, #100]	; (8009748 <RTC_EnterInitMode+0x74>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d128      	bne.n	800973e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80096ec:	4b16      	ldr	r3, [pc, #88]	; (8009748 <RTC_EnterInitMode+0x74>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	4a15      	ldr	r2, [pc, #84]	; (8009748 <RTC_EnterInitMode+0x74>)
 80096f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80096f8:	f7f8 fa8e 	bl	8001c18 <HAL_GetTick>
 80096fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096fe:	e013      	b.n	8009728 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009700:	f7f8 fa8a 	bl	8001c18 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800970e:	d90b      	bls.n	8009728 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009710:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <RTC_EnterInitMode+0x74>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10f      	bne.n	800973c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2203      	movs	r2, #3
 8009724:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <RTC_EnterInitMode+0x74>)
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d104      	bne.n	800973e <RTC_EnterInitMode+0x6a>
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d1e2      	bne.n	8009700 <RTC_EnterInitMode+0x2c>
 800973a:	e000      	b.n	800973e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800973c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	46007800 	.word	0x46007800

0800974c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009758:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <RTC_ExitInitMode+0x78>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <RTC_ExitInitMode+0x78>)
 800975e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009762:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009764:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <RTC_ExitInitMode+0x78>)
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10c      	bne.n	800978a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ff7d 	bl	8009670 <HAL_RTC_WaitForSynchro>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01e      	beq.n	80097ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2203      	movs	r2, #3
 8009780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	73fb      	strb	r3, [r7, #15]
 8009788:	e017      	b.n	80097ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <RTC_ExitInitMode+0x78>)
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <RTC_ExitInitMode+0x78>)
 8009790:	f023 0320 	bic.w	r3, r3, #32
 8009794:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff ff6a 	bl	8009670 <HAL_RTC_WaitForSynchro>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2203      	movs	r2, #3
 80097a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <RTC_ExitInitMode+0x78>)
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <RTC_ExitInitMode+0x78>)
 80097b4:	f043 0320 	orr.w	r3, r3, #32
 80097b8:	6193      	str	r3, [r2, #24]
  }
  return status;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	46007800 	.word	0x46007800

080097c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80097da:	e005      	b.n	80097e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	3b0a      	subs	r3, #10
 80097e6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80097e8:	7afb      	ldrb	r3, [r7, #11]
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d8f6      	bhi.n	80097dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	b2db      	uxtb	r3, r3
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	091b      	lsrs	r3, r3, #4
 8009816:	b2db      	uxtb	r3, r3
 8009818:	461a      	mov	r2, r3
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	b2db      	uxtb	r3, r3
 8009830:	4413      	add	r3, r2
 8009832:	b2db      	uxtb	r3, r3
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009858:	2302      	movs	r3, #2
 800985a:	e063      	b.n	8009924 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800986c:	4b2f      	ldr	r3, [pc, #188]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800986e:	22ca      	movs	r2, #202	; 0xca
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
 8009872:	4b2e      	ldr	r3, [pc, #184]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009874:	2253      	movs	r2, #83	; 0x53
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009878:	4b2c      	ldr	r3, [pc, #176]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	4a2b      	ldr	r2, [pc, #172]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800987e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009882:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009884:	4b29      	ldr	r3, [pc, #164]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009886:	2204      	movs	r2, #4
 8009888:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800988a:	4b28      	ldr	r3, [pc, #160]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	d126      	bne.n	80098e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 8009896:	f7f8 f9bf 	bl	8001c18 <HAL_GetTick>
 800989a:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800989c:	e01a      	b.n	80098d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800989e:	f7f8 f9bb 	bl	8001c18 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098ac:	d912      	bls.n	80098d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80098ae:	4b1f      	ldr	r3, [pc, #124]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d113      	bne.n	80098e2 <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098ba:	4b1c      	ldr	r3, [pc, #112]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098bc:	22ff      	movs	r2, #255	; 0xff
 80098be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2203      	movs	r2, #3
 80098c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e027      	b.n	8009924 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80098d4:	4b15      	ldr	r3, [pc, #84]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0de      	beq.n	800989e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80098e0:	e000      	b.n	80098e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80098e2:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	041a      	lsls	r2, r3, #16
 80098e8:	4910      	ldr	r1, [pc, #64]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80098f0:	4b0e      	ldr	r3, [pc, #56]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	f023 0207 	bic.w	r2, r3, #7
 80098f8:	490c      	ldr	r1, [pc, #48]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	4a09      	ldr	r2, [pc, #36]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009906:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800990a:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800990c:	4b07      	ldr	r3, [pc, #28]	; (800992c <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800990e:	22ff      	movs	r2, #255	; 0xff
 8009910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	46007800 	.word	0x46007800

08009930 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8009942:	2302      	movs	r3, #2
 8009944:	e046      	b.n	80099d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009956:	4b21      	ldr	r3, [pc, #132]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009958:	22ca      	movs	r2, #202	; 0xca
 800995a:	625a      	str	r2, [r3, #36]	; 0x24
 800995c:	4b1f      	ldr	r3, [pc, #124]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800995e:	2253      	movs	r2, #83	; 0x53
 8009960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8009962:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	4a1d      	ldr	r2, [pc, #116]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009968:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 800996c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800996e:	f7f8 f953 	bl	8001c18 <HAL_GetTick>
 8009972:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009974:	e01a      	b.n	80099ac <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009976:	f7f8 f94f 	bl	8001c18 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009984:	d912      	bls.n	80099ac <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009986:	4b15      	ldr	r3, [pc, #84]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d113      	bne.n	80099ba <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009994:	22ff      	movs	r2, #255	; 0xff
 8009996:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2203      	movs	r2, #3
 800999c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e013      	b.n	80099d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0de      	beq.n	8009976 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 80099b8:	e000      	b.n	80099bc <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 80099ba:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80099be:	22ff      	movs	r2, #255	; 0xff
 80099c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	46007800 	.word	0x46007800

080099e0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80099e8:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80099f4:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80099f6:	2204      	movs	r2, #4
 80099f8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7f7 fd38 	bl	8001470 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	46007800 	.word	0x46007800

08009a14 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	4910      	ldr	r1, [pc, #64]	; (8009a68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	490c      	ldr	r1, [pc, #48]	; (8009a6c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	6919      	ldr	r1, [r3, #16]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	430b      	orrs	r3, r1
 8009a54:	4905      	ldr	r1, [pc, #20]	; (8009a6c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	46007800 	.word	0x46007800
 8009a6c:	46007c00 	.word	0x46007c00

08009a70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e0fb      	b.n	8009c7a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a7f      	ldr	r2, [pc, #508]	; (8009c84 <HAL_SPI_Init+0x214>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_SPI_Init+0x26>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a7d      	ldr	r2, [pc, #500]	; (8009c88 <HAL_SPI_Init+0x218>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	e000      	b.n	8009a98 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009a96:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a78      	ldr	r2, [pc, #480]	; (8009c84 <HAL_SPI_Init+0x214>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_SPI_Init+0x42>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a76      	ldr	r2, [pc, #472]	; (8009c88 <HAL_SPI_Init+0x218>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d105      	bne.n	8009abe <HAL_SPI_Init+0x4e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	2b0f      	cmp	r3, #15
 8009ab8:	d901      	bls.n	8009abe <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e0dd      	b.n	8009c7a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fbd8 	bl	800a274 <SPI_GetPacketSize>
 8009ac4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a6e      	ldr	r2, [pc, #440]	; (8009c84 <HAL_SPI_Init+0x214>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d004      	beq.n	8009ada <HAL_SPI_Init+0x6a>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a6c      	ldr	r2, [pc, #432]	; (8009c88 <HAL_SPI_Init+0x218>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d102      	bne.n	8009ae0 <HAL_SPI_Init+0x70>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d816      	bhi.n	8009b0e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ae4:	4a69      	ldr	r2, [pc, #420]	; (8009c8c <HAL_SPI_Init+0x21c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00e      	beq.n	8009b08 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a68      	ldr	r2, [pc, #416]	; (8009c90 <HAL_SPI_Init+0x220>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d009      	beq.n	8009b08 <HAL_SPI_Init+0x98>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a66      	ldr	r2, [pc, #408]	; (8009c94 <HAL_SPI_Init+0x224>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d004      	beq.n	8009b08 <HAL_SPI_Init+0x98>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a65      	ldr	r2, [pc, #404]	; (8009c98 <HAL_SPI_Init+0x228>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d104      	bne.n	8009b12 <HAL_SPI_Init+0xa2>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b10      	cmp	r3, #16
 8009b0c:	d901      	bls.n	8009b12 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e0b3      	b.n	8009c7a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7f7 fe06 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0201 	bic.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009b4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b58:	d119      	bne.n	8009b8e <HAL_SPI_Init+0x11e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b62:	d103      	bne.n	8009b6c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d008      	beq.n	8009b7e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10c      	bne.n	8009b8e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b7c:	d107      	bne.n	8009b8e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <HAL_SPI_Init+0x14a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d90b      	bls.n	8009bba <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e007      	b.n	8009bca <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69da      	ldr	r2, [r3, #28]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bdc:	ea42 0103 	orr.w	r1, r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68da      	ldr	r2, [r3, #12]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c36:	ea42 0103 	orr.w	r1, r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	46002000 	.word	0x46002000
 8009c88:	56002000 	.word	0x56002000
 8009c8c:	40013000 	.word	0x40013000
 8009c90:	50013000 	.word	0x50013000
 8009c94:	40003800 	.word	0x40003800
 8009c98:	50003800 	.word	0x50003800

08009c9c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3320      	adds	r3, #32
 8009cb2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <HAL_SPI_Transmit+0x2a>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e203      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cce:	f7f7 ffa3 	bl	8001c18 <HAL_GetTick>
 8009cd2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d007      	beq.n	8009cf0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009cec:	7efb      	ldrb	r3, [r7, #27]
 8009cee:	e1ee      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_SPI_Transmit+0x60>
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009d08:	7efb      	ldrb	r3, [r7, #27]
 8009d0a:	e1e0      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	88fa      	ldrh	r2, [r7, #6]
 8009d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009d5c:	d108      	bne.n	8009d70 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e009      	b.n	8009d84 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	0c1b      	lsrs	r3, r3, #16
 8009d8c:	041b      	lsls	r3, r3, #16
 8009d8e:	88f9      	ldrh	r1, [r7, #6]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	430b      	orrs	r3, r1
 8009d96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0201 	orr.w	r2, r2, #1
 8009da6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10c      	bne.n	8009dd0 <HAL_SPI_Transmit+0x134>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dbe:	d107      	bne.n	8009dd0 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b0f      	cmp	r3, #15
 8009dd6:	d95b      	bls.n	8009e90 <HAL_SPI_Transmit+0x1f4>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a8f      	ldr	r2, [pc, #572]	; (800a01c <HAL_SPI_Transmit+0x380>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d04f      	beq.n	8009e82 <HAL_SPI_Transmit+0x1e6>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a8e      	ldr	r2, [pc, #568]	; (800a020 <HAL_SPI_Transmit+0x384>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d04a      	beq.n	8009e82 <HAL_SPI_Transmit+0x1e6>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a8c      	ldr	r2, [pc, #560]	; (800a024 <HAL_SPI_Transmit+0x388>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d045      	beq.n	8009e82 <HAL_SPI_Transmit+0x1e6>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a8b      	ldr	r2, [pc, #556]	; (800a028 <HAL_SPI_Transmit+0x38c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d147      	bne.n	8009e90 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e00:	e03f      	b.n	8009e82 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d114      	bne.n	8009e3a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009e38:	e023      	b.n	8009e82 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e3a:	f7f7 feed 	bl	8001c18 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d803      	bhi.n	8009e52 <HAL_SPI_Transmit+0x1b6>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d102      	bne.n	8009e58 <HAL_SPI_Transmit+0x1bc>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d114      	bne.n	8009e82 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f93d 	bl	800a0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e125      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1b9      	bne.n	8009e02 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009e8e:	e0f8      	b.n	800a082 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	f240 80ed 	bls.w	800a074 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e9a:	e05d      	b.n	8009f58 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d132      	bne.n	8009f10 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d918      	bls.n	8009ee8 <HAL_SPI_Transmit+0x24c>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d014      	beq.n	8009ee8 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	3b02      	subs	r3, #2
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ee6:	e037      	b.n	8009f58 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eec:	881a      	ldrh	r2, [r3, #0]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef6:	1c9a      	adds	r2, r3, #2
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009f0e:	e023      	b.n	8009f58 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f10:	f7f7 fe82 	bl	8001c18 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d803      	bhi.n	8009f28 <HAL_SPI_Transmit+0x28c>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d102      	bne.n	8009f2e <HAL_SPI_Transmit+0x292>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d114      	bne.n	8009f58 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 f8d2 	bl	800a0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e0ba      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d19b      	bne.n	8009e9c <HAL_SPI_Transmit+0x200>
 8009f64:	e08d      	b.n	800a082 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d15b      	bne.n	800a02c <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d918      	bls.n	8009fb2 <HAL_SPI_Transmit+0x316>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	d914      	bls.n	8009fb2 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b04      	subs	r3, #4
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009fb0:	e060      	b.n	800a074 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d917      	bls.n	8009fee <HAL_SPI_Transmit+0x352>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d013      	beq.n	8009fee <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fca:	881a      	ldrh	r2, [r3, #0]
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd4:	1c9a      	adds	r2, r3, #2
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009fec:	e042      	b.n	800a074 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3320      	adds	r3, #32
 8009ff8:	7812      	ldrb	r2, [r2, #0]
 8009ffa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a018:	e02c      	b.n	800a074 <HAL_SPI_Transmit+0x3d8>
 800a01a:	bf00      	nop
 800a01c:	40013000 	.word	0x40013000
 800a020:	50013000 	.word	0x50013000
 800a024:	40003800 	.word	0x40003800
 800a028:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a02c:	f7f7 fdf4 	bl	8001c18 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d803      	bhi.n	800a044 <HAL_SPI_Transmit+0x3a8>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a042:	d102      	bne.n	800a04a <HAL_SPI_Transmit+0x3ae>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d114      	bne.n	800a074 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f000 f844 	bl	800a0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e02c      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f47f af72 	bne.w	8009f66 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2200      	movs	r2, #0
 800a08a:	2108      	movs	r1, #8
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f8c3 	bl	800a218 <SPI_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a09e:	f043 0220 	orr.w	r2, r3, #32
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 f815 	bl	800a0d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800a0cc:	7efb      	ldrb	r3, [r7, #27]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3720      	adds	r7, #32
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0208 	orr.w	r2, r2, #8
 800a0f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699a      	ldr	r2, [r3, #24]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0210 	orr.w	r2, r2, #16
 800a106:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0201 	bic.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800a126:	f023 0303 	bic.w	r3, r3, #3
 800a12a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a13a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b04      	cmp	r3, #4
 800a146:	d014      	beq.n	800a172 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f042 0220 	orr.w	r2, r2, #32
 800a170:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d014      	beq.n	800a1a8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00f      	beq.n	800a1a8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a18e:	f043 0204 	orr.w	r2, r3, #4
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00f      	beq.n	800a1d2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b8:	f043 0201 	orr.w	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	699a      	ldr	r2, [r3, #24]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00f      	beq.n	800a1fc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e2:	f043 0208 	orr.w	r2, r3, #8
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	699a      	ldr	r2, [r3, #24]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800a20c:	bf00      	nop
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	4613      	mov	r3, r2
 800a226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a228:	e010      	b.n	800a24c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a22a:	f7f7 fcf5 	bl	8001c18 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d803      	bhi.n	800a242 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d102      	bne.n	800a248 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e00f      	b.n	800a26c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	695a      	ldr	r2, [r3, #20]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4013      	ands	r3, r2
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	429a      	cmp	r2, r3
 800a268:	d0df      	beq.n	800a22a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	3307      	adds	r3, #7
 800a292:	08db      	lsrs	r3, r3, #3
 800a294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d12e      	bne.n	800a31e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e028      	b.n	800a320 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0201 	bic.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800a2fa:	ea42 0103 	orr.w	r1, r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e000      	b.n	800a320 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
  }
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e049      	b.n	800a3d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f841 	bl	800a3da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f000 fa88 	bl	800a880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b01      	cmp	r3, #1
 800a402:	d001      	beq.n	800a408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e072      	b.n	800a4ee <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0201 	orr.w	r2, r2, #1
 800a41e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a35      	ldr	r2, [pc, #212]	; (800a4fc <HAL_TIM_Base_Start_IT+0x10c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d040      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a34      	ldr	r2, [pc, #208]	; (800a500 <HAL_TIM_Base_Start_IT+0x110>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d03b      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43c:	d036      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a446:	d031      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a2d      	ldr	r2, [pc, #180]	; (800a504 <HAL_TIM_Base_Start_IT+0x114>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d02c      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a2c      	ldr	r2, [pc, #176]	; (800a508 <HAL_TIM_Base_Start_IT+0x118>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d027      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a2a      	ldr	r2, [pc, #168]	; (800a50c <HAL_TIM_Base_Start_IT+0x11c>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d022      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a29      	ldr	r2, [pc, #164]	; (800a510 <HAL_TIM_Base_Start_IT+0x120>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d01d      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a27      	ldr	r2, [pc, #156]	; (800a514 <HAL_TIM_Base_Start_IT+0x124>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d018      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a26      	ldr	r2, [pc, #152]	; (800a518 <HAL_TIM_Base_Start_IT+0x128>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a24      	ldr	r2, [pc, #144]	; (800a51c <HAL_TIM_Base_Start_IT+0x12c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a23      	ldr	r2, [pc, #140]	; (800a520 <HAL_TIM_Base_Start_IT+0x130>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a21      	ldr	r2, [pc, #132]	; (800a524 <HAL_TIM_Base_Start_IT+0x134>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIM_Base_Start_IT+0xbc>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a20      	ldr	r2, [pc, #128]	; (800a528 <HAL_TIM_Base_Start_IT+0x138>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d115      	bne.n	800a4d8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	4b1e      	ldr	r3, [pc, #120]	; (800a52c <HAL_TIM_Base_Start_IT+0x13c>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d015      	beq.n	800a4ea <HAL_TIM_Base_Start_IT+0xfa>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c4:	d011      	beq.n	800a4ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0201 	orr.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d6:	e008      	b.n	800a4ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0201 	orr.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	e000      	b.n	800a4ec <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40012c00 	.word	0x40012c00
 800a500:	50012c00 	.word	0x50012c00
 800a504:	40000400 	.word	0x40000400
 800a508:	50000400 	.word	0x50000400
 800a50c:	40000800 	.word	0x40000800
 800a510:	50000800 	.word	0x50000800
 800a514:	40000c00 	.word	0x40000c00
 800a518:	50000c00 	.word	0x50000c00
 800a51c:	40013400 	.word	0x40013400
 800a520:	50013400 	.word	0x50013400
 800a524:	40014000 	.word	0x40014000
 800a528:	50014000 	.word	0x50014000
 800a52c:	00010007 	.word	0x00010007

0800a530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b02      	cmp	r3, #2
 800a544:	d122      	bne.n	800a58c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0302 	and.w	r3, r3, #2
 800a550:	2b02      	cmp	r3, #2
 800a552:	d11b      	bne.n	800a58c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0202 	mvn.w	r2, #2
 800a55c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f965 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a578:	e005      	b.n	800a586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f957 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f968 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b04      	cmp	r3, #4
 800a598:	d122      	bne.n	800a5e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d11b      	bne.n	800a5e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f06f 0204 	mvn.w	r2, #4
 800a5b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f93b 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a5cc:	e005      	b.n	800a5da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f92d 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f93e 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d122      	bne.n	800a634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d11b      	bne.n	800a634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f06f 0208 	mvn.w	r2, #8
 800a604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2204      	movs	r2, #4
 800a60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f911 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a620:	e005      	b.n	800a62e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f903 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f914 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f003 0310 	and.w	r3, r3, #16
 800a63e:	2b10      	cmp	r3, #16
 800a640:	d122      	bne.n	800a688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d11b      	bne.n	800a688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f06f 0210 	mvn.w	r2, #16
 800a658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2208      	movs	r2, #8
 800a65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f8e7 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a674:	e005      	b.n	800a682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8d9 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f8ea 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b01      	cmp	r3, #1
 800a694:	d10e      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d107      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f06f 0201 	mvn.w	r2, #1
 800a6ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7f6 feea 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6be:	2b80      	cmp	r3, #128	; 0x80
 800a6c0:	d10e      	bne.n	800a6e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6cc:	2b80      	cmp	r3, #128	; 0x80
 800a6ce:	d107      	bne.n	800a6e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f9d4 	bl	800aa88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ee:	d10e      	bne.n	800a70e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fa:	2b80      	cmp	r3, #128	; 0x80
 800a6fc:	d107      	bne.n	800a70e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f9c7 	bl	800aa9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a718:	2b40      	cmp	r3, #64	; 0x40
 800a71a:	d10e      	bne.n	800a73a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d107      	bne.n	800a73a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f898 	bl	800a86a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b20      	cmp	r3, #32
 800a746:	d10e      	bne.n	800a766 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b20      	cmp	r3, #32
 800a754:	d107      	bne.n	800a766 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f06f 0220 	mvn.w	r2, #32
 800a75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f987 	bl	800aa74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a774:	d10f      	bne.n	800a796 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a784:	d107      	bne.n	800a796 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f98d 	bl	800aab0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a4:	d10f      	bne.n	800a7c6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7b4:	d107      	bne.n	800a7c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a7be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f97f 	bl	800aac4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7d4:	d10f      	bne.n	800a7f6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e4:	d107      	bne.n	800a7f6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f971 	bl	800aad8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a800:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a804:	d10f      	bne.n	800a826 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a814:	d107      	bne.n	800a826 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f963 	bl	800aaec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a68      	ldr	r2, [pc, #416]	; (800aa34 <TIM_Base_SetConfig+0x1b4>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d02b      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a67      	ldr	r2, [pc, #412]	; (800aa38 <TIM_Base_SetConfig+0x1b8>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d027      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a6:	d023      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ae:	d01f      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a62      	ldr	r2, [pc, #392]	; (800aa3c <TIM_Base_SetConfig+0x1bc>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d01b      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a61      	ldr	r2, [pc, #388]	; (800aa40 <TIM_Base_SetConfig+0x1c0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d017      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a60      	ldr	r2, [pc, #384]	; (800aa44 <TIM_Base_SetConfig+0x1c4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d013      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a5f      	ldr	r2, [pc, #380]	; (800aa48 <TIM_Base_SetConfig+0x1c8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00f      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a5e      	ldr	r2, [pc, #376]	; (800aa4c <TIM_Base_SetConfig+0x1cc>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00b      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a5d      	ldr	r2, [pc, #372]	; (800aa50 <TIM_Base_SetConfig+0x1d0>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d007      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a5c      	ldr	r2, [pc, #368]	; (800aa54 <TIM_Base_SetConfig+0x1d4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_Base_SetConfig+0x70>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a5b      	ldr	r2, [pc, #364]	; (800aa58 <TIM_Base_SetConfig+0x1d8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d108      	bne.n	800a902 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a4b      	ldr	r2, [pc, #300]	; (800aa34 <TIM_Base_SetConfig+0x1b4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d043      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a4a      	ldr	r2, [pc, #296]	; (800aa38 <TIM_Base_SetConfig+0x1b8>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d03f      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a918:	d03b      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a920:	d037      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a45      	ldr	r2, [pc, #276]	; (800aa3c <TIM_Base_SetConfig+0x1bc>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d033      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a44      	ldr	r2, [pc, #272]	; (800aa40 <TIM_Base_SetConfig+0x1c0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d02f      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a43      	ldr	r2, [pc, #268]	; (800aa44 <TIM_Base_SetConfig+0x1c4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d02b      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a42      	ldr	r2, [pc, #264]	; (800aa48 <TIM_Base_SetConfig+0x1c8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d027      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a41      	ldr	r2, [pc, #260]	; (800aa4c <TIM_Base_SetConfig+0x1cc>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d023      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a40      	ldr	r2, [pc, #256]	; (800aa50 <TIM_Base_SetConfig+0x1d0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d01f      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a3f      	ldr	r2, [pc, #252]	; (800aa54 <TIM_Base_SetConfig+0x1d4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01b      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a3e      	ldr	r2, [pc, #248]	; (800aa58 <TIM_Base_SetConfig+0x1d8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d017      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a3d      	ldr	r2, [pc, #244]	; (800aa5c <TIM_Base_SetConfig+0x1dc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a3c      	ldr	r2, [pc, #240]	; (800aa60 <TIM_Base_SetConfig+0x1e0>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00f      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a3b      	ldr	r2, [pc, #236]	; (800aa64 <TIM_Base_SetConfig+0x1e4>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a3a      	ldr	r2, [pc, #232]	; (800aa68 <TIM_Base_SetConfig+0x1e8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a39      	ldr	r2, [pc, #228]	; (800aa6c <TIM_Base_SetConfig+0x1ec>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_Base_SetConfig+0x112>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a38      	ldr	r2, [pc, #224]	; (800aa70 <TIM_Base_SetConfig+0x1f0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d108      	bne.n	800a9a4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	; (800aa34 <TIM_Base_SetConfig+0x1b4>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d023      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a19      	ldr	r2, [pc, #100]	; (800aa38 <TIM_Base_SetConfig+0x1b8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d01f      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1e      	ldr	r2, [pc, #120]	; (800aa54 <TIM_Base_SetConfig+0x1d4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d01b      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a1d      	ldr	r2, [pc, #116]	; (800aa58 <TIM_Base_SetConfig+0x1d8>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d017      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a1c      	ldr	r2, [pc, #112]	; (800aa5c <TIM_Base_SetConfig+0x1dc>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d013      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1b      	ldr	r2, [pc, #108]	; (800aa60 <TIM_Base_SetConfig+0x1e0>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00f      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a1a      	ldr	r2, [pc, #104]	; (800aa64 <TIM_Base_SetConfig+0x1e4>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d00b      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a19      	ldr	r2, [pc, #100]	; (800aa68 <TIM_Base_SetConfig+0x1e8>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d007      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a18      	ldr	r2, [pc, #96]	; (800aa6c <TIM_Base_SetConfig+0x1ec>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d003      	beq.n	800aa18 <TIM_Base_SetConfig+0x198>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a17      	ldr	r2, [pc, #92]	; (800aa70 <TIM_Base_SetConfig+0x1f0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d103      	bne.n	800aa20 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	691a      	ldr	r2, [r3, #16]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	615a      	str	r2, [r3, #20]
}
 800aa26:	bf00      	nop
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40012c00 	.word	0x40012c00
 800aa38:	50012c00 	.word	0x50012c00
 800aa3c:	40000400 	.word	0x40000400
 800aa40:	50000400 	.word	0x50000400
 800aa44:	40000800 	.word	0x40000800
 800aa48:	50000800 	.word	0x50000800
 800aa4c:	40000c00 	.word	0x40000c00
 800aa50:	50000c00 	.word	0x50000c00
 800aa54:	40013400 	.word	0x40013400
 800aa58:	50013400 	.word	0x50013400
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	50014000 	.word	0x50014000
 800aa64:	40014400 	.word	0x40014400
 800aa68:	50014400 	.word	0x50014400
 800aa6c:	40014800 	.word	0x40014800
 800aa70:	50014800 	.word	0x50014800

0800aa74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e042      	b.n	800ab98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7f6 fe71 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2224      	movs	r2, #36	; 0x24
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f8ca 	bl	800acdc <UART_SetConfig>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d101      	bne.n	800ab52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e022      	b.n	800ab98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa60 	bl	800b020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689a      	ldr	r2, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fae7 	bl	800b164 <UART_CheckIdleState>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08a      	sub	sp, #40	; 0x28
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	4613      	mov	r3, r2
 800abae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	f040 808b 	bne.w	800acd2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <HAL_UART_Transmit+0x28>
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e083      	b.n	800acd4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd6:	2b80      	cmp	r3, #128	; 0x80
 800abd8:	d107      	bne.n	800abea <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abe8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2221      	movs	r2, #33	; 0x21
 800abf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abfa:	f7f7 f80d 	bl	8001c18 <HAL_GetTick>
 800abfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	88fa      	ldrh	r2, [r7, #6]
 800ac04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88fa      	ldrh	r2, [r7, #6]
 800ac0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac18:	d108      	bne.n	800ac2c <HAL_UART_Transmit+0x8c>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	e003      	b.n	800ac34 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac34:	e030      	b.n	800ac98 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2180      	movs	r1, #128	; 0x80
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 fb39 	bl	800b2b8 <UART_WaitOnFlagUntilTimeout>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e03d      	b.n	800acd4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	3302      	adds	r3, #2
 800ac72:	61bb      	str	r3, [r7, #24]
 800ac74:	e007      	b.n	800ac86 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	781a      	ldrb	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	3301      	adds	r3, #1
 800ac84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1c8      	bne.n	800ac36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2200      	movs	r2, #0
 800acac:	2140      	movs	r1, #64	; 0x40
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 fb02 	bl	800b2b8 <UART_WaitOnFlagUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d005      	beq.n	800acc6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2220      	movs	r2, #32
 800acbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e006      	b.n	800acd4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2220      	movs	r2, #32
 800acca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	e000      	b.n	800acd4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800acd2:	2302      	movs	r3, #2
  }
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3720      	adds	r7, #32
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ace0:	b094      	sub	sp, #80	; 0x50
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	4b7e      	ldr	r3, [pc, #504]	; (800aeec <UART_SetConfig+0x210>)
 800acf2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	431a      	orrs	r2, r3
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4977      	ldr	r1, [pc, #476]	; (800aef0 <UART_SetConfig+0x214>)
 800ad14:	4019      	ands	r1, r3
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad1c:	430b      	orrs	r3, r1
 800ad1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	68d9      	ldr	r1, [r3, #12]
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	ea40 0301 	orr.w	r3, r0, r1
 800ad36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	4b6a      	ldr	r3, [pc, #424]	; (800aeec <UART_SetConfig+0x210>)
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d009      	beq.n	800ad5c <UART_SetConfig+0x80>
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	4b69      	ldr	r3, [pc, #420]	; (800aef4 <UART_SetConfig+0x218>)
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d004      	beq.n	800ad5c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	6a1a      	ldr	r2, [r3, #32]
 800ad56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ad66:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad70:	430b      	orrs	r3, r1
 800ad72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	f023 000f 	bic.w	r0, r3, #15
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	ea40 0301 	orr.w	r3, r0, r1
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	4b59      	ldr	r3, [pc, #356]	; (800aef8 <UART_SetConfig+0x21c>)
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d102      	bne.n	800ad9c <UART_SetConfig+0xc0>
 800ad96:	2301      	movs	r3, #1
 800ad98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9a:	e029      	b.n	800adf0 <UART_SetConfig+0x114>
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	4b56      	ldr	r3, [pc, #344]	; (800aefc <UART_SetConfig+0x220>)
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d102      	bne.n	800adac <UART_SetConfig+0xd0>
 800ada6:	2302      	movs	r3, #2
 800ada8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adaa:	e021      	b.n	800adf0 <UART_SetConfig+0x114>
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	4b53      	ldr	r3, [pc, #332]	; (800af00 <UART_SetConfig+0x224>)
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d102      	bne.n	800adbc <UART_SetConfig+0xe0>
 800adb6:	2304      	movs	r3, #4
 800adb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adba:	e019      	b.n	800adf0 <UART_SetConfig+0x114>
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	4b50      	ldr	r3, [pc, #320]	; (800af04 <UART_SetConfig+0x228>)
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d102      	bne.n	800adcc <UART_SetConfig+0xf0>
 800adc6:	2308      	movs	r3, #8
 800adc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adca:	e011      	b.n	800adf0 <UART_SetConfig+0x114>
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	4b4d      	ldr	r3, [pc, #308]	; (800af08 <UART_SetConfig+0x22c>)
 800add2:	429a      	cmp	r2, r3
 800add4:	d102      	bne.n	800addc <UART_SetConfig+0x100>
 800add6:	2310      	movs	r3, #16
 800add8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adda:	e009      	b.n	800adf0 <UART_SetConfig+0x114>
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	4b42      	ldr	r3, [pc, #264]	; (800aeec <UART_SetConfig+0x210>)
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d102      	bne.n	800adec <UART_SetConfig+0x110>
 800ade6:	2320      	movs	r3, #32
 800ade8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adea:	e001      	b.n	800adf0 <UART_SetConfig+0x114>
 800adec:	2300      	movs	r3, #0
 800adee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	4b3d      	ldr	r3, [pc, #244]	; (800aeec <UART_SetConfig+0x210>)
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d005      	beq.n	800ae06 <UART_SetConfig+0x12a>
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b3d      	ldr	r3, [pc, #244]	; (800aef4 <UART_SetConfig+0x218>)
 800ae00:	429a      	cmp	r2, r3
 800ae02:	f040 8085 	bne.w	800af10 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae08:	2200      	movs	r2, #0
 800ae0a:	623b      	str	r3, [r7, #32]
 800ae0c:	627a      	str	r2, [r7, #36]	; 0x24
 800ae0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ae12:	f7fc feb7 	bl	8007b84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae16:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 80e8 	beq.w	800aff0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	4a39      	ldr	r2, [pc, #228]	; (800af0c <UART_SetConfig+0x230>)
 800ae26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	4413      	add	r3, r2
 800ae3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d305      	bcc.n	800ae50 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d903      	bls.n	800ae58 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae56:	e048      	b.n	800aeea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	61bb      	str	r3, [r7, #24]
 800ae5e:	61fa      	str	r2, [r7, #28]
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	4a29      	ldr	r2, [pc, #164]	; (800af0c <UART_SetConfig+0x230>)
 800ae66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	617a      	str	r2, [r7, #20]
 800ae72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae7a:	f7f5 fb2b 	bl	80004d4 <__aeabi_uldivmod>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4610      	mov	r0, r2
 800ae84:	4619      	mov	r1, r3
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	020b      	lsls	r3, r1, #8
 800ae90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae94:	0202      	lsls	r2, r0, #8
 800ae96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae98:	6849      	ldr	r1, [r1, #4]
 800ae9a:	0849      	lsrs	r1, r1, #1
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	4605      	mov	r5, r0
 800aea2:	eb12 0804 	adds.w	r8, r2, r4
 800aea6:	eb43 0905 	adc.w	r9, r3, r5
 800aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	60bb      	str	r3, [r7, #8]
 800aeb2:	60fa      	str	r2, [r7, #12]
 800aeb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 fb0a 	bl	80004d4 <__aeabi_uldivmod>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4613      	mov	r3, r2
 800aec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aece:	d308      	bcc.n	800aee2 <UART_SetConfig+0x206>
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aed6:	d204      	bcs.n	800aee2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aede:	60da      	str	r2, [r3, #12]
 800aee0:	e003      	b.n	800aeea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800aee8:	e082      	b.n	800aff0 <UART_SetConfig+0x314>
 800aeea:	e081      	b.n	800aff0 <UART_SetConfig+0x314>
 800aeec:	46002400 	.word	0x46002400
 800aef0:	cfff69f3 	.word	0xcfff69f3
 800aef4:	56002400 	.word	0x56002400
 800aef8:	40013800 	.word	0x40013800
 800aefc:	40004400 	.word	0x40004400
 800af00:	40004800 	.word	0x40004800
 800af04:	40004c00 	.word	0x40004c00
 800af08:	40005000 	.word	0x40005000
 800af0c:	08015ac4 	.word	0x08015ac4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af18:	d13c      	bne.n	800af94 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af1c:	2200      	movs	r2, #0
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af26:	f7fc fe2d 	bl	8007b84 <HAL_RCCEx_GetPeriphCLKFreq>
 800af2a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d05e      	beq.n	800aff0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	4a39      	ldr	r2, [pc, #228]	; (800b01c <UART_SetConfig+0x340>)
 800af38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3c:	461a      	mov	r2, r3
 800af3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af40:	fbb3 f3f2 	udiv	r3, r3, r2
 800af44:	005a      	lsls	r2, r3, #1
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	085b      	lsrs	r3, r3, #1
 800af4c:	441a      	add	r2, r3
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	fbb2 f3f3 	udiv	r3, r2, r3
 800af56:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	2b0f      	cmp	r3, #15
 800af5c:	d916      	bls.n	800af8c <UART_SetConfig+0x2b0>
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af64:	d212      	bcs.n	800af8c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f023 030f 	bic.w	r3, r3, #15
 800af6e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af72:	085b      	lsrs	r3, r3, #1
 800af74:	b29b      	uxth	r3, r3
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800af7e:	4313      	orrs	r3, r2
 800af80:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800af88:	60da      	str	r2, [r3, #12]
 800af8a:	e031      	b.n	800aff0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af92:	e02d      	b.n	800aff0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af96:	2200      	movs	r2, #0
 800af98:	469a      	mov	sl, r3
 800af9a:	4693      	mov	fp, r2
 800af9c:	4650      	mov	r0, sl
 800af9e:	4659      	mov	r1, fp
 800afa0:	f7fc fdf0 	bl	8007b84 <HAL_RCCEx_GetPeriphCLKFreq>
 800afa4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800afa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d021      	beq.n	800aff0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	4a1a      	ldr	r2, [pc, #104]	; (800b01c <UART_SetConfig+0x340>)
 800afb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb6:	461a      	mov	r2, r3
 800afb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afba:	fbb3 f2f2 	udiv	r2, r3, r2
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	441a      	add	r2, r3
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	fbb2 f3f3 	udiv	r3, r2, r3
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd2:	2b0f      	cmp	r3, #15
 800afd4:	d909      	bls.n	800afea <UART_SetConfig+0x30e>
 800afd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afdc:	d205      	bcs.n	800afea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60da      	str	r2, [r3, #12]
 800afe8:	e002      	b.n	800aff0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	2201      	movs	r2, #1
 800aff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	2201      	movs	r2, #1
 800affc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	2200      	movs	r2, #0
 800b004:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	2200      	movs	r2, #0
 800b00a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b00c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b010:	4618      	mov	r0, r3
 800b012:	3750      	adds	r7, #80	; 0x50
 800b014:	46bd      	mov	sp, r7
 800b016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b01a:	bf00      	nop
 800b01c:	08015ac4 	.word	0x08015ac4

0800b020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00a      	beq.n	800b04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00a      	beq.n	800b06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	430a      	orrs	r2, r1
 800b06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	f003 0308 	and.w	r3, r3, #8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	f003 0310 	and.w	r3, r3, #16
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01a      	beq.n	800b136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b11e:	d10a      	bne.n	800b136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	605a      	str	r2, [r3, #4]
  }
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b098      	sub	sp, #96	; 0x60
 800b168:	af02      	add	r7, sp, #8
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b174:	f7f6 fd50 	bl	8001c18 <HAL_GetTick>
 800b178:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b08      	cmp	r3, #8
 800b186:	d12f      	bne.n	800b1e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b190:	2200      	movs	r2, #0
 800b192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f88e 	bl	800b2b8 <UART_WaitOnFlagUntilTimeout>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d022      	beq.n	800b1e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e6      	bne.n	800b1a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e063      	b.n	800b2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0304 	and.w	r3, r3, #4
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d149      	bne.n	800b28a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1fe:	2200      	movs	r2, #0
 800b200:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f857 	bl	800b2b8 <UART_WaitOnFlagUntilTimeout>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d03c      	beq.n	800b28a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	623b      	str	r3, [r7, #32]
   return(result);
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b224:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22e:	633b      	str	r3, [r7, #48]	; 0x30
 800b230:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e6      	bne.n	800b210 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	60fb      	str	r3, [r7, #12]
   return(result);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	64bb      	str	r3, [r7, #72]	; 0x48
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b262:	61fa      	str	r2, [r7, #28]
 800b264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	69b9      	ldr	r1, [r7, #24]
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	617b      	str	r3, [r7, #20]
   return(result);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e012      	b.n	800b2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2220      	movs	r2, #32
 800b296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3758      	adds	r7, #88	; 0x58
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c8:	e049      	b.n	800b35e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d0:	d045      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d2:	f7f6 fca1 	bl	8001c18 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d302      	bcc.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e048      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0304 	and.w	r3, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d031      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b08      	cmp	r3, #8
 800b306:	d110      	bne.n	800b32a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2208      	movs	r2, #8
 800b30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f838 	bl	800b386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2208      	movs	r2, #8
 800b31a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e029      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b338:	d111      	bne.n	800b35e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f81e 	bl	800b386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e00f      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69da      	ldr	r2, [r3, #28]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	4013      	ands	r3, r2
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d0a6      	beq.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b386:	b480      	push	{r7}
 800b388:	b095      	sub	sp, #84	; 0x54
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e6      	bne.n	800b38e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	e853 3f00 	ldrex	r3, [r3]
 800b3ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d6:	f023 0301 	bic.w	r3, r3, #1
 800b3da:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ec:	e841 2300 	strex	r3, r2, [r1]
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1e3      	bne.n	800b3c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d118      	bne.n	800b432 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f023 0310 	bic.w	r3, r3, #16
 800b414:	647b      	str	r3, [r7, #68]	; 0x44
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b41e:	61bb      	str	r3, [r7, #24]
 800b420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6979      	ldr	r1, [r7, #20]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	613b      	str	r3, [r7, #16]
   return(result);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e6      	bne.n	800b400 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b446:	bf00      	nop
 800b448:	3754      	adds	r7, #84	; 0x54
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UARTEx_DisableFifoMode+0x16>
 800b464:	2302      	movs	r3, #2
 800b466:	e027      	b.n	800b4b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2224      	movs	r2, #36	; 0x24
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e02d      	b.n	800b538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2224      	movs	r2, #36	; 0x24
 800b4e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 0201 	bic.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f84f 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b554:	2302      	movs	r3, #2
 800b556:	e02d      	b.n	800b5b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2224      	movs	r2, #36	; 0x24
 800b564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 0201 	bic.w	r2, r2, #1
 800b57e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f811 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d108      	bne.n	800b5de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5dc:	e031      	b.n	800b642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5de:	2308      	movs	r3, #8
 800b5e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	0e5b      	lsrs	r3, r3, #25
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	0f5b      	lsrs	r3, r3, #29
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	7b3a      	ldrb	r2, [r7, #12]
 800b60a:	4911      	ldr	r1, [pc, #68]	; (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b60c:	5c8a      	ldrb	r2, [r1, r2]
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b612:	7b3a      	ldrb	r2, [r7, #12]
 800b614:	490f      	ldr	r1, [pc, #60]	; (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b618:	fb93 f3f2 	sdiv	r3, r3, r2
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	7b7a      	ldrb	r2, [r7, #13]
 800b628:	4909      	ldr	r1, [pc, #36]	; (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b62a:	5c8a      	ldrb	r2, [r1, r2]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b630:	7b7a      	ldrb	r2, [r7, #13]
 800b632:	4908      	ldr	r1, [pc, #32]	; (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b636:	fb93 f3f2 	sdiv	r3, r3, r2
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	08015adc 	.word	0x08015adc
 800b654:	08015ae4 	.word	0x08015ae4

0800b658 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b096      	sub	sp, #88	; 0x58
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b666:	2234      	movs	r2, #52	; 0x34
 800b668:	2100      	movs	r1, #0
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f009 fc0a 	bl	8014e84 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	f1a3 0208 	sub.w	r2, r3, #8
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	3b04      	subs	r3, #4
 800b6b6:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6c4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	3b04      	subs	r3, #4
 800b6ca:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6dc:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f4:	4a5d      	ldr	r2, [pc, #372]	; (800b86c <_tx_byte_pool_create+0x214>)
 800b6f6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b706:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b708:	b672      	cpsid	i
#endif
    return(int_posture);
 800b70a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b70c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4a57      	ldr	r2, [pc, #348]	; (800b870 <_tx_byte_pool_create+0x218>)
 800b712:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b714:	4b57      	ldr	r3, [pc, #348]	; (800b874 <_tx_byte_pool_create+0x21c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d109      	bne.n	800b730 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b71c:	4a56      	ldr	r2, [pc, #344]	; (800b878 <_tx_byte_pool_create+0x220>)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	631a      	str	r2, [r3, #48]	; 0x30
 800b72e:	e011      	b.n	800b754 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b730:	4b51      	ldr	r3, [pc, #324]	; (800b878 <_tx_byte_pool_create+0x220>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b752:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b754:	4b47      	ldr	r3, [pc, #284]	; (800b874 <_tx_byte_pool_create+0x21c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	4a46      	ldr	r2, [pc, #280]	; (800b874 <_tx_byte_pool_create+0x21c>)
 800b75c:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b75e:	2300      	movs	r3, #0
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	68f9      	ldr	r1, [r7, #12]
 800b768:	2008      	movs	r0, #8
 800b76a:	f002 fd6d 	bl	800e248 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b76e:	4b43      	ldr	r3, [pc, #268]	; (800b87c <_tx_byte_pool_create+0x224>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b776:	2b00      	cmp	r3, #0
 800b778:	d06c      	beq.n	800b854 <_tx_byte_pool_create+0x1fc>
 800b77a:	4b41      	ldr	r3, [pc, #260]	; (800b880 <_tx_byte_pool_create+0x228>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0304 	and.w	r3, r3, #4
 800b782:	2b00      	cmp	r3, #0
 800b784:	d066      	beq.n	800b854 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b786:	f3ef 8305 	mrs	r3, IPSR
 800b78a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	4b3d      	ldr	r3, [pc, #244]	; (800b884 <_tx_byte_pool_create+0x22c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4313      	orrs	r3, r2
 800b794:	62bb      	str	r3, [r7, #40]	; 0x28
 800b796:	4b3c      	ldr	r3, [pc, #240]	; (800b888 <_tx_byte_pool_create+0x230>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10b      	bne.n	800b7ba <_tx_byte_pool_create+0x162>
 800b7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ac:	041a      	lsls	r2, r3, #16
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7b8:	e00e      	b.n	800b7d8 <_tx_byte_pool_create+0x180>
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b7c0:	d205      	bcs.n	800b7ce <_tx_byte_pool_create+0x176>
 800b7c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7cc:	e004      	b.n	800b7d8 <_tx_byte_pool_create+0x180>
 800b7ce:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b7d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7e2:	605a      	str	r2, [r3, #4]
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	2215      	movs	r2, #21
 800b7e8:	609a      	str	r2, [r3, #8]
 800b7ea:	4b28      	ldr	r3, [pc, #160]	; (800b88c <_tx_byte_pool_create+0x234>)
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	60da      	str	r2, [r3, #12]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	611a      	str	r2, [r3, #16]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	615a      	str	r2, [r3, #20]
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	619a      	str	r2, [r3, #24]
 800b804:	f107 0214 	add.w	r2, r7, #20
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	61da      	str	r2, [r3, #28]
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	3320      	adds	r3, #32
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b812:	4b1f      	ldr	r3, [pc, #124]	; (800b890 <_tx_byte_pool_create+0x238>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b818:	429a      	cmp	r2, r3
 800b81a:	d314      	bcc.n	800b846 <_tx_byte_pool_create+0x1ee>
 800b81c:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <_tx_byte_pool_create+0x23c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b822:	4a16      	ldr	r2, [pc, #88]	; (800b87c <_tx_byte_pool_create+0x224>)
 800b824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <_tx_byte_pool_create+0x240>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82e:	621a      	str	r2, [r3, #32]
 800b830:	4b1a      	ldr	r3, [pc, #104]	; (800b89c <_tx_byte_pool_create+0x244>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00d      	beq.n	800b854 <_tx_byte_pool_create+0x1fc>
 800b838:	4b18      	ldr	r3, [pc, #96]	; (800b89c <_tx_byte_pool_create+0x244>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a16      	ldr	r2, [pc, #88]	; (800b898 <_tx_byte_pool_create+0x240>)
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	e006      	b.n	800b854 <_tx_byte_pool_create+0x1fc>
 800b846:	4a0d      	ldr	r2, [pc, #52]	; (800b87c <_tx_byte_pool_create+0x224>)
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	4b12      	ldr	r3, [pc, #72]	; (800b898 <_tx_byte_pool_create+0x240>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b852:	621a      	str	r2, [r3, #32]
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	f383 8810 	msr	PRIMASK, r3
}
 800b85e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3750      	adds	r7, #80	; 0x50
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	ffffeeee 	.word	0xffffeeee
 800b870:	42595445 	.word	0x42595445
 800b874:	200016cc 	.word	0x200016cc
 800b878:	200016c8 	.word	0x200016c8
 800b87c:	20001cf4 	.word	0x20001cf4
 800b880:	20001cf8 	.word	0x20001cf8
 800b884:	2000000c 	.word	0x2000000c
 800b888:	200016d8 	.word	0x200016d8
 800b88c:	e0001004 	.word	0xe0001004
 800b890:	20001cf0 	.word	0x20001cf0
 800b894:	20001cec 	.word	0x20001cec
 800b898:	20001ce0 	.word	0x20001ce0
 800b89c:	20001cfc 	.word	0x20001cfc

0800b8a0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b8a4:	f002 fcaa 	bl	800e1fc <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b8a8:	f001 fbe6 	bl	800d078 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b8ac:	f002 fa92 	bl	800ddd4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b8b0:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <_tx_initialize_high_level+0x5c>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	4b12      	ldr	r3, [pc, #72]	; (800b900 <_tx_initialize_high_level+0x60>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b8bc:	4b11      	ldr	r3, [pc, #68]	; (800b904 <_tx_initialize_high_level+0x64>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	4b11      	ldr	r3, [pc, #68]	; (800b908 <_tx_initialize_high_level+0x68>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b8c8:	4b10      	ldr	r3, [pc, #64]	; (800b90c <_tx_initialize_high_level+0x6c>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	4b10      	ldr	r3, [pc, #64]	; (800b910 <_tx_initialize_high_level+0x70>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b8d4:	4b0f      	ldr	r3, [pc, #60]	; (800b914 <_tx_initialize_high_level+0x74>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <_tx_initialize_high_level+0x78>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b8e0:	4b0e      	ldr	r3, [pc, #56]	; (800b91c <_tx_initialize_high_level+0x7c>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <_tx_initialize_high_level+0x80>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <_tx_initialize_high_level+0x84>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <_tx_initialize_high_level+0x88>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]
#endif
}
 800b8f8:	bf00      	nop
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200016a0 	.word	0x200016a0
 800b900:	200016a4 	.word	0x200016a4
 800b904:	200016a8 	.word	0x200016a8
 800b908:	200016ac 	.word	0x200016ac
 800b90c:	200016b0 	.word	0x200016b0
 800b910:	200016b4 	.word	0x200016b4
 800b914:	200016c0 	.word	0x200016c0
 800b918:	200016c4 	.word	0x200016c4
 800b91c:	200016c8 	.word	0x200016c8
 800b920:	200016cc 	.word	0x200016cc
 800b924:	200016b8 	.word	0x200016b8
 800b928:	200016bc 	.word	0x200016bc

0800b92c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b930:	4b10      	ldr	r3, [pc, #64]	; (800b974 <_tx_initialize_kernel_enter+0x48>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b938:	d00c      	beq.n	800b954 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b93a:	4b0e      	ldr	r3, [pc, #56]	; (800b974 <_tx_initialize_kernel_enter+0x48>)
 800b93c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b940:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b942:	f7f4 fc99 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b946:	f7ff ffab 	bl	800b8a0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b94a:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <_tx_initialize_kernel_enter+0x4c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3301      	adds	r3, #1
 800b950:	4a09      	ldr	r2, [pc, #36]	; (800b978 <_tx_initialize_kernel_enter+0x4c>)
 800b952:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b954:	4b07      	ldr	r3, [pc, #28]	; (800b974 <_tx_initialize_kernel_enter+0x48>)
 800b956:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b95a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b95c:	4b07      	ldr	r3, [pc, #28]	; (800b97c <_tx_initialize_kernel_enter+0x50>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4618      	mov	r0, r3
 800b962:	f7f4 ff47 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b966:	4b03      	ldr	r3, [pc, #12]	; (800b974 <_tx_initialize_kernel_enter+0x48>)
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b96c:	f7f4 fcc0 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b970:	bf00      	nop
 800b972:	bd80      	pop	{r7, pc}
 800b974:	2000000c 	.word	0x2000000c
 800b978:	20001770 	.word	0x20001770
 800b97c:	200016d0 	.word	0x200016d0

0800b980 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08e      	sub	sp, #56	; 0x38
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b98a:	f3ef 8310 	mrs	r3, PRIMASK
 800b98e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b990:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b992:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b994:	b672      	cpsid	i
    return(int_posture);
 800b996:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b998:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b99e:	4a37      	ldr	r2, [pc, #220]	; (800ba7c <_tx_queue_cleanup+0xfc>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d161      	bne.n	800ba68 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d15b      	bne.n	800ba68 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d055      	beq.n	800ba68 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a2f      	ldr	r2, [pc, #188]	; (800ba80 <_tx_queue_cleanup+0x100>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d150      	bne.n	800ba68 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d04c      	beq.n	800ba68 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b9f0:	e013      	b.n	800ba1a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba02:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba08:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d102      	bne.n	800ba1a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba18:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	d122      	bne.n	800ba68 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	220b      	movs	r2, #11
 800ba2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ba32:	e003      	b.n	800ba3c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	220a      	movs	r2, #10
 800ba38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ba3c:	4b11      	ldr	r3, [pc, #68]	; (800ba84 <_tx_queue_cleanup+0x104>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <_tx_queue_cleanup+0x104>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f383 8810 	msr	PRIMASK, r3
}
 800ba50:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 fcd6 	bl	800d404 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba58:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba5e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba60:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba62:	b672      	cpsid	i
    return(int_posture);
 800ba64:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34
 800ba68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f383 8810 	msr	PRIMASK, r3
}
 800ba72:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ba74:	bf00      	nop
 800ba76:	3738      	adds	r7, #56	; 0x38
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	0800b981 	.word	0x0800b981
 800ba80:	51554555 	.word	0x51554555
 800ba84:	20001770 	.word	0x20001770

0800ba88 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b094      	sub	sp, #80	; 0x50
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800ba96:	2238      	movs	r2, #56	; 0x38
 800ba98:	2100      	movs	r1, #0
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f009 f9f2 	bl	8014e84 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800bab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	fb02 f303 	mul.w	r3, r2, r3
 800bac0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	699a      	ldr	r2, [r3, #24]
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	441a      	add	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bae6:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800baec:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baee:	f3ef 8310 	mrs	r3, PRIMASK
 800baf2:	623b      	str	r3, [r7, #32]
    return(posture);
 800baf4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800baf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800baf8:	b672      	cpsid	i
    return(int_posture);
 800bafa:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	4a55      	ldr	r2, [pc, #340]	; (800bc58 <_tx_queue_create+0x1d0>)
 800bb02:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800bb04:	4b55      	ldr	r3, [pc, #340]	; (800bc5c <_tx_queue_create+0x1d4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800bb0c:	4a54      	ldr	r2, [pc, #336]	; (800bc60 <_tx_queue_create+0x1d8>)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	635a      	str	r2, [r3, #52]	; 0x34
 800bb1e:	e011      	b.n	800bb44 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800bb20:	4b4f      	ldr	r3, [pc, #316]	; (800bc60 <_tx_queue_create+0x1d8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb3c:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800bb44:	4b45      	ldr	r3, [pc, #276]	; (800bc5c <_tx_queue_create+0x1d4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	4a44      	ldr	r2, [pc, #272]	; (800bc5c <_tx_queue_create+0x1d4>)
 800bb4c:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	68f9      	ldr	r1, [r7, #12]
 800bb58:	2003      	movs	r0, #3
 800bb5a:	f002 fb75 	bl	800e248 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800bb5e:	4b41      	ldr	r3, [pc, #260]	; (800bc64 <_tx_queue_create+0x1dc>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d06b      	beq.n	800bc42 <_tx_queue_create+0x1ba>
 800bb6a:	4b3f      	ldr	r3, [pc, #252]	; (800bc68 <_tx_queue_create+0x1e0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d065      	beq.n	800bc42 <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb76:	f3ef 8305 	mrs	r3, IPSR
 800bb7a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	4b3b      	ldr	r3, [pc, #236]	; (800bc6c <_tx_queue_create+0x1e4>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
 800bb86:	4b3a      	ldr	r3, [pc, #232]	; (800bc70 <_tx_queue_create+0x1e8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <_tx_queue_create+0x122>
 800bb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb96:	647b      	str	r3, [r7, #68]	; 0x44
 800bb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9c:	041a      	lsls	r2, r3, #16
 800bb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bba6:	647b      	str	r3, [r7, #68]	; 0x44
 800bba8:	e00e      	b.n	800bbc8 <_tx_queue_create+0x140>
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbac:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bbb0:	d205      	bcs.n	800bbbe <_tx_queue_create+0x136>
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb4:	647b      	str	r3, [r7, #68]	; 0x44
 800bbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbba:	643b      	str	r3, [r7, #64]	; 0x40
 800bbbc:	e004      	b.n	800bbc8 <_tx_queue_create+0x140>
 800bbbe:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bbc2:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd2:	605a      	str	r2, [r3, #4]
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	223c      	movs	r2, #60	; 0x3c
 800bbd8:	609a      	str	r2, [r3, #8]
 800bbda:	4b26      	ldr	r3, [pc, #152]	; (800bc74 <_tx_queue_create+0x1ec>)
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	60da      	str	r2, [r3, #12]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	611a      	str	r2, [r3, #16]
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	615a      	str	r2, [r3, #20]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	619a      	str	r2, [r3, #24]
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbf8:	61da      	str	r2, [r3, #28]
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	3320      	adds	r3, #32
 800bbfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc00:	4b1d      	ldr	r3, [pc, #116]	; (800bc78 <_tx_queue_create+0x1f0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d314      	bcc.n	800bc34 <_tx_queue_create+0x1ac>
 800bc0a:	4b1c      	ldr	r3, [pc, #112]	; (800bc7c <_tx_queue_create+0x1f4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc10:	4a14      	ldr	r2, [pc, #80]	; (800bc64 <_tx_queue_create+0x1dc>)
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	4b1a      	ldr	r3, [pc, #104]	; (800bc80 <_tx_queue_create+0x1f8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc1c:	621a      	str	r2, [r3, #32]
 800bc1e:	4b19      	ldr	r3, [pc, #100]	; (800bc84 <_tx_queue_create+0x1fc>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00d      	beq.n	800bc42 <_tx_queue_create+0x1ba>
 800bc26:	4b17      	ldr	r3, [pc, #92]	; (800bc84 <_tx_queue_create+0x1fc>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a15      	ldr	r2, [pc, #84]	; (800bc80 <_tx_queue_create+0x1f8>)
 800bc2c:	6812      	ldr	r2, [r2, #0]
 800bc2e:	4610      	mov	r0, r2
 800bc30:	4798      	blx	r3
 800bc32:	e006      	b.n	800bc42 <_tx_queue_create+0x1ba>
 800bc34:	4a0b      	ldr	r2, [pc, #44]	; (800bc64 <_tx_queue_create+0x1dc>)
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <_tx_queue_create+0x1f8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc40:	621a      	str	r2, [r3, #32]
 800bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f383 8810 	msr	PRIMASK, r3
}
 800bc4c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3748      	adds	r7, #72	; 0x48
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	51554555 	.word	0x51554555
 800bc5c:	200016ac 	.word	0x200016ac
 800bc60:	200016a8 	.word	0x200016a8
 800bc64:	20001cf4 	.word	0x20001cf4
 800bc68:	20001cf8 	.word	0x20001cf8
 800bc6c:	2000000c 	.word	0x2000000c
 800bc70:	200016d8 	.word	0x200016d8
 800bc74:	e0001004 	.word	0xe0001004
 800bc78:	20001cf0 	.word	0x20001cf0
 800bc7c:	20001cec 	.word	0x20001cec
 800bc80:	20001ce0 	.word	0x20001ce0
 800bc84:	20001cfc 	.word	0x20001cfc

0800bc88 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b094      	sub	sp, #80	; 0x50
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800bc90:	2300      	movs	r3, #0
 800bc92:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc98:	f3ef 8310 	mrs	r3, PRIMASK
 800bc9c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bca2:	b672      	cpsid	i
    return(int_posture);
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800bca8:	4b76      	ldr	r3, [pc, #472]	; (800be84 <_tx_queue_flush+0x1fc>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d06c      	beq.n	800bd8e <_tx_queue_flush+0x106>
 800bcb4:	4b74      	ldr	r3, [pc, #464]	; (800be88 <_tx_queue_flush+0x200>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d066      	beq.n	800bd8e <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcc0:	f3ef 8305 	mrs	r3, IPSR
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bcc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc8:	4b70      	ldr	r3, [pc, #448]	; (800be8c <_tx_queue_flush+0x204>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd0:	4b6f      	ldr	r3, [pc, #444]	; (800be90 <_tx_queue_flush+0x208>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <_tx_queue_flush+0x6c>
 800bcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce0:	647b      	str	r3, [r7, #68]	; 0x44
 800bce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce6:	041a      	lsls	r2, r3, #16
 800bce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcf0:	647b      	str	r3, [r7, #68]	; 0x44
 800bcf2:	e00e      	b.n	800bd12 <_tx_queue_flush+0x8a>
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bcfa:	d205      	bcs.n	800bd08 <_tx_queue_flush+0x80>
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfe:	647b      	str	r3, [r7, #68]	; 0x44
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	643b      	str	r3, [r7, #64]	; 0x40
 800bd06:	e004      	b.n	800bd12 <_tx_queue_flush+0x8a>
 800bd08:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bd0c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd0e:	2300      	movs	r3, #0
 800bd10:	647b      	str	r3, [r7, #68]	; 0x44
 800bd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd1c:	605a      	str	r2, [r3, #4]
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd20:	223e      	movs	r2, #62	; 0x3e
 800bd22:	609a      	str	r2, [r3, #8]
 800bd24:	4b5b      	ldr	r3, [pc, #364]	; (800be94 <_tx_queue_flush+0x20c>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	60da      	str	r2, [r3, #12]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	611a      	str	r2, [r3, #16]
 800bd32:	f107 0208 	add.w	r2, r7, #8
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	615a      	str	r2, [r3, #20]
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	619a      	str	r2, [r3, #24]
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	2200      	movs	r2, #0
 800bd44:	61da      	str	r2, [r3, #28]
 800bd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd48:	3320      	adds	r3, #32
 800bd4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd4c:	4b52      	ldr	r3, [pc, #328]	; (800be98 <_tx_queue_flush+0x210>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d314      	bcc.n	800bd80 <_tx_queue_flush+0xf8>
 800bd56:	4b51      	ldr	r3, [pc, #324]	; (800be9c <_tx_queue_flush+0x214>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd5c:	4a49      	ldr	r2, [pc, #292]	; (800be84 <_tx_queue_flush+0x1fc>)
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	4b4f      	ldr	r3, [pc, #316]	; (800bea0 <_tx_queue_flush+0x218>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd68:	621a      	str	r2, [r3, #32]
 800bd6a:	4b4e      	ldr	r3, [pc, #312]	; (800bea4 <_tx_queue_flush+0x21c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00d      	beq.n	800bd8e <_tx_queue_flush+0x106>
 800bd72:	4b4c      	ldr	r3, [pc, #304]	; (800bea4 <_tx_queue_flush+0x21c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a4a      	ldr	r2, [pc, #296]	; (800bea0 <_tx_queue_flush+0x218>)
 800bd78:	6812      	ldr	r2, [r2, #0]
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
 800bd7e:	e006      	b.n	800bd8e <_tx_queue_flush+0x106>
 800bd80:	4a40      	ldr	r2, [pc, #256]	; (800be84 <_tx_queue_flush+0x1fc>)
 800bd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	4b46      	ldr	r3, [pc, #280]	; (800bea0 <_tx_queue_flush+0x218>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd8c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d023      	beq.n	800bdde <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc0:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bdd4:	4b34      	ldr	r3, [pc, #208]	; (800bea8 <_tx_queue_flush+0x220>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	4a33      	ldr	r2, [pc, #204]	; (800bea8 <_tx_queue_flush+0x220>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	f383 8810 	msr	PRIMASK, r3
}
 800bde8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800bdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d044      	beq.n	800be7a <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800bdf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf2:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800bdf4:	e027      	b.n	800be46 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800bdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d025      	beq.n	800be4e <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be02:	f3ef 8310 	mrs	r3, PRIMASK
 800be06:	61fb      	str	r3, [r7, #28]
    return(posture);
 800be08:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800be0a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be0c:	b672      	cpsid	i
    return(int_posture);
 800be0e:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800be10:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be24:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <_tx_queue_flush+0x220>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <_tx_queue_flush+0x220>)
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	f383 8810 	msr	PRIMASK, r3
}
 800be3a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be40:	4618      	mov	r0, r3
 800be42:	f001 fadf 	bl	800d404 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800be46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1d4      	bne.n	800bdf6 <_tx_queue_flush+0x16e>
 800be4c:	e000      	b.n	800be50 <_tx_queue_flush+0x1c8>
                break;
 800be4e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be50:	f3ef 8310 	mrs	r3, PRIMASK
 800be54:	613b      	str	r3, [r7, #16]
    return(posture);
 800be56:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800be58:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be5a:	b672      	cpsid	i
    return(int_posture);
 800be5c:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be5e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800be60:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <_tx_queue_flush+0x220>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3b01      	subs	r3, #1
 800be66:	4a10      	ldr	r2, [pc, #64]	; (800bea8 <_tx_queue_flush+0x220>)
 800be68:	6013      	str	r3, [r2, #0]
 800be6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f383 8810 	msr	PRIMASK, r3
}
 800be74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be76:	f001 fa8b 	bl	800d390 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3750      	adds	r7, #80	; 0x50
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20001cf4 	.word	0x20001cf4
 800be88:	20001cf8 	.word	0x20001cf8
 800be8c:	2000000c 	.word	0x2000000c
 800be90:	200016d8 	.word	0x200016d8
 800be94:	e0001004 	.word	0xe0001004
 800be98:	20001cf0 	.word	0x20001cf0
 800be9c:	20001cec 	.word	0x20001cec
 800bea0:	20001ce0 	.word	0x20001ce0
 800bea4:	20001cfc 	.word	0x20001cfc
 800bea8:	20001770 	.word	0x20001770

0800beac <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b09a      	sub	sp, #104	; 0x68
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800beb8:	2300      	movs	r3, #0
 800beba:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bebc:	f3ef 8310 	mrs	r3, PRIMASK
 800bec0:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bec6:	b672      	cpsid	i
    return(int_posture);
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800beca:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800becc:	4b77      	ldr	r3, [pc, #476]	; (800c0ac <_tx_queue_receive+0x200>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d06c      	beq.n	800bfb2 <_tx_queue_receive+0x106>
 800bed8:	4b75      	ldr	r3, [pc, #468]	; (800c0b0 <_tx_queue_receive+0x204>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d066      	beq.n	800bfb2 <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bee4:	f3ef 8305 	mrs	r3, IPSR
 800bee8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800beea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beec:	4b71      	ldr	r3, [pc, #452]	; (800c0b4 <_tx_queue_receive+0x208>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	647b      	str	r3, [r7, #68]	; 0x44
 800bef4:	4b70      	ldr	r3, [pc, #448]	; (800c0b8 <_tx_queue_receive+0x20c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	653b      	str	r3, [r7, #80]	; 0x50
 800befa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <_tx_queue_receive+0x6c>
 800bf00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	657b      	str	r3, [r7, #84]	; 0x54
 800bf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0a:	041a      	lsls	r2, r3, #16
 800bf0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf14:	657b      	str	r3, [r7, #84]	; 0x54
 800bf16:	e00e      	b.n	800bf36 <_tx_queue_receive+0x8a>
 800bf18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf1a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bf1e:	d205      	bcs.n	800bf2c <_tx_queue_receive+0x80>
 800bf20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf22:	657b      	str	r3, [r7, #84]	; 0x54
 800bf24:	f04f 33ff 	mov.w	r3, #4294967295
 800bf28:	653b      	str	r3, [r7, #80]	; 0x50
 800bf2a:	e004      	b.n	800bf36 <_tx_queue_receive+0x8a>
 800bf2c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bf30:	653b      	str	r3, [r7, #80]	; 0x50
 800bf32:	2300      	movs	r3, #0
 800bf34:	657b      	str	r3, [r7, #84]	; 0x54
 800bf36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf44:	2244      	movs	r2, #68	; 0x44
 800bf46:	609a      	str	r2, [r3, #8]
 800bf48:	4b5c      	ldr	r3, [pc, #368]	; (800c0bc <_tx_queue_receive+0x210>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf4e:	60da      	str	r2, [r3, #12]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf54:	611a      	str	r2, [r3, #16]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5a:	615a      	str	r2, [r3, #20]
 800bf5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	619a      	str	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf68:	61da      	str	r2, [r3, #28]
 800bf6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf6c:	3320      	adds	r3, #32
 800bf6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf70:	4b53      	ldr	r3, [pc, #332]	; (800c0c0 <_tx_queue_receive+0x214>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d314      	bcc.n	800bfa4 <_tx_queue_receive+0xf8>
 800bf7a:	4b52      	ldr	r3, [pc, #328]	; (800c0c4 <_tx_queue_receive+0x218>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf80:	4a4a      	ldr	r2, [pc, #296]	; (800c0ac <_tx_queue_receive+0x200>)
 800bf82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	4b50      	ldr	r3, [pc, #320]	; (800c0c8 <_tx_queue_receive+0x21c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf8c:	621a      	str	r2, [r3, #32]
 800bf8e:	4b4f      	ldr	r3, [pc, #316]	; (800c0cc <_tx_queue_receive+0x220>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00d      	beq.n	800bfb2 <_tx_queue_receive+0x106>
 800bf96:	4b4d      	ldr	r3, [pc, #308]	; (800c0cc <_tx_queue_receive+0x220>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a4b      	ldr	r2, [pc, #300]	; (800c0c8 <_tx_queue_receive+0x21c>)
 800bf9c:	6812      	ldr	r2, [r2, #0]
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4798      	blx	r3
 800bfa2:	e006      	b.n	800bfb2 <_tx_queue_receive+0x106>
 800bfa4:	4a41      	ldr	r2, [pc, #260]	; (800c0ac <_tx_queue_receive+0x200>)
 800bfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	4b47      	ldr	r3, [pc, #284]	; (800c0c8 <_tx_queue_receive+0x21c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfb0:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8149 	beq.w	800c254 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d13c      	bne.n	800c042 <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bfd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfda:	1d13      	adds	r3, r2, #4
 800bfdc:	667b      	str	r3, [r7, #100]	; 0x64
 800bfde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfe0:	1d19      	adds	r1, r3, #4
 800bfe2:	6639      	str	r1, [r7, #96]	; 0x60
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d90e      	bls.n	800c00c <_tx_queue_receive+0x160>
 800bfee:	e007      	b.n	800c000 <_tx_queue_receive+0x154>
 800bff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bff2:	1d13      	adds	r3, r2, #4
 800bff4:	667b      	str	r3, [r7, #100]	; 0x64
 800bff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bff8:	1d19      	adds	r1, r3, #4
 800bffa:	6639      	str	r1, [r7, #96]	; 0x60
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c002:	3b01      	subs	r3, #1
 800c004:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1f1      	bne.n	800bff0 <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c012:	429a      	cmp	r2, r3
 800c014:	d102      	bne.n	800c01c <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c020:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	611a      	str	r2, [r3, #16]
 800c036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	f383 8810 	msr	PRIMASK, r3
}
 800c040:	e176      	b.n	800c330 <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d166      	bne.n	800c120 <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c056:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c062:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c064:	1d13      	adds	r3, r2, #4
 800c066:	667b      	str	r3, [r7, #100]	; 0x64
 800c068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c06a:	1d19      	adds	r1, r3, #4
 800c06c:	6639      	str	r1, [r7, #96]	; 0x60
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c074:	2b01      	cmp	r3, #1
 800c076:	d90e      	bls.n	800c096 <_tx_queue_receive+0x1ea>
 800c078:	e007      	b.n	800c08a <_tx_queue_receive+0x1de>
 800c07a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c07c:	1d13      	adds	r3, r2, #4
 800c07e:	667b      	str	r3, [r7, #100]	; 0x64
 800c080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c082:	1d19      	adds	r1, r3, #4
 800c084:	6639      	str	r1, [r7, #96]	; 0x60
 800c086:	6812      	ldr	r2, [r2, #0]
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c08c:	3b01      	subs	r3, #1
 800c08e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1f1      	bne.n	800c07a <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800c096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c098:	3b01      	subs	r3, #1
 800c09a:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d116      	bne.n	800c0d0 <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	629a      	str	r2, [r3, #40]	; 0x28
 800c0a8:	e021      	b.n	800c0ee <_tx_queue_receive+0x242>
 800c0aa:	bf00      	nop
 800c0ac:	20001cf4 	.word	0x20001cf4
 800c0b0:	20001cf8 	.word	0x20001cf8
 800c0b4:	2000000c 	.word	0x2000000c
 800c0b8:	200016d8 	.word	0x200016d8
 800c0bc:	e0001004 	.word	0xe0001004
 800c0c0:	20001cf0 	.word	0x20001cf0
 800c0c4:	20001cec 	.word	0x20001cec
 800c0c8:	20001ce0 	.word	0x20001ce0
 800c0cc:	20001cfc 	.word	0x20001cfc
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0da:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0e0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0e6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800c0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ec:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0f2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c102:	4b8e      	ldr	r3, [pc, #568]	; (800c33c <_tx_queue_receive+0x490>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3301      	adds	r3, #1
 800c108:	4a8c      	ldr	r2, [pc, #560]	; (800c33c <_tx_queue_receive+0x490>)
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	f383 8810 	msr	PRIMASK, r3
}
 800c116:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800c118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c11a:	f001 f973 	bl	800d404 <_tx_thread_system_resume>
 800c11e:	e107      	b.n	800c330 <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c130:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c132:	1d13      	adds	r3, r2, #4
 800c134:	667b      	str	r3, [r7, #100]	; 0x64
 800c136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c138:	1d19      	adds	r1, r3, #4
 800c13a:	6639      	str	r1, [r7, #96]	; 0x60
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c142:	2b01      	cmp	r3, #1
 800c144:	d90e      	bls.n	800c164 <_tx_queue_receive+0x2b8>
 800c146:	e007      	b.n	800c158 <_tx_queue_receive+0x2ac>
 800c148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c14a:	1d13      	adds	r3, r2, #4
 800c14c:	667b      	str	r3, [r7, #100]	; 0x64
 800c14e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c150:	1d19      	adds	r1, r3, #4
 800c152:	6639      	str	r1, [r7, #96]	; 0x60
 800c154:	6812      	ldr	r2, [r2, #0]
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15a:	3b01      	subs	r3, #1
 800c15c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f1      	bne.n	800c148 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d102      	bne.n	800c174 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c178:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800c17a:	4b70      	ldr	r3, [pc, #448]	; (800c33c <_tx_queue_receive+0x490>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	4a6e      	ldr	r2, [pc, #440]	; (800c33c <_tx_queue_receive+0x490>)
 800c182:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800c184:	4b6d      	ldr	r3, [pc, #436]	; (800c33c <_tx_queue_receive+0x490>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3b01      	subs	r3, #1
 800c18a:	4a6c      	ldr	r2, [pc, #432]	; (800c33c <_tx_queue_receive+0x490>)
 800c18c:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c192:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c1a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1a2:	1d13      	adds	r3, r2, #4
 800c1a4:	667b      	str	r3, [r7, #100]	; 0x64
 800c1a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a8:	1d19      	adds	r1, r3, #4
 800c1aa:	6639      	str	r1, [r7, #96]	; 0x60
 800c1ac:	6812      	ldr	r2, [r2, #0]
 800c1ae:	601a      	str	r2, [r3, #0]
 800c1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d90e      	bls.n	800c1d4 <_tx_queue_receive+0x328>
 800c1b6:	e007      	b.n	800c1c8 <_tx_queue_receive+0x31c>
 800c1b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ba:	1d13      	adds	r3, r2, #4
 800c1bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c1be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	6639      	str	r1, [r7, #96]	; 0x60
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1f1      	bne.n	800c1b8 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d102      	bne.n	800c1e4 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1e8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800c1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d103      	bne.n	800c204 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	629a      	str	r2, [r3, #40]	; 0x28
 800c202:	e00e      	b.n	800c222 <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c208:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c20e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c21a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c220:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c22a:	2200      	movs	r2, #0
 800c22c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	2200      	movs	r2, #0
 800c232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c236:	4b41      	ldr	r3, [pc, #260]	; (800c33c <_tx_queue_receive+0x490>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3301      	adds	r3, #1
 800c23c:	4a3f      	ldr	r2, [pc, #252]	; (800c33c <_tx_queue_receive+0x490>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c242:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	f383 8810 	msr	PRIMASK, r3
}
 800c24a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800c24c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c24e:	f001 f8d9 	bl	800d404 <_tx_thread_system_resume>
 800c252:	e06d      	b.n	800c330 <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d062      	beq.n	800c320 <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c25a:	4b38      	ldr	r3, [pc, #224]	; (800c33c <_tx_queue_receive+0x490>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d008      	beq.n	800c274 <_tx_queue_receive+0x3c8>
 800c262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c264:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f383 8810 	msr	PRIMASK, r3
}
 800c26c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800c26e:	230a      	movs	r3, #10
 800c270:	65bb      	str	r3, [r7, #88]	; 0x58
 800c272:	e05d      	b.n	800c330 <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c274:	4b32      	ldr	r3, [pc, #200]	; (800c340 <_tx_queue_receive+0x494>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	4a31      	ldr	r2, [pc, #196]	; (800c344 <_tx_queue_receive+0x498>)
 800c27e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800c286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28e:	2200      	movs	r2, #0
 800c290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c29a:	1c5a      	adds	r2, r3, #1
 800c29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2ac:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2b2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2b8:	675a      	str	r2, [r3, #116]	; 0x74
 800c2ba:	e011      	b.n	800c2e0 <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2cc:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2d2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2d8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2de:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ea:	2205      	movs	r2, #5
 800c2ec:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2fa:	4b10      	ldr	r3, [pc, #64]	; (800c33c <_tx_queue_receive+0x490>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3301      	adds	r3, #1
 800c300:	4a0e      	ldr	r2, [pc, #56]	; (800c33c <_tx_queue_receive+0x490>)
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c306:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f383 8810 	msr	PRIMASK, r3
}
 800c30e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c310:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c312:	f001 fa31 	bl	800d778 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31e:	e007      	b.n	800c330 <_tx_queue_receive+0x484>
 800c320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c322:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f383 8810 	msr	PRIMASK, r3
}
 800c32a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800c32c:	230a      	movs	r3, #10
 800c32e:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c332:	4618      	mov	r0, r3
 800c334:	3768      	adds	r7, #104	; 0x68
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20001770 	.word	0x20001770
 800c340:	200016d8 	.word	0x200016d8
 800c344:	0800b981 	.word	0x0800b981

0800c348 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b09a      	sub	sp, #104	; 0x68
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c354:	2300      	movs	r3, #0
 800c356:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c358:	f3ef 8310 	mrs	r3, PRIMASK
 800c35c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c362:	b672      	cpsid	i
    return(int_posture);
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c366:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c368:	4b7a      	ldr	r3, [pc, #488]	; (800c554 <_tx_queue_send+0x20c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c370:	2b00      	cmp	r3, #0
 800c372:	d06c      	beq.n	800c44e <_tx_queue_send+0x106>
 800c374:	4b78      	ldr	r3, [pc, #480]	; (800c558 <_tx_queue_send+0x210>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d066      	beq.n	800c44e <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c380:	f3ef 8305 	mrs	r3, IPSR
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c388:	4b74      	ldr	r3, [pc, #464]	; (800c55c <_tx_queue_send+0x214>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	647b      	str	r3, [r7, #68]	; 0x44
 800c390:	4b73      	ldr	r3, [pc, #460]	; (800c560 <_tx_queue_send+0x218>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	653b      	str	r3, [r7, #80]	; 0x50
 800c396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <_tx_queue_send+0x6c>
 800c39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a6:	041a      	lsls	r2, r3, #16
 800c3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3b0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3b2:	e00e      	b.n	800c3d2 <_tx_queue_send+0x8a>
 800c3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c3ba:	d205      	bcs.n	800c3c8 <_tx_queue_send+0x80>
 800c3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3be:	657b      	str	r3, [r7, #84]	; 0x54
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c4:	653b      	str	r3, [r7, #80]	; 0x50
 800c3c6:	e004      	b.n	800c3d2 <_tx_queue_send+0x8a>
 800c3c8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c3cc:	653b      	str	r3, [r7, #80]	; 0x50
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3dc:	605a      	str	r2, [r3, #4]
 800c3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e0:	2245      	movs	r2, #69	; 0x45
 800c3e2:	609a      	str	r2, [r3, #8]
 800c3e4:	4b5f      	ldr	r3, [pc, #380]	; (800c564 <_tx_queue_send+0x21c>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ea:	60da      	str	r2, [r3, #12]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3f0:	611a      	str	r2, [r3, #16]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3f6:	615a      	str	r2, [r3, #20]
 800c3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	619a      	str	r2, [r3, #24]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	691a      	ldr	r2, [r3, #16]
 800c402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c404:	61da      	str	r2, [r3, #28]
 800c406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c408:	3320      	adds	r3, #32
 800c40a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c40c:	4b56      	ldr	r3, [pc, #344]	; (800c568 <_tx_queue_send+0x220>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c412:	429a      	cmp	r2, r3
 800c414:	d314      	bcc.n	800c440 <_tx_queue_send+0xf8>
 800c416:	4b55      	ldr	r3, [pc, #340]	; (800c56c <_tx_queue_send+0x224>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c41c:	4a4d      	ldr	r2, [pc, #308]	; (800c554 <_tx_queue_send+0x20c>)
 800c41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	4b53      	ldr	r3, [pc, #332]	; (800c570 <_tx_queue_send+0x228>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c428:	621a      	str	r2, [r3, #32]
 800c42a:	4b52      	ldr	r3, [pc, #328]	; (800c574 <_tx_queue_send+0x22c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00d      	beq.n	800c44e <_tx_queue_send+0x106>
 800c432:	4b50      	ldr	r3, [pc, #320]	; (800c574 <_tx_queue_send+0x22c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a4e      	ldr	r2, [pc, #312]	; (800c570 <_tx_queue_send+0x228>)
 800c438:	6812      	ldr	r2, [r2, #0]
 800c43a:	4610      	mov	r0, r2
 800c43c:	4798      	blx	r3
 800c43e:	e006      	b.n	800c44e <_tx_queue_send+0x106>
 800c440:	4a44      	ldr	r2, [pc, #272]	; (800c554 <_tx_queue_send+0x20c>)
 800c442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	4b4a      	ldr	r3, [pc, #296]	; (800c570 <_tx_queue_send+0x228>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c44c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 80ae 	beq.w	800c5ba <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d13c      	bne.n	800c4de <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	1e5a      	subs	r2, r3, #1
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c488:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c48a:	1d13      	adds	r3, r2, #4
 800c48c:	667b      	str	r3, [r7, #100]	; 0x64
 800c48e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	6639      	str	r1, [r7, #96]	; 0x60
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d90e      	bls.n	800c4bc <_tx_queue_send+0x174>
 800c49e:	e007      	b.n	800c4b0 <_tx_queue_send+0x168>
 800c4a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4a2:	1d13      	adds	r3, r2, #4
 800c4a4:	667b      	str	r3, [r7, #100]	; 0x64
 800c4a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4a8:	1d19      	adds	r1, r3, #4
 800c4aa:	6639      	str	r1, [r7, #96]	; 0x60
 800c4ac:	6812      	ldr	r2, [r2, #0]
 800c4ae:	601a      	str	r2, [r3, #0]
 800c4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1f1      	bne.n	800c4a0 <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d102      	bne.n	800c4cc <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	f383 8810 	msr	PRIMASK, r3
}
 800c4dc:	e0db      	b.n	800c696 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d103      	bne.n	800c4f8 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	629a      	str	r2, [r3, #40]	; 0x28
 800c4f6:	e012      	b.n	800c51e <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c504:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c50a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c516:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c51c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c522:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c526:	2200      	movs	r2, #0
 800c528:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c532:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c53a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c53c:	1d13      	adds	r3, r2, #4
 800c53e:	667b      	str	r3, [r7, #100]	; 0x64
 800c540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c542:	1d19      	adds	r1, r3, #4
 800c544:	6639      	str	r1, [r7, #96]	; 0x60
 800c546:	6812      	ldr	r2, [r2, #0]
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d921      	bls.n	800c594 <_tx_queue_send+0x24c>
 800c550:	e01a      	b.n	800c588 <_tx_queue_send+0x240>
 800c552:	bf00      	nop
 800c554:	20001cf4 	.word	0x20001cf4
 800c558:	20001cf8 	.word	0x20001cf8
 800c55c:	2000000c 	.word	0x2000000c
 800c560:	200016d8 	.word	0x200016d8
 800c564:	e0001004 	.word	0xe0001004
 800c568:	20001cf0 	.word	0x20001cf0
 800c56c:	20001cec 	.word	0x20001cec
 800c570:	20001ce0 	.word	0x20001ce0
 800c574:	20001cfc 	.word	0x20001cfc
 800c578:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c57a:	1d13      	adds	r3, r2, #4
 800c57c:	667b      	str	r3, [r7, #100]	; 0x64
 800c57e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c580:	1d19      	adds	r1, r3, #4
 800c582:	6639      	str	r1, [r7, #96]	; 0x60
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c58a:	3b01      	subs	r3, #1
 800c58c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c58e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1f1      	bne.n	800c578 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c596:	2200      	movs	r2, #0
 800c598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c59c:	4b40      	ldr	r3, [pc, #256]	; (800c6a0 <_tx_queue_send+0x358>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	4a3f      	ldr	r2, [pc, #252]	; (800c6a0 <_tx_queue_send+0x358>)
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	f383 8810 	msr	PRIMASK, r3
}
 800c5b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c5b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5b4:	f000 ff26 	bl	800d404 <_tx_thread_system_resume>
 800c5b8:	e06d      	b.n	800c696 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d062      	beq.n	800c686 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c5c0:	4b37      	ldr	r3, [pc, #220]	; (800c6a0 <_tx_queue_send+0x358>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d008      	beq.n	800c5da <_tx_queue_send+0x292>
 800c5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	f383 8810 	msr	PRIMASK, r3
}
 800c5d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c5d4:	230b      	movs	r3, #11
 800c5d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5d8:	e05d      	b.n	800c696 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c5da:	4b32      	ldr	r3, [pc, #200]	; (800c6a4 <_tx_queue_send+0x35c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e2:	4a31      	ldr	r2, [pc, #196]	; (800c6a8 <_tx_queue_send+0x360>)
 800c5e4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c604:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c612:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c618:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c61e:	675a      	str	r2, [r3, #116]	; 0x74
 800c620:	e011      	b.n	800c646 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c626:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c62c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c638:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c63e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c644:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c650:	2205      	movs	r2, #5
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c656:	2201      	movs	r2, #1
 800c658:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c660:	4b0f      	ldr	r3, [pc, #60]	; (800c6a0 <_tx_queue_send+0x358>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	4a0e      	ldr	r2, [pc, #56]	; (800c6a0 <_tx_queue_send+0x358>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c66c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	f383 8810 	msr	PRIMASK, r3
}
 800c674:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c678:	f001 f87e 	bl	800d778 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c682:	65bb      	str	r3, [r7, #88]	; 0x58
 800c684:	e007      	b.n	800c696 <_tx_queue_send+0x34e>
 800c686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c688:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f383 8810 	msr	PRIMASK, r3
}
 800c690:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c692:	230b      	movs	r3, #11
 800c694:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3768      	adds	r7, #104	; 0x68
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20001770 	.word	0x20001770
 800c6a4:	200016d8 	.word	0x200016d8
 800c6a8:	0800b981 	.word	0x0800b981

0800c6ac <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b092      	sub	sp, #72	; 0x48
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c6be:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c6c0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c6c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6c4:	b672      	cpsid	i
    return(int_posture);
 800c6c6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c6c8:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c6ca:	4b67      	ldr	r3, [pc, #412]	; (800c868 <_tx_semaphore_ceiling_put+0x1bc>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d06d      	beq.n	800c7b2 <_tx_semaphore_ceiling_put+0x106>
 800c6d6:	4b65      	ldr	r3, [pc, #404]	; (800c86c <_tx_semaphore_ceiling_put+0x1c0>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d067      	beq.n	800c7b2 <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6e2:	f3ef 8305 	mrs	r3, IPSR
 800c6e6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	4b61      	ldr	r3, [pc, #388]	; (800c870 <_tx_semaphore_ceiling_put+0x1c4>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f2:	4b60      	ldr	r3, [pc, #384]	; (800c874 <_tx_semaphore_ceiling_put+0x1c8>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10b      	bne.n	800c716 <_tx_semaphore_ceiling_put+0x6a>
 800c6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	643b      	str	r3, [r7, #64]	; 0x40
 800c704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c708:	041a      	lsls	r2, r3, #16
 800c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70c:	4313      	orrs	r3, r2
 800c70e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c712:	643b      	str	r3, [r7, #64]	; 0x40
 800c714:	e00e      	b.n	800c734 <_tx_semaphore_ceiling_put+0x88>
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c71c:	d205      	bcs.n	800c72a <_tx_semaphore_ceiling_put+0x7e>
 800c71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c720:	643b      	str	r3, [r7, #64]	; 0x40
 800c722:	f04f 33ff 	mov.w	r3, #4294967295
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c728:	e004      	b.n	800c734 <_tx_semaphore_ceiling_put+0x88>
 800c72a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c730:	2300      	movs	r3, #0
 800c732:	643b      	str	r3, [r7, #64]	; 0x40
 800c734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c73e:	605a      	str	r2, [r3, #4]
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	2250      	movs	r2, #80	; 0x50
 800c744:	609a      	str	r2, [r3, #8]
 800c746:	4b4c      	ldr	r3, [pc, #304]	; (800c878 <_tx_semaphore_ceiling_put+0x1cc>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c752:	611a      	str	r2, [r3, #16]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	689a      	ldr	r2, [r3, #8]
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	615a      	str	r2, [r3, #20]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	691a      	ldr	r2, [r3, #16]
 800c760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c762:	619a      	str	r2, [r3, #24]
 800c764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	61da      	str	r2, [r3, #28]
 800c76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76c:	3320      	adds	r3, #32
 800c76e:	637b      	str	r3, [r7, #52]	; 0x34
 800c770:	4b42      	ldr	r3, [pc, #264]	; (800c87c <_tx_semaphore_ceiling_put+0x1d0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c776:	429a      	cmp	r2, r3
 800c778:	d314      	bcc.n	800c7a4 <_tx_semaphore_ceiling_put+0xf8>
 800c77a:	4b41      	ldr	r3, [pc, #260]	; (800c880 <_tx_semaphore_ceiling_put+0x1d4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	637b      	str	r3, [r7, #52]	; 0x34
 800c780:	4a39      	ldr	r2, [pc, #228]	; (800c868 <_tx_semaphore_ceiling_put+0x1bc>)
 800c782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	4b3f      	ldr	r3, [pc, #252]	; (800c884 <_tx_semaphore_ceiling_put+0x1d8>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c78c:	621a      	str	r2, [r3, #32]
 800c78e:	4b3e      	ldr	r3, [pc, #248]	; (800c888 <_tx_semaphore_ceiling_put+0x1dc>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00d      	beq.n	800c7b2 <_tx_semaphore_ceiling_put+0x106>
 800c796:	4b3c      	ldr	r3, [pc, #240]	; (800c888 <_tx_semaphore_ceiling_put+0x1dc>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a3a      	ldr	r2, [pc, #232]	; (800c884 <_tx_semaphore_ceiling_put+0x1d8>)
 800c79c:	6812      	ldr	r2, [r2, #0]
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4798      	blx	r3
 800c7a2:	e006      	b.n	800c7b2 <_tx_semaphore_ceiling_put+0x106>
 800c7a4:	4a30      	ldr	r2, [pc, #192]	; (800c868 <_tx_semaphore_ceiling_put+0x1bc>)
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	4b36      	ldr	r3, [pc, #216]	; (800c884 <_tx_semaphore_ceiling_put+0x1d8>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b0:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d11b      	bne.n	800c7f6 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d808      	bhi.n	800c7da <_tx_semaphore_ceiling_put+0x12e>
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	f383 8810 	msr	PRIMASK, r3
}
 800c7d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c7d4:	2321      	movs	r3, #33	; 0x21
 800c7d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c7d8:	e041      	b.n	800c85e <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	609a      	str	r2, [r3, #8]
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f383 8810 	msr	PRIMASK, r3
}
 800c7ee:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f4:	e033      	b.n	800c85e <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	3b01      	subs	r3, #1
 800c800:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d103      	bne.n	800c810 <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	60da      	str	r2, [r3, #12]
 800c80e:	e00e      	b.n	800c82e <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c814:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c820:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	6a3a      	ldr	r2, [r7, #32]
 800c826:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c832:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	2200      	movs	r2, #0
 800c838:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	2200      	movs	r2, #0
 800c83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c842:	4b12      	ldr	r3, [pc, #72]	; (800c88c <_tx_semaphore_ceiling_put+0x1e0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	4a10      	ldr	r2, [pc, #64]	; (800c88c <_tx_semaphore_ceiling_put+0x1e0>)
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	f383 8810 	msr	PRIMASK, r3
}
 800c856:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85a:	f000 fdd3 	bl	800d404 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c860:	4618      	mov	r0, r3
 800c862:	3748      	adds	r7, #72	; 0x48
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20001cf4 	.word	0x20001cf4
 800c86c:	20001cf8 	.word	0x20001cf8
 800c870:	2000000c 	.word	0x2000000c
 800c874:	200016d8 	.word	0x200016d8
 800c878:	e0001004 	.word	0xe0001004
 800c87c:	20001cf0 	.word	0x20001cf0
 800c880:	20001cec 	.word	0x20001cec
 800c884:	20001ce0 	.word	0x20001ce0
 800c888:	20001cfc 	.word	0x20001cfc
 800c88c:	20001770 	.word	0x20001770

0800c890 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08e      	sub	sp, #56	; 0x38
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c89a:	f3ef 8310 	mrs	r3, PRIMASK
 800c89e:	623b      	str	r3, [r7, #32]
    return(posture);
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c8a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8a4:	b672      	cpsid	i
    return(int_posture);
 800c8a6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ae:	4a33      	ldr	r2, [pc, #204]	; (800c97c <_tx_semaphore_cleanup+0xec>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d158      	bne.n	800c966 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d152      	bne.n	800c966 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d04c      	beq.n	800c966 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a2b      	ldr	r2, [pc, #172]	; (800c980 <_tx_semaphore_cleanup+0xf0>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d147      	bne.n	800c966 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d043      	beq.n	800c966 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	1e5a      	subs	r2, r3, #1
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d103      	bne.n	800c902 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	60da      	str	r2, [r3, #12]
 800c900:	e013      	b.n	800c92a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c906:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c912:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c918:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c928:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c92e:	2b06      	cmp	r3, #6
 800c930:	d119      	bne.n	800c966 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	220d      	movs	r2, #13
 800c936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c93a:	4b12      	ldr	r3, [pc, #72]	; (800c984 <_tx_semaphore_cleanup+0xf4>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3301      	adds	r3, #1
 800c940:	4a10      	ldr	r2, [pc, #64]	; (800c984 <_tx_semaphore_cleanup+0xf4>)
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f383 8810 	msr	PRIMASK, r3
}
 800c94e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fd57 	bl	800d404 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c956:	f3ef 8310 	mrs	r3, PRIMASK
 800c95a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c95c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c95e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c960:	b672      	cpsid	i
    return(int_posture);
 800c962:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c964:	637b      	str	r3, [r7, #52]	; 0x34
 800c966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c968:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f383 8810 	msr	PRIMASK, r3
}
 800c970:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c972:	bf00      	nop
 800c974:	3738      	adds	r7, #56	; 0x38
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	0800c891 	.word	0x0800c891
 800c980:	53454d41 	.word	0x53454d41
 800c984:	20001770 	.word	0x20001770

0800c988 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b092      	sub	sp, #72	; 0x48
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c994:	221c      	movs	r2, #28
 800c996:	2100      	movs	r1, #0
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f008 fa73 	bl	8014e84 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ae:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c9b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9b4:	b672      	cpsid	i
    return(int_posture);
 800c9b6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c9b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4a56      	ldr	r2, [pc, #344]	; (800cb18 <_tx_semaphore_create+0x190>)
 800c9be:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c9c0:	4b56      	ldr	r3, [pc, #344]	; (800cb1c <_tx_semaphore_create+0x194>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c9c8:	4a55      	ldr	r2, [pc, #340]	; (800cb20 <_tx_semaphore_create+0x198>)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	619a      	str	r2, [r3, #24]
 800c9da:	e011      	b.n	800ca00 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c9dc:	4b50      	ldr	r3, [pc, #320]	; (800cb20 <_tx_semaphore_create+0x198>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ca00:	4b46      	ldr	r3, [pc, #280]	; (800cb1c <_tx_semaphore_create+0x194>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	4a45      	ldr	r2, [pc, #276]	; (800cb1c <_tx_semaphore_create+0x194>)
 800ca08:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	68f9      	ldr	r1, [r7, #12]
 800ca14:	2004      	movs	r0, #4
 800ca16:	f001 fc17 	bl	800e248 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800ca1a:	4b42      	ldr	r3, [pc, #264]	; (800cb24 <_tx_semaphore_create+0x19c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d06c      	beq.n	800cb00 <_tx_semaphore_create+0x178>
 800ca26:	4b40      	ldr	r3, [pc, #256]	; (800cb28 <_tx_semaphore_create+0x1a0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d066      	beq.n	800cb00 <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca32:	f3ef 8305 	mrs	r3, IPSR
 800ca36:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	4b3c      	ldr	r3, [pc, #240]	; (800cb2c <_tx_semaphore_create+0x1a4>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca42:	4b3b      	ldr	r3, [pc, #236]	; (800cb30 <_tx_semaphore_create+0x1a8>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10b      	bne.n	800ca66 <_tx_semaphore_create+0xde>
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca58:	041a      	lsls	r2, r3, #16
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca64:	e00e      	b.n	800ca84 <_tx_semaphore_create+0xfc>
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca6c:	d205      	bcs.n	800ca7a <_tx_semaphore_create+0xf2>
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca72:	f04f 33ff 	mov.w	r3, #4294967295
 800ca76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca78:	e004      	b.n	800ca84 <_tx_semaphore_create+0xfc>
 800ca7a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ca7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca80:	2300      	movs	r3, #0
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	601a      	str	r2, [r3, #0]
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca8e:	605a      	str	r2, [r3, #4]
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	2251      	movs	r2, #81	; 0x51
 800ca94:	609a      	str	r2, [r3, #8]
 800ca96:	4b27      	ldr	r3, [pc, #156]	; (800cb34 <_tx_semaphore_create+0x1ac>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	60da      	str	r2, [r3, #12]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	611a      	str	r2, [r3, #16]
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	615a      	str	r2, [r3, #20]
 800caaa:	f107 0214 	add.w	r2, r7, #20
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	619a      	str	r2, [r3, #24]
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	2200      	movs	r2, #0
 800cab6:	61da      	str	r2, [r3, #28]
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	3320      	adds	r3, #32
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cabe:	4b1e      	ldr	r3, [pc, #120]	; (800cb38 <_tx_semaphore_create+0x1b0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d314      	bcc.n	800caf2 <_tx_semaphore_create+0x16a>
 800cac8:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <_tx_semaphore_create+0x1b4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cace:	4a15      	ldr	r2, [pc, #84]	; (800cb24 <_tx_semaphore_create+0x19c>)
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	6013      	str	r3, [r2, #0]
 800cad4:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <_tx_semaphore_create+0x1b8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cada:	621a      	str	r2, [r3, #32]
 800cadc:	4b19      	ldr	r3, [pc, #100]	; (800cb44 <_tx_semaphore_create+0x1bc>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00d      	beq.n	800cb00 <_tx_semaphore_create+0x178>
 800cae4:	4b17      	ldr	r3, [pc, #92]	; (800cb44 <_tx_semaphore_create+0x1bc>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a15      	ldr	r2, [pc, #84]	; (800cb40 <_tx_semaphore_create+0x1b8>)
 800caea:	6812      	ldr	r2, [r2, #0]
 800caec:	4610      	mov	r0, r2
 800caee:	4798      	blx	r3
 800caf0:	e006      	b.n	800cb00 <_tx_semaphore_create+0x178>
 800caf2:	4a0c      	ldr	r2, [pc, #48]	; (800cb24 <_tx_semaphore_create+0x19c>)
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	4b11      	ldr	r3, [pc, #68]	; (800cb40 <_tx_semaphore_create+0x1b8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafe:	621a      	str	r2, [r3, #32]
 800cb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	f383 8810 	msr	PRIMASK, r3
}
 800cb0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3740      	adds	r7, #64	; 0x40
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	53454d41 	.word	0x53454d41
 800cb1c:	200016a4 	.word	0x200016a4
 800cb20:	200016a0 	.word	0x200016a0
 800cb24:	20001cf4 	.word	0x20001cf4
 800cb28:	20001cf8 	.word	0x20001cf8
 800cb2c:	2000000c 	.word	0x2000000c
 800cb30:	200016d8 	.word	0x200016d8
 800cb34:	e0001004 	.word	0xe0001004
 800cb38:	20001cf0 	.word	0x20001cf0
 800cb3c:	20001cec 	.word	0x20001cec
 800cb40:	20001ce0 	.word	0x20001ce0
 800cb44:	20001cfc 	.word	0x20001cfc

0800cb48 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b092      	sub	sp, #72	; 0x48
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800cb52:	2300      	movs	r3, #0
 800cb54:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb56:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cb5e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb60:	b672      	cpsid	i
    return(int_posture);
 800cb62:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800cb64:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800cb66:	4b78      	ldr	r3, [pc, #480]	; (800cd48 <_tx_semaphore_get+0x200>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	637b      	str	r3, [r7, #52]	; 0x34
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d06d      	beq.n	800cc4e <_tx_semaphore_get+0x106>
 800cb72:	4b76      	ldr	r3, [pc, #472]	; (800cd4c <_tx_semaphore_get+0x204>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d067      	beq.n	800cc4e <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb7e:	f3ef 8305 	mrs	r3, IPSR
 800cb82:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cb84:	69fa      	ldr	r2, [r7, #28]
 800cb86:	4b72      	ldr	r3, [pc, #456]	; (800cd50 <_tx_semaphore_get+0x208>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	633b      	str	r3, [r7, #48]	; 0x30
 800cb8e:	4b71      	ldr	r3, [pc, #452]	; (800cd54 <_tx_semaphore_get+0x20c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10b      	bne.n	800cbb2 <_tx_semaphore_get+0x6a>
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	643b      	str	r3, [r7, #64]	; 0x40
 800cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba4:	041a      	lsls	r2, r3, #16
 800cba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbae:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb0:	e00e      	b.n	800cbd0 <_tx_semaphore_get+0x88>
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cbb8:	d205      	bcs.n	800cbc6 <_tx_semaphore_get+0x7e>
 800cbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbbc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc4:	e004      	b.n	800cbd0 <_tx_semaphore_get+0x88>
 800cbc6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbcc:	2300      	movs	r3, #0
 800cbce:	643b      	str	r3, [r7, #64]	; 0x40
 800cbd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbda:	605a      	str	r2, [r3, #4]
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	2253      	movs	r2, #83	; 0x53
 800cbe0:	609a      	str	r2, [r3, #8]
 800cbe2:	4b5d      	ldr	r3, [pc, #372]	; (800cd58 <_tx_semaphore_get+0x210>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	60da      	str	r2, [r3, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	611a      	str	r2, [r3, #16]
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	615a      	str	r2, [r3, #20]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	689a      	ldr	r2, [r3, #8]
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	619a      	str	r2, [r3, #24]
 800cbfe:	f107 0208 	add.w	r2, r7, #8
 800cc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc04:	61da      	str	r2, [r3, #28]
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	3320      	adds	r3, #32
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc0c:	4b53      	ldr	r3, [pc, #332]	; (800cd5c <_tx_semaphore_get+0x214>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d314      	bcc.n	800cc40 <_tx_semaphore_get+0xf8>
 800cc16:	4b52      	ldr	r3, [pc, #328]	; (800cd60 <_tx_semaphore_get+0x218>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc1c:	4a4a      	ldr	r2, [pc, #296]	; (800cd48 <_tx_semaphore_get+0x200>)
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	4b50      	ldr	r3, [pc, #320]	; (800cd64 <_tx_semaphore_get+0x21c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc28:	621a      	str	r2, [r3, #32]
 800cc2a:	4b4f      	ldr	r3, [pc, #316]	; (800cd68 <_tx_semaphore_get+0x220>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00d      	beq.n	800cc4e <_tx_semaphore_get+0x106>
 800cc32:	4b4d      	ldr	r3, [pc, #308]	; (800cd68 <_tx_semaphore_get+0x220>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a4b      	ldr	r2, [pc, #300]	; (800cd64 <_tx_semaphore_get+0x21c>)
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	4798      	blx	r3
 800cc3e:	e006      	b.n	800cc4e <_tx_semaphore_get+0x106>
 800cc40:	4a41      	ldr	r2, [pc, #260]	; (800cd48 <_tx_semaphore_get+0x200>)
 800cc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	4b47      	ldr	r3, [pc, #284]	; (800cd64 <_tx_semaphore_get+0x21c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc4c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	1e5a      	subs	r2, r3, #1
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	609a      	str	r2, [r3, #8]
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f383 8810 	msr	PRIMASK, r3
}
 800cc6a:	e068      	b.n	800cd3e <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d05d      	beq.n	800cd2e <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cc72:	4b3e      	ldr	r3, [pc, #248]	; (800cd6c <_tx_semaphore_get+0x224>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d008      	beq.n	800cc8c <_tx_semaphore_get+0x144>
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f383 8810 	msr	PRIMASK, r3
}
 800cc84:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800cc86:	230d      	movs	r3, #13
 800cc88:	647b      	str	r3, [r7, #68]	; 0x44
 800cc8a:	e058      	b.n	800cd3e <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cc8c:	4b31      	ldr	r3, [pc, #196]	; (800cd54 <_tx_semaphore_get+0x20c>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4a36      	ldr	r2, [pc, #216]	; (800cd70 <_tx_semaphore_get+0x228>)
 800cc96:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cca4:	3201      	adds	r2, #1
 800cca6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d109      	bne.n	800ccc6 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	675a      	str	r2, [r3, #116]	; 0x74
 800ccc4:	e011      	b.n	800ccea <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccd0:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccd6:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccdc:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	1c5a      	adds	r2, r3, #1
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2206      	movs	r2, #6
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cd06:	4b19      	ldr	r3, [pc, #100]	; (800cd6c <_tx_semaphore_get+0x224>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	4a17      	ldr	r2, [pc, #92]	; (800cd6c <_tx_semaphore_get+0x224>)
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f383 8810 	msr	PRIMASK, r3
}
 800cd1a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fd2a 	bl	800d778 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd2a:	647b      	str	r3, [r7, #68]	; 0x44
 800cd2c:	e007      	b.n	800cd3e <_tx_semaphore_get+0x1f6>
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f383 8810 	msr	PRIMASK, r3
}
 800cd38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800cd3a:	230d      	movs	r3, #13
 800cd3c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3748      	adds	r7, #72	; 0x48
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20001cf4 	.word	0x20001cf4
 800cd4c:	20001cf8 	.word	0x20001cf8
 800cd50:	2000000c 	.word	0x2000000c
 800cd54:	200016d8 	.word	0x200016d8
 800cd58:	e0001004 	.word	0xe0001004
 800cd5c:	20001cf0 	.word	0x20001cf0
 800cd60:	20001cec 	.word	0x20001cec
 800cd64:	20001ce0 	.word	0x20001ce0
 800cd68:	20001cfc 	.word	0x20001cfc
 800cd6c:	20001770 	.word	0x20001770
 800cd70:	0800c891 	.word	0x0800c891

0800cd74 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b09a      	sub	sp, #104	; 0x68
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cd82:	2300      	movs	r3, #0
 800cd84:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cd86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd88:	21ef      	movs	r1, #239	; 0xef
 800cd8a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cd8c:	f008 f87a 	bl	8014e84 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cd90:	22b0      	movs	r2, #176	; 0xb0
 800cd92:	2100      	movs	r1, #0
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f008 f875 	bl	8014e84 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cdb0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdb6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdbc:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cdca:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cdd0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cdda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cddc:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cdde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde0:	3b01      	subs	r3, #1
 800cde2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cde4:	4413      	add	r3, r2
 800cde6:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdec:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cdee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d007      	beq.n	800ce06 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ce04:	e006      	b.n	800ce14 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce0a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2203      	movs	r2, #3
 800ce18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4a86      	ldr	r2, [pc, #536]	; (800d038 <_tx_thread_create+0x2c4>)
 800ce1e:	655a      	str	r2, [r3, #84]	; 0x54
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ce26:	4985      	ldr	r1, [pc, #532]	; (800d03c <_tx_thread_create+0x2c8>)
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7f3 facf 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce32:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ce34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ce36:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce38:	b672      	cpsid	i
    return(int_posture);
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ce3c:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	4a7f      	ldr	r2, [pc, #508]	; (800d040 <_tx_thread_create+0x2cc>)
 800ce42:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ce44:	4b7f      	ldr	r3, [pc, #508]	; (800d044 <_tx_thread_create+0x2d0>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10b      	bne.n	800ce64 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ce4c:	4a7e      	ldr	r2, [pc, #504]	; (800d048 <_tx_thread_create+0x2d4>)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ce62:	e016      	b.n	800ce92 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ce64:	4b78      	ldr	r3, [pc, #480]	; (800d048 <_tx_thread_create+0x2d4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce70:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ce72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ce92:	4b6c      	ldr	r3, [pc, #432]	; (800d044 <_tx_thread_create+0x2d0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	3301      	adds	r3, #1
 800ce98:	4a6a      	ldr	r2, [pc, #424]	; (800d044 <_tx_thread_create+0x2d0>)
 800ce9a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800ce9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4613      	mov	r3, r2
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	68f9      	ldr	r1, [r7, #12]
 800cea8:	2001      	movs	r0, #1
 800ceaa:	f001 f9cd 	bl	800e248 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800ceae:	4b67      	ldr	r3, [pc, #412]	; (800d04c <_tx_thread_create+0x2d8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d06b      	beq.n	800cf92 <_tx_thread_create+0x21e>
 800ceba:	4b65      	ldr	r3, [pc, #404]	; (800d050 <_tx_thread_create+0x2dc>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d065      	beq.n	800cf92 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cec6:	f3ef 8305 	mrs	r3, IPSR
 800ceca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800cecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cece:	4b61      	ldr	r3, [pc, #388]	; (800d054 <_tx_thread_create+0x2e0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ced6:	4b60      	ldr	r3, [pc, #384]	; (800d058 <_tx_thread_create+0x2e4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	653b      	str	r3, [r7, #80]	; 0x50
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10b      	bne.n	800cefa <_tx_thread_create+0x186>
 800cee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee6:	657b      	str	r3, [r7, #84]	; 0x54
 800cee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceec:	041a      	lsls	r2, r3, #16
 800ceee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cef6:	657b      	str	r3, [r7, #84]	; 0x54
 800cef8:	e00e      	b.n	800cf18 <_tx_thread_create+0x1a4>
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf00:	d205      	bcs.n	800cf0e <_tx_thread_create+0x19a>
 800cf02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf04:	657b      	str	r3, [r7, #84]	; 0x54
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	653b      	str	r3, [r7, #80]	; 0x50
 800cf0c:	e004      	b.n	800cf18 <_tx_thread_create+0x1a4>
 800cf0e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cf12:	653b      	str	r3, [r7, #80]	; 0x50
 800cf14:	2300      	movs	r3, #0
 800cf16:	657b      	str	r3, [r7, #84]	; 0x54
 800cf18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1c:	601a      	str	r2, [r3, #0]
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf22:	605a      	str	r2, [r3, #4]
 800cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf26:	2264      	movs	r2, #100	; 0x64
 800cf28:	609a      	str	r2, [r3, #8]
 800cf2a:	4b4c      	ldr	r3, [pc, #304]	; (800d05c <_tx_thread_create+0x2e8>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf30:	60da      	str	r2, [r3, #12]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	611a      	str	r2, [r3, #16]
 800cf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf3c:	615a      	str	r2, [r3, #20]
 800cf3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf42:	619a      	str	r2, [r3, #24]
 800cf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf48:	61da      	str	r2, [r3, #28]
 800cf4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4c:	3320      	adds	r3, #32
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf50:	4b43      	ldr	r3, [pc, #268]	; (800d060 <_tx_thread_create+0x2ec>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d314      	bcc.n	800cf84 <_tx_thread_create+0x210>
 800cf5a:	4b42      	ldr	r3, [pc, #264]	; (800d064 <_tx_thread_create+0x2f0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf60:	4a3a      	ldr	r2, [pc, #232]	; (800d04c <_tx_thread_create+0x2d8>)
 800cf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	4b40      	ldr	r3, [pc, #256]	; (800d068 <_tx_thread_create+0x2f4>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf6c:	621a      	str	r2, [r3, #32]
 800cf6e:	4b3f      	ldr	r3, [pc, #252]	; (800d06c <_tx_thread_create+0x2f8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00d      	beq.n	800cf92 <_tx_thread_create+0x21e>
 800cf76:	4b3d      	ldr	r3, [pc, #244]	; (800d06c <_tx_thread_create+0x2f8>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a3b      	ldr	r2, [pc, #236]	; (800d068 <_tx_thread_create+0x2f4>)
 800cf7c:	6812      	ldr	r2, [r2, #0]
 800cf7e:	4610      	mov	r0, r2
 800cf80:	4798      	blx	r3
 800cf82:	e006      	b.n	800cf92 <_tx_thread_create+0x21e>
 800cf84:	4a31      	ldr	r2, [pc, #196]	; (800d04c <_tx_thread_create+0x2d8>)
 800cf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	4b37      	ldr	r3, [pc, #220]	; (800d068 <_tx_thread_create+0x2f4>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf90:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <_tx_thread_create+0x2fc>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3301      	adds	r3, #1
 800cf98:	4a35      	ldr	r2, [pc, #212]	; (800d070 <_tx_thread_create+0x2fc>)
 800cf9a:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cf9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d129      	bne.n	800cff6 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfa2:	f3ef 8305 	mrs	r3, IPSR
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cfa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cfaa:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <_tx_thread_create+0x2e0>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cfb4:	d30d      	bcc.n	800cfd2 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cfb6:	4b2f      	ldr	r3, [pc, #188]	; (800d074 <_tx_thread_create+0x300>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cfbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cfc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc6:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cfc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfce:	63da      	str	r2, [r3, #60]	; 0x3c
 800cfd0:	e001      	b.n	800cfd6 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	f383 8810 	msr	PRIMASK, r3
}
 800cfe0:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 fa0e 	bl	800d404 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d01e      	beq.n	800d02c <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cfee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cff2:	63da      	str	r2, [r3, #60]	; 0x3c
 800cff4:	e01a      	b.n	800d02c <_tx_thread_create+0x2b8>
 800cff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f383 8810 	msr	PRIMASK, r3
}
 800d000:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d002:	f3ef 8310 	mrs	r3, PRIMASK
 800d006:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d008:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d00a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d00c:	b672      	cpsid	i
    return(int_posture);
 800d00e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800d010:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800d012:	4b17      	ldr	r3, [pc, #92]	; (800d070 <_tx_thread_create+0x2fc>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3b01      	subs	r3, #1
 800d018:	4a15      	ldr	r2, [pc, #84]	; (800d070 <_tx_thread_create+0x2fc>)
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	f383 8810 	msr	PRIMASK, r3
}
 800d026:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d028:	f000 f9b2 	bl	800d390 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3760      	adds	r7, #96	; 0x60
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	0800dd19 	.word	0x0800dd19
 800d03c:	0800d0f5 	.word	0x0800d0f5
 800d040:	54485244 	.word	0x54485244
 800d044:	200016e4 	.word	0x200016e4
 800d048:	200016e0 	.word	0x200016e0
 800d04c:	20001cf4 	.word	0x20001cf4
 800d050:	20001cf8 	.word	0x20001cf8
 800d054:	2000000c 	.word	0x2000000c
 800d058:	200016d8 	.word	0x200016d8
 800d05c:	e0001004 	.word	0xe0001004
 800d060:	20001cf0 	.word	0x20001cf0
 800d064:	20001cec 	.word	0x20001cec
 800d068:	20001ce0 	.word	0x20001ce0
 800d06c:	20001cfc 	.word	0x20001cfc
 800d070:	20001770 	.word	0x20001770
 800d074:	200016dc 	.word	0x200016dc

0800d078 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d07c:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <_tx_thread_initialize+0x54>)
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d082:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <_tx_thread_initialize+0x58>)
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	4b12      	ldr	r3, [pc, #72]	; (800d0d4 <_tx_thread_initialize+0x5c>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d08e:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <_tx_thread_initialize+0x60>)
 800d090:	2220      	movs	r2, #32
 800d092:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d094:	2280      	movs	r2, #128	; 0x80
 800d096:	2100      	movs	r1, #0
 800d098:	4810      	ldr	r0, [pc, #64]	; (800d0dc <_tx_thread_initialize+0x64>)
 800d09a:	f007 fef3 	bl	8014e84 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d09e:	4b10      	ldr	r3, [pc, #64]	; (800d0e0 <_tx_thread_initialize+0x68>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <_tx_thread_initialize+0x6c>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d0aa:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <_tx_thread_initialize+0x70>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <_tx_thread_initialize+0x74>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <_tx_thread_initialize+0x78>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800d0be:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800d0c2:	4a0b      	ldr	r2, [pc, #44]	; (800d0f0 <_tx_thread_initialize+0x78>)
 800d0c4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d0c6:	bf00      	nop
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	200016d8 	.word	0x200016d8
 800d0d0:	200016dc 	.word	0x200016dc
 800d0d4:	200016e8 	.word	0x200016e8
 800d0d8:	200016ec 	.word	0x200016ec
 800d0dc:	200016f0 	.word	0x200016f0
 800d0e0:	200016e0 	.word	0x200016e0
 800d0e4:	200016e4 	.word	0x200016e4
 800d0e8:	20001770 	.word	0x20001770
 800d0ec:	20001774 	.word	0x20001774
 800d0f0:	20001778 	.word	0x20001778

0800d0f4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d0fa:	4b21      	ldr	r3, [pc, #132]	; (800d180 <_tx_thread_shell_entry+0x8c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d104:	69fa      	ldr	r2, [r7, #28]
 800d106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d108:	4610      	mov	r0, r2
 800d10a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d10c:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <_tx_thread_shell_entry+0x90>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d003      	beq.n	800d11c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d114:	4b1b      	ldr	r3, [pc, #108]	; (800d184 <_tx_thread_shell_entry+0x90>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	69f8      	ldr	r0, [r7, #28]
 800d11a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d11c:	f3ef 8310 	mrs	r3, PRIMASK
 800d120:	607b      	str	r3, [r7, #4]
    return(posture);
 800d122:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d124:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d126:	b672      	cpsid	i
    return(int_posture);
 800d128:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d12a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2201      	movs	r2, #1
 800d130:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	2201      	movs	r2, #1
 800d136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	2200      	movs	r2, #0
 800d13c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d13e:	4b12      	ldr	r3, [pc, #72]	; (800d188 <_tx_thread_shell_entry+0x94>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3301      	adds	r3, #1
 800d144:	4a10      	ldr	r2, [pc, #64]	; (800d188 <_tx_thread_shell_entry+0x94>)
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	f383 8810 	msr	PRIMASK, r3
}
 800d152:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d154:	f3ef 8314 	mrs	r3, CONTROL
 800d158:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d15a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f023 0304 	bic.w	r3, r3, #4
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	f383 8814 	msr	CONTROL, r3
}
 800d170:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d172:	69f8      	ldr	r0, [r7, #28]
 800d174:	f000 fb00 	bl	800d778 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d178:	bf00      	nop
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	200016d8 	.word	0x200016d8
 800d184:	20001774 	.word	0x20001774
 800d188:	20001770 	.word	0x20001770

0800d18c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b094      	sub	sp, #80	; 0x50
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d194:	f3ef 8310 	mrs	r3, PRIMASK
 800d198:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d19c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d19e:	b672      	cpsid	i
    return(int_posture);
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d1a2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d1a4:	4b6f      	ldr	r3, [pc, #444]	; (800d364 <_tx_thread_sleep+0x1d8>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d108      	bne.n	800d1c2 <_tx_thread_sleep+0x36>
 800d1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	f383 8810 	msr	PRIMASK, r3
}
 800d1ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d1bc:	2313      	movs	r3, #19
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	e0ca      	b.n	800d358 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1c2:	f3ef 8305 	mrs	r3, IPSR
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d1ca:	4b67      	ldr	r3, [pc, #412]	; (800d368 <_tx_thread_sleep+0x1dc>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <_tx_thread_sleep+0x5a>
 800d1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	f383 8810 	msr	PRIMASK, r3
}
 800d1de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d1e0:	2313      	movs	r3, #19
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	e0b8      	b.n	800d358 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1e8:	4a60      	ldr	r2, [pc, #384]	; (800d36c <_tx_thread_sleep+0x1e0>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d108      	bne.n	800d200 <_tx_thread_sleep+0x74>
 800d1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	f383 8810 	msr	PRIMASK, r3
}
 800d1f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d1fa:	2313      	movs	r3, #19
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	e0ab      	b.n	800d358 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d108      	bne.n	800d218 <_tx_thread_sleep+0x8c>
 800d206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d208:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	f383 8810 	msr	PRIMASK, r3
}
 800d210:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d212:	2300      	movs	r3, #0
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e09f      	b.n	800d358 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d218:	4b55      	ldr	r3, [pc, #340]	; (800d370 <_tx_thread_sleep+0x1e4>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d008      	beq.n	800d232 <_tx_thread_sleep+0xa6>
 800d220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d222:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	f383 8810 	msr	PRIMASK, r3
}
 800d22a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d22c:	2313      	movs	r3, #19
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	e092      	b.n	800d358 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800d232:	4b50      	ldr	r3, [pc, #320]	; (800d374 <_tx_thread_sleep+0x1e8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d06d      	beq.n	800d31a <_tx_thread_sleep+0x18e>
 800d23e:	4b4e      	ldr	r3, [pc, #312]	; (800d378 <_tx_thread_sleep+0x1ec>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d246:	2b00      	cmp	r3, #0
 800d248:	d067      	beq.n	800d31a <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d24a:	f3ef 8305 	mrs	r3, IPSR
 800d24e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	4b45      	ldr	r3, [pc, #276]	; (800d368 <_tx_thread_sleep+0x1dc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4313      	orrs	r3, r2
 800d258:	63bb      	str	r3, [r7, #56]	; 0x38
 800d25a:	4b42      	ldr	r3, [pc, #264]	; (800d364 <_tx_thread_sleep+0x1d8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10b      	bne.n	800d27e <_tx_thread_sleep+0xf2>
 800d266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d270:	041a      	lsls	r2, r3, #16
 800d272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d274:	4313      	orrs	r3, r2
 800d276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d27c:	e00e      	b.n	800d29c <_tx_thread_sleep+0x110>
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d284:	d205      	bcs.n	800d292 <_tx_thread_sleep+0x106>
 800d286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d28a:	f04f 33ff 	mov.w	r3, #4294967295
 800d28e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d290:	e004      	b.n	800d29c <_tx_thread_sleep+0x110>
 800d292:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d296:	64bb      	str	r3, [r7, #72]	; 0x48
 800d298:	2300      	movs	r3, #0
 800d29a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2a6:	605a      	str	r2, [r3, #4]
 800d2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2aa:	2270      	movs	r2, #112	; 0x70
 800d2ac:	609a      	str	r2, [r3, #8]
 800d2ae:	4b33      	ldr	r3, [pc, #204]	; (800d37c <_tx_thread_sleep+0x1f0>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b4:	60da      	str	r2, [r3, #12]
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	611a      	str	r2, [r3, #16]
 800d2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c2:	615a      	str	r2, [r3, #20]
 800d2c4:	f107 020c 	add.w	r2, r7, #12
 800d2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ca:	619a      	str	r2, [r3, #24]
 800d2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	61da      	str	r2, [r3, #28]
 800d2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d4:	3320      	adds	r3, #32
 800d2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2d8:	4b29      	ldr	r3, [pc, #164]	; (800d380 <_tx_thread_sleep+0x1f4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d314      	bcc.n	800d30c <_tx_thread_sleep+0x180>
 800d2e2:	4b28      	ldr	r3, [pc, #160]	; (800d384 <_tx_thread_sleep+0x1f8>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2e8:	4a22      	ldr	r2, [pc, #136]	; (800d374 <_tx_thread_sleep+0x1e8>)
 800d2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	4b26      	ldr	r3, [pc, #152]	; (800d388 <_tx_thread_sleep+0x1fc>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2f4:	621a      	str	r2, [r3, #32]
 800d2f6:	4b25      	ldr	r3, [pc, #148]	; (800d38c <_tx_thread_sleep+0x200>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00d      	beq.n	800d31a <_tx_thread_sleep+0x18e>
 800d2fe:	4b23      	ldr	r3, [pc, #140]	; (800d38c <_tx_thread_sleep+0x200>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a21      	ldr	r2, [pc, #132]	; (800d388 <_tx_thread_sleep+0x1fc>)
 800d304:	6812      	ldr	r2, [r2, #0]
 800d306:	4610      	mov	r0, r2
 800d308:	4798      	blx	r3
 800d30a:	e006      	b.n	800d31a <_tx_thread_sleep+0x18e>
 800d30c:	4a19      	ldr	r2, [pc, #100]	; (800d374 <_tx_thread_sleep+0x1e8>)
 800d30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <_tx_thread_sleep+0x1fc>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d318:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31c:	2204      	movs	r2, #4
 800d31e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d322:	2201      	movs	r2, #1
 800d324:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d328:	2200      	movs	r2, #0
 800d32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d334:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <_tx_thread_sleep+0x1e4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3301      	adds	r3, #1
 800d33a:	4a0d      	ldr	r2, [pc, #52]	; (800d370 <_tx_thread_sleep+0x1e4>)
 800d33c:	6013      	str	r3, [r2, #0]
 800d33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d340:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f383 8810 	msr	PRIMASK, r3
}
 800d348:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d34a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d34c:	f000 fa14 	bl	800d778 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d356:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d358:	68fb      	ldr	r3, [r7, #12]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3750      	adds	r7, #80	; 0x50
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	200016d8 	.word	0x200016d8
 800d368:	2000000c 	.word	0x2000000c
 800d36c:	20001820 	.word	0x20001820
 800d370:	20001770 	.word	0x20001770
 800d374:	20001cf4 	.word	0x20001cf4
 800d378:	20001cf8 	.word	0x20001cf8
 800d37c:	e0001004 	.word	0xe0001004
 800d380:	20001cf0 	.word	0x20001cf0
 800d384:	20001cec 	.word	0x20001cec
 800d388:	20001ce0 	.word	0x20001ce0
 800d38c:	20001cfc 	.word	0x20001cfc

0800d390 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d390:	b480      	push	{r7}
 800d392:	b089      	sub	sp, #36	; 0x24
 800d394:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d396:	4b17      	ldr	r3, [pc, #92]	; (800d3f4 <_tx_thread_system_preempt_check+0x64>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d121      	bne.n	800d3e6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <_tx_thread_system_preempt_check+0x68>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d3a8:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <_tx_thread_system_preempt_check+0x6c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d017      	beq.n	800d3e6 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d3b6:	4b12      	ldr	r3, [pc, #72]	; (800d400 <_tx_thread_system_preempt_check+0x70>)
 800d3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3be:	f3ef 8305 	mrs	r3, IPSR
 800d3c2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d3c4:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10c      	bne.n	800d3e4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ce:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d3d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d3d4:	b662      	cpsie	i
}
 800d3d6:	bf00      	nop
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f383 8810 	msr	PRIMASK, r3
}
 800d3e2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d3e4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d3e6:	bf00      	nop
 800d3e8:	3724      	adds	r7, #36	; 0x24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	20001770 	.word	0x20001770
 800d3f8:	200016d8 	.word	0x200016d8
 800d3fc:	200016dc 	.word	0x200016dc
 800d400:	e000ed04 	.word	0xe000ed04

0800d404 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b09e      	sub	sp, #120	; 0x78
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d40c:	2300      	movs	r3, #0
 800d40e:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d410:	f3ef 8310 	mrs	r3, PRIMASK
 800d414:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d418:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d41a:	b672      	cpsid	i
    return(int_posture);
 800d41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d41e:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d424:	2b00      	cmp	r3, #0
 800d426:	d005      	beq.n	800d434 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	334c      	adds	r3, #76	; 0x4c
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fdaf 	bl	800df90 <_tx_timer_system_deactivate>
 800d432:	e002      	b.n	800d43a <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d43a:	4b8b      	ldr	r3, [pc, #556]	; (800d668 <_tx_thread_system_resume+0x264>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d440:	4b89      	ldr	r3, [pc, #548]	; (800d668 <_tx_thread_system_resume+0x264>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	663b      	str	r3, [r7, #96]	; 0x60
 800d446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d06f      	beq.n	800d52c <_tx_thread_system_resume+0x128>
 800d44c:	4b87      	ldr	r3, [pc, #540]	; (800d66c <_tx_thread_system_resume+0x268>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d069      	beq.n	800d52c <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d458:	f3ef 8305 	mrs	r3, IPSR
 800d45c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d460:	4b83      	ldr	r3, [pc, #524]	; (800d670 <_tx_thread_system_resume+0x26c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4313      	orrs	r3, r2
 800d466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d468:	4b82      	ldr	r3, [pc, #520]	; (800d674 <_tx_thread_system_resume+0x270>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d46e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <_tx_thread_system_resume+0x88>
 800d474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	673b      	str	r3, [r7, #112]	; 0x70
 800d47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47e:	041a      	lsls	r2, r3, #16
 800d480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d482:	4313      	orrs	r3, r2
 800d484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d488:	673b      	str	r3, [r7, #112]	; 0x70
 800d48a:	e00e      	b.n	800d4aa <_tx_thread_system_resume+0xa6>
 800d48c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d48e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d492:	d205      	bcs.n	800d4a0 <_tx_thread_system_resume+0x9c>
 800d494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d496:	673b      	str	r3, [r7, #112]	; 0x70
 800d498:	f04f 33ff 	mov.w	r3, #4294967295
 800d49c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d49e:	e004      	b.n	800d4aa <_tx_thread_system_resume+0xa6>
 800d4a0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d4a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	673b      	str	r3, [r7, #112]	; 0x70
 800d4aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d4ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	609a      	str	r2, [r3, #8]
 800d4bc:	4b6e      	ldr	r3, [pc, #440]	; (800d678 <_tx_thread_system_resume+0x274>)
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4c2:	60da      	str	r2, [r3, #12]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4c8:	611a      	str	r2, [r3, #16]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4d0:	615a      	str	r2, [r3, #20]
 800d4d2:	f107 020c 	add.w	r2, r7, #12
 800d4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4d8:	619a      	str	r2, [r3, #24]
 800d4da:	4b68      	ldr	r3, [pc, #416]	; (800d67c <_tx_thread_system_resume+0x278>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4e2:	61da      	str	r2, [r3, #28]
 800d4e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4e6:	3320      	adds	r3, #32
 800d4e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d4ea:	4b65      	ldr	r3, [pc, #404]	; (800d680 <_tx_thread_system_resume+0x27c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d314      	bcc.n	800d51e <_tx_thread_system_resume+0x11a>
 800d4f4:	4b63      	ldr	r3, [pc, #396]	; (800d684 <_tx_thread_system_resume+0x280>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	663b      	str	r3, [r7, #96]	; 0x60
 800d4fa:	4a5b      	ldr	r2, [pc, #364]	; (800d668 <_tx_thread_system_resume+0x264>)
 800d4fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	4b61      	ldr	r3, [pc, #388]	; (800d688 <_tx_thread_system_resume+0x284>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d506:	621a      	str	r2, [r3, #32]
 800d508:	4b60      	ldr	r3, [pc, #384]	; (800d68c <_tx_thread_system_resume+0x288>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00d      	beq.n	800d52c <_tx_thread_system_resume+0x128>
 800d510:	4b5e      	ldr	r3, [pc, #376]	; (800d68c <_tx_thread_system_resume+0x288>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a5c      	ldr	r2, [pc, #368]	; (800d688 <_tx_thread_system_resume+0x284>)
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	e006      	b.n	800d52c <_tx_thread_system_resume+0x128>
 800d51e:	4a52      	ldr	r2, [pc, #328]	; (800d668 <_tx_thread_system_resume+0x264>)
 800d520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	4b58      	ldr	r3, [pc, #352]	; (800d688 <_tx_thread_system_resume+0x284>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d52a:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d538:	4b55      	ldr	r3, [pc, #340]	; (800d690 <_tx_thread_system_resume+0x28c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3b01      	subs	r3, #1
 800d53e:	4a54      	ldr	r2, [pc, #336]	; (800d690 <_tx_thread_system_resume+0x28c>)
 800d540:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d546:	2b00      	cmp	r3, #0
 800d548:	f040 80b3 	bne.w	800d6b2 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 80c7 	beq.w	800d6e4 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 80a2 	bne.w	800d6a4 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d56c:	4a49      	ldr	r2, [pc, #292]	; (800d694 <_tx_thread_system_resume+0x290>)
 800d56e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d574:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d164      	bne.n	800d646 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d57c:	4945      	ldr	r1, [pc, #276]	; (800d694 <_tx_thread_system_resume+0x290>)
 800d57e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d592:	2201      	movs	r2, #1
 800d594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d596:	fa02 f303 	lsl.w	r3, r2, r3
 800d59a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d59c:	4b3e      	ldr	r3, [pc, #248]	; (800d698 <_tx_thread_system_resume+0x294>)
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	4a3c      	ldr	r2, [pc, #240]	; (800d698 <_tx_thread_system_resume+0x294>)
 800d5a6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d5a8:	4b3c      	ldr	r3, [pc, #240]	; (800d69c <_tx_thread_system_resume+0x298>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	f080 8098 	bcs.w	800d6e4 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d5b4:	4a39      	ldr	r2, [pc, #228]	; (800d69c <_tx_thread_system_resume+0x298>)
 800d5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5b8:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d5ba:	4b30      	ldr	r3, [pc, #192]	; (800d67c <_tx_thread_system_resume+0x278>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d103      	bne.n	800d5ce <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d5c6:	4a2d      	ldr	r2, [pc, #180]	; (800d67c <_tx_thread_system_resume+0x278>)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	e08a      	b.n	800d6e4 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	f080 8085 	bcs.w	800d6e4 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d5da:	4a28      	ldr	r2, [pc, #160]	; (800d67c <_tx_thread_system_resume+0x278>)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d009      	beq.n	800d5fa <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d104      	bne.n	800d5fa <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d5f0:	4b22      	ldr	r3, [pc, #136]	; (800d67c <_tx_thread_system_resume+0x278>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5f8:	61da      	str	r2, [r3, #28]
 800d5fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5fc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d600:	f383 8810 	msr	PRIMASK, r3
}
 800d604:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d606:	4b22      	ldr	r3, [pc, #136]	; (800d690 <_tx_thread_system_resume+0x28c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f040 80a1 	bne.w	800d756 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d614:	4b22      	ldr	r3, [pc, #136]	; (800d6a0 <_tx_thread_system_resume+0x29c>)
 800d616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d61a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d61c:	f3ef 8305 	mrs	r3, IPSR
 800d620:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d624:	2b00      	cmp	r3, #0
 800d626:	f040 8098 	bne.w	800d75a <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d62a:	f3ef 8310 	mrs	r3, PRIMASK
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d632:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d634:	b662      	cpsie	i
}
 800d636:	bf00      	nop
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	f383 8810 	msr	PRIMASK, r3
}
 800d642:	bf00      	nop
}
 800d644:	e089      	b.n	800d75a <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64a:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d65c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d662:	621a      	str	r2, [r3, #32]
 800d664:	e03e      	b.n	800d6e4 <_tx_thread_system_resume+0x2e0>
 800d666:	bf00      	nop
 800d668:	20001cf4 	.word	0x20001cf4
 800d66c:	20001cf8 	.word	0x20001cf8
 800d670:	2000000c 	.word	0x2000000c
 800d674:	200016d8 	.word	0x200016d8
 800d678:	e0001004 	.word	0xe0001004
 800d67c:	200016dc 	.word	0x200016dc
 800d680:	20001cf0 	.word	0x20001cf0
 800d684:	20001cec 	.word	0x20001cec
 800d688:	20001ce0 	.word	0x20001ce0
 800d68c:	20001cfc 	.word	0x20001cfc
 800d690:	20001770 	.word	0x20001770
 800d694:	200016f0 	.word	0x200016f0
 800d698:	200016e8 	.word	0x200016e8
 800d69c:	200016ec 	.word	0x200016ec
 800d6a0:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	631a      	str	r2, [r3, #48]	; 0x30
 800d6b0:	e018      	b.n	800d6e4 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d014      	beq.n	800d6e4 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d010      	beq.n	800d6e4 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	631a      	str	r2, [r3, #48]	; 0x30
 800d6d6:	e005      	b.n	800d6e4 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2203      	movs	r2, #3
 800d6e2:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d009      	beq.n	800d6fe <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d6ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d104      	bne.n	800d6fe <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d6f4:	4b1c      	ldr	r3, [pc, #112]	; (800d768 <_tx_thread_system_resume+0x364>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6fc:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d6fe:	4b1b      	ldr	r3, [pc, #108]	; (800d76c <_tx_thread_system_resume+0x368>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	647b      	str	r3, [r7, #68]	; 0x44
 800d704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d706:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	f383 8810 	msr	PRIMASK, r3
}
 800d70e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d710:	4b15      	ldr	r3, [pc, #84]	; (800d768 <_tx_thread_system_resume+0x364>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d716:	429a      	cmp	r2, r3
 800d718:	d022      	beq.n	800d760 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d71a:	4b15      	ldr	r3, [pc, #84]	; (800d770 <_tx_thread_system_resume+0x36c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d722:	2b00      	cmp	r3, #0
 800d724:	d11c      	bne.n	800d760 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d726:	4b13      	ldr	r3, [pc, #76]	; (800d774 <_tx_thread_system_resume+0x370>)
 800d728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d72e:	f3ef 8305 	mrs	r3, IPSR
 800d732:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d734:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d736:	2b00      	cmp	r3, #0
 800d738:	d111      	bne.n	800d75e <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d73a:	f3ef 8310 	mrs	r3, PRIMASK
 800d73e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d740:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d742:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d744:	b662      	cpsie	i
}
 800d746:	bf00      	nop
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f383 8810 	msr	PRIMASK, r3
}
 800d752:	bf00      	nop
}
 800d754:	e003      	b.n	800d75e <_tx_thread_system_resume+0x35a>
                                return;
 800d756:	bf00      	nop
 800d758:	e002      	b.n	800d760 <_tx_thread_system_resume+0x35c>
 800d75a:	bf00      	nop
 800d75c:	e000      	b.n	800d760 <_tx_thread_system_resume+0x35c>
 800d75e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d760:	3778      	adds	r7, #120	; 0x78
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	200016dc 	.word	0x200016dc
 800d76c:	200016d8 	.word	0x200016d8
 800d770:	20001770 	.word	0x20001770
 800d774:	e000ed04 	.word	0xe000ed04

0800d778 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b0a4      	sub	sp, #144	; 0x90
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d780:	2300      	movs	r3, #0
 800d782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d786:	4b98      	ldr	r3, [pc, #608]	; (800d9e8 <_tx_thread_system_suspend+0x270>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d78e:	f3ef 8310 	mrs	r3, PRIMASK
 800d792:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d796:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d798:	b672      	cpsid	i
    return(int_posture);
 800d79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d79c:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d112      	bne.n	800d7ce <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ac:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d008      	beq.n	800d7c6 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d7b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ba:	d004      	beq.n	800d7c6 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	334c      	adds	r3, #76	; 0x4c
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 fb83 	bl	800decc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	4a88      	ldr	r2, [pc, #544]	; (800d9ec <_tx_thread_system_suspend+0x274>)
 800d7cc:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d7ce:	4b88      	ldr	r3, [pc, #544]	; (800d9f0 <_tx_thread_system_suspend+0x278>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	4a86      	ldr	r2, [pc, #536]	; (800d9f0 <_tx_thread_system_suspend+0x278>)
 800d7d6:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	f040 817d 	bne.w	800dadc <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d7e2:	4b84      	ldr	r3, [pc, #528]	; (800d9f4 <_tx_thread_system_suspend+0x27c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d7e8:	4b82      	ldr	r3, [pc, #520]	; (800d9f4 <_tx_thread_system_suspend+0x27c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	673b      	str	r3, [r7, #112]	; 0x70
 800d7ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d07c      	beq.n	800d8ee <_tx_thread_system_suspend+0x176>
 800d7f4:	4b80      	ldr	r3, [pc, #512]	; (800d9f8 <_tx_thread_system_suspend+0x280>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d076      	beq.n	800d8ee <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d800:	f3ef 8305 	mrs	r3, IPSR
 800d804:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d808:	4b7c      	ldr	r3, [pc, #496]	; (800d9fc <_tx_thread_system_suspend+0x284>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d810:	4b75      	ldr	r3, [pc, #468]	; (800d9e8 <_tx_thread_system_suspend+0x270>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d110      	bne.n	800d840 <_tx_thread_system_suspend+0xc8>
 800d81e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	041a      	lsls	r2, r3, #16
 800d830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d834:	4313      	orrs	r3, r2
 800d836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d83a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d83e:	e013      	b.n	800d868 <_tx_thread_system_suspend+0xf0>
 800d840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d842:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d846:	d208      	bcs.n	800d85a <_tx_thread_system_suspend+0xe2>
 800d848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d850:	f04f 33ff 	mov.w	r3, #4294967295
 800d854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d858:	e006      	b.n	800d868 <_tx_thread_system_suspend+0xf0>
 800d85a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d85e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d862:	2300      	movs	r3, #0
 800d864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d868:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d86c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d872:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d876:	605a      	str	r2, [r3, #4]
 800d878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d87a:	2202      	movs	r2, #2
 800d87c:	609a      	str	r2, [r3, #8]
 800d87e:	4b60      	ldr	r3, [pc, #384]	; (800da00 <_tx_thread_system_suspend+0x288>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d884:	60da      	str	r2, [r3, #12]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d88a:	611a      	str	r2, [r3, #16]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d892:	615a      	str	r2, [r3, #20]
 800d894:	f107 0208 	add.w	r2, r7, #8
 800d898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d89a:	619a      	str	r2, [r3, #24]
 800d89c:	4b59      	ldr	r3, [pc, #356]	; (800da04 <_tx_thread_system_suspend+0x28c>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8a4:	61da      	str	r2, [r3, #28]
 800d8a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8a8:	3320      	adds	r3, #32
 800d8aa:	673b      	str	r3, [r7, #112]	; 0x70
 800d8ac:	4b56      	ldr	r3, [pc, #344]	; (800da08 <_tx_thread_system_suspend+0x290>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d314      	bcc.n	800d8e0 <_tx_thread_system_suspend+0x168>
 800d8b6:	4b55      	ldr	r3, [pc, #340]	; (800da0c <_tx_thread_system_suspend+0x294>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	673b      	str	r3, [r7, #112]	; 0x70
 800d8bc:	4a4d      	ldr	r2, [pc, #308]	; (800d9f4 <_tx_thread_system_suspend+0x27c>)
 800d8be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8c0:	6013      	str	r3, [r2, #0]
 800d8c2:	4b53      	ldr	r3, [pc, #332]	; (800da10 <_tx_thread_system_suspend+0x298>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8c8:	621a      	str	r2, [r3, #32]
 800d8ca:	4b52      	ldr	r3, [pc, #328]	; (800da14 <_tx_thread_system_suspend+0x29c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00d      	beq.n	800d8ee <_tx_thread_system_suspend+0x176>
 800d8d2:	4b50      	ldr	r3, [pc, #320]	; (800da14 <_tx_thread_system_suspend+0x29c>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a4e      	ldr	r2, [pc, #312]	; (800da10 <_tx_thread_system_suspend+0x298>)
 800d8d8:	6812      	ldr	r2, [r2, #0]
 800d8da:	4610      	mov	r0, r2
 800d8dc:	4798      	blx	r3
 800d8de:	e006      	b.n	800d8ee <_tx_thread_system_suspend+0x176>
 800d8e0:	4a44      	ldr	r2, [pc, #272]	; (800d9f4 <_tx_thread_system_suspend+0x27c>)
 800d8e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	4b4a      	ldr	r3, [pc, #296]	; (800da10 <_tx_thread_system_suspend+0x298>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8ec:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d8ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d8f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d90e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	d016      	beq.n	800d944 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d91c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d91e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d920:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d924:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d926:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	4a3b      	ldr	r2, [pc, #236]	; (800da18 <_tx_thread_system_suspend+0x2a0>)
 800d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	f040 8085 	bne.w	800da42 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	4937      	ldr	r1, [pc, #220]	; (800da18 <_tx_thread_system_suspend+0x2a0>)
 800d93c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d942:	e07e      	b.n	800da42 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	4a34      	ldr	r2, [pc, #208]	; (800da18 <_tx_thread_system_suspend+0x2a0>)
 800d948:	2100      	movs	r1, #0
 800d94a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2201      	movs	r2, #1
 800d952:	fa02 f303 	lsl.w	r3, r2, r3
 800d956:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d958:	4b30      	ldr	r3, [pc, #192]	; (800da1c <_tx_thread_system_suspend+0x2a4>)
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d95e:	43db      	mvns	r3, r3
 800d960:	4013      	ands	r3, r2
 800d962:	4a2e      	ldr	r2, [pc, #184]	; (800da1c <_tx_thread_system_suspend+0x2a4>)
 800d964:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d966:	2300      	movs	r3, #0
 800d968:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d96a:	4b2c      	ldr	r3, [pc, #176]	; (800da1c <_tx_thread_system_suspend+0x2a4>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d158      	bne.n	800da28 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d976:	4b2a      	ldr	r3, [pc, #168]	; (800da20 <_tx_thread_system_suspend+0x2a8>)
 800d978:	2220      	movs	r2, #32
 800d97a:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d97c:	4b21      	ldr	r3, [pc, #132]	; (800da04 <_tx_thread_system_suspend+0x28c>)
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d984:	2b00      	cmp	r3, #0
 800d986:	d008      	beq.n	800d99a <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d990:	429a      	cmp	r2, r3
 800d992:	d102      	bne.n	800d99a <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d996:	2200      	movs	r2, #0
 800d998:	61da      	str	r2, [r3, #28]
 800d99a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d99c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a0:	f383 8810 	msr	PRIMASK, r3
}
 800d9a4:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d9a6:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <_tx_thread_system_suspend+0x278>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d9ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 80bf 	bne.w	800db32 <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d9b4:	4b1b      	ldr	r3, [pc, #108]	; (800da24 <_tx_thread_system_suspend+0x2ac>)
 800d9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ba:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d9bc:	f3ef 8305 	mrs	r3, IPSR
 800d9c0:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10c      	bne.n	800d9e2 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d9d0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d9d2:	b662      	cpsie	i
}
 800d9d4:	bf00      	nop
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	f383 8810 	msr	PRIMASK, r3
}
 800d9e0:	bf00      	nop
}
 800d9e2:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d9e4:	e0a5      	b.n	800db32 <_tx_thread_system_suspend+0x3ba>
 800d9e6:	bf00      	nop
 800d9e8:	200016d8 	.word	0x200016d8
 800d9ec:	20001cdc 	.word	0x20001cdc
 800d9f0:	20001770 	.word	0x20001770
 800d9f4:	20001cf4 	.word	0x20001cf4
 800d9f8:	20001cf8 	.word	0x20001cf8
 800d9fc:	2000000c 	.word	0x2000000c
 800da00:	e0001004 	.word	0xe0001004
 800da04:	200016dc 	.word	0x200016dc
 800da08:	20001cf0 	.word	0x20001cf0
 800da0c:	20001cec 	.word	0x20001cec
 800da10:	20001ce0 	.word	0x20001ce0
 800da14:	20001cfc 	.word	0x20001cfc
 800da18:	200016f0 	.word	0x200016f0
 800da1c:	200016e8 	.word	0x200016e8
 800da20:	200016ec 	.word	0x200016ec
 800da24:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800da28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da2a:	fa93 f3a3 	rbit	r3, r3
 800da2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da32:	fab3 f383 	clz	r3, r3
 800da36:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800da38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da3c:	4413      	add	r3, r2
 800da3e:	4a41      	ldr	r2, [pc, #260]	; (800db44 <_tx_thread_system_suspend+0x3cc>)
 800da40:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800da42:	4b41      	ldr	r3, [pc, #260]	; (800db48 <_tx_thread_system_suspend+0x3d0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d139      	bne.n	800dac0 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800da4c:	4b3d      	ldr	r3, [pc, #244]	; (800db44 <_tx_thread_system_suspend+0x3cc>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a3e      	ldr	r2, [pc, #248]	; (800db4c <_tx_thread_system_suspend+0x3d4>)
 800da52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da56:	4a3c      	ldr	r2, [pc, #240]	; (800db48 <_tx_thread_system_suspend+0x3d0>)
 800da58:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800da5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00a      	beq.n	800da76 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800da60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800da68:	429a      	cmp	r2, r3
 800da6a:	d104      	bne.n	800da76 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800da6c:	4b36      	ldr	r3, [pc, #216]	; (800db48 <_tx_thread_system_suspend+0x3d0>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	461a      	mov	r2, r3
 800da72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da74:	61da      	str	r2, [r3, #28]
 800da76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da78:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	f383 8810 	msr	PRIMASK, r3
}
 800da80:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800da82:	4b33      	ldr	r3, [pc, #204]	; (800db50 <_tx_thread_system_suspend+0x3d8>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800da88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d153      	bne.n	800db36 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800da8e:	4b31      	ldr	r3, [pc, #196]	; (800db54 <_tx_thread_system_suspend+0x3dc>)
 800da90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da94:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800da96:	f3ef 8305 	mrs	r3, IPSR
 800da9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10c      	bne.n	800dabc <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800daa2:	f3ef 8310 	mrs	r3, PRIMASK
 800daa6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800daaa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800daac:	b662      	cpsie	i
}
 800daae:	bf00      	nop
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	f383 8810 	msr	PRIMASK, r3
}
 800daba:	bf00      	nop
}
 800dabc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800dabe:	e03a      	b.n	800db36 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800dac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800dac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dace:	429a      	cmp	r2, r3
 800dad0:	d104      	bne.n	800dadc <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <_tx_thread_system_suspend+0x3d0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dada:	61da      	str	r2, [r3, #28]
 800dadc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dade:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	f383 8810 	msr	PRIMASK, r3
}
 800dae6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dae8:	4b17      	ldr	r3, [pc, #92]	; (800db48 <_tx_thread_system_suspend+0x3d0>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d022      	beq.n	800db3a <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800daf4:	4b16      	ldr	r3, [pc, #88]	; (800db50 <_tx_thread_system_suspend+0x3d8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800dafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d11c      	bne.n	800db3a <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800db00:	4b14      	ldr	r3, [pc, #80]	; (800db54 <_tx_thread_system_suspend+0x3dc>)
 800db02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db06:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db08:	f3ef 8305 	mrs	r3, IPSR
 800db0c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800db0e:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10c      	bne.n	800db2e <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db14:	f3ef 8310 	mrs	r3, PRIMASK
 800db18:	617b      	str	r3, [r7, #20]
    return(posture);
 800db1a:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800db1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800db1e:	b662      	cpsie	i
}
 800db20:	bf00      	nop
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f383 8810 	msr	PRIMASK, r3
}
 800db2c:	bf00      	nop
}
 800db2e:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800db30:	e003      	b.n	800db3a <_tx_thread_system_suspend+0x3c2>
                return;
 800db32:	bf00      	nop
 800db34:	e002      	b.n	800db3c <_tx_thread_system_suspend+0x3c4>
            return;
 800db36:	bf00      	nop
 800db38:	e000      	b.n	800db3c <_tx_thread_system_suspend+0x3c4>
    return;
 800db3a:	bf00      	nop
}
 800db3c:	3790      	adds	r7, #144	; 0x90
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	200016ec 	.word	0x200016ec
 800db48:	200016dc 	.word	0x200016dc
 800db4c:	200016f0 	.word	0x200016f0
 800db50:	20001770 	.word	0x20001770
 800db54:	e000ed04 	.word	0xe000ed04

0800db58 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08e      	sub	sp, #56	; 0x38
 800db5c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800db5e:	4b5f      	ldr	r3, [pc, #380]	; (800dcdc <_tx_thread_time_slice+0x184>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db64:	f3ef 8310 	mrs	r3, PRIMASK
 800db68:	61bb      	str	r3, [r7, #24]
    return(posture);
 800db6a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800db6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db6e:	b672      	cpsid	i
    return(int_posture);
 800db70:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800db72:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800db74:	4b5a      	ldr	r3, [pc, #360]	; (800dce0 <_tx_thread_time_slice+0x188>)
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d024      	beq.n	800dbca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db84:	2b00      	cmp	r3, #0
 800db86:	d120      	bne.n	800dbca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69d2      	ldr	r2, [r2, #28]
 800db8e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	4a53      	ldr	r2, [pc, #332]	; (800dce4 <_tx_thread_time_slice+0x18c>)
 800db96:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1a      	ldr	r2, [r3, #32]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d013      	beq.n	800dbca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d10d      	bne.n	800dbca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	6a12      	ldr	r2, [r2, #32]
 800dbb6:	494c      	ldr	r1, [pc, #304]	; (800dce8 <_tx_thread_time_slice+0x190>)
 800dbb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dbbc:	4b4b      	ldr	r3, [pc, #300]	; (800dcec <_tx_thread_time_slice+0x194>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a49      	ldr	r2, [pc, #292]	; (800dce8 <_tx_thread_time_slice+0x190>)
 800dbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbc6:	4a4a      	ldr	r2, [pc, #296]	; (800dcf0 <_tx_thread_time_slice+0x198>)
 800dbc8:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbca:	f3ef 8305 	mrs	r3, IPSR
 800dbce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800dbd0:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800dbd2:	4b48      	ldr	r3, [pc, #288]	; (800dcf4 <_tx_thread_time_slice+0x19c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800dbda:	4b47      	ldr	r3, [pc, #284]	; (800dcf8 <_tx_thread_time_slice+0x1a0>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800dbe0:	4b46      	ldr	r3, [pc, #280]	; (800dcfc <_tx_thread_time_slice+0x1a4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	623b      	str	r3, [r7, #32]
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d06d      	beq.n	800dcc8 <_tx_thread_time_slice+0x170>
 800dbec:	4b44      	ldr	r3, [pc, #272]	; (800dd00 <_tx_thread_time_slice+0x1a8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d067      	beq.n	800dcc8 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbf8:	f3ef 8305 	mrs	r3, IPSR
 800dbfc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	4b3c      	ldr	r3, [pc, #240]	; (800dcf4 <_tx_thread_time_slice+0x19c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	61fb      	str	r3, [r7, #28]
 800dc08:	4b34      	ldr	r3, [pc, #208]	; (800dcdc <_tx_thread_time_slice+0x184>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	633b      	str	r3, [r7, #48]	; 0x30
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10b      	bne.n	800dc2c <_tx_thread_time_slice+0xd4>
 800dc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1e:	041a      	lsls	r2, r3, #16
 800dc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc22:	4313      	orrs	r3, r2
 800dc24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc28:	637b      	str	r3, [r7, #52]	; 0x34
 800dc2a:	e00e      	b.n	800dc4a <_tx_thread_time_slice+0xf2>
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dc32:	d205      	bcs.n	800dc40 <_tx_thread_time_slice+0xe8>
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	637b      	str	r3, [r7, #52]	; 0x34
 800dc38:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3c:	633b      	str	r3, [r7, #48]	; 0x30
 800dc3e:	e004      	b.n	800dc4a <_tx_thread_time_slice+0xf2>
 800dc40:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800dc44:	633b      	str	r3, [r7, #48]	; 0x30
 800dc46:	2300      	movs	r3, #0
 800dc48:	637b      	str	r3, [r7, #52]	; 0x34
 800dc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	2205      	movs	r2, #5
 800dc5a:	609a      	str	r2, [r3, #8]
 800dc5c:	4b29      	ldr	r3, [pc, #164]	; (800dd04 <_tx_thread_time_slice+0x1ac>)
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	60da      	str	r2, [r3, #12]
 800dc64:	4b22      	ldr	r3, [pc, #136]	; (800dcf0 <_tx_thread_time_slice+0x198>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	611a      	str	r2, [r3, #16]
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc72:	615a      	str	r2, [r3, #20]
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc78:	619a      	str	r2, [r3, #24]
 800dc7a:	1d3a      	adds	r2, r7, #4
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	61da      	str	r2, [r3, #28]
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	3320      	adds	r3, #32
 800dc84:	623b      	str	r3, [r7, #32]
 800dc86:	4b20      	ldr	r3, [pc, #128]	; (800dd08 <_tx_thread_time_slice+0x1b0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6a3a      	ldr	r2, [r7, #32]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d314      	bcc.n	800dcba <_tx_thread_time_slice+0x162>
 800dc90:	4b1e      	ldr	r3, [pc, #120]	; (800dd0c <_tx_thread_time_slice+0x1b4>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	623b      	str	r3, [r7, #32]
 800dc96:	4a19      	ldr	r2, [pc, #100]	; (800dcfc <_tx_thread_time_slice+0x1a4>)
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <_tx_thread_time_slice+0x1b8>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6a3a      	ldr	r2, [r7, #32]
 800dca2:	621a      	str	r2, [r3, #32]
 800dca4:	4b1b      	ldr	r3, [pc, #108]	; (800dd14 <_tx_thread_time_slice+0x1bc>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00d      	beq.n	800dcc8 <_tx_thread_time_slice+0x170>
 800dcac:	4b19      	ldr	r3, [pc, #100]	; (800dd14 <_tx_thread_time_slice+0x1bc>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a17      	ldr	r2, [pc, #92]	; (800dd10 <_tx_thread_time_slice+0x1b8>)
 800dcb2:	6812      	ldr	r2, [r2, #0]
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	4798      	blx	r3
 800dcb8:	e006      	b.n	800dcc8 <_tx_thread_time_slice+0x170>
 800dcba:	4a10      	ldr	r2, [pc, #64]	; (800dcfc <_tx_thread_time_slice+0x1a4>)
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	4b13      	ldr	r3, [pc, #76]	; (800dd10 <_tx_thread_time_slice+0x1b8>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6a3a      	ldr	r2, [r7, #32]
 800dcc6:	621a      	str	r2, [r3, #32]
 800dcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	f383 8810 	msr	PRIMASK, r3
}
 800dcd2:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800dcd4:	bf00      	nop
 800dcd6:	3738      	adds	r7, #56	; 0x38
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	200016d8 	.word	0x200016d8
 800dce0:	20001780 	.word	0x20001780
 800dce4:	20001cdc 	.word	0x20001cdc
 800dce8:	200016f0 	.word	0x200016f0
 800dcec:	200016ec 	.word	0x200016ec
 800dcf0:	200016dc 	.word	0x200016dc
 800dcf4:	2000000c 	.word	0x2000000c
 800dcf8:	20001770 	.word	0x20001770
 800dcfc:	20001cf4 	.word	0x20001cf4
 800dd00:	20001cf8 	.word	0x20001cf8
 800dd04:	e0001004 	.word	0xe0001004
 800dd08:	20001cf0 	.word	0x20001cf0
 800dd0c:	20001cec 	.word	0x20001cec
 800dd10:	20001ce0 	.word	0x20001ce0
 800dd14:	20001cfc 	.word	0x20001cfc

0800dd18 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b08a      	sub	sp, #40	; 0x28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd24:	f3ef 8310 	mrs	r3, PRIMASK
 800dd28:	617b      	str	r3, [r7, #20]
    return(posture);
 800dd2a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800dd2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd2e:	b672      	cpsid	i
    return(int_posture);
 800dd30:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800dd32:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd38:	2b04      	cmp	r3, #4
 800dd3a:	d10e      	bne.n	800dd5a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800dd3c:	4b13      	ldr	r3, [pc, #76]	; (800dd8c <_tx_thread_timeout+0x74>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3301      	adds	r3, #1
 800dd42:	4a12      	ldr	r2, [pc, #72]	; (800dd8c <_tx_thread_timeout+0x74>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f383 8810 	msr	PRIMASK, r3
}
 800dd50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800dd52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd54:	f7ff fb56 	bl	800d404 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800dd58:	e013      	b.n	800dd82 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd5e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dd66:	61bb      	str	r3, [r7, #24]
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f383 8810 	msr	PRIMASK, r3
}
 800dd72:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	69b9      	ldr	r1, [r7, #24]
 800dd7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd80:	4798      	blx	r3
}
 800dd82:	bf00      	nop
 800dd84:	3728      	adds	r7, #40	; 0x28
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20001770 	.word	0x20001770

0800dd90 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd96:	f3ef 8310 	mrs	r3, PRIMASK
 800dd9a:	607b      	str	r3, [r7, #4]
    return(posture);
 800dd9c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800dd9e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dda0:	b672      	cpsid	i
    return(int_posture);
 800dda2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800dda4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800dda6:	4b09      	ldr	r3, [pc, #36]	; (800ddcc <_tx_timer_expiration_process+0x3c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	4a07      	ldr	r2, [pc, #28]	; (800ddcc <_tx_timer_expiration_process+0x3c>)
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	f383 8810 	msr	PRIMASK, r3
}
 800ddba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800ddbc:	4804      	ldr	r0, [pc, #16]	; (800ddd0 <_tx_timer_expiration_process+0x40>)
 800ddbe:	f7ff fb21 	bl	800d404 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20001770 	.word	0x20001770
 800ddd0:	20001820 	.word	0x20001820

0800ddd4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800ddd4:	b590      	push	{r4, r7, lr}
 800ddd6:	b089      	sub	sp, #36	; 0x24
 800ddd8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800ddda:	4b28      	ldr	r3, [pc, #160]	; (800de7c <_tx_timer_initialize+0xa8>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800dde0:	4b27      	ldr	r3, [pc, #156]	; (800de80 <_tx_timer_initialize+0xac>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800dde6:	4b27      	ldr	r3, [pc, #156]	; (800de84 <_tx_timer_initialize+0xb0>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800ddec:	4b26      	ldr	r3, [pc, #152]	; (800de88 <_tx_timer_initialize+0xb4>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800ddf2:	4b26      	ldr	r3, [pc, #152]	; (800de8c <_tx_timer_initialize+0xb8>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800ddf8:	2280      	movs	r2, #128	; 0x80
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4824      	ldr	r0, [pc, #144]	; (800de90 <_tx_timer_initialize+0xbc>)
 800ddfe:	f007 f841 	bl	8014e84 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800de02:	4b24      	ldr	r3, [pc, #144]	; (800de94 <_tx_timer_initialize+0xc0>)
 800de04:	4a22      	ldr	r2, [pc, #136]	; (800de90 <_tx_timer_initialize+0xbc>)
 800de06:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800de08:	4b23      	ldr	r3, [pc, #140]	; (800de98 <_tx_timer_initialize+0xc4>)
 800de0a:	4a21      	ldr	r2, [pc, #132]	; (800de90 <_tx_timer_initialize+0xbc>)
 800de0c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800de0e:	4b23      	ldr	r3, [pc, #140]	; (800de9c <_tx_timer_initialize+0xc8>)
 800de10:	4a23      	ldr	r2, [pc, #140]	; (800dea0 <_tx_timer_initialize+0xcc>)
 800de12:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800de14:	4b21      	ldr	r3, [pc, #132]	; (800de9c <_tx_timer_initialize+0xc8>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3304      	adds	r3, #4
 800de1a:	4a20      	ldr	r2, [pc, #128]	; (800de9c <_tx_timer_initialize+0xc8>)
 800de1c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800de1e:	4b21      	ldr	r3, [pc, #132]	; (800dea4 <_tx_timer_initialize+0xd0>)
 800de20:	4a21      	ldr	r2, [pc, #132]	; (800dea8 <_tx_timer_initialize+0xd4>)
 800de22:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800de24:	4b21      	ldr	r3, [pc, #132]	; (800deac <_tx_timer_initialize+0xd8>)
 800de26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de2a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800de2c:	4b20      	ldr	r3, [pc, #128]	; (800deb0 <_tx_timer_initialize+0xdc>)
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800de32:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <_tx_timer_initialize+0xd0>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a1d      	ldr	r2, [pc, #116]	; (800deac <_tx_timer_initialize+0xd8>)
 800de38:	6812      	ldr	r2, [r2, #0]
 800de3a:	491d      	ldr	r1, [pc, #116]	; (800deb0 <_tx_timer_initialize+0xdc>)
 800de3c:	6809      	ldr	r1, [r1, #0]
 800de3e:	481c      	ldr	r0, [pc, #112]	; (800deb0 <_tx_timer_initialize+0xdc>)
 800de40:	6800      	ldr	r0, [r0, #0]
 800de42:	2400      	movs	r4, #0
 800de44:	9405      	str	r4, [sp, #20]
 800de46:	2400      	movs	r4, #0
 800de48:	9404      	str	r4, [sp, #16]
 800de4a:	9003      	str	r0, [sp, #12]
 800de4c:	9102      	str	r1, [sp, #8]
 800de4e:	9201      	str	r2, [sp, #4]
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	4b18      	ldr	r3, [pc, #96]	; (800deb4 <_tx_timer_initialize+0xe0>)
 800de54:	4a18      	ldr	r2, [pc, #96]	; (800deb8 <_tx_timer_initialize+0xe4>)
 800de56:	4919      	ldr	r1, [pc, #100]	; (800debc <_tx_timer_initialize+0xe8>)
 800de58:	4819      	ldr	r0, [pc, #100]	; (800dec0 <_tx_timer_initialize+0xec>)
 800de5a:	f7fe ff8b 	bl	800cd74 <_tx_thread_create>
 800de5e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1e5      	bne.n	800de32 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800de66:	4b17      	ldr	r3, [pc, #92]	; (800dec4 <_tx_timer_initialize+0xf0>)
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800de6c:	4b16      	ldr	r3, [pc, #88]	; (800dec8 <_tx_timer_initialize+0xf4>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800de72:	bf00      	nop
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	bd90      	pop	{r4, r7, pc}
 800de7a:	bf00      	nop
 800de7c:	2000177c 	.word	0x2000177c
 800de80:	20001cdc 	.word	0x20001cdc
 800de84:	20001780 	.word	0x20001780
 800de88:	20001810 	.word	0x20001810
 800de8c:	2000181c 	.word	0x2000181c
 800de90:	20001784 	.word	0x20001784
 800de94:	20001804 	.word	0x20001804
 800de98:	2000180c 	.word	0x2000180c
 800de9c:	20001808 	.word	0x20001808
 800dea0:	20001800 	.word	0x20001800
 800dea4:	200018d0 	.word	0x200018d0
 800dea8:	200018dc 	.word	0x200018dc
 800deac:	200018d4 	.word	0x200018d4
 800deb0:	200018d8 	.word	0x200018d8
 800deb4:	4154494d 	.word	0x4154494d
 800deb8:	0800e001 	.word	0x0800e001
 800debc:	08015994 	.word	0x08015994
 800dec0:	20001820 	.word	0x20001820
 800dec4:	20001814 	.word	0x20001814
 800dec8:	20001818 	.word	0x20001818

0800decc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800decc:	b480      	push	{r7}
 800dece:	b089      	sub	sp, #36	; 0x24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d04a      	beq.n	800df76 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d046      	beq.n	800df76 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d142      	bne.n	800df76 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	2b20      	cmp	r3, #32
 800def4:	d902      	bls.n	800defc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800def6:	231f      	movs	r3, #31
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	e002      	b.n	800df02 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	3b01      	subs	r3, #1
 800df00:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800df02:	4b20      	ldr	r3, [pc, #128]	; (800df84 <_tx_timer_system_activate+0xb8>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800df0e:	4b1e      	ldr	r3, [pc, #120]	; (800df88 <_tx_timer_system_activate+0xbc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69fa      	ldr	r2, [r7, #28]
 800df14:	429a      	cmp	r2, r3
 800df16:	d30b      	bcc.n	800df30 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800df18:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <_tx_timer_system_activate+0xbc>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	69fa      	ldr	r2, [r7, #28]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	109b      	asrs	r3, r3, #2
 800df22:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800df24:	4b19      	ldr	r3, [pc, #100]	; (800df8c <_tx_timer_system_activate+0xc0>)
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d109      	bne.n	800df4c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	601a      	str	r2, [r3, #0]
 800df4a:	e011      	b.n	800df70 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800df76:	bf00      	nop
 800df78:	3724      	adds	r7, #36	; 0x24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	2000180c 	.word	0x2000180c
 800df88:	20001808 	.word	0x20001808
 800df8c:	20001804 	.word	0x20001804

0800df90 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800df90:	b480      	push	{r7}
 800df92:	b087      	sub	sp, #28
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	699b      	ldr	r3, [r3, #24]
 800df9c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d026      	beq.n	800dff2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d108      	bne.n	800dfc4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d117      	bne.n	800dfec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e013      	b.n	800dfec <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d105      	bne.n	800dfec <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	619a      	str	r2, [r3, #24]
    }
}
 800dff2:	bf00      	nop
 800dff4:	371c      	adds	r7, #28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
	...

0800e000 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b098      	sub	sp, #96	; 0x60
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e008:	2300      	movs	r3, #0
 800e00a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a73      	ldr	r2, [pc, #460]	; (800e1dc <_tx_timer_thread_entry+0x1dc>)
 800e010:	4293      	cmp	r3, r2
 800e012:	f040 80de 	bne.w	800e1d2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e016:	f3ef 8310 	mrs	r3, PRIMASK
 800e01a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800e01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800e01e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e020:	b672      	cpsid	i
    return(int_posture);
 800e022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e024:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e026:	4b6e      	ldr	r3, [pc, #440]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f107 020c 	add.w	r2, r7, #12
 800e03a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e03c:	4b68      	ldr	r3, [pc, #416]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e044:	4b66      	ldr	r3, [pc, #408]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3304      	adds	r3, #4
 800e04a:	4a65      	ldr	r2, [pc, #404]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e04c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e04e:	4b64      	ldr	r3, [pc, #400]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	4b64      	ldr	r3, [pc, #400]	; (800e1e4 <_tx_timer_thread_entry+0x1e4>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	429a      	cmp	r2, r3
 800e058:	d103      	bne.n	800e062 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e05a:	4b63      	ldr	r3, [pc, #396]	; (800e1e8 <_tx_timer_thread_entry+0x1e8>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a60      	ldr	r2, [pc, #384]	; (800e1e0 <_tx_timer_thread_entry+0x1e0>)
 800e060:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e062:	4b62      	ldr	r3, [pc, #392]	; (800e1ec <_tx_timer_thread_entry+0x1ec>)
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e06a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	f383 8810 	msr	PRIMASK, r3
}
 800e072:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e074:	f3ef 8310 	mrs	r3, PRIMASK
 800e078:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e07c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e07e:	b672      	cpsid	i
    return(int_posture);
 800e080:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e082:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e084:	e07f      	b.n	800e186 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e090:	2300      	movs	r3, #0
 800e092:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e098:	429a      	cmp	r2, r3
 800e09a:	d102      	bne.n	800e0a2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	e00e      	b.n	800e0c0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e0a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a4:	695b      	ldr	r3, [r3, #20]
 800e0a6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0ac:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0b2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0b6:	f107 020c 	add.w	r2, r7, #12
 800e0ba:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0be:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b20      	cmp	r3, #32
 800e0c6:	d911      	bls.n	800e0ec <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0da:	f107 0208 	add.w	r2, r7, #8
 800e0de:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0e4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e8:	60bb      	str	r3, [r7, #8]
 800e0ea:	e01a      	b.n	800e122 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fa:	685a      	ldr	r2, [r3, #4]
 800e0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fe:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d009      	beq.n	800e11c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e10a:	f107 0208 	add.w	r2, r7, #8
 800e10e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e114:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e118:	60bb      	str	r3, [r7, #8]
 800e11a:	e002      	b.n	800e122 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e11e:	2200      	movs	r2, #0
 800e120:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e122:	4a33      	ldr	r2, [pc, #204]	; (800e1f0 <_tx_timer_thread_entry+0x1f0>)
 800e124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e12a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	f383 8810 	msr	PRIMASK, r3
}
 800e132:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e13a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e13c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e13e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e140:	f3ef 8310 	mrs	r3, PRIMASK
 800e144:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e14a:	b672      	cpsid	i
    return(int_posture);
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e14e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e150:	4b27      	ldr	r3, [pc, #156]	; (800e1f0 <_tx_timer_thread_entry+0x1f0>)
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d105      	bne.n	800e16a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e160:	2200      	movs	r2, #0
 800e162:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e164:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e166:	f7ff feb1 	bl	800decc <_tx_timer_system_activate>
 800e16a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e16c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	f383 8810 	msr	PRIMASK, r3
}
 800e174:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e176:	f3ef 8310 	mrs	r3, PRIMASK
 800e17a:	623b      	str	r3, [r7, #32]
    return(posture);
 800e17c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e17e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e180:	b672      	cpsid	i
    return(int_posture);
 800e182:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e184:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f47f af7c 	bne.w	800e086 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e18e:	4b17      	ldr	r3, [pc, #92]	; (800e1ec <_tx_timer_thread_entry+0x1ec>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d116      	bne.n	800e1c4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e196:	4b17      	ldr	r3, [pc, #92]	; (800e1f4 <_tx_timer_thread_entry+0x1f4>)
 800e198:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e19c:	2203      	movs	r2, #3
 800e19e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e1a6:	4b14      	ldr	r3, [pc, #80]	; (800e1f8 <_tx_timer_thread_entry+0x1f8>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	4a12      	ldr	r2, [pc, #72]	; (800e1f8 <_tx_timer_thread_entry+0x1f8>)
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	f383 8810 	msr	PRIMASK, r3
}
 800e1ba:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e1bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e1be:	f7ff fadb 	bl	800d778 <_tx_thread_system_suspend>
 800e1c2:	e728      	b.n	800e016 <_tx_timer_thread_entry+0x16>
 800e1c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	f383 8810 	msr	PRIMASK, r3
}
 800e1ce:	bf00      	nop
            TX_DISABLE
 800e1d0:	e721      	b.n	800e016 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e1d2:	bf00      	nop
 800e1d4:	3760      	adds	r7, #96	; 0x60
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	4154494d 	.word	0x4154494d
 800e1e0:	2000180c 	.word	0x2000180c
 800e1e4:	20001808 	.word	0x20001808
 800e1e8:	20001804 	.word	0x20001804
 800e1ec:	20001810 	.word	0x20001810
 800e1f0:	2000181c 	.word	0x2000181c
 800e1f4:	20001820 	.word	0x20001820
 800e1f8:	20001770 	.word	0x20001770

0800e1fc <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <_tx_trace_initialize+0x34>)
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800e206:	4b0b      	ldr	r3, [pc, #44]	; (800e234 <_tx_trace_initialize+0x38>)
 800e208:	2200      	movs	r2, #0
 800e20a:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800e20c:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <_tx_trace_initialize+0x3c>)
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800e212:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <_tx_trace_initialize+0x40>)
 800e214:	2200      	movs	r2, #0
 800e216:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800e218:	4b09      	ldr	r3, [pc, #36]	; (800e240 <_tx_trace_initialize+0x44>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800e21e:	4b09      	ldr	r3, [pc, #36]	; (800e244 <_tx_trace_initialize+0x48>)
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800e224:	bf00      	nop
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	20001ce0 	.word	0x20001ce0
 800e234:	20001ce4 	.word	0x20001ce4
 800e238:	20001ce8 	.word	0x20001ce8
 800e23c:	20001cec 	.word	0x20001cec
 800e240:	20001cf0 	.word	0x20001cf0
 800e244:	20001cf4 	.word	0x20001cf4

0800e248 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800e248:	b480      	push	{r7}
 800e24a:	b08d      	sub	sp, #52	; 0x34
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60b9      	str	r1, [r7, #8]
 800e250:	607a      	str	r2, [r7, #4]
 800e252:	603b      	str	r3, [r7, #0]
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800e258:	4b6f      	ldr	r3, [pc, #444]	; (800e418 <_tx_trace_object_register+0x1d0>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 80d5 	beq.w	800e40c <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800e262:	4b6e      	ldr	r3, [pc, #440]	; (800e41c <_tx_trace_object_register+0x1d4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800e268:	4b6d      	ldr	r3, [pc, #436]	; (800e420 <_tx_trace_object_register+0x1d8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 80cd 	beq.w	800e40c <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800e276:	2300      	movs	r3, #0
 800e278:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800e27a:	4b6a      	ldr	r3, [pc, #424]	; (800e424 <_tx_trace_object_register+0x1dc>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e280:	4b65      	ldr	r3, [pc, #404]	; (800e418 <_tx_trace_object_register+0x1d0>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800e286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e288:	4613      	mov	r3, r2
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	4413      	add	r3, r2
 800e28e:	011b      	lsls	r3, r3, #4
 800e290:	461a      	mov	r2, r3
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	4413      	add	r3, r2
 800e296:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d103      	bne.n	800e2ac <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d103      	bne.n	800e2be <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b8:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800e2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d02d      	beq.n	800e320 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d11a      	bne.n	800e302 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800e2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d102      	bne.n	800e2da <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2d8:	e013      	b.n	800e302 <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e2da:	4b4f      	ldr	r3, [pc, #316]	; (800e418 <_tx_trace_object_register+0x1d0>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e2e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	011b      	lsls	r3, r3, #4
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	785b      	ldrb	r3, [r3, #1]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	3301      	adds	r3, #1
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800e308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d301      	bcc.n	800e314 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800e310:	2300      	movs	r3, #0
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800e314:	4b43      	ldr	r3, [pc, #268]	; (800e424 <_tx_trace_object_register+0x1dc>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d1b0      	bne.n	800e280 <_tx_trace_object_register+0x38>
 800e31e:	e000      	b.n	800e322 <_tx_trace_object_register+0xda>
                    break;
 800e320:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800e322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	429a      	cmp	r2, r3
 800e328:	d270      	bcs.n	800e40c <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800e32a:	4b3d      	ldr	r3, [pc, #244]	; (800e420 <_tx_trace_object_register+0x1d8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	3b01      	subs	r3, #1
 800e330:	4a3b      	ldr	r2, [pc, #236]	; (800e420 <_tx_trace_object_register+0x1d8>)
 800e332:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	3301      	adds	r3, #1
 800e338:	6a3a      	ldr	r2, [r7, #32]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d904      	bls.n	800e348 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	3301      	adds	r3, #1
 800e342:	4a38      	ldr	r2, [pc, #224]	; (800e424 <_tx_trace_object_register+0x1dc>)
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	e002      	b.n	800e34e <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800e348:	4b36      	ldr	r3, [pc, #216]	; (800e424 <_tx_trace_object_register+0x1dc>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e34e:	4b32      	ldr	r3, [pc, #200]	; (800e418 <_tx_trace_object_register+0x1d0>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e356:	4613      	mov	r3, r2
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	4413      	add	r3, r2
 800e35c:	011b      	lsls	r3, r3, #4
 800e35e:	461a      	mov	r2, r3
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	4413      	add	r3, r2
 800e364:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	7bfa      	ldrb	r2, [r7, #15]
 800e374:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e386:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e388:	2300      	movs	r3, #0
 800e38a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e38c:	e017      	b.n	800e3be <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	4413      	add	r3, r2
 800e398:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d012      	beq.n	800e3c6 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	7819      	ldrb	r1, [r3, #0]
 800e3a4:	69ba      	ldr	r2, [r7, #24]
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	4413      	add	r3, r2
 800e3aa:	3310      	adds	r3, #16
 800e3ac:	460a      	mov	r2, r1
 800e3ae:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d008      	beq.n	800e3ca <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	2b1e      	cmp	r3, #30
 800e3c2:	d9e4      	bls.n	800e38e <_tx_trace_object_register+0x146>
 800e3c4:	e002      	b.n	800e3cc <_tx_trace_object_register+0x184>
                        break;
 800e3c6:	bf00      	nop
 800e3c8:	e000      	b.n	800e3cc <_tx_trace_object_register+0x184>
                    {
                        break;
 800e3ca:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	4413      	add	r3, r2
 800e3d2:	3310      	adds	r3, #16
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d110      	bne.n	800e400 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e6:	0a1b      	lsrs	r3, r3, #8
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e3fe:	e005      	b.n	800e40c <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	2200      	movs	r2, #0
 800e404:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	2200      	movs	r2, #0
 800e40a:	70da      	strb	r2, [r3, #3]
}
 800e40c:	bf00      	nop
 800e40e:	3734      	adds	r7, #52	; 0x34
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	20001ce4 	.word	0x20001ce4
 800e41c:	20001d00 	.word	0x20001d00
 800e420:	20001d04 	.word	0x20001d04
 800e424:	20001d08 	.word	0x20001d08

0800e428 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b092      	sub	sp, #72	; 0x48
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e436:	2300      	movs	r3, #0
 800e438:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e440:	2302      	movs	r3, #2
 800e442:	647b      	str	r3, [r7, #68]	; 0x44
 800e444:	e075      	b.n	800e532 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e448:	2b34      	cmp	r3, #52	; 0x34
 800e44a:	d002      	beq.n	800e452 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e44c:	2302      	movs	r3, #2
 800e44e:	647b      	str	r3, [r7, #68]	; 0x44
 800e450:	e06f      	b.n	800e532 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e452:	f3ef 8310 	mrs	r3, PRIMASK
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e45a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e45c:	b672      	cpsid	i
    return(int_posture);
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e460:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e462:	4b3b      	ldr	r3, [pc, #236]	; (800e550 <_txe_byte_pool_create+0x128>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3301      	adds	r3, #1
 800e468:	4a39      	ldr	r2, [pc, #228]	; (800e550 <_txe_byte_pool_create+0x128>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e472:	f383 8810 	msr	PRIMASK, r3
}
 800e476:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e478:	4b36      	ldr	r3, [pc, #216]	; (800e554 <_txe_byte_pool_create+0x12c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e47e:	2300      	movs	r3, #0
 800e480:	643b      	str	r3, [r7, #64]	; 0x40
 800e482:	e009      	b.n	800e498 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e488:	429a      	cmp	r2, r3
 800e48a:	d00b      	beq.n	800e4a4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e490:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e494:	3301      	adds	r3, #1
 800e496:	643b      	str	r3, [r7, #64]	; 0x40
 800e498:	4b2f      	ldr	r3, [pc, #188]	; (800e558 <_txe_byte_pool_create+0x130>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d3f0      	bcc.n	800e484 <_txe_byte_pool_create+0x5c>
 800e4a2:	e000      	b.n	800e4a6 <_txe_byte_pool_create+0x7e>
                break;
 800e4a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e4aa:	623b      	str	r3, [r7, #32]
    return(posture);
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e4ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e4b0:	b672      	cpsid	i
    return(int_posture);
 800e4b2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e4b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e4b6:	4b26      	ldr	r3, [pc, #152]	; (800e550 <_txe_byte_pool_create+0x128>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	4a24      	ldr	r2, [pc, #144]	; (800e550 <_txe_byte_pool_create+0x128>)
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	f383 8810 	msr	PRIMASK, r3
}
 800e4ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e4cc:	f7fe ff60 	bl	800d390 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d102      	bne.n	800e4de <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e4d8:	2302      	movs	r3, #2
 800e4da:	647b      	str	r3, [r7, #68]	; 0x44
 800e4dc:	e029      	b.n	800e532 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d102      	bne.n	800e4ea <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e4e8:	e023      	b.n	800e532 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b63      	cmp	r3, #99	; 0x63
 800e4ee:	d802      	bhi.n	800e4f6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e4f0:	2305      	movs	r3, #5
 800e4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4f4:	e01d      	b.n	800e532 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e4f6:	4b19      	ldr	r3, [pc, #100]	; (800e55c <_txe_byte_pool_create+0x134>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fe:	4a18      	ldr	r2, [pc, #96]	; (800e560 <_txe_byte_pool_create+0x138>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d101      	bne.n	800e508 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e504:	2313      	movs	r3, #19
 800e506:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e508:	f3ef 8305 	mrs	r3, IPSR
 800e50c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e50e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e510:	4b14      	ldr	r3, [pc, #80]	; (800e564 <_txe_byte_pool_create+0x13c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4313      	orrs	r3, r2
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e51a:	f3ef 8305 	mrs	r3, IPSR
 800e51e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e520:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e522:	4b10      	ldr	r3, [pc, #64]	; (800e564 <_txe_byte_pool_create+0x13c>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4313      	orrs	r3, r2
 800e528:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e52c:	d201      	bcs.n	800e532 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e52e:	2313      	movs	r3, #19
 800e530:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7fd f88a 	bl	800b658 <_tx_byte_pool_create>
 800e544:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3748      	adds	r7, #72	; 0x48
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20001770 	.word	0x20001770
 800e554:	200016c8 	.word	0x200016c8
 800e558:	200016cc 	.word	0x200016cc
 800e55c:	200016d8 	.word	0x200016d8
 800e560:	20001820 	.word	0x20001820
 800e564:	2000000c 	.word	0x2000000c

0800e568 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b094      	sub	sp, #80	; 0x50
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
 800e574:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e576:	2300      	movs	r3, #0
 800e578:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d102      	bne.n	800e586 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e580:	2309      	movs	r3, #9
 800e582:	647b      	str	r3, [r7, #68]	; 0x44
 800e584:	e083      	b.n	800e68e <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e588:	2b38      	cmp	r3, #56	; 0x38
 800e58a:	d002      	beq.n	800e592 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e58c:	2309      	movs	r3, #9
 800e58e:	647b      	str	r3, [r7, #68]	; 0x44
 800e590:	e07d      	b.n	800e68e <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e592:	f3ef 8310 	mrs	r3, PRIMASK
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e59a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e59c:	b672      	cpsid	i
    return(int_posture);
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e5a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e5a2:	4b43      	ldr	r3, [pc, #268]	; (800e6b0 <_txe_queue_create+0x148>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	4a41      	ldr	r2, [pc, #260]	; (800e6b0 <_txe_queue_create+0x148>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b2:	f383 8810 	msr	PRIMASK, r3
}
 800e5b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e5b8:	4b3e      	ldr	r3, [pc, #248]	; (800e6b4 <_txe_queue_create+0x14c>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e5be:	2300      	movs	r3, #0
 800e5c0:	643b      	str	r3, [r7, #64]	; 0x40
 800e5c2:	e009      	b.n	800e5d8 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d00b      	beq.n	800e5e4 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5d8:	4b37      	ldr	r3, [pc, #220]	; (800e6b8 <_txe_queue_create+0x150>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d3f0      	bcc.n	800e5c4 <_txe_queue_create+0x5c>
 800e5e2:	e000      	b.n	800e5e6 <_txe_queue_create+0x7e>
                break;
 800e5e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e5ea:	623b      	str	r3, [r7, #32]
    return(posture);
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e5ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5f0:	b672      	cpsid	i
    return(int_posture);
 800e5f2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5f4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5f6:	4b2e      	ldr	r3, [pc, #184]	; (800e6b0 <_txe_queue_create+0x148>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	4a2c      	ldr	r2, [pc, #176]	; (800e6b0 <_txe_queue_create+0x148>)
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e606:	f383 8810 	msr	PRIMASK, r3
}
 800e60a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e60c:	f7fe fec0 	bl	800d390 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e614:	429a      	cmp	r2, r3
 800e616:	d102      	bne.n	800e61e <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e618:	2309      	movs	r3, #9
 800e61a:	647b      	str	r3, [r7, #68]	; 0x44
 800e61c:	e037      	b.n	800e68e <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d102      	bne.n	800e62a <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e624:	2303      	movs	r3, #3
 800e626:	647b      	str	r3, [r7, #68]	; 0x44
 800e628:	e031      	b.n	800e68e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d102      	bne.n	800e636 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e630:	2305      	movs	r3, #5
 800e632:	647b      	str	r3, [r7, #68]	; 0x44
 800e634:	e02b      	b.n	800e68e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b10      	cmp	r3, #16
 800e63a:	d902      	bls.n	800e642 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e63c:	2305      	movs	r3, #5
 800e63e:	647b      	str	r3, [r7, #68]	; 0x44
 800e640:	e025      	b.n	800e68e <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e644:	089b      	lsrs	r3, r3, #2
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d902      	bls.n	800e652 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e64c:	2305      	movs	r3, #5
 800e64e:	647b      	str	r3, [r7, #68]	; 0x44
 800e650:	e01d      	b.n	800e68e <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e652:	4b1a      	ldr	r3, [pc, #104]	; (800e6bc <_txe_queue_create+0x154>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65a:	4a19      	ldr	r2, [pc, #100]	; (800e6c0 <_txe_queue_create+0x158>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d101      	bne.n	800e664 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e660:	2313      	movs	r3, #19
 800e662:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e664:	f3ef 8305 	mrs	r3, IPSR
 800e668:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e66a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e66c:	4b15      	ldr	r3, [pc, #84]	; (800e6c4 <_txe_queue_create+0x15c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4313      	orrs	r3, r2
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00b      	beq.n	800e68e <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e676:	f3ef 8305 	mrs	r3, IPSR
 800e67a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e67c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e67e:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <_txe_queue_create+0x15c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4313      	orrs	r3, r2
 800e684:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e688:	d201      	bcs.n	800e68e <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e68a:	2313      	movs	r3, #19
 800e68c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e690:	2b00      	cmp	r3, #0
 800e692:	d108      	bne.n	800e6a6 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7fd f9f2 	bl	800ba88 <_tx_queue_create>
 800e6a4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3748      	adds	r7, #72	; 0x48
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20001770 	.word	0x20001770
 800e6b4:	200016a8 	.word	0x200016a8
 800e6b8:	200016ac 	.word	0x200016ac
 800e6bc:	200016d8 	.word	0x200016d8
 800e6c0:	20001820 	.word	0x20001820
 800e6c4:	2000000c 	.word	0x2000000c

0800e6c8 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d102      	bne.n	800e6dc <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6d6:	2309      	movs	r3, #9
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e00b      	b.n	800e6f4 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a07      	ldr	r2, [pc, #28]	; (800e700 <_txe_queue_flush+0x38>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d002      	beq.n	800e6ec <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6e6:	2309      	movs	r3, #9
 800e6e8:	60fb      	str	r3, [r7, #12]
 800e6ea:	e003      	b.n	800e6f4 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7fd facb 	bl	800bc88 <_tx_queue_flush>
 800e6f2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	51554555 	.word	0x51554555

0800e704 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e710:	2300      	movs	r3, #0
 800e712:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d102      	bne.n	800e720 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e71a:	2309      	movs	r3, #9
 800e71c:	61fb      	str	r3, [r7, #28]
 800e71e:	e025      	b.n	800e76c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a18      	ldr	r2, [pc, #96]	; (800e788 <_txe_queue_receive+0x84>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d002      	beq.n	800e730 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e72a:	2309      	movs	r3, #9
 800e72c:	61fb      	str	r3, [r7, #28]
 800e72e:	e01d      	b.n	800e76c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e736:	2303      	movs	r3, #3
 800e738:	61fb      	str	r3, [r7, #28]
 800e73a:	e017      	b.n	800e76c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d014      	beq.n	800e76c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e742:	f3ef 8305 	mrs	r3, IPSR
 800e746:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e748:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e74a:	4b10      	ldr	r3, [pc, #64]	; (800e78c <_txe_queue_receive+0x88>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4313      	orrs	r3, r2
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e754:	2304      	movs	r3, #4
 800e756:	61fb      	str	r3, [r7, #28]
 800e758:	e008      	b.n	800e76c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e75a:	4b0d      	ldr	r3, [pc, #52]	; (800e790 <_txe_queue_receive+0x8c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	4a0c      	ldr	r2, [pc, #48]	; (800e794 <_txe_queue_receive+0x90>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d101      	bne.n	800e76c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e768:	2304      	movs	r3, #4
 800e76a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d105      	bne.n	800e77e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7fd fb98 	bl	800beac <_tx_queue_receive>
 800e77c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e77e:	69fb      	ldr	r3, [r7, #28]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3720      	adds	r7, #32
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	51554555 	.word	0x51554555
 800e78c:	2000000c 	.word	0x2000000c
 800e790:	200016d8 	.word	0x200016d8
 800e794:	20001820 	.word	0x20001820

0800e798 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b088      	sub	sp, #32
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d102      	bne.n	800e7b4 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e7ae:	2309      	movs	r3, #9
 800e7b0:	61fb      	str	r3, [r7, #28]
 800e7b2:	e025      	b.n	800e800 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a18      	ldr	r2, [pc, #96]	; (800e81c <_txe_queue_send+0x84>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d002      	beq.n	800e7c4 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e7be:	2309      	movs	r3, #9
 800e7c0:	61fb      	str	r3, [r7, #28]
 800e7c2:	e01d      	b.n	800e800 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d102      	bne.n	800e7d0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	61fb      	str	r3, [r7, #28]
 800e7ce:	e017      	b.n	800e800 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d014      	beq.n	800e800 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7d6:	f3ef 8305 	mrs	r3, IPSR
 800e7da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e7dc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e7de:	4b10      	ldr	r3, [pc, #64]	; (800e820 <_txe_queue_send+0x88>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e7e8:	2304      	movs	r3, #4
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	e008      	b.n	800e800 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e7ee:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <_txe_queue_send+0x8c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	4a0c      	ldr	r2, [pc, #48]	; (800e828 <_txe_queue_send+0x90>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d101      	bne.n	800e800 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e7fc:	2304      	movs	r3, #4
 800e7fe:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d105      	bne.n	800e812 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	68b9      	ldr	r1, [r7, #8]
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f7fd fd9c 	bl	800c348 <_tx_queue_send>
 800e810:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e812:	69fb      	ldr	r3, [r7, #28]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3720      	adds	r7, #32
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	51554555 	.word	0x51554555
 800e820:	2000000c 	.word	0x2000000c
 800e824:	200016d8 	.word	0x200016d8
 800e828:	20001820 	.word	0x20001820

0800e82c <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e83c:	230c      	movs	r3, #12
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e012      	b.n	800e868 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a0b      	ldr	r2, [pc, #44]	; (800e874 <_txe_semaphore_ceiling_put+0x48>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d002      	beq.n	800e852 <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e84c:	230c      	movs	r3, #12
 800e84e:	60fb      	str	r3, [r7, #12]
 800e850:	e00a      	b.n	800e868 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e858:	2322      	movs	r3, #34	; 0x22
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e004      	b.n	800e868 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fd ff23 	bl	800c6ac <_tx_semaphore_ceiling_put>
 800e866:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e868:	68fb      	ldr	r3, [r7, #12]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	53454d41 	.word	0x53454d41

0800e878 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b092      	sub	sp, #72	; 0x48
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e886:	2300      	movs	r3, #0
 800e888:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e890:	230c      	movs	r3, #12
 800e892:	647b      	str	r3, [r7, #68]	; 0x44
 800e894:	e054      	b.n	800e940 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b1c      	cmp	r3, #28
 800e89a:	d002      	beq.n	800e8a2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e89c:	230c      	movs	r3, #12
 800e89e:	647b      	str	r3, [r7, #68]	; 0x44
 800e8a0:	e04e      	b.n	800e940 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e8aa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8ac:	b672      	cpsid	i
    return(int_posture);
 800e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e8b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e8b2:	4b36      	ldr	r3, [pc, #216]	; (800e98c <_txe_semaphore_create+0x114>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	4a34      	ldr	r2, [pc, #208]	; (800e98c <_txe_semaphore_create+0x114>)
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8be:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	f383 8810 	msr	PRIMASK, r3
}
 800e8c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e8c8:	4b31      	ldr	r3, [pc, #196]	; (800e990 <_txe_semaphore_create+0x118>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	643b      	str	r3, [r7, #64]	; 0x40
 800e8d2:	e009      	b.n	800e8e8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d00b      	beq.n	800e8f4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e8:	4b2a      	ldr	r3, [pc, #168]	; (800e994 <_txe_semaphore_create+0x11c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d3f0      	bcc.n	800e8d4 <_txe_semaphore_create+0x5c>
 800e8f2:	e000      	b.n	800e8f6 <_txe_semaphore_create+0x7e>
                break;
 800e8f4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8fa:	623b      	str	r3, [r7, #32]
    return(posture);
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e8fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e900:	b672      	cpsid	i
    return(int_posture);
 800e902:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e904:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e906:	4b21      	ldr	r3, [pc, #132]	; (800e98c <_txe_semaphore_create+0x114>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	4a1f      	ldr	r2, [pc, #124]	; (800e98c <_txe_semaphore_create+0x114>)
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	f383 8810 	msr	PRIMASK, r3
}
 800e91a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e91c:	f7fe fd38 	bl	800d390 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e924:	429a      	cmp	r2, r3
 800e926:	d102      	bne.n	800e92e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e928:	230c      	movs	r3, #12
 800e92a:	647b      	str	r3, [r7, #68]	; 0x44
 800e92c:	e008      	b.n	800e940 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e92e:	4b1a      	ldr	r3, [pc, #104]	; (800e998 <_txe_semaphore_create+0x120>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e936:	4a19      	ldr	r2, [pc, #100]	; (800e99c <_txe_semaphore_create+0x124>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d101      	bne.n	800e940 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e93c:	2313      	movs	r3, #19
 800e93e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e942:	2b00      	cmp	r3, #0
 800e944:	d114      	bne.n	800e970 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e946:	f3ef 8305 	mrs	r3, IPSR
 800e94a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e94c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e94e:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <_txe_semaphore_create+0x128>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4313      	orrs	r3, r2
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00b      	beq.n	800e970 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e958:	f3ef 8305 	mrs	r3, IPSR
 800e95c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e95e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e960:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <_txe_semaphore_create+0x128>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4313      	orrs	r3, r2
 800e966:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e96a:	d201      	bcs.n	800e970 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e96c:	2313      	movs	r3, #19
 800e96e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e972:	2b00      	cmp	r3, #0
 800e974:	d105      	bne.n	800e982 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	68b9      	ldr	r1, [r7, #8]
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f7fe f804 	bl	800c988 <_tx_semaphore_create>
 800e980:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e984:	4618      	mov	r0, r3
 800e986:	3748      	adds	r7, #72	; 0x48
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20001770 	.word	0x20001770
 800e990:	200016a0 	.word	0x200016a0
 800e994:	200016a4 	.word	0x200016a4
 800e998:	200016d8 	.word	0x200016d8
 800e99c:	20001820 	.word	0x20001820
 800e9a0:	2000000c 	.word	0x2000000c

0800e9a4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e9b8:	230c      	movs	r3, #12
 800e9ba:	617b      	str	r3, [r7, #20]
 800e9bc:	e01f      	b.n	800e9fe <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a15      	ldr	r2, [pc, #84]	; (800ea18 <_txe_semaphore_get+0x74>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d002      	beq.n	800e9ce <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e9c8:	230c      	movs	r3, #12
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e017      	b.n	800e9fe <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d014      	beq.n	800e9fe <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9d4:	f3ef 8305 	mrs	r3, IPSR
 800e9d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e9da:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <_txe_semaphore_get+0x78>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e9e6:	2304      	movs	r3, #4
 800e9e8:	617b      	str	r3, [r7, #20]
 800e9ea:	e008      	b.n	800e9fe <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <_txe_semaphore_get+0x7c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	4a0b      	ldr	r2, [pc, #44]	; (800ea24 <_txe_semaphore_get+0x80>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d101      	bne.n	800e9fe <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e9fa:	2304      	movs	r3, #4
 800e9fc:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d104      	bne.n	800ea0e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7fe f89e 	bl	800cb48 <_tx_semaphore_get>
 800ea0c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800ea0e:	697b      	ldr	r3, [r7, #20]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3718      	adds	r7, #24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	53454d41 	.word	0x53454d41
 800ea1c:	2000000c 	.word	0x2000000c
 800ea20:	200016d8 	.word	0x200016d8
 800ea24:	20001820 	.word	0x20001820

0800ea28 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b09a      	sub	sp, #104	; 0x68
 800ea2c:	af06      	add	r7, sp, #24
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ea36:	2300      	movs	r3, #0
 800ea38:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ea40:	230e      	movs	r3, #14
 800ea42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea44:	e0bb      	b.n	800ebbe <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800ea46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea48:	2bb0      	cmp	r3, #176	; 0xb0
 800ea4a:	d002      	beq.n	800ea52 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ea4c:	230e      	movs	r3, #14
 800ea4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea50:	e0b5      	b.n	800ebbe <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea52:	f3ef 8310 	mrs	r3, PRIMASK
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ea5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea5c:	b672      	cpsid	i
    return(int_posture);
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ea60:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ea62:	4b64      	ldr	r3, [pc, #400]	; (800ebf4 <_txe_thread_create+0x1cc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	3301      	adds	r3, #1
 800ea68:	4a62      	ldr	r2, [pc, #392]	; (800ebf4 <_txe_thread_create+0x1cc>)
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea72:	f383 8810 	msr	PRIMASK, r3
}
 800ea76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800ea7c:	4b5e      	ldr	r3, [pc, #376]	; (800ebf8 <_txe_thread_create+0x1d0>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ea82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea84:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800ea86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea8c:	4413      	add	r3, r2
 800ea8e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800ea90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea92:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800ea94:	2300      	movs	r3, #0
 800ea96:	647b      	str	r3, [r7, #68]	; 0x44
 800ea98:	e02b      	b.n	800eaf2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d101      	bne.n	800eaa6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800eaa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d028      	beq.n	800eafe <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800eaac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d308      	bcc.n	800eac8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800eab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d203      	bcs.n	800eac8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800eac4:	2301      	movs	r3, #1
 800eac6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800eac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eace:	429a      	cmp	r2, r3
 800ead0:	d308      	bcc.n	800eae4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800ead2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ead8:	429a      	cmp	r2, r3
 800eada:	d203      	bcs.n	800eae4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800eadc:	2300      	movs	r3, #0
 800eade:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800eae0:	2301      	movs	r3, #1
 800eae2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800eae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaea:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800eaec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaee:	3301      	adds	r3, #1
 800eaf0:	647b      	str	r3, [r7, #68]	; 0x44
 800eaf2:	4b42      	ldr	r3, [pc, #264]	; (800ebfc <_txe_thread_create+0x1d4>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d3ce      	bcc.n	800ea9a <_txe_thread_create+0x72>
 800eafc:	e000      	b.n	800eb00 <_txe_thread_create+0xd8>
                break;
 800eafe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb00:	f3ef 8310 	mrs	r3, PRIMASK
 800eb04:	61fb      	str	r3, [r7, #28]
    return(posture);
 800eb06:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800eb08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb0a:	b672      	cpsid	i
    return(int_posture);
 800eb0c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800eb0e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800eb10:	4b38      	ldr	r3, [pc, #224]	; (800ebf4 <_txe_thread_create+0x1cc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	4a37      	ldr	r2, [pc, #220]	; (800ebf4 <_txe_thread_create+0x1cc>)
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb1c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb1e:	6a3b      	ldr	r3, [r7, #32]
 800eb20:	f383 8810 	msr	PRIMASK, r3
}
 800eb24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800eb26:	f7fe fc33 	bl	800d390 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d102      	bne.n	800eb38 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800eb32:	230e      	movs	r3, #14
 800eb34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb36:	e042      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800eb38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb42:	e03c      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d102      	bne.n	800eb50 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb4e:	e036      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800eb50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb52:	2bc7      	cmp	r3, #199	; 0xc7
 800eb54:	d802      	bhi.n	800eb5c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800eb56:	2305      	movs	r3, #5
 800eb58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb5a:	e030      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800eb5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb5e:	2b1f      	cmp	r3, #31
 800eb60:	d902      	bls.n	800eb68 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800eb62:	230f      	movs	r3, #15
 800eb64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb66:	e02a      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800eb68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eb6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d902      	bls.n	800eb76 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800eb70:	2318      	movs	r3, #24
 800eb72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb74:	e023      	b.n	800ebbe <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800eb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d902      	bls.n	800eb82 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800eb7c:	2310      	movs	r3, #16
 800eb7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb80:	e01d      	b.n	800ebbe <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800eb82:	4b1f      	ldr	r3, [pc, #124]	; (800ec00 <_txe_thread_create+0x1d8>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800eb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8a:	4a1e      	ldr	r2, [pc, #120]	; (800ec04 <_txe_thread_create+0x1dc>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d101      	bne.n	800eb94 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800eb90:	2313      	movs	r3, #19
 800eb92:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eb94:	f3ef 8305 	mrs	r3, IPSR
 800eb98:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800eb9a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800eb9c:	4b1a      	ldr	r3, [pc, #104]	; (800ec08 <_txe_thread_create+0x1e0>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00b      	beq.n	800ebbe <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eba6:	f3ef 8305 	mrs	r3, IPSR
 800ebaa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ebac:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ebae:	4b16      	ldr	r3, [pc, #88]	; (800ec08 <_txe_thread_create+0x1e0>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ebb8:	d201      	bcs.n	800ebbe <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ebba:	2313      	movs	r3, #19
 800ebbc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ebbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d112      	bne.n	800ebea <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ebc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebc6:	9305      	str	r3, [sp, #20]
 800ebc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebca:	9304      	str	r3, [sp, #16]
 800ebcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebce:	9303      	str	r3, [sp, #12]
 800ebd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ebd2:	9302      	str	r3, [sp, #8]
 800ebd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f7fe f8c6 	bl	800cd74 <_tx_thread_create>
 800ebe8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ebea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3750      	adds	r7, #80	; 0x50
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20001770 	.word	0x20001770
 800ebf8:	200016e0 	.word	0x200016e0
 800ebfc:	200016e4 	.word	0x200016e4
 800ec00:	200016d8 	.word	0x200016d8
 800ec04:	20001820 	.word	0x20001820
 800ec08:	2000000c 	.word	0x2000000c

0800ec0c <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec12:	f3ef 8310 	mrs	r3, PRIMASK
 800ec16:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ec18:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ec1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec1c:	b672      	cpsid	i
    return(int_posture);
 800ec1e:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800ec20:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800ec22:	463b      	mov	r3, r7
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 f835 	bl	800ec94 <tx_timer_get_next>
 800ec2a:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d103      	bne.n	800ec3a <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f1 fe6b 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800ec3a:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <tx_low_power_enter+0x4c>)
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f383 8810 	msr	PRIMASK, r3
}
 800ec4a:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800ec4c:	f7f1 fe94 	bl	8000978 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800ec50:	bf00      	nop
 800ec52:	3718      	adds	r7, #24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	20001d0c 	.word	0x20001d0c

0800ec5c <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800ec62:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <tx_low_power_exit+0x34>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00d      	beq.n	800ec86 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800ec6a:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <tx_low_power_exit+0x34>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800ec70:	f7f1 fe90 	bl	8000994 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800ec74:	f7f1 feec 	bl	8000a50 <App_ThreadX_LowPower_Timer_Adjust>
 800ec78:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f86f 	bl	800ed64 <tx_time_increment>
        }
    }
}
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	20001d0c 	.word	0x20001d0c

0800ec94 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b08d      	sub	sp, #52	; 0x34
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800ec9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eca0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eca2:	f3ef 8310 	mrs	r3, PRIMASK
 800eca6:	617b      	str	r3, [r7, #20]
    return(posture);
 800eca8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ecaa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ecac:	b672      	cpsid	i
    return(int_posture);
 800ecae:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800ecb0:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800ecb2:	4b29      	ldr	r3, [pc, #164]	; (800ed58 <tx_timer_get_next+0xc4>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ecb8:	2300      	movs	r3, #0
 800ecba:	627b      	str	r3, [r7, #36]	; 0x24
 800ecbc:	e02f      	b.n	800ed1e <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d01d      	beq.n	800ed02 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b20      	cmp	r3, #32
 800ecd2:	d906      	bls.n	800ece2 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecda:	4413      	add	r3, r2
 800ecdc:	3b20      	subs	r3, #32
 800ecde:	623b      	str	r3, [r7, #32]
 800ece0:	e001      	b.n	800ece6 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800ece6:	69fa      	ldr	r2, [r7, #28]
 800ece8:	6a3b      	ldr	r3, [r7, #32]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d901      	bls.n	800ecf2 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800ecee:	6a3b      	ldr	r3, [r7, #32]
 800ecf0:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800ecf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d1e4      	bne.n	800eccc <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800ed02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed04:	3304      	adds	r3, #4
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ed08:	4b14      	ldr	r3, [pc, #80]	; (800ed5c <tx_timer_get_next+0xc8>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d302      	bcc.n	800ed18 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ed12:	4b13      	ldr	r3, [pc, #76]	; (800ed60 <tx_timer_get_next+0xcc>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	2b1f      	cmp	r3, #31
 800ed22:	d9cc      	bls.n	800ecbe <tx_timer_get_next+0x2a>
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f383 8810 	msr	PRIMASK, r3
}
 800ed2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed36:	d004      	beq.n	800ed42 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	69fa      	ldr	r2, [r7, #28]
 800ed3c:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e003      	b.n	800ed4a <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800ed48:	2300      	movs	r3, #0
    }
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3734      	adds	r7, #52	; 0x34
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	2000180c 	.word	0x2000180c
 800ed5c:	20001808 	.word	0x20001808
 800ed60:	20001804 	.word	0x20001804

0800ed64 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08a      	sub	sp, #40	; 0x28
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 809b 	beq.w	800eeaa <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed74:	f3ef 8310 	mrs	r3, PRIMASK
 800ed78:	613b      	str	r3, [r7, #16]
    return(posture);
 800ed7a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ed7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed7e:	b672      	cpsid	i
    return(int_posture);
 800ed80:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ed82:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800ed84:	4b4b      	ldr	r3, [pc, #300]	; (800eeb4 <tx_time_increment+0x150>)
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	4a49      	ldr	r2, [pc, #292]	; (800eeb4 <tx_time_increment+0x150>)
 800ed8e:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800ed90:	4b49      	ldr	r3, [pc, #292]	; (800eeb8 <tx_time_increment+0x154>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00e      	beq.n	800edb6 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800ed98:	4b47      	ldr	r3, [pc, #284]	; (800eeb8 <tx_time_increment+0x154>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d206      	bcs.n	800edb0 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800eda2:	4b45      	ldr	r3, [pc, #276]	; (800eeb8 <tx_time_increment+0x154>)
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	4a43      	ldr	r2, [pc, #268]	; (800eeb8 <tx_time_increment+0x154>)
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	e002      	b.n	800edb6 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800edb0:	4b41      	ldr	r3, [pc, #260]	; (800eeb8 <tx_time_increment+0x154>)
 800edb2:	2201      	movs	r2, #1
 800edb4:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800edb6:	4b41      	ldr	r3, [pc, #260]	; (800eebc <tx_time_increment+0x158>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800edc0:	2300      	movs	r3, #0
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
 800edc4:	e046      	b.n	800ee54 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d034      	beq.n	800ee38 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800edce:	6a3b      	ldr	r3, [r7, #32]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b20      	cmp	r3, #32
 800edda:	d908      	bls.n	800edee <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	4413      	add	r3, r2
 800ede4:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	601a      	str	r2, [r3, #0]
 800edec:	e003      	b.n	800edf6 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	1c5a      	adds	r2, r3, #1
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d1e6      	bne.n	800edd4 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800ee06:	6a3b      	ldr	r3, [r7, #32]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	695b      	ldr	r3, [r3, #20]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d103      	bne.n	800ee1e <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	61bb      	str	r3, [r7, #24]
 800ee1c:	e009      	b.n	800ee32 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	6a3a      	ldr	r2, [r7, #32]
 800ee24:	6812      	ldr	r2, [r2, #0]
 800ee26:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	695a      	ldr	r2, [r3, #20]
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ee3e:	4b20      	ldr	r3, [pc, #128]	; (800eec0 <tx_time_increment+0x15c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6a3a      	ldr	r2, [r7, #32]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d302      	bcc.n	800ee4e <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ee48:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <tx_time_increment+0x160>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	3301      	adds	r3, #1
 800ee52:	627b      	str	r3, [r7, #36]	; 0x24
 800ee54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee56:	2b1f      	cmp	r3, #31
 800ee58:	d9b5      	bls.n	800edc6 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800ee5a:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <tx_time_increment+0x160>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a17      	ldr	r2, [pc, #92]	; (800eebc <tx_time_increment+0x158>)
 800ee60:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800ee62:	e019      	b.n	800ee98 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	691b      	ldr	r3, [r3, #16]
 800ee6c:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d206      	bcs.n	800ee86 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	1ad2      	subs	r2, r2, r3
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	e002      	b.n	800ee8c <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800ee92:	69f8      	ldr	r0, [r7, #28]
 800ee94:	f7ff f81a 	bl	800decc <_tx_timer_system_activate>
    while (temp_list_head)
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e2      	bne.n	800ee64 <tx_time_increment+0x100>
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f383 8810 	msr	PRIMASK, r3
}
 800eea8:	e000      	b.n	800eeac <tx_time_increment+0x148>
        return;
 800eeaa:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800eeac:	3728      	adds	r7, #40	; 0x28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	2000177c 	.word	0x2000177c
 800eeb8:	20001cdc 	.word	0x20001cdc
 800eebc:	2000180c 	.word	0x2000180c
 800eec0:	20001808 	.word	0x20001808
 800eec4:	20001804 	.word	0x20001804

0800eec8 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af02      	add	r7, sp, #8
    int date_int = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800eed2:	f000 f845 	bl	800ef60 <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800eed6:	4b0d      	ldr	r3, [pc, #52]	; (800ef0c <fm_calendar_format_date+0x44>)
 800eed8:	789b      	ldrb	r3, [r3, #2]
 800eeda:	461a      	mov	r2, r3
 800eedc:	4b0b      	ldr	r3, [pc, #44]	; (800ef0c <fm_calendar_format_date+0x44>)
 800eede:	785b      	ldrb	r3, [r3, #1]
 800eee0:	4619      	mov	r1, r3
 800eee2:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <fm_calendar_format_date+0x44>)
 800eee4:	78db      	ldrb	r3, [r3, #3]
 800eee6:	4638      	mov	r0, r7
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	460b      	mov	r3, r1
 800eeec:	4908      	ldr	r1, [pc, #32]	; (800ef10 <fm_calendar_format_date+0x48>)
 800eeee:	f006 f805 	bl	8014efc <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800eef2:	463b      	mov	r3, r7
 800eef4:	4618      	mov	r0, r3
 800eef6:	f005 ff97 	bl	8014e28 <atoi>
 800eefa:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800eefc:	6978      	ldr	r0, [r7, #20]
 800eefe:	f000 fa33 	bl	800f368 <fm_factory_modify_fp_date>
}
 800ef02:	bf00      	nop
 800ef04:	3718      	adds	r7, #24
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20001d24 	.word	0x20001d24
 800ef10:	080159a8 	.word	0x080159a8

0800ef14 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af02      	add	r7, sp, #8
    int time_int = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ef1e:	f000 f81f 	bl	800ef60 <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ef22:	4b0d      	ldr	r3, [pc, #52]	; (800ef58 <fm_calendar_format_time+0x44>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	461a      	mov	r2, r3
 800ef28:	4b0b      	ldr	r3, [pc, #44]	; (800ef58 <fm_calendar_format_time+0x44>)
 800ef2a:	785b      	ldrb	r3, [r3, #1]
 800ef2c:	4619      	mov	r1, r3
    sTime.Seconds);
 800ef2e:	4b0a      	ldr	r3, [pc, #40]	; (800ef58 <fm_calendar_format_time+0x44>)
 800ef30:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ef32:	4638      	mov	r0, r7
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	460b      	mov	r3, r1
 800ef38:	4908      	ldr	r1, [pc, #32]	; (800ef5c <fm_calendar_format_time+0x48>)
 800ef3a:	f005 ffdf 	bl	8014efc <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ef3e:	463b      	mov	r3, r7
 800ef40:	4618      	mov	r0, r3
 800ef42:	f005 ff71 	bl	8014e28 <atoi>
 800ef46:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ef48:	6978      	ldr	r0, [r7, #20]
 800ef4a:	f000 fa1d 	bl	800f388 <fm_factory_modify_fp_time>
}
 800ef4e:	bf00      	nop
 800ef50:	3718      	adds	r7, #24
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20001d10 	.word	0x20001d10
 800ef5c:	080159b8 	.word	0x080159b8

0800ef60 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ef64:	2200      	movs	r2, #0
 800ef66:	4905      	ldr	r1, [pc, #20]	; (800ef7c <fm_calendar_get+0x1c>)
 800ef68:	4805      	ldr	r0, [pc, #20]	; (800ef80 <fm_calendar_get+0x20>)
 800ef6a:	f7fa fa3b 	bl	80093e4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ef6e:	2200      	movs	r2, #0
 800ef70:	4904      	ldr	r1, [pc, #16]	; (800ef84 <fm_calendar_get+0x24>)
 800ef72:	4803      	ldr	r0, [pc, #12]	; (800ef80 <fm_calendar_get+0x20>)
 800ef74:	f7fa fb2e 	bl	80095d4 <HAL_RTC_GetDate>
}
 800ef78:	bf00      	nop
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20001d10 	.word	0x20001d10
 800ef80:	200014f8 	.word	0x200014f8
 800ef84:	20001d24 	.word	0x20001d24

0800ef88 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ef8c:	f7ff ffe8 	bl	800ef60 <fm_calendar_get>
    return (sDate.Date);
 800ef90:	4b01      	ldr	r3, [pc, #4]	; (800ef98 <fm_calendar_get_day+0x10>)
 800ef92:	789b      	ldrb	r3, [r3, #2]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20001d24 	.word	0x20001d24

0800ef9c <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efa0:	f7ff ffde 	bl	800ef60 <fm_calendar_get>
    return (sTime.Hours);
 800efa4:	4b01      	ldr	r3, [pc, #4]	; (800efac <fm_calendar_get_hour+0x10>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	20001d10 	.word	0x20001d10

0800efb0 <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efb4:	f7ff ffd4 	bl	800ef60 <fm_calendar_get>
    return (sTime.Minutes);
 800efb8:	4b01      	ldr	r3, [pc, #4]	; (800efc0 <fm_calendar_get_minute+0x10>)
 800efba:	785b      	ldrb	r3, [r3, #1]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20001d10 	.word	0x20001d10

0800efc4 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leido del calendario.
 */
int fm_calendar_get_month()
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efc8:	f7ff ffca 	bl	800ef60 <fm_calendar_get>
    return (sDate.Month);
 800efcc:	4b01      	ldr	r3, [pc, #4]	; (800efd4 <fm_calendar_get_month+0x10>)
 800efce:	785b      	ldrb	r3, [r3, #1]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20001d24 	.word	0x20001d24

0800efd8 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efdc:	f7ff ffc0 	bl	800ef60 <fm_calendar_get>
    return (sTime.Seconds);
 800efe0:	4b01      	ldr	r3, [pc, #4]	; (800efe8 <fm_calendar_get_second+0x10>)
 800efe2:	789b      	ldrb	r3, [r3, #2]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	20001d10 	.word	0x20001d10

0800efec <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800efec:	b580      	push	{r7, lr}
 800efee:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800eff0:	f7ff ffb6 	bl	800ef60 <fm_calendar_get>
    return (sDate.Year);
 800eff4:	4b01      	ldr	r3, [pc, #4]	; (800effc <fm_calendar_get_year+0x10>)
 800eff6:	78db      	ldrb	r3, [r3, #3]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20001d24 	.word	0x20001d24

0800f000 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800f000:	b4b0      	push	{r4, r5, r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a07      	ldr	r2, [pc, #28]	; (800f028 <fm_factory_get_acm+0x28>)
 800f00c:	461c      	mov	r4, r3
 800f00e:	4615      	mov	r5, r2
 800f010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	bcb0      	pop	{r4, r5, r7}
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	20000030 	.word	0x20000030

0800f02c <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800f02c:	b4b0      	push	{r4, r5, r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
    return (date_time_config);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a07      	ldr	r2, [pc, #28]	; (800f054 <fm_factory_get_date_time+0x28>)
 800f038:	461c      	mov	r4, r3
 800f03a:	4615      	mov	r5, r2
 800f03c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f03e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f040:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f044:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	370c      	adds	r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bcb0      	pop	{r4, r5, r7}
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	2000007c 	.word	0x2000007c

0800f058 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
    return (date_user);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a05      	ldr	r2, [pc, #20]	; (800f078 <fm_factory_get_fp_date+0x20>)
 800f064:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f068:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	20000104 	.word	0x20000104

0800f07c <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    return (date_config);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a05      	ldr	r2, [pc, #20]	; (800f09c <fm_factory_get_fp_date_conf+0x20>)
 800f088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f08c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	20000114 	.word	0x20000114

0800f0a0 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
    return (time_user);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a05      	ldr	r2, [pc, #20]	; (800f0c0 <fm_factory_get_fp_time+0x20>)
 800f0ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0b0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	200000fc 	.word	0x200000fc

0800f0c4 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
    return (time_config);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a05      	ldr	r2, [pc, #20]	; (800f0e4 <fm_factory_get_fp_time_conf+0x20>)
 800f0d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	2000010c 	.word	0x2000010c

0800f0e8 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if (k_sel == K_LIN_1)
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d106      	bne.n	800f108 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800f0fa:	4b1d      	ldr	r3, [pc, #116]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <fm_factory_get_frec_lin+0x8c>)
 800f0fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f102:	e883 0003 	stmia.w	r3, {r0, r1}
 800f106:	e026      	b.n	800f156 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_2)
 800f108:	78fb      	ldrb	r3, [r7, #3]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d106      	bne.n	800f11c <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800f10e:	4b18      	ldr	r3, [pc, #96]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f110:	4a19      	ldr	r2, [pc, #100]	; (800f178 <fm_factory_get_frec_lin+0x90>)
 800f112:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f116:	e883 0003 	stmia.w	r3, {r0, r1}
 800f11a:	e01c      	b.n	800f156 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_3)
 800f11c:	78fb      	ldrb	r3, [r7, #3]
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d106      	bne.n	800f130 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800f122:	4b13      	ldr	r3, [pc, #76]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f124:	4a15      	ldr	r2, [pc, #84]	; (800f17c <fm_factory_get_frec_lin+0x94>)
 800f126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f12a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f12e:	e012      	b.n	800f156 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_4)
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	2b04      	cmp	r3, #4
 800f134:	d106      	bne.n	800f144 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f138:	4a11      	ldr	r2, [pc, #68]	; (800f180 <fm_factory_get_frec_lin+0x98>)
 800f13a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f13e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f142:	e008      	b.n	800f156 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_5)
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	2b05      	cmp	r3, #5
 800f148:	d105      	bne.n	800f156 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800f14a:	4b09      	ldr	r3, [pc, #36]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f14c:	4a0d      	ldr	r2, [pc, #52]	; (800f184 <fm_factory_get_frec_lin+0x9c>)
 800f14e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f152:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4a05      	ldr	r2, [pc, #20]	; (800f170 <fm_factory_get_frec_lin+0x88>)
 800f15a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f15e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	20001d40 	.word	0x20001d40
 800f174:	200000a4 	.word	0x200000a4
 800f178:	200000ac 	.word	0x200000ac
 800f17c:	200000b4 	.word	0x200000b4
 800f180:	200000bc 	.word	0x200000bc
 800f184:	200000c4 	.word	0x200000c4

0800f188 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if (k_sel == K_FACTOR)
 800f194:	78fb      	ldrb	r3, [r7, #3]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d106      	bne.n	800f1a8 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800f19a:	4b22      	ldr	r3, [pc, #136]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f19c:	4a22      	ldr	r2, [pc, #136]	; (800f228 <fm_factory_get_k_factor+0xa0>)
 800f19e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1a6:	e030      	b.n	800f20a <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_1)
 800f1a8:	78fb      	ldrb	r3, [r7, #3]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d106      	bne.n	800f1bc <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800f1ae:	4b1d      	ldr	r3, [pc, #116]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f1b0:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <fm_factory_get_k_factor+0xa4>)
 800f1b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1b6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ba:	e026      	b.n	800f20a <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_2)
 800f1bc:	78fb      	ldrb	r3, [r7, #3]
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d106      	bne.n	800f1d0 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800f1c2:	4b18      	ldr	r3, [pc, #96]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f1c4:	4a1a      	ldr	r2, [pc, #104]	; (800f230 <fm_factory_get_k_factor+0xa8>)
 800f1c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1ca:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ce:	e01c      	b.n	800f20a <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_3)
 800f1d0:	78fb      	ldrb	r3, [r7, #3]
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d106      	bne.n	800f1e4 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800f1d6:	4b13      	ldr	r3, [pc, #76]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f1d8:	4a16      	ldr	r2, [pc, #88]	; (800f234 <fm_factory_get_k_factor+0xac>)
 800f1da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1de:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1e2:	e012      	b.n	800f20a <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_4)
 800f1e4:	78fb      	ldrb	r3, [r7, #3]
 800f1e6:	2b04      	cmp	r3, #4
 800f1e8:	d106      	bne.n	800f1f8 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800f1ea:	4b0e      	ldr	r3, [pc, #56]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f1ec:	4a12      	ldr	r2, [pc, #72]	; (800f238 <fm_factory_get_k_factor+0xb0>)
 800f1ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1f6:	e008      	b.n	800f20a <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_5)
 800f1f8:	78fb      	ldrb	r3, [r7, #3]
 800f1fa:	2b05      	cmp	r3, #5
 800f1fc:	d105      	bne.n	800f20a <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800f1fe:	4b09      	ldr	r3, [pc, #36]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f200:	4a0e      	ldr	r2, [pc, #56]	; (800f23c <fm_factory_get_k_factor+0xb4>)
 800f202:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f206:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a05      	ldr	r2, [pc, #20]	; (800f224 <fm_factory_get_k_factor+0x9c>)
 800f20e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f212:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20001d48 	.word	0x20001d48
 800f228:	200000f4 	.word	0x200000f4
 800f22c:	200000cc 	.word	0x200000cc
 800f230:	200000d4 	.word	0x200000d4
 800f234:	200000dc 	.word	0x200000dc
 800f238:	200000e4 	.word	0x200000e4
 800f23c:	200000ec 	.word	0x200000ec

0800f240 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800f240:	b4b0      	push	{r4, r5, r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a07      	ldr	r2, [pc, #28]	; (800f268 <fm_factory_get_rate+0x28>)
 800f24c:	461c      	mov	r4, r3
 800f24e:	4615      	mov	r5, r2
 800f250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	bcb0      	pop	{r4, r5, r7}
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	20000050 	.word	0x20000050

0800f26c <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a05      	ldr	r2, [pc, #20]	; (800f28c <fm_factory_get_temp+0x20>)
 800f278:	ca07      	ldmia	r2, {r0, r1, r2}
 800f27a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	20000070 	.word	0x20000070

0800f290 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800f290:	b4b0      	push	{r4, r5, r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4a07      	ldr	r2, [pc, #28]	; (800f2b8 <fm_factory_get_ttl+0x28>)
 800f29c:	461c      	mov	r4, r3
 800f29e:	4615      	mov	r5, r2
 800f2a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f2a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bcb0      	pop	{r4, r5, r7}
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20000010 	.word	0x20000010

0800f2bc <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a05      	ldr	r2, [pc, #20]	; (800f2dc <fm_factory_get_units_tim+0x20>)
 800f2c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2cc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	20000094 	.word	0x20000094

0800f2e0 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a05      	ldr	r2, [pc, #20]	; (800f300 <fm_factory_get_units_vol+0x20>)
 800f2ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2f0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr
 800f300:	2000009c 	.word	0x2000009c

0800f304 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
    static const int century = 2000;
    static const int day_mult = 1000000;
    static const int month_mult = 10000;

    date_time_config.day = mod_day;
 800f310:	4a10      	ldr	r2, [pc, #64]	; (800f354 <fm_factory_modify_date+0x50>)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f316:	4a0f      	ldr	r2, [pc, #60]	; (800f354 <fm_factory_modify_date+0x50>)
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f31c:	4a0d      	ldr	r2, [pc, #52]	; (800f354 <fm_factory_modify_date+0x50>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f322:	4b0d      	ldr	r3, [pc, #52]	; (800f358 <fm_factory_modify_date+0x54>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	fb03 f202 	mul.w	r2, r3, r2
 800f32c:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <fm_factory_modify_date+0x58>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	68b9      	ldr	r1, [r7, #8]
 800f332:	fb01 f303 	mul.w	r3, r1, r3
 800f336:	441a      	add	r2, r3
 800f338:	4b09      	ldr	r3, [pc, #36]	; (800f360 <fm_factory_modify_date+0x5c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	441a      	add	r2, r3
    + mod_year;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4413      	add	r3, r2
 800f342:	461a      	mov	r2, r3
    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f344:	4b07      	ldr	r3, [pc, #28]	; (800f364 <fm_factory_modify_date+0x60>)
 800f346:	601a      	str	r2, [r3, #0]
}
 800f348:	bf00      	nop
 800f34a:	3714      	adds	r7, #20
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	2000007c 	.word	0x2000007c
 800f358:	08015aec 	.word	0x08015aec
 800f35c:	08015af0 	.word	0x08015af0
 800f360:	08015af4 	.word	0x08015af4
 800f364:	20000114 	.word	0x20000114

0800f368 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a04      	ldr	r2, [pc, #16]	; (800f384 <fm_factory_modify_fp_date+0x1c>)
 800f374:	6013      	str	r3, [r2, #0]
}
 800f376:	bf00      	nop
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	20000104 	.word	0x20000104

0800f388 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <fm_factory_modify_fp_time+0x1c>)
 800f394:	6013      	str	r3, [r2, #0]
}
 800f396:	bf00      	nop
 800f398:	370c      	adds	r7, #12
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	200000fc 	.word	0x200000fc

0800f3a8 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f3b6:	f000 fb27 	bl	800fa08 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f3ba:	79fb      	ldrb	r3, [r7, #7]
 800f3bc:	f1c3 0307 	rsb	r3, r3, #7
 800f3c0:	4a17      	ldr	r2, [pc, #92]	; (800f420 <fm_factory_modify_k_factor_add+0x78>)
 800f3c2:	5cd3      	ldrb	r3, [r2, r3]
 800f3c4:	2b08      	cmp	r3, #8
 800f3c6:	d809      	bhi.n	800f3dc <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	f1c3 0307 	rsb	r3, r3, #7
 800f3ce:	4a14      	ldr	r2, [pc, #80]	; (800f420 <fm_factory_modify_k_factor_add+0x78>)
 800f3d0:	5cd2      	ldrb	r2, [r2, r3]
 800f3d2:	3201      	adds	r2, #1
 800f3d4:	b2d1      	uxtb	r1, r2
 800f3d6:	4a12      	ldr	r2, [pc, #72]	; (800f420 <fm_factory_modify_k_factor_add+0x78>)
 800f3d8:	54d1      	strb	r1, [r2, r3]
 800f3da:	e005      	b.n	800f3e8 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	f1c3 0307 	rsb	r3, r3, #7
 800f3e2:	4a0f      	ldr	r2, [pc, #60]	; (800f420 <fm_factory_modify_k_factor_add+0x78>)
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	60bb      	str	r3, [r7, #8]
 800f3ec:	e00d      	b.n	800f40a <fm_factory_modify_k_factor_add+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f3ee:	230a      	movs	r3, #10
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	fb02 f303 	mul.w	r3, r2, r3
 800f3f8:	4909      	ldr	r1, [pc, #36]	; (800f420 <fm_factory_modify_k_factor_add+0x78>)
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	440a      	add	r2, r1
 800f3fe:	7812      	ldrb	r2, [r2, #0]
 800f400:	4413      	add	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	3301      	adds	r3, #1
 800f408:	60bb      	str	r3, [r7, #8]
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b07      	cmp	r3, #7
 800f40e:	ddee      	ble.n	800f3ee <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f410:	4a04      	ldr	r2, [pc, #16]	; (800f424 <fm_factory_modify_k_factor_add+0x7c>)
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6013      	str	r3, [r2, #0]
}
 800f416:	bf00      	nop
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20001d28 	.word	0x20001d28
 800f424:	200000f4 	.word	0x200000f4

0800f428 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f436:	f000 fae7 	bl	800fa08 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	f1c3 0307 	rsb	r3, r3, #7
 800f440:	4a17      	ldr	r2, [pc, #92]	; (800f4a0 <fm_factory_modify_k_factor_subs+0x78>)
 800f442:	5cd3      	ldrb	r3, [r2, r3]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d009      	beq.n	800f45c <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	f1c3 0307 	rsb	r3, r3, #7
 800f44e:	4a14      	ldr	r2, [pc, #80]	; (800f4a0 <fm_factory_modify_k_factor_subs+0x78>)
 800f450:	5cd2      	ldrb	r2, [r2, r3]
 800f452:	3a01      	subs	r2, #1
 800f454:	b2d1      	uxtb	r1, r2
 800f456:	4a12      	ldr	r2, [pc, #72]	; (800f4a0 <fm_factory_modify_k_factor_subs+0x78>)
 800f458:	54d1      	strb	r1, [r2, r3]
 800f45a:	e005      	b.n	800f468 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	f1c3 0307 	rsb	r3, r3, #7
 800f462:	4a0f      	ldr	r2, [pc, #60]	; (800f4a0 <fm_factory_modify_k_factor_subs+0x78>)
 800f464:	2109      	movs	r1, #9
 800f466:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f468:	2300      	movs	r3, #0
 800f46a:	60bb      	str	r3, [r7, #8]
 800f46c:	e00d      	b.n	800f48a <fm_factory_modify_k_factor_subs+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f46e:	230a      	movs	r3, #10
 800f470:	461a      	mov	r2, r3
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	fb02 f303 	mul.w	r3, r2, r3
 800f478:	4909      	ldr	r1, [pc, #36]	; (800f4a0 <fm_factory_modify_k_factor_subs+0x78>)
 800f47a:	68ba      	ldr	r2, [r7, #8]
 800f47c:	440a      	add	r2, r1
 800f47e:	7812      	ldrb	r2, [r2, #0]
 800f480:	4413      	add	r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	3301      	adds	r3, #1
 800f488:	60bb      	str	r3, [r7, #8]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	2b07      	cmp	r3, #7
 800f48e:	ddee      	ble.n	800f46e <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f490:	4a04      	ldr	r2, [pc, #16]	; (800f4a4 <fm_factory_modify_k_factor_subs+0x7c>)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6013      	str	r3, [r2, #0]
}
 800f496:	bf00      	nop
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20001d28 	.word	0x20001d28
 800f4a4:	200000f4 	.word	0x200000f4

0800f4a8 <fm_factory_modify_k_lin_add>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	460a      	mov	r2, r1
 800f4b2:	71fb      	strb	r3, [r7, #7]
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f4c0:	79bb      	ldrb	r3, [r7, #6]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fad8 	bl	800fa78 <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	2b07      	cmp	r3, #7
 800f4cc:	d84d      	bhi.n	800f56a <fm_factory_modify_k_lin_add+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	f1c3 0307 	rsb	r3, r3, #7
 800f4d4:	4a5d      	ldr	r2, [pc, #372]	; (800f64c <fm_factory_modify_k_lin_add+0x1a4>)
 800f4d6:	5cd3      	ldrb	r3, [r2, r3]
 800f4d8:	2b08      	cmp	r3, #8
 800f4da:	d809      	bhi.n	800f4f0 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f4dc:	79fb      	ldrb	r3, [r7, #7]
 800f4de:	f1c3 0307 	rsb	r3, r3, #7
 800f4e2:	4a5a      	ldr	r2, [pc, #360]	; (800f64c <fm_factory_modify_k_lin_add+0x1a4>)
 800f4e4:	5cd2      	ldrb	r2, [r2, r3]
 800f4e6:	3201      	adds	r2, #1
 800f4e8:	b2d1      	uxtb	r1, r2
 800f4ea:	4a58      	ldr	r2, [pc, #352]	; (800f64c <fm_factory_modify_k_lin_add+0x1a4>)
 800f4ec:	54d1      	strb	r1, [r2, r3]
 800f4ee:	e005      	b.n	800f4fc <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	f1c3 0307 	rsb	r3, r3, #7
 800f4f6:	4a55      	ldr	r2, [pc, #340]	; (800f64c <fm_factory_modify_k_lin_add+0x1a4>)
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e00d      	b.n	800f51e <fm_factory_modify_k_lin_add+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f502:	230a      	movs	r3, #10
 800f504:	461a      	mov	r2, r3
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	fb02 f303 	mul.w	r3, r2, r3
 800f50c:	494f      	ldr	r1, [pc, #316]	; (800f64c <fm_factory_modify_k_lin_add+0x1a4>)
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	440a      	add	r2, r1
 800f512:	7812      	ldrb	r2, [r2, #0]
 800f514:	4413      	add	r3, r2
 800f516:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3301      	adds	r3, #1
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2b07      	cmp	r3, #7
 800f522:	ddee      	ble.n	800f502 <fm_factory_modify_k_lin_add+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f524:	79bb      	ldrb	r3, [r7, #6]
 800f526:	2b01      	cmp	r3, #1
 800f528:	d103      	bne.n	800f532 <fm_factory_modify_k_lin_add+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f52a:	4a49      	ldr	r2, [pc, #292]	; (800f650 <fm_factory_modify_k_lin_add+0x1a8>)
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f530:	e088      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f532:	79bb      	ldrb	r3, [r7, #6]
 800f534:	2b02      	cmp	r3, #2
 800f536:	d103      	bne.n	800f540 <fm_factory_modify_k_lin_add+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f538:	4a46      	ldr	r2, [pc, #280]	; (800f654 <fm_factory_modify_k_lin_add+0x1ac>)
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	6013      	str	r3, [r2, #0]
}
 800f53e:	e081      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f540:	79bb      	ldrb	r3, [r7, #6]
 800f542:	2b03      	cmp	r3, #3
 800f544:	d103      	bne.n	800f54e <fm_factory_modify_k_lin_add+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f546:	4a44      	ldr	r2, [pc, #272]	; (800f658 <fm_factory_modify_k_lin_add+0x1b0>)
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	6013      	str	r3, [r2, #0]
}
 800f54c:	e07a      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f54e:	79bb      	ldrb	r3, [r7, #6]
 800f550:	2b04      	cmp	r3, #4
 800f552:	d103      	bne.n	800f55c <fm_factory_modify_k_lin_add+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f554:	4a41      	ldr	r2, [pc, #260]	; (800f65c <fm_factory_modify_k_lin_add+0x1b4>)
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	6013      	str	r3, [r2, #0]
}
 800f55a:	e073      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f55c:	79bb      	ldrb	r3, [r7, #6]
 800f55e:	2b05      	cmp	r3, #5
 800f560:	d170      	bne.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f562:	4a3f      	ldr	r2, [pc, #252]	; (800f660 <fm_factory_modify_k_lin_add+0x1b8>)
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	6013      	str	r3, [r2, #0]
}
 800f568:	e06c      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f56a:	79fb      	ldrb	r3, [r7, #7]
 800f56c:	2b07      	cmp	r3, #7
 800f56e:	d969      	bls.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	f1c3 030e 	rsb	r3, r3, #14
 800f576:	2b03      	cmp	r3, #3
 800f578:	d017      	beq.n	800f5aa <fm_factory_modify_k_lin_add+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f57a:	79fb      	ldrb	r3, [r7, #7]
 800f57c:	f1c3 030e 	rsb	r3, r3, #14
 800f580:	4a38      	ldr	r2, [pc, #224]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f582:	5cd3      	ldrb	r3, [r2, r3]
 800f584:	2b08      	cmp	r3, #8
 800f586:	d809      	bhi.n	800f59c <fm_factory_modify_k_lin_add+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f588:	79fb      	ldrb	r3, [r7, #7]
 800f58a:	f1c3 030e 	rsb	r3, r3, #14
 800f58e:	4a35      	ldr	r2, [pc, #212]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f590:	5cd2      	ldrb	r2, [r2, r3]
 800f592:	3201      	adds	r2, #1
 800f594:	b2d1      	uxtb	r1, r2
 800f596:	4a33      	ldr	r2, [pc, #204]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f598:	54d1      	strb	r1, [r2, r3]
 800f59a:	e01d      	b.n	800f5d8 <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	f1c3 030e 	rsb	r3, r3, #14
 800f5a2:	4a30      	ldr	r2, [pc, #192]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	54d1      	strb	r1, [r2, r3]
 800f5a8:	e016      	b.n	800f5d8 <fm_factory_modify_k_lin_add+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	f1c3 030e 	rsb	r3, r3, #14
 800f5b0:	4a2c      	ldr	r2, [pc, #176]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5b2:	5cd3      	ldrb	r3, [r2, r3]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <fm_factory_modify_k_lin_add+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	f1c3 030e 	rsb	r3, r3, #14
 800f5be:	4a29      	ldr	r2, [pc, #164]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5c0:	5cd2      	ldrb	r2, [r2, r3]
 800f5c2:	3201      	adds	r2, #1
 800f5c4:	b2d1      	uxtb	r1, r2
 800f5c6:	4a27      	ldr	r2, [pc, #156]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5c8:	54d1      	strb	r1, [r2, r3]
 800f5ca:	e005      	b.n	800f5d8 <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
 800f5ce:	f1c3 030e 	rsb	r3, r3, #14
 800f5d2:	4a24      	ldr	r2, [pc, #144]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	60bb      	str	r3, [r7, #8]
 800f5dc:	e00d      	b.n	800f5fa <fm_factory_modify_k_lin_add+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5de:	230a      	movs	r3, #10
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f5e8:	491e      	ldr	r1, [pc, #120]	; (800f664 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	440a      	add	r2, r1
 800f5ee:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5f0:	4413      	add	r3, r2
 800f5f2:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60bb      	str	r3, [r7, #8]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2b06      	cmp	r3, #6
 800f5fe:	ddee      	ble.n	800f5de <fm_factory_modify_k_lin_add+0x136>
        if (k_sel == K_LIN_1)
 800f600:	79bb      	ldrb	r3, [r7, #6]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d103      	bne.n	800f60e <fm_factory_modify_k_lin_add+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f606:	4a18      	ldr	r2, [pc, #96]	; (800f668 <fm_factory_modify_k_lin_add+0x1c0>)
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	6013      	str	r3, [r2, #0]
}
 800f60c:	e01a      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f60e:	79bb      	ldrb	r3, [r7, #6]
 800f610:	2b02      	cmp	r3, #2
 800f612:	d103      	bne.n	800f61c <fm_factory_modify_k_lin_add+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f614:	4a15      	ldr	r2, [pc, #84]	; (800f66c <fm_factory_modify_k_lin_add+0x1c4>)
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	6013      	str	r3, [r2, #0]
}
 800f61a:	e013      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f61c:	79bb      	ldrb	r3, [r7, #6]
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d103      	bne.n	800f62a <fm_factory_modify_k_lin_add+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f622:	4a13      	ldr	r2, [pc, #76]	; (800f670 <fm_factory_modify_k_lin_add+0x1c8>)
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	6013      	str	r3, [r2, #0]
}
 800f628:	e00c      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f62a:	79bb      	ldrb	r3, [r7, #6]
 800f62c:	2b04      	cmp	r3, #4
 800f62e:	d103      	bne.n	800f638 <fm_factory_modify_k_lin_add+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f630:	4a10      	ldr	r2, [pc, #64]	; (800f674 <fm_factory_modify_k_lin_add+0x1cc>)
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	6013      	str	r3, [r2, #0]
}
 800f636:	e005      	b.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f638:	79bb      	ldrb	r3, [r7, #6]
 800f63a:	2b05      	cmp	r3, #5
 800f63c:	d102      	bne.n	800f644 <fm_factory_modify_k_lin_add+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f63e:	4a0e      	ldr	r2, [pc, #56]	; (800f678 <fm_factory_modify_k_lin_add+0x1d0>)
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6013      	str	r3, [r2, #0]
}
 800f644:	bf00      	nop
 800f646:	3718      	adds	r7, #24
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	20001d30 	.word	0x20001d30
 800f650:	200000cc 	.word	0x200000cc
 800f654:	200000d4 	.word	0x200000d4
 800f658:	200000dc 	.word	0x200000dc
 800f65c:	200000e4 	.word	0x200000e4
 800f660:	200000ec 	.word	0x200000ec
 800f664:	20001d38 	.word	0x20001d38
 800f668:	200000a4 	.word	0x200000a4
 800f66c:	200000ac 	.word	0x200000ac
 800f670:	200000b4 	.word	0x200000b4
 800f674:	200000bc 	.word	0x200000bc
 800f678:	200000c4 	.word	0x200000c4

0800f67c <fm_factory_modify_k_lin_subs>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	460a      	mov	r2, r1
 800f686:	71fb      	strb	r3, [r7, #7]
 800f688:	4613      	mov	r3, r2
 800f68a:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f68c:	2300      	movs	r3, #0
 800f68e:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f694:	79bb      	ldrb	r3, [r7, #6]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 f9ee 	bl	800fa78 <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	2b07      	cmp	r3, #7
 800f6a0:	d84d      	bhi.n	800f73e <fm_factory_modify_k_lin_subs+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	f1c3 0307 	rsb	r3, r3, #7
 800f6a8:	4a5d      	ldr	r2, [pc, #372]	; (800f820 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6aa:	5cd3      	ldrb	r3, [r2, r3]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d009      	beq.n	800f6c4 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f6b0:	79fb      	ldrb	r3, [r7, #7]
 800f6b2:	f1c3 0307 	rsb	r3, r3, #7
 800f6b6:	4a5a      	ldr	r2, [pc, #360]	; (800f820 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6b8:	5cd2      	ldrb	r2, [r2, r3]
 800f6ba:	3a01      	subs	r2, #1
 800f6bc:	b2d1      	uxtb	r1, r2
 800f6be:	4a58      	ldr	r2, [pc, #352]	; (800f820 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6c0:	54d1      	strb	r1, [r2, r3]
 800f6c2:	e005      	b.n	800f6d0 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	f1c3 0307 	rsb	r3, r3, #7
 800f6ca:	4a55      	ldr	r2, [pc, #340]	; (800f820 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6cc:	2109      	movs	r1, #9
 800f6ce:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	e00d      	b.n	800f6f2 <fm_factory_modify_k_lin_subs+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f6d6:	230a      	movs	r3, #10
 800f6d8:	461a      	mov	r2, r3
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	fb02 f303 	mul.w	r3, r2, r3
 800f6e0:	494f      	ldr	r1, [pc, #316]	; (800f820 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	440a      	add	r2, r1
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	60fb      	str	r3, [r7, #12]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2b07      	cmp	r3, #7
 800f6f6:	ddee      	ble.n	800f6d6 <fm_factory_modify_k_lin_subs+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f6f8:	79bb      	ldrb	r3, [r7, #6]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d103      	bne.n	800f706 <fm_factory_modify_k_lin_subs+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f6fe:	4a49      	ldr	r2, [pc, #292]	; (800f824 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f704:	e088      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f706:	79bb      	ldrb	r3, [r7, #6]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d103      	bne.n	800f714 <fm_factory_modify_k_lin_subs+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f70c:	4a46      	ldr	r2, [pc, #280]	; (800f828 <fm_factory_modify_k_lin_subs+0x1ac>)
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	6013      	str	r3, [r2, #0]
}
 800f712:	e081      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f714:	79bb      	ldrb	r3, [r7, #6]
 800f716:	2b03      	cmp	r3, #3
 800f718:	d103      	bne.n	800f722 <fm_factory_modify_k_lin_subs+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f71a:	4a44      	ldr	r2, [pc, #272]	; (800f82c <fm_factory_modify_k_lin_subs+0x1b0>)
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	6013      	str	r3, [r2, #0]
}
 800f720:	e07a      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f722:	79bb      	ldrb	r3, [r7, #6]
 800f724:	2b04      	cmp	r3, #4
 800f726:	d103      	bne.n	800f730 <fm_factory_modify_k_lin_subs+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f728:	4a41      	ldr	r2, [pc, #260]	; (800f830 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	6013      	str	r3, [r2, #0]
}
 800f72e:	e073      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f730:	79bb      	ldrb	r3, [r7, #6]
 800f732:	2b05      	cmp	r3, #5
 800f734:	d170      	bne.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f736:	4a3f      	ldr	r2, [pc, #252]	; (800f834 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	6013      	str	r3, [r2, #0]
}
 800f73c:	e06c      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f73e:	79fb      	ldrb	r3, [r7, #7]
 800f740:	2b07      	cmp	r3, #7
 800f742:	d969      	bls.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	f1c3 030e 	rsb	r3, r3, #14
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d017      	beq.n	800f77e <fm_factory_modify_k_lin_subs+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	f1c3 030e 	rsb	r3, r3, #14
 800f754:	4a38      	ldr	r2, [pc, #224]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f756:	5cd3      	ldrb	r3, [r2, r3]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <fm_factory_modify_k_lin_subs+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	f1c3 030e 	rsb	r3, r3, #14
 800f762:	4a35      	ldr	r2, [pc, #212]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f764:	5cd2      	ldrb	r2, [r2, r3]
 800f766:	3a01      	subs	r2, #1
 800f768:	b2d1      	uxtb	r1, r2
 800f76a:	4a33      	ldr	r2, [pc, #204]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f76c:	54d1      	strb	r1, [r2, r3]
 800f76e:	e01d      	b.n	800f7ac <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	f1c3 030e 	rsb	r3, r3, #14
 800f776:	4a30      	ldr	r2, [pc, #192]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f778:	2109      	movs	r1, #9
 800f77a:	54d1      	strb	r1, [r2, r3]
 800f77c:	e016      	b.n	800f7ac <fm_factory_modify_k_lin_subs+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f77e:	79fb      	ldrb	r3, [r7, #7]
 800f780:	f1c3 030e 	rsb	r3, r3, #14
 800f784:	4a2c      	ldr	r2, [pc, #176]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f786:	5cd3      	ldrb	r3, [r2, r3]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d009      	beq.n	800f7a0 <fm_factory_modify_k_lin_subs+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	f1c3 030e 	rsb	r3, r3, #14
 800f792:	4a29      	ldr	r2, [pc, #164]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f794:	5cd2      	ldrb	r2, [r2, r3]
 800f796:	3a01      	subs	r2, #1
 800f798:	b2d1      	uxtb	r1, r2
 800f79a:	4a27      	ldr	r2, [pc, #156]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f79c:	54d1      	strb	r1, [r2, r3]
 800f79e:	e005      	b.n	800f7ac <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f7a0:	79fb      	ldrb	r3, [r7, #7]
 800f7a2:	f1c3 030e 	rsb	r3, r3, #14
 800f7a6:	4a24      	ldr	r2, [pc, #144]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f7a8:	2101      	movs	r1, #1
 800f7aa:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	60bb      	str	r3, [r7, #8]
 800f7b0:	e00d      	b.n	800f7ce <fm_factory_modify_k_lin_subs+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f7b2:	230a      	movs	r3, #10
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f7bc:	491e      	ldr	r1, [pc, #120]	; (800f838 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	440a      	add	r2, r1
 800f7c2:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f7c4:	4413      	add	r3, r2
 800f7c6:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	60bb      	str	r3, [r7, #8]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b06      	cmp	r3, #6
 800f7d2:	ddee      	ble.n	800f7b2 <fm_factory_modify_k_lin_subs+0x136>
        if (k_sel == K_LIN_1)
 800f7d4:	79bb      	ldrb	r3, [r7, #6]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d103      	bne.n	800f7e2 <fm_factory_modify_k_lin_subs+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f7da:	4a18      	ldr	r2, [pc, #96]	; (800f83c <fm_factory_modify_k_lin_subs+0x1c0>)
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	6013      	str	r3, [r2, #0]
}
 800f7e0:	e01a      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f7e2:	79bb      	ldrb	r3, [r7, #6]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d103      	bne.n	800f7f0 <fm_factory_modify_k_lin_subs+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f7e8:	4a15      	ldr	r2, [pc, #84]	; (800f840 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	6013      	str	r3, [r2, #0]
}
 800f7ee:	e013      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f7f0:	79bb      	ldrb	r3, [r7, #6]
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d103      	bne.n	800f7fe <fm_factory_modify_k_lin_subs+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f7f6:	4a13      	ldr	r2, [pc, #76]	; (800f844 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	6013      	str	r3, [r2, #0]
}
 800f7fc:	e00c      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f7fe:	79bb      	ldrb	r3, [r7, #6]
 800f800:	2b04      	cmp	r3, #4
 800f802:	d103      	bne.n	800f80c <fm_factory_modify_k_lin_subs+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f804:	4a10      	ldr	r2, [pc, #64]	; (800f848 <fm_factory_modify_k_lin_subs+0x1cc>)
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	6013      	str	r3, [r2, #0]
}
 800f80a:	e005      	b.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f80c:	79bb      	ldrb	r3, [r7, #6]
 800f80e:	2b05      	cmp	r3, #5
 800f810:	d102      	bne.n	800f818 <fm_factory_modify_k_lin_subs+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f812:	4a0e      	ldr	r2, [pc, #56]	; (800f84c <fm_factory_modify_k_lin_subs+0x1d0>)
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	6013      	str	r3, [r2, #0]
}
 800f818:	bf00      	nop
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	20001d30 	.word	0x20001d30
 800f824:	200000cc 	.word	0x200000cc
 800f828:	200000d4 	.word	0x200000d4
 800f82c:	200000dc 	.word	0x200000dc
 800f830:	200000e4 	.word	0x200000e4
 800f834:	200000ec 	.word	0x200000ec
 800f838:	20001d38 	.word	0x20001d38
 800f83c:	200000a4 	.word	0x200000a4
 800f840:	200000ac 	.word	0x200000ac
 800f844:	200000b4 	.word	0x200000b4
 800f848:	200000bc 	.word	0x200000bc
 800f84c:	200000c4 	.word	0x200000c4

0800f850 <fm_factory_modify_pulse_acm_ttl>:

void fm_factory_modify_pulse_acm_ttl(int added_pulses)
{
 800f850:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f854:	b085      	sub	sp, #20
 800f856:	af00      	add	r7, sp, #0
 800f858:	60f8      	str	r0, [r7, #12]
    acm_config.pulse += added_pulses;
 800f85a:	4b13      	ldr	r3, [pc, #76]	; (800f8a8 <fm_factory_modify_pulse_acm_ttl+0x58>)
 800f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f860:	68f9      	ldr	r1, [r7, #12]
 800f862:	17c8      	asrs	r0, r1, #31
 800f864:	4688      	mov	r8, r1
 800f866:	4681      	mov	r9, r0
 800f868:	eb12 0108 	adds.w	r1, r2, r8
 800f86c:	6039      	str	r1, [r7, #0]
 800f86e:	eb43 0309 	adc.w	r3, r3, r9
 800f872:	607b      	str	r3, [r7, #4]
 800f874:	4b0c      	ldr	r3, [pc, #48]	; (800f8a8 <fm_factory_modify_pulse_acm_ttl+0x58>)
 800f876:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f87a:	e9c3 1200 	strd	r1, r2, [r3]
    ttl_config.pulse += added_pulses;
 800f87e:	4b0b      	ldr	r3, [pc, #44]	; (800f8ac <fm_factory_modify_pulse_acm_ttl+0x5c>)
 800f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f884:	68f9      	ldr	r1, [r7, #12]
 800f886:	17c8      	asrs	r0, r1, #31
 800f888:	460c      	mov	r4, r1
 800f88a:	4605      	mov	r5, r0
 800f88c:	eb12 0a04 	adds.w	sl, r2, r4
 800f890:	eb43 0b05 	adc.w	fp, r3, r5
 800f894:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <fm_factory_modify_pulse_acm_ttl+0x5c>)
 800f896:	e9c3 ab00 	strd	sl, fp, [r3]

}
 800f89a:	bf00      	nop
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	20000030 	.word	0x20000030
 800f8ac:	20000010 	.word	0x20000010

0800f8b0 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	71fb      	strb	r3, [r7, #7]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	71bb      	strb	r3, [r7, #6]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f8c2:	4a07      	ldr	r2, [pc, #28]	; (800f8e0 <fm_factory_modify_res_acm_ttl+0x30>)
 800f8c4:	79fb      	ldrb	r3, [r7, #7]
 800f8c6:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f8c8:	4a06      	ldr	r2, [pc, #24]	; (800f8e4 <fm_factory_modify_res_acm_ttl+0x34>)
 800f8ca:	79bb      	ldrb	r3, [r7, #6]
 800f8cc:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f8ce:	4a06      	ldr	r2, [pc, #24]	; (800f8e8 <fm_factory_modify_res_acm_ttl+0x38>)
 800f8d0:	797b      	ldrb	r3, [r7, #5]
 800f8d2:	7313      	strb	r3, [r2, #12]
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	2000009c 	.word	0x2000009c
 800f8e4:	20000030 	.word	0x20000030
 800f8e8:	20000010 	.word	0x20000010

0800f8ec <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	460a      	mov	r2, r1
 800f8f6:	71fb      	strb	r3, [r7, #7]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f8fc:	4a05      	ldr	r2, [pc, #20]	; (800f914 <fm_factory_modify_res_rate+0x28>)
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f902:	4a05      	ldr	r2, [pc, #20]	; (800f918 <fm_factory_modify_res_rate+0x2c>)
 800f904:	79bb      	ldrb	r3, [r7, #6]
 800f906:	7313      	strb	r3, [r2, #12]
}
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	20000094 	.word	0x20000094
 800f918:	20000050 	.word	0x20000050

0800f91c <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
    static const int hour_mult = 10000;
    static const int min_mult = 100;

    date_time_config.hour = mod_hour;
 800f928:	4a0f      	ldr	r2, [pc, #60]	; (800f968 <fm_factory_modify_time+0x4c>)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f92e:	4a0e      	ldr	r2, [pc, #56]	; (800f968 <fm_factory_modify_time+0x4c>)
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f934:	4a0c      	ldr	r2, [pc, #48]	; (800f968 <fm_factory_modify_time+0x4c>)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * hour_mult + mod_minute * min_mult + mod_second;
 800f93a:	4b0c      	ldr	r3, [pc, #48]	; (800f96c <fm_factory_modify_time+0x50>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	fb03 f202 	mul.w	r2, r3, r2
 800f944:	4b0a      	ldr	r3, [pc, #40]	; (800f970 <fm_factory_modify_time+0x54>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68b9      	ldr	r1, [r7, #8]
 800f94a:	fb01 f303 	mul.w	r3, r1, r3
 800f94e:	441a      	add	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4413      	add	r3, r2
 800f954:	461a      	mov	r2, r3
 800f956:	4b07      	ldr	r3, [pc, #28]	; (800f974 <fm_factory_modify_time+0x58>)
 800f958:	601a      	str	r2, [r3, #0]
}
 800f95a:	bf00      	nop
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	2000007c 	.word	0x2000007c
 800f96c:	08015af8 	.word	0x08015af8
 800f970:	08015afc 	.word	0x08015afc
 800f974:	2000010c 	.word	0x2000010c

0800f978 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	4603      	mov	r3, r0
 800f980:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f982:	4a07      	ldr	r2, [pc, #28]	; (800f9a0 <fm_factory_modify_time_units+0x28>)
 800f984:	79fb      	ldrb	r3, [r7, #7]
 800f986:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f988:	4a06      	ldr	r2, [pc, #24]	; (800f9a4 <fm_factory_modify_time_units+0x2c>)
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f98e:	4a06      	ldr	r2, [pc, #24]	; (800f9a8 <fm_factory_modify_time_units+0x30>)
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	7653      	strb	r3, [r2, #25]
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr
 800f9a0:	20000030 	.word	0x20000030
 800f9a4:	20000010 	.word	0x20000010
 800f9a8:	20000050 	.word	0x20000050

0800f9ac <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f9b6:	4a07      	ldr	r2, [pc, #28]	; (800f9d4 <fm_factory_modify_volume_units+0x28>)
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f9bc:	4a06      	ldr	r2, [pc, #24]	; (800f9d8 <fm_factory_modify_volume_units+0x2c>)
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f9c2:	4a06      	ldr	r2, [pc, #24]	; (800f9dc <fm_factory_modify_volume_units+0x30>)
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	7613      	strb	r3, [r2, #24]
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr
 800f9d4:	20000030 	.word	0x20000030
 800f9d8:	20000010 	.word	0x20000010
 800f9dc:	20000050 	.word	0x20000050

0800f9e0 <fm_factory_reset_acm>:
 * funcionalidad del botón ENTER en el menú de usuario ACM-RATE.
 * @param None
 * @retval None
 */
void fm_factory_reset_acm()
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f9e4:	4907      	ldr	r1, [pc, #28]	; (800fa04 <fm_factory_reset_acm+0x24>)
 800f9e6:	f04f 0200 	mov.w	r2, #0
 800f9ea:	f04f 0300 	mov.w	r3, #0
 800f9ee:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f9f2:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <fm_factory_reset_acm+0x24>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	609a      	str	r2, [r3, #8]
}
 800f9f8:	bf00      	nop
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	20000030 	.word	0x20000030

0800fa08 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800fa0e:	2307      	movs	r3, #7
 800fa10:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800fa12:	463b      	mov	r3, r7
 800fa14:	2100      	movs	r1, #0
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fbb6 	bl	800f188 <fm_factory_get_k_factor>
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800fa20:	e01f      	b.n	800fa62 <fm_factory_separate_k_factor+0x5a>
    {
        if (k_num > 0)
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d014      	beq.n	800fa52 <fm_factory_separate_k_factor+0x4a>
        {
            k_array[i] = k_num % ten_multipllier;
 800fa28:	230a      	movs	r3, #10
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa32:	fb01 f202 	mul.w	r2, r1, r2
 800fa36:	1a9b      	subs	r3, r3, r2
 800fa38:	b2d9      	uxtb	r1, r3
 800fa3a:	4a0e      	ldr	r2, [pc, #56]	; (800fa74 <fm_factory_separate_k_factor+0x6c>)
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	4413      	add	r3, r2
 800fa40:	460a      	mov	r2, r1
 800fa42:	701a      	strb	r2, [r3, #0]
            k_num /= ten_multipllier;
 800fa44:	230a      	movs	r3, #10
 800fa46:	461a      	mov	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa4e:	60fb      	str	r3, [r7, #12]
 800fa50:	e004      	b.n	800fa5c <fm_factory_separate_k_factor+0x54>
        }
        else
        {
            k_array[i] = 0;
 800fa52:	4a08      	ldr	r2, [pc, #32]	; (800fa74 <fm_factory_separate_k_factor+0x6c>)
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	4413      	add	r3, r2
 800fa58:	2200      	movs	r2, #0
 800fa5a:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dadc      	bge.n	800fa22 <fm_factory_separate_k_factor+0x1a>
    }
}
 800fa68:	bf00      	nop
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20001d28 	.word	0x20001d28

0800fa78 <fm_factory_separate_k_lin_and_frec>:
 * y los guarda en un arreglo global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b08a      	sub	sp, #40	; 0x28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	4603      	mov	r3, r0
 800fa80:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800fa82:	2307      	movs	r3, #7
 800fa84:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800fa86:	2306      	movs	r3, #6
 800fa88:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800fa8a:	f107 0308 	add.w	r3, r7, #8
 800fa8e:	79fa      	ldrb	r2, [r7, #7]
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7ff fb78 	bl	800f188 <fm_factory_get_k_factor>
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800fa9c:	f107 0310 	add.w	r3, r7, #16
 800faa0:	79fa      	ldrb	r2, [r7, #7]
 800faa2:	4611      	mov	r1, r2
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7ff fb1f 	bl	800f0e8 <fm_factory_get_frec_lin>
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800faae:	e01f      	b.n	800faf0 <fm_factory_separate_k_lin_and_frec+0x78>
    {
        if (k_lin_num > 0)
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d014      	beq.n	800fae0 <fm_factory_separate_k_lin_and_frec+0x68>
        {
            k_lin_array[i] = k_lin_num % ten_multipllier;
 800fab6:	230a      	movs	r3, #10
 800fab8:	461a      	mov	r2, r3
 800faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fac0:	fb01 f202 	mul.w	r2, r1, r2
 800fac4:	1a9b      	subs	r3, r3, r2
 800fac6:	b2d9      	uxtb	r1, r3
 800fac8:	4a1f      	ldr	r2, [pc, #124]	; (800fb48 <fm_factory_separate_k_lin_and_frec+0xd0>)
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	4413      	add	r3, r2
 800face:	460a      	mov	r2, r1
 800fad0:	701a      	strb	r2, [r3, #0]
            k_lin_num /= ten_multipllier;
 800fad2:	230a      	movs	r3, #10
 800fad4:	461a      	mov	r2, r3
 800fad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fadc:	627b      	str	r3, [r7, #36]	; 0x24
 800fade:	e004      	b.n	800faea <fm_factory_separate_k_lin_and_frec+0x72>
        }
        else
        {
            k_lin_array[i] = 0;
 800fae0:	4a19      	ldr	r2, [pc, #100]	; (800fb48 <fm_factory_separate_k_lin_and_frec+0xd0>)
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	4413      	add	r3, r2
 800fae6:	2200      	movs	r2, #0
 800fae8:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	3b01      	subs	r3, #1
 800faee:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	dadc      	bge.n	800fab0 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800faf6:	e01f      	b.n	800fb38 <fm_factory_separate_k_lin_and_frec+0xc0>
    {
        if (frec_num > 0)
 800faf8:	6a3b      	ldr	r3, [r7, #32]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d014      	beq.n	800fb28 <fm_factory_separate_k_lin_and_frec+0xb0>
        {
            frec_array[j] = frec_num % ten_multipllier;
 800fafe:	230a      	movs	r3, #10
 800fb00:	461a      	mov	r2, r3
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb08:	fb01 f202 	mul.w	r2, r1, r2
 800fb0c:	1a9b      	subs	r3, r3, r2
 800fb0e:	b2d9      	uxtb	r1, r3
 800fb10:	4a0e      	ldr	r2, [pc, #56]	; (800fb4c <fm_factory_separate_k_lin_and_frec+0xd4>)
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	4413      	add	r3, r2
 800fb16:	460a      	mov	r2, r1
 800fb18:	701a      	strb	r2, [r3, #0]
            frec_num /= ten_multipllier;
 800fb1a:	230a      	movs	r3, #10
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb24:	623b      	str	r3, [r7, #32]
 800fb26:	e004      	b.n	800fb32 <fm_factory_separate_k_lin_and_frec+0xba>
        }
        else
        {
            frec_array[j] = 0;
 800fb28:	4a08      	ldr	r2, [pc, #32]	; (800fb4c <fm_factory_separate_k_lin_and_frec+0xd4>)
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	2200      	movs	r2, #0
 800fb30:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	61bb      	str	r3, [r7, #24]
    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	dadc      	bge.n	800faf8 <fm_factory_separate_k_lin_and_frec+0x80>
    }
}
 800fb3e:	bf00      	nop
 800fb40:	bf00      	nop
 800fb42:	3728      	adds	r7, #40	; 0x28
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	20001d30 	.word	0x20001d30
 800fb4c:	20001d38 	.word	0x20001d38

0800fb50 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	4603      	mov	r3, r0
 800fb58:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800fb5a:	2015      	movs	r0, #21
 800fb5c:	f7f4 fb5a 	bl	8004214 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800fb60:	2016      	movs	r0, #22
 800fb62:	f7f4 fb57 	bl	8004214 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800fb66:	2017      	movs	r0, #23
 800fb68:	f7f4 fb54 	bl	8004214 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800fb6c:	2018      	movs	r0, #24
 800fb6e:	f7f4 fb51 	bl	8004214 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800fb72:	88fb      	ldrh	r3, [r7, #6]
 800fb74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb78:	d018      	beq.n	800fbac <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800fb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb7e:	dc18      	bgt.n	800fbb2 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800fb80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb84:	d00f      	beq.n	800fba6 <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800fb86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb8a:	dc12      	bgt.n	800fbb2 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800fb8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb90:	d003      	beq.n	800fb9a <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800fb92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb96:	d003      	beq.n	800fba0 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800fb98:	e00b      	b.n	800fbb2 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	73fb      	strb	r3, [r7, #15]
        break;
 800fb9e:	e009      	b.n	800fbb4 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800fba0:	2303      	movs	r3, #3
 800fba2:	73fb      	strb	r3, [r7, #15]
        break;
 800fba4:	e006      	b.n	800fbb4 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800fba6:	2304      	movs	r3, #4
 800fba8:	73fb      	strb	r3, [r7, #15]
        break;
 800fbaa:	e003      	b.n	800fbb4 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800fbac:	2305      	movs	r3, #5
 800fbae:	73fb      	strb	r3, [r7, #15]
        break;
 800fbb0:	e000      	b.n	800fbb4 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800fbb2:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800fbb4:	f107 030f 	add.w	r3, r7, #15
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4805      	ldr	r0, [pc, #20]	; (800fbd4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800fbbe:	f7fe fdeb 	bl	800e798 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800fbc2:	2101      	movs	r1, #1
 800fbc4:	4804      	ldr	r0, [pc, #16]	; (800fbd8 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800fbc6:	f7fe fe31 	bl	800e82c <_txe_semaphore_ceiling_put>
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	20001388 	.word	0x20001388
 800fbd8:	2000136c 	.word	0x2000136c

0800fbdc <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b0b8      	sub	sp, #224	; 0xe0
 800fbe0:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fbe2:	f107 0318 	add.w	r3, r7, #24
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f004 ffda 	bl	8014ba0 <fmc_get_acm>
 800fbec:	2314      	movs	r3, #20
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	1d3b      	adds	r3, r7, #4
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	2309      	movs	r3, #9
 800fbf6:	2220      	movs	r2, #32
 800fbf8:	f107 0120 	add.w	r1, r7, #32
 800fbfc:	c903      	ldmia	r1, {r0, r1}
 800fbfe:	f000 fa13 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800fc02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fc06:	4618      	mov	r0, r3
 800fc08:	f004 ffca 	bl	8014ba0 <fmc_get_acm>
 800fc0c:	1d3a      	adds	r2, r7, #4
 800fc0e:	2314      	movs	r3, #20
 800fc10:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800fc14:	c903      	ldmia	r1, {r0, r1}
 800fc16:	f000 f9c3 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fc1a:	1d3b      	adds	r3, r7, #4
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f000 fbea 	bl	80103f8 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800fc24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f004 fff9 	bl	8014c20 <fmc_get_rate>
 800fc2e:	2314      	movs	r3, #20
 800fc30:	9301      	str	r3, [sp, #4]
 800fc32:	1d3b      	adds	r3, r7, #4
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	2308      	movs	r3, #8
 800fc38:	2220      	movs	r2, #32
 800fc3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800fc3e:	c903      	ldmia	r1, {r0, r1}
 800fc40:	f000 f9f2 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800fc44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f004 ffe9 	bl	8014c20 <fmc_get_rate>
 800fc4e:	1d3a      	adds	r2, r7, #4
 800fc50:	2314      	movs	r3, #20
 800fc52:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800fc56:	c903      	ldmia	r1, {r0, r1}
 800fc58:	f000 f9a2 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fc5c:	1d3b      	adds	r3, r7, #4
 800fc5e:	2101      	movs	r1, #1
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 fbc9 	bl	80103f8 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fc66:	2100      	movs	r1, #0
 800fc68:	2006      	movs	r0, #6
 800fc6a:	f001 ff2b 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800fc6e:	2100      	movs	r1, #0
 800fc70:	2002      	movs	r0, #2
 800fc72:	f001 ff27 	bl	8011ac4 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800fc76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f004 ff90 	bl	8014ba0 <fmc_get_acm>
 800fc80:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800fc84:	2100      	movs	r1, #0
 800fc86:	4618      	mov	r0, r3
 800fc88:	f002 fadc 	bl	8012244 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	2007      	movs	r0, #7
 800fc90:	f001 ff18 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800fc94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f004 ff81 	bl	8014ba0 <fmc_get_acm>
 800fc9e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800fca2:	2100      	movs	r1, #0
 800fca4:	4618      	mov	r0, r3
 800fca6:	f002 fa8b 	bl	80121c0 <lcd_set_time_unit>
}
 800fcaa:	bf00      	nop
 800fcac:	37d8      	adds	r7, #216	; 0xd8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b0a2      	sub	sp, #136	; 0x88
 800fcb6:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fcb8:	f107 0318 	add.w	r3, r7, #24
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f004 ff6f 	bl	8014ba0 <fmc_get_acm>
 800fcc2:	2314      	movs	r3, #20
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	1d3b      	adds	r3, r7, #4
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	2309      	movs	r3, #9
 800fccc:	2220      	movs	r2, #32
 800fcce:	f107 0120 	add.w	r1, r7, #32
 800fcd2:	c903      	ldmia	r1, {r0, r1}
 800fcd4:	f000 f9a8 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800fcd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f004 ff5f 	bl	8014ba0 <fmc_get_acm>
 800fce2:	1d3a      	adds	r2, r7, #4
 800fce4:	2314      	movs	r3, #20
 800fce6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800fcea:	c903      	ldmia	r1, {r0, r1}
 800fcec:	f000 f958 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fcf0:	1d3b      	adds	r3, r7, #4
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f000 fb7f 	bl	80103f8 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800fcfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f004 ffce 	bl	8014ca0 <fmc_get_stm32_temp>
 800fd04:	2314      	movs	r3, #20
 800fd06:	9301      	str	r3, [sp, #4]
 800fd08:	1d3b      	adds	r3, r7, #4
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	2308      	movs	r3, #8
 800fd0e:	2220      	movs	r2, #32
 800fd10:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fd14:	c903      	ldmia	r1, {r0, r1}
 800fd16:	f000 f987 	bl	8010028 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800fd1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f004 ffbe 	bl	8014ca0 <fmc_get_stm32_temp>
 800fd24:	1d3a      	adds	r2, r7, #4
 800fd26:	2314      	movs	r3, #20
 800fd28:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800fd2c:	c903      	ldmia	r1, {r0, r1}
 800fd2e:	f000 f937 	bl	800ffa0 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fd32:	1d3b      	adds	r3, r7, #4
 800fd34:	2101      	movs	r1, #1
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fb5e 	bl	80103f8 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	2006      	movs	r0, #6
 800fd40:	f001 fec0 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800fd44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f004 ffa9 	bl	8014ca0 <fmc_get_stm32_temp>
 800fd4e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fd52:	2100      	movs	r1, #0
 800fd54:	4618      	mov	r0, r3
 800fd56:	f002 fa75 	bl	8012244 <lcd_set_vol_unit>
}
 800fd5a:	bf00      	nop
 800fd5c:	3780      	adds	r7, #128	; 0x80
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fd66:	f000 fd5f 	bl	8010828 <lcd_clear_all>
}
 800fd6a:	bf00      	nop
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <fm_lcd_date_hour>:
 * @param Campo seleccionado el cual debe titilar.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b090      	sub	sp, #64	; 0x40
 800fd74:	af02      	add	r7, sp, #8
 800fd76:	4603      	mov	r3, r0
 800fd78:	73fb      	strb	r3, [r7, #15]
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	73bb      	strb	r3, [r7, #14]
 800fd7e:	4613      	mov	r3, r2
 800fd80:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if (configuration)
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d00a      	beq.n	800fd9e <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fd88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff f975 	bl	800f07c <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800fd92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff f994 	bl	800f0c4 <fm_factory_get_fp_time_conf>
 800fd9c:	e019      	b.n	800fdd2 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fd9e:	f7ff f893 	bl	800eec8 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fda2:	f7ff f8b7 	bl	800ef14 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800fda6:	463b      	mov	r3, r7
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7ff f955 	bl	800f058 <fm_factory_get_fp_date>
 800fdae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdb2:	463a      	mov	r2, r7
 800fdb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdb8:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fdbc:	463b      	mov	r3, r7
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff f96e 	bl	800f0a0 <fm_factory_get_fp_time>
 800fdc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdc8:	463a      	mov	r2, r7
 800fdca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdce:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fdd2:	2314      	movs	r3, #20
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	f107 0314 	add.w	r3, r7, #20
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	2309      	movs	r3, #9
 800fdde:	2230      	movs	r2, #48	; 0x30
 800fde0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fde4:	c903      	ldmia	r1, {r0, r1}
 800fde6:	f000 f91f 	bl	8010028 <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fdea:	f107 0314 	add.w	r3, r7, #20
 800fdee:	2100      	movs	r1, #0
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 fb01 	bl	80103f8 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fdf6:	2101      	movs	r1, #1
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f001 fdb7 	bl	801196c <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fdfe:	2103      	movs	r1, #3
 800fe00:	2000      	movs	r0, #0
 800fe02:	f001 fdb3 	bl	801196c <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fe06:	2314      	movs	r3, #20
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	f107 0314 	add.w	r3, r7, #20
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2308      	movs	r3, #8
 800fe12:	2230      	movs	r2, #48	; 0x30
 800fe14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fe18:	c903      	ldmia	r1, {r0, r1}
 800fe1a:	f000 f905 	bl	8010028 <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fe1e:	f107 0314 	add.w	r3, r7, #20
 800fe22:	2101      	movs	r1, #1
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 fae7 	bl	80103f8 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fe2a:	2101      	movs	r1, #1
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	f000 fd23 	bl	8010878 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fe32:	2102      	movs	r1, #2
 800fe34:	2001      	movs	r0, #1
 800fe36:	f001 fd99 	bl	801196c <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800fe3a:	2104      	movs	r1, #4
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	f001 fd95 	bl	801196c <lcd_set_point>

    if (configuration)
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d07e      	beq.n	800ff46 <fm_lcd_date_hour+0x1d6>
    {
        if (event_id == EVENT_KEY_ENTER
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	2b04      	cmp	r3, #4
 800fe4c:	d006      	beq.n	800fe5c <fm_lcd_date_hour+0xec>
        || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fe4e:	4b40      	ldr	r3, [pc, #256]	; (800ff50 <fm_lcd_date_hour+0x1e0>)
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2b04      	cmp	r3, #4
 800fe54:	d106      	bne.n	800fe64 <fm_lcd_date_hour+0xf4>
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d103      	bne.n	800fe64 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800fe5c:	4b3d      	ldr	r3, [pc, #244]	; (800ff54 <fm_lcd_date_hour+0x1e4>)
 800fe5e:	2201      	movs	r2, #1
 800fe60:	601a      	str	r2, [r3, #0]
 800fe62:	e016      	b.n	800fe92 <fm_lcd_date_hour+0x122>
        }
        else if (event_id == EVENT_KEY_DOWN
 800fe64:	7bbb      	ldrb	r3, [r7, #14]
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	d010      	beq.n	800fe8c <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fe6a:	4b39      	ldr	r3, [pc, #228]	; (800ff50 <fm_lcd_date_hour+0x1e0>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d102      	bne.n	800fe78 <fm_lcd_date_hour+0x108>
 800fe72:	7bbb      	ldrb	r3, [r7, #14]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d009      	beq.n	800fe8c <fm_lcd_date_hour+0x11c>
        || event_id == EVENT_KEY_UP
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d006      	beq.n	800fe8c <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fe7e:	4b34      	ldr	r3, [pc, #208]	; (800ff50 <fm_lcd_date_hour+0x1e0>)
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d105      	bne.n	800fe92 <fm_lcd_date_hour+0x122>
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d102      	bne.n	800fe92 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fe8c:	4b31      	ldr	r3, [pc, #196]	; (800ff54 <fm_lcd_date_hour+0x1e4>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	601a      	str	r2, [r3, #0]
        }

        if (blink == 1)
 800fe92:	4b30      	ldr	r3, [pc, #192]	; (800ff54 <fm_lcd_date_hour+0x1e4>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d152      	bne.n	800ff40 <fm_lcd_date_hour+0x1d0>
        {
            if (field == DAY)
 800fe9a:	7b7b      	ldrb	r3, [r7, #13]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d108      	bne.n	800feb2 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fea0:	2100      	movs	r1, #0
 800fea2:	2001      	movs	r0, #1
 800fea4:	f000 fce8 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fea8:	2100      	movs	r1, #0
 800feaa:	2000      	movs	r0, #0
 800feac:	f000 fce4 	bl	8010878 <lcd_clear_digit>
 800feb0:	e042      	b.n	800ff38 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MONTH)
 800feb2:	7b7b      	ldrb	r3, [r7, #13]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d108      	bne.n	800feca <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800feb8:	2100      	movs	r1, #0
 800feba:	2003      	movs	r0, #3
 800febc:	f000 fcdc 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fec0:	2100      	movs	r1, #0
 800fec2:	2002      	movs	r0, #2
 800fec4:	f000 fcd8 	bl	8010878 <lcd_clear_digit>
 800fec8:	e036      	b.n	800ff38 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == YEAR)
 800feca:	7b7b      	ldrb	r3, [r7, #13]
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d110      	bne.n	800fef2 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fed0:	2100      	movs	r1, #0
 800fed2:	2007      	movs	r0, #7
 800fed4:	f000 fcd0 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fed8:	2100      	movs	r1, #0
 800feda:	2006      	movs	r0, #6
 800fedc:	f000 fccc 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fee0:	2100      	movs	r1, #0
 800fee2:	2005      	movs	r0, #5
 800fee4:	f000 fcc8 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fee8:	2100      	movs	r1, #0
 800feea:	2004      	movs	r0, #4
 800feec:	f000 fcc4 	bl	8010878 <lcd_clear_digit>
 800fef0:	e022      	b.n	800ff38 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == HOUR)
 800fef2:	7b7b      	ldrb	r3, [r7, #13]
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d108      	bne.n	800ff0a <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fef8:	2101      	movs	r1, #1
 800fefa:	2002      	movs	r0, #2
 800fefc:	f000 fcbc 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800ff00:	2101      	movs	r1, #1
 800ff02:	2001      	movs	r0, #1
 800ff04:	f000 fcb8 	bl	8010878 <lcd_clear_digit>
 800ff08:	e016      	b.n	800ff38 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MINUTE)
 800ff0a:	7b7b      	ldrb	r3, [r7, #13]
 800ff0c:	2b04      	cmp	r3, #4
 800ff0e:	d108      	bne.n	800ff22 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800ff10:	2101      	movs	r1, #1
 800ff12:	2004      	movs	r0, #4
 800ff14:	f000 fcb0 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800ff18:	2101      	movs	r1, #1
 800ff1a:	2003      	movs	r0, #3
 800ff1c:	f000 fcac 	bl	8010878 <lcd_clear_digit>
 800ff20:	e00a      	b.n	800ff38 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == SECOND)
 800ff22:	7b7b      	ldrb	r3, [r7, #13]
 800ff24:	2b05      	cmp	r3, #5
 800ff26:	d107      	bne.n	800ff38 <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800ff28:	2101      	movs	r1, #1
 800ff2a:	2006      	movs	r0, #6
 800ff2c:	f000 fca4 	bl	8010878 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800ff30:	2101      	movs	r1, #1
 800ff32:	2005      	movs	r0, #5
 800ff34:	f000 fca0 	bl	8010878 <lcd_clear_digit>
            }

            blink = 0;
 800ff38:	4b06      	ldr	r3, [pc, #24]	; (800ff54 <fm_lcd_date_hour+0x1e4>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800ff3e:	e002      	b.n	800ff46 <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800ff40:	4b04      	ldr	r3, [pc, #16]	; (800ff54 <fm_lcd_date_hour+0x1e4>)
 800ff42:	2201      	movs	r2, #1
 800ff44:	601a      	str	r2, [r3, #0]
}
 800ff46:	bf00      	nop
 800ff48:	3738      	adds	r7, #56	; 0x38
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20001e0f 	.word	0x20001e0f
 800ff54:	2000011c 	.word	0x2000011c

0800ff58 <fm_lcd_format_number_in_line>:
 * @param Longitud de este String.
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60b9      	str	r1, [r7, #8]
 800ff60:	607a      	str	r2, [r7, #4]
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4a09      	ldr	r2, [pc, #36]	; (800ff98 <fm_lcd_format_number_in_line+0x40>)
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f004 ff8d 	bl	8014e94 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800ff7a:	e008      	b.n	800ff8e <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d105      	bne.n	800ff8e <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800ff82:	6839      	ldr	r1, [r7, #0]
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	4a05      	ldr	r2, [pc, #20]	; (800ff9c <fm_lcd_format_number_in_line+0x44>)
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f004 ff83 	bl	8014e94 <sniprintf>
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	080159c8 	.word	0x080159c8
 800ff9c:	080159d0 	.word	0x080159d0

0800ffa0 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	f107 0408 	add.w	r4, r7, #8
 800ffaa:	e884 0003 	stmia.w	r4, {r0, r1}
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800ffb2:	7b3b      	ldrb	r3, [r7, #12]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d101      	bne.n	800ffbc <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800ffb8:	2300      	movs	r3, #0
 800ffba:	e031      	b.n	8010020 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7f0 fa81 	bl	80004c4 <strlen>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	3302      	adds	r3, #2
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	dc02      	bgt.n	800ffd6 <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800ffd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd4:	e024      	b.n	8010020 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800ffd6:	7b3b      	ldrb	r3, [r7, #12]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	1a9b      	subs	r3, r3, r2
 800ffde:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800ffe0:	e00b      	b.n	800fffa <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	441a      	add	r2, r3
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	3301      	adds	r3, #1
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	440b      	add	r3, r1
 800fff0:	7812      	ldrb	r2, [r2, #0]
 800fff2:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fffa:	697a      	ldr	r2, [r7, #20]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d1ef      	bne.n	800ffe2 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	441a      	add	r2, r3
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	3301      	adds	r3, #1
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	440b      	add	r3, r1
 8010010:	7812      	ldrb	r2, [r2, #0]
 8010012:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	4413      	add	r3, r2
 801001a:	222e      	movs	r2, #46	; 0x2e
 801001c:	701a      	strb	r2, [r3, #0]

    return (0);
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	371c      	adds	r7, #28
 8010024:	46bd      	mov	sp, r7
 8010026:	bd90      	pop	{r4, r7, pc}

08010028 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 8010028:	b490      	push	{r4, r7}
 801002a:	b088      	sub	sp, #32
 801002c:	af00      	add	r7, sp, #0
 801002e:	f107 0408 	add.w	r4, r7, #8
 8010032:	e884 0003 	stmia.w	r4, {r0, r1}
 8010036:	603b      	str	r3, [r7, #0]
 8010038:	4613      	mov	r3, r2
 801003a:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 801003c:	2300      	movs	r3, #0
 801003e:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 8010040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010042:	2b13      	cmp	r3, #19
 8010044:	dc02      	bgt.n	801004c <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 8010046:	f04f 33ff 	mov.w	r3, #4294967295
 801004a:	e07d      	b.n	8010148 <fm_lcd_fp_to_str+0x120>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % ten_multiplier + '0';
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	220a      	movs	r2, #10
 8010050:	fbb3 f1f2 	udiv	r1, r3, r2
 8010054:	fb01 f202 	mul.w	r2, r1, r2
 8010058:	1a9b      	subs	r3, r3, r2
 801005a:	b2da      	uxtb	r2, r3
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010060:	440b      	add	r3, r1
 8010062:	3230      	adds	r2, #48	; 0x30
 8010064:	b2d2      	uxtb	r2, r2
 8010066:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / ten_multiplier)
 801006c:	e015      	b.n	801009a <fm_lcd_fp_to_str+0x72>
    {
        idx_1++;
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	3301      	adds	r3, #1
 8010072:	61fb      	str	r3, [r7, #28]
        fp.num /= ten_multiplier;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	220a      	movs	r2, #10
 8010078:	fbb3 f3f2 	udiv	r3, r3, r2
 801007c:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % ten_multiplier + '0';
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	220a      	movs	r2, #10
 8010082:	fbb3 f1f2 	udiv	r1, r3, r2
 8010086:	fb01 f202 	mul.w	r2, r1, r2
 801008a:	1a9b      	subs	r3, r3, r2
 801008c:	b2da      	uxtb	r2, r3
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010092:	440b      	add	r3, r1
 8010094:	3230      	adds	r2, #48	; 0x30
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
    while (fp.num / ten_multiplier)
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	220a      	movs	r2, #10
 801009e:	4293      	cmp	r3, r2
 80100a0:	d2e5      	bcs.n	801006e <fm_lcd_fp_to_str+0x46>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d116      	bne.n	80100d6 <fm_lcd_fp_to_str+0xae>
    {
        while (idx_1 < fp.res)
 80100a8:	e010      	b.n	80100cc <fm_lcd_fp_to_str+0xa4>
        {
            idx_1++;
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	3301      	adds	r3, #1
 80100ae:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % ten_multiplier + '0';
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	220a      	movs	r2, #10
 80100b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80100b8:	fb01 f202 	mul.w	r2, r1, r2
 80100bc:	1a9b      	subs	r3, r3, r2
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100c4:	440b      	add	r3, r1
 80100c6:	3230      	adds	r2, #48	; 0x30
 80100c8:	b2d2      	uxtb	r2, r2
 80100ca:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 80100cc:	7b3b      	ldrb	r3, [r7, #12]
 80100ce:	461a      	mov	r2, r3
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	4293      	cmp	r3, r2
 80100d4:	dbe9      	blt.n	80100aa <fm_lcd_fp_to_str+0x82>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00d      	beq.n	80100f8 <fm_lcd_fp_to_str+0xd0>
    {
        while (idx_1 < str_width - 1)
 80100dc:	e007      	b.n	80100ee <fm_lcd_fp_to_str+0xc6>
        {
            idx_1++;
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	3301      	adds	r3, #1
 80100e2:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e8:	4413      	add	r3, r2
 80100ea:	79fa      	ldrb	r2, [r7, #7]
 80100ec:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	69fa      	ldr	r2, [r7, #28]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	dbf2      	blt.n	80100de <fm_lcd_fp_to_str+0xb6>
        }
    }
    p_str[idx_1] = '\0';
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100fc:	4413      	add	r3, r2
 80100fe:	2200      	movs	r2, #0
 8010100:	701a      	strb	r2, [r3, #0]
    idx_1--;
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	3b01      	subs	r3, #1
 8010106:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 801010c:	e017      	b.n	801013e <fm_lcd_fp_to_str+0x116>
    {
        ch_temp = p_str[idx_1];
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010112:	4413      	add	r3, r2
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801011c:	441a      	add	r2, r3
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010122:	440b      	add	r3, r1
 8010124:	7812      	ldrb	r2, [r2, #0]
 8010126:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012c:	4413      	add	r3, r2
 801012e:	7cfa      	ldrb	r2, [r7, #19]
 8010130:	701a      	strb	r2, [r3, #0]
        idx_1--;
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	3b01      	subs	r3, #1
 8010136:	61fb      	str	r3, [r7, #28]
        idx_2++;
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	3301      	adds	r3, #1
 801013c:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 801013e:	69fa      	ldr	r2, [r7, #28]
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	429a      	cmp	r2, r3
 8010144:	dce3      	bgt.n	801010e <fm_lcd_fp_to_str+0xe6>
    }

    return (0);
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3720      	adds	r7, #32
 801014c:	46bd      	mov	sp, r7
 801014e:	bc90      	pop	{r4, r7}
 8010150:	4770      	bx	lr

08010152 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 8010152:	b580      	push	{r7, lr}
 8010154:	af00      	add	r7, sp, #0
    lcd_clear_all();
 8010156:	f000 fb67 	bl	8010828 <lcd_clear_all>
    lcd_init();
 801015a:	f001 f9fd 	bl	8011558 <lcd_init>
}
 801015e:	bf00      	nop
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <fm_lcd_k_factor>:
 * @param Evento actual con el que se imprime esta pantalla.
 * @param Dígito a modificar el cual debe titilar.
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b08e      	sub	sp, #56	; 0x38
 8010168:	af02      	add	r7, sp, #8
 801016a:	4603      	mov	r3, r0
 801016c:	460a      	mov	r2, r1
 801016e:	71fb      	strb	r3, [r7, #7]
 8010170:	4613      	mov	r3, r2
 8010172:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 8010174:	f107 0320 	add.w	r3, r7, #32
 8010178:	2100      	movs	r1, #0
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff f804 	bl	800f188 <fm_factory_get_k_factor>
 8010180:	2314      	movs	r3, #20
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	f107 030c 	add.w	r3, r7, #12
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	2309      	movs	r3, #9
 801018c:	2230      	movs	r2, #48	; 0x30
 801018e:	f107 0120 	add.w	r1, r7, #32
 8010192:	c903      	ldmia	r1, {r0, r1}
 8010194:	f7ff ff48 	bl	8010028 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 8010198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801019c:	2100      	movs	r1, #0
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fff2 	bl	800f188 <fm_factory_get_k_factor>
 80101a4:	f107 020c 	add.w	r2, r7, #12
 80101a8:	2314      	movs	r3, #20
 80101aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80101ae:	c903      	ldmia	r1, {r0, r1}
 80101b0:	f7ff fef6 	bl	800ffa0 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80101b4:	f107 030c 	add.w	r3, r7, #12
 80101b8:	2100      	movs	r1, #0
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 f91c 	bl	80103f8 <fm_lcd_puts>

    if (event_id == EVENT_KEY_ENTER
 80101c0:	79fb      	ldrb	r3, [r7, #7]
 80101c2:	2b04      	cmp	r3, #4
 80101c4:	d006      	beq.n	80101d4 <fm_lcd_k_factor+0x70>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 80101c6:	4b1e      	ldr	r3, [pc, #120]	; (8010240 <fm_lcd_k_factor+0xdc>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b04      	cmp	r3, #4
 80101cc:	d106      	bne.n	80101dc <fm_lcd_k_factor+0x78>
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d103      	bne.n	80101dc <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 80101d4:	4b1b      	ldr	r3, [pc, #108]	; (8010244 <fm_lcd_k_factor+0xe0>)
 80101d6:	2201      	movs	r2, #1
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	e016      	b.n	801020a <fm_lcd_k_factor+0xa6>
    }
    else if (event_id == EVENT_KEY_DOWN
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d010      	beq.n	8010204 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 80101e2:	4b17      	ldr	r3, [pc, #92]	; (8010240 <fm_lcd_k_factor+0xdc>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b03      	cmp	r3, #3
 80101e8:	d102      	bne.n	80101f0 <fm_lcd_k_factor+0x8c>
 80101ea:	79fb      	ldrb	r3, [r7, #7]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d009      	beq.n	8010204 <fm_lcd_k_factor+0xa0>
    || event_id == EVENT_KEY_UP
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d006      	beq.n	8010204 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 80101f6:	4b12      	ldr	r3, [pc, #72]	; (8010240 <fm_lcd_k_factor+0xdc>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	d105      	bne.n	801020a <fm_lcd_k_factor+0xa6>
 80101fe:	79fb      	ldrb	r3, [r7, #7]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d102      	bne.n	801020a <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 8010204:	4b0f      	ldr	r3, [pc, #60]	; (8010244 <fm_lcd_k_factor+0xe0>)
 8010206:	2200      	movs	r2, #0
 8010208:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 801020a:	4b0e      	ldr	r3, [pc, #56]	; (8010244 <fm_lcd_k_factor+0xe0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2b01      	cmp	r3, #1
 8010210:	d10b      	bne.n	801022a <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 8010212:	79bb      	ldrb	r3, [r7, #6]
 8010214:	f1c3 0307 	rsb	r3, r3, #7
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2100      	movs	r1, #0
 801021c:	4618      	mov	r0, r3
 801021e:	f000 fb2b 	bl	8010878 <lcd_clear_digit>
        blink = 0;
 8010222:	4b08      	ldr	r3, [pc, #32]	; (8010244 <fm_lcd_k_factor+0xe0>)
 8010224:	2200      	movs	r2, #0
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	e002      	b.n	8010230 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 801022a:	4b06      	ldr	r3, [pc, #24]	; (8010244 <fm_lcd_k_factor+0xe0>)
 801022c:	2201      	movs	r2, #1
 801022e:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 8010230:	2100      	movs	r1, #0
 8010232:	200b      	movs	r0, #11
 8010234:	f001 fc46 	bl	8011ac4 <lcd_set_symbol>
}
 8010238:	bf00      	nop
 801023a:	3730      	adds	r7, #48	; 0x30
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	20001e0f 	.word	0x20001e0f
 8010244:	2000011c 	.word	0x2000011c

08010248 <fm_lcd_k_lin>:
 * @param Evento actual con el que se imprimió esta pantalla.
 * @param Digito a modificar, el cual debe parpadear.
 */
void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id,
sel_digit_k_lin_t digit_lin_modify)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b090      	sub	sp, #64	; 0x40
 801024c:	af02      	add	r7, sp, #8
 801024e:	4603      	mov	r3, r0
 8010250:	71fb      	strb	r3, [r7, #7]
 8010252:	460b      	mov	r3, r1
 8010254:	71bb      	strb	r3, [r7, #6]
 8010256:	4613      	mov	r3, r2
 8010258:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 801025a:	f107 0320 	add.w	r3, r7, #32
 801025e:	79fa      	ldrb	r2, [r7, #7]
 8010260:	4611      	mov	r1, r2
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe ff90 	bl	800f188 <fm_factory_get_k_factor>
 8010268:	2314      	movs	r3, #20
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	f107 030c 	add.w	r3, r7, #12
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	2309      	movs	r3, #9
 8010274:	2230      	movs	r2, #48	; 0x30
 8010276:	f107 0120 	add.w	r1, r7, #32
 801027a:	c903      	ldmia	r1, {r0, r1}
 801027c:	f7ff fed4 	bl	8010028 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg, sizeof(lcd_msg));
 8010280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010284:	79fa      	ldrb	r2, [r7, #7]
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe ff7d 	bl	800f188 <fm_factory_get_k_factor>
 801028e:	f107 020c 	add.w	r2, r7, #12
 8010292:	2314      	movs	r3, #20
 8010294:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010298:	c903      	ldmia	r1, {r0, r1}
 801029a:	f7ff fe81 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 801029e:	f107 030c 	add.w	r3, r7, #12
 80102a2:	2100      	movs	r1, #0
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 f8a7 	bl	80103f8 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 80102aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80102ae:	79fa      	ldrb	r2, [r7, #7]
 80102b0:	4611      	mov	r1, r2
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe ff18 	bl	800f0e8 <fm_factory_get_frec_lin>
 80102b8:	2314      	movs	r3, #20
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	f107 030c 	add.w	r3, r7, #12
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	2308      	movs	r3, #8
 80102c4:	2230      	movs	r2, #48	; 0x30
 80102c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80102ca:	c903      	ldmia	r1, {r0, r1}
 80102cc:	f7ff feac 	bl	8010028 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80102d0:	f107 030c 	add.w	r3, r7, #12
 80102d4:	2101      	movs	r1, #1
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 f88e 	bl	80103f8 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 80102dc:	2101      	movs	r1, #1
 80102de:	2000      	movs	r0, #0
 80102e0:	f000 faca 	bl	8010878 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 80102e4:	2101      	movs	r1, #1
 80102e6:	2001      	movs	r0, #1
 80102e8:	f000 fac6 	bl	8010878 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 80102ec:	2101      	movs	r1, #1
 80102ee:	2002      	movs	r0, #2
 80102f0:	f000 fac2 	bl	8010878 <lcd_clear_digit>

    if (event_id == EVENT_KEY_ENTER
 80102f4:	79bb      	ldrb	r3, [r7, #6]
 80102f6:	2b04      	cmp	r3, #4
 80102f8:	d006      	beq.n	8010308 <fm_lcd_k_lin+0xc0>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 80102fa:	4b3d      	ldr	r3, [pc, #244]	; (80103f0 <fm_lcd_k_lin+0x1a8>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	2b04      	cmp	r3, #4
 8010300:	d106      	bne.n	8010310 <fm_lcd_k_lin+0xc8>
 8010302:	79bb      	ldrb	r3, [r7, #6]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d103      	bne.n	8010310 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 8010308:	4b3a      	ldr	r3, [pc, #232]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 801030a:	2201      	movs	r2, #1
 801030c:	601a      	str	r2, [r3, #0]
 801030e:	e016      	b.n	801033e <fm_lcd_k_lin+0xf6>
    }
    else if (event_id == EVENT_KEY_DOWN
 8010310:	79bb      	ldrb	r3, [r7, #6]
 8010312:	2b03      	cmp	r3, #3
 8010314:	d010      	beq.n	8010338 <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 8010316:	4b36      	ldr	r3, [pc, #216]	; (80103f0 <fm_lcd_k_lin+0x1a8>)
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	2b03      	cmp	r3, #3
 801031c:	d102      	bne.n	8010324 <fm_lcd_k_lin+0xdc>
 801031e:	79bb      	ldrb	r3, [r7, #6]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d009      	beq.n	8010338 <fm_lcd_k_lin+0xf0>
    || event_id == EVENT_KEY_UP
 8010324:	79bb      	ldrb	r3, [r7, #6]
 8010326:	2b02      	cmp	r3, #2
 8010328:	d006      	beq.n	8010338 <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 801032a:	4b31      	ldr	r3, [pc, #196]	; (80103f0 <fm_lcd_k_lin+0x1a8>)
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	2b02      	cmp	r3, #2
 8010330:	d105      	bne.n	801033e <fm_lcd_k_lin+0xf6>
 8010332:	79bb      	ldrb	r3, [r7, #6]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d102      	bne.n	801033e <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 8010338:	4b2e      	ldr	r3, [pc, #184]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 801033a:	2200      	movs	r2, #0
 801033c:	601a      	str	r2, [r3, #0]
    }

    if (digit_lin_modify <= DIG_LIN_7)
 801033e:	797b      	ldrb	r3, [r7, #5]
 8010340:	2b07      	cmp	r3, #7
 8010342:	d813      	bhi.n	801036c <fm_lcd_k_lin+0x124>
    {
        if (blink == 1)
 8010344:	4b2b      	ldr	r3, [pc, #172]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b01      	cmp	r3, #1
 801034a:	d10b      	bne.n	8010364 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 801034c:	797b      	ldrb	r3, [r7, #5]
 801034e:	f1c3 0307 	rsb	r3, r3, #7
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2100      	movs	r1, #0
 8010356:	4618      	mov	r0, r3
 8010358:	f000 fa8e 	bl	8010878 <lcd_clear_digit>
            blink = 0;
 801035c:	4b25      	ldr	r3, [pc, #148]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 801035e:	2200      	movs	r2, #0
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	e016      	b.n	8010392 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010364:	4b23      	ldr	r3, [pc, #140]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 8010366:	2201      	movs	r2, #1
 8010368:	601a      	str	r2, [r3, #0]
 801036a:	e012      	b.n	8010392 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if (blink == 1)
 801036c:	4b21      	ldr	r3, [pc, #132]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d10b      	bne.n	801038c <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010374:	797b      	ldrb	r3, [r7, #5]
 8010376:	f1c3 030e 	rsb	r3, r3, #14
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2101      	movs	r1, #1
 801037e:	4618      	mov	r0, r3
 8010380:	f000 fa7a 	bl	8010878 <lcd_clear_digit>
            blink = 0;
 8010384:	4b1b      	ldr	r3, [pc, #108]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 8010386:	2200      	movs	r2, #0
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e002      	b.n	8010392 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 801038c:	4b19      	ldr	r3, [pc, #100]	; (80103f4 <fm_lcd_k_lin+0x1ac>)
 801038e:	2201      	movs	r2, #1
 8010390:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 8010392:	2100      	movs	r1, #0
 8010394:	2010      	movs	r0, #16
 8010396:	f001 fb95 	bl	8011ac4 <lcd_set_symbol>
    if (k_sel == K_LIN_1)
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d103      	bne.n	80103a8 <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 80103a0:	2100      	movs	r1, #0
 80103a2:	2011      	movs	r0, #17
 80103a4:	f001 fb8e 	bl	8011ac4 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_2)
 80103a8:	79fb      	ldrb	r3, [r7, #7]
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d103      	bne.n	80103b6 <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 80103ae:	2100      	movs	r1, #0
 80103b0:	2012      	movs	r0, #18
 80103b2:	f001 fb87 	bl	8011ac4 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_3)
 80103b6:	79fb      	ldrb	r3, [r7, #7]
 80103b8:	2b03      	cmp	r3, #3
 80103ba:	d103      	bne.n	80103c4 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 80103bc:	2100      	movs	r1, #0
 80103be:	2013      	movs	r0, #19
 80103c0:	f001 fb80 	bl	8011ac4 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_4)
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	2b04      	cmp	r3, #4
 80103c8:	d103      	bne.n	80103d2 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 80103ca:	2100      	movs	r1, #0
 80103cc:	2014      	movs	r0, #20
 80103ce:	f001 fb79 	bl	8011ac4 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_5)
 80103d2:	79fb      	ldrb	r3, [r7, #7]
 80103d4:	2b05      	cmp	r3, #5
 80103d6:	d103      	bne.n	80103e0 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 80103d8:	2100      	movs	r1, #0
 80103da:	2015      	movs	r0, #21
 80103dc:	f001 fb72 	bl	8011ac4 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ, 0x00);
 80103e0:	2100      	movs	r1, #0
 80103e2:	2016      	movs	r0, #22
 80103e4:	f001 fb6e 	bl	8011ac4 <lcd_set_symbol>
}
 80103e8:	bf00      	nop
 80103ea:	3738      	adds	r7, #56	; 0x38
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	20001e0f 	.word	0x20001e0f
 80103f4:	2000011c 	.word	0x2000011c

080103f8 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	460b      	mov	r3, r1
 8010402:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d102      	bne.n	8010414 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 801040e:	2308      	movs	r3, #8
 8010410:	73bb      	strb	r3, [r7, #14]
 8010412:	e026      	b.n	8010462 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 8010414:	2307      	movs	r3, #7
 8010416:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 8010418:	e023      	b.n	8010462 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b2f      	cmp	r3, #47	; 0x2f
 8010420:	d903      	bls.n	801042a <fm_lcd_puts+0x32>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b39      	cmp	r3, #57	; 0x39
 8010428:	d907      	bls.n	801043a <fm_lcd_puts+0x42>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b20      	cmp	r3, #32
 8010430:	d003      	beq.n	801043a <fm_lcd_puts+0x42>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	2b2e      	cmp	r3, #46	; 0x2e
 8010438:	d106      	bne.n	8010448 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	78fa      	ldrb	r2, [r7, #3]
 8010440:	7bf9      	ldrb	r1, [r7, #15]
 8010442:	4618      	mov	r0, r3
 8010444:	f001 f88e 	bl	8011564 <lcd_put_char>
        }
        col++;
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	3301      	adds	r3, #1
 801044c:	73fb      	strb	r3, [r7, #15]
        c++;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3301      	adds	r3, #1
 8010452:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b2e      	cmp	r3, #46	; 0x2e
 801045a:	d102      	bne.n	8010462 <fm_lcd_puts+0x6a>
        {
            col--;
 801045c:	7bfb      	ldrb	r3, [r7, #15]
 801045e:	3b01      	subs	r3, #1
 8010460:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d003      	beq.n	8010472 <fm_lcd_puts+0x7a>
 801046a:	7bfa      	ldrb	r2, [r7, #15]
 801046c:	7bbb      	ldrb	r3, [r7, #14]
 801046e:	429a      	cmp	r2, r3
 8010470:	d3d3      	bcc.n	801041a <fm_lcd_puts+0x22>
        }
    }
}
 8010472:	bf00      	nop
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 801047a:	b580      	push	{r7, lr}
 801047c:	af00      	add	r7, sp, #0
    lcd_refresh();
 801047e:	f001 fa6f 	bl	8011960 <lcd_refresh>
}
 8010482:	bf00      	nop
 8010484:	bd80      	pop	{r7, pc}

08010486 <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b0b8      	sub	sp, #224	; 0xe0
 801048a:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 801048c:	f107 0318 	add.w	r3, r7, #24
 8010490:	4618      	mov	r0, r3
 8010492:	f004 fc2b 	bl	8014cec <fmc_get_ttl>
 8010496:	2314      	movs	r3, #20
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	1d3b      	adds	r3, r7, #4
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	2309      	movs	r3, #9
 80104a0:	2220      	movs	r2, #32
 80104a2:	f107 0120 	add.w	r1, r7, #32
 80104a6:	c903      	ldmia	r1, {r0, r1}
 80104a8:	f7ff fdbe 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 80104ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104b0:	4618      	mov	r0, r3
 80104b2:	f004 fc1b 	bl	8014cec <fmc_get_ttl>
 80104b6:	1d3a      	adds	r2, r7, #4
 80104b8:	2314      	movs	r3, #20
 80104ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80104be:	c903      	ldmia	r1, {r0, r1}
 80104c0:	f7ff fd6e 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80104c4:	1d3b      	adds	r3, r7, #4
 80104c6:	2100      	movs	r1, #0
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7ff ff95 	bl	80103f8 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 80104ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80104d2:	4618      	mov	r0, r3
 80104d4:	f004 fba4 	bl	8014c20 <fmc_get_rate>
 80104d8:	2314      	movs	r3, #20
 80104da:	9301      	str	r3, [sp, #4]
 80104dc:	1d3b      	adds	r3, r7, #4
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	2308      	movs	r3, #8
 80104e2:	2220      	movs	r2, #32
 80104e4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80104e8:	c903      	ldmia	r1, {r0, r1}
 80104ea:	f7ff fd9d 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 80104ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80104f2:	4618      	mov	r0, r3
 80104f4:	f004 fb94 	bl	8014c20 <fmc_get_rate>
 80104f8:	1d3a      	adds	r2, r7, #4
 80104fa:	2314      	movs	r3, #20
 80104fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8010500:	c903      	ldmia	r1, {r0, r1}
 8010502:	f7ff fd4d 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010506:	1d3b      	adds	r3, r7, #4
 8010508:	2101      	movs	r1, #1
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff ff74 	bl	80103f8 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 8010510:	2100      	movs	r1, #0
 8010512:	2005      	movs	r0, #5
 8010514:	f001 fad6 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 8010518:	2100      	movs	r1, #0
 801051a:	2002      	movs	r0, #2
 801051c:	f001 fad2 	bl	8011ac4 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 8010520:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010524:	4618      	mov	r0, r3
 8010526:	f004 fbe1 	bl	8014cec <fmc_get_ttl>
 801052a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801052e:	2100      	movs	r1, #0
 8010530:	4618      	mov	r0, r3
 8010532:	f001 fe87 	bl	8012244 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 8010536:	2100      	movs	r1, #0
 8010538:	2007      	movs	r0, #7
 801053a:	f001 fac3 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 801053e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010542:	4618      	mov	r0, r3
 8010544:	f004 fbd2 	bl	8014cec <fmc_get_ttl>
 8010548:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 801054c:	2100      	movs	r1, #0
 801054e:	4618      	mov	r0, r3
 8010550:	f001 fe36 	bl	80121c0 <lcd_set_time_unit>
}
 8010554:	bf00      	nop
 8010556:	37d8      	adds	r7, #216	; 0xd8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b0a6      	sub	sp, #152	; 0x98
 8010560:	af02      	add	r7, sp, #8
 8010562:	4603      	mov	r3, r0
 8010564:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 8010566:	f107 0320 	add.w	r3, r7, #32
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe fea6 	bl	800f2bc <fm_factory_get_units_tim>
 8010570:	2314      	movs	r3, #20
 8010572:	9301      	str	r3, [sp, #4]
 8010574:	f107 030c 	add.w	r3, r7, #12
 8010578:	9300      	str	r3, [sp, #0]
 801057a:	2308      	movs	r3, #8
 801057c:	2230      	movs	r2, #48	; 0x30
 801057e:	f107 0120 	add.w	r1, r7, #32
 8010582:	c903      	ldmia	r1, {r0, r1}
 8010584:	f7ff fd50 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 8010588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fe95 	bl	800f2bc <fm_factory_get_units_tim>
 8010592:	f107 020c 	add.w	r2, r7, #12
 8010596:	2314      	movs	r3, #20
 8010598:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801059c:	c903      	ldmia	r1, {r0, r1}
 801059e:	f7ff fcff 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	2101      	movs	r1, #1
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7ff ff25 	bl	80103f8 <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 80105ae:	79fb      	ldrb	r3, [r7, #7]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d106      	bne.n	80105c2 <fm_lcd_units_tim+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80105b4:	4b35      	ldr	r3, [pc, #212]	; (801068c <fm_lcd_units_tim+0x130>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d005      	beq.n	80105c8 <fm_lcd_units_tim+0x6c>
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d102      	bne.n	80105c8 <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 80105c2:	4b33      	ldr	r3, [pc, #204]	; (8010690 <fm_lcd_units_tim+0x134>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 80105c8:	4b31      	ldr	r3, [pc, #196]	; (8010690 <fm_lcd_units_tim+0x134>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d146      	bne.n	801065e <fm_lcd_units_tim+0x102>
    {
        if (fm_factory_get_units_tim().res == DECIMAL_1)
 80105d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7fe fe71 	bl	800f2bc <fm_factory_get_units_tim>
 80105da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d109      	bne.n	80105f6 <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 80105e2:	2305      	movs	r3, #5
 80105e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80105e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105ec:	4619      	mov	r1, r3
 80105ee:	2001      	movs	r0, #1
 80105f0:	f000 fc80 	bl	8010ef4 <lcd_clear_point>
 80105f4:	e024      	b.n	8010640 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_2)
 80105f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fe fe5e 	bl	800f2bc <fm_factory_get_units_tim>
 8010600:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010604:	2b02      	cmp	r3, #2
 8010606:	d109      	bne.n	801061c <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 8010608:	2304      	movs	r3, #4
 801060a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 801060e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010612:	4619      	mov	r1, r3
 8010614:	2001      	movs	r0, #1
 8010616:	f000 fc6d 	bl	8010ef4 <lcd_clear_point>
 801061a:	e011      	b.n	8010640 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_3)
 801061c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010620:	4618      	mov	r0, r3
 8010622:	f7fe fe4b 	bl	800f2bc <fm_factory_get_units_tim>
 8010626:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801062a:	2b03      	cmp	r3, #3
 801062c:	d108      	bne.n	8010640 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 801062e:	2303      	movs	r3, #3
 8010630:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010634:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010638:	4619      	mov	r1, r3
 801063a:	2001      	movs	r0, #1
 801063c:	f000 fc5a 	bl	8010ef4 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 8010640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010644:	4618      	mov	r0, r3
 8010646:	f004 faeb 	bl	8014c20 <fmc_get_rate>
 801064a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f000 fcfb 	bl	801104c <lcd_clear_time_unit>

        blink = 0;
 8010656:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <fm_lcd_units_tim+0x134>)
 8010658:	2200      	movs	r2, #0
 801065a:	601a      	str	r2, [r3, #0]
 801065c:	e00d      	b.n	801067a <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 801065e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010662:	4618      	mov	r0, r3
 8010664:	f004 fadc 	bl	8014c20 <fmc_get_rate>
 8010668:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801066c:	2100      	movs	r1, #0
 801066e:	4618      	mov	r0, r3
 8010670:	f001 fda6 	bl	80121c0 <lcd_set_time_unit>
        blink = 1;
 8010674:	4b06      	ldr	r3, [pc, #24]	; (8010690 <fm_lcd_units_tim+0x134>)
 8010676:	2201      	movs	r2, #1
 8010678:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 801067a:	2100      	movs	r1, #0
 801067c:	2002      	movs	r0, #2
 801067e:	f001 fa21 	bl	8011ac4 <lcd_set_symbol>
}
 8010682:	bf00      	nop
 8010684:	3790      	adds	r7, #144	; 0x90
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	20001e0f 	.word	0x20001e0f
 8010690:	2000011c 	.word	0x2000011c

08010694 <fm_lcd_units_vol>:
 * TTL.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b0a6      	sub	sp, #152	; 0x98
 8010698:	af02      	add	r7, sp, #8
 801069a:	4603      	mov	r3, r0
 801069c:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS, lcd_msg,
 801069e:	f107 0320 	add.w	r3, r7, #32
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe fe1c 	bl	800f2e0 <fm_factory_get_units_vol>
 80106a8:	2314      	movs	r3, #20
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	f107 030c 	add.w	r3, r7, #12
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	2309      	movs	r3, #9
 80106b4:	2230      	movs	r2, #48	; 0x30
 80106b6:	f107 0120 	add.w	r1, r7, #32
 80106ba:	c903      	ldmia	r1, {r0, r1}
 80106bc:	f7ff fcb4 	bl	8010028 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 80106c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fe fe0b 	bl	800f2e0 <fm_factory_get_units_vol>
 80106ca:	f107 020c 	add.w	r2, r7, #12
 80106ce:	2314      	movs	r3, #20
 80106d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80106d4:	c903      	ldmia	r1, {r0, r1}
 80106d6:	f7ff fc63 	bl	800ffa0 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80106da:	f107 030c 	add.w	r3, r7, #12
 80106de:	2100      	movs	r1, #0
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff fe89 	bl	80103f8 <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d106      	bne.n	80106fa <fm_lcd_units_vol+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80106ec:	4b37      	ldr	r3, [pc, #220]	; (80107cc <fm_lcd_units_vol+0x138>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d005      	beq.n	8010700 <fm_lcd_units_vol+0x6c>
 80106f4:	79fb      	ldrb	r3, [r7, #7]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d102      	bne.n	8010700 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 80106fa:	4b35      	ldr	r3, [pc, #212]	; (80107d0 <fm_lcd_units_vol+0x13c>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 8010700:	4b33      	ldr	r3, [pc, #204]	; (80107d0 <fm_lcd_units_vol+0x13c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d146      	bne.n	8010796 <fm_lcd_units_vol+0x102>
    {
        if (fm_factory_get_units_vol().res == DECIMAL_1)
 8010708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801070c:	4618      	mov	r0, r3
 801070e:	f7fe fde7 	bl	800f2e0 <fm_factory_get_units_vol>
 8010712:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010716:	2b01      	cmp	r3, #1
 8010718:	d109      	bne.n	801072e <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 801071a:	2306      	movs	r3, #6
 801071c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010720:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010724:	4619      	mov	r1, r3
 8010726:	2000      	movs	r0, #0
 8010728:	f000 fbe4 	bl	8010ef4 <lcd_clear_point>
 801072c:	e024      	b.n	8010778 <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_2)
 801072e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe fdd4 	bl	800f2e0 <fm_factory_get_units_vol>
 8010738:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801073c:	2b02      	cmp	r3, #2
 801073e:	d109      	bne.n	8010754 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 8010740:	2305      	movs	r3, #5
 8010742:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010746:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801074a:	4619      	mov	r1, r3
 801074c:	2000      	movs	r0, #0
 801074e:	f000 fbd1 	bl	8010ef4 <lcd_clear_point>
 8010752:	e011      	b.n	8010778 <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_3)
 8010754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010758:	4618      	mov	r0, r3
 801075a:	f7fe fdc1 	bl	800f2e0 <fm_factory_get_units_vol>
 801075e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010762:	2b03      	cmp	r3, #3
 8010764:	d108      	bne.n	8010778 <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 8010766:	2304      	movs	r3, #4
 8010768:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 801076c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010770:	4619      	mov	r1, r3
 8010772:	2000      	movs	r0, #0
 8010774:	f000 fbbe 	bl	8010ef4 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010778:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801077c:	4618      	mov	r0, r3
 801077e:	f004 fa0f 	bl	8014ba0 <fmc_get_acm>
 8010782:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010786:	2100      	movs	r1, #0
 8010788:	4618      	mov	r0, r3
 801078a:	f000 fca1 	bl	80110d0 <lcd_clear_vol_unit>

        blink = 0;
 801078e:	4b10      	ldr	r3, [pc, #64]	; (80107d0 <fm_lcd_units_vol+0x13c>)
 8010790:	2200      	movs	r2, #0
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	e00d      	b.n	80107b2 <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010796:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801079a:	4618      	mov	r0, r3
 801079c:	f004 fa00 	bl	8014ba0 <fmc_get_acm>
 80107a0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80107a4:	2100      	movs	r1, #0
 80107a6:	4618      	mov	r0, r3
 80107a8:	f001 fd4c 	bl	8012244 <lcd_set_vol_unit>
        blink = 1;
 80107ac:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <fm_lcd_units_vol+0x13c>)
 80107ae:	2201      	movs	r2, #1
 80107b0:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 80107b2:	2100      	movs	r1, #0
 80107b4:	2006      	movs	r0, #6
 80107b6:	f001 f985 	bl	8011ac4 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 80107ba:	2100      	movs	r1, #0
 80107bc:	2005      	movs	r0, #5
 80107be:	f001 f981 	bl	8011ac4 <lcd_set_symbol>
}
 80107c2:	bf00      	nop
 80107c4:	3790      	adds	r7, #144	; 0x90
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	20001e0f 	.word	0x20001e0f
 80107d0:	2000011c 	.word	0x2000011c

080107d4 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b086      	sub	sp, #24
 80107d8:	af00      	add	r7, sp, #0
 80107da:	4603      	mov	r3, r0
 80107dc:	460a      	mov	r2, r1
 80107de:	71fb      	strb	r3, [r7, #7]
 80107e0:	4613      	mov	r3, r2
 80107e2:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 80107e4:	f004 f9c2 	bl	8014b6c <fm_version_get>
 80107e8:	4601      	mov	r1, r0
 80107ea:	f107 020c 	add.w	r2, r7, #12
 80107ee:	230c      	movs	r3, #12
 80107f0:	2001      	movs	r0, #1
 80107f2:	f7ff fbb1 	bl	800ff58 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80107f6:	f107 030c 	add.w	r3, r7, #12
 80107fa:	2101      	movs	r1, #1
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fdfb 	bl	80103f8 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 8010802:	79fb      	ldrb	r3, [r7, #7]
 8010804:	4619      	mov	r1, r3
 8010806:	2001      	movs	r0, #1
 8010808:	f001 f8b0 	bl	801196c <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 801080c:	79bb      	ldrb	r3, [r7, #6]
 801080e:	4619      	mov	r1, r3
 8010810:	2001      	movs	r0, #1
 8010812:	f001 f8ab 	bl	801196c <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 8010816:	2100      	movs	r1, #0
 8010818:	2009      	movs	r0, #9
 801081a:	f001 f953 	bl	8011ac4 <lcd_set_symbol>
}
 801081e:	bf00      	nop
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
	...

08010828 <lcd_clear_all>:
 * bits de los segmentos a imprimir.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 801082e:	f002 f873 	bl	8012918 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 8010832:	2300      	movs	r3, #0
 8010834:	607b      	str	r3, [r7, #4]
 8010836:	e013      	b.n	8010860 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 8010838:	2300      	movs	r3, #0
 801083a:	603b      	str	r3, [r7, #0]
 801083c:	e00a      	b.n	8010854 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 801083e:	4a0d      	ldr	r2, [pc, #52]	; (8010874 <lcd_clear_all+0x4c>)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	00db      	lsls	r3, r3, #3
 8010844:	441a      	add	r2, r3
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	4413      	add	r3, r2
 801084a:	2200      	movs	r2, #0
 801084c:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	3301      	adds	r3, #1
 8010852:	603b      	str	r3, [r7, #0]
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b07      	cmp	r3, #7
 8010858:	ddf1      	ble.n	801083e <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3301      	adds	r3, #1
 801085e:	607b      	str	r3, [r7, #4]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b01      	cmp	r3, #1
 8010864:	dde8      	ble.n	8010838 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 8010866:	2000      	movs	r0, #0
 8010868:	f002 f8e6 	bl	8012a38 <pcf8553_write_all>
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20001d50 	.word	0x20001d50

08010878 <lcd_clear_digit>:
 * @param Dígito a borrar de la pantalla.
 * @param Fila de este dígito.
 * @retval None
 */
void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	460a      	mov	r2, r1
 8010882:	71fb      	strb	r3, [r7, #7]
 8010884:	4613      	mov	r3, r2
 8010886:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010888:	79bb      	ldrb	r3, [r7, #6]
 801088a:	2b00      	cmp	r3, #0
 801088c:	f040 81aa 	bne.w	8010be4 <lcd_clear_digit+0x36c>
    {
        switch (digit)
 8010890:	79fb      	ldrb	r3, [r7, #7]
 8010892:	2b07      	cmp	r3, #7
 8010894:	f200 8320 	bhi.w	8010ed8 <lcd_clear_digit+0x660>
 8010898:	a201      	add	r2, pc, #4	; (adr r2, 80108a0 <lcd_clear_digit+0x28>)
 801089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089e:	bf00      	nop
 80108a0:	080108c1 	.word	0x080108c1
 80108a4:	08010925 	.word	0x08010925
 80108a8:	08010989 	.word	0x08010989
 80108ac:	080109ed 	.word	0x080109ed
 80108b0:	08010a51 	.word	0x08010a51
 80108b4:	08010ab5 	.word	0x08010ab5
 80108b8:	08010b1d 	.word	0x08010b1d
 80108bc:	08010b81 	.word	0x08010b81
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 80108c0:	4b95      	ldr	r3, [pc, #596]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108c2:	7b1b      	ldrb	r3, [r3, #12]
 80108c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	4b93      	ldr	r3, [pc, #588]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108cc:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 80108ce:	4b92      	ldr	r3, [pc, #584]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108d0:	7b1b      	ldrb	r3, [r3, #12]
 80108d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108d6:	b2da      	uxtb	r2, r3
 80108d8:	4b8f      	ldr	r3, [pc, #572]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108da:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 80108dc:	4b8e      	ldr	r3, [pc, #568]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108de:	7c5b      	ldrb	r3, [r3, #17]
 80108e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108e4:	b2da      	uxtb	r2, r3
 80108e6:	4b8c      	ldr	r3, [pc, #560]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108e8:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 80108ea:	4b8b      	ldr	r3, [pc, #556]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108ec:	7c5b      	ldrb	r3, [r3, #17]
 80108ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108f2:	b2da      	uxtb	r2, r3
 80108f4:	4b88      	ldr	r3, [pc, #544]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108f6:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 80108f8:	4b87      	ldr	r3, [pc, #540]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80108fa:	789b      	ldrb	r3, [r3, #2]
 80108fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010900:	b2da      	uxtb	r2, r3
 8010902:	4b85      	ldr	r3, [pc, #532]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010904:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 8010906:	4b84      	ldr	r3, [pc, #528]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010908:	789b      	ldrb	r3, [r3, #2]
 801090a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801090e:	b2da      	uxtb	r2, r3
 8010910:	4b81      	ldr	r3, [pc, #516]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010912:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 8010914:	4b80      	ldr	r3, [pc, #512]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010916:	79db      	ldrb	r3, [r3, #7]
 8010918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801091c:	b2da      	uxtb	r2, r3
 801091e:	4b7e      	ldr	r3, [pc, #504]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010920:	71da      	strb	r2, [r3, #7]
            break;
 8010922:	e2de      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 8010924:	4b7c      	ldr	r3, [pc, #496]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010926:	7b5b      	ldrb	r3, [r3, #13]
 8010928:	f023 0302 	bic.w	r3, r3, #2
 801092c:	b2da      	uxtb	r2, r3
 801092e:	4b7a      	ldr	r3, [pc, #488]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010930:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 8010932:	4b79      	ldr	r3, [pc, #484]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010934:	7b5b      	ldrb	r3, [r3, #13]
 8010936:	f023 0301 	bic.w	r3, r3, #1
 801093a:	b2da      	uxtb	r2, r3
 801093c:	4b76      	ldr	r3, [pc, #472]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801093e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 8010940:	4b75      	ldr	r3, [pc, #468]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010942:	7c9b      	ldrb	r3, [r3, #18]
 8010944:	f023 0302 	bic.w	r3, r3, #2
 8010948:	b2da      	uxtb	r2, r3
 801094a:	4b73      	ldr	r3, [pc, #460]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801094c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 801094e:	4b72      	ldr	r3, [pc, #456]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010950:	7c9b      	ldrb	r3, [r3, #18]
 8010952:	f023 0301 	bic.w	r3, r3, #1
 8010956:	b2da      	uxtb	r2, r3
 8010958:	4b6f      	ldr	r3, [pc, #444]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801095a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 801095c:	4b6e      	ldr	r3, [pc, #440]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801095e:	78db      	ldrb	r3, [r3, #3]
 8010960:	f023 0301 	bic.w	r3, r3, #1
 8010964:	b2da      	uxtb	r2, r3
 8010966:	4b6c      	ldr	r3, [pc, #432]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010968:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 801096a:	4b6b      	ldr	r3, [pc, #428]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801096c:	78db      	ldrb	r3, [r3, #3]
 801096e:	f023 0302 	bic.w	r3, r3, #2
 8010972:	b2da      	uxtb	r2, r3
 8010974:	4b68      	ldr	r3, [pc, #416]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010976:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 8010978:	4b67      	ldr	r3, [pc, #412]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801097a:	7a1b      	ldrb	r3, [r3, #8]
 801097c:	f023 0301 	bic.w	r3, r3, #1
 8010980:	b2da      	uxtb	r2, r3
 8010982:	4b65      	ldr	r3, [pc, #404]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010984:	721a      	strb	r2, [r3, #8]
            break;
 8010986:	e2ac      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 8010988:	4b63      	ldr	r3, [pc, #396]	; (8010b18 <lcd_clear_digit+0x2a0>)
 801098a:	7b5b      	ldrb	r3, [r3, #13]
 801098c:	f023 0308 	bic.w	r3, r3, #8
 8010990:	b2da      	uxtb	r2, r3
 8010992:	4b61      	ldr	r3, [pc, #388]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010994:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 8010996:	4b60      	ldr	r3, [pc, #384]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010998:	7b5b      	ldrb	r3, [r3, #13]
 801099a:	f023 0304 	bic.w	r3, r3, #4
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	4b5d      	ldr	r3, [pc, #372]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109a2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 80109a4:	4b5c      	ldr	r3, [pc, #368]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109a6:	7c9b      	ldrb	r3, [r3, #18]
 80109a8:	f023 0308 	bic.w	r3, r3, #8
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	4b5a      	ldr	r3, [pc, #360]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109b0:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 80109b2:	4b59      	ldr	r3, [pc, #356]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109b4:	7c9b      	ldrb	r3, [r3, #18]
 80109b6:	f023 0304 	bic.w	r3, r3, #4
 80109ba:	b2da      	uxtb	r2, r3
 80109bc:	4b56      	ldr	r3, [pc, #344]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109be:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 80109c0:	4b55      	ldr	r3, [pc, #340]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109c2:	78db      	ldrb	r3, [r3, #3]
 80109c4:	f023 0304 	bic.w	r3, r3, #4
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	4b53      	ldr	r3, [pc, #332]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109cc:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 80109ce:	4b52      	ldr	r3, [pc, #328]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109d0:	78db      	ldrb	r3, [r3, #3]
 80109d2:	f023 0308 	bic.w	r3, r3, #8
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	4b4f      	ldr	r3, [pc, #316]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109da:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 80109dc:	4b4e      	ldr	r3, [pc, #312]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109de:	7a1b      	ldrb	r3, [r3, #8]
 80109e0:	f023 0304 	bic.w	r3, r3, #4
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	4b4c      	ldr	r3, [pc, #304]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109e8:	721a      	strb	r2, [r3, #8]
            break;
 80109ea:	e27a      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 80109ec:	4b4a      	ldr	r3, [pc, #296]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109ee:	7b5b      	ldrb	r3, [r3, #13]
 80109f0:	f023 0320 	bic.w	r3, r3, #32
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	4b48      	ldr	r3, [pc, #288]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109f8:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 80109fa:	4b47      	ldr	r3, [pc, #284]	; (8010b18 <lcd_clear_digit+0x2a0>)
 80109fc:	7b5b      	ldrb	r3, [r3, #13]
 80109fe:	f023 0310 	bic.w	r3, r3, #16
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	4b44      	ldr	r3, [pc, #272]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a06:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 8010a08:	4b43      	ldr	r3, [pc, #268]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a0a:	7c9b      	ldrb	r3, [r3, #18]
 8010a0c:	f023 0320 	bic.w	r3, r3, #32
 8010a10:	b2da      	uxtb	r2, r3
 8010a12:	4b41      	ldr	r3, [pc, #260]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a14:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 8010a16:	4b40      	ldr	r3, [pc, #256]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a18:	7c9b      	ldrb	r3, [r3, #18]
 8010a1a:	f023 0310 	bic.w	r3, r3, #16
 8010a1e:	b2da      	uxtb	r2, r3
 8010a20:	4b3d      	ldr	r3, [pc, #244]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a22:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 8010a24:	4b3c      	ldr	r3, [pc, #240]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a26:	78db      	ldrb	r3, [r3, #3]
 8010a28:	f023 0310 	bic.w	r3, r3, #16
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	4b3a      	ldr	r3, [pc, #232]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a30:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 8010a32:	4b39      	ldr	r3, [pc, #228]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a34:	78db      	ldrb	r3, [r3, #3]
 8010a36:	f023 0320 	bic.w	r3, r3, #32
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	4b36      	ldr	r3, [pc, #216]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a3e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 8010a40:	4b35      	ldr	r3, [pc, #212]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a42:	7a1b      	ldrb	r3, [r3, #8]
 8010a44:	f023 0310 	bic.w	r3, r3, #16
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b33      	ldr	r3, [pc, #204]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a4c:	721a      	strb	r2, [r3, #8]
            break;
 8010a4e:	e248      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 8010a50:	4b31      	ldr	r3, [pc, #196]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a52:	7b5b      	ldrb	r3, [r3, #13]
 8010a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	4b2f      	ldr	r3, [pc, #188]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a5c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 8010a5e:	4b2e      	ldr	r3, [pc, #184]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a60:	7b5b      	ldrb	r3, [r3, #13]
 8010a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	4b2b      	ldr	r3, [pc, #172]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a6a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010a6c:	4b2a      	ldr	r3, [pc, #168]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a6e:	7c9b      	ldrb	r3, [r3, #18]
 8010a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	4b28      	ldr	r3, [pc, #160]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a78:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 8010a7a:	4b27      	ldr	r3, [pc, #156]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a7c:	7c9b      	ldrb	r3, [r3, #18]
 8010a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	4b24      	ldr	r3, [pc, #144]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a86:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 8010a88:	4b23      	ldr	r3, [pc, #140]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a8a:	78db      	ldrb	r3, [r3, #3]
 8010a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	4b21      	ldr	r3, [pc, #132]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a94:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 8010a96:	4b20      	ldr	r3, [pc, #128]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010a98:	78db      	ldrb	r3, [r3, #3]
 8010a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	4b1d      	ldr	r3, [pc, #116]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010aa2:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010aa4:	4b1c      	ldr	r3, [pc, #112]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010aa6:	7a1b      	ldrb	r3, [r3, #8]
 8010aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	4b1a      	ldr	r3, [pc, #104]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ab0:	721a      	strb	r2, [r3, #8]
            break;
 8010ab2:	e216      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 8010ab4:	4b18      	ldr	r3, [pc, #96]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ab6:	7b9b      	ldrb	r3, [r3, #14]
 8010ab8:	f023 0302 	bic.w	r3, r3, #2
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	4b16      	ldr	r3, [pc, #88]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ac0:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 8010ac2:	4b15      	ldr	r3, [pc, #84]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ac4:	7b9b      	ldrb	r3, [r3, #14]
 8010ac6:	f023 0301 	bic.w	r3, r3, #1
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ace:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010ad0:	4b11      	ldr	r3, [pc, #68]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ad2:	7cdb      	ldrb	r3, [r3, #19]
 8010ad4:	f023 0302 	bic.w	r3, r3, #2
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	4b0f      	ldr	r3, [pc, #60]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010adc:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010ae0:	7cdb      	ldrb	r3, [r3, #19]
 8010ae2:	f023 0301 	bic.w	r3, r3, #1
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	4b0b      	ldr	r3, [pc, #44]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010aea:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010aee:	791b      	ldrb	r3, [r3, #4]
 8010af0:	f023 0301 	bic.w	r3, r3, #1
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	4b08      	ldr	r3, [pc, #32]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010af8:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 8010afa:	4b07      	ldr	r3, [pc, #28]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010afc:	791b      	ldrb	r3, [r3, #4]
 8010afe:	f023 0302 	bic.w	r3, r3, #2
 8010b02:	b2da      	uxtb	r2, r3
 8010b04:	4b04      	ldr	r3, [pc, #16]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010b06:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 8010b08:	4b03      	ldr	r3, [pc, #12]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010b0a:	7a5b      	ldrb	r3, [r3, #9]
 8010b0c:	f023 0301 	bic.w	r3, r3, #1
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	4b01      	ldr	r3, [pc, #4]	; (8010b18 <lcd_clear_digit+0x2a0>)
 8010b14:	725a      	strb	r2, [r3, #9]
            break;
 8010b16:	e1e4      	b.n	8010ee2 <lcd_clear_digit+0x66a>
 8010b18:	20001df4 	.word	0x20001df4
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 8010b1c:	4ba2      	ldr	r3, [pc, #648]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b1e:	7b9b      	ldrb	r3, [r3, #14]
 8010b20:	f023 0308 	bic.w	r3, r3, #8
 8010b24:	b2da      	uxtb	r2, r3
 8010b26:	4ba0      	ldr	r3, [pc, #640]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b28:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 8010b2a:	4b9f      	ldr	r3, [pc, #636]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b2c:	7b9b      	ldrb	r3, [r3, #14]
 8010b2e:	f023 0304 	bic.w	r3, r3, #4
 8010b32:	b2da      	uxtb	r2, r3
 8010b34:	4b9c      	ldr	r3, [pc, #624]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b36:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 8010b38:	4b9b      	ldr	r3, [pc, #620]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b3a:	7cdb      	ldrb	r3, [r3, #19]
 8010b3c:	f023 0308 	bic.w	r3, r3, #8
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	4b99      	ldr	r3, [pc, #612]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b44:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 8010b46:	4b98      	ldr	r3, [pc, #608]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b48:	7cdb      	ldrb	r3, [r3, #19]
 8010b4a:	f023 0304 	bic.w	r3, r3, #4
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	4b95      	ldr	r3, [pc, #596]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b52:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 8010b54:	4b94      	ldr	r3, [pc, #592]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b56:	791b      	ldrb	r3, [r3, #4]
 8010b58:	f023 0304 	bic.w	r3, r3, #4
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	4b92      	ldr	r3, [pc, #584]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b60:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 8010b62:	4b91      	ldr	r3, [pc, #580]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b64:	791b      	ldrb	r3, [r3, #4]
 8010b66:	f023 0308 	bic.w	r3, r3, #8
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	4b8e      	ldr	r3, [pc, #568]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b6e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010b70:	4b8d      	ldr	r3, [pc, #564]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b72:	7a5b      	ldrb	r3, [r3, #9]
 8010b74:	f023 0304 	bic.w	r3, r3, #4
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4b8b      	ldr	r3, [pc, #556]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b7c:	725a      	strb	r2, [r3, #9]
            break;
 8010b7e:	e1b0      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010b80:	4b89      	ldr	r3, [pc, #548]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b82:	7b9b      	ldrb	r3, [r3, #14]
 8010b84:	f023 0320 	bic.w	r3, r3, #32
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	4b87      	ldr	r3, [pc, #540]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b8c:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010b8e:	4b86      	ldr	r3, [pc, #536]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b90:	7b9b      	ldrb	r3, [r3, #14]
 8010b92:	f023 0310 	bic.w	r3, r3, #16
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	4b83      	ldr	r3, [pc, #524]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b9a:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010b9c:	4b82      	ldr	r3, [pc, #520]	; (8010da8 <lcd_clear_digit+0x530>)
 8010b9e:	7cdb      	ldrb	r3, [r3, #19]
 8010ba0:	f023 0320 	bic.w	r3, r3, #32
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	4b80      	ldr	r3, [pc, #512]	; (8010da8 <lcd_clear_digit+0x530>)
 8010ba8:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 8010baa:	4b7f      	ldr	r3, [pc, #508]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bac:	7cdb      	ldrb	r3, [r3, #19]
 8010bae:	f023 0310 	bic.w	r3, r3, #16
 8010bb2:	b2da      	uxtb	r2, r3
 8010bb4:	4b7c      	ldr	r3, [pc, #496]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bb6:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 8010bb8:	4b7b      	ldr	r3, [pc, #492]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bba:	791b      	ldrb	r3, [r3, #4]
 8010bbc:	f023 0310 	bic.w	r3, r3, #16
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	4b79      	ldr	r3, [pc, #484]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bc4:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 8010bc6:	4b78      	ldr	r3, [pc, #480]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bc8:	791b      	ldrb	r3, [r3, #4]
 8010bca:	f023 0320 	bic.w	r3, r3, #32
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	4b75      	ldr	r3, [pc, #468]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bd2:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 8010bd4:	4b74      	ldr	r3, [pc, #464]	; (8010da8 <lcd_clear_digit+0x530>)
 8010bd6:	7a5b      	ldrb	r3, [r3, #9]
 8010bd8:	f023 0310 	bic.w	r3, r3, #16
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	4b72      	ldr	r3, [pc, #456]	; (8010da8 <lcd_clear_digit+0x530>)
 8010be0:	725a      	strb	r2, [r3, #9]
            break;
 8010be2:	e17e      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010be4:	79bb      	ldrb	r3, [r7, #6]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	f040 8178 	bne.w	8010edc <lcd_clear_digit+0x664>
    {
        switch (digit)
 8010bec:	79fb      	ldrb	r3, [r7, #7]
 8010bee:	2b06      	cmp	r3, #6
 8010bf0:	f200 8176 	bhi.w	8010ee0 <lcd_clear_digit+0x668>
 8010bf4:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <lcd_clear_digit+0x384>)
 8010bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfa:	bf00      	nop
 8010bfc:	08010c19 	.word	0x08010c19
 8010c00:	08010c7d 	.word	0x08010c7d
 8010c04:	08010ce1 	.word	0x08010ce1
 8010c08:	08010d45 	.word	0x08010d45
 8010c0c:	08010dad 	.word	0x08010dad
 8010c10:	08010e11 	.word	0x08010e11
 8010c14:	08010e75 	.word	0x08010e75
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 8010c18:	4b63      	ldr	r3, [pc, #396]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c1a:	7b1b      	ldrb	r3, [r3, #12]
 8010c1c:	f023 0304 	bic.w	r3, r3, #4
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	4b61      	ldr	r3, [pc, #388]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c24:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 8010c26:	4b60      	ldr	r3, [pc, #384]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c28:	7b1b      	ldrb	r3, [r3, #12]
 8010c2a:	f023 0308 	bic.w	r3, r3, #8
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	4b5d      	ldr	r3, [pc, #372]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c32:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 8010c34:	4b5c      	ldr	r3, [pc, #368]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c36:	7c5b      	ldrb	r3, [r3, #17]
 8010c38:	f023 0304 	bic.w	r3, r3, #4
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	4b5a      	ldr	r3, [pc, #360]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c40:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 8010c42:	4b59      	ldr	r3, [pc, #356]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c44:	7c5b      	ldrb	r3, [r3, #17]
 8010c46:	f023 0308 	bic.w	r3, r3, #8
 8010c4a:	b2da      	uxtb	r2, r3
 8010c4c:	4b56      	ldr	r3, [pc, #344]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c4e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 8010c50:	4b55      	ldr	r3, [pc, #340]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c52:	789b      	ldrb	r3, [r3, #2]
 8010c54:	f023 0304 	bic.w	r3, r3, #4
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	4b53      	ldr	r3, [pc, #332]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c5c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 8010c5e:	4b52      	ldr	r3, [pc, #328]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c60:	789b      	ldrb	r3, [r3, #2]
 8010c62:	f023 0308 	bic.w	r3, r3, #8
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	4b4f      	ldr	r3, [pc, #316]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c6a:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010c6c:	4b4e      	ldr	r3, [pc, #312]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c6e:	79db      	ldrb	r3, [r3, #7]
 8010c70:	f023 0308 	bic.w	r3, r3, #8
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	4b4c      	ldr	r3, [pc, #304]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c78:	71da      	strb	r2, [r3, #7]
            break;
 8010c7a:	e132      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010c7c:	4b4a      	ldr	r3, [pc, #296]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c7e:	7b1b      	ldrb	r3, [r3, #12]
 8010c80:	f023 0301 	bic.w	r3, r3, #1
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	4b48      	ldr	r3, [pc, #288]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c88:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 8010c8a:	4b47      	ldr	r3, [pc, #284]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c8c:	7b1b      	ldrb	r3, [r3, #12]
 8010c8e:	f023 0302 	bic.w	r3, r3, #2
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	4b44      	ldr	r3, [pc, #272]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c96:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010c98:	4b43      	ldr	r3, [pc, #268]	; (8010da8 <lcd_clear_digit+0x530>)
 8010c9a:	7c5b      	ldrb	r3, [r3, #17]
 8010c9c:	f023 0301 	bic.w	r3, r3, #1
 8010ca0:	b2da      	uxtb	r2, r3
 8010ca2:	4b41      	ldr	r3, [pc, #260]	; (8010da8 <lcd_clear_digit+0x530>)
 8010ca4:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 8010ca6:	4b40      	ldr	r3, [pc, #256]	; (8010da8 <lcd_clear_digit+0x530>)
 8010ca8:	7c5b      	ldrb	r3, [r3, #17]
 8010caa:	f023 0302 	bic.w	r3, r3, #2
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	4b3d      	ldr	r3, [pc, #244]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cb2:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 8010cb4:	4b3c      	ldr	r3, [pc, #240]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cb6:	789b      	ldrb	r3, [r3, #2]
 8010cb8:	f023 0301 	bic.w	r3, r3, #1
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	4b3a      	ldr	r3, [pc, #232]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cc0:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 8010cc2:	4b39      	ldr	r3, [pc, #228]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cc4:	789b      	ldrb	r3, [r3, #2]
 8010cc6:	f023 0302 	bic.w	r3, r3, #2
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	4b36      	ldr	r3, [pc, #216]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cce:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010cd0:	4b35      	ldr	r3, [pc, #212]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cd2:	79db      	ldrb	r3, [r3, #7]
 8010cd4:	f023 0302 	bic.w	r3, r3, #2
 8010cd8:	b2da      	uxtb	r2, r3
 8010cda:	4b33      	ldr	r3, [pc, #204]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cdc:	71da      	strb	r2, [r3, #7]
            break;
 8010cde:	e100      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010ce0:	4b31      	ldr	r3, [pc, #196]	; (8010da8 <lcd_clear_digit+0x530>)
 8010ce2:	7adb      	ldrb	r3, [r3, #11]
 8010ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b2f      	ldr	r3, [pc, #188]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cec:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010cee:	4b2e      	ldr	r3, [pc, #184]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cf0:	7adb      	ldrb	r3, [r3, #11]
 8010cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	4b2b      	ldr	r3, [pc, #172]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cfa:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010cfc:	4b2a      	ldr	r3, [pc, #168]	; (8010da8 <lcd_clear_digit+0x530>)
 8010cfe:	7c1b      	ldrb	r3, [r3, #16]
 8010d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	4b28      	ldr	r3, [pc, #160]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d08:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 8010d0a:	4b27      	ldr	r3, [pc, #156]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d0c:	7c1b      	ldrb	r3, [r3, #16]
 8010d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	4b24      	ldr	r3, [pc, #144]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d16:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010d18:	4b23      	ldr	r3, [pc, #140]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d1a:	785b      	ldrb	r3, [r3, #1]
 8010d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d20:	b2da      	uxtb	r2, r3
 8010d22:	4b21      	ldr	r3, [pc, #132]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d24:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 8010d26:	4b20      	ldr	r3, [pc, #128]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d28:	785b      	ldrb	r3, [r3, #1]
 8010d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d2e:	b2da      	uxtb	r2, r3
 8010d30:	4b1d      	ldr	r3, [pc, #116]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d32:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 8010d34:	4b1c      	ldr	r3, [pc, #112]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d36:	799b      	ldrb	r3, [r3, #6]
 8010d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	4b1a      	ldr	r3, [pc, #104]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d40:	719a      	strb	r2, [r3, #6]
            break;
 8010d42:	e0ce      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 8010d44:	4b18      	ldr	r3, [pc, #96]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d46:	7adb      	ldrb	r3, [r3, #11]
 8010d48:	f023 0310 	bic.w	r3, r3, #16
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	4b16      	ldr	r3, [pc, #88]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d50:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 8010d52:	4b15      	ldr	r3, [pc, #84]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d54:	7adb      	ldrb	r3, [r3, #11]
 8010d56:	f023 0320 	bic.w	r3, r3, #32
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	4b12      	ldr	r3, [pc, #72]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d5e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 8010d60:	4b11      	ldr	r3, [pc, #68]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d62:	7c1b      	ldrb	r3, [r3, #16]
 8010d64:	f023 0310 	bic.w	r3, r3, #16
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	4b0f      	ldr	r3, [pc, #60]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d6c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010d6e:	4b0e      	ldr	r3, [pc, #56]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d70:	7c1b      	ldrb	r3, [r3, #16]
 8010d72:	f023 0320 	bic.w	r3, r3, #32
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	4b0b      	ldr	r3, [pc, #44]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d7a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d7e:	785b      	ldrb	r3, [r3, #1]
 8010d80:	f023 0310 	bic.w	r3, r3, #16
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	4b08      	ldr	r3, [pc, #32]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d88:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010d8a:	4b07      	ldr	r3, [pc, #28]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d8c:	785b      	ldrb	r3, [r3, #1]
 8010d8e:	f023 0320 	bic.w	r3, r3, #32
 8010d92:	b2da      	uxtb	r2, r3
 8010d94:	4b04      	ldr	r3, [pc, #16]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d96:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010d98:	4b03      	ldr	r3, [pc, #12]	; (8010da8 <lcd_clear_digit+0x530>)
 8010d9a:	799b      	ldrb	r3, [r3, #6]
 8010d9c:	f023 0320 	bic.w	r3, r3, #32
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	4b01      	ldr	r3, [pc, #4]	; (8010da8 <lcd_clear_digit+0x530>)
 8010da4:	719a      	strb	r2, [r3, #6]
            break;
 8010da6:	e09c      	b.n	8010ee2 <lcd_clear_digit+0x66a>
 8010da8:	20001df4 	.word	0x20001df4
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010dac:	4b50      	ldr	r3, [pc, #320]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dae:	7adb      	ldrb	r3, [r3, #11]
 8010db0:	f023 0304 	bic.w	r3, r3, #4
 8010db4:	b2da      	uxtb	r2, r3
 8010db6:	4b4e      	ldr	r3, [pc, #312]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010db8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010dba:	4b4d      	ldr	r3, [pc, #308]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dbc:	7adb      	ldrb	r3, [r3, #11]
 8010dbe:	f023 0308 	bic.w	r3, r3, #8
 8010dc2:	b2da      	uxtb	r2, r3
 8010dc4:	4b4a      	ldr	r3, [pc, #296]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dc6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010dc8:	4b49      	ldr	r3, [pc, #292]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dca:	7c1b      	ldrb	r3, [r3, #16]
 8010dcc:	f023 0304 	bic.w	r3, r3, #4
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	4b47      	ldr	r3, [pc, #284]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dd4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010dd6:	4b46      	ldr	r3, [pc, #280]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dd8:	7c1b      	ldrb	r3, [r3, #16]
 8010dda:	f023 0308 	bic.w	r3, r3, #8
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	4b43      	ldr	r3, [pc, #268]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010de2:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010de4:	4b42      	ldr	r3, [pc, #264]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010de6:	785b      	ldrb	r3, [r3, #1]
 8010de8:	f023 0304 	bic.w	r3, r3, #4
 8010dec:	b2da      	uxtb	r2, r3
 8010dee:	4b40      	ldr	r3, [pc, #256]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010df0:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010df2:	4b3f      	ldr	r3, [pc, #252]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010df4:	785b      	ldrb	r3, [r3, #1]
 8010df6:	f023 0308 	bic.w	r3, r3, #8
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	4b3c      	ldr	r3, [pc, #240]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010dfe:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010e00:	4b3b      	ldr	r3, [pc, #236]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e02:	799b      	ldrb	r3, [r3, #6]
 8010e04:	f023 0308 	bic.w	r3, r3, #8
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	4b39      	ldr	r3, [pc, #228]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e0c:	719a      	strb	r2, [r3, #6]
            break;
 8010e0e:	e068      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010e10:	4b37      	ldr	r3, [pc, #220]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e12:	7adb      	ldrb	r3, [r3, #11]
 8010e14:	f023 0301 	bic.w	r3, r3, #1
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	4b35      	ldr	r3, [pc, #212]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e1c:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010e1e:	4b34      	ldr	r3, [pc, #208]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e20:	7adb      	ldrb	r3, [r3, #11]
 8010e22:	f023 0302 	bic.w	r3, r3, #2
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	4b31      	ldr	r3, [pc, #196]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e2a:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010e2c:	4b30      	ldr	r3, [pc, #192]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e2e:	7c1b      	ldrb	r3, [r3, #16]
 8010e30:	f023 0301 	bic.w	r3, r3, #1
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	4b2e      	ldr	r3, [pc, #184]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e38:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010e3a:	4b2d      	ldr	r3, [pc, #180]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e3c:	7c1b      	ldrb	r3, [r3, #16]
 8010e3e:	f023 0302 	bic.w	r3, r3, #2
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	4b2a      	ldr	r3, [pc, #168]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e46:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010e48:	4b29      	ldr	r3, [pc, #164]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e4a:	785b      	ldrb	r3, [r3, #1]
 8010e4c:	f023 0301 	bic.w	r3, r3, #1
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	4b27      	ldr	r3, [pc, #156]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e54:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010e56:	4b26      	ldr	r3, [pc, #152]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e58:	785b      	ldrb	r3, [r3, #1]
 8010e5a:	f023 0302 	bic.w	r3, r3, #2
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	4b23      	ldr	r3, [pc, #140]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e62:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010e64:	4b22      	ldr	r3, [pc, #136]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e66:	799b      	ldrb	r3, [r3, #6]
 8010e68:	f023 0302 	bic.w	r3, r3, #2
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	4b20      	ldr	r3, [pc, #128]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e70:	719a      	strb	r2, [r3, #6]
            break;
 8010e72:	e036      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010e74:	4b1e      	ldr	r3, [pc, #120]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e76:	7a9b      	ldrb	r3, [r3, #10]
 8010e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	4b1c      	ldr	r3, [pc, #112]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e80:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010e82:	4b1b      	ldr	r3, [pc, #108]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e84:	7a9b      	ldrb	r3, [r3, #10]
 8010e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	4b18      	ldr	r3, [pc, #96]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e8e:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010e90:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e92:	7bdb      	ldrb	r3, [r3, #15]
 8010e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b15      	ldr	r3, [pc, #84]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010e9c:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010e9e:	4b14      	ldr	r3, [pc, #80]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010ea0:	7bdb      	ldrb	r3, [r3, #15]
 8010ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010eaa:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010eac:	4b10      	ldr	r3, [pc, #64]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010eb8:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010eba:	4b0d      	ldr	r3, [pc, #52]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010ec6:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010eca:	795b      	ldrb	r3, [r3, #5]
 8010ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ed0:	b2da      	uxtb	r2, r3
 8010ed2:	4b07      	ldr	r3, [pc, #28]	; (8010ef0 <lcd_clear_digit+0x678>)
 8010ed4:	715a      	strb	r2, [r3, #5]
            break;
 8010ed6:	e004      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            break;
 8010ed8:	bf00      	nop
 8010eda:	e002      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010edc:	bf00      	nop
 8010ede:	e000      	b.n	8010ee2 <lcd_clear_digit+0x66a>
            break;
 8010ee0:	bf00      	nop
}
 8010ee2:	bf00      	nop
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop
 8010ef0:	20001df4 	.word	0x20001df4

08010ef4 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	4603      	mov	r3, r0
 8010efc:	460a      	mov	r2, r1
 8010efe:	71fb      	strb	r3, [r7, #7]
 8010f00:	4613      	mov	r3, r2
 8010f02:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d14c      	bne.n	8010fa4 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010f0a:	79bb      	ldrb	r3, [r7, #6]
 8010f0c:	2b06      	cmp	r3, #6
 8010f0e:	f200 808f 	bhi.w	8011030 <lcd_clear_point+0x13c>
 8010f12:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <lcd_clear_point+0x24>)
 8010f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f18:	08010f35 	.word	0x08010f35
 8010f1c:	08010f45 	.word	0x08010f45
 8010f20:	08010f55 	.word	0x08010f55
 8010f24:	08010f65 	.word	0x08010f65
 8010f28:	08010f75 	.word	0x08010f75
 8010f2c:	08010f85 	.word	0x08010f85
 8010f30:	08010f95 	.word	0x08010f95
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010f34:	4b44      	ldr	r3, [pc, #272]	; (8011048 <lcd_clear_point+0x154>)
 8010f36:	79db      	ldrb	r3, [r3, #7]
 8010f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	4b42      	ldr	r3, [pc, #264]	; (8011048 <lcd_clear_point+0x154>)
 8010f40:	71da      	strb	r2, [r3, #7]
            break;
 8010f42:	e07a      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010f44:	4b40      	ldr	r3, [pc, #256]	; (8011048 <lcd_clear_point+0x154>)
 8010f46:	7a1b      	ldrb	r3, [r3, #8]
 8010f48:	f023 0302 	bic.w	r3, r3, #2
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	4b3e      	ldr	r3, [pc, #248]	; (8011048 <lcd_clear_point+0x154>)
 8010f50:	721a      	strb	r2, [r3, #8]
            break;
 8010f52:	e072      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010f54:	4b3c      	ldr	r3, [pc, #240]	; (8011048 <lcd_clear_point+0x154>)
 8010f56:	7a1b      	ldrb	r3, [r3, #8]
 8010f58:	f023 0308 	bic.w	r3, r3, #8
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	4b3a      	ldr	r3, [pc, #232]	; (8011048 <lcd_clear_point+0x154>)
 8010f60:	721a      	strb	r2, [r3, #8]
            break;
 8010f62:	e06a      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010f64:	4b38      	ldr	r3, [pc, #224]	; (8011048 <lcd_clear_point+0x154>)
 8010f66:	7a1b      	ldrb	r3, [r3, #8]
 8010f68:	f023 0320 	bic.w	r3, r3, #32
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	4b36      	ldr	r3, [pc, #216]	; (8011048 <lcd_clear_point+0x154>)
 8010f70:	721a      	strb	r2, [r3, #8]
            break;
 8010f72:	e062      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010f74:	4b34      	ldr	r3, [pc, #208]	; (8011048 <lcd_clear_point+0x154>)
 8010f76:	7a1b      	ldrb	r3, [r3, #8]
 8010f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	4b32      	ldr	r3, [pc, #200]	; (8011048 <lcd_clear_point+0x154>)
 8010f80:	721a      	strb	r2, [r3, #8]
            break;
 8010f82:	e05a      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010f84:	4b30      	ldr	r3, [pc, #192]	; (8011048 <lcd_clear_point+0x154>)
 8010f86:	7a5b      	ldrb	r3, [r3, #9]
 8010f88:	f023 0302 	bic.w	r3, r3, #2
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	4b2e      	ldr	r3, [pc, #184]	; (8011048 <lcd_clear_point+0x154>)
 8010f90:	725a      	strb	r2, [r3, #9]
            break;
 8010f92:	e052      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010f94:	4b2c      	ldr	r3, [pc, #176]	; (8011048 <lcd_clear_point+0x154>)
 8010f96:	7a5b      	ldrb	r3, [r3, #9]
 8010f98:	f023 0308 	bic.w	r3, r3, #8
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	4b2a      	ldr	r3, [pc, #168]	; (8011048 <lcd_clear_point+0x154>)
 8010fa0:	725a      	strb	r2, [r3, #9]
            break;
 8010fa2:	e04a      	b.n	801103a <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d144      	bne.n	8011034 <lcd_clear_point+0x140>
    {
        switch (point)
 8010faa:	79bb      	ldrb	r3, [r7, #6]
 8010fac:	2b05      	cmp	r3, #5
 8010fae:	d843      	bhi.n	8011038 <lcd_clear_point+0x144>
 8010fb0:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <lcd_clear_point+0xc4>)
 8010fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb6:	bf00      	nop
 8010fb8:	08010fd1 	.word	0x08010fd1
 8010fbc:	08010fe1 	.word	0x08010fe1
 8010fc0:	08010ff1 	.word	0x08010ff1
 8010fc4:	08011001 	.word	0x08011001
 8010fc8:	08011011 	.word	0x08011011
 8010fcc:	08011021 	.word	0x08011021
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010fd0:	4b1d      	ldr	r3, [pc, #116]	; (8011048 <lcd_clear_point+0x154>)
 8010fd2:	79db      	ldrb	r3, [r3, #7]
 8010fd4:	f023 0304 	bic.w	r3, r3, #4
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	4b1b      	ldr	r3, [pc, #108]	; (8011048 <lcd_clear_point+0x154>)
 8010fdc:	71da      	strb	r2, [r3, #7]
            break;
 8010fde:	e02c      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010fe0:	4b19      	ldr	r3, [pc, #100]	; (8011048 <lcd_clear_point+0x154>)
 8010fe2:	79db      	ldrb	r3, [r3, #7]
 8010fe4:	f023 0301 	bic.w	r3, r3, #1
 8010fe8:	b2da      	uxtb	r2, r3
 8010fea:	4b17      	ldr	r3, [pc, #92]	; (8011048 <lcd_clear_point+0x154>)
 8010fec:	71da      	strb	r2, [r3, #7]
            break;
 8010fee:	e024      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010ff0:	4b15      	ldr	r3, [pc, #84]	; (8011048 <lcd_clear_point+0x154>)
 8010ff2:	799b      	ldrb	r3, [r3, #6]
 8010ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b13      	ldr	r3, [pc, #76]	; (8011048 <lcd_clear_point+0x154>)
 8010ffc:	719a      	strb	r2, [r3, #6]
            break;
 8010ffe:	e01c      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8011000:	4b11      	ldr	r3, [pc, #68]	; (8011048 <lcd_clear_point+0x154>)
 8011002:	799b      	ldrb	r3, [r3, #6]
 8011004:	f023 0310 	bic.w	r3, r3, #16
 8011008:	b2da      	uxtb	r2, r3
 801100a:	4b0f      	ldr	r3, [pc, #60]	; (8011048 <lcd_clear_point+0x154>)
 801100c:	719a      	strb	r2, [r3, #6]
            break;
 801100e:	e014      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8011010:	4b0d      	ldr	r3, [pc, #52]	; (8011048 <lcd_clear_point+0x154>)
 8011012:	799b      	ldrb	r3, [r3, #6]
 8011014:	f023 0304 	bic.w	r3, r3, #4
 8011018:	b2da      	uxtb	r2, r3
 801101a:	4b0b      	ldr	r3, [pc, #44]	; (8011048 <lcd_clear_point+0x154>)
 801101c:	719a      	strb	r2, [r3, #6]
            break;
 801101e:	e00c      	b.n	801103a <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8011020:	4b09      	ldr	r3, [pc, #36]	; (8011048 <lcd_clear_point+0x154>)
 8011022:	799b      	ldrb	r3, [r3, #6]
 8011024:	f023 0301 	bic.w	r3, r3, #1
 8011028:	b2da      	uxtb	r2, r3
 801102a:	4b07      	ldr	r3, [pc, #28]	; (8011048 <lcd_clear_point+0x154>)
 801102c:	719a      	strb	r2, [r3, #6]
            break;
 801102e:	e004      	b.n	801103a <lcd_clear_point+0x146>
            break;
 8011030:	bf00      	nop
 8011032:	e002      	b.n	801103a <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8011034:	bf00      	nop
 8011036:	e000      	b.n	801103a <lcd_clear_point+0x146>
            break;
 8011038:	bf00      	nop
}
 801103a:	bf00      	nop
 801103c:	370c      	adds	r7, #12
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	20001df4 	.word	0x20001df4

0801104c <lcd_clear_time_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	460a      	mov	r2, r1
 8011056:	71fb      	strb	r3, [r7, #7]
 8011058:	4613      	mov	r3, r2
 801105a:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	2b03      	cmp	r3, #3
 8011060:	d82a      	bhi.n	80110b8 <lcd_clear_time_unit+0x6c>
 8011062:	a201      	add	r2, pc, #4	; (adr r2, 8011068 <lcd_clear_time_unit+0x1c>)
 8011064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011068:	08011079 	.word	0x08011079
 801106c:	08011089 	.word	0x08011089
 8011070:	08011099 	.word	0x08011099
 8011074:	080110a9 	.word	0x080110a9
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8011078:	4b14      	ldr	r3, [pc, #80]	; (80110cc <lcd_clear_time_unit+0x80>)
 801107a:	795b      	ldrb	r3, [r3, #5]
 801107c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011080:	b2da      	uxtb	r2, r3
 8011082:	4b12      	ldr	r3, [pc, #72]	; (80110cc <lcd_clear_time_unit+0x80>)
 8011084:	715a      	strb	r2, [r3, #5]
        break;
 8011086:	e018      	b.n	80110ba <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8011088:	4b10      	ldr	r3, [pc, #64]	; (80110cc <lcd_clear_time_unit+0x80>)
 801108a:	7a5b      	ldrb	r3, [r3, #9]
 801108c:	f023 0320 	bic.w	r3, r3, #32
 8011090:	b2da      	uxtb	r2, r3
 8011092:	4b0e      	ldr	r3, [pc, #56]	; (80110cc <lcd_clear_time_unit+0x80>)
 8011094:	725a      	strb	r2, [r3, #9]
        break;
 8011096:	e010      	b.n	80110ba <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8011098:	4b0c      	ldr	r3, [pc, #48]	; (80110cc <lcd_clear_time_unit+0x80>)
 801109a:	7a9b      	ldrb	r3, [r3, #10]
 801109c:	f023 0320 	bic.w	r3, r3, #32
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b0a      	ldr	r3, [pc, #40]	; (80110cc <lcd_clear_time_unit+0x80>)
 80110a4:	729a      	strb	r2, [r3, #10]
        break;
 80110a6:	e008      	b.n	80110ba <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 80110a8:	4b08      	ldr	r3, [pc, #32]	; (80110cc <lcd_clear_time_unit+0x80>)
 80110aa:	7a5b      	ldrb	r3, [r3, #9]
 80110ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	4b06      	ldr	r3, [pc, #24]	; (80110cc <lcd_clear_time_unit+0x80>)
 80110b4:	725a      	strb	r2, [r3, #9]
        break;
 80110b6:	e000      	b.n	80110ba <lcd_clear_time_unit+0x6e>
        default:
        break;
 80110b8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80110ba:	79bb      	ldrb	r3, [r7, #6]
 80110bc:	4618      	mov	r0, r3
 80110be:	f001 fbff 	bl	80128c0 <pcf8553_blink>
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	20001df4 	.word	0x20001df4

080110d0 <lcd_clear_vol_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	460a      	mov	r2, r1
 80110da:	71fb      	strb	r3, [r7, #7]
 80110dc:	4613      	mov	r3, r2
 80110de:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 80110e0:	79fb      	ldrb	r3, [r7, #7]
 80110e2:	2b07      	cmp	r3, #7
 80110e4:	f200 822c 	bhi.w	8011540 <lcd_clear_vol_unit+0x470>
 80110e8:	a201      	add	r2, pc, #4	; (adr r2, 80110f0 <lcd_clear_vol_unit+0x20>)
 80110ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ee:	bf00      	nop
 80110f0:	08011111 	.word	0x08011111
 80110f4:	08011203 	.word	0x08011203
 80110f8:	080112ad 	.word	0x080112ad
 80110fc:	08011167 	.word	0x08011167
 8011100:	08011407 	.word	0x08011407
 8011104:	08011341 	.word	0x08011341
 8011108:	08011487 	.word	0x08011487
 801110c:	08011507 	.word	0x08011507
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011110:	4b8a      	ldr	r3, [pc, #552]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011112:	7bdb      	ldrb	r3, [r3, #15]
 8011114:	f023 0320 	bic.w	r3, r3, #32
 8011118:	b2da      	uxtb	r2, r3
 801111a:	4b88      	ldr	r3, [pc, #544]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801111c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 801111e:	4b87      	ldr	r3, [pc, #540]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	f023 0320 	bic.w	r3, r3, #32
 8011126:	b2da      	uxtb	r2, r3
 8011128:	4b84      	ldr	r3, [pc, #528]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801112a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 801112c:	4b83      	ldr	r3, [pc, #524]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801112e:	795b      	ldrb	r3, [r3, #5]
 8011130:	f023 0320 	bic.w	r3, r3, #32
 8011134:	b2da      	uxtb	r2, r3
 8011136:	4b81      	ldr	r3, [pc, #516]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011138:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 801113a:	4b80      	ldr	r3, [pc, #512]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801113c:	7b9b      	ldrb	r3, [r3, #14]
 801113e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011142:	b2da      	uxtb	r2, r3
 8011144:	4b7d      	ldr	r3, [pc, #500]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011146:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8011148:	4b7c      	ldr	r3, [pc, #496]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801114a:	7a9b      	ldrb	r3, [r3, #10]
 801114c:	f023 0301 	bic.w	r3, r3, #1
 8011150:	b2da      	uxtb	r2, r3
 8011152:	4b7a      	ldr	r3, [pc, #488]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011154:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8011156:	4b79      	ldr	r3, [pc, #484]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011158:	7a5b      	ldrb	r3, [r3, #9]
 801115a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801115e:	b2da      	uxtb	r2, r3
 8011160:	4b76      	ldr	r3, [pc, #472]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011162:	725a      	strb	r2, [r3, #9]
        break;
 8011164:	e1ed      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011166:	4b75      	ldr	r3, [pc, #468]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011168:	7bdb      	ldrb	r3, [r3, #15]
 801116a:	f023 0320 	bic.w	r3, r3, #32
 801116e:	b2da      	uxtb	r2, r3
 8011170:	4b72      	ldr	r3, [pc, #456]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011172:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8011174:	4b71      	ldr	r3, [pc, #452]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011176:	7bdb      	ldrb	r3, [r3, #15]
 8011178:	f023 0310 	bic.w	r3, r3, #16
 801117c:	b2da      	uxtb	r2, r3
 801117e:	4b6f      	ldr	r3, [pc, #444]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011180:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8011182:	4b6e      	ldr	r3, [pc, #440]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011184:	7bdb      	ldrb	r3, [r3, #15]
 8011186:	f023 0304 	bic.w	r3, r3, #4
 801118a:	b2da      	uxtb	r2, r3
 801118c:	4b6b      	ldr	r3, [pc, #428]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801118e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011190:	4b6a      	ldr	r3, [pc, #424]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	f023 0320 	bic.w	r3, r3, #32
 8011198:	b2da      	uxtb	r2, r3
 801119a:	4b68      	ldr	r3, [pc, #416]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801119c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 801119e:	4b67      	ldr	r3, [pc, #412]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111a0:	795b      	ldrb	r3, [r3, #5]
 80111a2:	f023 0310 	bic.w	r3, r3, #16
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b64      	ldr	r3, [pc, #400]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111aa:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80111ac:	4b63      	ldr	r3, [pc, #396]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111ae:	7b9b      	ldrb	r3, [r3, #14]
 80111b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	4b61      	ldr	r3, [pc, #388]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111b8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80111ba:	4b60      	ldr	r3, [pc, #384]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111bc:	7bdb      	ldrb	r3, [r3, #15]
 80111be:	f023 0302 	bic.w	r3, r3, #2
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b5d      	ldr	r3, [pc, #372]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111c6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80111c8:	4b5c      	ldr	r3, [pc, #368]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f023 0301 	bic.w	r3, r3, #1
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	4b5a      	ldr	r3, [pc, #360]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111d4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80111d6:	4b59      	ldr	r3, [pc, #356]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f023 0302 	bic.w	r3, r3, #2
 80111de:	b2da      	uxtb	r2, r3
 80111e0:	4b56      	ldr	r3, [pc, #344]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111e2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 80111e4:	4b55      	ldr	r3, [pc, #340]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111e6:	791b      	ldrb	r3, [r3, #4]
 80111e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4b53      	ldr	r3, [pc, #332]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111f0:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80111f2:	4b52      	ldr	r3, [pc, #328]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111f4:	795b      	ldrb	r3, [r3, #5]
 80111f6:	f023 0302 	bic.w	r3, r3, #2
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	4b4f      	ldr	r3, [pc, #316]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80111fe:	715a      	strb	r2, [r3, #5]
        break;
 8011200:	e19f      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011202:	4b4e      	ldr	r3, [pc, #312]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011204:	7bdb      	ldrb	r3, [r3, #15]
 8011206:	f023 0320 	bic.w	r3, r3, #32
 801120a:	b2da      	uxtb	r2, r3
 801120c:	4b4b      	ldr	r3, [pc, #300]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801120e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8011210:	4b4a      	ldr	r3, [pc, #296]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011212:	7a9b      	ldrb	r3, [r3, #10]
 8011214:	f023 0304 	bic.w	r3, r3, #4
 8011218:	b2da      	uxtb	r2, r3
 801121a:	4b48      	ldr	r3, [pc, #288]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801121c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 801121e:	4b47      	ldr	r3, [pc, #284]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011220:	7bdb      	ldrb	r3, [r3, #15]
 8011222:	f023 0310 	bic.w	r3, r3, #16
 8011226:	b2da      	uxtb	r2, r3
 8011228:	4b44      	ldr	r3, [pc, #272]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801122a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 801122c:	4b43      	ldr	r3, [pc, #268]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801122e:	7bdb      	ldrb	r3, [r3, #15]
 8011230:	f023 0308 	bic.w	r3, r3, #8
 8011234:	b2da      	uxtb	r2, r3
 8011236:	4b41      	ldr	r3, [pc, #260]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011238:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 801123a:	4b40      	ldr	r3, [pc, #256]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	f023 0320 	bic.w	r3, r3, #32
 8011242:	b2da      	uxtb	r2, r3
 8011244:	4b3d      	ldr	r3, [pc, #244]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011246:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011248:	4b3c      	ldr	r3, [pc, #240]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	f023 0308 	bic.w	r3, r3, #8
 8011250:	b2da      	uxtb	r2, r3
 8011252:	4b3a      	ldr	r3, [pc, #232]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011254:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011256:	4b39      	ldr	r3, [pc, #228]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011258:	7b9b      	ldrb	r3, [r3, #14]
 801125a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801125e:	b2da      	uxtb	r2, r3
 8011260:	4b36      	ldr	r3, [pc, #216]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011262:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8011264:	4b35      	ldr	r3, [pc, #212]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011266:	7cdb      	ldrb	r3, [r3, #19]
 8011268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801126c:	b2da      	uxtb	r2, r3
 801126e:	4b33      	ldr	r3, [pc, #204]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011270:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011272:	4b32      	ldr	r3, [pc, #200]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011274:	7cdb      	ldrb	r3, [r3, #19]
 8011276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801127a:	b2da      	uxtb	r2, r3
 801127c:	4b2f      	ldr	r3, [pc, #188]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801127e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011280:	4b2e      	ldr	r3, [pc, #184]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	f023 0301 	bic.w	r3, r3, #1
 8011288:	b2da      	uxtb	r2, r3
 801128a:	4b2c      	ldr	r3, [pc, #176]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801128c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 801128e:	4b2b      	ldr	r3, [pc, #172]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011290:	791b      	ldrb	r3, [r3, #4]
 8011292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011296:	b2da      	uxtb	r2, r3
 8011298:	4b28      	ldr	r3, [pc, #160]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801129a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801129c:	4b27      	ldr	r3, [pc, #156]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801129e:	795b      	ldrb	r3, [r3, #5]
 80112a0:	f023 0302 	bic.w	r3, r3, #2
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	4b25      	ldr	r3, [pc, #148]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112a8:	715a      	strb	r2, [r3, #5]
        break;
 80112aa:	e14a      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80112ac:	4b23      	ldr	r3, [pc, #140]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112ae:	7bdb      	ldrb	r3, [r3, #15]
 80112b0:	f023 0320 	bic.w	r3, r3, #32
 80112b4:	b2da      	uxtb	r2, r3
 80112b6:	4b21      	ldr	r3, [pc, #132]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112b8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 80112ba:	4b20      	ldr	r3, [pc, #128]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112bc:	7a9b      	ldrb	r3, [r3, #10]
 80112be:	f023 0304 	bic.w	r3, r3, #4
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	4b1d      	ldr	r3, [pc, #116]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112c6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 80112c8:	4b1c      	ldr	r3, [pc, #112]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112ca:	7bdb      	ldrb	r3, [r3, #15]
 80112cc:	f023 0310 	bic.w	r3, r3, #16
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	4b1a      	ldr	r3, [pc, #104]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112d4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 80112d6:	4b19      	ldr	r3, [pc, #100]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112d8:	7bdb      	ldrb	r3, [r3, #15]
 80112da:	f023 0308 	bic.w	r3, r3, #8
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	4b16      	ldr	r3, [pc, #88]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112e2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80112e4:	4b15      	ldr	r3, [pc, #84]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f023 0320 	bic.w	r3, r3, #32
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b13      	ldr	r3, [pc, #76]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112f0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 80112f2:	4b12      	ldr	r3, [pc, #72]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	f023 0308 	bic.w	r3, r3, #8
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	4b0f      	ldr	r3, [pc, #60]	; (801133c <lcd_clear_vol_unit+0x26c>)
 80112fe:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011300:	4b0e      	ldr	r3, [pc, #56]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011302:	7b9b      	ldrb	r3, [r3, #14]
 8011304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011308:	b2da      	uxtb	r2, r3
 801130a:	4b0c      	ldr	r3, [pc, #48]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801130c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801130e:	4b0b      	ldr	r3, [pc, #44]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011310:	7bdb      	ldrb	r3, [r3, #15]
 8011312:	f023 0302 	bic.w	r3, r3, #2
 8011316:	b2da      	uxtb	r2, r3
 8011318:	4b08      	ldr	r3, [pc, #32]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801131a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801131c:	4b07      	ldr	r3, [pc, #28]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f023 0302 	bic.w	r3, r3, #2
 8011324:	b2da      	uxtb	r2, r3
 8011326:	4b05      	ldr	r3, [pc, #20]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011328:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801132a:	4b04      	ldr	r3, [pc, #16]	; (801133c <lcd_clear_vol_unit+0x26c>)
 801132c:	795b      	ldrb	r3, [r3, #5]
 801132e:	f023 0302 	bic.w	r3, r3, #2
 8011332:	b2da      	uxtb	r2, r3
 8011334:	4b01      	ldr	r3, [pc, #4]	; (801133c <lcd_clear_vol_unit+0x26c>)
 8011336:	715a      	strb	r2, [r3, #5]
        break;
 8011338:	e103      	b.n	8011542 <lcd_clear_vol_unit+0x472>
 801133a:	bf00      	nop
 801133c:	20001df4 	.word	0x20001df4
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011340:	4b84      	ldr	r3, [pc, #528]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011342:	7a9b      	ldrb	r3, [r3, #10]
 8011344:	f023 0308 	bic.w	r3, r3, #8
 8011348:	b2da      	uxtb	r2, r3
 801134a:	4b82      	ldr	r3, [pc, #520]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801134c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 801134e:	4b81      	ldr	r3, [pc, #516]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011350:	7a9b      	ldrb	r3, [r3, #10]
 8011352:	f023 0310 	bic.w	r3, r3, #16
 8011356:	b2da      	uxtb	r2, r3
 8011358:	4b7e      	ldr	r3, [pc, #504]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801135a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 801135c:	4b7d      	ldr	r3, [pc, #500]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801135e:	7bdb      	ldrb	r3, [r3, #15]
 8011360:	f023 0308 	bic.w	r3, r3, #8
 8011364:	b2da      	uxtb	r2, r3
 8011366:	4b7b      	ldr	r3, [pc, #492]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011368:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801136a:	4b7a      	ldr	r3, [pc, #488]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f023 0310 	bic.w	r3, r3, #16
 8011372:	b2da      	uxtb	r2, r3
 8011374:	4b77      	ldr	r3, [pc, #476]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011376:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 8011378:	4b76      	ldr	r3, [pc, #472]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801137a:	795b      	ldrb	r3, [r3, #5]
 801137c:	f023 0304 	bic.w	r3, r3, #4
 8011380:	b2da      	uxtb	r2, r3
 8011382:	4b74      	ldr	r3, [pc, #464]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011384:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011386:	4b73      	ldr	r3, [pc, #460]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	f023 0308 	bic.w	r3, r3, #8
 801138e:	b2da      	uxtb	r2, r3
 8011390:	4b70      	ldr	r3, [pc, #448]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011392:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011394:	4b6f      	ldr	r3, [pc, #444]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011396:	795b      	ldrb	r3, [r3, #5]
 8011398:	f023 0320 	bic.w	r3, r3, #32
 801139c:	b2da      	uxtb	r2, r3
 801139e:	4b6d      	ldr	r3, [pc, #436]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113a0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80113a2:	4b6c      	ldr	r3, [pc, #432]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113a4:	7b9b      	ldrb	r3, [r3, #14]
 80113a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	4b69      	ldr	r3, [pc, #420]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113ae:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80113b0:	4b68      	ldr	r3, [pc, #416]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113b2:	7bdb      	ldrb	r3, [r3, #15]
 80113b4:	f023 0302 	bic.w	r3, r3, #2
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	4b66      	ldr	r3, [pc, #408]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113bc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 80113be:	4b65      	ldr	r3, [pc, #404]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113c0:	7cdb      	ldrb	r3, [r3, #19]
 80113c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	4b62      	ldr	r3, [pc, #392]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113ca:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80113cc:	4b61      	ldr	r3, [pc, #388]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113ce:	7cdb      	ldrb	r3, [r3, #19]
 80113d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b5f      	ldr	r3, [pc, #380]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113d8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80113da:	4b5e      	ldr	r3, [pc, #376]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	f023 0301 	bic.w	r3, r3, #1
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	4b5b      	ldr	r3, [pc, #364]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113e6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80113e8:	4b5a      	ldr	r3, [pc, #360]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	f023 0302 	bic.w	r3, r3, #2
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	4b58      	ldr	r3, [pc, #352]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113f4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 80113f6:	4b57      	ldr	r3, [pc, #348]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80113f8:	795b      	ldrb	r3, [r3, #5]
 80113fa:	f023 0301 	bic.w	r3, r3, #1
 80113fe:	b2da      	uxtb	r2, r3
 8011400:	4b54      	ldr	r3, [pc, #336]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011402:	715a      	strb	r2, [r3, #5]
        break;
 8011404:	e09d      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011406:	4b53      	ldr	r3, [pc, #332]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011408:	7a9b      	ldrb	r3, [r3, #10]
 801140a:	f023 0308 	bic.w	r3, r3, #8
 801140e:	b2da      	uxtb	r2, r3
 8011410:	4b50      	ldr	r3, [pc, #320]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011412:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011414:	4b4f      	ldr	r3, [pc, #316]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011416:	7bdb      	ldrb	r3, [r3, #15]
 8011418:	f023 0320 	bic.w	r3, r3, #32
 801141c:	b2da      	uxtb	r2, r3
 801141e:	4b4d      	ldr	r3, [pc, #308]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011420:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011422:	4b4c      	ldr	r3, [pc, #304]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	f023 0310 	bic.w	r3, r3, #16
 801142a:	b2da      	uxtb	r2, r3
 801142c:	4b49      	ldr	r3, [pc, #292]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801142e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011430:	4b48      	ldr	r3, [pc, #288]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f023 0320 	bic.w	r3, r3, #32
 8011438:	b2da      	uxtb	r2, r3
 801143a:	4b46      	ldr	r3, [pc, #280]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801143c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801143e:	4b45      	ldr	r3, [pc, #276]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	f023 0308 	bic.w	r3, r3, #8
 8011446:	b2da      	uxtb	r2, r3
 8011448:	4b42      	ldr	r3, [pc, #264]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801144a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 801144c:	4b41      	ldr	r3, [pc, #260]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801144e:	795b      	ldrb	r3, [r3, #5]
 8011450:	f023 0320 	bic.w	r3, r3, #32
 8011454:	b2da      	uxtb	r2, r3
 8011456:	4b3f      	ldr	r3, [pc, #252]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011458:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801145a:	4b3e      	ldr	r3, [pc, #248]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801145c:	7bdb      	ldrb	r3, [r3, #15]
 801145e:	f023 0302 	bic.w	r3, r3, #2
 8011462:	b2da      	uxtb	r2, r3
 8011464:	4b3b      	ldr	r3, [pc, #236]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011466:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8011468:	4b3a      	ldr	r3, [pc, #232]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	f023 0302 	bic.w	r3, r3, #2
 8011470:	b2da      	uxtb	r2, r3
 8011472:	4b38      	ldr	r3, [pc, #224]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011474:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8011476:	4b37      	ldr	r3, [pc, #220]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011478:	795b      	ldrb	r3, [r3, #5]
 801147a:	f023 0302 	bic.w	r3, r3, #2
 801147e:	b2da      	uxtb	r2, r3
 8011480:	4b34      	ldr	r3, [pc, #208]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011482:	715a      	strb	r2, [r3, #5]
        break;
 8011484:	e05d      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011486:	4b33      	ldr	r3, [pc, #204]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011488:	7a9b      	ldrb	r3, [r3, #10]
 801148a:	f023 0308 	bic.w	r3, r3, #8
 801148e:	b2da      	uxtb	r2, r3
 8011490:	4b30      	ldr	r3, [pc, #192]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011492:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011494:	4b2f      	ldr	r3, [pc, #188]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011496:	7bdb      	ldrb	r3, [r3, #15]
 8011498:	f023 0320 	bic.w	r3, r3, #32
 801149c:	b2da      	uxtb	r2, r3
 801149e:	4b2d      	ldr	r3, [pc, #180]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114a0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 80114a2:	4b2c      	ldr	r3, [pc, #176]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114a4:	7bdb      	ldrb	r3, [r3, #15]
 80114a6:	f023 0308 	bic.w	r3, r3, #8
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	4b29      	ldr	r3, [pc, #164]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114ae:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80114b0:	4b28      	ldr	r3, [pc, #160]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114b2:	7bdb      	ldrb	r3, [r3, #15]
 80114b4:	f023 0304 	bic.w	r3, r3, #4
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	4b26      	ldr	r3, [pc, #152]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114bc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80114be:	4b25      	ldr	r3, [pc, #148]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f023 0310 	bic.w	r3, r3, #16
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	4b22      	ldr	r3, [pc, #136]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114ca:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80114cc:	4b21      	ldr	r3, [pc, #132]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114ce:	7b9b      	ldrb	r3, [r3, #14]
 80114d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	4b1f      	ldr	r3, [pc, #124]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114d8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80114da:	4b1e      	ldr	r3, [pc, #120]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114dc:	7bdb      	ldrb	r3, [r3, #15]
 80114de:	f023 0302 	bic.w	r3, r3, #2
 80114e2:	b2da      	uxtb	r2, r3
 80114e4:	4b1b      	ldr	r3, [pc, #108]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114e6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80114e8:	4b1a      	ldr	r3, [pc, #104]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	f023 0302 	bic.w	r3, r3, #2
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	4b18      	ldr	r3, [pc, #96]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114f4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80114f6:	4b17      	ldr	r3, [pc, #92]	; (8011554 <lcd_clear_vol_unit+0x484>)
 80114f8:	795b      	ldrb	r3, [r3, #5]
 80114fa:	f023 0302 	bic.w	r3, r3, #2
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	4b14      	ldr	r3, [pc, #80]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011502:	715a      	strb	r2, [r3, #5]
        break;
 8011504:	e01d      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8011506:	4b13      	ldr	r3, [pc, #76]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011508:	7bdb      	ldrb	r3, [r3, #15]
 801150a:	f023 0304 	bic.w	r3, r3, #4
 801150e:	b2da      	uxtb	r2, r3
 8011510:	4b10      	ldr	r3, [pc, #64]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011512:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011514:	4b0f      	ldr	r3, [pc, #60]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	f023 0310 	bic.w	r3, r3, #16
 801151c:	b2da      	uxtb	r2, r3
 801151e:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011520:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011522:	4b0c      	ldr	r3, [pc, #48]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011524:	7cdb      	ldrb	r3, [r3, #19]
 8011526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801152a:	b2da      	uxtb	r2, r3
 801152c:	4b09      	ldr	r3, [pc, #36]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801152e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011530:	4b08      	ldr	r3, [pc, #32]	; (8011554 <lcd_clear_vol_unit+0x484>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	f023 0301 	bic.w	r3, r3, #1
 8011538:	b2da      	uxtb	r2, r3
 801153a:	4b06      	ldr	r3, [pc, #24]	; (8011554 <lcd_clear_vol_unit+0x484>)
 801153c:	701a      	strb	r2, [r3, #0]
        break;
 801153e:	e000      	b.n	8011542 <lcd_clear_vol_unit+0x472>
        default:
        break;
 8011540:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011542:	79bb      	ldrb	r3, [r7, #6]
 8011544:	4618      	mov	r0, r3
 8011546:	f001 f9bb 	bl	80128c0 <pcf8553_blink>
}
 801154a:	bf00      	nop
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20001df4 	.word	0x20001df4

08011558 <lcd_init>:
 * @brief Inicialización de la pantalla LCD mediante el puerto SPI1.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 8011558:	b580      	push	{r7, lr}
 801155a:	af00      	add	r7, sp, #0
    pcf8553_init();
 801155c:	f001 fa22 	bl	80129a4 <pcf8553_init>
}
 8011560:	bf00      	nop
 8011562:	bd80      	pop	{r7, pc}

08011564 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	71fb      	strb	r3, [r7, #7]
 801156e:	460b      	mov	r3, r1
 8011570:	71bb      	strb	r3, [r7, #6]
 8011572:	4613      	mov	r3, r2
 8011574:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 8011576:	797b      	ldrb	r3, [r7, #5]
 8011578:	3301      	adds	r3, #1
 801157a:	b2da      	uxtb	r2, r3
 801157c:	4bde      	ldr	r3, [pc, #888]	; (80118f8 <lcd_put_char+0x394>)
 801157e:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if (in_configuration == 0)
 8011580:	4bde      	ldr	r3, [pc, #888]	; (80118fc <lcd_put_char+0x398>)
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d10a      	bne.n	801159e <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 8011588:	797a      	ldrb	r2, [r7, #5]
 801158a:	79bb      	ldrb	r3, [r7, #6]
 801158c:	49dc      	ldr	r1, [pc, #880]	; (8011900 <lcd_put_char+0x39c>)
 801158e:	00d2      	lsls	r2, r2, #3
 8011590:	440a      	add	r2, r1
 8011592:	4413      	add	r3, r2
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	79fa      	ldrb	r2, [r7, #7]
 8011598:	429a      	cmp	r2, r3
 801159a:	f000 81d6 	beq.w	801194a <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 801159e:	797a      	ldrb	r2, [r7, #5]
 80115a0:	79bb      	ldrb	r3, [r7, #6]
 80115a2:	49d7      	ldr	r1, [pc, #860]	; (8011900 <lcd_put_char+0x39c>)
 80115a4:	00d2      	lsls	r2, r2, #3
 80115a6:	440a      	add	r2, r1
 80115a8:	4413      	add	r3, r2
 80115aa:	79fa      	ldrb	r2, [r7, #7]
 80115ac:	701a      	strb	r2, [r3, #0]

    switch (row)
 80115ae:	797b      	ldrb	r3, [r7, #5]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <lcd_put_char+0x56>
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d008      	beq.n	80115ca <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 80115b8:	e1ce      	b.n	8011958 <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 80115ba:	79bb      	ldrb	r3, [r7, #6]
 80115bc:	2b07      	cmp	r3, #7
 80115be:	f200 81c6 	bhi.w	801194e <lcd_put_char+0x3ea>
                g_col = col;
 80115c2:	4ad0      	ldr	r2, [pc, #832]	; (8011904 <lcd_put_char+0x3a0>)
 80115c4:	79bb      	ldrb	r3, [r7, #6]
 80115c6:	7013      	strb	r3, [r2, #0]
        break;
 80115c8:	e00a      	b.n	80115e0 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 80115ca:	79bb      	ldrb	r3, [r7, #6]
 80115cc:	2b06      	cmp	r3, #6
 80115ce:	f200 81c0 	bhi.w	8011952 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 80115d2:	79bb      	ldrb	r3, [r7, #6]
 80115d4:	f1c3 0306 	rsb	r3, r3, #6
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4bca      	ldr	r3, [pc, #808]	; (8011904 <lcd_put_char+0x3a0>)
 80115dc:	701a      	strb	r2, [r3, #0]
        break;
 80115de:	bf00      	nop
        break;
    }

    switch (c)
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	3b20      	subs	r3, #32
 80115e4:	2b19      	cmp	r3, #25
 80115e6:	f200 81b6 	bhi.w	8011956 <lcd_put_char+0x3f2>
 80115ea:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <lcd_put_char+0x8c>)
 80115ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f0:	08011659 	.word	0x08011659
 80115f4:	08011957 	.word	0x08011957
 80115f8:	08011957 	.word	0x08011957
 80115fc:	08011957 	.word	0x08011957
 8011600:	08011957 	.word	0x08011957
 8011604:	08011957 	.word	0x08011957
 8011608:	08011957 	.word	0x08011957
 801160c:	08011957 	.word	0x08011957
 8011610:	08011957 	.word	0x08011957
 8011614:	08011957 	.word	0x08011957
 8011618:	08011957 	.word	0x08011957
 801161c:	08011957 	.word	0x08011957
 8011620:	08011957 	.word	0x08011957
 8011624:	08011957 	.word	0x08011957
 8011628:	0801169b 	.word	0x0801169b
 801162c:	08011957 	.word	0x08011957
 8011630:	080116a5 	.word	0x080116a5
 8011634:	080116e7 	.word	0x080116e7
 8011638:	08011729 	.word	0x08011729
 801163c:	0801176b 	.word	0x0801176b
 8011640:	080117ad 	.word	0x080117ad
 8011644:	080117ef 	.word	0x080117ef
 8011648:	08011831 	.word	0x08011831
 801164c:	08011873 	.word	0x08011873
 8011650:	080118b5 	.word	0x080118b5
 8011654:	08011909 	.word	0x08011909
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 8011658:	2100      	movs	r1, #0
 801165a:	2000      	movs	r0, #0
 801165c:	f001 f836 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011660:	2100      	movs	r1, #0
 8011662:	2001      	movs	r0, #1
 8011664:	f001 f832 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011668:	2100      	movs	r1, #0
 801166a:	2002      	movs	r0, #2
 801166c:	f001 f82e 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011670:	2100      	movs	r1, #0
 8011672:	2003      	movs	r0, #3
 8011674:	f001 f82a 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011678:	2100      	movs	r1, #0
 801167a:	2004      	movs	r0, #4
 801167c:	f001 f826 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011680:	2100      	movs	r1, #0
 8011682:	2005      	movs	r0, #5
 8011684:	f001 f822 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011688:	2100      	movs	r1, #0
 801168a:	2006      	movs	r0, #6
 801168c:	f001 f81e 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011690:	2100      	movs	r1, #0
 8011692:	2007      	movs	r0, #7
 8011694:	f001 f81a 	bl	80126cc <lcd_write_line>
        break;
 8011698:	e15e      	b.n	8011958 <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 801169a:	2101      	movs	r1, #1
 801169c:	2007      	movs	r0, #7
 801169e:	f001 f815 	bl	80126cc <lcd_write_line>
        break;
 80116a2:	e159      	b.n	8011958 <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 80116a4:	2101      	movs	r1, #1
 80116a6:	2000      	movs	r0, #0
 80116a8:	f001 f810 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80116ac:	2101      	movs	r1, #1
 80116ae:	2001      	movs	r0, #1
 80116b0:	f001 f80c 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80116b4:	2101      	movs	r1, #1
 80116b6:	2002      	movs	r0, #2
 80116b8:	f001 f808 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80116bc:	2100      	movs	r1, #0
 80116be:	2003      	movs	r0, #3
 80116c0:	f001 f804 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80116c4:	2101      	movs	r1, #1
 80116c6:	2004      	movs	r0, #4
 80116c8:	f001 f800 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80116cc:	2101      	movs	r1, #1
 80116ce:	2005      	movs	r0, #5
 80116d0:	f000 fffc 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80116d4:	2101      	movs	r1, #1
 80116d6:	2006      	movs	r0, #6
 80116d8:	f000 fff8 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80116dc:	2100      	movs	r1, #0
 80116de:	2007      	movs	r0, #7
 80116e0:	f000 fff4 	bl	80126cc <lcd_write_line>
        break;
 80116e4:	e138      	b.n	8011958 <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80116e6:	2100      	movs	r1, #0
 80116e8:	2000      	movs	r0, #0
 80116ea:	f000 ffef 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80116ee:	2100      	movs	r1, #0
 80116f0:	2001      	movs	r0, #1
 80116f2:	f000 ffeb 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80116f6:	2101      	movs	r1, #1
 80116f8:	2002      	movs	r0, #2
 80116fa:	f000 ffe7 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80116fe:	2100      	movs	r1, #0
 8011700:	2003      	movs	r0, #3
 8011702:	f000 ffe3 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011706:	2100      	movs	r1, #0
 8011708:	2004      	movs	r0, #4
 801170a:	f000 ffdf 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801170e:	2101      	movs	r1, #1
 8011710:	2005      	movs	r0, #5
 8011712:	f000 ffdb 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011716:	2100      	movs	r1, #0
 8011718:	2006      	movs	r0, #6
 801171a:	f000 ffd7 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801171e:	2100      	movs	r1, #0
 8011720:	2007      	movs	r0, #7
 8011722:	f000 ffd3 	bl	80126cc <lcd_write_line>
        break;
 8011726:	e117      	b.n	8011958 <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 8011728:	2101      	movs	r1, #1
 801172a:	2000      	movs	r0, #0
 801172c:	f000 ffce 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011730:	2101      	movs	r1, #1
 8011732:	2001      	movs	r0, #1
 8011734:	f000 ffca 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011738:	2100      	movs	r1, #0
 801173a:	2002      	movs	r0, #2
 801173c:	f000 ffc6 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011740:	2101      	movs	r1, #1
 8011742:	2003      	movs	r0, #3
 8011744:	f000 ffc2 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011748:	2100      	movs	r1, #0
 801174a:	2004      	movs	r0, #4
 801174c:	f000 ffbe 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011750:	2101      	movs	r1, #1
 8011752:	2005      	movs	r0, #5
 8011754:	f000 ffba 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011758:	2101      	movs	r1, #1
 801175a:	2006      	movs	r0, #6
 801175c:	f000 ffb6 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011760:	2100      	movs	r1, #0
 8011762:	2007      	movs	r0, #7
 8011764:	f000 ffb2 	bl	80126cc <lcd_write_line>
        break;
 8011768:	e0f6      	b.n	8011958 <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 801176a:	2101      	movs	r1, #1
 801176c:	2000      	movs	r0, #0
 801176e:	f000 ffad 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011772:	2100      	movs	r1, #0
 8011774:	2001      	movs	r0, #1
 8011776:	f000 ffa9 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801177a:	2101      	movs	r1, #1
 801177c:	2002      	movs	r0, #2
 801177e:	f000 ffa5 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011782:	2101      	movs	r1, #1
 8011784:	2003      	movs	r0, #3
 8011786:	f000 ffa1 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801178a:	2100      	movs	r1, #0
 801178c:	2004      	movs	r0, #4
 801178e:	f000 ff9d 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011792:	2101      	movs	r1, #1
 8011794:	2005      	movs	r0, #5
 8011796:	f000 ff99 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801179a:	2101      	movs	r1, #1
 801179c:	2006      	movs	r0, #6
 801179e:	f000 ff95 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80117a2:	2100      	movs	r1, #0
 80117a4:	2007      	movs	r0, #7
 80117a6:	f000 ff91 	bl	80126cc <lcd_write_line>
        break;
 80117aa:	e0d5      	b.n	8011958 <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 80117ac:	2100      	movs	r1, #0
 80117ae:	2000      	movs	r0, #0
 80117b0:	f000 ff8c 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80117b4:	2100      	movs	r1, #0
 80117b6:	2001      	movs	r0, #1
 80117b8:	f000 ff88 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80117bc:	2101      	movs	r1, #1
 80117be:	2002      	movs	r0, #2
 80117c0:	f000 ff84 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80117c4:	2101      	movs	r1, #1
 80117c6:	2003      	movs	r0, #3
 80117c8:	f000 ff80 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80117cc:	2101      	movs	r1, #1
 80117ce:	2004      	movs	r0, #4
 80117d0:	f000 ff7c 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80117d4:	2101      	movs	r1, #1
 80117d6:	2005      	movs	r0, #5
 80117d8:	f000 ff78 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80117dc:	2100      	movs	r1, #0
 80117de:	2006      	movs	r0, #6
 80117e0:	f000 ff74 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80117e4:	2100      	movs	r1, #0
 80117e6:	2007      	movs	r0, #7
 80117e8:	f000 ff70 	bl	80126cc <lcd_write_line>
        break;
 80117ec:	e0b4      	b.n	8011958 <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80117ee:	2101      	movs	r1, #1
 80117f0:	2000      	movs	r0, #0
 80117f2:	f000 ff6b 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80117f6:	2100      	movs	r1, #0
 80117f8:	2001      	movs	r0, #1
 80117fa:	f000 ff67 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80117fe:	2101      	movs	r1, #1
 8011800:	2002      	movs	r0, #2
 8011802:	f000 ff63 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011806:	2101      	movs	r1, #1
 8011808:	2003      	movs	r0, #3
 801180a:	f000 ff5f 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801180e:	2101      	movs	r1, #1
 8011810:	2004      	movs	r0, #4
 8011812:	f000 ff5b 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011816:	2100      	movs	r1, #0
 8011818:	2005      	movs	r0, #5
 801181a:	f000 ff57 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801181e:	2101      	movs	r1, #1
 8011820:	2006      	movs	r0, #6
 8011822:	f000 ff53 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011826:	2100      	movs	r1, #0
 8011828:	2007      	movs	r0, #7
 801182a:	f000 ff4f 	bl	80126cc <lcd_write_line>
        break;
 801182e:	e093      	b.n	8011958 <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011830:	2101      	movs	r1, #1
 8011832:	2000      	movs	r0, #0
 8011834:	f000 ff4a 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011838:	2101      	movs	r1, #1
 801183a:	2001      	movs	r0, #1
 801183c:	f000 ff46 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011840:	2101      	movs	r1, #1
 8011842:	2002      	movs	r0, #2
 8011844:	f000 ff42 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011848:	2101      	movs	r1, #1
 801184a:	2003      	movs	r0, #3
 801184c:	f000 ff3e 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011850:	2101      	movs	r1, #1
 8011852:	2004      	movs	r0, #4
 8011854:	f000 ff3a 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011858:	2100      	movs	r1, #0
 801185a:	2005      	movs	r0, #5
 801185c:	f000 ff36 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011860:	2101      	movs	r1, #1
 8011862:	2006      	movs	r0, #6
 8011864:	f000 ff32 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011868:	2100      	movs	r1, #0
 801186a:	2007      	movs	r0, #7
 801186c:	f000 ff2e 	bl	80126cc <lcd_write_line>
        break;
 8011870:	e072      	b.n	8011958 <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011872:	2100      	movs	r1, #0
 8011874:	2000      	movs	r0, #0
 8011876:	f000 ff29 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801187a:	2100      	movs	r1, #0
 801187c:	2001      	movs	r0, #1
 801187e:	f000 ff25 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011882:	2101      	movs	r1, #1
 8011884:	2002      	movs	r0, #2
 8011886:	f000 ff21 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801188a:	2100      	movs	r1, #0
 801188c:	2003      	movs	r0, #3
 801188e:	f000 ff1d 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011892:	2100      	movs	r1, #0
 8011894:	2004      	movs	r0, #4
 8011896:	f000 ff19 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801189a:	2101      	movs	r1, #1
 801189c:	2005      	movs	r0, #5
 801189e:	f000 ff15 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80118a2:	2101      	movs	r1, #1
 80118a4:	2006      	movs	r0, #6
 80118a6:	f000 ff11 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80118aa:	2100      	movs	r1, #0
 80118ac:	2007      	movs	r0, #7
 80118ae:	f000 ff0d 	bl	80126cc <lcd_write_line>
        break;
 80118b2:	e051      	b.n	8011958 <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 80118b4:	2101      	movs	r1, #1
 80118b6:	2000      	movs	r0, #0
 80118b8:	f000 ff08 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80118bc:	2101      	movs	r1, #1
 80118be:	2001      	movs	r0, #1
 80118c0:	f000 ff04 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80118c4:	2101      	movs	r1, #1
 80118c6:	2002      	movs	r0, #2
 80118c8:	f000 ff00 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80118cc:	2101      	movs	r1, #1
 80118ce:	2003      	movs	r0, #3
 80118d0:	f000 fefc 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80118d4:	2101      	movs	r1, #1
 80118d6:	2004      	movs	r0, #4
 80118d8:	f000 fef8 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80118dc:	2101      	movs	r1, #1
 80118de:	2005      	movs	r0, #5
 80118e0:	f000 fef4 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80118e4:	2101      	movs	r1, #1
 80118e6:	2006      	movs	r0, #6
 80118e8:	f000 fef0 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80118ec:	2100      	movs	r1, #0
 80118ee:	2007      	movs	r0, #7
 80118f0:	f000 feec 	bl	80126cc <lcd_write_line>
        break;
 80118f4:	e030      	b.n	8011958 <lcd_put_char+0x3f4>
 80118f6:	bf00      	nop
 80118f8:	20001d61 	.word	0x20001d61
 80118fc:	20001e10 	.word	0x20001e10
 8011900:	20001d50 	.word	0x20001d50
 8011904:	20001d60 	.word	0x20001d60
        case '9':
            lcd_write_line(SEG_A, 0);
 8011908:	2100      	movs	r1, #0
 801190a:	2000      	movs	r0, #0
 801190c:	f000 fede 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011910:	2100      	movs	r1, #0
 8011912:	2001      	movs	r0, #1
 8011914:	f000 feda 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011918:	2101      	movs	r1, #1
 801191a:	2002      	movs	r0, #2
 801191c:	f000 fed6 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011920:	2101      	movs	r1, #1
 8011922:	2003      	movs	r0, #3
 8011924:	f000 fed2 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011928:	2101      	movs	r1, #1
 801192a:	2004      	movs	r0, #4
 801192c:	f000 fece 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011930:	2101      	movs	r1, #1
 8011932:	2005      	movs	r0, #5
 8011934:	f000 feca 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011938:	2101      	movs	r1, #1
 801193a:	2006      	movs	r0, #6
 801193c:	f000 fec6 	bl	80126cc <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011940:	2100      	movs	r1, #0
 8011942:	2007      	movs	r0, #7
 8011944:	f000 fec2 	bl	80126cc <lcd_write_line>
        break;
 8011948:	e006      	b.n	8011958 <lcd_put_char+0x3f4>
            return;
 801194a:	bf00      	nop
 801194c:	e004      	b.n	8011958 <lcd_put_char+0x3f4>
                return;
 801194e:	bf00      	nop
 8011950:	e002      	b.n	8011958 <lcd_put_char+0x3f4>
                return;
 8011952:	bf00      	nop
 8011954:	e000      	b.n	8011958 <lcd_put_char+0x3f4>
        default:
        break;
 8011956:	bf00      	nop
    }
}
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop

08011960 <lcd_refresh>:
 * enviar en dicho buffer y luego enviar todo junto.
 * @param None
 * @retval None
 */
void lcd_refresh()
{
 8011960:	b580      	push	{r7, lr}
 8011962:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011964:	f000 fff2 	bl	801294c <pcf8553_dump>
}
 8011968:	bf00      	nop
 801196a:	bd80      	pop	{r7, pc}

0801196c <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	4603      	mov	r3, r0
 8011974:	460a      	mov	r2, r1
 8011976:	71fb      	strb	r3, [r7, #7]
 8011978:	4613      	mov	r3, r2
 801197a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 801197c:	79fb      	ldrb	r3, [r7, #7]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d14c      	bne.n	8011a1c <lcd_set_point+0xb0>
    {
        switch (point)
 8011982:	79bb      	ldrb	r3, [r7, #6]
 8011984:	2b06      	cmp	r3, #6
 8011986:	f200 808f 	bhi.w	8011aa8 <lcd_set_point+0x13c>
 801198a:	a201      	add	r2, pc, #4	; (adr r2, 8011990 <lcd_set_point+0x24>)
 801198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011990:	080119ad 	.word	0x080119ad
 8011994:	080119bd 	.word	0x080119bd
 8011998:	080119cd 	.word	0x080119cd
 801199c:	080119dd 	.word	0x080119dd
 80119a0:	080119ed 	.word	0x080119ed
 80119a4:	080119fd 	.word	0x080119fd
 80119a8:	08011a0d 	.word	0x08011a0d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 80119ac:	4b44      	ldr	r3, [pc, #272]	; (8011ac0 <lcd_set_point+0x154>)
 80119ae:	79db      	ldrb	r3, [r3, #7]
 80119b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	4b42      	ldr	r3, [pc, #264]	; (8011ac0 <lcd_set_point+0x154>)
 80119b8:	71da      	strb	r2, [r3, #7]
            break;
 80119ba:	e07a      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 80119bc:	4b40      	ldr	r3, [pc, #256]	; (8011ac0 <lcd_set_point+0x154>)
 80119be:	7a1b      	ldrb	r3, [r3, #8]
 80119c0:	f043 0302 	orr.w	r3, r3, #2
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	4b3e      	ldr	r3, [pc, #248]	; (8011ac0 <lcd_set_point+0x154>)
 80119c8:	721a      	strb	r2, [r3, #8]
            break;
 80119ca:	e072      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 80119cc:	4b3c      	ldr	r3, [pc, #240]	; (8011ac0 <lcd_set_point+0x154>)
 80119ce:	7a1b      	ldrb	r3, [r3, #8]
 80119d0:	f043 0308 	orr.w	r3, r3, #8
 80119d4:	b2da      	uxtb	r2, r3
 80119d6:	4b3a      	ldr	r3, [pc, #232]	; (8011ac0 <lcd_set_point+0x154>)
 80119d8:	721a      	strb	r2, [r3, #8]
            break;
 80119da:	e06a      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80119dc:	4b38      	ldr	r3, [pc, #224]	; (8011ac0 <lcd_set_point+0x154>)
 80119de:	7a1b      	ldrb	r3, [r3, #8]
 80119e0:	f043 0320 	orr.w	r3, r3, #32
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	4b36      	ldr	r3, [pc, #216]	; (8011ac0 <lcd_set_point+0x154>)
 80119e8:	721a      	strb	r2, [r3, #8]
            break;
 80119ea:	e062      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80119ec:	4b34      	ldr	r3, [pc, #208]	; (8011ac0 <lcd_set_point+0x154>)
 80119ee:	7a1b      	ldrb	r3, [r3, #8]
 80119f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	4b32      	ldr	r3, [pc, #200]	; (8011ac0 <lcd_set_point+0x154>)
 80119f8:	721a      	strb	r2, [r3, #8]
            break;
 80119fa:	e05a      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 80119fc:	4b30      	ldr	r3, [pc, #192]	; (8011ac0 <lcd_set_point+0x154>)
 80119fe:	7a5b      	ldrb	r3, [r3, #9]
 8011a00:	f043 0302 	orr.w	r3, r3, #2
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	4b2e      	ldr	r3, [pc, #184]	; (8011ac0 <lcd_set_point+0x154>)
 8011a08:	725a      	strb	r2, [r3, #9]
            break;
 8011a0a:	e052      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011a0c:	4b2c      	ldr	r3, [pc, #176]	; (8011ac0 <lcd_set_point+0x154>)
 8011a0e:	7a5b      	ldrb	r3, [r3, #9]
 8011a10:	f043 0308 	orr.w	r3, r3, #8
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	4b2a      	ldr	r3, [pc, #168]	; (8011ac0 <lcd_set_point+0x154>)
 8011a18:	725a      	strb	r2, [r3, #9]
            break;
 8011a1a:	e04a      	b.n	8011ab2 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011a1c:	79fb      	ldrb	r3, [r7, #7]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d144      	bne.n	8011aac <lcd_set_point+0x140>
    {
        switch (point)
 8011a22:	79bb      	ldrb	r3, [r7, #6]
 8011a24:	2b05      	cmp	r3, #5
 8011a26:	d843      	bhi.n	8011ab0 <lcd_set_point+0x144>
 8011a28:	a201      	add	r2, pc, #4	; (adr r2, 8011a30 <lcd_set_point+0xc4>)
 8011a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a2e:	bf00      	nop
 8011a30:	08011a49 	.word	0x08011a49
 8011a34:	08011a59 	.word	0x08011a59
 8011a38:	08011a69 	.word	0x08011a69
 8011a3c:	08011a79 	.word	0x08011a79
 8011a40:	08011a89 	.word	0x08011a89
 8011a44:	08011a99 	.word	0x08011a99
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 8011a48:	4b1d      	ldr	r3, [pc, #116]	; (8011ac0 <lcd_set_point+0x154>)
 8011a4a:	79db      	ldrb	r3, [r3, #7]
 8011a4c:	f043 0304 	orr.w	r3, r3, #4
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	4b1b      	ldr	r3, [pc, #108]	; (8011ac0 <lcd_set_point+0x154>)
 8011a54:	71da      	strb	r2, [r3, #7]
            break;
 8011a56:	e02c      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 8011a58:	4b19      	ldr	r3, [pc, #100]	; (8011ac0 <lcd_set_point+0x154>)
 8011a5a:	79db      	ldrb	r3, [r3, #7]
 8011a5c:	f043 0301 	orr.w	r3, r3, #1
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	4b17      	ldr	r3, [pc, #92]	; (8011ac0 <lcd_set_point+0x154>)
 8011a64:	71da      	strb	r2, [r3, #7]
            break;
 8011a66:	e024      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 8011a68:	4b15      	ldr	r3, [pc, #84]	; (8011ac0 <lcd_set_point+0x154>)
 8011a6a:	799b      	ldrb	r3, [r3, #6]
 8011a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	4b13      	ldr	r3, [pc, #76]	; (8011ac0 <lcd_set_point+0x154>)
 8011a74:	719a      	strb	r2, [r3, #6]
            break;
 8011a76:	e01c      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 8011a78:	4b11      	ldr	r3, [pc, #68]	; (8011ac0 <lcd_set_point+0x154>)
 8011a7a:	799b      	ldrb	r3, [r3, #6]
 8011a7c:	f043 0310 	orr.w	r3, r3, #16
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b0f      	ldr	r3, [pc, #60]	; (8011ac0 <lcd_set_point+0x154>)
 8011a84:	719a      	strb	r2, [r3, #6]
            break;
 8011a86:	e014      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 8011a88:	4b0d      	ldr	r3, [pc, #52]	; (8011ac0 <lcd_set_point+0x154>)
 8011a8a:	799b      	ldrb	r3, [r3, #6]
 8011a8c:	f043 0304 	orr.w	r3, r3, #4
 8011a90:	b2da      	uxtb	r2, r3
 8011a92:	4b0b      	ldr	r3, [pc, #44]	; (8011ac0 <lcd_set_point+0x154>)
 8011a94:	719a      	strb	r2, [r3, #6]
            break;
 8011a96:	e00c      	b.n	8011ab2 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 8011a98:	4b09      	ldr	r3, [pc, #36]	; (8011ac0 <lcd_set_point+0x154>)
 8011a9a:	799b      	ldrb	r3, [r3, #6]
 8011a9c:	f043 0301 	orr.w	r3, r3, #1
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	4b07      	ldr	r3, [pc, #28]	; (8011ac0 <lcd_set_point+0x154>)
 8011aa4:	719a      	strb	r2, [r3, #6]
            break;
 8011aa6:	e004      	b.n	8011ab2 <lcd_set_point+0x146>
            break;
 8011aa8:	bf00      	nop
 8011aaa:	e002      	b.n	8011ab2 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 8011aac:	bf00      	nop
 8011aae:	e000      	b.n	8011ab2 <lcd_set_point+0x146>
            break;
 8011ab0:	bf00      	nop
}
 8011ab2:	bf00      	nop
 8011ab4:	370c      	adds	r7, #12
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	20001df4 	.word	0x20001df4

08011ac4 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	4603      	mov	r3, r0
 8011acc:	460a      	mov	r2, r1
 8011ace:	71fb      	strb	r3, [r7, #7]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 8011ad4:	79fb      	ldrb	r3, [r7, #7]
 8011ad6:	2b16      	cmp	r3, #22
 8011ad8:	f200 8366 	bhi.w	80121a8 <lcd_set_symbol+0x6e4>
 8011adc:	a201      	add	r2, pc, #4	; (adr r2, 8011ae4 <lcd_set_symbol+0x20>)
 8011ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae2:	bf00      	nop
 8011ae4:	08011b51 	.word	0x08011b51
 8011ae8:	08011b41 	.word	0x08011b41
 8011aec:	08011b71 	.word	0x08011b71
 8011af0:	08011b81 	.word	0x08011b81
 8011af4:	08011b61 	.word	0x08011b61
 8011af8:	08011bb1 	.word	0x08011bb1
 8011afc:	08011ba1 	.word	0x08011ba1
 8011b00:	08011bc1 	.word	0x08011bc1
 8011b04:	08011b91 	.word	0x08011b91
 8011b08:	08011bd1 	.word	0x08011bd1
 8011b0c:	08011c5f 	.word	0x08011c5f
 8011b10:	08011d8d 	.word	0x08011d8d
 8011b14:	08011dd5 	.word	0x08011dd5
 8011b18:	08011e63 	.word	0x08011e63
 8011b1c:	08011ec7 	.word	0x08011ec7
 8011b20:	08011f2b 	.word	0x08011f2b
 8011b24:	08011f8f 	.word	0x08011f8f
 8011b28:	08011fc9 	.word	0x08011fc9
 8011b2c:	08011fed 	.word	0x08011fed
 8011b30:	08012035 	.word	0x08012035
 8011b34:	0801207d 	.word	0x0801207d
 8011b38:	080120b7 	.word	0x080120b7
 8011b3c:	080120ff 	.word	0x080120ff
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011b40:	4b91      	ldr	r3, [pc, #580]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b42:	789b      	ldrb	r3, [r3, #2]
 8011b44:	f043 0320 	orr.w	r3, r3, #32
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	4b8f      	ldr	r3, [pc, #572]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b4c:	709a      	strb	r2, [r3, #2]
        break;
 8011b4e:	e32c      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011b50:	4b8d      	ldr	r3, [pc, #564]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b52:	79db      	ldrb	r3, [r3, #7]
 8011b54:	f043 0320 	orr.w	r3, r3, #32
 8011b58:	b2da      	uxtb	r2, r3
 8011b5a:	4b8b      	ldr	r3, [pc, #556]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b5c:	71da      	strb	r2, [r3, #7]
        break;
 8011b5e:	e324      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011b60:	4b89      	ldr	r3, [pc, #548]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b62:	7b1b      	ldrb	r3, [r3, #12]
 8011b64:	f043 0320 	orr.w	r3, r3, #32
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	4b87      	ldr	r3, [pc, #540]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b6c:	731a      	strb	r2, [r3, #12]
        break;
 8011b6e:	e31c      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011b70:	4b85      	ldr	r3, [pc, #532]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b72:	7c5b      	ldrb	r3, [r3, #17]
 8011b74:	f043 0320 	orr.w	r3, r3, #32
 8011b78:	b2da      	uxtb	r2, r3
 8011b7a:	4b83      	ldr	r3, [pc, #524]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b7c:	745a      	strb	r2, [r3, #17]
        break;
 8011b7e:	e314      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011b80:	4b81      	ldr	r3, [pc, #516]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b82:	789b      	ldrb	r3, [r3, #2]
 8011b84:	f043 0310 	orr.w	r3, r3, #16
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	4b7f      	ldr	r3, [pc, #508]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b8c:	709a      	strb	r2, [r3, #2]
        break;
 8011b8e:	e30c      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011b90:	4b7d      	ldr	r3, [pc, #500]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b92:	79db      	ldrb	r3, [r3, #7]
 8011b94:	f043 0310 	orr.w	r3, r3, #16
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	4b7b      	ldr	r3, [pc, #492]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011b9c:	71da      	strb	r2, [r3, #7]
        break;
 8011b9e:	e304      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011ba0:	4b79      	ldr	r3, [pc, #484]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011ba2:	7b1b      	ldrb	r3, [r3, #12]
 8011ba4:	f043 0310 	orr.w	r3, r3, #16
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	4b77      	ldr	r3, [pc, #476]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bac:	731a      	strb	r2, [r3, #12]
        break;
 8011bae:	e2fc      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 8011bb0:	4b75      	ldr	r3, [pc, #468]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bb2:	7c5b      	ldrb	r3, [r3, #17]
 8011bb4:	f043 0310 	orr.w	r3, r3, #16
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	4b73      	ldr	r3, [pc, #460]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bbc:	745a      	strb	r2, [r3, #17]
        break;
 8011bbe:	e2f4      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 8011bc0:	4b71      	ldr	r3, [pc, #452]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bc2:	7a9b      	ldrb	r3, [r3, #10]
 8011bc4:	f043 0302 	orr.w	r3, r3, #2
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	4b6f      	ldr	r3, [pc, #444]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bcc:	729a      	strb	r2, [r3, #10]
        break;
 8011bce:	e2ec      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011bd0:	4b6d      	ldr	r3, [pc, #436]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bd2:	7bdb      	ldrb	r3, [r3, #15]
 8011bd4:	f043 0320 	orr.w	r3, r3, #32
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	4b6b      	ldr	r3, [pc, #428]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bdc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011bde:	4b6a      	ldr	r3, [pc, #424]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011be0:	7bdb      	ldrb	r3, [r3, #15]
 8011be2:	f043 0310 	orr.w	r3, r3, #16
 8011be6:	b2da      	uxtb	r2, r3
 8011be8:	4b67      	ldr	r3, [pc, #412]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bea:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011bec:	4b66      	ldr	r3, [pc, #408]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	f043 0320 	orr.w	r3, r3, #32
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	4b64      	ldr	r3, [pc, #400]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bf8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 8011bfa:	4b63      	ldr	r3, [pc, #396]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	f043 0304 	orr.w	r3, r3, #4
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	4b60      	ldr	r3, [pc, #384]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c06:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011c08:	4b5f      	ldr	r3, [pc, #380]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c0a:	7b9b      	ldrb	r3, [r3, #14]
 8011c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c10:	b2da      	uxtb	r2, r3
 8011c12:	4b5d      	ldr	r3, [pc, #372]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c14:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011c16:	4b5c      	ldr	r3, [pc, #368]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c18:	7bdb      	ldrb	r3, [r3, #15]
 8011c1a:	f043 0302 	orr.w	r3, r3, #2
 8011c1e:	b2da      	uxtb	r2, r3
 8011c20:	4b59      	ldr	r3, [pc, #356]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c22:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011c24:	4b58      	ldr	r3, [pc, #352]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c26:	7cdb      	ldrb	r3, [r3, #19]
 8011c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c2c:	b2da      	uxtb	r2, r3
 8011c2e:	4b56      	ldr	r3, [pc, #344]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c30:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011c32:	4b55      	ldr	r3, [pc, #340]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	4b52      	ldr	r3, [pc, #328]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c3e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011c40:	4b51      	ldr	r3, [pc, #324]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	f043 0302 	orr.w	r3, r3, #2
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	4b4f      	ldr	r3, [pc, #316]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c4c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011c4e:	4b4e      	ldr	r3, [pc, #312]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c50:	795b      	ldrb	r3, [r3, #5]
 8011c52:	f043 0302 	orr.w	r3, r3, #2
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	4b4b      	ldr	r3, [pc, #300]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c5a:	715a      	strb	r2, [r3, #5]
        break;
 8011c5c:	e2a5      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011c5e:	4b4a      	ldr	r3, [pc, #296]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c60:	7b5b      	ldrb	r3, [r3, #13]
 8011c62:	f043 0302 	orr.w	r3, r3, #2
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	4b47      	ldr	r3, [pc, #284]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c6a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011c6c:	4b46      	ldr	r3, [pc, #280]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c6e:	7b5b      	ldrb	r3, [r3, #13]
 8011c70:	f043 0301 	orr.w	r3, r3, #1
 8011c74:	b2da      	uxtb	r2, r3
 8011c76:	4b44      	ldr	r3, [pc, #272]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c78:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 8011c7a:	4b43      	ldr	r3, [pc, #268]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c7c:	7c9b      	ldrb	r3, [r3, #18]
 8011c7e:	f043 0302 	orr.w	r3, r3, #2
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	4b40      	ldr	r3, [pc, #256]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c86:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 8011c88:	4b3f      	ldr	r3, [pc, #252]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c8a:	7c9b      	ldrb	r3, [r3, #18]
 8011c8c:	f043 0301 	orr.w	r3, r3, #1
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	4b3d      	ldr	r3, [pc, #244]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c94:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 8011c96:	4b3c      	ldr	r3, [pc, #240]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011c98:	78db      	ldrb	r3, [r3, #3]
 8011c9a:	f043 0301 	orr.w	r3, r3, #1
 8011c9e:	b2da      	uxtb	r2, r3
 8011ca0:	4b39      	ldr	r3, [pc, #228]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011ca2:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 8011ca4:	4b38      	ldr	r3, [pc, #224]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011ca6:	7b5b      	ldrb	r3, [r3, #13]
 8011ca8:	f043 0308 	orr.w	r3, r3, #8
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	4b36      	ldr	r3, [pc, #216]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cb0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 8011cb2:	4b35      	ldr	r3, [pc, #212]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cb4:	7b5b      	ldrb	r3, [r3, #13]
 8011cb6:	f043 0304 	orr.w	r3, r3, #4
 8011cba:	b2da      	uxtb	r2, r3
 8011cbc:	4b32      	ldr	r3, [pc, #200]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cbe:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 8011cc0:	4b31      	ldr	r3, [pc, #196]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cc2:	7c9b      	ldrb	r3, [r3, #18]
 8011cc4:	f043 0308 	orr.w	r3, r3, #8
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	4b2f      	ldr	r3, [pc, #188]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011ccc:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 8011cce:	4b2e      	ldr	r3, [pc, #184]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cd0:	7c9b      	ldrb	r3, [r3, #18]
 8011cd2:	f043 0304 	orr.w	r3, r3, #4
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	4b2b      	ldr	r3, [pc, #172]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cda:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 8011cdc:	4b2a      	ldr	r3, [pc, #168]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cde:	78db      	ldrb	r3, [r3, #3]
 8011ce0:	f043 0304 	orr.w	r3, r3, #4
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	4b28      	ldr	r3, [pc, #160]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011ce8:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 8011cea:	4b27      	ldr	r3, [pc, #156]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cec:	78db      	ldrb	r3, [r3, #3]
 8011cee:	f043 0308 	orr.w	r3, r3, #8
 8011cf2:	b2da      	uxtb	r2, r3
 8011cf4:	4b24      	ldr	r3, [pc, #144]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cf6:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 8011cf8:	4b23      	ldr	r3, [pc, #140]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011cfa:	7b5b      	ldrb	r3, [r3, #13]
 8011cfc:	f043 0320 	orr.w	r3, r3, #32
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	4b21      	ldr	r3, [pc, #132]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d04:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 8011d06:	4b20      	ldr	r3, [pc, #128]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d08:	7b5b      	ldrb	r3, [r3, #13]
 8011d0a:	f043 0310 	orr.w	r3, r3, #16
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	4b1d      	ldr	r3, [pc, #116]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d12:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011d14:	4b1c      	ldr	r3, [pc, #112]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d16:	7c9b      	ldrb	r3, [r3, #18]
 8011d18:	f043 0310 	orr.w	r3, r3, #16
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	4b1a      	ldr	r3, [pc, #104]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d20:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011d22:	4b19      	ldr	r3, [pc, #100]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d24:	78db      	ldrb	r3, [r3, #3]
 8011d26:	f043 0320 	orr.w	r3, r3, #32
 8011d2a:	b2da      	uxtb	r2, r3
 8011d2c:	4b16      	ldr	r3, [pc, #88]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d2e:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011d30:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d32:	7a1b      	ldrb	r3, [r3, #8]
 8011d34:	f043 0310 	orr.w	r3, r3, #16
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	4b13      	ldr	r3, [pc, #76]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d3c:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011d3e:	4b12      	ldr	r3, [pc, #72]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d40:	7b5b      	ldrb	r3, [r3, #13]
 8011d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	4b0f      	ldr	r3, [pc, #60]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d4a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011d4c:	4b0e      	ldr	r3, [pc, #56]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d4e:	7b5b      	ldrb	r3, [r3, #13]
 8011d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d54:	b2da      	uxtb	r2, r3
 8011d56:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d58:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 8011d5a:	4b0b      	ldr	r3, [pc, #44]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d5c:	7c9b      	ldrb	r3, [r3, #18]
 8011d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d62:	b2da      	uxtb	r2, r3
 8011d64:	4b08      	ldr	r3, [pc, #32]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d66:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011d68:	4b07      	ldr	r3, [pc, #28]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d6a:	78db      	ldrb	r3, [r3, #3]
 8011d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d70:	b2da      	uxtb	r2, r3
 8011d72:	4b05      	ldr	r3, [pc, #20]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d74:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011d76:	4b04      	ldr	r3, [pc, #16]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d78:	7a1b      	ldrb	r3, [r3, #8]
 8011d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	4b01      	ldr	r3, [pc, #4]	; (8011d88 <lcd_set_symbol+0x2c4>)
 8011d82:	721a      	strb	r2, [r3, #8]

        break;
 8011d84:	e211      	b.n	80121aa <lcd_set_symbol+0x6e6>
 8011d86:	bf00      	nop
 8011d88:	20001df4 	.word	0x20001df4
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011d8c:	4b96      	ldr	r3, [pc, #600]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011d8e:	7bdb      	ldrb	r3, [r3, #15]
 8011d90:	f043 0320 	orr.w	r3, r3, #32
 8011d94:	b2da      	uxtb	r2, r3
 8011d96:	4b94      	ldr	r3, [pc, #592]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011d98:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011d9a:	4b93      	ldr	r3, [pc, #588]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011d9c:	7bdb      	ldrb	r3, [r3, #15]
 8011d9e:	f043 0310 	orr.w	r3, r3, #16
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	4b90      	ldr	r3, [pc, #576]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011da6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011da8:	4b8f      	ldr	r3, [pc, #572]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011daa:	7bdb      	ldrb	r3, [r3, #15]
 8011dac:	f043 0304 	orr.w	r3, r3, #4
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	4b8d      	ldr	r3, [pc, #564]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011db4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011db6:	4b8c      	ldr	r3, [pc, #560]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	f043 0320 	orr.w	r3, r3, #32
 8011dbe:	b2da      	uxtb	r2, r3
 8011dc0:	4b89      	ldr	r3, [pc, #548]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dc2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011dc4:	4b88      	ldr	r3, [pc, #544]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dc6:	795b      	ldrb	r3, [r3, #5]
 8011dc8:	f043 0310 	orr.w	r3, r3, #16
 8011dcc:	b2da      	uxtb	r2, r3
 8011dce:	4b86      	ldr	r3, [pc, #536]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dd0:	715a      	strb	r2, [r3, #5]
        break;
 8011dd2:	e1ea      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011dd4:	4b84      	ldr	r3, [pc, #528]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dd6:	7bdb      	ldrb	r3, [r3, #15]
 8011dd8:	f043 0320 	orr.w	r3, r3, #32
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	4b82      	ldr	r3, [pc, #520]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011de0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011de2:	4b81      	ldr	r3, [pc, #516]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011de4:	7bdb      	ldrb	r3, [r3, #15]
 8011de6:	f043 0310 	orr.w	r3, r3, #16
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	4b7e      	ldr	r3, [pc, #504]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011df0:	4b7d      	ldr	r3, [pc, #500]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011df2:	7bdb      	ldrb	r3, [r3, #15]
 8011df4:	f043 0304 	orr.w	r3, r3, #4
 8011df8:	b2da      	uxtb	r2, r3
 8011dfa:	4b7b      	ldr	r3, [pc, #492]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011dfc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011dfe:	4b7a      	ldr	r3, [pc, #488]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	f043 0320 	orr.w	r3, r3, #32
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	4b77      	ldr	r3, [pc, #476]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e0a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011e0c:	4b76      	ldr	r3, [pc, #472]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e0e:	795b      	ldrb	r3, [r3, #5]
 8011e10:	f043 0310 	orr.w	r3, r3, #16
 8011e14:	b2da      	uxtb	r2, r3
 8011e16:	4b74      	ldr	r3, [pc, #464]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e18:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e1a:	4b73      	ldr	r3, [pc, #460]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e1c:	7cdb      	ldrb	r3, [r3, #19]
 8011e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	4b70      	ldr	r3, [pc, #448]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e26:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011e28:	4b6f      	ldr	r3, [pc, #444]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	f043 0301 	orr.w	r3, r3, #1
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	4b6d      	ldr	r3, [pc, #436]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e34:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011e36:	4b6c      	ldr	r3, [pc, #432]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	f043 0302 	orr.w	r3, r3, #2
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	4b69      	ldr	r3, [pc, #420]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e42:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011e44:	4b68      	ldr	r3, [pc, #416]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e46:	791b      	ldrb	r3, [r3, #4]
 8011e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e4c:	b2da      	uxtb	r2, r3
 8011e4e:	4b66      	ldr	r3, [pc, #408]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e50:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011e52:	4b65      	ldr	r3, [pc, #404]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e54:	795b      	ldrb	r3, [r3, #5]
 8011e56:	f043 0302 	orr.w	r3, r3, #2
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	4b62      	ldr	r3, [pc, #392]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e5e:	715a      	strb	r2, [r3, #5]
        break;
 8011e60:	e1a3      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011e62:	4b61      	ldr	r3, [pc, #388]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e64:	7b1b      	ldrb	r3, [r3, #12]
 8011e66:	f043 0301 	orr.w	r3, r3, #1
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	4b5e      	ldr	r3, [pc, #376]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e6e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011e70:	4b5d      	ldr	r3, [pc, #372]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e72:	7b1b      	ldrb	r3, [r3, #12]
 8011e74:	f043 0302 	orr.w	r3, r3, #2
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	4b5b      	ldr	r3, [pc, #364]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e7c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011e7e:	4b5a      	ldr	r3, [pc, #360]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e80:	7c5b      	ldrb	r3, [r3, #17]
 8011e82:	f043 0301 	orr.w	r3, r3, #1
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	4b57      	ldr	r3, [pc, #348]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e8a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011e8c:	4b56      	ldr	r3, [pc, #344]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e8e:	7c5b      	ldrb	r3, [r3, #17]
 8011e90:	f043 0302 	orr.w	r3, r3, #2
 8011e94:	b2da      	uxtb	r2, r3
 8011e96:	4b54      	ldr	r3, [pc, #336]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e98:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011e9a:	4b53      	ldr	r3, [pc, #332]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011e9c:	789b      	ldrb	r3, [r3, #2]
 8011e9e:	f043 0302 	orr.w	r3, r3, #2
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	4b50      	ldr	r3, [pc, #320]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ea6:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011ea8:	4b4f      	ldr	r3, [pc, #316]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011eaa:	789b      	ldrb	r3, [r3, #2]
 8011eac:	f043 0301 	orr.w	r3, r3, #1
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	4b4d      	ldr	r3, [pc, #308]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011eb4:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011eb6:	4b4c      	ldr	r3, [pc, #304]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011eb8:	79db      	ldrb	r3, [r3, #7]
 8011eba:	f043 0302 	orr.w	r3, r3, #2
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	4b49      	ldr	r3, [pc, #292]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ec2:	71da      	strb	r2, [r3, #7]
        break;
 8011ec4:	e171      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011ec6:	4b48      	ldr	r3, [pc, #288]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ec8:	7adb      	ldrb	r3, [r3, #11]
 8011eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	4b45      	ldr	r3, [pc, #276]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ed2:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011ed4:	4b44      	ldr	r3, [pc, #272]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ed6:	7adb      	ldrb	r3, [r3, #11]
 8011ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	4b42      	ldr	r3, [pc, #264]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ee0:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011ee2:	4b41      	ldr	r3, [pc, #260]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ee4:	7c1b      	ldrb	r3, [r3, #16]
 8011ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	4b3e      	ldr	r3, [pc, #248]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011eee:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011ef0:	4b3d      	ldr	r3, [pc, #244]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011ef2:	7c1b      	ldrb	r3, [r3, #16]
 8011ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	4b3b      	ldr	r3, [pc, #236]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011efc:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011efe:	4b3a      	ldr	r3, [pc, #232]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f00:	785b      	ldrb	r3, [r3, #1]
 8011f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	4b37      	ldr	r3, [pc, #220]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f0a:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011f0c:	4b36      	ldr	r3, [pc, #216]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f0e:	785b      	ldrb	r3, [r3, #1]
 8011f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	4b34      	ldr	r3, [pc, #208]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f18:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011f1a:	4b33      	ldr	r3, [pc, #204]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f1c:	799b      	ldrb	r3, [r3, #6]
 8011f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	4b30      	ldr	r3, [pc, #192]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f26:	719a      	strb	r2, [r3, #6]
        break;
 8011f28:	e13f      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011f2a:	4b2f      	ldr	r3, [pc, #188]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f2c:	7adb      	ldrb	r3, [r3, #11]
 8011f2e:	f043 0310 	orr.w	r3, r3, #16
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	4b2c      	ldr	r3, [pc, #176]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f36:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011f38:	4b2b      	ldr	r3, [pc, #172]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f3a:	7adb      	ldrb	r3, [r3, #11]
 8011f3c:	f043 0320 	orr.w	r3, r3, #32
 8011f40:	b2da      	uxtb	r2, r3
 8011f42:	4b29      	ldr	r3, [pc, #164]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f44:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011f46:	4b28      	ldr	r3, [pc, #160]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f48:	7c1b      	ldrb	r3, [r3, #16]
 8011f4a:	f043 0310 	orr.w	r3, r3, #16
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	4b25      	ldr	r3, [pc, #148]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f52:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011f54:	4b24      	ldr	r3, [pc, #144]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f56:	7c1b      	ldrb	r3, [r3, #16]
 8011f58:	f043 0320 	orr.w	r3, r3, #32
 8011f5c:	b2da      	uxtb	r2, r3
 8011f5e:	4b22      	ldr	r3, [pc, #136]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f60:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011f62:	4b21      	ldr	r3, [pc, #132]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f64:	785b      	ldrb	r3, [r3, #1]
 8011f66:	f043 0320 	orr.w	r3, r3, #32
 8011f6a:	b2da      	uxtb	r2, r3
 8011f6c:	4b1e      	ldr	r3, [pc, #120]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f6e:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011f70:	4b1d      	ldr	r3, [pc, #116]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f72:	785b      	ldrb	r3, [r3, #1]
 8011f74:	f043 0310 	orr.w	r3, r3, #16
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	4b1b      	ldr	r3, [pc, #108]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f7c:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011f7e:	4b1a      	ldr	r3, [pc, #104]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f80:	799b      	ldrb	r3, [r3, #6]
 8011f82:	f043 0320 	orr.w	r3, r3, #32
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	4b17      	ldr	r3, [pc, #92]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f8a:	719a      	strb	r2, [r3, #6]
        break;
 8011f8c:	e10d      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011f8e:	4b16      	ldr	r3, [pc, #88]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f90:	7b1b      	ldrb	r3, [r3, #12]
 8011f92:	f043 0304 	orr.w	r3, r3, #4
 8011f96:	b2da      	uxtb	r2, r3
 8011f98:	4b13      	ldr	r3, [pc, #76]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f9a:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011f9c:	4b12      	ldr	r3, [pc, #72]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011f9e:	7b1b      	ldrb	r3, [r3, #12]
 8011fa0:	f043 0308 	orr.w	r3, r3, #8
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	4b10      	ldr	r3, [pc, #64]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fa8:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011faa:	4b0f      	ldr	r3, [pc, #60]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fac:	7c5b      	ldrb	r3, [r3, #17]
 8011fae:	f043 0308 	orr.w	r3, r3, #8
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	4b0c      	ldr	r3, [pc, #48]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fb6:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_3);
 8011fb8:	4b0b      	ldr	r3, [pc, #44]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fba:	789b      	ldrb	r3, [r3, #2]
 8011fbc:	f043 0308 	orr.w	r3, r3, #8
 8011fc0:	b2da      	uxtb	r2, r3
 8011fc2:	4b09      	ldr	r3, [pc, #36]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fc4:	709a      	strb	r2, [r3, #2]
        break;
 8011fc6:	e0f0      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011fc8:	4b07      	ldr	r3, [pc, #28]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fca:	7c5b      	ldrb	r3, [r3, #17]
 8011fcc:	f043 0301 	orr.w	r3, r3, #1
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	4b05      	ldr	r3, [pc, #20]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fd4:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011fd6:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fd8:	789b      	ldrb	r3, [r3, #2]
 8011fda:	f043 0301 	orr.w	r3, r3, #1
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	4b01      	ldr	r3, [pc, #4]	; (8011fe8 <lcd_set_symbol+0x524>)
 8011fe2:	709a      	strb	r2, [r3, #2]
        break;
 8011fe4:	e0e1      	b.n	80121aa <lcd_set_symbol+0x6e6>
 8011fe6:	bf00      	nop
 8011fe8:	20001df4 	.word	0x20001df4
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011fec:	4b73      	ldr	r3, [pc, #460]	; (80121bc <lcd_set_symbol+0x6f8>)
 8011fee:	7b1b      	ldrb	r3, [r3, #12]
 8011ff0:	f043 0301 	orr.w	r3, r3, #1
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	4b71      	ldr	r3, [pc, #452]	; (80121bc <lcd_set_symbol+0x6f8>)
 8011ff8:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011ffa:	4b70      	ldr	r3, [pc, #448]	; (80121bc <lcd_set_symbol+0x6f8>)
 8011ffc:	7c5b      	ldrb	r3, [r3, #17]
 8011ffe:	f043 0301 	orr.w	r3, r3, #1
 8012002:	b2da      	uxtb	r2, r3
 8012004:	4b6d      	ldr	r3, [pc, #436]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012006:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8012008:	4b6c      	ldr	r3, [pc, #432]	; (80121bc <lcd_set_symbol+0x6f8>)
 801200a:	7c5b      	ldrb	r3, [r3, #17]
 801200c:	f043 0302 	orr.w	r3, r3, #2
 8012010:	b2da      	uxtb	r2, r3
 8012012:	4b6a      	ldr	r3, [pc, #424]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012014:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8012016:	4b69      	ldr	r3, [pc, #420]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012018:	789b      	ldrb	r3, [r3, #2]
 801201a:	f043 0302 	orr.w	r3, r3, #2
 801201e:	b2da      	uxtb	r2, r3
 8012020:	4b66      	ldr	r3, [pc, #408]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012022:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8012024:	4b65      	ldr	r3, [pc, #404]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012026:	79db      	ldrb	r3, [r3, #7]
 8012028:	f043 0302 	orr.w	r3, r3, #2
 801202c:	b2da      	uxtb	r2, r3
 801202e:	4b63      	ldr	r3, [pc, #396]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012030:	71da      	strb	r2, [r3, #7]
        break;
 8012032:	e0ba      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8012034:	4b61      	ldr	r3, [pc, #388]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012036:	7b1b      	ldrb	r3, [r3, #12]
 8012038:	f043 0301 	orr.w	r3, r3, #1
 801203c:	b2da      	uxtb	r2, r3
 801203e:	4b5f      	ldr	r3, [pc, #380]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012040:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8012042:	4b5e      	ldr	r3, [pc, #376]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012044:	7c5b      	ldrb	r3, [r3, #17]
 8012046:	f043 0301 	orr.w	r3, r3, #1
 801204a:	b2da      	uxtb	r2, r3
 801204c:	4b5b      	ldr	r3, [pc, #364]	; (80121bc <lcd_set_symbol+0x6f8>)
 801204e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8012050:	4b5a      	ldr	r3, [pc, #360]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012052:	7c5b      	ldrb	r3, [r3, #17]
 8012054:	f043 0302 	orr.w	r3, r3, #2
 8012058:	b2da      	uxtb	r2, r3
 801205a:	4b58      	ldr	r3, [pc, #352]	; (80121bc <lcd_set_symbol+0x6f8>)
 801205c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 801205e:	4b57      	ldr	r3, [pc, #348]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012060:	789b      	ldrb	r3, [r3, #2]
 8012062:	f043 0301 	orr.w	r3, r3, #1
 8012066:	b2da      	uxtb	r2, r3
 8012068:	4b54      	ldr	r3, [pc, #336]	; (80121bc <lcd_set_symbol+0x6f8>)
 801206a:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 801206c:	4b53      	ldr	r3, [pc, #332]	; (80121bc <lcd_set_symbol+0x6f8>)
 801206e:	79db      	ldrb	r3, [r3, #7]
 8012070:	f043 0302 	orr.w	r3, r3, #2
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b51      	ldr	r3, [pc, #324]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012078:	71da      	strb	r2, [r3, #7]
        break;
 801207a:	e096      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 801207c:	4b4f      	ldr	r3, [pc, #316]	; (80121bc <lcd_set_symbol+0x6f8>)
 801207e:	7b1b      	ldrb	r3, [r3, #12]
 8012080:	f043 0302 	orr.w	r3, r3, #2
 8012084:	b2da      	uxtb	r2, r3
 8012086:	4b4d      	ldr	r3, [pc, #308]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012088:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 801208a:	4b4c      	ldr	r3, [pc, #304]	; (80121bc <lcd_set_symbol+0x6f8>)
 801208c:	7c5b      	ldrb	r3, [r3, #17]
 801208e:	f043 0301 	orr.w	r3, r3, #1
 8012092:	b2da      	uxtb	r2, r3
 8012094:	4b49      	ldr	r3, [pc, #292]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012096:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8012098:	4b48      	ldr	r3, [pc, #288]	; (80121bc <lcd_set_symbol+0x6f8>)
 801209a:	7c5b      	ldrb	r3, [r3, #17]
 801209c:	f043 0302 	orr.w	r3, r3, #2
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	4b46      	ldr	r3, [pc, #280]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120a4:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 80120a6:	4b45      	ldr	r3, [pc, #276]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120a8:	789b      	ldrb	r3, [r3, #2]
 80120aa:	f043 0301 	orr.w	r3, r3, #1
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	4b42      	ldr	r3, [pc, #264]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120b2:	709a      	strb	r2, [r3, #2]
        break;
 80120b4:	e079      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 80120b6:	4b41      	ldr	r3, [pc, #260]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120b8:	7b1b      	ldrb	r3, [r3, #12]
 80120ba:	f043 0301 	orr.w	r3, r3, #1
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	4b3e      	ldr	r3, [pc, #248]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120c2:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 80120c4:	4b3d      	ldr	r3, [pc, #244]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120c6:	7b1b      	ldrb	r3, [r3, #12]
 80120c8:	f043 0302 	orr.w	r3, r3, #2
 80120cc:	b2da      	uxtb	r2, r3
 80120ce:	4b3b      	ldr	r3, [pc, #236]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120d0:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 80120d2:	4b3a      	ldr	r3, [pc, #232]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120d4:	7c5b      	ldrb	r3, [r3, #17]
 80120d6:	f043 0302 	orr.w	r3, r3, #2
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	4b37      	ldr	r3, [pc, #220]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120de:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 80120e0:	4b36      	ldr	r3, [pc, #216]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120e2:	789b      	ldrb	r3, [r3, #2]
 80120e4:	f043 0301 	orr.w	r3, r3, #1
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	4b34      	ldr	r3, [pc, #208]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120ec:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 80120ee:	4b33      	ldr	r3, [pc, #204]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120f0:	79db      	ldrb	r3, [r3, #7]
 80120f2:	f043 0302 	orr.w	r3, r3, #2
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	4b30      	ldr	r3, [pc, #192]	; (80121bc <lcd_set_symbol+0x6f8>)
 80120fa:	71da      	strb	r2, [r3, #7]
        break;
 80120fc:	e055      	b.n	80121aa <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80120fe:	4b2f      	ldr	r3, [pc, #188]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012100:	7bdb      	ldrb	r3, [r3, #15]
 8012102:	f043 0320 	orr.w	r3, r3, #32
 8012106:	b2da      	uxtb	r2, r3
 8012108:	4b2c      	ldr	r3, [pc, #176]	; (80121bc <lcd_set_symbol+0x6f8>)
 801210a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801210c:	4b2b      	ldr	r3, [pc, #172]	; (80121bc <lcd_set_symbol+0x6f8>)
 801210e:	7bdb      	ldrb	r3, [r3, #15]
 8012110:	f043 0308 	orr.w	r3, r3, #8
 8012114:	b2da      	uxtb	r2, r3
 8012116:	4b29      	ldr	r3, [pc, #164]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012118:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801211a:	4b28      	ldr	r3, [pc, #160]	; (80121bc <lcd_set_symbol+0x6f8>)
 801211c:	7bdb      	ldrb	r3, [r3, #15]
 801211e:	f043 0304 	orr.w	r3, r3, #4
 8012122:	b2da      	uxtb	r2, r3
 8012124:	4b25      	ldr	r3, [pc, #148]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012126:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012128:	4b24      	ldr	r3, [pc, #144]	; (80121bc <lcd_set_symbol+0x6f8>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f043 0310 	orr.w	r3, r3, #16
 8012130:	b2da      	uxtb	r2, r3
 8012132:	4b22      	ldr	r3, [pc, #136]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012134:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012136:	4b21      	ldr	r3, [pc, #132]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	f043 0320 	orr.w	r3, r3, #32
 801213e:	b2da      	uxtb	r2, r3
 8012140:	4b1e      	ldr	r3, [pc, #120]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012142:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012144:	4b1d      	ldr	r3, [pc, #116]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	f043 0308 	orr.w	r3, r3, #8
 801214c:	b2da      	uxtb	r2, r3
 801214e:	4b1b      	ldr	r3, [pc, #108]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012150:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012152:	4b1a      	ldr	r3, [pc, #104]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012154:	7b9b      	ldrb	r3, [r3, #14]
 8012156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801215a:	b2da      	uxtb	r2, r3
 801215c:	4b17      	ldr	r3, [pc, #92]	; (80121bc <lcd_set_symbol+0x6f8>)
 801215e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8012160:	4b16      	ldr	r3, [pc, #88]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012162:	7bdb      	ldrb	r3, [r3, #15]
 8012164:	f043 0301 	orr.w	r3, r3, #1
 8012168:	b2da      	uxtb	r2, r3
 801216a:	4b14      	ldr	r3, [pc, #80]	; (80121bc <lcd_set_symbol+0x6f8>)
 801216c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801216e:	4b13      	ldr	r3, [pc, #76]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012170:	7cdb      	ldrb	r3, [r3, #19]
 8012172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012176:	b2da      	uxtb	r2, r3
 8012178:	4b10      	ldr	r3, [pc, #64]	; (80121bc <lcd_set_symbol+0x6f8>)
 801217a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801217c:	4b0f      	ldr	r3, [pc, #60]	; (80121bc <lcd_set_symbol+0x6f8>)
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f043 0301 	orr.w	r3, r3, #1
 8012184:	b2da      	uxtb	r2, r3
 8012186:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012188:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_6);
 801218a:	4b0c      	ldr	r3, [pc, #48]	; (80121bc <lcd_set_symbol+0x6f8>)
 801218c:	791b      	ldrb	r3, [r3, #4]
 801218e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012192:	b2da      	uxtb	r2, r3
 8012194:	4b09      	ldr	r3, [pc, #36]	; (80121bc <lcd_set_symbol+0x6f8>)
 8012196:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012198:	4b08      	ldr	r3, [pc, #32]	; (80121bc <lcd_set_symbol+0x6f8>)
 801219a:	795b      	ldrb	r3, [r3, #5]
 801219c:	f043 0302 	orr.w	r3, r3, #2
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	4b06      	ldr	r3, [pc, #24]	; (80121bc <lcd_set_symbol+0x6f8>)
 80121a4:	715a      	strb	r2, [r3, #5]
        break;
 80121a6:	e000      	b.n	80121aa <lcd_set_symbol+0x6e6>
        default:
        break;
 80121a8:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 80121aa:	79bb      	ldrb	r3, [r7, #6]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f000 fb87 	bl	80128c0 <pcf8553_blink>
}
 80121b2:	bf00      	nop
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	20001df4 	.word	0x20001df4

080121c0 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	4603      	mov	r3, r0
 80121c8:	460a      	mov	r2, r1
 80121ca:	71fb      	strb	r3, [r7, #7]
 80121cc:	4613      	mov	r3, r2
 80121ce:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d82a      	bhi.n	801222c <lcd_set_time_unit+0x6c>
 80121d6:	a201      	add	r2, pc, #4	; (adr r2, 80121dc <lcd_set_time_unit+0x1c>)
 80121d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121dc:	080121ed 	.word	0x080121ed
 80121e0:	080121fd 	.word	0x080121fd
 80121e4:	0801220d 	.word	0x0801220d
 80121e8:	0801221d 	.word	0x0801221d
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 80121ec:	4b14      	ldr	r3, [pc, #80]	; (8012240 <lcd_set_time_unit+0x80>)
 80121ee:	795b      	ldrb	r3, [r3, #5]
 80121f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f4:	b2da      	uxtb	r2, r3
 80121f6:	4b12      	ldr	r3, [pc, #72]	; (8012240 <lcd_set_time_unit+0x80>)
 80121f8:	715a      	strb	r2, [r3, #5]
        break;
 80121fa:	e018      	b.n	801222e <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 80121fc:	4b10      	ldr	r3, [pc, #64]	; (8012240 <lcd_set_time_unit+0x80>)
 80121fe:	7a5b      	ldrb	r3, [r3, #9]
 8012200:	f043 0320 	orr.w	r3, r3, #32
 8012204:	b2da      	uxtb	r2, r3
 8012206:	4b0e      	ldr	r3, [pc, #56]	; (8012240 <lcd_set_time_unit+0x80>)
 8012208:	725a      	strb	r2, [r3, #9]
        break;
 801220a:	e010      	b.n	801222e <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 801220c:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <lcd_set_time_unit+0x80>)
 801220e:	7a9b      	ldrb	r3, [r3, #10]
 8012210:	f043 0320 	orr.w	r3, r3, #32
 8012214:	b2da      	uxtb	r2, r3
 8012216:	4b0a      	ldr	r3, [pc, #40]	; (8012240 <lcd_set_time_unit+0x80>)
 8012218:	729a      	strb	r2, [r3, #10]
        break;
 801221a:	e008      	b.n	801222e <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 801221c:	4b08      	ldr	r3, [pc, #32]	; (8012240 <lcd_set_time_unit+0x80>)
 801221e:	7a5b      	ldrb	r3, [r3, #9]
 8012220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012224:	b2da      	uxtb	r2, r3
 8012226:	4b06      	ldr	r3, [pc, #24]	; (8012240 <lcd_set_time_unit+0x80>)
 8012228:	725a      	strb	r2, [r3, #9]
        break;
 801222a:	e000      	b.n	801222e <lcd_set_time_unit+0x6e>
        default:
        break;
 801222c:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 801222e:	79bb      	ldrb	r3, [r7, #6]
 8012230:	4618      	mov	r0, r3
 8012232:	f000 fb45 	bl	80128c0 <pcf8553_blink>
}
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	20001df4 	.word	0x20001df4

08012244 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	4603      	mov	r3, r0
 801224c:	460a      	mov	r2, r1
 801224e:	71fb      	strb	r3, [r7, #7]
 8012250:	4613      	mov	r3, r2
 8012252:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8012254:	79fb      	ldrb	r3, [r7, #7]
 8012256:	2b07      	cmp	r3, #7
 8012258:	f200 822c 	bhi.w	80126b4 <lcd_set_vol_unit+0x470>
 801225c:	a201      	add	r2, pc, #4	; (adr r2, 8012264 <lcd_set_vol_unit+0x20>)
 801225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012262:	bf00      	nop
 8012264:	08012285 	.word	0x08012285
 8012268:	08012377 	.word	0x08012377
 801226c:	08012421 	.word	0x08012421
 8012270:	080122db 	.word	0x080122db
 8012274:	0801257b 	.word	0x0801257b
 8012278:	080124b5 	.word	0x080124b5
 801227c:	080125fb 	.word	0x080125fb
 8012280:	0801267b 	.word	0x0801267b
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012284:	4b8a      	ldr	r3, [pc, #552]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012286:	7bdb      	ldrb	r3, [r3, #15]
 8012288:	f043 0320 	orr.w	r3, r3, #32
 801228c:	b2da      	uxtb	r2, r3
 801228e:	4b88      	ldr	r3, [pc, #544]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012290:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012292:	4b87      	ldr	r3, [pc, #540]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	f043 0320 	orr.w	r3, r3, #32
 801229a:	b2da      	uxtb	r2, r3
 801229c:	4b84      	ldr	r3, [pc, #528]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801229e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80122a0:	4b83      	ldr	r3, [pc, #524]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122a2:	795b      	ldrb	r3, [r3, #5]
 80122a4:	f043 0320 	orr.w	r3, r3, #32
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	4b81      	ldr	r3, [pc, #516]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122ac:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80122ae:	4b80      	ldr	r3, [pc, #512]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122b0:	7b9b      	ldrb	r3, [r3, #14]
 80122b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	4b7d      	ldr	r3, [pc, #500]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122ba:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 80122bc:	4b7c      	ldr	r3, [pc, #496]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122be:	7a9b      	ldrb	r3, [r3, #10]
 80122c0:	f043 0301 	orr.w	r3, r3, #1
 80122c4:	b2da      	uxtb	r2, r3
 80122c6:	4b7a      	ldr	r3, [pc, #488]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122c8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 80122ca:	4b79      	ldr	r3, [pc, #484]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122cc:	7a5b      	ldrb	r3, [r3, #9]
 80122ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122d2:	b2da      	uxtb	r2, r3
 80122d4:	4b76      	ldr	r3, [pc, #472]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122d6:	725a      	strb	r2, [r3, #9]
        break;
 80122d8:	e1ed      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80122da:	4b75      	ldr	r3, [pc, #468]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122dc:	7bdb      	ldrb	r3, [r3, #15]
 80122de:	f043 0320 	orr.w	r3, r3, #32
 80122e2:	b2da      	uxtb	r2, r3
 80122e4:	4b72      	ldr	r3, [pc, #456]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122e6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80122e8:	4b71      	ldr	r3, [pc, #452]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122ea:	7bdb      	ldrb	r3, [r3, #15]
 80122ec:	f043 0310 	orr.w	r3, r3, #16
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	4b6f      	ldr	r3, [pc, #444]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122f4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80122f6:	4b6e      	ldr	r3, [pc, #440]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80122f8:	7bdb      	ldrb	r3, [r3, #15]
 80122fa:	f043 0304 	orr.w	r3, r3, #4
 80122fe:	b2da      	uxtb	r2, r3
 8012300:	4b6b      	ldr	r3, [pc, #428]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012302:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012304:	4b6a      	ldr	r3, [pc, #424]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	f043 0320 	orr.w	r3, r3, #32
 801230c:	b2da      	uxtb	r2, r3
 801230e:	4b68      	ldr	r3, [pc, #416]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012310:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8012312:	4b67      	ldr	r3, [pc, #412]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012314:	795b      	ldrb	r3, [r3, #5]
 8012316:	f043 0310 	orr.w	r3, r3, #16
 801231a:	b2da      	uxtb	r2, r3
 801231c:	4b64      	ldr	r3, [pc, #400]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801231e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012320:	4b63      	ldr	r3, [pc, #396]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012322:	7b9b      	ldrb	r3, [r3, #14]
 8012324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012328:	b2da      	uxtb	r2, r3
 801232a:	4b61      	ldr	r3, [pc, #388]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801232c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801232e:	4b60      	ldr	r3, [pc, #384]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012330:	7bdb      	ldrb	r3, [r3, #15]
 8012332:	f043 0302 	orr.w	r3, r3, #2
 8012336:	b2da      	uxtb	r2, r3
 8012338:	4b5d      	ldr	r3, [pc, #372]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801233a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801233c:	4b5c      	ldr	r3, [pc, #368]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	f043 0301 	orr.w	r3, r3, #1
 8012344:	b2da      	uxtb	r2, r3
 8012346:	4b5a      	ldr	r3, [pc, #360]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012348:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801234a:	4b59      	ldr	r3, [pc, #356]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	f043 0302 	orr.w	r3, r3, #2
 8012352:	b2da      	uxtb	r2, r3
 8012354:	4b56      	ldr	r3, [pc, #344]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012356:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8012358:	4b55      	ldr	r3, [pc, #340]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801235a:	791b      	ldrb	r3, [r3, #4]
 801235c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012360:	b2da      	uxtb	r2, r3
 8012362:	4b53      	ldr	r3, [pc, #332]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012364:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012366:	4b52      	ldr	r3, [pc, #328]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012368:	795b      	ldrb	r3, [r3, #5]
 801236a:	f043 0302 	orr.w	r3, r3, #2
 801236e:	b2da      	uxtb	r2, r3
 8012370:	4b4f      	ldr	r3, [pc, #316]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012372:	715a      	strb	r2, [r3, #5]
        break;
 8012374:	e19f      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012376:	4b4e      	ldr	r3, [pc, #312]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012378:	7bdb      	ldrb	r3, [r3, #15]
 801237a:	f043 0320 	orr.w	r3, r3, #32
 801237e:	b2da      	uxtb	r2, r3
 8012380:	4b4b      	ldr	r3, [pc, #300]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012382:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012384:	4b4a      	ldr	r3, [pc, #296]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012386:	7a9b      	ldrb	r3, [r3, #10]
 8012388:	f043 0304 	orr.w	r3, r3, #4
 801238c:	b2da      	uxtb	r2, r3
 801238e:	4b48      	ldr	r3, [pc, #288]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012390:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012392:	4b47      	ldr	r3, [pc, #284]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012394:	7bdb      	ldrb	r3, [r3, #15]
 8012396:	f043 0310 	orr.w	r3, r3, #16
 801239a:	b2da      	uxtb	r2, r3
 801239c:	4b44      	ldr	r3, [pc, #272]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801239e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80123a0:	4b43      	ldr	r3, [pc, #268]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123a2:	7bdb      	ldrb	r3, [r3, #15]
 80123a4:	f043 0308 	orr.w	r3, r3, #8
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	4b41      	ldr	r3, [pc, #260]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123ac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80123ae:	4b40      	ldr	r3, [pc, #256]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	f043 0320 	orr.w	r3, r3, #32
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	4b3d      	ldr	r3, [pc, #244]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123ba:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80123bc:	4b3c      	ldr	r3, [pc, #240]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	f043 0308 	orr.w	r3, r3, #8
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	4b3a      	ldr	r3, [pc, #232]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123c8:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80123ca:	4b39      	ldr	r3, [pc, #228]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123cc:	7b9b      	ldrb	r3, [r3, #14]
 80123ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	4b36      	ldr	r3, [pc, #216]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123d6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80123d8:	4b35      	ldr	r3, [pc, #212]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123da:	7cdb      	ldrb	r3, [r3, #19]
 80123dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123e0:	b2da      	uxtb	r2, r3
 80123e2:	4b33      	ldr	r3, [pc, #204]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123e4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80123e6:	4b32      	ldr	r3, [pc, #200]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123e8:	7cdb      	ldrb	r3, [r3, #19]
 80123ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ee:	b2da      	uxtb	r2, r3
 80123f0:	4b2f      	ldr	r3, [pc, #188]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123f2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80123f4:	4b2e      	ldr	r3, [pc, #184]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	f043 0301 	orr.w	r3, r3, #1
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	4b2c      	ldr	r3, [pc, #176]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012400:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8012402:	4b2b      	ldr	r3, [pc, #172]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012404:	791b      	ldrb	r3, [r3, #4]
 8012406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801240a:	b2da      	uxtb	r2, r3
 801240c:	4b28      	ldr	r3, [pc, #160]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801240e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012410:	4b27      	ldr	r3, [pc, #156]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012412:	795b      	ldrb	r3, [r3, #5]
 8012414:	f043 0302 	orr.w	r3, r3, #2
 8012418:	b2da      	uxtb	r2, r3
 801241a:	4b25      	ldr	r3, [pc, #148]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801241c:	715a      	strb	r2, [r3, #5]
        break;
 801241e:	e14a      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012420:	4b23      	ldr	r3, [pc, #140]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012422:	7bdb      	ldrb	r3, [r3, #15]
 8012424:	f043 0320 	orr.w	r3, r3, #32
 8012428:	b2da      	uxtb	r2, r3
 801242a:	4b21      	ldr	r3, [pc, #132]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801242c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 801242e:	4b20      	ldr	r3, [pc, #128]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012430:	7a9b      	ldrb	r3, [r3, #10]
 8012432:	f043 0304 	orr.w	r3, r3, #4
 8012436:	b2da      	uxtb	r2, r3
 8012438:	4b1d      	ldr	r3, [pc, #116]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801243a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801243c:	4b1c      	ldr	r3, [pc, #112]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801243e:	7bdb      	ldrb	r3, [r3, #15]
 8012440:	f043 0310 	orr.w	r3, r3, #16
 8012444:	b2da      	uxtb	r2, r3
 8012446:	4b1a      	ldr	r3, [pc, #104]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012448:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801244a:	4b19      	ldr	r3, [pc, #100]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801244c:	7bdb      	ldrb	r3, [r3, #15]
 801244e:	f043 0308 	orr.w	r3, r3, #8
 8012452:	b2da      	uxtb	r2, r3
 8012454:	4b16      	ldr	r3, [pc, #88]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012456:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012458:	4b15      	ldr	r3, [pc, #84]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	f043 0320 	orr.w	r3, r3, #32
 8012460:	b2da      	uxtb	r2, r3
 8012462:	4b13      	ldr	r3, [pc, #76]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012464:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012466:	4b12      	ldr	r3, [pc, #72]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	f043 0308 	orr.w	r3, r3, #8
 801246e:	b2da      	uxtb	r2, r3
 8012470:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012472:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012474:	4b0e      	ldr	r3, [pc, #56]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012476:	7b9b      	ldrb	r3, [r3, #14]
 8012478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801247c:	b2da      	uxtb	r2, r3
 801247e:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012480:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012482:	4b0b      	ldr	r3, [pc, #44]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012484:	7bdb      	ldrb	r3, [r3, #15]
 8012486:	f043 0302 	orr.w	r3, r3, #2
 801248a:	b2da      	uxtb	r2, r3
 801248c:	4b08      	ldr	r3, [pc, #32]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801248e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012490:	4b07      	ldr	r3, [pc, #28]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	f043 0302 	orr.w	r3, r3, #2
 8012498:	b2da      	uxtb	r2, r3
 801249a:	4b05      	ldr	r3, [pc, #20]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 801249c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801249e:	4b04      	ldr	r3, [pc, #16]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80124a0:	795b      	ldrb	r3, [r3, #5]
 80124a2:	f043 0302 	orr.w	r3, r3, #2
 80124a6:	b2da      	uxtb	r2, r3
 80124a8:	4b01      	ldr	r3, [pc, #4]	; (80124b0 <lcd_set_vol_unit+0x26c>)
 80124aa:	715a      	strb	r2, [r3, #5]
        break;
 80124ac:	e103      	b.n	80126b6 <lcd_set_vol_unit+0x472>
 80124ae:	bf00      	nop
 80124b0:	20001df4 	.word	0x20001df4
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80124b4:	4b84      	ldr	r3, [pc, #528]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124b6:	7a9b      	ldrb	r3, [r3, #10]
 80124b8:	f043 0308 	orr.w	r3, r3, #8
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	4b82      	ldr	r3, [pc, #520]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124c0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 80124c2:	4b81      	ldr	r3, [pc, #516]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124c4:	7a9b      	ldrb	r3, [r3, #10]
 80124c6:	f043 0310 	orr.w	r3, r3, #16
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	4b7e      	ldr	r3, [pc, #504]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124ce:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80124d0:	4b7d      	ldr	r3, [pc, #500]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124d2:	7bdb      	ldrb	r3, [r3, #15]
 80124d4:	f043 0308 	orr.w	r3, r3, #8
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	4b7b      	ldr	r3, [pc, #492]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124dc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80124de:	4b7a      	ldr	r3, [pc, #488]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	f043 0310 	orr.w	r3, r3, #16
 80124e6:	b2da      	uxtb	r2, r3
 80124e8:	4b77      	ldr	r3, [pc, #476]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124ea:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 80124ec:	4b76      	ldr	r3, [pc, #472]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124ee:	795b      	ldrb	r3, [r3, #5]
 80124f0:	f043 0304 	orr.w	r3, r3, #4
 80124f4:	b2da      	uxtb	r2, r3
 80124f6:	4b74      	ldr	r3, [pc, #464]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124f8:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80124fa:	4b73      	ldr	r3, [pc, #460]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f043 0308 	orr.w	r3, r3, #8
 8012502:	b2da      	uxtb	r2, r3
 8012504:	4b70      	ldr	r3, [pc, #448]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012506:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012508:	4b6f      	ldr	r3, [pc, #444]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801250a:	795b      	ldrb	r3, [r3, #5]
 801250c:	f043 0320 	orr.w	r3, r3, #32
 8012510:	b2da      	uxtb	r2, r3
 8012512:	4b6d      	ldr	r3, [pc, #436]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012514:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012516:	4b6c      	ldr	r3, [pc, #432]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012518:	7b9b      	ldrb	r3, [r3, #14]
 801251a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801251e:	b2da      	uxtb	r2, r3
 8012520:	4b69      	ldr	r3, [pc, #420]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012522:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012524:	4b68      	ldr	r3, [pc, #416]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012526:	7bdb      	ldrb	r3, [r3, #15]
 8012528:	f043 0302 	orr.w	r3, r3, #2
 801252c:	b2da      	uxtb	r2, r3
 801252e:	4b66      	ldr	r3, [pc, #408]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012530:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8012532:	4b65      	ldr	r3, [pc, #404]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012534:	7cdb      	ldrb	r3, [r3, #19]
 8012536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801253a:	b2da      	uxtb	r2, r3
 801253c:	4b62      	ldr	r3, [pc, #392]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801253e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8012540:	4b61      	ldr	r3, [pc, #388]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012542:	7cdb      	ldrb	r3, [r3, #19]
 8012544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012548:	b2da      	uxtb	r2, r3
 801254a:	4b5f      	ldr	r3, [pc, #380]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801254c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801254e:	4b5e      	ldr	r3, [pc, #376]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	f043 0301 	orr.w	r3, r3, #1
 8012556:	b2da      	uxtb	r2, r3
 8012558:	4b5b      	ldr	r3, [pc, #364]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801255a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801255c:	4b5a      	ldr	r3, [pc, #360]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	f043 0302 	orr.w	r3, r3, #2
 8012564:	b2da      	uxtb	r2, r3
 8012566:	4b58      	ldr	r3, [pc, #352]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012568:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 801256a:	4b57      	ldr	r3, [pc, #348]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801256c:	795b      	ldrb	r3, [r3, #5]
 801256e:	f043 0301 	orr.w	r3, r3, #1
 8012572:	b2da      	uxtb	r2, r3
 8012574:	4b54      	ldr	r3, [pc, #336]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012576:	715a      	strb	r2, [r3, #5]
        break;
 8012578:	e09d      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801257a:	4b53      	ldr	r3, [pc, #332]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801257c:	7a9b      	ldrb	r3, [r3, #10]
 801257e:	f043 0308 	orr.w	r3, r3, #8
 8012582:	b2da      	uxtb	r2, r3
 8012584:	4b50      	ldr	r3, [pc, #320]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012586:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012588:	4b4f      	ldr	r3, [pc, #316]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801258a:	7bdb      	ldrb	r3, [r3, #15]
 801258c:	f043 0320 	orr.w	r3, r3, #32
 8012590:	b2da      	uxtb	r2, r3
 8012592:	4b4d      	ldr	r3, [pc, #308]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012594:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012596:	4b4c      	ldr	r3, [pc, #304]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	f043 0310 	orr.w	r3, r3, #16
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	4b49      	ldr	r3, [pc, #292]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125a2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80125a4:	4b48      	ldr	r3, [pc, #288]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f043 0320 	orr.w	r3, r3, #32
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	4b46      	ldr	r3, [pc, #280]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125b0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80125b2:	4b45      	ldr	r3, [pc, #276]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	f043 0308 	orr.w	r3, r3, #8
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	4b42      	ldr	r3, [pc, #264]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125be:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80125c0:	4b41      	ldr	r3, [pc, #260]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125c2:	795b      	ldrb	r3, [r3, #5]
 80125c4:	f043 0320 	orr.w	r3, r3, #32
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	4b3f      	ldr	r3, [pc, #252]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125cc:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 80125ce:	4b3e      	ldr	r3, [pc, #248]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125d0:	7bdb      	ldrb	r3, [r3, #15]
 80125d2:	f043 0302 	orr.w	r3, r3, #2
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	4b3b      	ldr	r3, [pc, #236]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125da:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80125dc:	4b3a      	ldr	r3, [pc, #232]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	f043 0302 	orr.w	r3, r3, #2
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	4b38      	ldr	r3, [pc, #224]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125e8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80125ea:	4b37      	ldr	r3, [pc, #220]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125ec:	795b      	ldrb	r3, [r3, #5]
 80125ee:	f043 0302 	orr.w	r3, r3, #2
 80125f2:	b2da      	uxtb	r2, r3
 80125f4:	4b34      	ldr	r3, [pc, #208]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125f6:	715a      	strb	r2, [r3, #5]
        break;
 80125f8:	e05d      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80125fa:	4b33      	ldr	r3, [pc, #204]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80125fc:	7a9b      	ldrb	r3, [r3, #10]
 80125fe:	f043 0308 	orr.w	r3, r3, #8
 8012602:	b2da      	uxtb	r2, r3
 8012604:	4b30      	ldr	r3, [pc, #192]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012606:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012608:	4b2f      	ldr	r3, [pc, #188]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801260a:	7bdb      	ldrb	r3, [r3, #15]
 801260c:	f043 0320 	orr.w	r3, r3, #32
 8012610:	b2da      	uxtb	r2, r3
 8012612:	4b2d      	ldr	r3, [pc, #180]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012614:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012616:	4b2c      	ldr	r3, [pc, #176]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012618:	7bdb      	ldrb	r3, [r3, #15]
 801261a:	f043 0308 	orr.w	r3, r3, #8
 801261e:	b2da      	uxtb	r2, r3
 8012620:	4b29      	ldr	r3, [pc, #164]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012622:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8012624:	4b28      	ldr	r3, [pc, #160]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012626:	7bdb      	ldrb	r3, [r3, #15]
 8012628:	f043 0304 	orr.w	r3, r3, #4
 801262c:	b2da      	uxtb	r2, r3
 801262e:	4b26      	ldr	r3, [pc, #152]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012630:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012632:	4b25      	ldr	r3, [pc, #148]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	f043 0310 	orr.w	r3, r3, #16
 801263a:	b2da      	uxtb	r2, r3
 801263c:	4b22      	ldr	r3, [pc, #136]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801263e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012640:	4b21      	ldr	r3, [pc, #132]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012642:	7b9b      	ldrb	r3, [r3, #14]
 8012644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012648:	b2da      	uxtb	r2, r3
 801264a:	4b1f      	ldr	r3, [pc, #124]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801264c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801264e:	4b1e      	ldr	r3, [pc, #120]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012650:	7bdb      	ldrb	r3, [r3, #15]
 8012652:	f043 0302 	orr.w	r3, r3, #2
 8012656:	b2da      	uxtb	r2, r3
 8012658:	4b1b      	ldr	r3, [pc, #108]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801265a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801265c:	4b1a      	ldr	r3, [pc, #104]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	f043 0302 	orr.w	r3, r3, #2
 8012664:	b2da      	uxtb	r2, r3
 8012666:	4b18      	ldr	r3, [pc, #96]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012668:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801266a:	4b17      	ldr	r3, [pc, #92]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801266c:	795b      	ldrb	r3, [r3, #5]
 801266e:	f043 0302 	orr.w	r3, r3, #2
 8012672:	b2da      	uxtb	r2, r3
 8012674:	4b14      	ldr	r3, [pc, #80]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012676:	715a      	strb	r2, [r3, #5]
        break;
 8012678:	e01d      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801267a:	4b13      	ldr	r3, [pc, #76]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801267c:	7bdb      	ldrb	r3, [r3, #15]
 801267e:	f043 0304 	orr.w	r3, r3, #4
 8012682:	b2da      	uxtb	r2, r3
 8012684:	4b10      	ldr	r3, [pc, #64]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012686:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012688:	4b0f      	ldr	r3, [pc, #60]	; (80126c8 <lcd_set_vol_unit+0x484>)
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	f043 0310 	orr.w	r3, r3, #16
 8012690:	b2da      	uxtb	r2, r3
 8012692:	4b0d      	ldr	r3, [pc, #52]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012694:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8012696:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <lcd_set_vol_unit+0x484>)
 8012698:	7cdb      	ldrb	r3, [r3, #19]
 801269a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801269e:	b2da      	uxtb	r2, r3
 80126a0:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80126a2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80126a4:	4b08      	ldr	r3, [pc, #32]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	f043 0301 	orr.w	r3, r3, #1
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	4b06      	ldr	r3, [pc, #24]	; (80126c8 <lcd_set_vol_unit+0x484>)
 80126b0:	701a      	strb	r2, [r3, #0]
        break;
 80126b2:	e000      	b.n	80126b6 <lcd_set_vol_unit+0x472>
        default:
        break;
 80126b4:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80126b6:	79bb      	ldrb	r3, [r7, #6]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 f901 	bl	80128c0 <pcf8553_blink>
}
 80126be:	bf00      	nop
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	20001df4 	.word	0x20001df4

080126cc <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 80126cc:	b480      	push	{r7}
 80126ce:	b085      	sub	sp, #20
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	4603      	mov	r3, r0
 80126d4:	460a      	mov	r2, r1
 80126d6:	71fb      	strb	r3, [r7, #7]
 80126d8:	4613      	mov	r3, r2
 80126da:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 80126dc:	2300      	movs	r3, #0
 80126de:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 80126e4:	4b33      	ldr	r3, [pc, #204]	; (80127b4 <lcd_write_line+0xe8>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d002      	beq.n	80126f2 <lcd_write_line+0x26>
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d01b      	beq.n	8012728 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 80126f0:	e035      	b.n	801275e <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	4a30      	ldr	r2, [pc, #192]	; (80127b8 <lcd_write_line+0xec>)
 80126f6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80126fa:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80126fc:	4b2f      	ldr	r3, [pc, #188]	; (80127bc <lcd_write_line+0xf0>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	005b      	lsls	r3, r3, #1
 8012702:	b2da      	uxtb	r2, r3
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	4413      	add	r3, r2
 8012708:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 801270a:	7bbb      	ldrb	r3, [r7, #14]
 801270c:	08db      	lsrs	r3, r3, #3
 801270e:	b2da      	uxtb	r2, r3
 8012710:	79fb      	ldrb	r3, [r7, #7]
 8012712:	4929      	ldr	r1, [pc, #164]	; (80127b8 <lcd_write_line+0xec>)
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	440b      	add	r3, r1
 8012718:	785b      	ldrb	r3, [r3, #1]
 801271a:	4413      	add	r3, r2
 801271c:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 801271e:	7bbb      	ldrb	r3, [r7, #14]
 8012720:	f003 0307 	and.w	r3, r3, #7
 8012724:	73bb      	strb	r3, [r7, #14]
        break;
 8012726:	e01a      	b.n	801275e <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 8012728:	79fb      	ldrb	r3, [r7, #7]
 801272a:	4a25      	ldr	r2, [pc, #148]	; (80127c0 <lcd_write_line+0xf4>)
 801272c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012730:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012732:	4b22      	ldr	r3, [pc, #136]	; (80127bc <lcd_write_line+0xf0>)
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	005b      	lsls	r3, r3, #1
 8012738:	b2da      	uxtb	r2, r3
 801273a:	7bbb      	ldrb	r3, [r7, #14]
 801273c:	4413      	add	r3, r2
 801273e:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 8012740:	7bbb      	ldrb	r3, [r7, #14]
 8012742:	08db      	lsrs	r3, r3, #3
 8012744:	b2da      	uxtb	r2, r3
 8012746:	79fb      	ldrb	r3, [r7, #7]
 8012748:	491d      	ldr	r1, [pc, #116]	; (80127c0 <lcd_write_line+0xf4>)
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	440b      	add	r3, r1
 801274e:	785b      	ldrb	r3, [r3, #1]
 8012750:	4413      	add	r3, r2
 8012752:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012754:	7bbb      	ldrb	r3, [r7, #14]
 8012756:	f003 0307 	and.w	r3, r3, #7
 801275a:	73bb      	strb	r3, [r7, #14]
        break;
 801275c:	bf00      	nop
    }

    if (data)
 801275e:	79bb      	ldrb	r3, [r7, #6]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d00f      	beq.n	8012784 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012764:	7bfb      	ldrb	r3, [r7, #15]
 8012766:	4a17      	ldr	r2, [pc, #92]	; (80127c4 <lcd_write_line+0xf8>)
 8012768:	5cd3      	ldrb	r3, [r2, r3]
 801276a:	b25a      	sxtb	r2, r3
 801276c:	7bbb      	ldrb	r3, [r7, #14]
 801276e:	2101      	movs	r1, #1
 8012770:	fa01 f303 	lsl.w	r3, r1, r3
 8012774:	b25b      	sxtb	r3, r3
 8012776:	4313      	orrs	r3, r2
 8012778:	b25a      	sxtb	r2, r3
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	b2d1      	uxtb	r1, r2
 801277e:	4a11      	ldr	r2, [pc, #68]	; (80127c4 <lcd_write_line+0xf8>)
 8012780:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 8012782:	e010      	b.n	80127a6 <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012784:	7bfb      	ldrb	r3, [r7, #15]
 8012786:	4a0f      	ldr	r2, [pc, #60]	; (80127c4 <lcd_write_line+0xf8>)
 8012788:	5cd3      	ldrb	r3, [r2, r3]
 801278a:	b25a      	sxtb	r2, r3
 801278c:	7bbb      	ldrb	r3, [r7, #14]
 801278e:	2101      	movs	r1, #1
 8012790:	fa01 f303 	lsl.w	r3, r1, r3
 8012794:	b25b      	sxtb	r3, r3
 8012796:	43db      	mvns	r3, r3
 8012798:	b25b      	sxtb	r3, r3
 801279a:	4013      	ands	r3, r2
 801279c:	b25a      	sxtb	r2, r3
 801279e:	7bfb      	ldrb	r3, [r7, #15]
 80127a0:	b2d1      	uxtb	r1, r2
 80127a2:	4a08      	ldr	r2, [pc, #32]	; (80127c4 <lcd_write_line+0xf8>)
 80127a4:	54d1      	strb	r1, [r2, r3]
}
 80127a6:	bf00      	nop
 80127a8:	3714      	adds	r7, #20
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	20001d61 	.word	0x20001d61
 80127b8:	20000120 	.word	0x20000120
 80127bc:	20001d60 	.word	0x20001d60
 80127c0:	20000130 	.word	0x20000130
 80127c4:	20001df4 	.word	0x20001df4

080127c8 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	4603      	mov	r3, r0
 80127d0:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 80127d2:	79fb      	ldrb	r3, [r7, #7]
 80127d4:	f003 031f 	and.w	r3, r3, #31
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	7b3b      	ldrb	r3, [r7, #12]
 80127dc:	f362 0304 	bfi	r3, r2, #0, #5
 80127e0:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80127e2:	7b3b      	ldrb	r3, [r7, #12]
 80127e4:	f36f 1346 	bfc	r3, #5, #2
 80127e8:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80127ea:	7b3b      	ldrb	r3, [r7, #12]
 80127ec:	f36f 13c7 	bfc	r3, #7, #1
 80127f0:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80127f2:	2314      	movs	r3, #20
 80127f4:	f107 010c 	add.w	r1, r7, #12
 80127f8:	2201      	movs	r2, #1
 80127fa:	4803      	ldr	r0, [pc, #12]	; (8012808 <prepare_to_send+0x40>)
 80127fc:	f7f7 fa4e 	bl	8009c9c <HAL_SPI_Transmit>
}
 8012800:	bf00      	nop
 8012802:	3710      	adds	r7, #16
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	20001d64 	.word	0x20001d64

0801280c <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 8012810:	4b29      	ldr	r3, [pc, #164]	; (80128b8 <spi1_init+0xac>)
 8012812:	4a2a      	ldr	r2, [pc, #168]	; (80128bc <spi1_init+0xb0>)
 8012814:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 8012816:	4b28      	ldr	r3, [pc, #160]	; (80128b8 <spi1_init+0xac>)
 8012818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801281c:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 801281e:	4b26      	ldr	r3, [pc, #152]	; (80128b8 <spi1_init+0xac>)
 8012820:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012824:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012826:	4b24      	ldr	r3, [pc, #144]	; (80128b8 <spi1_init+0xac>)
 8012828:	2207      	movs	r2, #7
 801282a:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801282c:	4b22      	ldr	r3, [pc, #136]	; (80128b8 <spi1_init+0xac>)
 801282e:	2200      	movs	r2, #0
 8012830:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012832:	4b21      	ldr	r3, [pc, #132]	; (80128b8 <spi1_init+0xac>)
 8012834:	2200      	movs	r2, #0
 8012836:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 8012838:	4b1f      	ldr	r3, [pc, #124]	; (80128b8 <spi1_init+0xac>)
 801283a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801283e:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012840:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <spi1_init+0xac>)
 8012842:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8012846:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012848:	4b1b      	ldr	r3, [pc, #108]	; (80128b8 <spi1_init+0xac>)
 801284a:	2200      	movs	r2, #0
 801284c:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801284e:	4b1a      	ldr	r3, [pc, #104]	; (80128b8 <spi1_init+0xac>)
 8012850:	2200      	movs	r2, #0
 8012852:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012854:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <spi1_init+0xac>)
 8012856:	2200      	movs	r2, #0
 8012858:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 801285a:	4b17      	ldr	r3, [pc, #92]	; (80128b8 <spi1_init+0xac>)
 801285c:	2207      	movs	r2, #7
 801285e:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012860:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <spi1_init+0xac>)
 8012862:	2200      	movs	r2, #0
 8012864:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8012866:	4b14      	ldr	r3, [pc, #80]	; (80128b8 <spi1_init+0xac>)
 8012868:	2200      	movs	r2, #0
 801286a:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 801286c:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <spi1_init+0xac>)
 801286e:	2200      	movs	r2, #0
 8012870:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8012872:	4b11      	ldr	r3, [pc, #68]	; (80128b8 <spi1_init+0xac>)
 8012874:	2200      	movs	r2, #0
 8012876:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8012878:	4b0f      	ldr	r3, [pc, #60]	; (80128b8 <spi1_init+0xac>)
 801287a:	2200      	movs	r2, #0
 801287c:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801287e:	4b0e      	ldr	r3, [pc, #56]	; (80128b8 <spi1_init+0xac>)
 8012880:	2200      	movs	r2, #0
 8012882:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012884:	4b0c      	ldr	r3, [pc, #48]	; (80128b8 <spi1_init+0xac>)
 8012886:	2200      	movs	r2, #0
 8012888:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801288a:	4b0b      	ldr	r3, [pc, #44]	; (80128b8 <spi1_init+0xac>)
 801288c:	2200      	movs	r2, #0
 801288e:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8012890:	4b09      	ldr	r3, [pc, #36]	; (80128b8 <spi1_init+0xac>)
 8012892:	2200      	movs	r2, #0
 8012894:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8012896:	4b08      	ldr	r3, [pc, #32]	; (80128b8 <spi1_init+0xac>)
 8012898:	2200      	movs	r2, #0
 801289a:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 801289c:	4b06      	ldr	r3, [pc, #24]	; (80128b8 <spi1_init+0xac>)
 801289e:	2200      	movs	r2, #0
 80128a0:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 80128a2:	4805      	ldr	r0, [pc, #20]	; (80128b8 <spi1_init+0xac>)
 80128a4:	f7f7 f8e4 	bl	8009a70 <HAL_SPI_Init>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d001      	beq.n	80128b2 <spi1_init+0xa6>
    {
        Error_Handler();
 80128ae:	f7ee fdfd 	bl	80014ac <Error_Handler>
    }
}
 80128b2:	bf00      	nop
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20001d64 	.word	0x20001d64
 80128bc:	40013000 	.word	0x40013000

080128c0 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	4603      	mov	r3, r0
 80128c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80128ca:	2200      	movs	r2, #0
 80128cc:	2110      	movs	r1, #16
 80128ce:	480f      	ldr	r0, [pc, #60]	; (801290c <pcf8553_blink+0x4c>)
 80128d0:	f7f1 fe86 	bl	80045e0 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80128d4:	79fb      	ldrb	r3, [r7, #7]
 80128d6:	f003 0303 	and.w	r3, r3, #3
 80128da:	b2d9      	uxtb	r1, r3
 80128dc:	4a0c      	ldr	r2, [pc, #48]	; (8012910 <pcf8553_blink+0x50>)
 80128de:	7813      	ldrb	r3, [r2, #0]
 80128e0:	f361 0342 	bfi	r3, r1, #1, #2
 80128e4:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80128e6:	2003      	movs	r0, #3
 80128e8:	f7ff ff6e 	bl	80127c8 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80128ec:	2314      	movs	r3, #20
 80128ee:	2201      	movs	r2, #1
 80128f0:	4907      	ldr	r1, [pc, #28]	; (8012910 <pcf8553_blink+0x50>)
 80128f2:	4808      	ldr	r0, [pc, #32]	; (8012914 <pcf8553_blink+0x54>)
 80128f4:	f7f7 f9d2 	bl	8009c9c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80128f8:	2201      	movs	r2, #1
 80128fa:	2110      	movs	r1, #16
 80128fc:	4803      	ldr	r0, [pc, #12]	; (801290c <pcf8553_blink+0x4c>)
 80128fe:	f7f1 fe6f 	bl	80045e0 <HAL_GPIO_WritePin>
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	42020000 	.word	0x42020000
 8012910:	20001e0c 	.word	0x20001e0c
 8012914:	20001d64 	.word	0x20001d64

08012918 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 801291e:	2300      	movs	r3, #0
 8012920:	607b      	str	r3, [r7, #4]
 8012922:	e007      	b.n	8012934 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 8012924:	4a08      	ldr	r2, [pc, #32]	; (8012948 <pcf8553_clear_buff+0x30>)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4413      	add	r3, r2
 801292a:	2200      	movs	r2, #0
 801292c:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3301      	adds	r3, #1
 8012932:	607b      	str	r3, [r7, #4]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b13      	cmp	r3, #19
 8012938:	ddf4      	ble.n	8012924 <pcf8553_clear_buff+0xc>
    }
}
 801293a:	bf00      	nop
 801293c:	bf00      	nop
 801293e:	370c      	adds	r7, #12
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr
 8012948:	20001df4 	.word	0x20001df4

0801294c <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012952:	2200      	movs	r2, #0
 8012954:	2110      	movs	r1, #16
 8012956:	4810      	ldr	r0, [pc, #64]	; (8012998 <pcf8553_dump+0x4c>)
 8012958:	f7f1 fe42 	bl	80045e0 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 801295c:	2004      	movs	r0, #4
 801295e:	f7ff ff33 	bl	80127c8 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012962:	2300      	movs	r3, #0
 8012964:	607b      	str	r3, [r7, #4]
 8012966:	e00a      	b.n	801297e <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	4a0c      	ldr	r2, [pc, #48]	; (801299c <pcf8553_dump+0x50>)
 801296c:	1899      	adds	r1, r3, r2
 801296e:	2314      	movs	r3, #20
 8012970:	2201      	movs	r2, #1
 8012972:	480b      	ldr	r0, [pc, #44]	; (80129a0 <pcf8553_dump+0x54>)
 8012974:	f7f7 f992 	bl	8009c9c <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3301      	adds	r3, #1
 801297c:	607b      	str	r3, [r7, #4]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2b13      	cmp	r3, #19
 8012982:	ddf1      	ble.n	8012968 <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012984:	2201      	movs	r2, #1
 8012986:	2110      	movs	r1, #16
 8012988:	4803      	ldr	r0, [pc, #12]	; (8012998 <pcf8553_dump+0x4c>)
 801298a:	f7f1 fe29 	bl	80045e0 <HAL_GPIO_WritePin>
}
 801298e:	bf00      	nop
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	42020000 	.word	0x42020000
 801299c:	20001df4 	.word	0x20001df4
 80129a0:	20001d64 	.word	0x20001d64

080129a4 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	af00      	add	r7, sp, #0
    spi1_init();
 80129a8:	f7ff ff30 	bl	801280c <spi1_init>
    pcf8553_reset();
 80129ac:	f000 f830 	bl	8012a10 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 80129b0:	2314      	movs	r3, #20
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7ef f93c 	bl	8001c30 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80129b8:	2200      	movs	r2, #0
 80129ba:	2110      	movs	r1, #16
 80129bc:	480f      	ldr	r0, [pc, #60]	; (80129fc <pcf8553_init+0x58>)
 80129be:	f7f1 fe0f 	bl	80045e0 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 80129c2:	2001      	movs	r0, #1
 80129c4:	f7ff ff00 	bl	80127c8 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 80129c8:	2314      	movs	r3, #20
 80129ca:	2201      	movs	r2, #1
 80129cc:	490c      	ldr	r1, [pc, #48]	; (8012a00 <pcf8553_init+0x5c>)
 80129ce:	480d      	ldr	r0, [pc, #52]	; (8012a04 <pcf8553_init+0x60>)
 80129d0:	f7f7 f964 	bl	8009c9c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80129d4:	2314      	movs	r3, #20
 80129d6:	2201      	movs	r2, #1
 80129d8:	490b      	ldr	r1, [pc, #44]	; (8012a08 <pcf8553_init+0x64>)
 80129da:	480a      	ldr	r0, [pc, #40]	; (8012a04 <pcf8553_init+0x60>)
 80129dc:	f7f7 f95e 	bl	8009c9c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80129e0:	2314      	movs	r3, #20
 80129e2:	2201      	movs	r2, #1
 80129e4:	4909      	ldr	r1, [pc, #36]	; (8012a0c <pcf8553_init+0x68>)
 80129e6:	4807      	ldr	r0, [pc, #28]	; (8012a04 <pcf8553_init+0x60>)
 80129e8:	f7f7 f958 	bl	8009c9c <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80129ec:	2201      	movs	r2, #1
 80129ee:	2110      	movs	r1, #16
 80129f0:	4802      	ldr	r0, [pc, #8]	; (80129fc <pcf8553_init+0x58>)
 80129f2:	f7f1 fdf5 	bl	80045e0 <HAL_GPIO_WritePin>
}
 80129f6:	bf00      	nop
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	42020000 	.word	0x42020000
 8012a00:	20001e08 	.word	0x20001e08
 8012a04:	20001d64 	.word	0x20001d64
 8012a08:	20000140 	.word	0x20000140
 8012a0c:	20001e0c 	.word	0x20001e0c

08012a10 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 8012a14:	2200      	movs	r2, #0
 8012a16:	2140      	movs	r1, #64	; 0x40
 8012a18:	4806      	ldr	r0, [pc, #24]	; (8012a34 <pcf8553_reset+0x24>)
 8012a1a:	f7f1 fde1 	bl	80045e0 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 8012a1e:	2314      	movs	r3, #20
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7ef f905 	bl	8001c30 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 8012a26:	2201      	movs	r2, #1
 8012a28:	2140      	movs	r1, #64	; 0x40
 8012a2a:	4802      	ldr	r0, [pc, #8]	; (8012a34 <pcf8553_reset+0x24>)
 8012a2c:	f7f1 fdd8 	bl	80045e0 <HAL_GPIO_WritePin>
}
 8012a30:	bf00      	nop
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	42020000 	.word	0x42020000

08012a38 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012a42:	2300      	movs	r3, #0
 8012a44:	60fb      	str	r3, [r7, #12]
 8012a46:	e007      	b.n	8012a58 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 8012a48:	4a08      	ldr	r2, [pc, #32]	; (8012a6c <pcf8553_write_all+0x34>)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	79fa      	ldrb	r2, [r7, #7]
 8012a50:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	3301      	adds	r3, #1
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b13      	cmp	r3, #19
 8012a5c:	ddf4      	ble.n	8012a48 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012a5e:	f7ff ff75 	bl	801294c <pcf8553_dump>
}
 8012a62:	bf00      	nop
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	20001df4 	.word	0x20001df4

08012a70 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b0ae      	sub	sp, #184	; 0xb8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	4603      	mov	r3, r0
 8012a78:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8012a7a:	4b9d      	ldr	r3, [pc, #628]	; (8012cf0 <fm_menu_config_date_hour+0x280>)
 8012a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    fm_event_t event_now;

    if (new_entry == 1)
 8012a80:	4b9c      	ldr	r3, [pc, #624]	; (8012cf4 <fm_menu_config_date_hour+0x284>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d107      	bne.n	8012a98 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 8012a88:	4b9b      	ldr	r3, [pc, #620]	; (8012cf8 <fm_menu_config_date_hour+0x288>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012a8e:	f7fd f968 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8012a92:	4b98      	ldr	r3, [pc, #608]	; (8012cf4 <fm_menu_config_date_hour+0x284>)
 8012a94:	2200      	movs	r2, #0
 8012a96:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 8012a98:	4b97      	ldr	r3, [pc, #604]	; (8012cf8 <fm_menu_config_date_hour+0x288>)
 8012a9a:	781a      	ldrb	r2, [r3, #0]
 8012a9c:	79fb      	ldrb	r3, [r7, #7]
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	2001      	movs	r0, #1
 8012aa2:	f7fd f965 	bl	800fd70 <fm_lcd_date_hour>
    fm_lcd_refresh();
 8012aa6:	f7fd fce8 	bl	801047a <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 8012aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fc fabc 	bl	800f02c <fm_factory_get_date_time>
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab6:	b2da      	uxtb	r2, r3
 8012ab8:	4b90      	ldr	r3, [pc, #576]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012aba:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 8012abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fc fab3 	bl	800f02c <fm_factory_get_date_time>
 8012ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac8:	b2da      	uxtb	r2, r3
 8012aca:	4b8d      	ldr	r3, [pc, #564]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012acc:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 8012ace:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fc faaa 	bl	800f02c <fm_factory_get_date_time>
 8012ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	4b89      	ldr	r3, [pc, #548]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012ade:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 8012ae0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fc faa1 	bl	800f02c <fm_factory_get_date_time>
 8012aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aec:	b2da      	uxtb	r2, r3
 8012aee:	4b86      	ldr	r3, [pc, #536]	; (8012d08 <fm_menu_config_date_hour+0x298>)
 8012af0:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 8012af2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fc fa98 	bl	800f02c <fm_factory_get_date_time>
 8012afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b00:	b2da      	uxtb	r2, r3
 8012b02:	4b82      	ldr	r3, [pc, #520]	; (8012d0c <fm_menu_config_date_hour+0x29c>)
 8012b04:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 8012b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7fc fa8e 	bl	800f02c <fm_factory_get_date_time>
 8012b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	4b7e      	ldr	r3, [pc, #504]	; (8012d10 <fm_menu_config_date_hour+0x2a0>)
 8012b18:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	2b04      	cmp	r3, #4
 8012b20:	f200 83bd 	bhi.w	801329e <fm_menu_config_date_hour+0x82e>
 8012b24:	a201      	add	r2, pc, #4	; (adr r2, 8012b2c <fm_menu_config_date_hour+0xbc>)
 8012b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b2a:	bf00      	nop
 8012b2c:	0801329f 	.word	0x0801329f
 8012b30:	08012b41 	.word	0x08012b41
 8012b34:	08012e93 	.word	0x08012e93
 8012b38:	08013205 	.word	0x08013205
 8012b3c:	0801327f 	.word	0x0801327f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012b40:	4b74      	ldr	r3, [pc, #464]	; (8012d14 <fm_menu_config_date_hour+0x2a4>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	f000 83ac 	beq.w	80132a2 <fm_menu_config_date_hour+0x832>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012b4a:	4b6b      	ldr	r3, [pc, #428]	; (8012cf8 <fm_menu_config_date_hour+0x288>)
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f040 809b 	bne.w	8012c8a <fm_menu_config_date_hour+0x21a>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012b54:	4b6a      	ldr	r3, [pc, #424]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	d017      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
 8012b5c:	4b68      	ldr	r3, [pc, #416]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	2b03      	cmp	r3, #3
 8012b62:	d013      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
                    || month_enum == MAY || month_enum == JULY
 8012b64:	4b66      	ldr	r3, [pc, #408]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	2b05      	cmp	r3, #5
 8012b6a:	d00f      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
 8012b6c:	4b64      	ldr	r3, [pc, #400]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	2b07      	cmp	r3, #7
 8012b72:	d00b      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012b74:	4b62      	ldr	r3, [pc, #392]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b08      	cmp	r3, #8
 8012b7a:	d007      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
 8012b7c:	4b60      	ldr	r3, [pc, #384]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b0a      	cmp	r3, #10
 8012b82:	d003      	beq.n	8012b8c <fm_menu_config_date_hour+0x11c>
                    || month_enum == DECEMBER)
 8012b84:	4b5e      	ldr	r3, [pc, #376]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	2b0c      	cmp	r3, #12
 8012b8a:	d119      	bne.n	8012bc0 <fm_menu_config_date_hour+0x150>
                    {
                        if (day_enum < DAY_31)
 8012b8c:	4b5b      	ldr	r3, [pc, #364]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b1e      	cmp	r3, #30
 8012b92:	d80b      	bhi.n	8012bac <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012b94:	4b59      	ldr	r3, [pc, #356]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	4a59      	ldr	r2, [pc, #356]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012b9c:	7812      	ldrb	r2, [r2, #0]
 8012b9e:	4611      	mov	r1, r2
 8012ba0:	4a58      	ldr	r2, [pc, #352]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012ba2:	7812      	ldrb	r2, [r2, #0]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fc fbad 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012baa:	e168      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012bac:	4b54      	ldr	r3, [pc, #336]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	4b54      	ldr	r3, [pc, #336]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f7fc fba3 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012bbe:	e15e      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012bc0:	4b4f      	ldr	r3, [pc, #316]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b04      	cmp	r3, #4
 8012bc6:	d00b      	beq.n	8012be0 <fm_menu_config_date_hour+0x170>
 8012bc8:	4b4d      	ldr	r3, [pc, #308]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	2b06      	cmp	r3, #6
 8012bce:	d007      	beq.n	8012be0 <fm_menu_config_date_hour+0x170>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012bd0:	4b4b      	ldr	r3, [pc, #300]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b09      	cmp	r3, #9
 8012bd6:	d003      	beq.n	8012be0 <fm_menu_config_date_hour+0x170>
 8012bd8:	4b49      	ldr	r3, [pc, #292]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2b0b      	cmp	r3, #11
 8012bde:	d119      	bne.n	8012c14 <fm_menu_config_date_hour+0x1a4>
                    {
                        if (day_enum < DAY_30)
 8012be0:	4b46      	ldr	r3, [pc, #280]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b1d      	cmp	r3, #29
 8012be6:	d80b      	bhi.n	8012c00 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012be8:	4b44      	ldr	r3, [pc, #272]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	3301      	adds	r3, #1
 8012bee:	4a44      	ldr	r2, [pc, #272]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012bf0:	7812      	ldrb	r2, [r2, #0]
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	4a43      	ldr	r2, [pc, #268]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012bf6:	7812      	ldrb	r2, [r2, #0]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fc fb83 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012bfe:	e13e      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012c00:	4b3f      	ldr	r3, [pc, #252]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	4619      	mov	r1, r3
 8012c06:	4b3f      	ldr	r3, [pc, #252]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	2001      	movs	r0, #1
 8012c0e:	f7fc fb79 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012c12:	e134      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012c14:	4b3b      	ldr	r3, [pc, #236]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 0303 	and.w	r3, r3, #3
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d119      	bne.n	8012c56 <fm_menu_config_date_hour+0x1e6>
                        {
                            if (day_enum < DAY_29)
 8012c22:	4b36      	ldr	r3, [pc, #216]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	2b1c      	cmp	r3, #28
 8012c28:	d80b      	bhi.n	8012c42 <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012c2a:	4b34      	ldr	r3, [pc, #208]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	4a33      	ldr	r2, [pc, #204]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c32:	7812      	ldrb	r2, [r2, #0]
 8012c34:	4611      	mov	r1, r2
 8012c36:	4a33      	ldr	r2, [pc, #204]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c38:	7812      	ldrb	r2, [r2, #0]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fc fb62 	bl	800f304 <fm_factory_modify_date>
 8012c40:	e11d      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012c42:	4b2f      	ldr	r3, [pc, #188]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	4619      	mov	r1, r3
 8012c48:	4b2e      	ldr	r3, [pc, #184]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	2001      	movs	r0, #1
 8012c50:	f7fc fb58 	bl	800f304 <fm_factory_modify_date>
 8012c54:	e113      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum < DAY_28)
 8012c56:	4b29      	ldr	r3, [pc, #164]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b1b      	cmp	r3, #27
 8012c5c:	d80b      	bhi.n	8012c76 <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012c5e:	4b27      	ldr	r3, [pc, #156]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	4a26      	ldr	r2, [pc, #152]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c66:	7812      	ldrb	r2, [r2, #0]
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4a26      	ldr	r2, [pc, #152]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c6c:	7812      	ldrb	r2, [r2, #0]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fc fb48 	bl	800f304 <fm_factory_modify_date>
 8012c74:	e103      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012c76:	4b22      	ldr	r3, [pc, #136]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4b21      	ldr	r3, [pc, #132]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	461a      	mov	r2, r3
 8012c82:	2001      	movs	r0, #1
 8012c84:	f7fc fb3e 	bl	800f304 <fm_factory_modify_date>
 8012c88:	e0f9      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012c8a:	4b1b      	ldr	r3, [pc, #108]	; (8012cf8 <fm_menu_config_date_hour+0x288>)
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d16a      	bne.n	8012d68 <fm_menu_config_date_hour+0x2f8>
                {
                    if (month_enum < DECEMBER)
 8012c92:	4b1b      	ldr	r3, [pc, #108]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b0b      	cmp	r3, #11
 8012c98:	d85c      	bhi.n	8012d54 <fm_menu_config_date_hour+0x2e4>
                    {
                        if ((month_enum + 1 == APRIL || month_enum + 1 == JUNE
 8012c9a:	4b19      	ldr	r3, [pc, #100]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	2b03      	cmp	r3, #3
 8012ca0:	d00b      	beq.n	8012cba <fm_menu_config_date_hour+0x24a>
 8012ca2:	4b17      	ldr	r3, [pc, #92]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	2b05      	cmp	r3, #5
 8012ca8:	d007      	beq.n	8012cba <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == SEPTEMBER
 8012caa:	4b15      	ldr	r3, [pc, #84]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	2b08      	cmp	r3, #8
 8012cb0:	d003      	beq.n	8012cba <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == NOVEMBER) && (day_enum > DAY_30))
 8012cb2:	4b13      	ldr	r3, [pc, #76]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	2b0a      	cmp	r3, #10
 8012cb8:	d107      	bne.n	8012cca <fm_menu_config_date_hour+0x25a>
 8012cba:	4b10      	ldr	r3, [pc, #64]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b1e      	cmp	r3, #30
 8012cc0:	d903      	bls.n	8012cca <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 8012cc2:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012cc4:	221e      	movs	r2, #30
 8012cc6:	701a      	strb	r2, [r3, #0]
 8012cc8:	e038      	b.n	8012d3c <fm_menu_config_date_hour+0x2cc>
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012cca:	4b0d      	ldr	r3, [pc, #52]	; (8012d00 <fm_menu_config_date_hour+0x290>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d122      	bne.n	8012d18 <fm_menu_config_date_hour+0x2a8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012cd2:	4b0c      	ldr	r3, [pc, #48]	; (8012d04 <fm_menu_config_date_hour+0x294>)
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	f003 0303 	and.w	r3, r3, #3
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d11b      	bne.n	8012d18 <fm_menu_config_date_hour+0x2a8>
 8012ce0:	4b06      	ldr	r3, [pc, #24]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b1d      	cmp	r3, #29
 8012ce6:	d917      	bls.n	8012d18 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 8012ce8:	4b04      	ldr	r3, [pc, #16]	; (8012cfc <fm_menu_config_date_hour+0x28c>)
 8012cea:	221d      	movs	r2, #29
 8012cec:	701a      	strb	r2, [r3, #0]
 8012cee:	e025      	b.n	8012d3c <fm_menu_config_date_hour+0x2cc>
 8012cf0:	08012a71 	.word	0x08012a71
 8012cf4:	20000141 	.word	0x20000141
 8012cf8:	20001e11 	.word	0x20001e11
 8012cfc:	20001e12 	.word	0x20001e12
 8012d00:	20001e13 	.word	0x20001e13
 8012d04:	20001e14 	.word	0x20001e14
 8012d08:	20001e15 	.word	0x20001e15
 8012d0c:	20001e16 	.word	0x20001e16
 8012d10:	20001e17 	.word	0x20001e17
 8012d14:	20001e0e 	.word	0x20001e0e
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012d18:	4b93      	ldr	r3, [pc, #588]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d10d      	bne.n	8012d3c <fm_menu_config_date_hour+0x2cc>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012d20:	4b92      	ldr	r3, [pc, #584]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	f003 0303 	and.w	r3, r3, #3
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d006      	beq.n	8012d3c <fm_menu_config_date_hour+0x2cc>
 8012d2e:	4b90      	ldr	r3, [pc, #576]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b1c      	cmp	r3, #28
 8012d34:	d902      	bls.n	8012d3c <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012d36:	4b8e      	ldr	r3, [pc, #568]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d38:	221c      	movs	r2, #28
 8012d3a:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012d3c:	4b8c      	ldr	r3, [pc, #560]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	4618      	mov	r0, r3
 8012d42:	4b89      	ldr	r3, [pc, #548]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	3301      	adds	r3, #1
 8012d48:	4a88      	ldr	r2, [pc, #544]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012d4a:	7812      	ldrb	r2, [r2, #0]
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	f7fc fad9 	bl	800f304 <fm_factory_modify_date>
 8012d52:	e094      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012d54:	4b86      	ldr	r3, [pc, #536]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	4b84      	ldr	r3, [pc, #528]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	461a      	mov	r2, r3
 8012d60:	2101      	movs	r1, #1
 8012d62:	f7fc facf 	bl	800f304 <fm_factory_modify_date>
 8012d66:	e08a      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == YEAR)
 8012d68:	4b82      	ldr	r3, [pc, #520]	; (8012f74 <fm_menu_config_date_hour+0x504>)
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	2b02      	cmp	r3, #2
 8012d6e:	d12c      	bne.n	8012dca <fm_menu_config_date_hour+0x35a>
                {
                    if (year_enum < YEAR_99)
 8012d70:	4b7e      	ldr	r3, [pc, #504]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	2b62      	cmp	r3, #98	; 0x62
 8012d76:	d81e      	bhi.n	8012db6 <fm_menu_config_date_hour+0x346>
                    {
                        if (((year_enum + 1) % YEAR_4 != YEAR_0)
 8012d78:	4b7c      	ldr	r3, [pc, #496]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	f003 0303 	and.w	r3, r3, #3
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00a      	beq.n	8012d9c <fm_menu_config_date_hour+0x32c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012d86:	4b78      	ldr	r3, [pc, #480]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d106      	bne.n	8012d9c <fm_menu_config_date_hour+0x32c>
 8012d8e:	4b78      	ldr	r3, [pc, #480]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	2b1c      	cmp	r3, #28
 8012d94:	d902      	bls.n	8012d9c <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012d96:	4b76      	ldr	r3, [pc, #472]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d98:	221c      	movs	r2, #28
 8012d9a:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012d9c:	4b74      	ldr	r3, [pc, #464]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	4618      	mov	r0, r3
 8012da2:	4b71      	ldr	r3, [pc, #452]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	4619      	mov	r1, r3
 8012da8:	4b70      	ldr	r3, [pc, #448]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	3301      	adds	r3, #1
 8012dae:	461a      	mov	r2, r3
 8012db0:	f7fc faa8 	bl	800f304 <fm_factory_modify_date>
 8012db4:	e063      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        year_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012db6:	4b6e      	ldr	r3, [pc, #440]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	4b6a      	ldr	r3, [pc, #424]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	f7fc fa9e 	bl	800f304 <fm_factory_modify_date>
 8012dc8:	e059      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == HOUR)
 8012dca:	4b6a      	ldr	r3, [pc, #424]	; (8012f74 <fm_menu_config_date_hour+0x504>)
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	2b03      	cmp	r3, #3
 8012dd0:	d119      	bne.n	8012e06 <fm_menu_config_date_hour+0x396>
                {
                    if (hour_enum < HOUR_23)
 8012dd2:	4b69      	ldr	r3, [pc, #420]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b16      	cmp	r3, #22
 8012dd8:	d80b      	bhi.n	8012df2 <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1, minute_enum,
 8012dda:	4b67      	ldr	r3, [pc, #412]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	3301      	adds	r3, #1
 8012de0:	4a66      	ldr	r2, [pc, #408]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012de2:	7812      	ldrb	r2, [r2, #0]
 8012de4:	4611      	mov	r1, r2
 8012de6:	4a66      	ldr	r2, [pc, #408]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012de8:	7812      	ldrb	r2, [r2, #0]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fc fd96 	bl	800f91c <fm_factory_modify_time>
 8012df0:	e045      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012df2:	4b62      	ldr	r3, [pc, #392]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	4619      	mov	r1, r3
 8012df8:	4b61      	ldr	r3, [pc, #388]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	2000      	movs	r0, #0
 8012e00:	f7fc fd8c 	bl	800f91c <fm_factory_modify_time>
 8012e04:	e03b      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012e06:	4b5b      	ldr	r3, [pc, #364]	; (8012f74 <fm_menu_config_date_hour+0x504>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	2b04      	cmp	r3, #4
 8012e0c:	d119      	bne.n	8012e42 <fm_menu_config_date_hour+0x3d2>
                {
                    if (minute_enum < MINU_59)
 8012e0e:	4b5b      	ldr	r3, [pc, #364]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	2b3a      	cmp	r3, #58	; 0x3a
 8012e14:	d80b      	bhi.n	8012e2e <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum + 1,
 8012e16:	4b58      	ldr	r3, [pc, #352]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	4b57      	ldr	r3, [pc, #348]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	3301      	adds	r3, #1
 8012e22:	4a57      	ldr	r2, [pc, #348]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012e24:	7812      	ldrb	r2, [r2, #0]
 8012e26:	4619      	mov	r1, r3
 8012e28:	f7fc fd78 	bl	800f91c <fm_factory_modify_time>
 8012e2c:	e027      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_0, second_enum);
 8012e2e:	4b52      	ldr	r3, [pc, #328]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	4618      	mov	r0, r3
 8012e34:	4b52      	ldr	r3, [pc, #328]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	461a      	mov	r2, r3
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	f7fc fd6e 	bl	800f91c <fm_factory_modify_time>
 8012e40:	e01d      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == SECOND)
 8012e42:	4b4c      	ldr	r3, [pc, #304]	; (8012f74 <fm_menu_config_date_hour+0x504>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	2b05      	cmp	r3, #5
 8012e48:	d119      	bne.n	8012e7e <fm_menu_config_date_hour+0x40e>
                {
                    if (second_enum < SEC_59)
 8012e4a:	4b4d      	ldr	r3, [pc, #308]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	2b3a      	cmp	r3, #58	; 0x3a
 8012e50:	d80c      	bhi.n	8012e6c <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012e52:	4b49      	ldr	r3, [pc, #292]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	4618      	mov	r0, r3
 8012e58:	4b48      	ldr	r3, [pc, #288]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	4b48      	ldr	r3, [pc, #288]	; (8012f80 <fm_menu_config_date_hour+0x510>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	3301      	adds	r3, #1
 8012e64:	461a      	mov	r2, r3
 8012e66:	f7fc fd59 	bl	800f91c <fm_factory_modify_time>
 8012e6a:	e008      	b.n	8012e7e <fm_menu_config_date_hour+0x40e>
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_0);
 8012e6c:	4b42      	ldr	r3, [pc, #264]	; (8012f78 <fm_menu_config_date_hour+0x508>)
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	4618      	mov	r0, r3
 8012e72:	4b42      	ldr	r3, [pc, #264]	; (8012f7c <fm_menu_config_date_hour+0x50c>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	2200      	movs	r2, #0
 8012e78:	4619      	mov	r1, r3
 8012e7a:	f7fc fd4f 	bl	800f91c <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012e82:	f107 030b 	add.w	r3, r7, #11
 8012e86:	2200      	movs	r2, #0
 8012e88:	4619      	mov	r1, r3
 8012e8a:	483e      	ldr	r0, [pc, #248]	; (8012f84 <fm_menu_config_date_hour+0x514>)
 8012e8c:	f7fb fc84 	bl	800e798 <_txe_queue_send>
            }
        break;
 8012e90:	e207      	b.n	80132a2 <fm_menu_config_date_hour+0x832>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012e92:	4b3d      	ldr	r3, [pc, #244]	; (8012f88 <fm_menu_config_date_hour+0x518>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	f000 8205 	beq.w	80132a6 <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012e9c:	4b35      	ldr	r3, [pc, #212]	; (8012f74 <fm_menu_config_date_hour+0x504>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f040 80ae 	bne.w	8013002 <fm_menu_config_date_hour+0x592>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012ea6:	4b30      	ldr	r3, [pc, #192]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d017      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
 8012eae:	4b2e      	ldr	r3, [pc, #184]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d013      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
                    || month_enum == MAY || month_enum == JULY
 8012eb6:	4b2c      	ldr	r3, [pc, #176]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b05      	cmp	r3, #5
 8012ebc:	d00f      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
 8012ebe:	4b2a      	ldr	r3, [pc, #168]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b07      	cmp	r3, #7
 8012ec4:	d00b      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012ec6:	4b28      	ldr	r3, [pc, #160]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	2b08      	cmp	r3, #8
 8012ecc:	d007      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
 8012ece:	4b26      	ldr	r3, [pc, #152]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b0a      	cmp	r3, #10
 8012ed4:	d003      	beq.n	8012ede <fm_menu_config_date_hour+0x46e>
                    || month_enum == DECEMBER)
 8012ed6:	4b24      	ldr	r3, [pc, #144]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	2b0c      	cmp	r3, #12
 8012edc:	d119      	bne.n	8012f12 <fm_menu_config_date_hour+0x4a2>
                    {
                        if (day_enum > DAY_1)
 8012ede:	4b24      	ldr	r3, [pc, #144]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d90b      	bls.n	8012efe <fm_menu_config_date_hour+0x48e>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012ee6:	4b22      	ldr	r3, [pc, #136]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	3b01      	subs	r3, #1
 8012eec:	4a1e      	ldr	r2, [pc, #120]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012eee:	7812      	ldrb	r2, [r2, #0]
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4a1e      	ldr	r2, [pc, #120]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012ef4:	7812      	ldrb	r2, [r2, #0]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fc fa04 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012efc:	e167      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012efe:	4b1a      	ldr	r3, [pc, #104]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	4619      	mov	r1, r3
 8012f04:	4b19      	ldr	r3, [pc, #100]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	201f      	movs	r0, #31
 8012f0c:	f7fc f9fa 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012f10:	e15d      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012f12:	4b15      	ldr	r3, [pc, #84]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	2b04      	cmp	r3, #4
 8012f18:	d00b      	beq.n	8012f32 <fm_menu_config_date_hour+0x4c2>
 8012f1a:	4b13      	ldr	r3, [pc, #76]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b06      	cmp	r3, #6
 8012f20:	d007      	beq.n	8012f32 <fm_menu_config_date_hour+0x4c2>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012f22:	4b11      	ldr	r3, [pc, #68]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	2b09      	cmp	r3, #9
 8012f28:	d003      	beq.n	8012f32 <fm_menu_config_date_hour+0x4c2>
 8012f2a:	4b0f      	ldr	r3, [pc, #60]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b0b      	cmp	r3, #11
 8012f30:	d12c      	bne.n	8012f8c <fm_menu_config_date_hour+0x51c>
                    {
                        if (day_enum > DAY_1)
 8012f32:	4b0f      	ldr	r3, [pc, #60]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d90b      	bls.n	8012f52 <fm_menu_config_date_hour+0x4e2>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <fm_menu_config_date_hour+0x500>)
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	3b01      	subs	r3, #1
 8012f40:	4a09      	ldr	r2, [pc, #36]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f42:	7812      	ldrb	r2, [r2, #0]
 8012f44:	4611      	mov	r1, r2
 8012f46:	4a09      	ldr	r2, [pc, #36]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012f48:	7812      	ldrb	r2, [r2, #0]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fc f9da 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012f50:	e13d      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012f52:	4b05      	ldr	r3, [pc, #20]	; (8012f68 <fm_menu_config_date_hour+0x4f8>)
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	4619      	mov	r1, r3
 8012f58:	4b04      	ldr	r3, [pc, #16]	; (8012f6c <fm_menu_config_date_hour+0x4fc>)
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	201e      	movs	r0, #30
 8012f60:	f7fc f9d0 	bl	800f304 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012f64:	e133      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
 8012f66:	bf00      	nop
 8012f68:	20001e13 	.word	0x20001e13
 8012f6c:	20001e14 	.word	0x20001e14
 8012f70:	20001e12 	.word	0x20001e12
 8012f74:	20001e11 	.word	0x20001e11
 8012f78:	20001e15 	.word	0x20001e15
 8012f7c:	20001e16 	.word	0x20001e16
 8012f80:	20001e17 	.word	0x20001e17
 8012f84:	20001388 	.word	0x20001388
 8012f88:	20001e0e 	.word	0x20001e0e
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012f8c:	4b95      	ldr	r3, [pc, #596]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	f003 0303 	and.w	r3, r3, #3
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d119      	bne.n	8012fce <fm_menu_config_date_hour+0x55e>
                        {
                            if (day_enum > DAY_1)
 8012f9a:	4b93      	ldr	r3, [pc, #588]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d90b      	bls.n	8012fba <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012fa2:	4b91      	ldr	r3, [pc, #580]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	4a90      	ldr	r2, [pc, #576]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8012faa:	7812      	ldrb	r2, [r2, #0]
 8012fac:	4611      	mov	r1, r2
 8012fae:	4a8d      	ldr	r2, [pc, #564]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8012fb0:	7812      	ldrb	r2, [r2, #0]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fc f9a6 	bl	800f304 <fm_factory_modify_date>
 8012fb8:	e109      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012fba:	4b8c      	ldr	r3, [pc, #560]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	4b88      	ldr	r3, [pc, #544]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	201d      	movs	r0, #29
 8012fc8:	f7fc f99c 	bl	800f304 <fm_factory_modify_date>
 8012fcc:	e0ff      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum > DAY_1)
 8012fce:	4b86      	ldr	r3, [pc, #536]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d90b      	bls.n	8012fee <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012fd6:	4b84      	ldr	r3, [pc, #528]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	4a83      	ldr	r2, [pc, #524]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8012fde:	7812      	ldrb	r2, [r2, #0]
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	4a80      	ldr	r2, [pc, #512]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8012fe4:	7812      	ldrb	r2, [r2, #0]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fc f98c 	bl	800f304 <fm_factory_modify_date>
 8012fec:	e0ef      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012fee:	4b7f      	ldr	r3, [pc, #508]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4b7b      	ldr	r3, [pc, #492]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	201c      	movs	r0, #28
 8012ffc:	f7fc f982 	bl	800f304 <fm_factory_modify_date>
 8013000:	e0e5      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8013002:	4b7b      	ldr	r3, [pc, #492]	; (80131f0 <fm_menu_config_date_hour+0x780>)
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	2b01      	cmp	r3, #1
 8013008:	d156      	bne.n	80130b8 <fm_menu_config_date_hour+0x648>
                {
                    if (month_enum > JANUARY)
 801300a:	4b78      	ldr	r3, [pc, #480]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d948      	bls.n	80130a4 <fm_menu_config_date_hour+0x634>
                    {
                        if ((month_enum - 1 == APRIL || month_enum - 1 == JUNE
 8013012:	4b76      	ldr	r3, [pc, #472]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b05      	cmp	r3, #5
 8013018:	d00b      	beq.n	8013032 <fm_menu_config_date_hour+0x5c2>
 801301a:	4b74      	ldr	r3, [pc, #464]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	2b07      	cmp	r3, #7
 8013020:	d007      	beq.n	8013032 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == SEPTEMBER
 8013022:	4b72      	ldr	r3, [pc, #456]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	2b0a      	cmp	r3, #10
 8013028:	d003      	beq.n	8013032 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 801302a:	4b70      	ldr	r3, [pc, #448]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	2b0c      	cmp	r3, #12
 8013030:	d107      	bne.n	8013042 <fm_menu_config_date_hour+0x5d2>
 8013032:	4b6d      	ldr	r3, [pc, #436]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	2b1e      	cmp	r3, #30
 8013038:	d903      	bls.n	8013042 <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 801303a:	4b6b      	ldr	r3, [pc, #428]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 801303c:	221e      	movs	r2, #30
 801303e:	701a      	strb	r2, [r3, #0]
 8013040:	e024      	b.n	801308c <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8013042:	4b6a      	ldr	r3, [pc, #424]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	2b03      	cmp	r3, #3
 8013048:	d10e      	bne.n	8013068 <fm_menu_config_date_hour+0x5f8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 801304a:	4b66      	ldr	r3, [pc, #408]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	f003 0303 	and.w	r3, r3, #3
 8013052:	b2db      	uxtb	r3, r3
 8013054:	2b00      	cmp	r3, #0
 8013056:	d107      	bne.n	8013068 <fm_menu_config_date_hour+0x5f8>
 8013058:	4b63      	ldr	r3, [pc, #396]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	2b1d      	cmp	r3, #29
 801305e:	d903      	bls.n	8013068 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8013060:	4b61      	ldr	r3, [pc, #388]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8013062:	221d      	movs	r2, #29
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	e011      	b.n	801308c <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8013068:	4b60      	ldr	r3, [pc, #384]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	2b03      	cmp	r3, #3
 801306e:	d10d      	bne.n	801308c <fm_menu_config_date_hour+0x61c>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8013070:	4b5c      	ldr	r3, [pc, #368]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 0303 	and.w	r3, r3, #3
 8013078:	b2db      	uxtb	r3, r3
 801307a:	2b00      	cmp	r3, #0
 801307c:	d006      	beq.n	801308c <fm_menu_config_date_hour+0x61c>
 801307e:	4b5a      	ldr	r3, [pc, #360]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	2b1c      	cmp	r3, #28
 8013084:	d902      	bls.n	801308c <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8013086:	4b58      	ldr	r3, [pc, #352]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8013088:	221c      	movs	r2, #28
 801308a:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 801308c:	4b56      	ldr	r3, [pc, #344]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	4618      	mov	r0, r3
 8013092:	4b56      	ldr	r3, [pc, #344]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	3b01      	subs	r3, #1
 8013098:	4a52      	ldr	r2, [pc, #328]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 801309a:	7812      	ldrb	r2, [r2, #0]
 801309c:	4619      	mov	r1, r3
 801309e:	f7fc f931 	bl	800f304 <fm_factory_modify_date>
 80130a2:	e094      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 80130a4:	4b50      	ldr	r3, [pc, #320]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	4618      	mov	r0, r3
 80130aa:	4b4e      	ldr	r3, [pc, #312]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	461a      	mov	r2, r3
 80130b0:	210c      	movs	r1, #12
 80130b2:	f7fc f927 	bl	800f304 <fm_factory_modify_date>
 80130b6:	e08a      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == YEAR)
 80130b8:	4b4d      	ldr	r3, [pc, #308]	; (80131f0 <fm_menu_config_date_hour+0x780>)
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	2b02      	cmp	r3, #2
 80130be:	d12c      	bne.n	801311a <fm_menu_config_date_hour+0x6aa>
                {
                    if (year_enum > YEAR_0)
 80130c0:	4b48      	ldr	r3, [pc, #288]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d01e      	beq.n	8013106 <fm_menu_config_date_hour+0x696>
                    {
                        if (((year_enum - 1) % YEAR_4 != YEAR_0)
 80130c8:	4b46      	ldr	r3, [pc, #280]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	3b01      	subs	r3, #1
 80130ce:	f003 0303 	and.w	r3, r3, #3
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00a      	beq.n	80130ec <fm_menu_config_date_hour+0x67c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 80130d6:	4b45      	ldr	r3, [pc, #276]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2b02      	cmp	r3, #2
 80130dc:	d106      	bne.n	80130ec <fm_menu_config_date_hour+0x67c>
 80130de:	4b42      	ldr	r3, [pc, #264]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	2b1c      	cmp	r3, #28
 80130e4:	d902      	bls.n	80130ec <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 80130e6:	4b40      	ldr	r3, [pc, #256]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 80130e8:	221c      	movs	r2, #28
 80130ea:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 80130ec:	4b3e      	ldr	r3, [pc, #248]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	4618      	mov	r0, r3
 80130f2:	4b3e      	ldr	r3, [pc, #248]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	4619      	mov	r1, r3
 80130f8:	4b3a      	ldr	r3, [pc, #232]	; (80131e4 <fm_menu_config_date_hour+0x774>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	3b01      	subs	r3, #1
 80130fe:	461a      	mov	r2, r3
 8013100:	f7fc f900 	bl	800f304 <fm_factory_modify_date>
 8013104:	e063      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8013106:	4b38      	ldr	r3, [pc, #224]	; (80131e8 <fm_menu_config_date_hour+0x778>)
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	4618      	mov	r0, r3
 801310c:	4b37      	ldr	r3, [pc, #220]	; (80131ec <fm_menu_config_date_hour+0x77c>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	2263      	movs	r2, #99	; 0x63
 8013112:	4619      	mov	r1, r3
 8013114:	f7fc f8f6 	bl	800f304 <fm_factory_modify_date>
 8013118:	e059      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == HOUR)
 801311a:	4b35      	ldr	r3, [pc, #212]	; (80131f0 <fm_menu_config_date_hour+0x780>)
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	2b03      	cmp	r3, #3
 8013120:	d119      	bne.n	8013156 <fm_menu_config_date_hour+0x6e6>
                {
                    if (hour_enum > HOUR_0)
 8013122:	4b34      	ldr	r3, [pc, #208]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00b      	beq.n	8013142 <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 801312a:	4b32      	ldr	r3, [pc, #200]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	3b01      	subs	r3, #1
 8013130:	4a31      	ldr	r2, [pc, #196]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 8013132:	7812      	ldrb	r2, [r2, #0]
 8013134:	4611      	mov	r1, r2
 8013136:	4a31      	ldr	r2, [pc, #196]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 8013138:	7812      	ldrb	r2, [r2, #0]
 801313a:	4618      	mov	r0, r3
 801313c:	f7fc fbee 	bl	800f91c <fm_factory_modify_time>
 8013140:	e045      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8013142:	4b2d      	ldr	r3, [pc, #180]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	4619      	mov	r1, r3
 8013148:	4b2c      	ldr	r3, [pc, #176]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	461a      	mov	r2, r3
 801314e:	2017      	movs	r0, #23
 8013150:	f7fc fbe4 	bl	800f91c <fm_factory_modify_time>
 8013154:	e03b      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8013156:	4b26      	ldr	r3, [pc, #152]	; (80131f0 <fm_menu_config_date_hour+0x780>)
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	2b04      	cmp	r3, #4
 801315c:	d119      	bne.n	8013192 <fm_menu_config_date_hour+0x722>
                {
                    if (minute_enum > MINU_0)
 801315e:	4b26      	ldr	r3, [pc, #152]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d00b      	beq.n	801317e <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8013166:	4b23      	ldr	r3, [pc, #140]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	4618      	mov	r0, r3
 801316c:	4b22      	ldr	r3, [pc, #136]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	3b01      	subs	r3, #1
 8013172:	4a22      	ldr	r2, [pc, #136]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 8013174:	7812      	ldrb	r2, [r2, #0]
 8013176:	4619      	mov	r1, r3
 8013178:	f7fc fbd0 	bl	800f91c <fm_factory_modify_time>
 801317c:	e027      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 801317e:	4b1d      	ldr	r3, [pc, #116]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	4618      	mov	r0, r3
 8013184:	4b1d      	ldr	r3, [pc, #116]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	461a      	mov	r2, r3
 801318a:	213b      	movs	r1, #59	; 0x3b
 801318c:	f7fc fbc6 	bl	800f91c <fm_factory_modify_time>
 8013190:	e01d      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == SECOND)
 8013192:	4b17      	ldr	r3, [pc, #92]	; (80131f0 <fm_menu_config_date_hour+0x780>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2b05      	cmp	r3, #5
 8013198:	d119      	bne.n	80131ce <fm_menu_config_date_hour+0x75e>
                {
                    if (second_enum > SEC_0)
 801319a:	4b18      	ldr	r3, [pc, #96]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00c      	beq.n	80131bc <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 80131a2:	4b14      	ldr	r3, [pc, #80]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	4618      	mov	r0, r3
 80131a8:	4b13      	ldr	r3, [pc, #76]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	4619      	mov	r1, r3
 80131ae:	4b13      	ldr	r3, [pc, #76]	; (80131fc <fm_menu_config_date_hour+0x78c>)
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	3b01      	subs	r3, #1
 80131b4:	461a      	mov	r2, r3
 80131b6:	f7fc fbb1 	bl	800f91c <fm_factory_modify_time>
 80131ba:	e008      	b.n	80131ce <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 80131bc:	4b0d      	ldr	r3, [pc, #52]	; (80131f4 <fm_menu_config_date_hour+0x784>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	4618      	mov	r0, r3
 80131c2:	4b0d      	ldr	r3, [pc, #52]	; (80131f8 <fm_menu_config_date_hour+0x788>)
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	223b      	movs	r2, #59	; 0x3b
 80131c8:	4619      	mov	r1, r3
 80131ca:	f7fc fba7 	bl	800f91c <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 80131ce:	2301      	movs	r3, #1
 80131d0:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131d2:	f107 030b 	add.w	r3, r7, #11
 80131d6:	2200      	movs	r2, #0
 80131d8:	4619      	mov	r1, r3
 80131da:	4809      	ldr	r0, [pc, #36]	; (8013200 <fm_menu_config_date_hour+0x790>)
 80131dc:	f7fb fadc 	bl	800e798 <_txe_queue_send>
            }
        break;
 80131e0:	e061      	b.n	80132a6 <fm_menu_config_date_hour+0x836>
 80131e2:	bf00      	nop
 80131e4:	20001e14 	.word	0x20001e14
 80131e8:	20001e12 	.word	0x20001e12
 80131ec:	20001e13 	.word	0x20001e13
 80131f0:	20001e11 	.word	0x20001e11
 80131f4:	20001e15 	.word	0x20001e15
 80131f8:	20001e16 	.word	0x20001e16
 80131fc:	20001e17 	.word	0x20001e17
 8013200:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013204:	4b4e      	ldr	r3, [pc, #312]	; (8013340 <fm_menu_config_date_hour+0x8d0>)
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d04e      	beq.n	80132aa <fm_menu_config_date_hour+0x83a>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if (field == DAY)
 801320c:	4b4d      	ldr	r3, [pc, #308]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d103      	bne.n	801321c <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8013214:	4b4b      	ldr	r3, [pc, #300]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013216:	2201      	movs	r2, #1
 8013218:	701a      	strb	r2, [r3, #0]
 801321a:	e026      	b.n	801326a <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MONTH)
 801321c:	4b49      	ldr	r3, [pc, #292]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	2b01      	cmp	r3, #1
 8013222:	d103      	bne.n	801322c <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8013224:	4b47      	ldr	r3, [pc, #284]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013226:	2202      	movs	r2, #2
 8013228:	701a      	strb	r2, [r3, #0]
 801322a:	e01e      	b.n	801326a <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == YEAR)
 801322c:	4b45      	ldr	r3, [pc, #276]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b02      	cmp	r3, #2
 8013232:	d103      	bne.n	801323c <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8013234:	4b43      	ldr	r3, [pc, #268]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013236:	2203      	movs	r2, #3
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	e016      	b.n	801326a <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == HOUR)
 801323c:	4b41      	ldr	r3, [pc, #260]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	2b03      	cmp	r3, #3
 8013242:	d103      	bne.n	801324c <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8013244:	4b3f      	ldr	r3, [pc, #252]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013246:	2204      	movs	r2, #4
 8013248:	701a      	strb	r2, [r3, #0]
 801324a:	e00e      	b.n	801326a <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MINUTE)
 801324c:	4b3d      	ldr	r3, [pc, #244]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	2b04      	cmp	r3, #4
 8013252:	d103      	bne.n	801325c <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8013254:	4b3b      	ldr	r3, [pc, #236]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013256:	2205      	movs	r2, #5
 8013258:	701a      	strb	r2, [r3, #0]
 801325a:	e006      	b.n	801326a <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == SECOND)
 801325c:	4b39      	ldr	r3, [pc, #228]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	2b05      	cmp	r3, #5
 8013262:	d102      	bne.n	801326a <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8013264:	4b37      	ldr	r3, [pc, #220]	; (8013344 <fm_menu_config_date_hour+0x8d4>)
 8013266:	2200      	movs	r2, #0
 8013268:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 801326a:	2301      	movs	r3, #1
 801326c:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801326e:	f107 030b 	add.w	r3, r7, #11
 8013272:	2200      	movs	r2, #0
 8013274:	4619      	mov	r1, r3
 8013276:	4834      	ldr	r0, [pc, #208]	; (8013348 <fm_menu_config_date_hour+0x8d8>)
 8013278:	f7fb fa8e 	bl	800e798 <_txe_queue_send>
            }
        break;
 801327c:	e015      	b.n	80132aa <fm_menu_config_date_hour+0x83a>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801327e:	4b33      	ldr	r3, [pc, #204]	; (801334c <fm_menu_config_date_hour+0x8dc>)
 8013280:	2201      	movs	r2, #1
 8013282:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013284:	4b32      	ldr	r3, [pc, #200]	; (8013350 <fm_menu_config_date_hour+0x8e0>)
 8013286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            event_now = EVENT_LCD_REFRESH;
 801328a:	2301      	movs	r3, #1
 801328c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801328e:	f107 030b 	add.w	r3, r7, #11
 8013292:	2200      	movs	r2, #0
 8013294:	4619      	mov	r1, r3
 8013296:	482c      	ldr	r0, [pc, #176]	; (8013348 <fm_menu_config_date_hour+0x8d8>)
 8013298:	f7fb fa7e 	bl	800e798 <_txe_queue_send>
        break;
 801329c:	e006      	b.n	80132ac <fm_menu_config_date_hour+0x83c>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801329e:	bf00      	nop
 80132a0:	e004      	b.n	80132ac <fm_menu_config_date_hour+0x83c>
        break;
 80132a2:	bf00      	nop
 80132a4:	e002      	b.n	80132ac <fm_menu_config_date_hour+0x83c>
        break;
 80132a6:	bf00      	nop
 80132a8:	e000      	b.n	80132ac <fm_menu_config_date_hour+0x83c>
        break;
 80132aa:	bf00      	nop
    }

    previous_event = event_id;
 80132ac:	4a29      	ldr	r2, [pc, #164]	; (8013354 <fm_menu_config_date_hour+0x8e4>)
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80132b2:	4b26      	ldr	r3, [pc, #152]	; (801334c <fm_menu_config_date_hour+0x8dc>)
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	d13b      	bne.n	8013332 <fm_menu_config_date_hour+0x8c2>
    {
        if (correct_password)
 80132ba:	4b21      	ldr	r3, [pc, #132]	; (8013340 <fm_menu_config_date_hour+0x8d0>)
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d02e      	beq.n	8013320 <fm_menu_config_date_hour+0x8b0>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 80132c2:	4b25      	ldr	r3, [pc, #148]	; (8013358 <fm_menu_config_date_hour+0x8e8>)
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	73bb      	strb	r3, [r7, #14]
            date_final.Month = month_enum;
 80132c8:	4b24      	ldr	r3, [pc, #144]	; (801335c <fm_menu_config_date_hour+0x8ec>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	737b      	strb	r3, [r7, #13]
            date_final.Year = year_enum;
 80132ce:	4b24      	ldr	r3, [pc, #144]	; (8013360 <fm_menu_config_date_hour+0x8f0>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	73fb      	strb	r3, [r7, #15]
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 80132d4:	2305      	movs	r3, #5
 80132d6:	733b      	strb	r3, [r7, #12]

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 80132d8:	f107 030c 	add.w	r3, r7, #12
 80132dc:	2200      	movs	r2, #0
 80132de:	4619      	mov	r1, r3
 80132e0:	4820      	ldr	r0, [pc, #128]	; (8013364 <fm_menu_config_date_hour+0x8f4>)
 80132e2:	f7f6 f8f1 	bl	80094c8 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 80132e6:	4b20      	ldr	r3, [pc, #128]	; (8013368 <fm_menu_config_date_hour+0x8f8>)
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	743b      	strb	r3, [r7, #16]
            time_final.Minutes = minute_enum;
 80132ec:	4b1f      	ldr	r3, [pc, #124]	; (801336c <fm_menu_config_date_hour+0x8fc>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	747b      	strb	r3, [r7, #17]
            time_final.Seconds = second_enum;
 80132f2:	4b1f      	ldr	r3, [pc, #124]	; (8013370 <fm_menu_config_date_hour+0x900>)
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	74bb      	strb	r3, [r7, #18]
            time_final.SecondFraction = 0;
 80132f8:	2300      	movs	r3, #0
 80132fa:	61bb      	str	r3, [r7, #24]
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80132fc:	2300      	movs	r3, #0
 80132fe:	61fb      	str	r3, [r7, #28]
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8013300:	2300      	movs	r3, #0
 8013302:	623b      	str	r3, [r7, #32]
            time_final.SubSeconds = 0;
 8013304:	2300      	movs	r3, #0
 8013306:	617b      	str	r3, [r7, #20]
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 8013308:	2300      	movs	r3, #0
 801330a:	74fb      	strb	r3, [r7, #19]

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 801330c:	f107 0310 	add.w	r3, r7, #16
 8013310:	2200      	movs	r2, #0
 8013312:	4619      	mov	r1, r3
 8013314:	4813      	ldr	r0, [pc, #76]	; (8013364 <fm_menu_config_date_hour+0x8f4>)
 8013316:	f7f5 ffc9 	bl	80092ac <HAL_RTC_SetTime>

            correct_password = 0;
 801331a:	4b09      	ldr	r3, [pc, #36]	; (8013340 <fm_menu_config_date_hour+0x8d0>)
 801331c:	2200      	movs	r2, #0
 801331e:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8013320:	4b14      	ldr	r3, [pc, #80]	; (8013374 <fm_menu_config_date_hour+0x904>)
 8013322:	2200      	movs	r2, #0
 8013324:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013326:	4b14      	ldr	r3, [pc, #80]	; (8013378 <fm_menu_config_date_hour+0x908>)
 8013328:	2201      	movs	r2, #1
 801332a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801332c:	4b07      	ldr	r3, [pc, #28]	; (801334c <fm_menu_config_date_hour+0x8dc>)
 801332e:	2200      	movs	r2, #0
 8013330:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 8013336:	4618      	mov	r0, r3
 8013338:	37b8      	adds	r7, #184	; 0xb8
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	20001e0e 	.word	0x20001e0e
 8013344:	20001e11 	.word	0x20001e11
 8013348:	20001388 	.word	0x20001388
 801334c:	20001e18 	.word	0x20001e18
 8013350:	080147b1 	.word	0x080147b1
 8013354:	20001e0f 	.word	0x20001e0f
 8013358:	20001e12 	.word	0x20001e12
 801335c:	20001e13 	.word	0x20001e13
 8013360:	20001e14 	.word	0x20001e14
 8013364:	200014f8 	.word	0x200014f8
 8013368:	20001e15 	.word	0x20001e15
 801336c:	20001e16 	.word	0x20001e16
 8013370:	20001e17 	.word	0x20001e17
 8013374:	20001e10 	.word	0x20001e10
 8013378:	20000141 	.word	0x20000141

0801337c <fm_menu_config_k_lin_1>:
 * @brief Función que imprime el menú del K linealizado 1.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	4603      	mov	r3, r0
 8013384:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013386:	4b47      	ldr	r3, [pc, #284]	; (80134a4 <fm_menu_config_k_lin_1+0x128>)
 8013388:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801338a:	4b47      	ldr	r3, [pc, #284]	; (80134a8 <fm_menu_config_k_lin_1+0x12c>)
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	2b01      	cmp	r3, #1
 8013390:	d104      	bne.n	801339c <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 8013392:	f7fc fce6 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8013396:	4b44      	ldr	r3, [pc, #272]	; (80134a8 <fm_menu_config_k_lin_1+0x12c>)
 8013398:	2200      	movs	r2, #0
 801339a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 801339c:	4b43      	ldr	r3, [pc, #268]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 801339e:	781a      	ldrb	r2, [r3, #0]
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	4619      	mov	r1, r3
 80133a4:	2001      	movs	r0, #1
 80133a6:	f7fc ff4f 	bl	8010248 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80133aa:	f7fd f866 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80133ae:	79fb      	ldrb	r3, [r7, #7]
 80133b0:	3b01      	subs	r3, #1
 80133b2:	2b04      	cmp	r3, #4
 80133b4:	d85f      	bhi.n	8013476 <fm_menu_config_k_lin_1+0xfa>
 80133b6:	a201      	add	r2, pc, #4	; (adr r2, 80133bc <fm_menu_config_k_lin_1+0x40>)
 80133b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133bc:	08013477 	.word	0x08013477
 80133c0:	080133d1 	.word	0x080133d1
 80133c4:	080133f9 	.word	0x080133f9
 80133c8:	08013421 	.word	0x08013421
 80133cc:	08013459 	.word	0x08013459
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80133d0:	4b37      	ldr	r3, [pc, #220]	; (80134b0 <fm_menu_config_k_lin_1+0x134>)
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d005      	beq.n	80133e4 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 80133d8:	4b34      	ldr	r3, [pc, #208]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	2101      	movs	r1, #1
 80133de:	4618      	mov	r0, r3
 80133e0:	f7fc f862 	bl	800f4a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80133e4:	2301      	movs	r3, #1
 80133e6:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133e8:	f107 030b 	add.w	r3, r7, #11
 80133ec:	2200      	movs	r2, #0
 80133ee:	4619      	mov	r1, r3
 80133f0:	4830      	ldr	r0, [pc, #192]	; (80134b4 <fm_menu_config_k_lin_1+0x138>)
 80133f2:	f7fb f9d1 	bl	800e798 <_txe_queue_send>
        break;
 80133f6:	e03f      	b.n	8013478 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80133f8:	4b2d      	ldr	r3, [pc, #180]	; (80134b0 <fm_menu_config_k_lin_1+0x134>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d005      	beq.n	801340c <fm_menu_config_k_lin_1+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 8013400:	4b2a      	ldr	r3, [pc, #168]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2101      	movs	r1, #1
 8013406:	4618      	mov	r0, r3
 8013408:	f7fc f938 	bl	800f67c <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801340c:	2301      	movs	r3, #1
 801340e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013410:	f107 030b 	add.w	r3, r7, #11
 8013414:	2200      	movs	r2, #0
 8013416:	4619      	mov	r1, r3
 8013418:	4826      	ldr	r0, [pc, #152]	; (80134b4 <fm_menu_config_k_lin_1+0x138>)
 801341a:	f7fb f9bd 	bl	800e798 <_txe_queue_send>
        break;
 801341e:	e02b      	b.n	8013478 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013420:	4b23      	ldr	r3, [pc, #140]	; (80134b0 <fm_menu_config_k_lin_1+0x134>)
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d00d      	beq.n	8013444 <fm_menu_config_k_lin_1+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013428:	4b20      	ldr	r3, [pc, #128]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	2b0a      	cmp	r3, #10
 801342e:	d806      	bhi.n	801343e <fm_menu_config_k_lin_1+0xc2>
                {
                    digit_lin_modify++;
 8013430:	4b1e      	ldr	r3, [pc, #120]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	3301      	adds	r3, #1
 8013436:	b2da      	uxtb	r2, r3
 8013438:	4b1c      	ldr	r3, [pc, #112]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 801343a:	701a      	strb	r2, [r3, #0]
 801343c:	e002      	b.n	8013444 <fm_menu_config_k_lin_1+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801343e:	4b1b      	ldr	r3, [pc, #108]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 8013440:	2200      	movs	r2, #0
 8013442:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013444:	2301      	movs	r3, #1
 8013446:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013448:	f107 030b 	add.w	r3, r7, #11
 801344c:	2200      	movs	r2, #0
 801344e:	4619      	mov	r1, r3
 8013450:	4818      	ldr	r0, [pc, #96]	; (80134b4 <fm_menu_config_k_lin_1+0x138>)
 8013452:	f7fb f9a1 	bl	800e798 <_txe_queue_send>
        break;
 8013456:	e00f      	b.n	8013478 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013458:	4b17      	ldr	r3, [pc, #92]	; (80134b8 <fm_menu_config_k_lin_1+0x13c>)
 801345a:	2201      	movs	r2, #1
 801345c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 801345e:	4b17      	ldr	r3, [pc, #92]	; (80134bc <fm_menu_config_k_lin_1+0x140>)
 8013460:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013462:	2301      	movs	r3, #1
 8013464:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013466:	f107 030b 	add.w	r3, r7, #11
 801346a:	2200      	movs	r2, #0
 801346c:	4619      	mov	r1, r3
 801346e:	4811      	ldr	r0, [pc, #68]	; (80134b4 <fm_menu_config_k_lin_1+0x138>)
 8013470:	f7fb f992 	bl	800e798 <_txe_queue_send>
        break;
 8013474:	e000      	b.n	8013478 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013476:	bf00      	nop
    }

    previous_event = event_id;
 8013478:	4a11      	ldr	r2, [pc, #68]	; (80134c0 <fm_menu_config_k_lin_1+0x144>)
 801347a:	79fb      	ldrb	r3, [r7, #7]
 801347c:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_1\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801347e:	4b0e      	ldr	r3, [pc, #56]	; (80134b8 <fm_menu_config_k_lin_1+0x13c>)
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	2b01      	cmp	r3, #1
 8013484:	d108      	bne.n	8013498 <fm_menu_config_k_lin_1+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 8013486:	4b09      	ldr	r3, [pc, #36]	; (80134ac <fm_menu_config_k_lin_1+0x130>)
 8013488:	2200      	movs	r2, #0
 801348a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801348c:	4b06      	ldr	r3, [pc, #24]	; (80134a8 <fm_menu_config_k_lin_1+0x12c>)
 801348e:	2201      	movs	r2, #1
 8013490:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013492:	4b09      	ldr	r3, [pc, #36]	; (80134b8 <fm_menu_config_k_lin_1+0x13c>)
 8013494:	2200      	movs	r2, #0
 8013496:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013498:	68fb      	ldr	r3, [r7, #12]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	0801337d 	.word	0x0801337d
 80134a8:	20000142 	.word	0x20000142
 80134ac:	20001e19 	.word	0x20001e19
 80134b0:	20001e0e 	.word	0x20001e0e
 80134b4:	20001388 	.word	0x20001388
 80134b8:	20001e1a 	.word	0x20001e1a
 80134bc:	080134c5 	.word	0x080134c5
 80134c0:	20001e0f 	.word	0x20001e0f

080134c4 <fm_menu_config_k_lin_2>:
 * @brief Función que imprime el menú del K linealizado 2.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	4603      	mov	r3, r0
 80134cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 80134ce:	4b47      	ldr	r3, [pc, #284]	; (80135ec <fm_menu_config_k_lin_2+0x128>)
 80134d0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80134d2:	4b47      	ldr	r3, [pc, #284]	; (80135f0 <fm_menu_config_k_lin_2+0x12c>)
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d104      	bne.n	80134e4 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 80134da:	f7fc fc42 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80134de:	4b44      	ldr	r3, [pc, #272]	; (80135f0 <fm_menu_config_k_lin_2+0x12c>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 80134e4:	4b43      	ldr	r3, [pc, #268]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 80134e6:	781a      	ldrb	r2, [r3, #0]
 80134e8:	79fb      	ldrb	r3, [r7, #7]
 80134ea:	4619      	mov	r1, r3
 80134ec:	2002      	movs	r0, #2
 80134ee:	f7fc feab 	bl	8010248 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80134f2:	f7fc ffc2 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80134f6:	79fb      	ldrb	r3, [r7, #7]
 80134f8:	3b01      	subs	r3, #1
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	d85f      	bhi.n	80135be <fm_menu_config_k_lin_2+0xfa>
 80134fe:	a201      	add	r2, pc, #4	; (adr r2, 8013504 <fm_menu_config_k_lin_2+0x40>)
 8013500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013504:	080135bf 	.word	0x080135bf
 8013508:	08013519 	.word	0x08013519
 801350c:	08013541 	.word	0x08013541
 8013510:	08013569 	.word	0x08013569
 8013514:	080135a1 	.word	0x080135a1
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013518:	4b37      	ldr	r3, [pc, #220]	; (80135f8 <fm_menu_config_k_lin_2+0x134>)
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d005      	beq.n	801352c <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8013520:	4b34      	ldr	r3, [pc, #208]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	2102      	movs	r1, #2
 8013526:	4618      	mov	r0, r3
 8013528:	f7fb ffbe 	bl	800f4a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801352c:	2301      	movs	r3, #1
 801352e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013530:	f107 030b 	add.w	r3, r7, #11
 8013534:	2200      	movs	r2, #0
 8013536:	4619      	mov	r1, r3
 8013538:	4830      	ldr	r0, [pc, #192]	; (80135fc <fm_menu_config_k_lin_2+0x138>)
 801353a:	f7fb f92d 	bl	800e798 <_txe_queue_send>
        break;
 801353e:	e03f      	b.n	80135c0 <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013540:	4b2d      	ldr	r3, [pc, #180]	; (80135f8 <fm_menu_config_k_lin_2+0x134>)
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d005      	beq.n	8013554 <fm_menu_config_k_lin_2+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8013548:	4b2a      	ldr	r3, [pc, #168]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2102      	movs	r1, #2
 801354e:	4618      	mov	r0, r3
 8013550:	f7fc f894 	bl	800f67c <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013554:	2301      	movs	r3, #1
 8013556:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013558:	f107 030b 	add.w	r3, r7, #11
 801355c:	2200      	movs	r2, #0
 801355e:	4619      	mov	r1, r3
 8013560:	4826      	ldr	r0, [pc, #152]	; (80135fc <fm_menu_config_k_lin_2+0x138>)
 8013562:	f7fb f919 	bl	800e798 <_txe_queue_send>
        break;
 8013566:	e02b      	b.n	80135c0 <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013568:	4b23      	ldr	r3, [pc, #140]	; (80135f8 <fm_menu_config_k_lin_2+0x134>)
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d00d      	beq.n	801358c <fm_menu_config_k_lin_2+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013570:	4b20      	ldr	r3, [pc, #128]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	2b0a      	cmp	r3, #10
 8013576:	d806      	bhi.n	8013586 <fm_menu_config_k_lin_2+0xc2>
                {
                    digit_lin_modify++;
 8013578:	4b1e      	ldr	r3, [pc, #120]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	3301      	adds	r3, #1
 801357e:	b2da      	uxtb	r2, r3
 8013580:	4b1c      	ldr	r3, [pc, #112]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 8013582:	701a      	strb	r2, [r3, #0]
 8013584:	e002      	b.n	801358c <fm_menu_config_k_lin_2+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013586:	4b1b      	ldr	r3, [pc, #108]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 8013588:	2200      	movs	r2, #0
 801358a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801358c:	2301      	movs	r3, #1
 801358e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013590:	f107 030b 	add.w	r3, r7, #11
 8013594:	2200      	movs	r2, #0
 8013596:	4619      	mov	r1, r3
 8013598:	4818      	ldr	r0, [pc, #96]	; (80135fc <fm_menu_config_k_lin_2+0x138>)
 801359a:	f7fb f8fd 	bl	800e798 <_txe_queue_send>
        break;
 801359e:	e00f      	b.n	80135c0 <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80135a0:	4b17      	ldr	r3, [pc, #92]	; (8013600 <fm_menu_config_k_lin_2+0x13c>)
 80135a2:	2201      	movs	r2, #1
 80135a4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 80135a6:	4b17      	ldr	r3, [pc, #92]	; (8013604 <fm_menu_config_k_lin_2+0x140>)
 80135a8:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80135aa:	2301      	movs	r3, #1
 80135ac:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135ae:	f107 030b 	add.w	r3, r7, #11
 80135b2:	2200      	movs	r2, #0
 80135b4:	4619      	mov	r1, r3
 80135b6:	4811      	ldr	r0, [pc, #68]	; (80135fc <fm_menu_config_k_lin_2+0x138>)
 80135b8:	f7fb f8ee 	bl	800e798 <_txe_queue_send>
        break;
 80135bc:	e000      	b.n	80135c0 <fm_menu_config_k_lin_2+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80135be:	bf00      	nop
    }

    previous_event = event_id;
 80135c0:	4a11      	ldr	r2, [pc, #68]	; (8013608 <fm_menu_config_k_lin_2+0x144>)
 80135c2:	79fb      	ldrb	r3, [r7, #7]
 80135c4:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_2\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80135c6:	4b0e      	ldr	r3, [pc, #56]	; (8013600 <fm_menu_config_k_lin_2+0x13c>)
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d108      	bne.n	80135e0 <fm_menu_config_k_lin_2+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 80135ce:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <fm_menu_config_k_lin_2+0x130>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80135d4:	4b06      	ldr	r3, [pc, #24]	; (80135f0 <fm_menu_config_k_lin_2+0x12c>)
 80135d6:	2201      	movs	r2, #1
 80135d8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80135da:	4b09      	ldr	r3, [pc, #36]	; (8013600 <fm_menu_config_k_lin_2+0x13c>)
 80135dc:	2200      	movs	r2, #0
 80135de:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80135e0:	68fb      	ldr	r3, [r7, #12]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	080134c5 	.word	0x080134c5
 80135f0:	20000143 	.word	0x20000143
 80135f4:	20001e1b 	.word	0x20001e1b
 80135f8:	20001e0e 	.word	0x20001e0e
 80135fc:	20001388 	.word	0x20001388
 8013600:	20001e1c 	.word	0x20001e1c
 8013604:	0801360d 	.word	0x0801360d
 8013608:	20001e0f 	.word	0x20001e0f

0801360c <fm_menu_config_k_lin_3>:
 * @brief Función que imprime el menú del K linealizado 3.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	4603      	mov	r3, r0
 8013614:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8013616:	4b47      	ldr	r3, [pc, #284]	; (8013734 <fm_menu_config_k_lin_3+0x128>)
 8013618:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801361a:	4b47      	ldr	r3, [pc, #284]	; (8013738 <fm_menu_config_k_lin_3+0x12c>)
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d104      	bne.n	801362c <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 8013622:	f7fc fb9e 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8013626:	4b44      	ldr	r3, [pc, #272]	; (8013738 <fm_menu_config_k_lin_3+0x12c>)
 8013628:	2200      	movs	r2, #0
 801362a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 801362c:	4b43      	ldr	r3, [pc, #268]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 801362e:	781a      	ldrb	r2, [r3, #0]
 8013630:	79fb      	ldrb	r3, [r7, #7]
 8013632:	4619      	mov	r1, r3
 8013634:	2003      	movs	r0, #3
 8013636:	f7fc fe07 	bl	8010248 <fm_lcd_k_lin>
    fm_lcd_refresh();
 801363a:	f7fc ff1e 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 801363e:	79fb      	ldrb	r3, [r7, #7]
 8013640:	3b01      	subs	r3, #1
 8013642:	2b04      	cmp	r3, #4
 8013644:	d85f      	bhi.n	8013706 <fm_menu_config_k_lin_3+0xfa>
 8013646:	a201      	add	r2, pc, #4	; (adr r2, 801364c <fm_menu_config_k_lin_3+0x40>)
 8013648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801364c:	08013707 	.word	0x08013707
 8013650:	08013661 	.word	0x08013661
 8013654:	08013689 	.word	0x08013689
 8013658:	080136b1 	.word	0x080136b1
 801365c:	080136e9 	.word	0x080136e9
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013660:	4b37      	ldr	r3, [pc, #220]	; (8013740 <fm_menu_config_k_lin_3+0x134>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d005      	beq.n	8013674 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 8013668:	4b34      	ldr	r3, [pc, #208]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	2103      	movs	r1, #3
 801366e:	4618      	mov	r0, r3
 8013670:	f7fb ff1a 	bl	800f4a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013674:	2301      	movs	r3, #1
 8013676:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013678:	f107 030b 	add.w	r3, r7, #11
 801367c:	2200      	movs	r2, #0
 801367e:	4619      	mov	r1, r3
 8013680:	4830      	ldr	r0, [pc, #192]	; (8013744 <fm_menu_config_k_lin_3+0x138>)
 8013682:	f7fb f889 	bl	800e798 <_txe_queue_send>
        break;
 8013686:	e03f      	b.n	8013708 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013688:	4b2d      	ldr	r3, [pc, #180]	; (8013740 <fm_menu_config_k_lin_3+0x134>)
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d005      	beq.n	801369c <fm_menu_config_k_lin_3+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 8013690:	4b2a      	ldr	r3, [pc, #168]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	2103      	movs	r1, #3
 8013696:	4618      	mov	r0, r3
 8013698:	f7fb fff0 	bl	800f67c <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801369c:	2301      	movs	r3, #1
 801369e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136a0:	f107 030b 	add.w	r3, r7, #11
 80136a4:	2200      	movs	r2, #0
 80136a6:	4619      	mov	r1, r3
 80136a8:	4826      	ldr	r0, [pc, #152]	; (8013744 <fm_menu_config_k_lin_3+0x138>)
 80136aa:	f7fb f875 	bl	800e798 <_txe_queue_send>
        break;
 80136ae:	e02b      	b.n	8013708 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80136b0:	4b23      	ldr	r3, [pc, #140]	; (8013740 <fm_menu_config_k_lin_3+0x134>)
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d00d      	beq.n	80136d4 <fm_menu_config_k_lin_3+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80136b8:	4b20      	ldr	r3, [pc, #128]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b0a      	cmp	r3, #10
 80136be:	d806      	bhi.n	80136ce <fm_menu_config_k_lin_3+0xc2>
                {
                    digit_lin_modify++;
 80136c0:	4b1e      	ldr	r3, [pc, #120]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	3301      	adds	r3, #1
 80136c6:	b2da      	uxtb	r2, r3
 80136c8:	4b1c      	ldr	r3, [pc, #112]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 80136ca:	701a      	strb	r2, [r3, #0]
 80136cc:	e002      	b.n	80136d4 <fm_menu_config_k_lin_3+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80136ce:	4b1b      	ldr	r3, [pc, #108]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 80136d0:	2200      	movs	r2, #0
 80136d2:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80136d4:	2301      	movs	r3, #1
 80136d6:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136d8:	f107 030b 	add.w	r3, r7, #11
 80136dc:	2200      	movs	r2, #0
 80136de:	4619      	mov	r1, r3
 80136e0:	4818      	ldr	r0, [pc, #96]	; (8013744 <fm_menu_config_k_lin_3+0x138>)
 80136e2:	f7fb f859 	bl	800e798 <_txe_queue_send>
        break;
 80136e6:	e00f      	b.n	8013708 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80136e8:	4b17      	ldr	r3, [pc, #92]	; (8013748 <fm_menu_config_k_lin_3+0x13c>)
 80136ea:	2201      	movs	r2, #1
 80136ec:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 80136ee:	4b17      	ldr	r3, [pc, #92]	; (801374c <fm_menu_config_k_lin_3+0x140>)
 80136f0:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80136f2:	2301      	movs	r3, #1
 80136f4:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136f6:	f107 030b 	add.w	r3, r7, #11
 80136fa:	2200      	movs	r2, #0
 80136fc:	4619      	mov	r1, r3
 80136fe:	4811      	ldr	r0, [pc, #68]	; (8013744 <fm_menu_config_k_lin_3+0x138>)
 8013700:	f7fb f84a 	bl	800e798 <_txe_queue_send>
        break;
 8013704:	e000      	b.n	8013708 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013706:	bf00      	nop
    }

    previous_event = event_id;
 8013708:	4a11      	ldr	r2, [pc, #68]	; (8013750 <fm_menu_config_k_lin_3+0x144>)
 801370a:	79fb      	ldrb	r3, [r7, #7]
 801370c:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_3\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801370e:	4b0e      	ldr	r3, [pc, #56]	; (8013748 <fm_menu_config_k_lin_3+0x13c>)
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	2b01      	cmp	r3, #1
 8013714:	d108      	bne.n	8013728 <fm_menu_config_k_lin_3+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 8013716:	4b09      	ldr	r3, [pc, #36]	; (801373c <fm_menu_config_k_lin_3+0x130>)
 8013718:	2200      	movs	r2, #0
 801371a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801371c:	4b06      	ldr	r3, [pc, #24]	; (8013738 <fm_menu_config_k_lin_3+0x12c>)
 801371e:	2201      	movs	r2, #1
 8013720:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013722:	4b09      	ldr	r3, [pc, #36]	; (8013748 <fm_menu_config_k_lin_3+0x13c>)
 8013724:	2200      	movs	r2, #0
 8013726:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013728:	68fb      	ldr	r3, [r7, #12]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3710      	adds	r7, #16
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	0801360d 	.word	0x0801360d
 8013738:	20000144 	.word	0x20000144
 801373c:	20001e1d 	.word	0x20001e1d
 8013740:	20001e0e 	.word	0x20001e0e
 8013744:	20001388 	.word	0x20001388
 8013748:	20001e1e 	.word	0x20001e1e
 801374c:	08013755 	.word	0x08013755
 8013750:	20001e0f 	.word	0x20001e0f

08013754 <fm_menu_config_k_lin_4>:
 * @brief Función que imprime el menú del K linealizado 4.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	4603      	mov	r3, r0
 801375c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 801375e:	4b47      	ldr	r3, [pc, #284]	; (801387c <fm_menu_config_k_lin_4+0x128>)
 8013760:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8013762:	4b47      	ldr	r3, [pc, #284]	; (8013880 <fm_menu_config_k_lin_4+0x12c>)
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	2b01      	cmp	r3, #1
 8013768:	d104      	bne.n	8013774 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 801376a:	f7fc fafa 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 801376e:	4b44      	ldr	r3, [pc, #272]	; (8013880 <fm_menu_config_k_lin_4+0x12c>)
 8013770:	2200      	movs	r2, #0
 8013772:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013774:	4b43      	ldr	r3, [pc, #268]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 8013776:	781a      	ldrb	r2, [r3, #0]
 8013778:	79fb      	ldrb	r3, [r7, #7]
 801377a:	4619      	mov	r1, r3
 801377c:	2004      	movs	r0, #4
 801377e:	f7fc fd63 	bl	8010248 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013782:	f7fc fe7a 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 8013786:	79fb      	ldrb	r3, [r7, #7]
 8013788:	3b01      	subs	r3, #1
 801378a:	2b04      	cmp	r3, #4
 801378c:	d85f      	bhi.n	801384e <fm_menu_config_k_lin_4+0xfa>
 801378e:	a201      	add	r2, pc, #4	; (adr r2, 8013794 <fm_menu_config_k_lin_4+0x40>)
 8013790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013794:	0801384f 	.word	0x0801384f
 8013798:	080137a9 	.word	0x080137a9
 801379c:	080137d1 	.word	0x080137d1
 80137a0:	080137f9 	.word	0x080137f9
 80137a4:	08013831 	.word	0x08013831
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80137a8:	4b37      	ldr	r3, [pc, #220]	; (8013888 <fm_menu_config_k_lin_4+0x134>)
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d005      	beq.n	80137bc <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 80137b0:	4b34      	ldr	r3, [pc, #208]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	2104      	movs	r1, #4
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fb fe76 	bl	800f4a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80137bc:	2301      	movs	r3, #1
 80137be:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137c0:	f107 030b 	add.w	r3, r7, #11
 80137c4:	2200      	movs	r2, #0
 80137c6:	4619      	mov	r1, r3
 80137c8:	4830      	ldr	r0, [pc, #192]	; (801388c <fm_menu_config_k_lin_4+0x138>)
 80137ca:	f7fa ffe5 	bl	800e798 <_txe_queue_send>
        break;
 80137ce:	e03f      	b.n	8013850 <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80137d0:	4b2d      	ldr	r3, [pc, #180]	; (8013888 <fm_menu_config_k_lin_4+0x134>)
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d005      	beq.n	80137e4 <fm_menu_config_k_lin_4+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 80137d8:	4b2a      	ldr	r3, [pc, #168]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	2104      	movs	r1, #4
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fb ff4c 	bl	800f67c <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80137e4:	2301      	movs	r3, #1
 80137e6:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137e8:	f107 030b 	add.w	r3, r7, #11
 80137ec:	2200      	movs	r2, #0
 80137ee:	4619      	mov	r1, r3
 80137f0:	4826      	ldr	r0, [pc, #152]	; (801388c <fm_menu_config_k_lin_4+0x138>)
 80137f2:	f7fa ffd1 	bl	800e798 <_txe_queue_send>
        break;
 80137f6:	e02b      	b.n	8013850 <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80137f8:	4b23      	ldr	r3, [pc, #140]	; (8013888 <fm_menu_config_k_lin_4+0x134>)
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00d      	beq.n	801381c <fm_menu_config_k_lin_4+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013800:	4b20      	ldr	r3, [pc, #128]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2b0a      	cmp	r3, #10
 8013806:	d806      	bhi.n	8013816 <fm_menu_config_k_lin_4+0xc2>
                {
                    digit_lin_modify++;
 8013808:	4b1e      	ldr	r3, [pc, #120]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	3301      	adds	r3, #1
 801380e:	b2da      	uxtb	r2, r3
 8013810:	4b1c      	ldr	r3, [pc, #112]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 8013812:	701a      	strb	r2, [r3, #0]
 8013814:	e002      	b.n	801381c <fm_menu_config_k_lin_4+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013816:	4b1b      	ldr	r3, [pc, #108]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 8013818:	2200      	movs	r2, #0
 801381a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801381c:	2301      	movs	r3, #1
 801381e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013820:	f107 030b 	add.w	r3, r7, #11
 8013824:	2200      	movs	r2, #0
 8013826:	4619      	mov	r1, r3
 8013828:	4818      	ldr	r0, [pc, #96]	; (801388c <fm_menu_config_k_lin_4+0x138>)
 801382a:	f7fa ffb5 	bl	800e798 <_txe_queue_send>
        break;
 801382e:	e00f      	b.n	8013850 <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013830:	4b17      	ldr	r3, [pc, #92]	; (8013890 <fm_menu_config_k_lin_4+0x13c>)
 8013832:	2201      	movs	r2, #1
 8013834:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013836:	4b17      	ldr	r3, [pc, #92]	; (8013894 <fm_menu_config_k_lin_4+0x140>)
 8013838:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801383a:	2301      	movs	r3, #1
 801383c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801383e:	f107 030b 	add.w	r3, r7, #11
 8013842:	2200      	movs	r2, #0
 8013844:	4619      	mov	r1, r3
 8013846:	4811      	ldr	r0, [pc, #68]	; (801388c <fm_menu_config_k_lin_4+0x138>)
 8013848:	f7fa ffa6 	bl	800e798 <_txe_queue_send>
        break;
 801384c:	e000      	b.n	8013850 <fm_menu_config_k_lin_4+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801384e:	bf00      	nop
    }

    previous_event = event_id;
 8013850:	4a11      	ldr	r2, [pc, #68]	; (8013898 <fm_menu_config_k_lin_4+0x144>)
 8013852:	79fb      	ldrb	r3, [r7, #7]
 8013854:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_4\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013856:	4b0e      	ldr	r3, [pc, #56]	; (8013890 <fm_menu_config_k_lin_4+0x13c>)
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d108      	bne.n	8013870 <fm_menu_config_k_lin_4+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 801385e:	4b09      	ldr	r3, [pc, #36]	; (8013884 <fm_menu_config_k_lin_4+0x130>)
 8013860:	2200      	movs	r2, #0
 8013862:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013864:	4b06      	ldr	r3, [pc, #24]	; (8013880 <fm_menu_config_k_lin_4+0x12c>)
 8013866:	2201      	movs	r2, #1
 8013868:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801386a:	4b09      	ldr	r3, [pc, #36]	; (8013890 <fm_menu_config_k_lin_4+0x13c>)
 801386c:	2200      	movs	r2, #0
 801386e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013870:	68fb      	ldr	r3, [r7, #12]
}
 8013872:	4618      	mov	r0, r3
 8013874:	3710      	adds	r7, #16
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	08013755 	.word	0x08013755
 8013880:	20000145 	.word	0x20000145
 8013884:	20001e1f 	.word	0x20001e1f
 8013888:	20001e0e 	.word	0x20001e0e
 801388c:	20001388 	.word	0x20001388
 8013890:	20001e20 	.word	0x20001e20
 8013894:	0801389d 	.word	0x0801389d
 8013898:	20001e0f 	.word	0x20001e0f

0801389c <fm_menu_config_k_lin_5>:
 * @brief Función que imprime el menú del K linealizado 5.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b084      	sub	sp, #16
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	4603      	mov	r3, r0
 80138a4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80138a6:	4b48      	ldr	r3, [pc, #288]	; (80139c8 <fm_menu_config_k_lin_5+0x12c>)
 80138a8:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80138aa:	4b48      	ldr	r3, [pc, #288]	; (80139cc <fm_menu_config_k_lin_5+0x130>)
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	2b01      	cmp	r3, #1
 80138b0:	d104      	bne.n	80138bc <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 80138b2:	f7fc fa56 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80138b6:	4b45      	ldr	r3, [pc, #276]	; (80139cc <fm_menu_config_k_lin_5+0x130>)
 80138b8:	2200      	movs	r2, #0
 80138ba:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 80138bc:	4b44      	ldr	r3, [pc, #272]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 80138be:	781a      	ldrb	r2, [r3, #0]
 80138c0:	79fb      	ldrb	r3, [r7, #7]
 80138c2:	4619      	mov	r1, r3
 80138c4:	2005      	movs	r0, #5
 80138c6:	f7fc fcbf 	bl	8010248 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80138ca:	f7fc fdd6 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80138ce:	79fb      	ldrb	r3, [r7, #7]
 80138d0:	3b01      	subs	r3, #1
 80138d2:	2b04      	cmp	r3, #4
 80138d4:	d862      	bhi.n	801399c <fm_menu_config_k_lin_5+0x100>
 80138d6:	a201      	add	r2, pc, #4	; (adr r2, 80138dc <fm_menu_config_k_lin_5+0x40>)
 80138d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138dc:	0801399d 	.word	0x0801399d
 80138e0:	080138f1 	.word	0x080138f1
 80138e4:	08013919 	.word	0x08013919
 80138e8:	08013941 	.word	0x08013941
 80138ec:	08013979 	.word	0x08013979
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80138f0:	4b38      	ldr	r3, [pc, #224]	; (80139d4 <fm_menu_config_k_lin_5+0x138>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d005      	beq.n	8013904 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80138f8:	4b35      	ldr	r3, [pc, #212]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2105      	movs	r1, #5
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fb fdd2 	bl	800f4a8 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013904:	2301      	movs	r3, #1
 8013906:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013908:	f107 030b 	add.w	r3, r7, #11
 801390c:	2200      	movs	r2, #0
 801390e:	4619      	mov	r1, r3
 8013910:	4831      	ldr	r0, [pc, #196]	; (80139d8 <fm_menu_config_k_lin_5+0x13c>)
 8013912:	f7fa ff41 	bl	800e798 <_txe_queue_send>
        break;
 8013916:	e042      	b.n	801399e <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013918:	4b2e      	ldr	r3, [pc, #184]	; (80139d4 <fm_menu_config_k_lin_5+0x138>)
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d005      	beq.n	801392c <fm_menu_config_k_lin_5+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 8013920:	4b2b      	ldr	r3, [pc, #172]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	2105      	movs	r1, #5
 8013926:	4618      	mov	r0, r3
 8013928:	f7fb fea8 	bl	800f67c <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801392c:	2301      	movs	r3, #1
 801392e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013930:	f107 030b 	add.w	r3, r7, #11
 8013934:	2200      	movs	r2, #0
 8013936:	4619      	mov	r1, r3
 8013938:	4827      	ldr	r0, [pc, #156]	; (80139d8 <fm_menu_config_k_lin_5+0x13c>)
 801393a:	f7fa ff2d 	bl	800e798 <_txe_queue_send>
        break;
 801393e:	e02e      	b.n	801399e <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013940:	4b24      	ldr	r3, [pc, #144]	; (80139d4 <fm_menu_config_k_lin_5+0x138>)
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00d      	beq.n	8013964 <fm_menu_config_k_lin_5+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013948:	4b21      	ldr	r3, [pc, #132]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	2b0a      	cmp	r3, #10
 801394e:	d806      	bhi.n	801395e <fm_menu_config_k_lin_5+0xc2>
                {
                    digit_lin_modify++;
 8013950:	4b1f      	ldr	r3, [pc, #124]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	3301      	adds	r3, #1
 8013956:	b2da      	uxtb	r2, r3
 8013958:	4b1d      	ldr	r3, [pc, #116]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 801395a:	701a      	strb	r2, [r3, #0]
 801395c:	e002      	b.n	8013964 <fm_menu_config_k_lin_5+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801395e:	4b1c      	ldr	r3, [pc, #112]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 8013960:	2200      	movs	r2, #0
 8013962:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013964:	2301      	movs	r3, #1
 8013966:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013968:	f107 030b 	add.w	r3, r7, #11
 801396c:	2200      	movs	r2, #0
 801396e:	4619      	mov	r1, r3
 8013970:	4819      	ldr	r0, [pc, #100]	; (80139d8 <fm_menu_config_k_lin_5+0x13c>)
 8013972:	f7fa ff11 	bl	800e798 <_txe_queue_send>
        break;
 8013976:	e012      	b.n	801399e <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_ESC:
            correct_password = 0;
 8013978:	4b16      	ldr	r3, [pc, #88]	; (80139d4 <fm_menu_config_k_lin_5+0x138>)
 801397a:	2200      	movs	r2, #0
 801397c:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 801397e:	4b17      	ldr	r3, [pc, #92]	; (80139dc <fm_menu_config_k_lin_5+0x140>)
 8013980:	2201      	movs	r2, #1
 8013982:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013984:	4b16      	ldr	r3, [pc, #88]	; (80139e0 <fm_menu_config_k_lin_5+0x144>)
 8013986:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013988:	2301      	movs	r3, #1
 801398a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801398c:	f107 030b 	add.w	r3, r7, #11
 8013990:	2200      	movs	r2, #0
 8013992:	4619      	mov	r1, r3
 8013994:	4810      	ldr	r0, [pc, #64]	; (80139d8 <fm_menu_config_k_lin_5+0x13c>)
 8013996:	f7fa feff 	bl	800e798 <_txe_queue_send>
        break;
 801399a:	e000      	b.n	801399e <fm_menu_config_k_lin_5+0x102>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801399c:	bf00      	nop
    }

    previous_event = event_id;
 801399e:	4a11      	ldr	r2, [pc, #68]	; (80139e4 <fm_menu_config_k_lin_5+0x148>)
 80139a0:	79fb      	ldrb	r3, [r7, #7]
 80139a2:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_5\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80139a4:	4b0d      	ldr	r3, [pc, #52]	; (80139dc <fm_menu_config_k_lin_5+0x140>)
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d108      	bne.n	80139be <fm_menu_config_k_lin_5+0x122>
    {
        digit_lin_modify = DIG_LIN_0;
 80139ac:	4b08      	ldr	r3, [pc, #32]	; (80139d0 <fm_menu_config_k_lin_5+0x134>)
 80139ae:	2200      	movs	r2, #0
 80139b0:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80139b2:	4b06      	ldr	r3, [pc, #24]	; (80139cc <fm_menu_config_k_lin_5+0x130>)
 80139b4:	2201      	movs	r2, #1
 80139b6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80139b8:	4b08      	ldr	r3, [pc, #32]	; (80139dc <fm_menu_config_k_lin_5+0x140>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80139be:	68fb      	ldr	r3, [r7, #12]
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	0801389d 	.word	0x0801389d
 80139cc:	20000146 	.word	0x20000146
 80139d0:	20001e21 	.word	0x20001e21
 80139d4:	20001e0e 	.word	0x20001e0e
 80139d8:	20001388 	.word	0x20001388
 80139dc:	20001e22 	.word	0x20001e22
 80139e0:	080147b1 	.word	0x080147b1
 80139e4:	20001e0f 	.word	0x20001e0f

080139e8 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b084      	sub	sp, #16
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	4603      	mov	r3, r0
 80139f0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80139f2:	4b5f      	ldr	r3, [pc, #380]	; (8013b70 <fm_menu_config_k_param+0x188>)
 80139f4:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80139f6:	4b5f      	ldr	r3, [pc, #380]	; (8013b74 <fm_menu_config_k_param+0x18c>)
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d104      	bne.n	8013a08 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 80139fe:	f7fc f9b0 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8013a02:	4b5c      	ldr	r3, [pc, #368]	; (8013b74 <fm_menu_config_k_param+0x18c>)
 8013a04:	2200      	movs	r2, #0
 8013a06:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013a08:	4b5b      	ldr	r3, [pc, #364]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013a0a:	781a      	ldrb	r2, [r3, #0]
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	4611      	mov	r1, r2
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fc fba7 	bl	8010164 <fm_lcd_k_factor>
    fm_lcd_refresh();
 8013a16:	f7fc fd30 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 8013a1a:	79fb      	ldrb	r3, [r7, #7]
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	2b04      	cmp	r3, #4
 8013a20:	f200 8090 	bhi.w	8013b44 <fm_menu_config_k_param+0x15c>
 8013a24:	a201      	add	r2, pc, #4	; (adr r2, 8013a2c <fm_menu_config_k_param+0x44>)
 8013a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a2a:	bf00      	nop
 8013a2c:	08013b45 	.word	0x08013b45
 8013a30:	08013a41 	.word	0x08013a41
 8013a34:	08013a67 	.word	0x08013a67
 8013a38:	08013a8d 	.word	0x08013a8d
 8013a3c:	08013b27 	.word	0x08013b27
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013a40:	4b4e      	ldr	r3, [pc, #312]	; (8013b7c <fm_menu_config_k_param+0x194>)
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d004      	beq.n	8013a52 <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013a48:	4b4b      	ldr	r3, [pc, #300]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fb fcab 	bl	800f3a8 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013a52:	2301      	movs	r3, #1
 8013a54:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a56:	f107 030b 	add.w	r3, r7, #11
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	4848      	ldr	r0, [pc, #288]	; (8013b80 <fm_menu_config_k_param+0x198>)
 8013a60:	f7fa fe9a 	bl	800e798 <_txe_queue_send>
        break;
 8013a64:	e06f      	b.n	8013b46 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013a66:	4b45      	ldr	r3, [pc, #276]	; (8013b7c <fm_menu_config_k_param+0x194>)
 8013a68:	781b      	ldrb	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d004      	beq.n	8013a78 <fm_menu_config_k_param+0x90>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013a6e:	4b42      	ldr	r3, [pc, #264]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7fb fcd8 	bl	800f428 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a7c:	f107 030b 	add.w	r3, r7, #11
 8013a80:	2200      	movs	r2, #0
 8013a82:	4619      	mov	r1, r3
 8013a84:	483e      	ldr	r0, [pc, #248]	; (8013b80 <fm_menu_config_k_param+0x198>)
 8013a86:	f7fa fe87 	bl	800e798 <_txe_queue_send>
        break;
 8013a8a:	e05c      	b.n	8013b46 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013a8c:	4b3b      	ldr	r3, [pc, #236]	; (8013b7c <fm_menu_config_k_param+0x194>)
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d03e      	beq.n	8013b12 <fm_menu_config_k_param+0x12a>
            {
                if (digit_modify == DIG_0)
 8013a94:	4b38      	ldr	r3, [pc, #224]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013a96:	781b      	ldrb	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d103      	bne.n	8013aa4 <fm_menu_config_k_param+0xbc>
                {
                    digit_modify = DIG_1;
 8013a9c:	4b36      	ldr	r3, [pc, #216]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	701a      	strb	r2, [r3, #0]
 8013aa2:	e036      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_1)
 8013aa4:	4b34      	ldr	r3, [pc, #208]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d103      	bne.n	8013ab4 <fm_menu_config_k_param+0xcc>
                {
                    digit_modify = DIG_2;
 8013aac:	4b32      	ldr	r3, [pc, #200]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013aae:	2202      	movs	r2, #2
 8013ab0:	701a      	strb	r2, [r3, #0]
 8013ab2:	e02e      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_2)
 8013ab4:	4b30      	ldr	r3, [pc, #192]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	2b02      	cmp	r3, #2
 8013aba:	d103      	bne.n	8013ac4 <fm_menu_config_k_param+0xdc>
                {
                    digit_modify = DIG_3;
 8013abc:	4b2e      	ldr	r3, [pc, #184]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013abe:	2203      	movs	r2, #3
 8013ac0:	701a      	strb	r2, [r3, #0]
 8013ac2:	e026      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_3)
 8013ac4:	4b2c      	ldr	r3, [pc, #176]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	2b03      	cmp	r3, #3
 8013aca:	d103      	bne.n	8013ad4 <fm_menu_config_k_param+0xec>
                {
                    digit_modify = DIG_4;
 8013acc:	4b2a      	ldr	r3, [pc, #168]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ace:	2204      	movs	r2, #4
 8013ad0:	701a      	strb	r2, [r3, #0]
 8013ad2:	e01e      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_4)
 8013ad4:	4b28      	ldr	r3, [pc, #160]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2b04      	cmp	r3, #4
 8013ada:	d103      	bne.n	8013ae4 <fm_menu_config_k_param+0xfc>
                {
                    digit_modify = DIG_5;
 8013adc:	4b26      	ldr	r3, [pc, #152]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ade:	2205      	movs	r2, #5
 8013ae0:	701a      	strb	r2, [r3, #0]
 8013ae2:	e016      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_5)
 8013ae4:	4b24      	ldr	r3, [pc, #144]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013ae6:	781b      	ldrb	r3, [r3, #0]
 8013ae8:	2b05      	cmp	r3, #5
 8013aea:	d103      	bne.n	8013af4 <fm_menu_config_k_param+0x10c>
                {
                    digit_modify = DIG_6;
 8013aec:	4b22      	ldr	r3, [pc, #136]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013aee:	2206      	movs	r2, #6
 8013af0:	701a      	strb	r2, [r3, #0]
 8013af2:	e00e      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_6)
 8013af4:	4b20      	ldr	r3, [pc, #128]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	2b06      	cmp	r3, #6
 8013afa:	d103      	bne.n	8013b04 <fm_menu_config_k_param+0x11c>
                {
                    digit_modify = DIG_7;
 8013afc:	4b1e      	ldr	r3, [pc, #120]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013afe:	2207      	movs	r2, #7
 8013b00:	701a      	strb	r2, [r3, #0]
 8013b02:	e006      	b.n	8013b12 <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_7)
 8013b04:	4b1c      	ldr	r3, [pc, #112]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	2b07      	cmp	r3, #7
 8013b0a:	d102      	bne.n	8013b12 <fm_menu_config_k_param+0x12a>
                {
                    digit_modify = DIG_0;
 8013b0c:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013b12:	2301      	movs	r3, #1
 8013b14:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b16:	f107 030b 	add.w	r3, r7, #11
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	4818      	ldr	r0, [pc, #96]	; (8013b80 <fm_menu_config_k_param+0x198>)
 8013b20:	f7fa fe3a 	bl	800e798 <_txe_queue_send>
        break;
 8013b24:	e00f      	b.n	8013b46 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013b26:	4b17      	ldr	r3, [pc, #92]	; (8013b84 <fm_menu_config_k_param+0x19c>)
 8013b28:	2201      	movs	r2, #1
 8013b2a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013b2c:	4b16      	ldr	r3, [pc, #88]	; (8013b88 <fm_menu_config_k_param+0x1a0>)
 8013b2e:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013b30:	2301      	movs	r3, #1
 8013b32:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b34:	f107 030b 	add.w	r3, r7, #11
 8013b38:	2200      	movs	r2, #0
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4810      	ldr	r0, [pc, #64]	; (8013b80 <fm_menu_config_k_param+0x198>)
 8013b3e:	f7fa fe2b 	bl	800e798 <_txe_queue_send>
        break;
 8013b42:	e000      	b.n	8013b46 <fm_menu_config_k_param+0x15e>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013b44:	bf00      	nop
    }

    previous_event = event_id;
 8013b46:	4a11      	ldr	r2, [pc, #68]	; (8013b8c <fm_menu_config_k_param+0x1a4>)
 8013b48:	79fb      	ldrb	r3, [r7, #7]
 8013b4a:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013b4c:	4b0d      	ldr	r3, [pc, #52]	; (8013b84 <fm_menu_config_k_param+0x19c>)
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d108      	bne.n	8013b66 <fm_menu_config_k_param+0x17e>
    {
        digit_modify = DIG_0;
 8013b54:	4b08      	ldr	r3, [pc, #32]	; (8013b78 <fm_menu_config_k_param+0x190>)
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013b5a:	4b06      	ldr	r3, [pc, #24]	; (8013b74 <fm_menu_config_k_param+0x18c>)
 8013b5c:	2201      	movs	r2, #1
 8013b5e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013b60:	4b08      	ldr	r3, [pc, #32]	; (8013b84 <fm_menu_config_k_param+0x19c>)
 8013b62:	2200      	movs	r2, #0
 8013b64:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013b66:	68fb      	ldr	r3, [r7, #12]
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	080139e9 	.word	0x080139e9
 8013b74:	20000147 	.word	0x20000147
 8013b78:	20001e23 	.word	0x20001e23
 8013b7c:	20001e0e 	.word	0x20001e0e
 8013b80:	20001388 	.word	0x20001388
 8013b84:	20001e24 	.word	0x20001e24
 8013b88:	0801337d 	.word	0x0801337d
 8013b8c:	20001e0f 	.word	0x20001e0f

08013b90 <fm_menu_config_pass>:
 * regresa al menú de inicio donde se encienden todos los leds.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 8013b90:	b5b0      	push	{r4, r5, r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	4603      	mov	r3, r0
 8013b98:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013b9a:	4ba2      	ldr	r3, [pc, #648]	; (8013e24 <fm_menu_config_pass+0x294>)
 8013b9c:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8013b9e:	4ba2      	ldr	r3, [pc, #648]	; (8013e28 <fm_menu_config_pass+0x298>)
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	d10a      	bne.n	8013bbc <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 8013ba6:	4ba1      	ldr	r3, [pc, #644]	; (8013e2c <fm_menu_config_pass+0x29c>)
 8013ba8:	2201      	movs	r2, #1
 8013baa:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013bac:	4ba0      	ldr	r3, [pc, #640]	; (8013e30 <fm_menu_config_pass+0x2a0>)
 8013bae:	2200      	movs	r2, #0
 8013bb0:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8013bb2:	f7fc f8d6 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8013bb6:	4b9c      	ldr	r3, [pc, #624]	; (8013e28 <fm_menu_config_pass+0x298>)
 8013bb8:	2200      	movs	r2, #0
 8013bba:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	200a      	movs	r0, #10
 8013bc0:	f7fd ff80 	bl	8011ac4 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 8013bc4:	4b9b      	ldr	r3, [pc, #620]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d104      	bne.n	8013bd6 <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013bcc:	2100      	movs	r1, #0
 8013bce:	200d      	movs	r0, #13
 8013bd0:	f7fd ff78 	bl	8011ac4 <lcd_set_symbol>
 8013bd4:	e010      	b.n	8013bf8 <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 8013bd6:	4b97      	ldr	r3, [pc, #604]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	2b02      	cmp	r3, #2
 8013bdc:	d104      	bne.n	8013be8 <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013bde:	2100      	movs	r1, #0
 8013be0:	200e      	movs	r0, #14
 8013be2:	f7fd ff6f 	bl	8011ac4 <lcd_set_symbol>
 8013be6:	e007      	b.n	8013bf8 <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013be8:	4b92      	ldr	r3, [pc, #584]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	2b03      	cmp	r3, #3
 8013bee:	d103      	bne.n	8013bf8 <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	200f      	movs	r0, #15
 8013bf4:	f7fd ff66 	bl	8011ac4 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013bf8:	f7fc fc3f 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 8013bfc:	79fb      	ldrb	r3, [r7, #7]
 8013bfe:	3b01      	subs	r3, #1
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	f200 8085 	bhi.w	8013d10 <fm_menu_config_pass+0x180>
 8013c06:	a201      	add	r2, pc, #4	; (adr r2, 8013c0c <fm_menu_config_pass+0x7c>)
 8013c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c0c:	08013d11 	.word	0x08013d11
 8013c10:	08013c21 	.word	0x08013c21
 8013c14:	08013c5d 	.word	0x08013c5d
 8013c18:	08013c99 	.word	0x08013c99
 8013c1c:	08013cd5 	.word	0x08013cd5
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013c20:	4b84      	ldr	r3, [pc, #528]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	461a      	mov	r2, r3
 8013c26:	4b84      	ldr	r3, [pc, #528]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013c28:	2101      	movs	r1, #1
 8013c2a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013c2c:	4b81      	ldr	r3, [pc, #516]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d80f      	bhi.n	8013c54 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013c34:	2301      	movs	r3, #1
 8013c36:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c38:	f107 030b 	add.w	r3, r7, #11
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	4619      	mov	r1, r3
 8013c40:	487e      	ldr	r0, [pc, #504]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013c42:	f7fa fda9 	bl	800e798 <_txe_queue_send>
                password_index++;
 8013c46:	4b7b      	ldr	r3, [pc, #492]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	b2da      	uxtb	r2, r3
 8013c4e:	4b79      	ldr	r3, [pc, #484]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c50:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013c52:	e05e      	b.n	8013d12 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013c54:	4b7a      	ldr	r3, [pc, #488]	; (8013e40 <fm_menu_config_pass+0x2b0>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	701a      	strb	r2, [r3, #0]
        break;
 8013c5a:	e05a      	b.n	8013d12 <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013c5c:	4b75      	ldr	r3, [pc, #468]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	461a      	mov	r2, r3
 8013c62:	4b75      	ldr	r3, [pc, #468]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013c64:	2102      	movs	r1, #2
 8013c66:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013c68:	4b72      	ldr	r3, [pc, #456]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	2b02      	cmp	r3, #2
 8013c6e:	d80f      	bhi.n	8013c90 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013c70:	2301      	movs	r3, #1
 8013c72:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c74:	f107 030b 	add.w	r3, r7, #11
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	486f      	ldr	r0, [pc, #444]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013c7e:	f7fa fd8b 	bl	800e798 <_txe_queue_send>
                password_index++;
 8013c82:	4b6c      	ldr	r3, [pc, #432]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	3301      	adds	r3, #1
 8013c88:	b2da      	uxtb	r2, r3
 8013c8a:	4b6a      	ldr	r3, [pc, #424]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c8c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013c8e:	e040      	b.n	8013d12 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013c90:	4b6b      	ldr	r3, [pc, #428]	; (8013e40 <fm_menu_config_pass+0x2b0>)
 8013c92:	2201      	movs	r2, #1
 8013c94:	701a      	strb	r2, [r3, #0]
        break;
 8013c96:	e03c      	b.n	8013d12 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013c98:	4b66      	ldr	r3, [pc, #408]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b66      	ldr	r3, [pc, #408]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013ca0:	2103      	movs	r1, #3
 8013ca2:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013ca4:	4b63      	ldr	r3, [pc, #396]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d80f      	bhi.n	8013ccc <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013cac:	2301      	movs	r3, #1
 8013cae:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013cb0:	f107 030b 	add.w	r3, r7, #11
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	4860      	ldr	r0, [pc, #384]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013cba:	f7fa fd6d 	bl	800e798 <_txe_queue_send>
                password_index++;
 8013cbe:	4b5d      	ldr	r3, [pc, #372]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013cc0:	781b      	ldrb	r3, [r3, #0]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	b2da      	uxtb	r2, r3
 8013cc6:	4b5b      	ldr	r3, [pc, #364]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013cc8:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013cca:	e022      	b.n	8013d12 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013ccc:	4b5c      	ldr	r3, [pc, #368]	; (8013e40 <fm_menu_config_pass+0x2b0>)
 8013cce:	2201      	movs	r2, #1
 8013cd0:	701a      	strb	r2, [r3, #0]
        break;
 8013cd2:	e01e      	b.n	8013d12 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013cd4:	4b57      	ldr	r3, [pc, #348]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4b57      	ldr	r3, [pc, #348]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013cdc:	2104      	movs	r1, #4
 8013cde:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013ce0:	4b54      	ldr	r3, [pc, #336]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	2b02      	cmp	r3, #2
 8013ce6:	d80f      	bhi.n	8013d08 <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013cec:	f107 030b 	add.w	r3, r7, #11
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	4851      	ldr	r0, [pc, #324]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013cf6:	f7fa fd4f 	bl	800e798 <_txe_queue_send>
                password_index++;
 8013cfa:	4b4e      	ldr	r3, [pc, #312]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	3301      	adds	r3, #1
 8013d00:	b2da      	uxtb	r2, r3
 8013d02:	4b4c      	ldr	r3, [pc, #304]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013d04:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013d06:	e004      	b.n	8013d12 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013d08:	4b4d      	ldr	r3, [pc, #308]	; (8013e40 <fm_menu_config_pass+0x2b0>)
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	701a      	strb	r2, [r3, #0]
        break;
 8013d0e:	e000      	b.n	8013d12 <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013d10:	bf00      	nop
    }

    previous_event = event_id;
 8013d12:	4a4c      	ldr	r2, [pc, #304]	; (8013e44 <fm_menu_config_pass+0x2b4>)
 8013d14:	79fb      	ldrb	r3, [r7, #7]
 8013d16:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013d18:	4b49      	ldr	r3, [pc, #292]	; (8013e40 <fm_menu_config_pass+0x2b0>)
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	f040 80be 	bne.w	8013e9e <fm_menu_config_pass+0x30e>
 8013d22:	4b44      	ldr	r3, [pc, #272]	; (8013e34 <fm_menu_config_pass+0x2a4>)
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	f240 80b9 	bls.w	8013e9e <fm_menu_config_pass+0x30e>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == PASS_DOWN && password[1] == PASS_UP
 8013d2c:	4b42      	ldr	r3, [pc, #264]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	d11d      	bne.n	8013d70 <fm_menu_config_pass+0x1e0>
 8013d34:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d36:	785b      	ldrb	r3, [r3, #1]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d119      	bne.n	8013d70 <fm_menu_config_pass+0x1e0>
        && password[2] == PASS_UP
 8013d3c:	4b3e      	ldr	r3, [pc, #248]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d3e:	789b      	ldrb	r3, [r3, #2]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d115      	bne.n	8013d70 <fm_menu_config_pass+0x1e0>
        && password[PASSWORD_LENGTH - 1] == PASS_ENTER)
 8013d44:	4b3c      	ldr	r3, [pc, #240]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d46:	78db      	ldrb	r3, [r3, #3]
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d111      	bne.n	8013d70 <fm_menu_config_pass+0x1e0>
        {
            correct_password = 1;
 8013d4c:	4b38      	ldr	r3, [pc, #224]	; (8013e30 <fm_menu_config_pass+0x2a0>)
 8013d4e:	2201      	movs	r2, #1
 8013d50:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013d52:	4b3d      	ldr	r3, [pc, #244]	; (8013e48 <fm_menu_config_pass+0x2b8>)
 8013d54:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013d56:	2301      	movs	r3, #1
 8013d58:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d5a:	f107 030b 	add.w	r3, r7, #11
 8013d5e:	2200      	movs	r2, #0
 8013d60:	4619      	mov	r1, r3
 8013d62:	4836      	ldr	r0, [pc, #216]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013d64:	f7fa fd18 	bl	800e798 <_txe_queue_send>

            password_try = 0;
 8013d68:	4b38      	ldr	r3, [pc, #224]	; (8013e4c <fm_menu_config_pass+0x2bc>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	701a      	strb	r2, [r3, #0]
 8013d6e:	e081      	b.n	8013e74 <fm_menu_config_pass+0x2e4>
        }
        else if (password[0] == PASS_DOWN && password[1] == PASS_DOWN
 8013d70:	4b31      	ldr	r3, [pc, #196]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	d139      	bne.n	8013dec <fm_menu_config_pass+0x25c>
 8013d78:	4b2f      	ldr	r3, [pc, #188]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d7a:	785b      	ldrb	r3, [r3, #1]
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d135      	bne.n	8013dec <fm_menu_config_pass+0x25c>
        && password[2] == PASS_UP && password[PASSWORD_LENGTH - 1] == PASS_UP)
 8013d80:	4b2d      	ldr	r3, [pc, #180]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d82:	789b      	ldrb	r3, [r3, #2]
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d131      	bne.n	8013dec <fm_menu_config_pass+0x25c>
 8013d88:	4b2b      	ldr	r3, [pc, #172]	; (8013e38 <fm_menu_config_pass+0x2a8>)
 8013d8a:	78db      	ldrb	r3, [r3, #3]
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d12d      	bne.n	8013dec <fm_menu_config_pass+0x25c>
        {
            correct_password = 1;
 8013d90:	4b27      	ldr	r3, [pc, #156]	; (8013e30 <fm_menu_config_pass+0x2a0>)
 8013d92:	2201      	movs	r2, #1
 8013d94:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013d96:	4b2e      	ldr	r3, [pc, #184]	; (8013e50 <fm_menu_config_pass+0x2c0>)
 8013d98:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d9e:	f107 030b 	add.w	r3, r7, #11
 8013da2:	2200      	movs	r2, #0
 8013da4:	4619      	mov	r1, r3
 8013da6:	4825      	ldr	r0, [pc, #148]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013da8:	f7fa fcf6 	bl	800e798 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013dac:	f7fb f8ec 	bl	800ef88 <fm_calendar_get_day>
 8013db0:	4604      	mov	r4, r0
 8013db2:	f7fb f907 	bl	800efc4 <fm_calendar_get_month>
 8013db6:	4605      	mov	r5, r0
 8013db8:	f7fb f918 	bl	800efec <fm_calendar_get_year>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f7fb fa9e 	bl	800f304 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013dc8:	f7fb f8e8 	bl	800ef9c <fm_calendar_get_hour>
 8013dcc:	4604      	mov	r4, r0
 8013dce:	f7fb f8ef 	bl	800efb0 <fm_calendar_get_minute>
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	f7fb f900 	bl	800efd8 <fm_calendar_get_second>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	461a      	mov	r2, r3
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4620      	mov	r0, r4
 8013de0:	f7fb fd9c 	bl	800f91c <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013de4:	4b19      	ldr	r3, [pc, #100]	; (8013e4c <fm_menu_config_pass+0x2bc>)
 8013de6:	2200      	movs	r2, #0
 8013de8:	701a      	strb	r2, [r3, #0]
 8013dea:	e043      	b.n	8013e74 <fm_menu_config_pass+0x2e4>
        }
        else
        {
            correct_password = 0;
 8013dec:	4b10      	ldr	r3, [pc, #64]	; (8013e30 <fm_menu_config_pass+0x2a0>)
 8013dee:	2200      	movs	r2, #0
 8013df0:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013df2:	4b16      	ldr	r3, [pc, #88]	; (8013e4c <fm_menu_config_pass+0x2bc>)
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	3301      	adds	r3, #1
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	4b14      	ldr	r3, [pc, #80]	; (8013e4c <fm_menu_config_pass+0x2bc>)
 8013dfc:	701a      	strb	r2, [r3, #0]

            if (password_try < password_try_max)
 8013dfe:	4b13      	ldr	r3, [pc, #76]	; (8013e4c <fm_menu_config_pass+0x2bc>)
 8013e00:	781a      	ldrb	r2, [r3, #0]
 8013e02:	4b14      	ldr	r3, [pc, #80]	; (8013e54 <fm_menu_config_pass+0x2c4>)
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d226      	bcs.n	8013e58 <fm_menu_config_pass+0x2c8>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013e0a:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <fm_menu_config_pass+0x294>)
 8013e0c:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e12:	f107 030b 	add.w	r3, r7, #11
 8013e16:	2200      	movs	r2, #0
 8013e18:	4619      	mov	r1, r3
 8013e1a:	4808      	ldr	r0, [pc, #32]	; (8013e3c <fm_menu_config_pass+0x2ac>)
 8013e1c:	f7fa fcbc 	bl	800e798 <_txe_queue_send>
 8013e20:	e028      	b.n	8013e74 <fm_menu_config_pass+0x2e4>
 8013e22:	bf00      	nop
 8013e24:	08013b91 	.word	0x08013b91
 8013e28:	20000148 	.word	0x20000148
 8013e2c:	20001e10 	.word	0x20001e10
 8013e30:	20001e0e 	.word	0x20001e0e
 8013e34:	20001e25 	.word	0x20001e25
 8013e38:	20001e28 	.word	0x20001e28
 8013e3c:	20001388 	.word	0x20001388
 8013e40:	20001e2c 	.word	0x20001e2c
 8013e44:	20001e0f 	.word	0x20001e0f
 8013e48:	080139e9 	.word	0x080139e9
 8013e4c:	20001e2d 	.word	0x20001e2d
 8013e50:	08014169 	.word	0x08014169
 8013e54:	08015b00 	.word	0x08015b00
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013e58:	4b13      	ldr	r3, [pc, #76]	; (8013ea8 <fm_menu_config_pass+0x318>)
 8013e5a:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e60:	f107 030b 	add.w	r3, r7, #11
 8013e64:	2200      	movs	r2, #0
 8013e66:	4619      	mov	r1, r3
 8013e68:	4810      	ldr	r0, [pc, #64]	; (8013eac <fm_menu_config_pass+0x31c>)
 8013e6a:	f7fa fc95 	bl	800e798 <_txe_queue_send>

                password_try = 0;
 8013e6e:	4b10      	ldr	r3, [pc, #64]	; (8013eb0 <fm_menu_config_pass+0x320>)
 8013e70:	2200      	movs	r2, #0
 8013e72:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = PASS_0;
 8013e74:	4b0f      	ldr	r3, [pc, #60]	; (8013eb4 <fm_menu_config_pass+0x324>)
 8013e76:	2200      	movs	r2, #0
 8013e78:	701a      	strb	r2, [r3, #0]
        password[0] = PASS_0;
 8013e7a:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <fm_menu_config_pass+0x328>)
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	701a      	strb	r2, [r3, #0]
        password[1] = PASS_0;
 8013e80:	4b0d      	ldr	r3, [pc, #52]	; (8013eb8 <fm_menu_config_pass+0x328>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	705a      	strb	r2, [r3, #1]
        password[2] = PASS_0;
 8013e86:	4b0c      	ldr	r3, [pc, #48]	; (8013eb8 <fm_menu_config_pass+0x328>)
 8013e88:	2200      	movs	r2, #0
 8013e8a:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = PASS_0;
 8013e8c:	4b0a      	ldr	r3, [pc, #40]	; (8013eb8 <fm_menu_config_pass+0x328>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013e92:	4b0a      	ldr	r3, [pc, #40]	; (8013ebc <fm_menu_config_pass+0x32c>)
 8013e94:	2201      	movs	r2, #1
 8013e96:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013e98:	4b09      	ldr	r3, [pc, #36]	; (8013ec0 <fm_menu_config_pass+0x330>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ea8:	080147b1 	.word	0x080147b1
 8013eac:	20001388 	.word	0x20001388
 8013eb0:	20001e2d 	.word	0x20001e2d
 8013eb4:	20001e25 	.word	0x20001e25
 8013eb8:	20001e28 	.word	0x20001e28
 8013ebc:	20000148 	.word	0x20000148
 8013ec0:	20001e2c 	.word	0x20001e2c

08013ec4 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b0ce      	sub	sp, #312	; 0x138
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	4602      	mov	r2, r0
 8013ecc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013ed0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013ed4:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013ed6:	4b9d      	ldr	r3, [pc, #628]	; (801414c <fm_menu_config_units_tim+0x288>)
 8013ed8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    fm_event_t event_now;

    if (new_entry == 1)
 8013edc:	4b9c      	ldr	r3, [pc, #624]	; (8014150 <fm_menu_config_units_tim+0x28c>)
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d104      	bne.n	8013eee <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013ee4:	f7fb ff3d 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8013ee8:	4b99      	ldr	r3, [pc, #612]	; (8014150 <fm_menu_config_units_tim+0x28c>)
 8013eea:	2200      	movs	r2, #0
 8013eec:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013eee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013ef2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fc fb2f 	bl	801055c <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013efe:	f7fc fabc 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 8013f02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f06:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	2b04      	cmp	r3, #4
 8013f10:	f200 8103 	bhi.w	801411a <fm_menu_config_units_tim+0x256>
 8013f14:	a201      	add	r2, pc, #4	; (adr r2, 8013f1c <fm_menu_config_units_tim+0x58>)
 8013f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f1a:	bf00      	nop
 8013f1c:	0801411b 	.word	0x0801411b
 8013f20:	08013f31 	.word	0x08013f31
 8013f24:	08013fd3 	.word	0x08013fd3
 8013f28:	08014061 	.word	0x08014061
 8013f2c:	080140f3 	.word	0x080140f3
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013f30:	4b88      	ldr	r3, [pc, #544]	; (8014154 <fm_menu_config_units_tim+0x290>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d03e      	beq.n	8013fb6 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013f38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fb f97d 	bl	800f240 <fm_factory_get_rate>
 8013f46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013f4e:	7e5b      	ldrb	r3, [r3, #25]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d103      	bne.n	8013f5c <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013f54:	2001      	movs	r0, #1
 8013f56:	f7fb fd0f 	bl	800f978 <fm_factory_modify_time_units>
 8013f5a:	e02a      	b.n	8013fb2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013f5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fb f96b 	bl	800f240 <fm_factory_get_rate>
 8013f6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f72:	7e5b      	ldrb	r3, [r3, #25]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d103      	bne.n	8013f80 <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013f78:	2002      	movs	r0, #2
 8013f7a:	f7fb fcfd 	bl	800f978 <fm_factory_modify_time_units>
 8013f7e:	e018      	b.n	8013fb2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013f80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fb f95b 	bl	800f240 <fm_factory_get_rate>
 8013f8a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8013f8e:	2b02      	cmp	r3, #2
 8013f90:	d103      	bne.n	8013f9a <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013f92:	2003      	movs	r0, #3
 8013f94:	f7fb fcf0 	bl	800f978 <fm_factory_modify_time_units>
 8013f98:	e00b      	b.n	8013fb2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013f9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fb f94e 	bl	800f240 <fm_factory_get_rate>
 8013fa4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8013fa8:	2b03      	cmp	r3, #3
 8013faa:	d102      	bne.n	8013fb2 <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013fac:	2000      	movs	r0, #0
 8013fae:	f7fb fce3 	bl	800f978 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013fb2:	f7fb fed6 	bl	800fd62 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013fb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013fba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013fc2:	f107 030f 	add.w	r3, r7, #15
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	4619      	mov	r1, r3
 8013fca:	4863      	ldr	r0, [pc, #396]	; (8014158 <fm_menu_config_units_tim+0x294>)
 8013fcc:	f7fa fbe4 	bl	800e798 <_txe_queue_send>
        break;
 8013fd0:	e0a4      	b.n	801411c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013fd2:	4b60      	ldr	r3, [pc, #384]	; (8014154 <fm_menu_config_units_tim+0x290>)
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d034      	beq.n	8014044 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013fda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fb f92e 	bl	800f240 <fm_factory_get_rate>
 8013fe4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d103      	bne.n	8013ff4 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013fec:	2003      	movs	r0, #3
 8013fee:	f7fb fcc3 	bl	800f978 <fm_factory_modify_time_units>
 8013ff2:	e025      	b.n	8014040 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013ff4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fb f921 	bl	800f240 <fm_factory_get_rate>
 8013ffe:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8014002:	2b03      	cmp	r3, #3
 8014004:	d103      	bne.n	801400e <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8014006:	2002      	movs	r0, #2
 8014008:	f7fb fcb6 	bl	800f978 <fm_factory_modify_time_units>
 801400c:	e018      	b.n	8014040 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 801400e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014012:	4618      	mov	r0, r3
 8014014:	f7fb f914 	bl	800f240 <fm_factory_get_rate>
 8014018:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 801401c:	2b02      	cmp	r3, #2
 801401e:	d103      	bne.n	8014028 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8014020:	2001      	movs	r0, #1
 8014022:	f7fb fca9 	bl	800f978 <fm_factory_modify_time_units>
 8014026:	e00b      	b.n	8014040 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8014028:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801402c:	4618      	mov	r0, r3
 801402e:	f7fb f907 	bl	800f240 <fm_factory_get_rate>
 8014032:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8014036:	2b01      	cmp	r3, #1
 8014038:	d102      	bne.n	8014040 <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 801403a:	2000      	movs	r0, #0
 801403c:	f7fb fc9c 	bl	800f978 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8014040:	f7fb fe8f 	bl	800fd62 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014044:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014048:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801404c:	2201      	movs	r2, #1
 801404e:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014050:	f107 030f 	add.w	r3, r7, #15
 8014054:	2200      	movs	r2, #0
 8014056:	4619      	mov	r1, r3
 8014058:	483f      	ldr	r0, [pc, #252]	; (8014158 <fm_menu_config_units_tim+0x294>)
 801405a:	f7fa fb9d 	bl	800e798 <_txe_queue_send>
        break;
 801405e:	e05d      	b.n	801411c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8014060:	4b3c      	ldr	r3, [pc, #240]	; (8014154 <fm_menu_config_units_tim+0x290>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d036      	beq.n	80140d6 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8014068:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801406c:	4618      	mov	r0, r3
 801406e:	f7fb f925 	bl	800f2bc <fm_factory_get_units_tim>
 8014072:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8014076:	2b00      	cmp	r3, #0
 8014078:	d104      	bne.n	8014084 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 801407a:	2101      	movs	r1, #1
 801407c:	2001      	movs	r0, #1
 801407e:	f7fb fc35 	bl	800f8ec <fm_factory_modify_res_rate>
 8014082:	e028      	b.n	80140d6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8014084:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8014088:	4618      	mov	r0, r3
 801408a:	f7fb f917 	bl	800f2bc <fm_factory_get_units_tim>
 801408e:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8014092:	2b01      	cmp	r3, #1
 8014094:	d104      	bne.n	80140a0 <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8014096:	2102      	movs	r1, #2
 8014098:	2002      	movs	r0, #2
 801409a:	f7fb fc27 	bl	800f8ec <fm_factory_modify_res_rate>
 801409e:	e01a      	b.n	80140d6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 80140a0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7fb f909 	bl	800f2bc <fm_factory_get_units_tim>
 80140aa:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d104      	bne.n	80140bc <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 80140b2:	2103      	movs	r1, #3
 80140b4:	2003      	movs	r0, #3
 80140b6:	f7fb fc19 	bl	800f8ec <fm_factory_modify_res_rate>
 80140ba:	e00c      	b.n	80140d6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 80140bc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fb f8fb 	bl	800f2bc <fm_factory_get_units_tim>
 80140c6:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 80140ca:	2b03      	cmp	r3, #3
 80140cc:	d103      	bne.n	80140d6 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 80140ce:	2100      	movs	r1, #0
 80140d0:	2000      	movs	r0, #0
 80140d2:	f7fb fc0b 	bl	800f8ec <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80140d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80140da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80140de:	2201      	movs	r2, #1
 80140e0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140e2:	f107 030f 	add.w	r3, r7, #15
 80140e6:	2200      	movs	r2, #0
 80140e8:	4619      	mov	r1, r3
 80140ea:	481b      	ldr	r0, [pc, #108]	; (8014158 <fm_menu_config_units_tim+0x294>)
 80140ec:	f7fa fb54 	bl	800e798 <_txe_queue_send>
        break;
 80140f0:	e014      	b.n	801411c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80140f2:	4b1a      	ldr	r3, [pc, #104]	; (801415c <fm_menu_config_units_tim+0x298>)
 80140f4:	2201      	movs	r2, #1
 80140f6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 80140f8:	4b19      	ldr	r3, [pc, #100]	; (8014160 <fm_menu_config_units_tim+0x29c>)
 80140fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            event_now = EVENT_LCD_REFRESH;
 80140fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014102:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014106:	2201      	movs	r2, #1
 8014108:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801410a:	f107 030f 	add.w	r3, r7, #15
 801410e:	2200      	movs	r2, #0
 8014110:	4619      	mov	r1, r3
 8014112:	4811      	ldr	r0, [pc, #68]	; (8014158 <fm_menu_config_units_tim+0x294>)
 8014114:	f7fa fb40 	bl	800e798 <_txe_queue_send>
        break;
 8014118:	e000      	b.n	801411c <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801411a:	bf00      	nop
    }

    previous_event = event_id;
 801411c:	4a11      	ldr	r2, [pc, #68]	; (8014164 <fm_menu_config_units_tim+0x2a0>)
 801411e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014122:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801412a:	4b0c      	ldr	r3, [pc, #48]	; (801415c <fm_menu_config_units_tim+0x298>)
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d105      	bne.n	801413e <fm_menu_config_units_tim+0x27a>
    {
        new_entry = 1;
 8014132:	4b07      	ldr	r3, [pc, #28]	; (8014150 <fm_menu_config_units_tim+0x28c>)
 8014134:	2201      	movs	r2, #1
 8014136:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014138:	4b08      	ldr	r3, [pc, #32]	; (801415c <fm_menu_config_units_tim+0x298>)
 801413a:	2200      	movs	r2, #0
 801413c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801413e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
}
 8014142:	4618      	mov	r0, r3
 8014144:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	08013ec5 	.word	0x08013ec5
 8014150:	20000149 	.word	0x20000149
 8014154:	20001e0e 	.word	0x20001e0e
 8014158:	20001388 	.word	0x20001388
 801415c:	20001e2e 	.word	0x20001e2e
 8014160:	08012a71 	.word	0x08012a71
 8014164:	20001e0f 	.word	0x20001e0f

08014168 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b0fe      	sub	sp, #504	; 0x1f8
 801416c:	af00      	add	r7, sp, #0
 801416e:	4602      	mov	r2, r0
 8014170:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014174:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 8014178:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 801417a:	4bc9      	ldr	r3, [pc, #804]	; (80144a0 <fm_menu_config_units_vol+0x338>)
 801417c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    fm_event_t event_now;

    if (new_entry == 1)
 8014180:	4bc8      	ldr	r3, [pc, #800]	; (80144a4 <fm_menu_config_units_vol+0x33c>)
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	2b01      	cmp	r3, #1
 8014186:	d104      	bne.n	8014192 <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 8014188:	f7fb fdeb 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 801418c:	4bc5      	ldr	r3, [pc, #788]	; (80144a4 <fm_menu_config_units_vol+0x33c>)
 801418e:	2200      	movs	r2, #0
 8014190:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8014192:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014196:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	4618      	mov	r0, r3
 801419e:	f7fc fa79 	bl	8010694 <fm_lcd_units_vol>
    fm_lcd_refresh();
 80141a2:	f7fc f96a 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80141a6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141aa:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	3b01      	subs	r3, #1
 80141b2:	2b04      	cmp	r3, #4
 80141b4:	f200 8180 	bhi.w	80144b8 <fm_menu_config_units_vol+0x350>
 80141b8:	a201      	add	r2, pc, #4	; (adr r2, 80141c0 <fm_menu_config_units_vol+0x58>)
 80141ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141be:	bf00      	nop
 80141c0:	080144b9 	.word	0x080144b9
 80141c4:	080141d5 	.word	0x080141d5
 80141c8:	080142f7 	.word	0x080142f7
 80141cc:	080143dd 	.word	0x080143dd
 80141d0:	08014477 	.word	0x08014477
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80141d4:	4bb4      	ldr	r3, [pc, #720]	; (80144a8 <fm_menu_config_units_vol+0x340>)
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d07e      	beq.n	80142da <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 80141dc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fa ff0b 	bl	800f000 <fm_factory_get_acm>
 80141ea:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80141f2:	7e1b      	ldrb	r3, [r3, #24]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d103      	bne.n	8014200 <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 80141f8:	2001      	movs	r0, #1
 80141fa:	f7fb fbd7 	bl	800f9ac <fm_factory_modify_volume_units>
 80141fe:	e06a      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014200:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014204:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014208:	4618      	mov	r0, r3
 801420a:	f7fa fef9 	bl	800f000 <fm_factory_get_acm>
 801420e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014212:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014216:	7e1b      	ldrb	r3, [r3, #24]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d103      	bne.n	8014224 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 801421c:	2002      	movs	r0, #2
 801421e:	f7fb fbc5 	bl	800f9ac <fm_factory_modify_volume_units>
 8014222:	e058      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014224:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014228:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801422c:	4618      	mov	r0, r3
 801422e:	f7fa fee7 	bl	800f000 <fm_factory_get_acm>
 8014232:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014236:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801423a:	7e1b      	ldrb	r3, [r3, #24]
 801423c:	2b02      	cmp	r3, #2
 801423e:	d103      	bne.n	8014248 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 8014240:	2003      	movs	r0, #3
 8014242:	f7fb fbb3 	bl	800f9ac <fm_factory_modify_volume_units>
 8014246:	e046      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014248:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801424c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8014250:	4618      	mov	r0, r3
 8014252:	f7fa fed5 	bl	800f000 <fm_factory_get_acm>
 8014256:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801425a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801425e:	7e1b      	ldrb	r3, [r3, #24]
 8014260:	2b03      	cmp	r3, #3
 8014262:	d103      	bne.n	801426c <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 8014264:	2004      	movs	r0, #4
 8014266:	f7fb fba1 	bl	800f9ac <fm_factory_modify_volume_units>
 801426a:	e034      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 801426c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014270:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014274:	4618      	mov	r0, r3
 8014276:	f7fa fec3 	bl	800f000 <fm_factory_get_acm>
 801427a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801427e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014282:	7e1b      	ldrb	r3, [r3, #24]
 8014284:	2b04      	cmp	r3, #4
 8014286:	d103      	bne.n	8014290 <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 8014288:	2005      	movs	r0, #5
 801428a:	f7fb fb8f 	bl	800f9ac <fm_factory_modify_volume_units>
 801428e:	e022      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8014290:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014294:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014298:	4618      	mov	r0, r3
 801429a:	f7fa feb1 	bl	800f000 <fm_factory_get_acm>
 801429e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80142a6:	7e1b      	ldrb	r3, [r3, #24]
 80142a8:	2b05      	cmp	r3, #5
 80142aa:	d103      	bne.n	80142b4 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 80142ac:	2007      	movs	r0, #7
 80142ae:	f7fb fb7d 	bl	800f9ac <fm_factory_modify_volume_units>
 80142b2:	e010      	b.n	80142d6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 80142b4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fa fe9f 	bl	800f000 <fm_factory_get_acm>
 80142c2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80142ca:	7e1b      	ldrb	r3, [r3, #24]
 80142cc:	2b07      	cmp	r3, #7
 80142ce:	d102      	bne.n	80142d6 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 80142d0:	2000      	movs	r0, #0
 80142d2:	f7fb fb6b 	bl	800f9ac <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80142d6:	f7fb fd44 	bl	800fd62 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80142da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142de:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80142e2:	2201      	movs	r2, #1
 80142e4:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142e6:	f107 030f 	add.w	r3, r7, #15
 80142ea:	2200      	movs	r2, #0
 80142ec:	4619      	mov	r1, r3
 80142ee:	486f      	ldr	r0, [pc, #444]	; (80144ac <fm_menu_config_units_vol+0x344>)
 80142f0:	f7fa fa52 	bl	800e798 <_txe_queue_send>
        break;
 80142f4:	e0e1      	b.n	80144ba <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80142f6:	4b6c      	ldr	r3, [pc, #432]	; (80144a8 <fm_menu_config_units_vol+0x340>)
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d060      	beq.n	80143c0 <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 80142fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014306:	4618      	mov	r0, r3
 8014308:	f7fa fe7a 	bl	800f000 <fm_factory_get_acm>
 801430c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014314:	7e1b      	ldrb	r3, [r3, #24]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d103      	bne.n	8014322 <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 801431a:	2007      	movs	r0, #7
 801431c:	f7fb fb46 	bl	800f9ac <fm_factory_modify_volume_units>
 8014320:	e04c      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8014322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014326:	4618      	mov	r0, r3
 8014328:	f7fa fe6a 	bl	800f000 <fm_factory_get_acm>
 801432c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8014330:	2b07      	cmp	r3, #7
 8014332:	d103      	bne.n	801433c <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 8014334:	2005      	movs	r0, #5
 8014336:	f7fb fb39 	bl	800f9ac <fm_factory_modify_volume_units>
 801433a:	e03f      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 801433c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014340:	4618      	mov	r0, r3
 8014342:	f7fa fe5d 	bl	800f000 <fm_factory_get_acm>
 8014346:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 801434a:	2b05      	cmp	r3, #5
 801434c:	d103      	bne.n	8014356 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 801434e:	2004      	movs	r0, #4
 8014350:	f7fb fb2c 	bl	800f9ac <fm_factory_modify_volume_units>
 8014354:	e032      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014356:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801435a:	4618      	mov	r0, r3
 801435c:	f7fa fe50 	bl	800f000 <fm_factory_get_acm>
 8014360:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8014364:	2b04      	cmp	r3, #4
 8014366:	d103      	bne.n	8014370 <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 8014368:	2003      	movs	r0, #3
 801436a:	f7fb fb1f 	bl	800f9ac <fm_factory_modify_volume_units>
 801436e:	e025      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014370:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014374:	4618      	mov	r0, r3
 8014376:	f7fa fe43 	bl	800f000 <fm_factory_get_acm>
 801437a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 801437e:	2b03      	cmp	r3, #3
 8014380:	d103      	bne.n	801438a <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 8014382:	2002      	movs	r0, #2
 8014384:	f7fb fb12 	bl	800f9ac <fm_factory_modify_volume_units>
 8014388:	e018      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 801438a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801438e:	4618      	mov	r0, r3
 8014390:	f7fa fe36 	bl	800f000 <fm_factory_get_acm>
 8014394:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8014398:	2b02      	cmp	r3, #2
 801439a:	d103      	bne.n	80143a4 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 801439c:	2001      	movs	r0, #1
 801439e:	f7fb fb05 	bl	800f9ac <fm_factory_modify_volume_units>
 80143a2:	e00b      	b.n	80143bc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 80143a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fa fe29 	bl	800f000 <fm_factory_get_acm>
 80143ae:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d102      	bne.n	80143bc <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 80143b6:	2000      	movs	r0, #0
 80143b8:	f7fb faf8 	bl	800f9ac <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80143bc:	f7fb fcd1 	bl	800fd62 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80143c0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80143c4:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80143c8:	2201      	movs	r2, #1
 80143ca:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143cc:	f107 030f 	add.w	r3, r7, #15
 80143d0:	2200      	movs	r2, #0
 80143d2:	4619      	mov	r1, r3
 80143d4:	4835      	ldr	r0, [pc, #212]	; (80144ac <fm_menu_config_units_vol+0x344>)
 80143d6:	f7fa f9df 	bl	800e798 <_txe_queue_send>
        break;
 80143da:	e06e      	b.n	80144ba <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80143dc:	4b32      	ldr	r3, [pc, #200]	; (80144a8 <fm_menu_config_units_vol+0x340>)
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d03a      	beq.n	801445a <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 80143e4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fa ff79 	bl	800f2e0 <fm_factory_get_units_vol>
 80143ee:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d105      	bne.n	8014402 <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 80143f6:	2201      	movs	r2, #1
 80143f8:	2101      	movs	r1, #1
 80143fa:	2001      	movs	r0, #1
 80143fc:	f7fb fa58 	bl	800f8b0 <fm_factory_modify_res_acm_ttl>
 8014400:	e02b      	b.n	801445a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 8014402:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8014406:	4618      	mov	r0, r3
 8014408:	f7fa ff6a 	bl	800f2e0 <fm_factory_get_units_vol>
 801440c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8014410:	2b01      	cmp	r3, #1
 8014412:	d105      	bne.n	8014420 <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8014414:	2202      	movs	r2, #2
 8014416:	2102      	movs	r1, #2
 8014418:	2002      	movs	r0, #2
 801441a:	f7fb fa49 	bl	800f8b0 <fm_factory_modify_res_acm_ttl>
 801441e:	e01c      	b.n	801445a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8014420:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8014424:	4618      	mov	r0, r3
 8014426:	f7fa ff5b 	bl	800f2e0 <fm_factory_get_units_vol>
 801442a:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 801442e:	2b02      	cmp	r3, #2
 8014430:	d105      	bne.n	801443e <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 8014432:	2203      	movs	r2, #3
 8014434:	2103      	movs	r1, #3
 8014436:	2003      	movs	r0, #3
 8014438:	f7fb fa3a 	bl	800f8b0 <fm_factory_modify_res_acm_ttl>
 801443c:	e00d      	b.n	801445a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 801443e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8014442:	4618      	mov	r0, r3
 8014444:	f7fa ff4c 	bl	800f2e0 <fm_factory_get_units_vol>
 8014448:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 801444c:	2b03      	cmp	r3, #3
 801444e:	d104      	bne.n	801445a <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 8014450:	2200      	movs	r2, #0
 8014452:	2100      	movs	r1, #0
 8014454:	2000      	movs	r0, #0
 8014456:	f7fb fa2b 	bl	800f8b0 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801445a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801445e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014462:	2201      	movs	r2, #1
 8014464:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014466:	f107 030f 	add.w	r3, r7, #15
 801446a:	2200      	movs	r2, #0
 801446c:	4619      	mov	r1, r3
 801446e:	480f      	ldr	r0, [pc, #60]	; (80144ac <fm_menu_config_units_vol+0x344>)
 8014470:	f7fa f992 	bl	800e798 <_txe_queue_send>
        break;
 8014474:	e021      	b.n	80144ba <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014476:	4b0e      	ldr	r3, [pc, #56]	; (80144b0 <fm_menu_config_units_vol+0x348>)
 8014478:	2201      	movs	r2, #1
 801447a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 801447c:	4b0d      	ldr	r3, [pc, #52]	; (80144b4 <fm_menu_config_units_vol+0x34c>)
 801447e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            event_now = EVENT_LCD_REFRESH;
 8014482:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014486:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 801448a:	2201      	movs	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801448e:	f107 030f 	add.w	r3, r7, #15
 8014492:	2200      	movs	r2, #0
 8014494:	4619      	mov	r1, r3
 8014496:	4805      	ldr	r0, [pc, #20]	; (80144ac <fm_menu_config_units_vol+0x344>)
 8014498:	f7fa f97e 	bl	800e798 <_txe_queue_send>
        break;
 801449c:	e00d      	b.n	80144ba <fm_menu_config_units_vol+0x352>
 801449e:	bf00      	nop
 80144a0:	08014169 	.word	0x08014169
 80144a4:	2000014a 	.word	0x2000014a
 80144a8:	20001e0e 	.word	0x20001e0e
 80144ac:	20001388 	.word	0x20001388
 80144b0:	20001e2f 	.word	0x20001e2f
 80144b4:	08013ec5 	.word	0x08013ec5
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80144b8:	bf00      	nop
    }

    previous_event = event_id;
 80144ba:	4a0c      	ldr	r2, [pc, #48]	; (80144ec <fm_menu_config_units_vol+0x384>)
 80144bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80144c0:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80144c8:	4b09      	ldr	r3, [pc, #36]	; (80144f0 <fm_menu_config_units_vol+0x388>)
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d105      	bne.n	80144dc <fm_menu_config_units_vol+0x374>
    {
        new_entry = 1;
 80144d0:	4b08      	ldr	r3, [pc, #32]	; (80144f4 <fm_menu_config_units_vol+0x38c>)
 80144d2:	2201      	movs	r2, #1
 80144d4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80144d6:	4b06      	ldr	r3, [pc, #24]	; (80144f0 <fm_menu_config_units_vol+0x388>)
 80144d8:	2200      	movs	r2, #0
 80144da:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80144dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	20001e0f 	.word	0x20001e0f
 80144f0:	20001e2f 	.word	0x20001e2f
 80144f4:	2000014a 	.word	0x2000014a

080144f8 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014502:	4b32      	ldr	r3, [pc, #200]	; (80145cc <fm_menu_show_acm_rate+0xd4>)
 8014504:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8014506:	4b32      	ldr	r3, [pc, #200]	; (80145d0 <fm_menu_show_acm_rate+0xd8>)
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	2b01      	cmp	r3, #1
 801450c:	d104      	bne.n	8014518 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 801450e:	f7fb fc28 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 8014512:	4b2f      	ldr	r3, [pc, #188]	; (80145d0 <fm_menu_show_acm_rate+0xd8>)
 8014514:	2200      	movs	r2, #0
 8014516:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8014518:	f7fb fb60 	bl	800fbdc <fm_lcd_acm_rate>
    fm_lcd_refresh();
 801451c:	f7fb ffad 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 8014520:	79fb      	ldrb	r3, [r7, #7]
 8014522:	3b01      	subs	r3, #1
 8014524:	2b04      	cmp	r3, #4
 8014526:	d841      	bhi.n	80145ac <fm_menu_show_acm_rate+0xb4>
 8014528:	a201      	add	r2, pc, #4	; (adr r2, 8014530 <fm_menu_show_acm_rate+0x38>)
 801452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801452e:	bf00      	nop
 8014530:	080145ad 	.word	0x080145ad
 8014534:	08014545 	.word	0x08014545
 8014538:	08014563 	.word	0x08014563
 801453c:	08014581 	.word	0x08014581
 8014540:	08014599 	.word	0x08014599
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014544:	4b23      	ldr	r3, [pc, #140]	; (80145d4 <fm_menu_show_acm_rate+0xdc>)
 8014546:	2201      	movs	r2, #1
 8014548:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801454a:	4b23      	ldr	r3, [pc, #140]	; (80145d8 <fm_menu_show_acm_rate+0xe0>)
 801454c:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801454e:	2301      	movs	r3, #1
 8014550:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014552:	f107 030b 	add.w	r3, r7, #11
 8014556:	2200      	movs	r2, #0
 8014558:	4619      	mov	r1, r3
 801455a:	4820      	ldr	r0, [pc, #128]	; (80145dc <fm_menu_show_acm_rate+0xe4>)
 801455c:	f7fa f91c 	bl	800e798 <_txe_queue_send>
        break;
 8014560:	e025      	b.n	80145ae <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014562:	4b1c      	ldr	r3, [pc, #112]	; (80145d4 <fm_menu_show_acm_rate+0xdc>)
 8014564:	2201      	movs	r2, #1
 8014566:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014568:	4b1d      	ldr	r3, [pc, #116]	; (80145e0 <fm_menu_show_acm_rate+0xe8>)
 801456a:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801456c:	2301      	movs	r3, #1
 801456e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014570:	f107 030b 	add.w	r3, r7, #11
 8014574:	2200      	movs	r2, #0
 8014576:	4619      	mov	r1, r3
 8014578:	4818      	ldr	r0, [pc, #96]	; (80145dc <fm_menu_show_acm_rate+0xe4>)
 801457a:	f7fa f90d 	bl	800e798 <_txe_queue_send>
        break;
 801457e:	e016      	b.n	80145ae <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 8014580:	f7fb fa2e 	bl	800f9e0 <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 8014584:	2301      	movs	r3, #1
 8014586:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014588:	f107 030b 	add.w	r3, r7, #11
 801458c:	2200      	movs	r2, #0
 801458e:	4619      	mov	r1, r3
 8014590:	4812      	ldr	r0, [pc, #72]	; (80145dc <fm_menu_show_acm_rate+0xe4>)
 8014592:	f7fa f901 	bl	800e798 <_txe_queue_send>
        break;
 8014596:	e00a      	b.n	80145ae <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014598:	2301      	movs	r3, #1
 801459a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801459c:	f107 030b 	add.w	r3, r7, #11
 80145a0:	2200      	movs	r2, #0
 80145a2:	4619      	mov	r1, r3
 80145a4:	480d      	ldr	r0, [pc, #52]	; (80145dc <fm_menu_show_acm_rate+0xe4>)
 80145a6:	f7fa f8f7 	bl	800e798 <_txe_queue_send>
        break;
 80145aa:	e000      	b.n	80145ae <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80145ac:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80145ae:	4b09      	ldr	r3, [pc, #36]	; (80145d4 <fm_menu_show_acm_rate+0xdc>)
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	2b01      	cmp	r3, #1
 80145b4:	d105      	bne.n	80145c2 <fm_menu_show_acm_rate+0xca>
    {
        new_entry = 1;
 80145b6:	4b06      	ldr	r3, [pc, #24]	; (80145d0 <fm_menu_show_acm_rate+0xd8>)
 80145b8:	2201      	movs	r2, #1
 80145ba:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80145bc:	4b05      	ldr	r3, [pc, #20]	; (80145d4 <fm_menu_show_acm_rate+0xdc>)
 80145be:	2200      	movs	r2, #0
 80145c0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80145c2:	68fb      	ldr	r3, [r7, #12]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	080144f9 	.word	0x080144f9
 80145d0:	2000014b 	.word	0x2000014b
 80145d4:	20001e30 	.word	0x20001e30
 80145d8:	080148c9 	.word	0x080148c9
 80145dc:	20001388 	.word	0x20001388
 80145e0:	080145e5 	.word	0x080145e5

080145e4 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	4603      	mov	r3, r0
 80145ec:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80145ee:	4b31      	ldr	r3, [pc, #196]	; (80146b4 <fm_menu_show_acm_temp+0xd0>)
 80145f0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80145f2:	4b31      	ldr	r3, [pc, #196]	; (80146b8 <fm_menu_show_acm_temp+0xd4>)
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	2b01      	cmp	r3, #1
 80145f8:	d104      	bne.n	8014604 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 80145fa:	f7fb fbb2 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80145fe:	4b2e      	ldr	r3, [pc, #184]	; (80146b8 <fm_menu_show_acm_temp+0xd4>)
 8014600:	2200      	movs	r2, #0
 8014602:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 8014604:	f7fb fb55 	bl	800fcb2 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 8014608:	f7fb ff37 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	3b01      	subs	r3, #1
 8014610:	2b04      	cmp	r3, #4
 8014612:	d83f      	bhi.n	8014694 <fm_menu_show_acm_temp+0xb0>
 8014614:	a201      	add	r2, pc, #4	; (adr r2, 801461c <fm_menu_show_acm_temp+0x38>)
 8014616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801461a:	bf00      	nop
 801461c:	08014695 	.word	0x08014695
 8014620:	08014631 	.word	0x08014631
 8014624:	0801464f 	.word	0x0801464f
 8014628:	0801466d 	.word	0x0801466d
 801462c:	08014681 	.word	0x08014681
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014630:	4b22      	ldr	r3, [pc, #136]	; (80146bc <fm_menu_show_acm_temp+0xd8>)
 8014632:	2201      	movs	r2, #1
 8014634:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014636:	4b22      	ldr	r3, [pc, #136]	; (80146c0 <fm_menu_show_acm_temp+0xdc>)
 8014638:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801463a:	2301      	movs	r3, #1
 801463c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801463e:	f107 030b 	add.w	r3, r7, #11
 8014642:	2200      	movs	r2, #0
 8014644:	4619      	mov	r1, r3
 8014646:	481f      	ldr	r0, [pc, #124]	; (80146c4 <fm_menu_show_acm_temp+0xe0>)
 8014648:	f7fa f8a6 	bl	800e798 <_txe_queue_send>
        break;
 801464c:	e023      	b.n	8014696 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801464e:	4b1b      	ldr	r3, [pc, #108]	; (80146bc <fm_menu_show_acm_temp+0xd8>)
 8014650:	2201      	movs	r2, #1
 8014652:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8014654:	4b1c      	ldr	r3, [pc, #112]	; (80146c8 <fm_menu_show_acm_temp+0xe4>)
 8014656:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014658:	2301      	movs	r3, #1
 801465a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801465c:	f107 030b 	add.w	r3, r7, #11
 8014660:	2200      	movs	r2, #0
 8014662:	4619      	mov	r1, r3
 8014664:	4817      	ldr	r0, [pc, #92]	; (80146c4 <fm_menu_show_acm_temp+0xe0>)
 8014666:	f7fa f897 	bl	800e798 <_txe_queue_send>
        break;
 801466a:	e014      	b.n	8014696 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801466c:	2301      	movs	r3, #1
 801466e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014670:	f107 030b 	add.w	r3, r7, #11
 8014674:	2200      	movs	r2, #0
 8014676:	4619      	mov	r1, r3
 8014678:	4812      	ldr	r0, [pc, #72]	; (80146c4 <fm_menu_show_acm_temp+0xe0>)
 801467a:	f7fa f88d 	bl	800e798 <_txe_queue_send>
        break;
 801467e:	e00a      	b.n	8014696 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014680:	2301      	movs	r3, #1
 8014682:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014684:	f107 030b 	add.w	r3, r7, #11
 8014688:	2200      	movs	r2, #0
 801468a:	4619      	mov	r1, r3
 801468c:	480d      	ldr	r0, [pc, #52]	; (80146c4 <fm_menu_show_acm_temp+0xe0>)
 801468e:	f7fa f883 	bl	800e798 <_txe_queue_send>
        break;
 8014692:	e000      	b.n	8014696 <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014694:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014696:	4b09      	ldr	r3, [pc, #36]	; (80146bc <fm_menu_show_acm_temp+0xd8>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d105      	bne.n	80146aa <fm_menu_show_acm_temp+0xc6>
    {
        new_entry = 1;
 801469e:	4b06      	ldr	r3, [pc, #24]	; (80146b8 <fm_menu_show_acm_temp+0xd4>)
 80146a0:	2201      	movs	r2, #1
 80146a2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80146a4:	4b05      	ldr	r3, [pc, #20]	; (80146bc <fm_menu_show_acm_temp+0xd8>)
 80146a6:	2200      	movs	r2, #0
 80146a8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80146aa:	68fb      	ldr	r3, [r7, #12]
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3710      	adds	r7, #16
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	080145e5 	.word	0x080145e5
 80146b8:	2000014c 	.word	0x2000014c
 80146bc:	20001e31 	.word	0x20001e31
 80146c0:	080144f9 	.word	0x080144f9
 80146c4:	20001388 	.word	0x20001388
 80146c8:	080146cd 	.word	0x080146cd

080146cc <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	4603      	mov	r3, r0
 80146d4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80146d6:	4b31      	ldr	r3, [pc, #196]	; (801479c <fm_menu_show_date_hour+0xd0>)
 80146d8:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80146da:	4b31      	ldr	r3, [pc, #196]	; (80147a0 <fm_menu_show_date_hour+0xd4>)
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d104      	bne.n	80146ec <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 80146e2:	f7fb fb3e 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80146e6:	4b2e      	ldr	r3, [pc, #184]	; (80147a0 <fm_menu_show_date_hour+0xd4>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 80146ec:	79fb      	ldrb	r3, [r7, #7]
 80146ee:	2200      	movs	r2, #0
 80146f0:	4619      	mov	r1, r3
 80146f2:	2000      	movs	r0, #0
 80146f4:	f7fb fb3c 	bl	800fd70 <fm_lcd_date_hour>

    fm_lcd_refresh();
 80146f8:	f7fb febf 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	3b01      	subs	r3, #1
 8014700:	2b04      	cmp	r3, #4
 8014702:	d83a      	bhi.n	801477a <fm_menu_show_date_hour+0xae>
 8014704:	a201      	add	r2, pc, #4	; (adr r2, 801470c <fm_menu_show_date_hour+0x40>)
 8014706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470a:	bf00      	nop
 801470c:	0801477b 	.word	0x0801477b
 8014710:	08014721 	.word	0x08014721
 8014714:	0801473f 	.word	0x0801473f
 8014718:	08014753 	.word	0x08014753
 801471c:	08014767 	.word	0x08014767
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014720:	4b20      	ldr	r3, [pc, #128]	; (80147a4 <fm_menu_show_date_hour+0xd8>)
 8014722:	2201      	movs	r2, #1
 8014724:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014726:	4b20      	ldr	r3, [pc, #128]	; (80147a8 <fm_menu_show_date_hour+0xdc>)
 8014728:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801472a:	2301      	movs	r3, #1
 801472c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801472e:	f107 030b 	add.w	r3, r7, #11
 8014732:	2200      	movs	r2, #0
 8014734:	4619      	mov	r1, r3
 8014736:	481d      	ldr	r0, [pc, #116]	; (80147ac <fm_menu_show_date_hour+0xe0>)
 8014738:	f7fa f82e 	bl	800e798 <_txe_queue_send>
        break;
 801473c:	e01e      	b.n	801477c <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 801473e:	2301      	movs	r3, #1
 8014740:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014742:	f107 030b 	add.w	r3, r7, #11
 8014746:	2200      	movs	r2, #0
 8014748:	4619      	mov	r1, r3
 801474a:	4818      	ldr	r0, [pc, #96]	; (80147ac <fm_menu_show_date_hour+0xe0>)
 801474c:	f7fa f824 	bl	800e798 <_txe_queue_send>
        break;
 8014750:	e014      	b.n	801477c <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014752:	2301      	movs	r3, #1
 8014754:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014756:	f107 030b 	add.w	r3, r7, #11
 801475a:	2200      	movs	r2, #0
 801475c:	4619      	mov	r1, r3
 801475e:	4813      	ldr	r0, [pc, #76]	; (80147ac <fm_menu_show_date_hour+0xe0>)
 8014760:	f7fa f81a 	bl	800e798 <_txe_queue_send>
        break;
 8014764:	e00a      	b.n	801477c <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014766:	2301      	movs	r3, #1
 8014768:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801476a:	f107 030b 	add.w	r3, r7, #11
 801476e:	2200      	movs	r2, #0
 8014770:	4619      	mov	r1, r3
 8014772:	480e      	ldr	r0, [pc, #56]	; (80147ac <fm_menu_show_date_hour+0xe0>)
 8014774:	f7fa f810 	bl	800e798 <_txe_queue_send>
        break;
 8014778:	e000      	b.n	801477c <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801477a:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
#endif

    if (new_exit == 1)
 801477c:	4b09      	ldr	r3, [pc, #36]	; (80147a4 <fm_menu_show_date_hour+0xd8>)
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d105      	bne.n	8014790 <fm_menu_show_date_hour+0xc4>
    {
        new_entry = 1;
 8014784:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <fm_menu_show_date_hour+0xd4>)
 8014786:	2201      	movs	r2, #1
 8014788:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801478a:	4b06      	ldr	r3, [pc, #24]	; (80147a4 <fm_menu_show_date_hour+0xd8>)
 801478c:	2200      	movs	r2, #0
 801478e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014790:	68fb      	ldr	r3, [r7, #12]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	080146cd 	.word	0x080146cd
 80147a0:	2000014d 	.word	0x2000014d
 80147a4:	20001e32 	.word	0x20001e32
 80147a8:	080145e5 	.word	0x080145e5
 80147ac:	20001388 	.word	0x20001388

080147b0 <fm_menu_show_init>:
 * encendiendo todos los segmentos y la backlight por 3 segundos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	4603      	mov	r3, r0
 80147b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 80147ba:	231e      	movs	r3, #30
 80147bc:	72fb      	strb	r3, [r7, #11]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 80147be:	4b3b      	ldr	r3, [pc, #236]	; (80148ac <fm_menu_show_init+0xfc>)
 80147c0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80147c2:	4b3b      	ldr	r3, [pc, #236]	; (80148b0 <fm_menu_show_init+0x100>)
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d10c      	bne.n	80147e4 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 80147ca:	2200      	movs	r2, #0
 80147cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80147d0:	4838      	ldr	r0, [pc, #224]	; (80148b4 <fm_menu_show_init+0x104>)
 80147d2:	f7ef ff05 	bl	80045e0 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 80147d6:	f7fb fcbc 	bl	8010152 <fm_lcd_init>
        fm_lcd_clear();
 80147da:	f7fb fac2 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80147de:	4b34      	ldr	r3, [pc, #208]	; (80148b0 <fm_menu_show_init+0x100>)
 80147e0:	2200      	movs	r2, #0
 80147e2:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 80147e4:	20ff      	movs	r0, #255	; 0xff
 80147e6:	f7fe f927 	bl	8012a38 <pcf8553_write_all>

    switch (event_id)
 80147ea:	79fb      	ldrb	r3, [r7, #7]
 80147ec:	3b01      	subs	r3, #1
 80147ee:	2b04      	cmp	r3, #4
 80147f0:	d848      	bhi.n	8014884 <fm_menu_show_init+0xd4>
 80147f2:	a201      	add	r2, pc, #4	; (adr r2, 80147f8 <fm_menu_show_init+0x48>)
 80147f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f8:	08014831 	.word	0x08014831
 80147fc:	08014885 	.word	0x08014885
 8014800:	08014885 	.word	0x08014885
 8014804:	0801480d 	.word	0x0801480d
 8014808:	08014885 	.word	0x08014885
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 801480c:	482a      	ldr	r0, [pc, #168]	; (80148b8 <fm_menu_show_init+0x108>)
 801480e:	f7f9 ff5b 	bl	800e6c8 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014812:	4b2a      	ldr	r3, [pc, #168]	; (80148bc <fm_menu_show_init+0x10c>)
 8014814:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014816:	2301      	movs	r3, #1
 8014818:	72bb      	strb	r3, [r7, #10]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801481a:	f107 030a 	add.w	r3, r7, #10
 801481e:	2200      	movs	r2, #0
 8014820:	4619      	mov	r1, r3
 8014822:	4825      	ldr	r0, [pc, #148]	; (80148b8 <fm_menu_show_init+0x108>)
 8014824:	f7f9 ffb8 	bl	800e798 <_txe_queue_send>
            new_exit = 1;
 8014828:	4b25      	ldr	r3, [pc, #148]	; (80148c0 <fm_menu_show_init+0x110>)
 801482a:	2201      	movs	r2, #1
 801482c:	701a      	strb	r2, [r3, #0]
        break;
 801482e:	e02a      	b.n	8014886 <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014830:	4b24      	ldr	r3, [pc, #144]	; (80148c4 <fm_menu_show_init+0x114>)
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	7afa      	ldrb	r2, [r7, #11]
 8014836:	429a      	cmp	r2, r3
 8014838:	d912      	bls.n	8014860 <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 801483a:	2064      	movs	r0, #100	; 0x64
 801483c:	f7ed f9f8 	bl	8001c30 <HAL_Delay>
                counter++;
 8014840:	4b20      	ldr	r3, [pc, #128]	; (80148c4 <fm_menu_show_init+0x114>)
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	3301      	adds	r3, #1
 8014846:	b2da      	uxtb	r2, r3
 8014848:	4b1e      	ldr	r3, [pc, #120]	; (80148c4 <fm_menu_show_init+0x114>)
 801484a:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 801484c:	2301      	movs	r3, #1
 801484e:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014850:	f107 030a 	add.w	r3, r7, #10
 8014854:	2200      	movs	r2, #0
 8014856:	4619      	mov	r1, r3
 8014858:	4817      	ldr	r0, [pc, #92]	; (80148b8 <fm_menu_show_init+0x108>)
 801485a:	f7f9 ff9d 	bl	800e798 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801485e:	e012      	b.n	8014886 <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 8014860:	4815      	ldr	r0, [pc, #84]	; (80148b8 <fm_menu_show_init+0x108>)
 8014862:	f7f9 ff31 	bl	800e6c8 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014866:	4b15      	ldr	r3, [pc, #84]	; (80148bc <fm_menu_show_init+0x10c>)
 8014868:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 801486a:	2301      	movs	r3, #1
 801486c:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801486e:	f107 030a 	add.w	r3, r7, #10
 8014872:	2200      	movs	r2, #0
 8014874:	4619      	mov	r1, r3
 8014876:	4810      	ldr	r0, [pc, #64]	; (80148b8 <fm_menu_show_init+0x108>)
 8014878:	f7f9 ff8e 	bl	800e798 <_txe_queue_send>
                new_exit = 1;
 801487c:	4b10      	ldr	r3, [pc, #64]	; (80148c0 <fm_menu_show_init+0x110>)
 801487e:	2201      	movs	r2, #1
 8014880:	701a      	strb	r2, [r3, #0]
        break;
 8014882:	e000      	b.n	8014886 <fm_menu_show_init+0xd6>
        default:
        break;
 8014884:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014886:	4b0e      	ldr	r3, [pc, #56]	; (80148c0 <fm_menu_show_init+0x110>)
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	2b01      	cmp	r3, #1
 801488c:	d108      	bne.n	80148a0 <fm_menu_show_init+0xf0>
    {
        counter = 0;
 801488e:	4b0d      	ldr	r3, [pc, #52]	; (80148c4 <fm_menu_show_init+0x114>)
 8014890:	2200      	movs	r2, #0
 8014892:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014894:	4b06      	ldr	r3, [pc, #24]	; (80148b0 <fm_menu_show_init+0x100>)
 8014896:	2201      	movs	r2, #1
 8014898:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801489a:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <fm_menu_show_init+0x110>)
 801489c:	2200      	movs	r2, #0
 801489e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80148a0:	68fb      	ldr	r3, [r7, #12]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	080147b1 	.word	0x080147b1
 80148b0:	2000014e 	.word	0x2000014e
 80148b4:	42020800 	.word	0x42020800
 80148b8:	20001388 	.word	0x20001388
 80148bc:	080149b1 	.word	0x080149b1
 80148c0:	20001e33 	.word	0x20001e33
 80148c4:	20001e34 	.word	0x20001e34

080148c8 <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	4603      	mov	r3, r0
 80148d0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80148d2:	4b31      	ldr	r3, [pc, #196]	; (8014998 <fm_menu_show_ttl_rate+0xd0>)
 80148d4:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80148d6:	4b31      	ldr	r3, [pc, #196]	; (801499c <fm_menu_show_ttl_rate+0xd4>)
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d104      	bne.n	80148e8 <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 80148de:	f7fb fa40 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80148e2:	4b2e      	ldr	r3, [pc, #184]	; (801499c <fm_menu_show_ttl_rate+0xd4>)
 80148e4:	2200      	movs	r2, #0
 80148e6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 80148e8:	f7fb fdcd 	bl	8010486 <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 80148ec:	f7fb fdc5 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80148f0:	79fb      	ldrb	r3, [r7, #7]
 80148f2:	3b01      	subs	r3, #1
 80148f4:	2b04      	cmp	r3, #4
 80148f6:	d83f      	bhi.n	8014978 <fm_menu_show_ttl_rate+0xb0>
 80148f8:	a201      	add	r2, pc, #4	; (adr r2, 8014900 <fm_menu_show_ttl_rate+0x38>)
 80148fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fe:	bf00      	nop
 8014900:	08014979 	.word	0x08014979
 8014904:	08014915 	.word	0x08014915
 8014908:	08014929 	.word	0x08014929
 801490c:	08014947 	.word	0x08014947
 8014910:	0801495b 	.word	0x0801495b
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 8014914:	2301      	movs	r3, #1
 8014916:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014918:	f107 030b 	add.w	r3, r7, #11
 801491c:	2200      	movs	r2, #0
 801491e:	4619      	mov	r1, r3
 8014920:	481f      	ldr	r0, [pc, #124]	; (80149a0 <fm_menu_show_ttl_rate+0xd8>)
 8014922:	f7f9 ff39 	bl	800e798 <_txe_queue_send>
        break;
 8014926:	e028      	b.n	801497a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014928:	4b1e      	ldr	r3, [pc, #120]	; (80149a4 <fm_menu_show_ttl_rate+0xdc>)
 801492a:	2201      	movs	r2, #1
 801492c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801492e:	4b1e      	ldr	r3, [pc, #120]	; (80149a8 <fm_menu_show_ttl_rate+0xe0>)
 8014930:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014932:	2301      	movs	r3, #1
 8014934:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014936:	f107 030b 	add.w	r3, r7, #11
 801493a:	2200      	movs	r2, #0
 801493c:	4619      	mov	r1, r3
 801493e:	4818      	ldr	r0, [pc, #96]	; (80149a0 <fm_menu_show_ttl_rate+0xd8>)
 8014940:	f7f9 ff2a 	bl	800e798 <_txe_queue_send>
        break;
 8014944:	e019      	b.n	801497a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014946:	2301      	movs	r3, #1
 8014948:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801494a:	f107 030b 	add.w	r3, r7, #11
 801494e:	2200      	movs	r2, #0
 8014950:	4619      	mov	r1, r3
 8014952:	4813      	ldr	r0, [pc, #76]	; (80149a0 <fm_menu_show_ttl_rate+0xd8>)
 8014954:	f7f9 ff20 	bl	800e798 <_txe_queue_send>
        break;
 8014958:	e00f      	b.n	801497a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801495a:	4b12      	ldr	r3, [pc, #72]	; (80149a4 <fm_menu_show_ttl_rate+0xdc>)
 801495c:	2201      	movs	r2, #1
 801495e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8014960:	4b12      	ldr	r3, [pc, #72]	; (80149ac <fm_menu_show_ttl_rate+0xe4>)
 8014962:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014964:	2301      	movs	r3, #1
 8014966:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014968:	f107 030b 	add.w	r3, r7, #11
 801496c:	2200      	movs	r2, #0
 801496e:	4619      	mov	r1, r3
 8014970:	480b      	ldr	r0, [pc, #44]	; (80149a0 <fm_menu_show_ttl_rate+0xd8>)
 8014972:	f7f9 ff11 	bl	800e798 <_txe_queue_send>
        break;
 8014976:	e000      	b.n	801497a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014978:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801497a:	4b0a      	ldr	r3, [pc, #40]	; (80149a4 <fm_menu_show_ttl_rate+0xdc>)
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	2b01      	cmp	r3, #1
 8014980:	d105      	bne.n	801498e <fm_menu_show_ttl_rate+0xc6>
    {
        new_entry = 1;
 8014982:	4b06      	ldr	r3, [pc, #24]	; (801499c <fm_menu_show_ttl_rate+0xd4>)
 8014984:	2201      	movs	r2, #1
 8014986:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014988:	4b06      	ldr	r3, [pc, #24]	; (80149a4 <fm_menu_show_ttl_rate+0xdc>)
 801498a:	2200      	movs	r2, #0
 801498c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801498e:	68fb      	ldr	r3, [r7, #12]
}
 8014990:	4618      	mov	r0, r3
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	080148c9 	.word	0x080148c9
 801499c:	2000014f 	.word	0x2000014f
 80149a0:	20001388 	.word	0x20001388
 80149a4:	20001e35 	.word	0x20001e35
 80149a8:	080144f9 	.word	0x080144f9
 80149ac:	08013b91 	.word	0x08013b91

080149b0 <fm_menu_show_version>:
 * caudales.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	4603      	mov	r3, r0
 80149b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 80149ba:	231e      	movs	r3, #30
 80149bc:	72fb      	strb	r3, [r7, #11]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80149be:	4b3c      	ldr	r3, [pc, #240]	; (8014ab0 <fm_menu_show_version+0x100>)
 80149c0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80149c2:	4b3c      	ldr	r3, [pc, #240]	; (8014ab4 <fm_menu_show_version+0x104>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d104      	bne.n	80149d4 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 80149ca:	f7fb f9ca 	bl	800fd62 <fm_lcd_clear>
        new_entry = 0;
 80149ce:	4b39      	ldr	r3, [pc, #228]	; (8014ab4 <fm_menu_show_version+0x104>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 80149d4:	2105      	movs	r1, #5
 80149d6:	2004      	movs	r0, #4
 80149d8:	f7fb fefc 	bl	80107d4 <fm_lcd_version>
    fm_lcd_refresh();
 80149dc:	f7fb fd4d 	bl	801047a <fm_lcd_refresh>

    switch (event_id)
 80149e0:	79fb      	ldrb	r3, [r7, #7]
 80149e2:	3b01      	subs	r3, #1
 80149e4:	2b04      	cmp	r3, #4
 80149e6:	d849      	bhi.n	8014a7c <fm_menu_show_version+0xcc>
 80149e8:	a201      	add	r2, pc, #4	; (adr r2, 80149f0 <fm_menu_show_version+0x40>)
 80149ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ee:	bf00      	nop
 80149f0:	08014a29 	.word	0x08014a29
 80149f4:	08014a7d 	.word	0x08014a7d
 80149f8:	08014a7d 	.word	0x08014a7d
 80149fc:	08014a05 	.word	0x08014a05
 8014a00:	08014a7d 	.word	0x08014a7d
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014a04:	482c      	ldr	r0, [pc, #176]	; (8014ab8 <fm_menu_show_version+0x108>)
 8014a06:	f7f9 fe5f 	bl	800e6c8 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014a0a:	4b2c      	ldr	r3, [pc, #176]	; (8014abc <fm_menu_show_version+0x10c>)
 8014a0c:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	72bb      	strb	r3, [r7, #10]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a12:	f107 030a 	add.w	r3, r7, #10
 8014a16:	2200      	movs	r2, #0
 8014a18:	4619      	mov	r1, r3
 8014a1a:	4827      	ldr	r0, [pc, #156]	; (8014ab8 <fm_menu_show_version+0x108>)
 8014a1c:	f7f9 febc 	bl	800e798 <_txe_queue_send>
            new_exit = 1;
 8014a20:	4b27      	ldr	r3, [pc, #156]	; (8014ac0 <fm_menu_show_version+0x110>)
 8014a22:	2201      	movs	r2, #1
 8014a24:	701a      	strb	r2, [r3, #0]
        break;
 8014a26:	e02a      	b.n	8014a7e <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014a28:	4b26      	ldr	r3, [pc, #152]	; (8014ac4 <fm_menu_show_version+0x114>)
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	7afa      	ldrb	r2, [r7, #11]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d912      	bls.n	8014a58 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014a32:	2064      	movs	r0, #100	; 0x64
 8014a34:	f7ed f8fc 	bl	8001c30 <HAL_Delay>
                counter++;
 8014a38:	4b22      	ldr	r3, [pc, #136]	; (8014ac4 <fm_menu_show_version+0x114>)
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	4b20      	ldr	r3, [pc, #128]	; (8014ac4 <fm_menu_show_version+0x114>)
 8014a42:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014a44:	2301      	movs	r3, #1
 8014a46:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a48:	f107 030a 	add.w	r3, r7, #10
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	4619      	mov	r1, r3
 8014a50:	4819      	ldr	r0, [pc, #100]	; (8014ab8 <fm_menu_show_version+0x108>)
 8014a52:	f7f9 fea1 	bl	800e798 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014a56:	e012      	b.n	8014a7e <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014a58:	4817      	ldr	r0, [pc, #92]	; (8014ab8 <fm_menu_show_version+0x108>)
 8014a5a:	f7f9 fe35 	bl	800e6c8 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014a5e:	4b17      	ldr	r3, [pc, #92]	; (8014abc <fm_menu_show_version+0x10c>)
 8014a60:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8014a62:	2301      	movs	r3, #1
 8014a64:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a66:	f107 030a 	add.w	r3, r7, #10
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4812      	ldr	r0, [pc, #72]	; (8014ab8 <fm_menu_show_version+0x108>)
 8014a70:	f7f9 fe92 	bl	800e798 <_txe_queue_send>
                new_exit = 1;
 8014a74:	4b12      	ldr	r3, [pc, #72]	; (8014ac0 <fm_menu_show_version+0x110>)
 8014a76:	2201      	movs	r2, #1
 8014a78:	701a      	strb	r2, [r3, #0]
        break;
 8014a7a:	e000      	b.n	8014a7e <fm_menu_show_version+0xce>
        default:
        break;
 8014a7c:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014a7e:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <fm_menu_show_version+0x110>)
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d10e      	bne.n	8014aa4 <fm_menu_show_version+0xf4>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8014a86:	2201      	movs	r2, #1
 8014a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014a8c:	480e      	ldr	r0, [pc, #56]	; (8014ac8 <fm_menu_show_version+0x118>)
 8014a8e:	f7ef fda7 	bl	80045e0 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 8014a92:	4b0c      	ldr	r3, [pc, #48]	; (8014ac4 <fm_menu_show_version+0x114>)
 8014a94:	2200      	movs	r2, #0
 8014a96:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014a98:	4b06      	ldr	r3, [pc, #24]	; (8014ab4 <fm_menu_show_version+0x104>)
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014a9e:	4b08      	ldr	r3, [pc, #32]	; (8014ac0 <fm_menu_show_version+0x110>)
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014aa4:	68fb      	ldr	r3, [r7, #12]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	080149b1 	.word	0x080149b1
 8014ab4:	20000150 	.word	0x20000150
 8014ab8:	20001388 	.word	0x20001388
 8014abc:	080148c9 	.word	0x080148c9
 8014ac0:	20001e36 	.word	0x20001e36
 8014ac4:	20001e37 	.word	0x20001e37
 8014ac8:	42020800 	.word	0x42020800

08014acc <fm_temp_stm32_format>:
 * grados celcius.
 * @param None
 * @retval Temperatura interna del micro en grados celcius.
 */
int fm_temp_stm32_format()
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014ad2:	f000 f82f 	bl	8014b34 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014ad6:	4813      	ldr	r0, [pc, #76]	; (8014b24 <fm_temp_stm32_format+0x58>)
 8014ad8:	f7ee f898 	bl	8002c0c <HAL_ADC_GetValue>
 8014adc:	4603      	mov	r3, r0
 8014ade:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014ae0:	88fb      	ldrh	r3, [r7, #6]
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014ae8:	fb02 f303 	mul.w	r3, r2, r3
 8014aec:	461a      	mov	r2, r3
 8014aee:	4b0e      	ldr	r3, [pc, #56]	; (8014b28 <fm_temp_stm32_format+0x5c>)
 8014af0:	fba3 2302 	umull	r2, r3, r3, r2
 8014af4:	099b      	lsrs	r3, r3, #6
 8014af6:	461a      	mov	r2, r3
 8014af8:	4b0c      	ldr	r3, [pc, #48]	; (8014b2c <fm_temp_stm32_format+0x60>)
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	2264      	movs	r2, #100	; 0x64
 8014b00:	fb03 f202 	mul.w	r2, r3, r2
 8014b04:	4b0a      	ldr	r3, [pc, #40]	; (8014b30 <fm_temp_stm32_format+0x64>)
 8014b06:	881b      	ldrh	r3, [r3, #0]
 8014b08:	4619      	mov	r1, r3
 8014b0a:	4b08      	ldr	r3, [pc, #32]	; (8014b2c <fm_temp_stm32_format+0x60>)
 8014b0c:	881b      	ldrh	r3, [r3, #0]
 8014b0e:	1acb      	subs	r3, r1, r3
 8014b10:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b14:	331e      	adds	r3, #30
 8014b16:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014b18:	683b      	ldr	r3, [r7, #0]
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	200013cc 	.word	0x200013cc
 8014b28:	057619f1 	.word	0x057619f1
 8014b2c:	0bfa0710 	.word	0x0bfa0710
 8014b30:	0bfa0742 	.word	0x0bfa0742

08014b34 <fm_temp_stm32_get>:
 * @brief Función que lee el ADC 1 asociado al sensor de temperatura.
 * @param None
 * @retval None
 */
void fm_temp_stm32_get()
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014b3a:	2364      	movs	r3, #100	; 0x64
 8014b3c:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8014b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b42:	2100      	movs	r1, #0
 8014b44:	4808      	ldr	r0, [pc, #32]	; (8014b68 <fm_temp_stm32_get+0x34>)
 8014b46:	f7ef f911 	bl	8003d6c <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014b4a:	4807      	ldr	r0, [pc, #28]	; (8014b68 <fm_temp_stm32_get+0x34>)
 8014b4c:	f7ed fed0 	bl	80028f0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014b50:	79fb      	ldrb	r3, [r7, #7]
 8014b52:	4619      	mov	r1, r3
 8014b54:	4804      	ldr	r0, [pc, #16]	; (8014b68 <fm_temp_stm32_get+0x34>)
 8014b56:	f7ed ff73 	bl	8002a40 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014b5a:	4803      	ldr	r0, [pc, #12]	; (8014b68 <fm_temp_stm32_get+0x34>)
 8014b5c:	f7ed ff3c 	bl	80029d8 <HAL_ADC_Stop>
}
 8014b60:	bf00      	nop
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	200013cc 	.word	0x200013cc

08014b6c <fm_version_get>:
 * @brief Esta función devuelve la versión actual del firmware.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b088      	sub	sp, #32
 8014b70:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014b76:	4638      	mov	r0, r7
 8014b78:	2308      	movs	r3, #8
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	2302      	movs	r3, #2
 8014b7e:	2201      	movs	r2, #1
 8014b80:	4906      	ldr	r1, [pc, #24]	; (8014b9c <fm_version_get+0x30>)
 8014b82:	f000 f9bb 	bl	8014efc <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014b86:	463b      	mov	r3, r7
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f000 f94d 	bl	8014e28 <atoi>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	617b      	str	r3, [r7, #20]

    return (version);
 8014b92:	697b      	ldr	r3, [r7, #20]
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3718      	adds	r7, #24
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	080159d8 	.word	0x080159d8

08014ba0 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ba2:	b093      	sub	sp, #76	; 0x4c
 8014ba4:	af06      	add	r7, sp, #24
 8014ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014ba8:	4c1c      	ldr	r4, [pc, #112]	; (8014c1c <fmc_get_acm+0x7c>)
 8014baa:	f107 0308 	add.w	r3, r7, #8
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fa fa26 	bl	800f000 <fm_factory_get_acm>
 8014bb4:	4625      	mov	r5, r4
 8014bb6:	f107 0408 	add.w	r4, r7, #8
 8014bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bc2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014bc6:	4b15      	ldr	r3, [pc, #84]	; (8014c1c <fmc_get_acm+0x7c>)
 8014bc8:	607b      	str	r3, [r7, #4]
 8014bca:	f107 0c08 	add.w	ip, r7, #8
 8014bce:	4e13      	ldr	r6, [pc, #76]	; (8014c1c <fmc_get_acm+0x7c>)
 8014bd0:	466d      	mov	r5, sp
 8014bd2:	f106 0408 	add.w	r4, r6, #8
 8014bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bde:	e885 0003 	stmia.w	r5, {r0, r1}
 8014be2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014be6:	4660      	mov	r0, ip
 8014be8:	f000 f8c0 	bl	8014d6c <fmc_totalizer_init>
 8014bec:	687d      	ldr	r5, [r7, #4]
 8014bee:	f107 0408 	add.w	r4, r7, #8
 8014bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c00:	4a06      	ldr	r2, [pc, #24]	; (8014c1c <fmc_get_acm+0x7c>)
 8014c02:	461c      	mov	r4, r3
 8014c04:	4615      	mov	r5, r2
 8014c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c14:	3734      	adds	r7, #52	; 0x34
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	20001e38 	.word	0x20001e38

08014c20 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval Caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c22:	b093      	sub	sp, #76	; 0x4c
 8014c24:	af06      	add	r7, sp, #24
 8014c26:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014c28:	4c1c      	ldr	r4, [pc, #112]	; (8014c9c <fmc_get_rate+0x7c>)
 8014c2a:	f107 0308 	add.w	r3, r7, #8
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7fa fb06 	bl	800f240 <fm_factory_get_rate>
 8014c34:	4625      	mov	r5, r4
 8014c36:	f107 0408 	add.w	r4, r7, #8
 8014c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014c46:	4b15      	ldr	r3, [pc, #84]	; (8014c9c <fmc_get_rate+0x7c>)
 8014c48:	607b      	str	r3, [r7, #4]
 8014c4a:	f107 0c08 	add.w	ip, r7, #8
 8014c4e:	4e13      	ldr	r6, [pc, #76]	; (8014c9c <fmc_get_rate+0x7c>)
 8014c50:	466d      	mov	r5, sp
 8014c52:	f106 0408 	add.w	r4, r6, #8
 8014c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c62:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c66:	4660      	mov	r0, ip
 8014c68:	f000 f880 	bl	8014d6c <fmc_totalizer_init>
 8014c6c:	687d      	ldr	r5, [r7, #4]
 8014c6e:	f107 0408 	add.w	r4, r7, #8
 8014c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c80:	4a06      	ldr	r2, [pc, #24]	; (8014c9c <fmc_get_rate+0x7c>)
 8014c82:	461c      	mov	r4, r3
 8014c84:	4615      	mov	r5, r2
 8014c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c94:	3734      	adds	r7, #52	; 0x34
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	20001e58 	.word	0x20001e58

08014ca0 <fmc_get_stm32_temp>:
 * @param  None
 * @retval Temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b088      	sub	sp, #32
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014ca8:	f7ff ff10 	bl	8014acc <fm_temp_stm32_format>
 8014cac:	4603      	mov	r3, r0
 8014cae:	461a      	mov	r2, r3
 8014cb0:	4b0d      	ldr	r3, [pc, #52]	; (8014ce8 <fmc_get_stm32_temp+0x48>)
 8014cb2:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014cb4:	f107 0308 	add.w	r3, r7, #8
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7fa fad7 	bl	800f26c <fm_factory_get_temp>
 8014cbe:	7b3a      	ldrb	r2, [r7, #12]
 8014cc0:	4b09      	ldr	r3, [pc, #36]	; (8014ce8 <fmc_get_stm32_temp+0x48>)
 8014cc2:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014cc4:	f107 0314 	add.w	r3, r7, #20
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7fa facf 	bl	800f26c <fm_factory_get_temp>
 8014cce:	7f3a      	ldrb	r2, [r7, #28]
 8014cd0:	4b05      	ldr	r3, [pc, #20]	; (8014ce8 <fmc_get_stm32_temp+0x48>)
 8014cd2:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	4a04      	ldr	r2, [pc, #16]	; (8014ce8 <fmc_get_stm32_temp+0x48>)
 8014cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	3720      	adds	r7, #32
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	20001e98 	.word	0x20001e98

08014cec <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cee:	b093      	sub	sp, #76	; 0x4c
 8014cf0:	af06      	add	r7, sp, #24
 8014cf2:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014cf4:	4c1c      	ldr	r4, [pc, #112]	; (8014d68 <fmc_get_ttl+0x7c>)
 8014cf6:	f107 0308 	add.w	r3, r7, #8
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fa fac8 	bl	800f290 <fm_factory_get_ttl>
 8014d00:	4625      	mov	r5, r4
 8014d02:	f107 0408 	add.w	r4, r7, #8
 8014d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014d12:	4b15      	ldr	r3, [pc, #84]	; (8014d68 <fmc_get_ttl+0x7c>)
 8014d14:	607b      	str	r3, [r7, #4]
 8014d16:	f107 0c08 	add.w	ip, r7, #8
 8014d1a:	4e13      	ldr	r6, [pc, #76]	; (8014d68 <fmc_get_ttl+0x7c>)
 8014d1c:	466d      	mov	r5, sp
 8014d1e:	f106 0408 	add.w	r4, r6, #8
 8014d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014d2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d32:	4660      	mov	r0, ip
 8014d34:	f000 f81a 	bl	8014d6c <fmc_totalizer_init>
 8014d38:	687d      	ldr	r5, [r7, #4]
 8014d3a:	f107 0408 	add.w	r4, r7, #8
 8014d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4c:	4a06      	ldr	r2, [pc, #24]	; (8014d68 <fmc_get_ttl+0x7c>)
 8014d4e:	461c      	mov	r4, r3
 8014d50:	4615      	mov	r5, r2
 8014d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d60:	3734      	adds	r7, #52	; 0x34
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20001e78 	.word	0x20001e78

08014d6c <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014d6c:	b082      	sub	sp, #8
 8014d6e:	b5b0      	push	{r4, r5, r7, lr}
 8014d70:	b082      	sub	sp, #8
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
 8014d76:	f107 0118 	add.w	r1, r7, #24
 8014d7a:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014d7e:	f107 0018 	add.w	r0, r7, #24
 8014d82:	f000 f811 	bl	8014da8 <fmc_totalizer_refresh>

    return (totalizer);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	461d      	mov	r5, r3
 8014d8a:	f107 0418 	add.w	r4, r7, #24
 8014d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	3708      	adds	r7, #8
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014da4:	b002      	add	sp, #8
 8014da6:	4770      	bx	lr

08014da8 <fmc_totalizer_refresh>:
 * @param Puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014dac:	b084      	sub	sp, #16
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014db2:	6879      	ldr	r1, [r7, #4]
 8014db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014db8:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014dbc:	6879      	ldr	r1, [r7, #4]
 8014dbe:	7d09      	ldrb	r1, [r1, #20]
 8014dc0:	4608      	mov	r0, r1
 8014dc2:	6879      	ldr	r1, [r7, #4]
 8014dc4:	7b09      	ldrb	r1, [r1, #12]
 8014dc6:	4401      	add	r1, r0
 8014dc8:	4816      	ldr	r0, [pc, #88]	; (8014e24 <fmc_totalizer_refresh+0x7c>)
 8014dca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014dce:	2000      	movs	r0, #0
 8014dd0:	460c      	mov	r4, r1
 8014dd2:	4605      	mov	r5, r0
 8014dd4:	68f9      	ldr	r1, [r7, #12]
 8014dd6:	fb04 f001 	mul.w	r0, r4, r1
 8014dda:	68b9      	ldr	r1, [r7, #8]
 8014ddc:	fb05 f101 	mul.w	r1, r5, r1
 8014de0:	4401      	add	r1, r0
 8014de2:	68b8      	ldr	r0, [r7, #8]
 8014de4:	fba0 2304 	umull	r2, r3, r0, r4
 8014de8:	4419      	add	r1, r3
 8014dea:	460b      	mov	r3, r1
 8014dec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014df0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	691b      	ldr	r3, [r3, #16]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	4698      	mov	r8, r3
 8014dfc:	4691      	mov	r9, r2
 8014dfe:	4642      	mov	r2, r8
 8014e00:	464b      	mov	r3, r9
 8014e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014e06:	f7eb fb65 	bl	80004d4 <__aeabi_uldivmod>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014e12:	68ba      	ldr	r2, [r7, #8]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	609a      	str	r2, [r3, #8]

}
 8014e18:	bf00      	nop
 8014e1a:	3710      	adds	r7, #16
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014e22:	bf00      	nop
 8014e24:	08015b04 	.word	0x08015b04

08014e28 <atoi>:
 8014e28:	220a      	movs	r2, #10
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	f000 b908 	b.w	8015040 <strtol>

08014e30 <__errno>:
 8014e30:	4b01      	ldr	r3, [pc, #4]	; (8014e38 <__errno+0x8>)
 8014e32:	6818      	ldr	r0, [r3, #0]
 8014e34:	4770      	bx	lr
 8014e36:	bf00      	nop
 8014e38:	20000154 	.word	0x20000154

08014e3c <__libc_init_array>:
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	4d0d      	ldr	r5, [pc, #52]	; (8014e74 <__libc_init_array+0x38>)
 8014e40:	2600      	movs	r6, #0
 8014e42:	4c0d      	ldr	r4, [pc, #52]	; (8014e78 <__libc_init_array+0x3c>)
 8014e44:	1b64      	subs	r4, r4, r5
 8014e46:	10a4      	asrs	r4, r4, #2
 8014e48:	42a6      	cmp	r6, r4
 8014e4a:	d109      	bne.n	8014e60 <__libc_init_array+0x24>
 8014e4c:	4d0b      	ldr	r5, [pc, #44]	; (8014e7c <__libc_init_array+0x40>)
 8014e4e:	2600      	movs	r6, #0
 8014e50:	4c0b      	ldr	r4, [pc, #44]	; (8014e80 <__libc_init_array+0x44>)
 8014e52:	f000 fd5d 	bl	8015910 <_init>
 8014e56:	1b64      	subs	r4, r4, r5
 8014e58:	10a4      	asrs	r4, r4, #2
 8014e5a:	42a6      	cmp	r6, r4
 8014e5c:	d105      	bne.n	8014e6a <__libc_init_array+0x2e>
 8014e5e:	bd70      	pop	{r4, r5, r6, pc}
 8014e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e64:	3601      	adds	r6, #1
 8014e66:	4798      	blx	r3
 8014e68:	e7ee      	b.n	8014e48 <__libc_init_array+0xc>
 8014e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e6e:	3601      	adds	r6, #1
 8014e70:	4798      	blx	r3
 8014e72:	e7f2      	b.n	8014e5a <__libc_init_array+0x1e>
 8014e74:	08015c5c 	.word	0x08015c5c
 8014e78:	08015c5c 	.word	0x08015c5c
 8014e7c:	08015c5c 	.word	0x08015c5c
 8014e80:	08015c60 	.word	0x08015c60

08014e84 <memset>:
 8014e84:	4402      	add	r2, r0
 8014e86:	4603      	mov	r3, r0
 8014e88:	4293      	cmp	r3, r2
 8014e8a:	d100      	bne.n	8014e8e <memset+0xa>
 8014e8c:	4770      	bx	lr
 8014e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e92:	e7f9      	b.n	8014e88 <memset+0x4>

08014e94 <sniprintf>:
 8014e94:	b40c      	push	{r2, r3}
 8014e96:	4b18      	ldr	r3, [pc, #96]	; (8014ef8 <sniprintf+0x64>)
 8014e98:	b530      	push	{r4, r5, lr}
 8014e9a:	1e0c      	subs	r4, r1, #0
 8014e9c:	b09d      	sub	sp, #116	; 0x74
 8014e9e:	681d      	ldr	r5, [r3, #0]
 8014ea0:	da08      	bge.n	8014eb4 <sniprintf+0x20>
 8014ea2:	238b      	movs	r3, #139	; 0x8b
 8014ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea8:	602b      	str	r3, [r5, #0]
 8014eaa:	b01d      	add	sp, #116	; 0x74
 8014eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014eb0:	b002      	add	sp, #8
 8014eb2:	4770      	bx	lr
 8014eb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014eb8:	9002      	str	r0, [sp, #8]
 8014eba:	9006      	str	r0, [sp, #24]
 8014ebc:	a902      	add	r1, sp, #8
 8014ebe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014ec2:	bf14      	ite	ne
 8014ec4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014ec8:	4623      	moveq	r3, r4
 8014eca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ecc:	4628      	mov	r0, r5
 8014ece:	9304      	str	r3, [sp, #16]
 8014ed0:	9307      	str	r3, [sp, #28]
 8014ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ed6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014eda:	ab21      	add	r3, sp, #132	; 0x84
 8014edc:	9301      	str	r3, [sp, #4]
 8014ede:	f000 f915 	bl	801510c <_svfiprintf_r>
 8014ee2:	1c43      	adds	r3, r0, #1
 8014ee4:	bfbc      	itt	lt
 8014ee6:	238b      	movlt	r3, #139	; 0x8b
 8014ee8:	602b      	strlt	r3, [r5, #0]
 8014eea:	2c00      	cmp	r4, #0
 8014eec:	d0dd      	beq.n	8014eaa <sniprintf+0x16>
 8014eee:	9b02      	ldr	r3, [sp, #8]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	701a      	strb	r2, [r3, #0]
 8014ef4:	e7d9      	b.n	8014eaa <sniprintf+0x16>
 8014ef6:	bf00      	nop
 8014ef8:	20000154 	.word	0x20000154

08014efc <siprintf>:
 8014efc:	b40e      	push	{r1, r2, r3}
 8014efe:	b500      	push	{lr}
 8014f00:	b09c      	sub	sp, #112	; 0x70
 8014f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f06:	ab1d      	add	r3, sp, #116	; 0x74
 8014f08:	9002      	str	r0, [sp, #8]
 8014f0a:	9006      	str	r0, [sp, #24]
 8014f0c:	9107      	str	r1, [sp, #28]
 8014f0e:	9104      	str	r1, [sp, #16]
 8014f10:	4808      	ldr	r0, [pc, #32]	; (8014f34 <siprintf+0x38>)
 8014f12:	4909      	ldr	r1, [pc, #36]	; (8014f38 <siprintf+0x3c>)
 8014f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f18:	9105      	str	r1, [sp, #20]
 8014f1a:	a902      	add	r1, sp, #8
 8014f1c:	6800      	ldr	r0, [r0, #0]
 8014f1e:	9301      	str	r3, [sp, #4]
 8014f20:	f000 f8f4 	bl	801510c <_svfiprintf_r>
 8014f24:	9b02      	ldr	r3, [sp, #8]
 8014f26:	2200      	movs	r2, #0
 8014f28:	701a      	strb	r2, [r3, #0]
 8014f2a:	b01c      	add	sp, #112	; 0x70
 8014f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f30:	b003      	add	sp, #12
 8014f32:	4770      	bx	lr
 8014f34:	20000154 	.word	0x20000154
 8014f38:	ffff0208 	.word	0xffff0208

08014f3c <_strtol_l.constprop.0>:
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f42:	d001      	beq.n	8014f48 <_strtol_l.constprop.0+0xc>
 8014f44:	2b24      	cmp	r3, #36	; 0x24
 8014f46:	d906      	bls.n	8014f56 <_strtol_l.constprop.0+0x1a>
 8014f48:	f7ff ff72 	bl	8014e30 <__errno>
 8014f4c:	2316      	movs	r3, #22
 8014f4e:	6003      	str	r3, [r0, #0]
 8014f50:	2000      	movs	r0, #0
 8014f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f56:	460d      	mov	r5, r1
 8014f58:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801503c <_strtol_l.constprop.0+0x100>
 8014f5c:	462e      	mov	r6, r5
 8014f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f62:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014f66:	f017 0708 	ands.w	r7, r7, #8
 8014f6a:	d1f7      	bne.n	8014f5c <_strtol_l.constprop.0+0x20>
 8014f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f6e:	d132      	bne.n	8014fd6 <_strtol_l.constprop.0+0x9a>
 8014f70:	782c      	ldrb	r4, [r5, #0]
 8014f72:	2701      	movs	r7, #1
 8014f74:	1cb5      	adds	r5, r6, #2
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d05b      	beq.n	8015032 <_strtol_l.constprop.0+0xf6>
 8014f7a:	2b10      	cmp	r3, #16
 8014f7c:	d109      	bne.n	8014f92 <_strtol_l.constprop.0+0x56>
 8014f7e:	2c30      	cmp	r4, #48	; 0x30
 8014f80:	d107      	bne.n	8014f92 <_strtol_l.constprop.0+0x56>
 8014f82:	782c      	ldrb	r4, [r5, #0]
 8014f84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f88:	2c58      	cmp	r4, #88	; 0x58
 8014f8a:	d14d      	bne.n	8015028 <_strtol_l.constprop.0+0xec>
 8014f8c:	786c      	ldrb	r4, [r5, #1]
 8014f8e:	2310      	movs	r3, #16
 8014f90:	3502      	adds	r5, #2
 8014f92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f96:	f04f 0c00 	mov.w	ip, #0
 8014f9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f9e:	4666      	mov	r6, ip
 8014fa0:	fbb8 f9f3 	udiv	r9, r8, r3
 8014fa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8014fa8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014fac:	f1be 0f09 	cmp.w	lr, #9
 8014fb0:	d816      	bhi.n	8014fe0 <_strtol_l.constprop.0+0xa4>
 8014fb2:	4674      	mov	r4, lr
 8014fb4:	42a3      	cmp	r3, r4
 8014fb6:	dd24      	ble.n	8015002 <_strtol_l.constprop.0+0xc6>
 8014fb8:	f1bc 0f00 	cmp.w	ip, #0
 8014fbc:	db1e      	blt.n	8014ffc <_strtol_l.constprop.0+0xc0>
 8014fbe:	45b1      	cmp	r9, r6
 8014fc0:	d31c      	bcc.n	8014ffc <_strtol_l.constprop.0+0xc0>
 8014fc2:	d101      	bne.n	8014fc8 <_strtol_l.constprop.0+0x8c>
 8014fc4:	45a2      	cmp	sl, r4
 8014fc6:	db19      	blt.n	8014ffc <_strtol_l.constprop.0+0xc0>
 8014fc8:	fb06 4603 	mla	r6, r6, r3, r4
 8014fcc:	f04f 0c01 	mov.w	ip, #1
 8014fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fd4:	e7e8      	b.n	8014fa8 <_strtol_l.constprop.0+0x6c>
 8014fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8014fd8:	bf04      	itt	eq
 8014fda:	782c      	ldrbeq	r4, [r5, #0]
 8014fdc:	1cb5      	addeq	r5, r6, #2
 8014fde:	e7ca      	b.n	8014f76 <_strtol_l.constprop.0+0x3a>
 8014fe0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014fe4:	f1be 0f19 	cmp.w	lr, #25
 8014fe8:	d801      	bhi.n	8014fee <_strtol_l.constprop.0+0xb2>
 8014fea:	3c37      	subs	r4, #55	; 0x37
 8014fec:	e7e2      	b.n	8014fb4 <_strtol_l.constprop.0+0x78>
 8014fee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014ff2:	f1be 0f19 	cmp.w	lr, #25
 8014ff6:	d804      	bhi.n	8015002 <_strtol_l.constprop.0+0xc6>
 8014ff8:	3c57      	subs	r4, #87	; 0x57
 8014ffa:	e7db      	b.n	8014fb4 <_strtol_l.constprop.0+0x78>
 8014ffc:	f04f 3cff 	mov.w	ip, #4294967295
 8015000:	e7e6      	b.n	8014fd0 <_strtol_l.constprop.0+0x94>
 8015002:	f1bc 0f00 	cmp.w	ip, #0
 8015006:	da05      	bge.n	8015014 <_strtol_l.constprop.0+0xd8>
 8015008:	2322      	movs	r3, #34	; 0x22
 801500a:	4646      	mov	r6, r8
 801500c:	6003      	str	r3, [r0, #0]
 801500e:	b942      	cbnz	r2, 8015022 <_strtol_l.constprop.0+0xe6>
 8015010:	4630      	mov	r0, r6
 8015012:	e79e      	b.n	8014f52 <_strtol_l.constprop.0+0x16>
 8015014:	b107      	cbz	r7, 8015018 <_strtol_l.constprop.0+0xdc>
 8015016:	4276      	negs	r6, r6
 8015018:	2a00      	cmp	r2, #0
 801501a:	d0f9      	beq.n	8015010 <_strtol_l.constprop.0+0xd4>
 801501c:	f1bc 0f00 	cmp.w	ip, #0
 8015020:	d000      	beq.n	8015024 <_strtol_l.constprop.0+0xe8>
 8015022:	1e69      	subs	r1, r5, #1
 8015024:	6011      	str	r1, [r2, #0]
 8015026:	e7f3      	b.n	8015010 <_strtol_l.constprop.0+0xd4>
 8015028:	2430      	movs	r4, #48	; 0x30
 801502a:	2b00      	cmp	r3, #0
 801502c:	d1b1      	bne.n	8014f92 <_strtol_l.constprop.0+0x56>
 801502e:	2308      	movs	r3, #8
 8015030:	e7af      	b.n	8014f92 <_strtol_l.constprop.0+0x56>
 8015032:	2c30      	cmp	r4, #48	; 0x30
 8015034:	d0a5      	beq.n	8014f82 <_strtol_l.constprop.0+0x46>
 8015036:	230a      	movs	r3, #10
 8015038:	e7ab      	b.n	8014f92 <_strtol_l.constprop.0+0x56>
 801503a:	bf00      	nop
 801503c:	08015b21 	.word	0x08015b21

08015040 <strtol>:
 8015040:	4613      	mov	r3, r2
 8015042:	460a      	mov	r2, r1
 8015044:	4601      	mov	r1, r0
 8015046:	4802      	ldr	r0, [pc, #8]	; (8015050 <strtol+0x10>)
 8015048:	6800      	ldr	r0, [r0, #0]
 801504a:	f7ff bf77 	b.w	8014f3c <_strtol_l.constprop.0>
 801504e:	bf00      	nop
 8015050:	20000154 	.word	0x20000154

08015054 <__ssputs_r>:
 8015054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015058:	688e      	ldr	r6, [r1, #8]
 801505a:	4682      	mov	sl, r0
 801505c:	460c      	mov	r4, r1
 801505e:	4690      	mov	r8, r2
 8015060:	429e      	cmp	r6, r3
 8015062:	461f      	mov	r7, r3
 8015064:	d838      	bhi.n	80150d8 <__ssputs_r+0x84>
 8015066:	898a      	ldrh	r2, [r1, #12]
 8015068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801506c:	d032      	beq.n	80150d4 <__ssputs_r+0x80>
 801506e:	6825      	ldr	r5, [r4, #0]
 8015070:	3301      	adds	r3, #1
 8015072:	6909      	ldr	r1, [r1, #16]
 8015074:	eba5 0901 	sub.w	r9, r5, r1
 8015078:	6965      	ldr	r5, [r4, #20]
 801507a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801507e:	444b      	add	r3, r9
 8015080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015084:	106d      	asrs	r5, r5, #1
 8015086:	429d      	cmp	r5, r3
 8015088:	bf38      	it	cc
 801508a:	461d      	movcc	r5, r3
 801508c:	0553      	lsls	r3, r2, #21
 801508e:	d531      	bpl.n	80150f4 <__ssputs_r+0xa0>
 8015090:	4629      	mov	r1, r5
 8015092:	f000 fb73 	bl	801577c <_malloc_r>
 8015096:	4606      	mov	r6, r0
 8015098:	b950      	cbnz	r0, 80150b0 <__ssputs_r+0x5c>
 801509a:	230c      	movs	r3, #12
 801509c:	f04f 30ff 	mov.w	r0, #4294967295
 80150a0:	f8ca 3000 	str.w	r3, [sl]
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150aa:	81a3      	strh	r3, [r4, #12]
 80150ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150b0:	464a      	mov	r2, r9
 80150b2:	6921      	ldr	r1, [r4, #16]
 80150b4:	f000 face 	bl	8015654 <memcpy>
 80150b8:	89a3      	ldrh	r3, [r4, #12]
 80150ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150c2:	81a3      	strh	r3, [r4, #12]
 80150c4:	6126      	str	r6, [r4, #16]
 80150c6:	444e      	add	r6, r9
 80150c8:	6165      	str	r5, [r4, #20]
 80150ca:	eba5 0509 	sub.w	r5, r5, r9
 80150ce:	6026      	str	r6, [r4, #0]
 80150d0:	463e      	mov	r6, r7
 80150d2:	60a5      	str	r5, [r4, #8]
 80150d4:	42be      	cmp	r6, r7
 80150d6:	d900      	bls.n	80150da <__ssputs_r+0x86>
 80150d8:	463e      	mov	r6, r7
 80150da:	4632      	mov	r2, r6
 80150dc:	4641      	mov	r1, r8
 80150de:	6820      	ldr	r0, [r4, #0]
 80150e0:	f000 fac5 	bl	801566e <memmove>
 80150e4:	68a3      	ldr	r3, [r4, #8]
 80150e6:	2000      	movs	r0, #0
 80150e8:	1b9b      	subs	r3, r3, r6
 80150ea:	60a3      	str	r3, [r4, #8]
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	4433      	add	r3, r6
 80150f0:	6023      	str	r3, [r4, #0]
 80150f2:	e7db      	b.n	80150ac <__ssputs_r+0x58>
 80150f4:	462a      	mov	r2, r5
 80150f6:	f000 fbb5 	bl	8015864 <_realloc_r>
 80150fa:	4606      	mov	r6, r0
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1e1      	bne.n	80150c4 <__ssputs_r+0x70>
 8015100:	6921      	ldr	r1, [r4, #16]
 8015102:	4650      	mov	r0, sl
 8015104:	f000 face 	bl	80156a4 <_free_r>
 8015108:	e7c7      	b.n	801509a <__ssputs_r+0x46>
	...

0801510c <_svfiprintf_r>:
 801510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015110:	4698      	mov	r8, r3
 8015112:	898b      	ldrh	r3, [r1, #12]
 8015114:	b09d      	sub	sp, #116	; 0x74
 8015116:	4607      	mov	r7, r0
 8015118:	061b      	lsls	r3, r3, #24
 801511a:	460d      	mov	r5, r1
 801511c:	4614      	mov	r4, r2
 801511e:	d50e      	bpl.n	801513e <_svfiprintf_r+0x32>
 8015120:	690b      	ldr	r3, [r1, #16]
 8015122:	b963      	cbnz	r3, 801513e <_svfiprintf_r+0x32>
 8015124:	2140      	movs	r1, #64	; 0x40
 8015126:	f000 fb29 	bl	801577c <_malloc_r>
 801512a:	6028      	str	r0, [r5, #0]
 801512c:	6128      	str	r0, [r5, #16]
 801512e:	b920      	cbnz	r0, 801513a <_svfiprintf_r+0x2e>
 8015130:	230c      	movs	r3, #12
 8015132:	603b      	str	r3, [r7, #0]
 8015134:	f04f 30ff 	mov.w	r0, #4294967295
 8015138:	e0d1      	b.n	80152de <_svfiprintf_r+0x1d2>
 801513a:	2340      	movs	r3, #64	; 0x40
 801513c:	616b      	str	r3, [r5, #20]
 801513e:	2300      	movs	r3, #0
 8015140:	f8cd 800c 	str.w	r8, [sp, #12]
 8015144:	f04f 0901 	mov.w	r9, #1
 8015148:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80152f8 <_svfiprintf_r+0x1ec>
 801514c:	9309      	str	r3, [sp, #36]	; 0x24
 801514e:	2320      	movs	r3, #32
 8015150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015154:	2330      	movs	r3, #48	; 0x30
 8015156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801515a:	4623      	mov	r3, r4
 801515c:	469a      	mov	sl, r3
 801515e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015162:	b10a      	cbz	r2, 8015168 <_svfiprintf_r+0x5c>
 8015164:	2a25      	cmp	r2, #37	; 0x25
 8015166:	d1f9      	bne.n	801515c <_svfiprintf_r+0x50>
 8015168:	ebba 0b04 	subs.w	fp, sl, r4
 801516c:	d00b      	beq.n	8015186 <_svfiprintf_r+0x7a>
 801516e:	465b      	mov	r3, fp
 8015170:	4622      	mov	r2, r4
 8015172:	4629      	mov	r1, r5
 8015174:	4638      	mov	r0, r7
 8015176:	f7ff ff6d 	bl	8015054 <__ssputs_r>
 801517a:	3001      	adds	r0, #1
 801517c:	f000 80aa 	beq.w	80152d4 <_svfiprintf_r+0x1c8>
 8015180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015182:	445a      	add	r2, fp
 8015184:	9209      	str	r2, [sp, #36]	; 0x24
 8015186:	f89a 3000 	ldrb.w	r3, [sl]
 801518a:	2b00      	cmp	r3, #0
 801518c:	f000 80a2 	beq.w	80152d4 <_svfiprintf_r+0x1c8>
 8015190:	2300      	movs	r3, #0
 8015192:	f04f 32ff 	mov.w	r2, #4294967295
 8015196:	f10a 0a01 	add.w	sl, sl, #1
 801519a:	9304      	str	r3, [sp, #16]
 801519c:	9307      	str	r3, [sp, #28]
 801519e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151a2:	931a      	str	r3, [sp, #104]	; 0x68
 80151a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151a8:	4654      	mov	r4, sl
 80151aa:	2205      	movs	r2, #5
 80151ac:	4852      	ldr	r0, [pc, #328]	; (80152f8 <_svfiprintf_r+0x1ec>)
 80151ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151b2:	f000 fa41 	bl	8015638 <memchr>
 80151b6:	9a04      	ldr	r2, [sp, #16]
 80151b8:	b9d8      	cbnz	r0, 80151f2 <_svfiprintf_r+0xe6>
 80151ba:	06d0      	lsls	r0, r2, #27
 80151bc:	bf44      	itt	mi
 80151be:	2320      	movmi	r3, #32
 80151c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151c4:	0711      	lsls	r1, r2, #28
 80151c6:	bf44      	itt	mi
 80151c8:	232b      	movmi	r3, #43	; 0x2b
 80151ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151ce:	f89a 3000 	ldrb.w	r3, [sl]
 80151d2:	2b2a      	cmp	r3, #42	; 0x2a
 80151d4:	d015      	beq.n	8015202 <_svfiprintf_r+0xf6>
 80151d6:	9a07      	ldr	r2, [sp, #28]
 80151d8:	4654      	mov	r4, sl
 80151da:	2000      	movs	r0, #0
 80151dc:	f04f 0c0a 	mov.w	ip, #10
 80151e0:	4621      	mov	r1, r4
 80151e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151e6:	3b30      	subs	r3, #48	; 0x30
 80151e8:	2b09      	cmp	r3, #9
 80151ea:	d94e      	bls.n	801528a <_svfiprintf_r+0x17e>
 80151ec:	b1b0      	cbz	r0, 801521c <_svfiprintf_r+0x110>
 80151ee:	9207      	str	r2, [sp, #28]
 80151f0:	e014      	b.n	801521c <_svfiprintf_r+0x110>
 80151f2:	eba0 0308 	sub.w	r3, r0, r8
 80151f6:	46a2      	mov	sl, r4
 80151f8:	fa09 f303 	lsl.w	r3, r9, r3
 80151fc:	4313      	orrs	r3, r2
 80151fe:	9304      	str	r3, [sp, #16]
 8015200:	e7d2      	b.n	80151a8 <_svfiprintf_r+0x9c>
 8015202:	9b03      	ldr	r3, [sp, #12]
 8015204:	1d19      	adds	r1, r3, #4
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	9103      	str	r1, [sp, #12]
 801520c:	bfbb      	ittet	lt
 801520e:	425b      	neglt	r3, r3
 8015210:	f042 0202 	orrlt.w	r2, r2, #2
 8015214:	9307      	strge	r3, [sp, #28]
 8015216:	9307      	strlt	r3, [sp, #28]
 8015218:	bfb8      	it	lt
 801521a:	9204      	strlt	r2, [sp, #16]
 801521c:	7823      	ldrb	r3, [r4, #0]
 801521e:	2b2e      	cmp	r3, #46	; 0x2e
 8015220:	d10c      	bne.n	801523c <_svfiprintf_r+0x130>
 8015222:	7863      	ldrb	r3, [r4, #1]
 8015224:	2b2a      	cmp	r3, #42	; 0x2a
 8015226:	d135      	bne.n	8015294 <_svfiprintf_r+0x188>
 8015228:	9b03      	ldr	r3, [sp, #12]
 801522a:	3402      	adds	r4, #2
 801522c:	1d1a      	adds	r2, r3, #4
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	9203      	str	r2, [sp, #12]
 8015234:	bfb8      	it	lt
 8015236:	f04f 33ff 	movlt.w	r3, #4294967295
 801523a:	9305      	str	r3, [sp, #20]
 801523c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015308 <_svfiprintf_r+0x1fc>
 8015240:	2203      	movs	r2, #3
 8015242:	7821      	ldrb	r1, [r4, #0]
 8015244:	4650      	mov	r0, sl
 8015246:	f000 f9f7 	bl	8015638 <memchr>
 801524a:	b140      	cbz	r0, 801525e <_svfiprintf_r+0x152>
 801524c:	2340      	movs	r3, #64	; 0x40
 801524e:	eba0 000a 	sub.w	r0, r0, sl
 8015252:	3401      	adds	r4, #1
 8015254:	fa03 f000 	lsl.w	r0, r3, r0
 8015258:	9b04      	ldr	r3, [sp, #16]
 801525a:	4303      	orrs	r3, r0
 801525c:	9304      	str	r3, [sp, #16]
 801525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015262:	2206      	movs	r2, #6
 8015264:	4825      	ldr	r0, [pc, #148]	; (80152fc <_svfiprintf_r+0x1f0>)
 8015266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801526a:	f000 f9e5 	bl	8015638 <memchr>
 801526e:	2800      	cmp	r0, #0
 8015270:	d038      	beq.n	80152e4 <_svfiprintf_r+0x1d8>
 8015272:	4b23      	ldr	r3, [pc, #140]	; (8015300 <_svfiprintf_r+0x1f4>)
 8015274:	bb1b      	cbnz	r3, 80152be <_svfiprintf_r+0x1b2>
 8015276:	9b03      	ldr	r3, [sp, #12]
 8015278:	3307      	adds	r3, #7
 801527a:	f023 0307 	bic.w	r3, r3, #7
 801527e:	3308      	adds	r3, #8
 8015280:	9303      	str	r3, [sp, #12]
 8015282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015284:	4433      	add	r3, r6
 8015286:	9309      	str	r3, [sp, #36]	; 0x24
 8015288:	e767      	b.n	801515a <_svfiprintf_r+0x4e>
 801528a:	fb0c 3202 	mla	r2, ip, r2, r3
 801528e:	460c      	mov	r4, r1
 8015290:	2001      	movs	r0, #1
 8015292:	e7a5      	b.n	80151e0 <_svfiprintf_r+0xd4>
 8015294:	2300      	movs	r3, #0
 8015296:	3401      	adds	r4, #1
 8015298:	f04f 0c0a 	mov.w	ip, #10
 801529c:	4619      	mov	r1, r3
 801529e:	9305      	str	r3, [sp, #20]
 80152a0:	4620      	mov	r0, r4
 80152a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152a6:	3a30      	subs	r2, #48	; 0x30
 80152a8:	2a09      	cmp	r2, #9
 80152aa:	d903      	bls.n	80152b4 <_svfiprintf_r+0x1a8>
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d0c5      	beq.n	801523c <_svfiprintf_r+0x130>
 80152b0:	9105      	str	r1, [sp, #20]
 80152b2:	e7c3      	b.n	801523c <_svfiprintf_r+0x130>
 80152b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80152b8:	4604      	mov	r4, r0
 80152ba:	2301      	movs	r3, #1
 80152bc:	e7f0      	b.n	80152a0 <_svfiprintf_r+0x194>
 80152be:	ab03      	add	r3, sp, #12
 80152c0:	462a      	mov	r2, r5
 80152c2:	a904      	add	r1, sp, #16
 80152c4:	4638      	mov	r0, r7
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	4b0e      	ldr	r3, [pc, #56]	; (8015304 <_svfiprintf_r+0x1f8>)
 80152ca:	e000      	b.n	80152ce <_svfiprintf_r+0x1c2>
 80152cc:	bf00      	nop
 80152ce:	1c42      	adds	r2, r0, #1
 80152d0:	4606      	mov	r6, r0
 80152d2:	d1d6      	bne.n	8015282 <_svfiprintf_r+0x176>
 80152d4:	89ab      	ldrh	r3, [r5, #12]
 80152d6:	065b      	lsls	r3, r3, #25
 80152d8:	f53f af2c 	bmi.w	8015134 <_svfiprintf_r+0x28>
 80152dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152de:	b01d      	add	sp, #116	; 0x74
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	ab03      	add	r3, sp, #12
 80152e6:	462a      	mov	r2, r5
 80152e8:	a904      	add	r1, sp, #16
 80152ea:	4638      	mov	r0, r7
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	4b05      	ldr	r3, [pc, #20]	; (8015304 <_svfiprintf_r+0x1f8>)
 80152f0:	f000 f87c 	bl	80153ec <_printf_i>
 80152f4:	e7eb      	b.n	80152ce <_svfiprintf_r+0x1c2>
 80152f6:	bf00      	nop
 80152f8:	08015c21 	.word	0x08015c21
 80152fc:	08015c2b 	.word	0x08015c2b
 8015300:	00000000 	.word	0x00000000
 8015304:	08015055 	.word	0x08015055
 8015308:	08015c27 	.word	0x08015c27

0801530c <_printf_common>:
 801530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015310:	4616      	mov	r6, r2
 8015312:	4699      	mov	r9, r3
 8015314:	688a      	ldr	r2, [r1, #8]
 8015316:	4607      	mov	r7, r0
 8015318:	690b      	ldr	r3, [r1, #16]
 801531a:	460c      	mov	r4, r1
 801531c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015320:	4293      	cmp	r3, r2
 8015322:	bfb8      	it	lt
 8015324:	4613      	movlt	r3, r2
 8015326:	6033      	str	r3, [r6, #0]
 8015328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801532c:	b10a      	cbz	r2, 8015332 <_printf_common+0x26>
 801532e:	3301      	adds	r3, #1
 8015330:	6033      	str	r3, [r6, #0]
 8015332:	6823      	ldr	r3, [r4, #0]
 8015334:	0699      	lsls	r1, r3, #26
 8015336:	bf42      	ittt	mi
 8015338:	6833      	ldrmi	r3, [r6, #0]
 801533a:	3302      	addmi	r3, #2
 801533c:	6033      	strmi	r3, [r6, #0]
 801533e:	6825      	ldr	r5, [r4, #0]
 8015340:	f015 0506 	ands.w	r5, r5, #6
 8015344:	d106      	bne.n	8015354 <_printf_common+0x48>
 8015346:	f104 0a19 	add.w	sl, r4, #25
 801534a:	68e3      	ldr	r3, [r4, #12]
 801534c:	6832      	ldr	r2, [r6, #0]
 801534e:	1a9b      	subs	r3, r3, r2
 8015350:	42ab      	cmp	r3, r5
 8015352:	dc29      	bgt.n	80153a8 <_printf_common+0x9c>
 8015354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015358:	1e13      	subs	r3, r2, #0
 801535a:	6822      	ldr	r2, [r4, #0]
 801535c:	bf18      	it	ne
 801535e:	2301      	movne	r3, #1
 8015360:	0692      	lsls	r2, r2, #26
 8015362:	d42e      	bmi.n	80153c2 <_printf_common+0xb6>
 8015364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015368:	4649      	mov	r1, r9
 801536a:	4638      	mov	r0, r7
 801536c:	47c0      	blx	r8
 801536e:	3001      	adds	r0, #1
 8015370:	d021      	beq.n	80153b6 <_printf_common+0xaa>
 8015372:	6823      	ldr	r3, [r4, #0]
 8015374:	341a      	adds	r4, #26
 8015376:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801537a:	f003 0306 	and.w	r3, r3, #6
 801537e:	6832      	ldr	r2, [r6, #0]
 8015380:	2600      	movs	r6, #0
 8015382:	2b04      	cmp	r3, #4
 8015384:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015388:	bf08      	it	eq
 801538a:	1aad      	subeq	r5, r5, r2
 801538c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8015390:	bf14      	ite	ne
 8015392:	2500      	movne	r5, #0
 8015394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015398:	4293      	cmp	r3, r2
 801539a:	bfc4      	itt	gt
 801539c:	1a9b      	subgt	r3, r3, r2
 801539e:	18ed      	addgt	r5, r5, r3
 80153a0:	42b5      	cmp	r5, r6
 80153a2:	d11a      	bne.n	80153da <_printf_common+0xce>
 80153a4:	2000      	movs	r0, #0
 80153a6:	e008      	b.n	80153ba <_printf_common+0xae>
 80153a8:	2301      	movs	r3, #1
 80153aa:	4652      	mov	r2, sl
 80153ac:	4649      	mov	r1, r9
 80153ae:	4638      	mov	r0, r7
 80153b0:	47c0      	blx	r8
 80153b2:	3001      	adds	r0, #1
 80153b4:	d103      	bne.n	80153be <_printf_common+0xb2>
 80153b6:	f04f 30ff 	mov.w	r0, #4294967295
 80153ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153be:	3501      	adds	r5, #1
 80153c0:	e7c3      	b.n	801534a <_printf_common+0x3e>
 80153c2:	18e1      	adds	r1, r4, r3
 80153c4:	1c5a      	adds	r2, r3, #1
 80153c6:	2030      	movs	r0, #48	; 0x30
 80153c8:	3302      	adds	r3, #2
 80153ca:	4422      	add	r2, r4
 80153cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153d8:	e7c4      	b.n	8015364 <_printf_common+0x58>
 80153da:	2301      	movs	r3, #1
 80153dc:	4622      	mov	r2, r4
 80153de:	4649      	mov	r1, r9
 80153e0:	4638      	mov	r0, r7
 80153e2:	47c0      	blx	r8
 80153e4:	3001      	adds	r0, #1
 80153e6:	d0e6      	beq.n	80153b6 <_printf_common+0xaa>
 80153e8:	3601      	adds	r6, #1
 80153ea:	e7d9      	b.n	80153a0 <_printf_common+0x94>

080153ec <_printf_i>:
 80153ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153f0:	7e0f      	ldrb	r7, [r1, #24]
 80153f2:	4691      	mov	r9, r2
 80153f4:	4680      	mov	r8, r0
 80153f6:	460c      	mov	r4, r1
 80153f8:	2f78      	cmp	r7, #120	; 0x78
 80153fa:	469a      	mov	sl, r3
 80153fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015402:	d807      	bhi.n	8015414 <_printf_i+0x28>
 8015404:	2f62      	cmp	r7, #98	; 0x62
 8015406:	d80a      	bhi.n	801541e <_printf_i+0x32>
 8015408:	2f00      	cmp	r7, #0
 801540a:	f000 80d8 	beq.w	80155be <_printf_i+0x1d2>
 801540e:	2f58      	cmp	r7, #88	; 0x58
 8015410:	f000 80a3 	beq.w	801555a <_printf_i+0x16e>
 8015414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801541c:	e03a      	b.n	8015494 <_printf_i+0xa8>
 801541e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015422:	2b15      	cmp	r3, #21
 8015424:	d8f6      	bhi.n	8015414 <_printf_i+0x28>
 8015426:	a101      	add	r1, pc, #4	; (adr r1, 801542c <_printf_i+0x40>)
 8015428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801542c:	08015485 	.word	0x08015485
 8015430:	08015499 	.word	0x08015499
 8015434:	08015415 	.word	0x08015415
 8015438:	08015415 	.word	0x08015415
 801543c:	08015415 	.word	0x08015415
 8015440:	08015415 	.word	0x08015415
 8015444:	08015499 	.word	0x08015499
 8015448:	08015415 	.word	0x08015415
 801544c:	08015415 	.word	0x08015415
 8015450:	08015415 	.word	0x08015415
 8015454:	08015415 	.word	0x08015415
 8015458:	080155a5 	.word	0x080155a5
 801545c:	080154c9 	.word	0x080154c9
 8015460:	08015587 	.word	0x08015587
 8015464:	08015415 	.word	0x08015415
 8015468:	08015415 	.word	0x08015415
 801546c:	080155c7 	.word	0x080155c7
 8015470:	08015415 	.word	0x08015415
 8015474:	080154c9 	.word	0x080154c9
 8015478:	08015415 	.word	0x08015415
 801547c:	08015415 	.word	0x08015415
 8015480:	0801558f 	.word	0x0801558f
 8015484:	682b      	ldr	r3, [r5, #0]
 8015486:	1d1a      	adds	r2, r3, #4
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	602a      	str	r2, [r5, #0]
 801548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015494:	2301      	movs	r3, #1
 8015496:	e0a3      	b.n	80155e0 <_printf_i+0x1f4>
 8015498:	6820      	ldr	r0, [r4, #0]
 801549a:	6829      	ldr	r1, [r5, #0]
 801549c:	0606      	lsls	r6, r0, #24
 801549e:	f101 0304 	add.w	r3, r1, #4
 80154a2:	d50a      	bpl.n	80154ba <_printf_i+0xce>
 80154a4:	680e      	ldr	r6, [r1, #0]
 80154a6:	602b      	str	r3, [r5, #0]
 80154a8:	2e00      	cmp	r6, #0
 80154aa:	da03      	bge.n	80154b4 <_printf_i+0xc8>
 80154ac:	232d      	movs	r3, #45	; 0x2d
 80154ae:	4276      	negs	r6, r6
 80154b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154b4:	485e      	ldr	r0, [pc, #376]	; (8015630 <_printf_i+0x244>)
 80154b6:	230a      	movs	r3, #10
 80154b8:	e019      	b.n	80154ee <_printf_i+0x102>
 80154ba:	680e      	ldr	r6, [r1, #0]
 80154bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80154c0:	602b      	str	r3, [r5, #0]
 80154c2:	bf18      	it	ne
 80154c4:	b236      	sxthne	r6, r6
 80154c6:	e7ef      	b.n	80154a8 <_printf_i+0xbc>
 80154c8:	682b      	ldr	r3, [r5, #0]
 80154ca:	6820      	ldr	r0, [r4, #0]
 80154cc:	1d19      	adds	r1, r3, #4
 80154ce:	6029      	str	r1, [r5, #0]
 80154d0:	0601      	lsls	r1, r0, #24
 80154d2:	d501      	bpl.n	80154d8 <_printf_i+0xec>
 80154d4:	681e      	ldr	r6, [r3, #0]
 80154d6:	e002      	b.n	80154de <_printf_i+0xf2>
 80154d8:	0646      	lsls	r6, r0, #25
 80154da:	d5fb      	bpl.n	80154d4 <_printf_i+0xe8>
 80154dc:	881e      	ldrh	r6, [r3, #0]
 80154de:	2f6f      	cmp	r7, #111	; 0x6f
 80154e0:	4853      	ldr	r0, [pc, #332]	; (8015630 <_printf_i+0x244>)
 80154e2:	bf0c      	ite	eq
 80154e4:	2308      	moveq	r3, #8
 80154e6:	230a      	movne	r3, #10
 80154e8:	2100      	movs	r1, #0
 80154ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154ee:	6865      	ldr	r5, [r4, #4]
 80154f0:	2d00      	cmp	r5, #0
 80154f2:	60a5      	str	r5, [r4, #8]
 80154f4:	bfa2      	ittt	ge
 80154f6:	6821      	ldrge	r1, [r4, #0]
 80154f8:	f021 0104 	bicge.w	r1, r1, #4
 80154fc:	6021      	strge	r1, [r4, #0]
 80154fe:	b90e      	cbnz	r6, 8015504 <_printf_i+0x118>
 8015500:	2d00      	cmp	r5, #0
 8015502:	d04d      	beq.n	80155a0 <_printf_i+0x1b4>
 8015504:	4615      	mov	r5, r2
 8015506:	fbb6 f1f3 	udiv	r1, r6, r3
 801550a:	fb03 6711 	mls	r7, r3, r1, r6
 801550e:	5dc7      	ldrb	r7, [r0, r7]
 8015510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015514:	4637      	mov	r7, r6
 8015516:	460e      	mov	r6, r1
 8015518:	42bb      	cmp	r3, r7
 801551a:	d9f4      	bls.n	8015506 <_printf_i+0x11a>
 801551c:	2b08      	cmp	r3, #8
 801551e:	d10b      	bne.n	8015538 <_printf_i+0x14c>
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	07de      	lsls	r6, r3, #31
 8015524:	d508      	bpl.n	8015538 <_printf_i+0x14c>
 8015526:	6923      	ldr	r3, [r4, #16]
 8015528:	6861      	ldr	r1, [r4, #4]
 801552a:	4299      	cmp	r1, r3
 801552c:	bfde      	ittt	le
 801552e:	2330      	movle	r3, #48	; 0x30
 8015530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015538:	1b52      	subs	r2, r2, r5
 801553a:	6122      	str	r2, [r4, #16]
 801553c:	464b      	mov	r3, r9
 801553e:	aa03      	add	r2, sp, #12
 8015540:	4621      	mov	r1, r4
 8015542:	4640      	mov	r0, r8
 8015544:	f8cd a000 	str.w	sl, [sp]
 8015548:	f7ff fee0 	bl	801530c <_printf_common>
 801554c:	3001      	adds	r0, #1
 801554e:	d14c      	bne.n	80155ea <_printf_i+0x1fe>
 8015550:	f04f 30ff 	mov.w	r0, #4294967295
 8015554:	b004      	add	sp, #16
 8015556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555a:	4835      	ldr	r0, [pc, #212]	; (8015630 <_printf_i+0x244>)
 801555c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015560:	6829      	ldr	r1, [r5, #0]
 8015562:	6823      	ldr	r3, [r4, #0]
 8015564:	f851 6b04 	ldr.w	r6, [r1], #4
 8015568:	6029      	str	r1, [r5, #0]
 801556a:	061d      	lsls	r5, r3, #24
 801556c:	d514      	bpl.n	8015598 <_printf_i+0x1ac>
 801556e:	07df      	lsls	r7, r3, #31
 8015570:	bf44      	itt	mi
 8015572:	f043 0320 	orrmi.w	r3, r3, #32
 8015576:	6023      	strmi	r3, [r4, #0]
 8015578:	b91e      	cbnz	r6, 8015582 <_printf_i+0x196>
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	f023 0320 	bic.w	r3, r3, #32
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	2310      	movs	r3, #16
 8015584:	e7b0      	b.n	80154e8 <_printf_i+0xfc>
 8015586:	6823      	ldr	r3, [r4, #0]
 8015588:	f043 0320 	orr.w	r3, r3, #32
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	2378      	movs	r3, #120	; 0x78
 8015590:	4828      	ldr	r0, [pc, #160]	; (8015634 <_printf_i+0x248>)
 8015592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015596:	e7e3      	b.n	8015560 <_printf_i+0x174>
 8015598:	0659      	lsls	r1, r3, #25
 801559a:	bf48      	it	mi
 801559c:	b2b6      	uxthmi	r6, r6
 801559e:	e7e6      	b.n	801556e <_printf_i+0x182>
 80155a0:	4615      	mov	r5, r2
 80155a2:	e7bb      	b.n	801551c <_printf_i+0x130>
 80155a4:	682b      	ldr	r3, [r5, #0]
 80155a6:	6826      	ldr	r6, [r4, #0]
 80155a8:	1d18      	adds	r0, r3, #4
 80155aa:	6961      	ldr	r1, [r4, #20]
 80155ac:	6028      	str	r0, [r5, #0]
 80155ae:	0635      	lsls	r5, r6, #24
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	d501      	bpl.n	80155b8 <_printf_i+0x1cc>
 80155b4:	6019      	str	r1, [r3, #0]
 80155b6:	e002      	b.n	80155be <_printf_i+0x1d2>
 80155b8:	0670      	lsls	r0, r6, #25
 80155ba:	d5fb      	bpl.n	80155b4 <_printf_i+0x1c8>
 80155bc:	8019      	strh	r1, [r3, #0]
 80155be:	2300      	movs	r3, #0
 80155c0:	4615      	mov	r5, r2
 80155c2:	6123      	str	r3, [r4, #16]
 80155c4:	e7ba      	b.n	801553c <_printf_i+0x150>
 80155c6:	682b      	ldr	r3, [r5, #0]
 80155c8:	2100      	movs	r1, #0
 80155ca:	1d1a      	adds	r2, r3, #4
 80155cc:	602a      	str	r2, [r5, #0]
 80155ce:	681d      	ldr	r5, [r3, #0]
 80155d0:	6862      	ldr	r2, [r4, #4]
 80155d2:	4628      	mov	r0, r5
 80155d4:	f000 f830 	bl	8015638 <memchr>
 80155d8:	b108      	cbz	r0, 80155de <_printf_i+0x1f2>
 80155da:	1b40      	subs	r0, r0, r5
 80155dc:	6060      	str	r0, [r4, #4]
 80155de:	6863      	ldr	r3, [r4, #4]
 80155e0:	6123      	str	r3, [r4, #16]
 80155e2:	2300      	movs	r3, #0
 80155e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155e8:	e7a8      	b.n	801553c <_printf_i+0x150>
 80155ea:	6923      	ldr	r3, [r4, #16]
 80155ec:	462a      	mov	r2, r5
 80155ee:	4649      	mov	r1, r9
 80155f0:	4640      	mov	r0, r8
 80155f2:	47d0      	blx	sl
 80155f4:	3001      	adds	r0, #1
 80155f6:	d0ab      	beq.n	8015550 <_printf_i+0x164>
 80155f8:	6823      	ldr	r3, [r4, #0]
 80155fa:	079b      	lsls	r3, r3, #30
 80155fc:	d413      	bmi.n	8015626 <_printf_i+0x23a>
 80155fe:	68e0      	ldr	r0, [r4, #12]
 8015600:	9b03      	ldr	r3, [sp, #12]
 8015602:	4298      	cmp	r0, r3
 8015604:	bfb8      	it	lt
 8015606:	4618      	movlt	r0, r3
 8015608:	e7a4      	b.n	8015554 <_printf_i+0x168>
 801560a:	2301      	movs	r3, #1
 801560c:	4632      	mov	r2, r6
 801560e:	4649      	mov	r1, r9
 8015610:	4640      	mov	r0, r8
 8015612:	47d0      	blx	sl
 8015614:	3001      	adds	r0, #1
 8015616:	d09b      	beq.n	8015550 <_printf_i+0x164>
 8015618:	3501      	adds	r5, #1
 801561a:	68e3      	ldr	r3, [r4, #12]
 801561c:	9903      	ldr	r1, [sp, #12]
 801561e:	1a5b      	subs	r3, r3, r1
 8015620:	42ab      	cmp	r3, r5
 8015622:	dcf2      	bgt.n	801560a <_printf_i+0x21e>
 8015624:	e7eb      	b.n	80155fe <_printf_i+0x212>
 8015626:	2500      	movs	r5, #0
 8015628:	f104 0619 	add.w	r6, r4, #25
 801562c:	e7f5      	b.n	801561a <_printf_i+0x22e>
 801562e:	bf00      	nop
 8015630:	08015c32 	.word	0x08015c32
 8015634:	08015c43 	.word	0x08015c43

08015638 <memchr>:
 8015638:	b2c9      	uxtb	r1, r1
 801563a:	4402      	add	r2, r0
 801563c:	b510      	push	{r4, lr}
 801563e:	4290      	cmp	r0, r2
 8015640:	4603      	mov	r3, r0
 8015642:	d101      	bne.n	8015648 <memchr+0x10>
 8015644:	2300      	movs	r3, #0
 8015646:	e003      	b.n	8015650 <memchr+0x18>
 8015648:	781c      	ldrb	r4, [r3, #0]
 801564a:	3001      	adds	r0, #1
 801564c:	428c      	cmp	r4, r1
 801564e:	d1f6      	bne.n	801563e <memchr+0x6>
 8015650:	4618      	mov	r0, r3
 8015652:	bd10      	pop	{r4, pc}

08015654 <memcpy>:
 8015654:	440a      	add	r2, r1
 8015656:	1e43      	subs	r3, r0, #1
 8015658:	4291      	cmp	r1, r2
 801565a:	d100      	bne.n	801565e <memcpy+0xa>
 801565c:	4770      	bx	lr
 801565e:	b510      	push	{r4, lr}
 8015660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015664:	4291      	cmp	r1, r2
 8015666:	f803 4f01 	strb.w	r4, [r3, #1]!
 801566a:	d1f9      	bne.n	8015660 <memcpy+0xc>
 801566c:	bd10      	pop	{r4, pc}

0801566e <memmove>:
 801566e:	4288      	cmp	r0, r1
 8015670:	b510      	push	{r4, lr}
 8015672:	eb01 0402 	add.w	r4, r1, r2
 8015676:	d902      	bls.n	801567e <memmove+0x10>
 8015678:	4284      	cmp	r4, r0
 801567a:	4623      	mov	r3, r4
 801567c:	d807      	bhi.n	801568e <memmove+0x20>
 801567e:	1e43      	subs	r3, r0, #1
 8015680:	42a1      	cmp	r1, r4
 8015682:	d008      	beq.n	8015696 <memmove+0x28>
 8015684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015688:	f803 2f01 	strb.w	r2, [r3, #1]!
 801568c:	e7f8      	b.n	8015680 <memmove+0x12>
 801568e:	4402      	add	r2, r0
 8015690:	4601      	mov	r1, r0
 8015692:	428a      	cmp	r2, r1
 8015694:	d100      	bne.n	8015698 <memmove+0x2a>
 8015696:	bd10      	pop	{r4, pc}
 8015698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801569c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80156a0:	e7f7      	b.n	8015692 <memmove+0x24>
	...

080156a4 <_free_r>:
 80156a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156a6:	2900      	cmp	r1, #0
 80156a8:	d043      	beq.n	8015732 <_free_r+0x8e>
 80156aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156ae:	1f0c      	subs	r4, r1, #4
 80156b0:	9001      	str	r0, [sp, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	bfb8      	it	lt
 80156b6:	18e4      	addlt	r4, r4, r3
 80156b8:	f000 f914 	bl	80158e4 <__malloc_lock>
 80156bc:	4a1e      	ldr	r2, [pc, #120]	; (8015738 <_free_r+0x94>)
 80156be:	9801      	ldr	r0, [sp, #4]
 80156c0:	6813      	ldr	r3, [r2, #0]
 80156c2:	b933      	cbnz	r3, 80156d2 <_free_r+0x2e>
 80156c4:	6063      	str	r3, [r4, #4]
 80156c6:	6014      	str	r4, [r2, #0]
 80156c8:	b003      	add	sp, #12
 80156ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156ce:	f000 b90f 	b.w	80158f0 <__malloc_unlock>
 80156d2:	42a3      	cmp	r3, r4
 80156d4:	d908      	bls.n	80156e8 <_free_r+0x44>
 80156d6:	6825      	ldr	r5, [r4, #0]
 80156d8:	1961      	adds	r1, r4, r5
 80156da:	428b      	cmp	r3, r1
 80156dc:	bf01      	itttt	eq
 80156de:	6819      	ldreq	r1, [r3, #0]
 80156e0:	685b      	ldreq	r3, [r3, #4]
 80156e2:	1949      	addeq	r1, r1, r5
 80156e4:	6021      	streq	r1, [r4, #0]
 80156e6:	e7ed      	b.n	80156c4 <_free_r+0x20>
 80156e8:	461a      	mov	r2, r3
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	b10b      	cbz	r3, 80156f2 <_free_r+0x4e>
 80156ee:	42a3      	cmp	r3, r4
 80156f0:	d9fa      	bls.n	80156e8 <_free_r+0x44>
 80156f2:	6811      	ldr	r1, [r2, #0]
 80156f4:	1855      	adds	r5, r2, r1
 80156f6:	42a5      	cmp	r5, r4
 80156f8:	d10b      	bne.n	8015712 <_free_r+0x6e>
 80156fa:	6824      	ldr	r4, [r4, #0]
 80156fc:	4421      	add	r1, r4
 80156fe:	1854      	adds	r4, r2, r1
 8015700:	6011      	str	r1, [r2, #0]
 8015702:	42a3      	cmp	r3, r4
 8015704:	d1e0      	bne.n	80156c8 <_free_r+0x24>
 8015706:	681c      	ldr	r4, [r3, #0]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	4421      	add	r1, r4
 801570c:	6053      	str	r3, [r2, #4]
 801570e:	6011      	str	r1, [r2, #0]
 8015710:	e7da      	b.n	80156c8 <_free_r+0x24>
 8015712:	d902      	bls.n	801571a <_free_r+0x76>
 8015714:	230c      	movs	r3, #12
 8015716:	6003      	str	r3, [r0, #0]
 8015718:	e7d6      	b.n	80156c8 <_free_r+0x24>
 801571a:	6825      	ldr	r5, [r4, #0]
 801571c:	1961      	adds	r1, r4, r5
 801571e:	428b      	cmp	r3, r1
 8015720:	bf02      	ittt	eq
 8015722:	6819      	ldreq	r1, [r3, #0]
 8015724:	685b      	ldreq	r3, [r3, #4]
 8015726:	1949      	addeq	r1, r1, r5
 8015728:	6063      	str	r3, [r4, #4]
 801572a:	bf08      	it	eq
 801572c:	6021      	streq	r1, [r4, #0]
 801572e:	6054      	str	r4, [r2, #4]
 8015730:	e7ca      	b.n	80156c8 <_free_r+0x24>
 8015732:	b003      	add	sp, #12
 8015734:	bd30      	pop	{r4, r5, pc}
 8015736:	bf00      	nop
 8015738:	20001ea4 	.word	0x20001ea4

0801573c <sbrk_aligned>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	4e0e      	ldr	r6, [pc, #56]	; (8015778 <sbrk_aligned+0x3c>)
 8015740:	460c      	mov	r4, r1
 8015742:	4605      	mov	r5, r0
 8015744:	6831      	ldr	r1, [r6, #0]
 8015746:	b911      	cbnz	r1, 801574e <sbrk_aligned+0x12>
 8015748:	f000 f8bc 	bl	80158c4 <_sbrk_r>
 801574c:	6030      	str	r0, [r6, #0]
 801574e:	4621      	mov	r1, r4
 8015750:	4628      	mov	r0, r5
 8015752:	f000 f8b7 	bl	80158c4 <_sbrk_r>
 8015756:	1c43      	adds	r3, r0, #1
 8015758:	d00a      	beq.n	8015770 <sbrk_aligned+0x34>
 801575a:	1cc4      	adds	r4, r0, #3
 801575c:	f024 0403 	bic.w	r4, r4, #3
 8015760:	42a0      	cmp	r0, r4
 8015762:	d007      	beq.n	8015774 <sbrk_aligned+0x38>
 8015764:	1a21      	subs	r1, r4, r0
 8015766:	4628      	mov	r0, r5
 8015768:	f000 f8ac 	bl	80158c4 <_sbrk_r>
 801576c:	3001      	adds	r0, #1
 801576e:	d101      	bne.n	8015774 <sbrk_aligned+0x38>
 8015770:	f04f 34ff 	mov.w	r4, #4294967295
 8015774:	4620      	mov	r0, r4
 8015776:	bd70      	pop	{r4, r5, r6, pc}
 8015778:	20001ea8 	.word	0x20001ea8

0801577c <_malloc_r>:
 801577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015780:	1ccd      	adds	r5, r1, #3
 8015782:	4607      	mov	r7, r0
 8015784:	f025 0503 	bic.w	r5, r5, #3
 8015788:	3508      	adds	r5, #8
 801578a:	2d0c      	cmp	r5, #12
 801578c:	bf38      	it	cc
 801578e:	250c      	movcc	r5, #12
 8015790:	2d00      	cmp	r5, #0
 8015792:	db01      	blt.n	8015798 <_malloc_r+0x1c>
 8015794:	42a9      	cmp	r1, r5
 8015796:	d905      	bls.n	80157a4 <_malloc_r+0x28>
 8015798:	230c      	movs	r3, #12
 801579a:	2600      	movs	r6, #0
 801579c:	603b      	str	r3, [r7, #0]
 801579e:	4630      	mov	r0, r6
 80157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a4:	4e2e      	ldr	r6, [pc, #184]	; (8015860 <_malloc_r+0xe4>)
 80157a6:	f000 f89d 	bl	80158e4 <__malloc_lock>
 80157aa:	6833      	ldr	r3, [r6, #0]
 80157ac:	461c      	mov	r4, r3
 80157ae:	bb34      	cbnz	r4, 80157fe <_malloc_r+0x82>
 80157b0:	4629      	mov	r1, r5
 80157b2:	4638      	mov	r0, r7
 80157b4:	f7ff ffc2 	bl	801573c <sbrk_aligned>
 80157b8:	1c43      	adds	r3, r0, #1
 80157ba:	4604      	mov	r4, r0
 80157bc:	d14d      	bne.n	801585a <_malloc_r+0xde>
 80157be:	6834      	ldr	r4, [r6, #0]
 80157c0:	4626      	mov	r6, r4
 80157c2:	2e00      	cmp	r6, #0
 80157c4:	d140      	bne.n	8015848 <_malloc_r+0xcc>
 80157c6:	6823      	ldr	r3, [r4, #0]
 80157c8:	4631      	mov	r1, r6
 80157ca:	4638      	mov	r0, r7
 80157cc:	eb04 0803 	add.w	r8, r4, r3
 80157d0:	f000 f878 	bl	80158c4 <_sbrk_r>
 80157d4:	4580      	cmp	r8, r0
 80157d6:	d13a      	bne.n	801584e <_malloc_r+0xd2>
 80157d8:	6821      	ldr	r1, [r4, #0]
 80157da:	3503      	adds	r5, #3
 80157dc:	4638      	mov	r0, r7
 80157de:	1a6d      	subs	r5, r5, r1
 80157e0:	f025 0503 	bic.w	r5, r5, #3
 80157e4:	3508      	adds	r5, #8
 80157e6:	2d0c      	cmp	r5, #12
 80157e8:	bf38      	it	cc
 80157ea:	250c      	movcc	r5, #12
 80157ec:	4629      	mov	r1, r5
 80157ee:	f7ff ffa5 	bl	801573c <sbrk_aligned>
 80157f2:	3001      	adds	r0, #1
 80157f4:	d02b      	beq.n	801584e <_malloc_r+0xd2>
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	442b      	add	r3, r5
 80157fa:	6023      	str	r3, [r4, #0]
 80157fc:	e00e      	b.n	801581c <_malloc_r+0xa0>
 80157fe:	6822      	ldr	r2, [r4, #0]
 8015800:	1b52      	subs	r2, r2, r5
 8015802:	d41e      	bmi.n	8015842 <_malloc_r+0xc6>
 8015804:	2a0b      	cmp	r2, #11
 8015806:	d916      	bls.n	8015836 <_malloc_r+0xba>
 8015808:	1961      	adds	r1, r4, r5
 801580a:	42a3      	cmp	r3, r4
 801580c:	6025      	str	r5, [r4, #0]
 801580e:	bf18      	it	ne
 8015810:	6059      	strne	r1, [r3, #4]
 8015812:	6863      	ldr	r3, [r4, #4]
 8015814:	bf08      	it	eq
 8015816:	6031      	streq	r1, [r6, #0]
 8015818:	5162      	str	r2, [r4, r5]
 801581a:	604b      	str	r3, [r1, #4]
 801581c:	f104 060b 	add.w	r6, r4, #11
 8015820:	4638      	mov	r0, r7
 8015822:	f000 f865 	bl	80158f0 <__malloc_unlock>
 8015826:	1d23      	adds	r3, r4, #4
 8015828:	f026 0607 	bic.w	r6, r6, #7
 801582c:	1af2      	subs	r2, r6, r3
 801582e:	d0b6      	beq.n	801579e <_malloc_r+0x22>
 8015830:	1b9b      	subs	r3, r3, r6
 8015832:	50a3      	str	r3, [r4, r2]
 8015834:	e7b3      	b.n	801579e <_malloc_r+0x22>
 8015836:	6862      	ldr	r2, [r4, #4]
 8015838:	42a3      	cmp	r3, r4
 801583a:	bf0c      	ite	eq
 801583c:	6032      	streq	r2, [r6, #0]
 801583e:	605a      	strne	r2, [r3, #4]
 8015840:	e7ec      	b.n	801581c <_malloc_r+0xa0>
 8015842:	4623      	mov	r3, r4
 8015844:	6864      	ldr	r4, [r4, #4]
 8015846:	e7b2      	b.n	80157ae <_malloc_r+0x32>
 8015848:	4634      	mov	r4, r6
 801584a:	6876      	ldr	r6, [r6, #4]
 801584c:	e7b9      	b.n	80157c2 <_malloc_r+0x46>
 801584e:	230c      	movs	r3, #12
 8015850:	4638      	mov	r0, r7
 8015852:	603b      	str	r3, [r7, #0]
 8015854:	f000 f84c 	bl	80158f0 <__malloc_unlock>
 8015858:	e7a1      	b.n	801579e <_malloc_r+0x22>
 801585a:	6025      	str	r5, [r4, #0]
 801585c:	e7de      	b.n	801581c <_malloc_r+0xa0>
 801585e:	bf00      	nop
 8015860:	20001ea4 	.word	0x20001ea4

08015864 <_realloc_r>:
 8015864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015868:	4680      	mov	r8, r0
 801586a:	4614      	mov	r4, r2
 801586c:	460e      	mov	r6, r1
 801586e:	b921      	cbnz	r1, 801587a <_realloc_r+0x16>
 8015870:	4611      	mov	r1, r2
 8015872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015876:	f7ff bf81 	b.w	801577c <_malloc_r>
 801587a:	b92a      	cbnz	r2, 8015888 <_realloc_r+0x24>
 801587c:	4625      	mov	r5, r4
 801587e:	f7ff ff11 	bl	80156a4 <_free_r>
 8015882:	4628      	mov	r0, r5
 8015884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015888:	f000 f838 	bl	80158fc <_malloc_usable_size_r>
 801588c:	4284      	cmp	r4, r0
 801588e:	4607      	mov	r7, r0
 8015890:	d802      	bhi.n	8015898 <_realloc_r+0x34>
 8015892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015896:	d812      	bhi.n	80158be <_realloc_r+0x5a>
 8015898:	4621      	mov	r1, r4
 801589a:	4640      	mov	r0, r8
 801589c:	f7ff ff6e 	bl	801577c <_malloc_r>
 80158a0:	4605      	mov	r5, r0
 80158a2:	2800      	cmp	r0, #0
 80158a4:	d0ed      	beq.n	8015882 <_realloc_r+0x1e>
 80158a6:	42bc      	cmp	r4, r7
 80158a8:	4622      	mov	r2, r4
 80158aa:	4631      	mov	r1, r6
 80158ac:	bf28      	it	cs
 80158ae:	463a      	movcs	r2, r7
 80158b0:	f7ff fed0 	bl	8015654 <memcpy>
 80158b4:	4631      	mov	r1, r6
 80158b6:	4640      	mov	r0, r8
 80158b8:	f7ff fef4 	bl	80156a4 <_free_r>
 80158bc:	e7e1      	b.n	8015882 <_realloc_r+0x1e>
 80158be:	4635      	mov	r5, r6
 80158c0:	e7df      	b.n	8015882 <_realloc_r+0x1e>
	...

080158c4 <_sbrk_r>:
 80158c4:	b538      	push	{r3, r4, r5, lr}
 80158c6:	2300      	movs	r3, #0
 80158c8:	4d05      	ldr	r5, [pc, #20]	; (80158e0 <_sbrk_r+0x1c>)
 80158ca:	4604      	mov	r4, r0
 80158cc:	4608      	mov	r0, r1
 80158ce:	602b      	str	r3, [r5, #0]
 80158d0:	f7ec f8c8 	bl	8001a64 <_sbrk>
 80158d4:	1c43      	adds	r3, r0, #1
 80158d6:	d102      	bne.n	80158de <_sbrk_r+0x1a>
 80158d8:	682b      	ldr	r3, [r5, #0]
 80158da:	b103      	cbz	r3, 80158de <_sbrk_r+0x1a>
 80158dc:	6023      	str	r3, [r4, #0]
 80158de:	bd38      	pop	{r3, r4, r5, pc}
 80158e0:	20001eac 	.word	0x20001eac

080158e4 <__malloc_lock>:
 80158e4:	4801      	ldr	r0, [pc, #4]	; (80158ec <__malloc_lock+0x8>)
 80158e6:	f000 b811 	b.w	801590c <__retarget_lock_acquire_recursive>
 80158ea:	bf00      	nop
 80158ec:	20001eb0 	.word	0x20001eb0

080158f0 <__malloc_unlock>:
 80158f0:	4801      	ldr	r0, [pc, #4]	; (80158f8 <__malloc_unlock+0x8>)
 80158f2:	f000 b80c 	b.w	801590e <__retarget_lock_release_recursive>
 80158f6:	bf00      	nop
 80158f8:	20001eb0 	.word	0x20001eb0

080158fc <_malloc_usable_size_r>:
 80158fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015900:	1f18      	subs	r0, r3, #4
 8015902:	2b00      	cmp	r3, #0
 8015904:	bfbc      	itt	lt
 8015906:	580b      	ldrlt	r3, [r1, r0]
 8015908:	18c0      	addlt	r0, r0, r3
 801590a:	4770      	bx	lr

0801590c <__retarget_lock_acquire_recursive>:
 801590c:	4770      	bx	lr

0801590e <__retarget_lock_release_recursive>:
 801590e:	4770      	bx	lr

08015910 <_init>:
 8015910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015912:	bf00      	nop
 8015914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015916:	bc08      	pop	{r3}
 8015918:	469e      	mov	lr, r3
 801591a:	4770      	bx	lr

0801591c <_fini>:
 801591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801591e:	bf00      	nop
 8015920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015922:	bc08      	pop	{r3}
 8015924:	469e      	mov	lr, r3
 8015926:	4770      	bx	lr
