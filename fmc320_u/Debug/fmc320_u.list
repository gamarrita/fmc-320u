
fmc320_u.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001570c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08015944  08015944  00025944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015e24  08015e24  00025e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015e2c  08015e2c  00025e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015e30  08015e30  00025e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015e34  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca9  200001b8  08015fec  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e61  08015fec  00031e61  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042547  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009280  00000000  00000000  00072735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002988  00000000  00000000  0007b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002490  00000000  00000000  0007e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040ac5  00000000  00000000  000807d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fa24  00000000  00000000  000c1295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001785f7  00000000  00000000  00100cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002792b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a868  00000000  00000000  00279300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	0801592c 	.word	0x0801592c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	0801592c 	.word	0x0801592c

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20001680 	.word	0x20001680
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fb28 	bl	800e9e8 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fb4c 	bl	800ea38 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001688 	.word	0x20001688
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c88 	.word	0x20001c88

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fb82 	bl	800db6c <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d fa61 	bl	800d934 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001728 	.word	0x20001728
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c88 	.word	0x20001c88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2000172c 	.word	0x2000172c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017bc 	.word	0x200017bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017b0 	.word	0x200017b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001688 	.word	0x20001688
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fcf9 	bl	800e204 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	08015944 	.word	0x08015944
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
 * @brief  Application ThreadX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT App_ThreadX_Init(VOID *memory_ptr) // @suppress("Name convention for function")
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN App_ThreadX_MEM_POOL */
    /* USER CODE END App_ThreadX_MEM_POOL */
    /* USER CODE BEGIN App_ThreadX_Init */
    tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d ffc6 	bl	800e804 <_txe_thread_create>
    menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

    tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d ffb0 	bl	800e804 <_txe_thread_create>
    0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

    tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fed2 	bl	800e654 <_txe_semaphore_create>

    tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fd3f 	bl	800e344 <_txe_queue_create>
#ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
    /* USER CODE END App_ThreadX_Init */

    return (ret);
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000acd 	.word	0x08000acd
 80008d8:	08015958 	.word	0x08015958
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000b91 	.word	0x08000b91
 80008e8:	08015964 	.word	0x08015964
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	08015974 	.word	0x08015974
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	08015988 	.word	0x08015988
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
 * @brief  MX_ThreadX_Init
 * @param  None
 * @retval None
 */
void MX_ThreadX_Init(void) // @suppress("Name convention for function")
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN  Before_Kernel_Start */

    /* USER CODE END  Before_Kernel_Start */

    tx_kernel_enter();
 8000908:	f00a fefe 	bl	800b708 <_tx_initialize_kernel_enter>

    /* USER CODE BEGIN  Kernel_Start_Error */

    /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
 * @brief  App_ThreadX_LowPower_Timer_Setup
 * @param  count : TX timer count
 * @retval None
 */
void App_ThreadX_LowPower_Timer_Setup(ULONG count) // @suppress("Name convention for function")
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

    const int rtc_clk = 32768;
 8000918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091c:	617b      	str	r3, [r7, #20]
    const int rtc_prescaller = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	613b      	str	r3, [r7, #16]

#ifdef FM_THREADX_LOW_POWER
    uint32_t ticks_to_sleep;

    g_lptim1_start = LPTIM1->CNT;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <App_ThreadX_LowPower_Timer_Setup+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <App_ThreadX_LowPower_Timer_Setup+0x5c>)
 800092a:	801a      	strh	r2, [r3, #0]
    /*
     * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
     */
    ticks_to_sleep = (rtc_clk / rtc_prescaller) * count;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fb92 f3f3 	sdiv	r3, r2, r3
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <App_ThreadX_LowPower_Timer_Setup+0x60>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <App_ThreadX_LowPower_Timer_Setup+0x64>)
 8000952:	f008 fe63 	bl	800961c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>
    RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
    {
        Error_Handler();
 800095c:	f000 fd24 	bl	80013a8 <Error_Handler>
    }

#endif
    /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	46004400 	.word	0x46004400
 800096c:	20000608 	.word	0x20000608
 8000970:	51eb851f 	.word	0x51eb851f
 8000974:	200014a4 	.word	0x200014a4

08000978 <App_ThreadX_LowPower_Enter>:
 * @brief  App_ThreadX_LowPower_Enter
 * @param  None
 * @retval None
 */
void App_ThreadX_LowPower_Enter(void) // @suppress("Name convention for function")
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <App_ThreadX_LowPower_Enter+0x18>)
 8000982:	f003 fd51 	bl	8004428 <HAL_GPIO_WritePin>

#ifdef FM_THREADX_LOW_POWER
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000986:	2001      	movs	r0, #1
 8000988:	f004 f9ec 	bl	8004d64 <HAL_PWREx_EnterSTOP2Mode>
#endif

    /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	42020400 	.word	0x42020400

08000994 <App_ThreadX_LowPower_Exit>:
 * @brief  App_ThreadX_LowPower_Exit
 * @param  None
 * @retval None
 */
void App_ThreadX_LowPower_Exit(void) // @suppress("Name convention for function")
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	; 0x78
 8000998:	af00      	add	r7, sp, #0
    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
#ifdef FM_THREADX_LOW_POWER
    RCC_OscInitTypeDef RCC_OscInitStruct =
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f014 fa7c 	bl	8014ea0 <memset>
    {
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f004 f8f7 	bl	8004bac <HAL_PWREx_ControlVoltageScaling>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <App_ThreadX_LowPower_Exit+0x34>
    {
        Error_Handler();
 80009c4:	f000 fcf0 	bl	80013a8 <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 80009c8:	f004 f8e0 	bl	8004b8c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009d4:	f023 0318 	bic.w	r3, r3, #24
 80009d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80009dc:	2314      	movs	r3, #20
 80009de:	61bb      	str	r3, [r7, #24]
    | RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009e0:	2381      	movs	r3, #129	; 0x81
 80009e2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80009ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 face 	bl	8004f9c <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <App_ThreadX_LowPower_Exit+0x76>
    {
        Error_Handler();
 8000a06:	f000 fccf 	bl	80013a8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	603b      	str	r3, [r7, #0]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 f994 	bl	8005d54 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <App_ThreadX_LowPower_Exit+0xa2>
    {
        Error_Handler();
 8000a32:	f000 fcb9 	bl	80013a8 <Error_Handler>
    }
#endif

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <App_ThreadX_LowPower_Exit+0xb8>)
 8000a3c:	f003 fcf4 	bl	8004428 <HAL_GPIO_WritePin>

    /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000a40:	bf00      	nop
 8000a42:	3778      	adds	r7, #120	; 0x78
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	46020c00 	.word	0x46020c00
 8000a4c:	42020400 	.word	0x42020400

08000a50 <App_ThreadX_LowPower_Timer_Adjust>:
 * @brief  App_ThreadX_LowPower_Timer_Adjust
 * @param  None
 * @retval Amount of time (in ticks)
 */
ULONG App_ThreadX_LowPower_Timer_Adjust(void) // @suppress("Name convention for function")
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
    static const int lptim_clk_div_presc = 2048;

#ifdef FM_THREADX_LOW_POWER
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <App_ThreadX_LowPower_Timer_Adjust+0x68>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a5e:	801a      	strh	r2, [r3, #0]
    cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <App_ThreadX_LowPower_Timer_Adjust+0x70>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	607b      	str	r3, [r7, #4]
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2264      	movs	r2, #100	; 0x64
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	607b      	str	r3, [r7, #4]
    cnt_ret += cnt_drift;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
    cnt_drift = cnt_ret % lptim_clk_div_presc;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a90:	fb01 f202 	mul.w	r2, r1, r2
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a9a:	801a      	strh	r2, [r3, #0]
    cnt_ret /= lptim_clk_div_presc;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000aa8:	607b      	str	r3, [r7, #4]
    return (cnt_ret);
 8000aaa:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
    /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	46004400 	.word	0x46004400
 8000abc:	2000060a 	.word	0x2000060a
 8000ac0:	20000608 	.word	0x20000608
 8000ac4:	200013c0 	.word	0x200013c0
 8000ac8:	08015bb0 	.word	0x08015bb0

08000acc <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    static const int queue_stay = 100;
    static const int backlight_countdown = 10;
    static int backlight_cd = 0;
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <menu_task_entry+0xa8>)
 8000ad6:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while (1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <menu_task_entry+0xac>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f107 030f 	add.w	r3, r7, #15
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4824      	ldr	r0, [pc, #144]	; (8000b7c <menu_task_entry+0xb0>)
 8000aea:	f00d fcf9 	bl	800e4e0 <_txe_queue_receive>
 8000aee:	6138      	str	r0, [r7, #16]
        queue_stay);

        if (ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <menu_task_entry+0xa8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d02e      	beq.n	8000b56 <menu_task_entry+0x8a>
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <menu_task_entry+0xb4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d02a      	beq.n	8000b56 <menu_task_entry+0x8a>
        {
            if (event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d109      	bne.n	8000b1a <menu_task_entry+0x4e>
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <menu_task_entry+0xb8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dd05      	ble.n	8000b1a <menu_task_entry+0x4e>
            {
                backlight_cd--;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <menu_task_entry+0xb8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <menu_task_entry+0xb8>)
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	e01d      	b.n	8000b56 <menu_task_entry+0x8a>
            }
            else if (event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10d      	bne.n	8000b3c <menu_task_entry+0x70>
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <menu_task_entry+0xb8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dc09      	bgt.n	8000b3c <menu_task_entry+0x70>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <menu_task_entry+0xbc>)
 8000b30:	f003 fc7a 	bl	8004428 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <menu_task_entry+0xb8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e00c      	b.n	8000b56 <menu_task_entry+0x8a>
            }
            else if (event_next != EVENT_LCD_REFRESH)
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d009      	beq.n	8000b56 <menu_task_entry+0x8a>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <menu_task_entry+0xbc>)
 8000b4a:	f003 fc6d 	bl	8004428 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = backlight_countdown;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <menu_task_entry+0xc0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <menu_task_entry+0xb8>)
 8000b54:	6013      	str	r3, [r2, #0]
            }
        }

        if (ret_status == TX_SUCCESS)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <menu_task_entry+0x9c>
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(event_next);
 8000b5c:	7bfa      	ldrb	r2, [r7, #15]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
 8000b64:	6178      	str	r0, [r7, #20]
 8000b66:	e7b9      	b.n	8000adc <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(EVENT_LCD_REFRESH);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4798      	blx	r3
 8000b6e:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000b70:	e7b4      	b.n	8000adc <menu_task_entry+0x10>
 8000b72:	bf00      	nop
 8000b74:	08014775 	.word	0x08014775
 8000b78:	08015bb4 	.word	0x08015bb4
 8000b7c:	20001388 	.word	0x20001388
 8000b80:	080149b1 	.word	0x080149b1
 8000b84:	200013c4 	.word	0x200013c4
 8000b88:	42020800 	.word	0x42020800
 8000b8c:	08015bb8 	.word	0x08015bb8

08000b90 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000b98:	230e      	movs	r3, #14
 8000b9a:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <debounce_task_entry+0x78>)
 8000ba2:	f00d fded 	bl	800e780 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00c f9dd 	bl	800cf68 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bbc:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bcc:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <debounce_task_entry+0x7c>)
 8000bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bdc:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <debounce_task_entry+0x7c>)
 8000be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <debounce_task_entry+0x7c>)
 8000be8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bec:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000bee:	2015      	movs	r0, #21
 8000bf0:	f003 fa26 	bl	8004040 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000bf4:	2016      	movs	r0, #22
 8000bf6:	f003 fa23 	bl	8004040 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000bfa:	2017      	movs	r0, #23
 8000bfc:	f003 fa20 	bl	8004040 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000c00:	2018      	movs	r0, #24
 8000c02:	f003 fa1d 	bl	8004040 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000c06:	e7c9      	b.n	8000b9c <debounce_task_entry+0xc>
 8000c08:	2000136c 	.word	0x2000136c
 8000c0c:	46022000 	.word	0x46022000

08000c10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000c14:	f000 fee2 	bl	80019dc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000c18:	f000 f82c 	bl	8000c74 <SystemClock_Config>

    /* Configure the System Power */
    SystemPower_Config();
 8000c1c:	f000 f882 	bl	8000d24 <SystemPower_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000c20:	f000 fac4 	bl	80011ac <MX_GPIO_Init>
    MX_ADC1_Init();
 8000c24:	f000 f8aa 	bl	8000d7c <MX_ADC1_Init>
    MX_ICACHE_Init();
 8000c28:	f000 f916 	bl	8000e58 <MX_ICACHE_Init>
    MX_LPTIM1_Init();
 8000c2c:	f000 f928 	bl	8000e80 <MX_LPTIM1_Init>
    MX_RTC_Init();
 8000c30:	f000 f972 	bl	8000f18 <MX_RTC_Init>
    MX_SPI1_Init();
 8000c34:	f000 f9fe 	bl	8001034 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8000c38:	f000 fa6c 	bl	8001114 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    fm_lcd_clear();
 8000c3c:	f00e ff6b 	bl	800fb16 <fm_lcd_clear>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c44:	2100      	movs	r1, #0
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <main+0x58>)
 8000c48:	f002 ffb4 	bl	8003bb4 <HAL_ADCEx_Calibration_Start>
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <main+0x5c>)
 8000c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <main+0x5c>)
 8000c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    HAL_LPTIM_Counter_Start(&hlptim1);
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <main+0x60>)
 8000c5e:	f003 fd5d 	bl	800471c <HAL_LPTIM_Counter_Start>

    /* USER CODE END 2 */

    MX_ThreadX_Init();
 8000c62:	f7ff fe4f 	bl	8000904 <MX_ThreadX_Init>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000c66:	e7fe      	b.n	8000c66 <main+0x56>
 8000c68:	200013c8 	.word	0x200013c8
 8000c6c:	46020c00 	.word	0x46020c00
 8000c70:	20001454 	.word	0x20001454

08000c74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09e      	sub	sp, #120	; 0x78
 8000c78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2260      	movs	r2, #96	; 0x60
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f014 f90c 	bl	8014ea0 <memset>
    {
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	615a      	str	r2, [r3, #20]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f003 ff87 	bl	8004bac <HAL_PWREx_ControlVoltageScaling>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8000ca4:	f000 fb80 	bl	80013a8 <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8000ca8:	f003 ff70 	bl	8004b8c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <SystemClock_Config+0xac>)
 8000cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <SystemClock_Config+0xac>)
 8000cb4:	f023 0318 	bic.w	r3, r3, #24
 8000cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000cbc:	2314      	movs	r3, #20
 8000cbe:	61bb      	str	r3, [r7, #24]
    | RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc0:	2381      	movs	r3, #129	; 0x81
 8000cc2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 f95e 	bl	8004f9c <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x76>
    {
        Error_Handler();
 8000ce6:	f000 fb5f 	bl	80013a8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cea:	231f      	movs	r3, #31
 8000cec:	603b      	str	r3, [r7, #0]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 f824 	bl	8005d54 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8000d12:	f000 fb49 	bl	80013a8 <Error_Handler>
    }
}
 8000d16:	bf00      	nop
 8000d18:	3778      	adds	r7, #120	; 0x78
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	46020c00 	.word	0x46020c00

08000d24 <SystemPower_Config>:
/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    HAL_PWREx_EnableVddIO2();
 8000d28:	f004 f848 	bl	8004dbc <HAL_PWREx_EnableVddIO2>

    /*
     * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
     */
    HAL_PWREx_DisableUCPDDeadBattery();
 8000d2c:	f004 f866 	bl	8004dfc <HAL_PWREx_DisableUCPDDeadBattery>

    /*
     * SRAM Power Down In Stop Mode Config
     */
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <SystemPower_Config+0x44>)
 8000d32:	f004 f873 	bl	8004e1c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_DCACHE1_FULL_STOP_RETENTION);
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <SystemPower_Config+0x48>)
 8000d38:	f004 f870 	bl	8004e1c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_DMA2DRAM_FULL_STOP_RETENTION);
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <SystemPower_Config+0x4c>)
 8000d3e:	f004 f86d 	bl	8004e1c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA32RAM_FULL_STOP_RETENTION);
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <SystemPower_Config+0x50>)
 8000d44:	f004 f86a 	bl	8004e1c <HAL_PWREx_DisableRAMsContentStopRetention>
    HAL_PWREx_DisableRAMsContentStopRetention(
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <SystemPower_Config+0x54>)
 8000d4a:	f004 f867 	bl	8004e1c <HAL_PWREx_DisableRAMsContentStopRetention>
    PWR_PERIPHRAM_FULL_STOP_RETENTION);

    /*
     * Switch to SMPS regulator instead of LDO
     */
    if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f003 ffb8 	bl	8004cc4 <HAL_PWREx_ConfigSupply>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemPower_Config+0x3a>
    {
        Error_Handler();
 8000d5a:	f000 fb25 	bl	80013a8 <Error_Handler>
    }

    /*
     * SRAM4 Fast In Run Mode Config
     */
    HAL_PWREx_EnableSRAM4FastWakeUp();
 8000d5e:	f004 f90d 	bl	8004f7c <HAL_PWREx_EnableSRAM4FastWakeUp>
    /* USER CODE BEGIN PWR */
    /* USER CODE END PWR */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	00080001 	.word	0x00080001
 8000d6c:	00200001 	.word	0x00200001
 8000d70:	00400001 	.word	0x00400001
 8000d74:	01000001 	.word	0x01000001
 8000d78:	00800001 	.word	0x00800001

08000d7c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig =
 8000d82:	463b      	mov	r3, r7
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f014 f889 	bl	8014ea0 <memset>

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000d90:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <MX_ADC1_Init+0xd4>)
 8000d92:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000d96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d9a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	609a      	str	r2, [r3, #8]
    hadc1.Init.GainCompensation = 0;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	771a      	strb	r2, [r3, #28]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    hadc1.Init.NbrOfConversion = 1;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	669a      	str	r2, [r3, #104]	; 0x68
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
    hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	651a      	str	r2, [r3, #80]	; 0x50
    hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc1.Init.OversamplingMode = DISABLE;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000e06:	f001 f9cd 	bl	80021a4 <HAL_ADC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_ADC1_Init+0x98>
    {
        Error_Handler();
 8000e10:	f000 faca 	bl	80013a8 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0xd8>)
 8000e16:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e24:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e26:	2304      	movs	r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_ADC1_Init+0xd0>)
 8000e34:	f001 fe1c 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0xc6>
    {
        Error_Handler();
 8000e3e:	f000 fab3 	bl	80013a8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200013c8 	.word	0x200013c8
 8000e50:	42028000 	.word	0x42028000
 8000e54:	ce080000 	.word	0xce080000

08000e58 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

    /* USER CODE END ICACHE_Init 1 */

    /** Enable instruction cache in 1-way (direct mapped cache)
     */
    if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 fb2d 	bl	80044bc <HAL_ICACHE_ConfigAssociativityMode>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ICACHE_Init+0x14>
    {
        Error_Handler();
 8000e68:	f000 fa9e 	bl	80013a8 <Error_Handler>
    }
    if (HAL_ICACHE_Enable() != HAL_OK)
 8000e6c:	f003 fb46 	bl	80044fc <HAL_ICACHE_Enable>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ICACHE_Init+0x22>
    {
        Error_Handler();
 8000e76:	f000 fa97 	bl	80013a8 <Error_Handler>
    }
    /* USER CODE BEGIN ICACHE_Init 2 */

    /* USER CODE END ICACHE_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_LPTIM1_Init>:
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    /* USER CODE END LPTIM1_Init 0 */

    /* USER CODE BEGIN LPTIM1_Init 1 */

    /* USER CODE END LPTIM1_Init 1 */
    hlptim1.Instance = LPTIM1;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <MX_LPTIM1_Init+0x90>)
 8000e88:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e96:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	615a      	str	r2, [r3, #20]
    hlptim1.Init.Period = 65535;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea6:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
    hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
    hlptim1.Init.RepetitionCounter = 0;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_LPTIM1_Init+0x8c>)
 8000ec8:	f003 fb28 	bl	800451c <HAL_LPTIM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_LPTIM1_Init+0x56>
    {
        Error_Handler();
 8000ed2:	f000 fa69 	bl	80013a8 <Error_Handler>
    /*
     * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
     * configured
     *
     */
    __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <MX_LPTIM1_Init+0x94>)
 8000efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

    /* USER CODE END LPTIM1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20001454 	.word	0x20001454
 8000f10:	46004400 	.word	0x46004400
 8000f14:	46020c00 	.word	0x46020c00

08000f18 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_PrivilegeStateTypeDef privilegeState =
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]
    {
        0
    };
    RTC_TimeTypeDef sTime =
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
    {
        0
    };
    RTC_DateTypeDef sDate =
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <MX_RTC_Init+0x114>)
 8000f48:	4a39      	ldr	r2, [pc, #228]	; (8001030 <MX_RTC_Init+0x118>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_RTC_Init+0x114>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <MX_RTC_Init+0x114>)
 8000f54:	227f      	movs	r2, #127	; 0x7f
 8000f56:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <MX_RTC_Init+0x114>)
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f5e:	4b33      	ldr	r3, [pc, #204]	; (800102c <MX_RTC_Init+0x114>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_RTC_Init+0x114>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_RTC_Init+0x114>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_RTC_Init+0x114>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	61da      	str	r2, [r3, #28]
    hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_RTC_Init+0x114>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
    hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_RTC_Init+0x114>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f84:	4829      	ldr	r0, [pc, #164]	; (800102c <MX_RTC_Init+0x114>)
 8000f86:	f007 fffd 	bl	8008f84 <HAL_RTC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_RTC_Init+0x7c>
    {
        Error_Handler();
 8000f90:	f000 fa0a 	bl	80013a8 <Error_Handler>
    }
    privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <MX_RTC_Init+0x114>)
 8000fac:	f008 fc20 	bl	80097f0 <HAL_RTCEx_PrivilegeModeSet>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_RTC_Init+0xa2>
    {
        Error_Handler();
 8000fb6:	f000 f9f7 	bl	80013a8 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 17;
 8000fba:	2311      	movs	r3, #17
 8000fbc:	723b      	strb	r3, [r7, #8]
    sTime.Minutes = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	727b      	strb	r3, [r7, #9]
    sTime.Seconds = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	72bb      	strb	r3, [r7, #10]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4815      	ldr	r0, [pc, #84]	; (800102c <MX_RTC_Init+0x114>)
 8000fd8:	f008 f856 	bl	8009088 <HAL_RTC_SetTime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_RTC_Init+0xce>
    {
        Error_Handler();
 8000fe2:	f000 f9e1 	bl	80013a8 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	713b      	strb	r3, [r7, #4]
    sDate.Month = RTC_MONTH_MAY;
 8000fea:	2305      	movs	r3, #5
 8000fec:	717b      	strb	r3, [r7, #5]
    sDate.Date = 10;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	71bb      	strb	r3, [r7, #6]
    sDate.Year = 23;
 8000ff2:	2317      	movs	r3, #23
 8000ff4:	71fb      	strb	r3, [r7, #7]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <MX_RTC_Init+0x114>)
 8000ffe:	f008 f951 	bl	80092a4 <HAL_RTC_SetDate>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_RTC_Init+0xf4>
    {
        Error_Handler();
 8001008:	f000 f9ce 	bl	80013a8 <Error_Handler>
    }

    /** Enable the WakeUp
     */
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16,
 800100c:	2300      	movs	r3, #0
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_RTC_Init+0x114>)
 8001016:	f008 fb01 	bl	800961c <HAL_RTCEx_SetWakeUpTimer_IT>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0x10c>
    0) != HAL_OK)
    {
        Error_Handler();
 8001020:	f000 f9c2 	bl	80013a8 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200014a4 	.word	0x200014a4
 8001030:	46007800 	.word	0x46007800

08001034 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 0 */

    /* USER CODE END SPI1_Init 0 */

    SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct =
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <MX_SPI1_Init+0xd8>)
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <MX_SPI1_Init+0xdc>)
 8001048:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <MX_SPI1_Init+0xd8>)
 800104c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001050:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <MX_SPI1_Init+0xd8>)
 8001054:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001058:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_SPI1_Init+0xd8>)
 800105c:	2207      	movs	r2, #7
 800105e:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_SPI1_Init+0xd8>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <MX_SPI1_Init+0xd8>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_SPI1_Init+0xd8>)
 800106e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001072:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_SPI1_Init+0xd8>)
 8001076:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800107a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_SPI1_Init+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_SPI1_Init+0xd8>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_SPI1_Init+0xd8>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x7;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_SPI1_Init+0xd8>)
 8001090:	2207      	movs	r2, #7
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_SPI1_Init+0xd8>)
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_SPI1_Init+0xd8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_SPI1_Init+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_SPI1_Init+0xd8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_SPI1_Init+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_SPI1_Init+0xd8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_SPI1_Init+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_SPI1_Init+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	659a      	str	r2, [r3, #88]	; 0x58
    hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_SPI1_Init+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_SPI1_Init+0xd8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_SPI1_Init+0xd8>)
 80010d4:	f008 fbba 	bl	800984c <HAL_SPI_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_SPI1_Init+0xae>
    {
        Error_Handler();
 80010de:	f000 f963 	bl	80013a8 <Error_Handler>
    }
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection =
 80010e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
    SPI_GRP1_GPDMA_CH0_TCF_TRG;
    HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity =
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
    SPI_TRIG_POLARITY_RISING;
    if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1,
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_SPI1_Init+0xd8>)
 80010f6:	f008 ffc6 	bl	800a086 <HAL_SPIEx_SetConfigAutonomousMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_SPI1_Init+0xd0>
    &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
    {
        Error_Handler();
 8001100:	f000 f952 	bl	80013a8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200014d4 	.word	0x200014d4
 8001110:	40013000 	.word	0x40013000

08001114 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <MX_USART2_UART_Init+0x94>)
 800111c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 800115e:	f009 fbbd 	bl	800a8dc <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 8001168:	f000 f91e 	bl	80013a8 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800116c:	2100      	movs	r1, #0
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001170:	f00a f896 	bl	800b2a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x6a>
    != HAL_OK)
    {
        Error_Handler();
 800117a:	f000 f915 	bl	80013a8 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800117e:	2100      	movs	r1, #0
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001182:	f00a f8cb 	bl	800b31c <HAL_UARTEx_SetRxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART2_UART_Init+0x7c>
    != HAL_OK)
    {
        Error_Handler();
 800118c:	f000 f90c 	bl	80013a8 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_USART2_UART_Init+0x90>)
 8001192:	f00a f84c 	bl	800b22e <HAL_UARTEx_DisableFifoMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 800119c:	f000 f904 	bl	80013a8 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20001564 	.word	0x20001564
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
    };
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b64      	ldr	r3, [pc, #400]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c8:	4a62      	ldr	r2, [pc, #392]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011e6:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <MX_GPIO_Init+0x1a8>)
 80011f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <MX_GPIO_Init+0x1a8>)
 8001200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001204:	4a53      	ldr	r2, [pc, #332]	; (8001354 <MX_GPIO_Init+0x1a8>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <MX_GPIO_Init+0x1a8>)
 8001210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <MX_GPIO_Init+0x1a8>)
 800121e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001222:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <MX_GPIO_Init+0x1a8>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <MX_GPIO_Init+0x1a8>)
 800122e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin | PCF8553_RESET_Pin,
 800123a:	2200      	movs	r2, #0
 800123c:	2150      	movs	r1, #80	; 0x50
 800123e:	4846      	ldr	r0, [pc, #280]	; (8001358 <MX_GPIO_Init+0x1ac>)
 8001240:	f003 f8f2 	bl	8004428 <HAL_GPIO_WritePin>
    GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2104      	movs	r1, #4
 8001248:	4844      	ldr	r0, [pc, #272]	; (800135c <MX_GPIO_Init+0x1b0>)
 800124a:	f003 f8ed 	bl	8004428 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin,
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	4842      	ldr	r0, [pc, #264]	; (8001360 <MX_GPIO_Init+0x1b4>)
 8001256:	f003 f8e7 	bl	8004428 <HAL_GPIO_WritePin>
    GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4841      	ldr	r0, [pc, #260]	; (8001364 <MX_GPIO_Init+0x1b8>)
 8001260:	f003 f8e2 	bl	8004428 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
    GPIO_InitStruct.Pin = PCF8553_CE_Pin | PCF8553_RESET_Pin;
 8001264:	2350      	movs	r3, #80	; 0x50
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4837      	ldr	r0, [pc, #220]	; (8001358 <MX_GPIO_Init+0x1ac>)
 800127c:	f002 fefc 	bl	8004078 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <MX_GPIO_Init+0x1bc>)
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4833      	ldr	r0, [pc, #204]	; (8001364 <MX_GPIO_Init+0x1b8>)
 8001296:	f002 feef 	bl	8004078 <HAL_GPIO_Init>

    /*Configure GPIO pin : led_red_Pin */
    GPIO_InitStruct.Pin = led_red_Pin;
 800129a:	2304      	movs	r3, #4
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	482a      	ldr	r0, [pc, #168]	; (800135c <MX_GPIO_Init+0x1b0>)
 80012b2:	f002 fee1 	bl	8004078 <HAL_GPIO_Init>

    /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
    GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_GPIO_Init+0x1b4>)
 80012d0:	f002 fed2 	bl	8004078 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80012d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_GPIO_Init+0x1bc>)
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	481d      	ldr	r0, [pc, #116]	; (8001360 <MX_GPIO_Init+0x1b4>)
 80012ea:	f002 fec5 	bl	8004078 <HAL_GPIO_Init>

    /*Configure GPIO pin : led_blue_Pin */
    GPIO_InitStruct.Pin = led_blue_Pin;
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_GPIO_Init+0x1b8>)
 8001306:	f002 feb7 	bl	8004078 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2015      	movs	r0, #21
 8001310:	f002 fe7c 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001314:	2015      	movs	r0, #21
 8001316:	f002 fe93 	bl	8004040 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2016      	movs	r0, #22
 8001320:	f002 fe74 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001324:	2016      	movs	r0, #22
 8001326:	f002 fe8b 	bl	8004040 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2017      	movs	r0, #23
 8001330:	f002 fe6c 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001334:	2017      	movs	r0, #23
 8001336:	f002 fe83 	bl	8004040 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2018      	movs	r0, #24
 8001340:	f002 fe64 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001344:	2018      	movs	r0, #24
 8001346:	f002 fe7b 	bl	8004040 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	46020c00 	.word	0x46020c00
 8001358:	42020000 	.word	0x42020000
 800135c:	42021800 	.word	0x42021800
 8001360:	42020800 	.word	0x42020800
 8001364:	42020400 	.word	0x42020400
 8001368:	10110000 	.word	0x10110000

0800136c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f008 f9c9 	bl	800970c <HAL_RTCEx_DeactivateWakeUpTimer>

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
     */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8001396:	f000 fb4f 	bl	8001a38 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000

080013a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x30>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 80013d8:	f003 fd00 	bl	8004ddc <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	46020c00 	.word	0x46020c00

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b6      	sub	sp, #216	; 0xd8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22c8      	movs	r2, #200	; 0xc8
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f013 fd51 	bl	8014ea0 <memset>
  if(hadc->Instance==ADC1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0x70>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d122      	bne.n	800144e <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001408:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4618      	mov	r0, r3
 8001422:	f005 f8a5 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800142c:	f7ff ffbc 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_ADC_MspInit+0x74>)
 8001432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_ADC_MspInit+0x74>)
 8001438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_ADC_MspInit+0x74>)
 8001442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	37d8      	adds	r7, #216	; 0xd8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	42028000 	.word	0x42028000
 800145c:	46020c00 	.word	0x46020c00

08001460 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b6      	sub	sp, #216	; 0xd8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	22c8      	movs	r2, #200	; 0xc8
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f013 fd15 	bl	8014ea0 <memset>
  if(hlptim->Instance==LPTIM1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_LPTIM_MspInit+0x80>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d12a      	bne.n	80014d6 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800148c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f869 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80014a4:	f7ff ff80 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_LPTIM_MspInit+0x84>)
 80014aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_LPTIM_MspInit+0x84>)
 80014b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_LPTIM_MspInit+0x84>)
 80014ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2043      	movs	r0, #67	; 0x43
 80014cc:	f002 fd9e 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80014d0:	2043      	movs	r0, #67	; 0x43
 80014d2:	f002 fdb5 	bl	8004040 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	37d8      	adds	r7, #216	; 0xd8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	46004400 	.word	0x46004400
 80014e4:	46020c00 	.word	0x46020c00

080014e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0b6      	sub	sp, #216	; 0xd8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	22c8      	movs	r2, #200	; 0xc8
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f013 fcd1 	bl	8014ea0 <memset>
  if(hrtc->Instance==RTC)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_RTC_MspInit+0x90>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d132      	bne.n	800156e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001508:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f825 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800152c:	f7ff ff3c 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_RTC_MspInit+0x94>)
 8001532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_RTC_MspInit+0x94>)
 8001538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_RTC_MspInit+0x94>)
 8001542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_RTC_MspInit+0x94>)
 8001548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RTC_MspInit+0x94>)
 8001552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2002      	movs	r0, #2
 8001564:	f002 fd52 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001568:	2002      	movs	r0, #2
 800156a:	f002 fd69 	bl	8004040 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	37d8      	adds	r7, #216	; 0xd8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	46007800 	.word	0x46007800
 800157c:	46020c00 	.word	0x46020c00

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0bc      	sub	sp, #240	; 0xf0
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	22c8      	movs	r2, #200	; 0xc8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f013 fc7d 	bl	8014ea0 <memset>
  if(hspi->Instance==SPI1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_SPI_MspInit+0xc8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d146      	bne.n	800163e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80015bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 ffd1 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80015d4:	f7ff fee8 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_SPI_MspInit+0xcc>)
 80015da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015de:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_SPI_MspInit+0xcc>)
 80015e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_SPI_MspInit+0xcc>)
 80015ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_SPI_MspInit+0xcc>)
 80015f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_SPI_MspInit+0xcc>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_SPI_MspInit+0xcc>)
 8001608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001614:	2382      	movs	r3, #130	; 0x82
 8001616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162c:	2305      	movs	r3, #5
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_SPI_MspInit+0xd0>)
 800163a:	f002 fd1d 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	37f0      	adds	r7, #240	; 0xf0
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40013000 	.word	0x40013000
 800164c:	46020c00 	.word	0x46020c00
 8001650:	42020000 	.word	0x42020000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0bc      	sub	sp, #240	; 0xf0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	22c8      	movs	r2, #200	; 0xc8
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f013 fc13 	bl	8014ea0 <memset>
  if(huart->Instance==USART2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_UART_MspInit+0xc4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d144      	bne.n	800170e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001684:	f04f 0202 	mov.w	r2, #2
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001690:	2304      	movs	r3, #4
 8001692:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4618      	mov	r0, r3
 800169a:	f004 ff69 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016a4:	f7ff fe80 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e4:	230c      	movs	r3, #12
 80016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_MspInit+0xcc>)
 800170a:	f002 fcb5 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	37f0      	adds	r7, #240	; 0xf0
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40004400 	.word	0x40004400
 800171c:	46020c00 	.word	0x46020c00
 8001720:	42020000 	.word	0x42020000

08001724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_InitTick+0xcc>)
 8001736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800173a:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <HAL_InitTick+0xcc>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_InitTick+0xcc>)
 8001746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001752:	f107 0210 	add.w	r2, r7, #16
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fe49 	bl	80063f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001762:	f004 fe0b 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8001766:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176a:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_InitTick+0xd0>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	3b01      	subs	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_InitTick+0xd4>)
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_InitTick+0xd8>)
 800177a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_InitTick+0xd4>)
 800177e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_InitTick+0xd4>)
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_InitTick+0xd4>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_InitTick+0xd4>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001796:	4818      	ldr	r0, [pc, #96]	; (80017f8 <HAL_InitTick+0xd4>)
 8001798:	f008 fcb6 	bl	800a108 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80017a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <HAL_InitTick+0xd4>)
 80017ac:	f008 fd0e 	bl	800a1cc <HAL_TIM_Base_Start_IT>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80017b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10e      	bne.n	80017dc <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d808      	bhi.n	80017d6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	2031      	movs	r0, #49	; 0x31
 80017ca:	f002 fc1f 	bl	800400c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_InitTick+0xdc>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e002      	b.n	80017dc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80017dc:	2031      	movs	r0, #49	; 0x31
 80017de:	f002 fc2f 	bl	8004040 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80017e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	46020c00 	.word	0x46020c00
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	200015f8 	.word	0x200015f8
 80017fc:	40001000 	.word	0x40001000
 8001800:	20000004 	.word	0x20000004

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <RTC_IRQHandler+0x10>)
 8001836:	f007 ffc1 	bl	80097bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200014a4 	.word	0x200014a4

08001844 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001848:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800184c:	f002 fe04 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001858:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800185c:	f002 fdfc 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001868:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800186c:	f002 fdf4 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001878:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800187c:	f002 fdec 	bl	8004458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM6_IRQHandler+0x10>)
 800188a:	f008 fd3f 	bl	800a30c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200015f8 	.word	0x200015f8

08001898 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <LPTIM1_IRQHandler+0x10>)
 800189e:	f002 ff71 	bl	8004784 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20001454 	.word	0x20001454

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f013 fab6 	bl	8014e4c <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200c0000 	.word	0x200c0000
 800190c:	00000400 	.word	0x00000400
 8001910:	20001644 	.word	0x20001644
 8001914:	20001e68 	.word	0x20001e68

08001918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <SystemInit+0x68>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <SystemInit+0x68>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <SystemInit+0x6c>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <SystemInit+0x6c>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <SystemInit+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <SystemInit+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <SystemInit+0x6c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <SystemInit+0x6c>)
 800194a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800194e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <SystemInit+0x6c>)
 8001956:	2200      	movs	r2, #0
 8001958:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <SystemInit+0x6c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <SystemInit+0x6c>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <SystemInit+0x6c>)
 8001968:	2200      	movs	r2, #0
 800196a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0x68>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
  #endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	46020c00 	.word	0x46020c00

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800198c:	f7ff ffc4 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001990:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800199c:	480a      	ldr	r0, [pc, #40]	; (80019c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
	ldr	r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <LoopForever+0x16>)
	cmp	r2, r3
 80019b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f013 fa4f 	bl	8014e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff f929 	bl	8000c10 <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019c0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80019c4:	08015e34 	.word	0x08015e34
	ldr	r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019cc:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 80019d0:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 80019d4:	20001e61 	.word	0x20001e61

080019d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_IRQHandler>
	...

080019dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_Init+0x4c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_Init+0x4c>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f002 fb02 	bl	8003ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019f2:	f004 fba1 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_Init+0x50>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	490b      	ldr	r1, [pc, #44]	; (8001a30 <HAL_Init+0x54>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_Init+0x58>)
 8001a0a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f7ff fe89 	bl	8001724 <HAL_InitTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e002      	b.n	8001a22 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fcca 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	46020c00 	.word	0x46020c00
 8001a30:	08015bbc 	.word	0x08015bbc
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20001648 	.word	0x20001648

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20001648 	.word	0x20001648

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_GetREVID+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	b29b      	uxth	r3, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e0044000 	.word	0xe0044000

08001adc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LL_ADC_SetResolution+0x3c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d104      	bne.n	8001b64 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f023 020c 	bic.w	r2, r3, #12
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	46021000 	.word	0x46021000

08001b84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3360      	adds	r3, #96	; 0x60
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3360      	adds	r3, #96	; 0x60
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3360      	adds	r3, #96	; 0x60
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3360      	adds	r3, #96	; 0x60
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3360      	adds	r3, #96	; 0x60
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ca6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d002      	beq.n	8001cc6 <LL_ADC_SetGainCompensation+0x32>
 8001cc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_SetGainCompensation+0x34>
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	431a      	orrs	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d020      	beq.n	8001d96 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	4413      	add	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	211f      	movs	r1, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	f003 011f 	and.w	r1, r3, #31
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001d94:	e02b      	b.n	8001dee <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	210f      	movs	r1, #15
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d104      	bne.n	8001dbe <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	e010      	b.n	8001de0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e003      	b.n	8001de0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	f001 011f 	and.w	r1, r1, #31
 8001de6:	408b      	lsls	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	46021000 	.word	0x46021000

08001e00 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	0e9b      	lsrs	r3, r3, #26
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	e015      	b.n	8001e50 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e003      	b.n	8001e46 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	0e9b      	lsrs	r3, r3, #26
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	; 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d042      	beq.n	8001f32 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d104      	bne.n	8001ec0 <LL_ADC_SetChannelSamplingTime+0x28>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	f003 021f 	and.w	r2, r3, #31
 8001ebe:	e011      	b.n	8001ee4 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	617b      	str	r3, [r7, #20]
  return result;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0e5b      	lsrs	r3, r3, #25
 8001ee8:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3314      	adds	r3, #20
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0e5b      	lsrs	r3, r3, #25
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2107      	movs	r1, #7
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001f30:	e00e      	b.n	8001f50 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0219      	lsls	r1, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	400b      	ands	r3, r1
 8001f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	615a      	str	r2, [r3, #20]
}
 8001f50:	bf00      	nop
 8001f52:	372c      	adds	r7, #44	; 0x2c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	46021000 	.word	0x46021000

08001f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0318 	and.w	r3, r3, #24
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f84:	40d9      	lsrs	r1, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	400b      	ands	r3, r1
 8001f8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	000fffff 	.word	0x000fffff

08001fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6093      	str	r3, [r2, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002080:	f043 0202 	orr.w	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <LL_ADC_IsEnabled+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_IsEnabled+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsDisableOngoing+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsDisableOngoing+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f4:	f043 0204 	orr.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d101      	bne.n	8002148 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002166:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d101      	bne.n	8002196 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e2b3      	b.n	800272c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a8b      	ldr	r2, [pc, #556]	; (8002400 <HAL_ADC_Init+0x25c>)
 80021d2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff f903 	bl	80013e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fee9 	bl	8001fcc <LL_ADC_IsDeepPowerDownEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fecf 	bl	8001fa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff04 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fee8 	bl	8001ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002224:	4b77      	ldr	r3, [pc, #476]	; (8002404 <HAL_ADC_Init+0x260>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	4a77      	ldr	r2, [pc, #476]	; (8002408 <HAL_ADC_Init+0x264>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002238:	e002      	b.n	8002240 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3b01      	subs	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fee6 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10e      	bne.n	8002274 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff59 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 800227e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8244 	bne.w	8002716 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 8240 	bne.w	8002716 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fef2 	bl	8002094 <LL_ADC_IsEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d140      	bne.n	8002338 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_ADC_Init+0x25c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d028      	beq.n	8002312 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a51      	ldr	r2, [pc, #324]	; (800240c <HAL_ADC_Init+0x268>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d109      	bne.n	80022de <HAL_ADC_Init+0x13a>
 80022ca:	4850      	ldr	r0, [pc, #320]	; (800240c <HAL_ADC_Init+0x268>)
 80022cc:	f7ff fee2 	bl	8002094 <LL_ADC_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e008      	b.n	80022f0 <HAL_ADC_Init+0x14c>
 80022de:	4848      	ldr	r0, [pc, #288]	; (8002400 <HAL_ADC_Init+0x25c>)
 80022e0:	f7ff fed8 	bl	8002094 <LL_ADC_IsEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d021      	beq.n	8002338 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a44      	ldr	r2, [pc, #272]	; (800240c <HAL_ADC_Init+0x268>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x15e>
 80022fe:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_ADC_Init+0x26c>)
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x160>
 8002302:	4a44      	ldr	r2, [pc, #272]	; (8002414 <HAL_ADC_Init+0x270>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7ff fbe6 	bl	8001adc <LL_ADC_SetCommonClock>
 8002310:	e012      	b.n	8002338 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7ff fc11 	bl	8001b44 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002322:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_ADC_Init+0x270>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002332:	4938      	ldr	r1, [pc, #224]	; (8002414 <HAL_ADC_Init+0x270>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_ADC_Init+0x25c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d010      	beq.n	8002364 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002348:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800234e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002354:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800235c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800235e:	4313      	orrs	r3, r2
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	e030      	b.n	80023c6 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7f1b      	ldrb	r3, [r3, #28]
 8002368:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002370:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002372:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002378:	2a00      	cmp	r2, #0
 800237a:	d002      	beq.n	8002382 <HAL_ADC_Init+0x1de>
 800237c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002380:	e000      	b.n	8002384 <HAL_ADC_Init+0x1e0>
 8002382:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002384:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800238a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	da04      	bge.n	800239e <HAL_ADC_Init+0x1fa>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239c:	e001      	b.n	80023a2 <HAL_ADC_Init+0x1fe>
 800239e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80023a2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4918      	ldr	r1, [pc, #96]	; (800240c <HAL_ADC_Init+0x268>)
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d103      	bne.n	80023b6 <HAL_ADC_Init+0x212>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b4:	e003      	b.n	80023be <HAL_ADC_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023bc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80023be:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d12f      	bne.n	8002430 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_ADC_Init+0x25c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	3b01      	subs	r3, #1
 80023e0:	045b      	lsls	r3, r3, #17
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	e022      	b.n	8002430 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	e018      	b.n	8002430 <HAL_ADC_Init+0x28c>
 80023fe:	bf00      	nop
 8002400:	46021000 	.word	0x46021000
 8002404:	20000000 	.word	0x20000000
 8002408:	053e2d63 	.word	0x053e2d63
 800240c:	42028000 	.word	0x42028000
 8002410:	42028308 	.word	0x42028308
 8002414:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_ADC_Init+0x4dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	4313      	orrs	r3, r2
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	4313      	orrs	r3, r2
 8002454:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	4b89      	ldr	r3, [pc, #548]	; (8002684 <HAL_ADC_Init+0x4e0>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	430b      	orrs	r3, r1
 8002468:	60d3      	str	r3, [r2, #12]
 800246a:	e031      	b.n	80024d0 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	4313      	orrs	r3, r2
 8002482:	6a3a      	ldr	r2, [r7, #32]
 8002484:	4313      	orrs	r3, r2
 8002486:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_ADC_Init+0x4e4>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	6a39      	ldr	r1, [r7, #32]
 8002498:	430b      	orrs	r3, r1
 800249a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_ADC_Init+0x4dc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f000 8093 	beq.w	8002602 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe25 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 80024e6:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fe46 	bl	800217e <LL_ADC_INJ_IsConversionOngoing>
 80024f2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d161      	bne.n	80025be <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d15e      	bne.n	80025be <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7f1b      	ldrb	r3, [r3, #28]
 8002504:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4960      	ldr	r1, [pc, #384]	; (800268c <HAL_ADC_Init+0x4e8>)
 800250c:	428b      	cmp	r3, r1
 800250e:	d102      	bne.n	8002516 <HAL_ADC_Init+0x372>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	e002      	b.n	800251c <HAL_ADC_Init+0x378>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251c:	4313      	orrs	r3, r2
 800251e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	6a39      	ldr	r1, [r7, #32]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7ff fba2 	bl	8001c94 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002556:	2b01      	cmp	r3, #1
 8002558:	d11e      	bne.n	8002598 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_ADC_Init+0x4ec>)
 8002568:	4013      	ands	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800256e:	0411      	lsls	r1, r2, #16
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002586:	0892      	lsrs	r2, r2, #2
 8002588:	430a      	orrs	r2, r1
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	e007      	b.n	80025a8 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10c      	bne.n	80025e0 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f023 010f 	bic.w	r1, r3, #15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
 80025de:	e007      	b.n	80025f0 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020f 	bic.w	r2, r2, #15
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f4:	f023 0303 	bic.w	r3, r3, #3
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002600:	e092      	b.n	8002728 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002608:	2b01      	cmp	r3, #1
 800260a:	d111      	bne.n	8002630 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002614:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800261a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002620:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4313      	orrs	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_ADC_Init+0x4f0>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	69f9      	ldr	r1, [r7, #28]
 8002640:	430b      	orrs	r3, r1
 8002642:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	461a      	mov	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	f7ff fb43 	bl	8001cda <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	461a      	mov	r2, r3
 800265e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002662:	f7ff fb3a 	bl	8001cda <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d114      	bne.n	8002698 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f062 020f 	orn	r2, r2, #15
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
 800267e:	e024      	b.n	80026ca <HAL_ADC_Init+0x526>
 8002680:	46021000 	.word	0x46021000
 8002684:	fff0c013 	.word	0xfff0c013
 8002688:	ffde800d 	.word	0xffde800d
 800268c:	42028000 	.word	0x42028000
 8002690:	fc00f81e 	.word	0xfc00f81e
 8002694:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a0:	d113      	bne.n	80026ca <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	f003 031c 	and.w	r3, r3, #28
 80026b4:	f06f 020f 	mvn.w	r2, #15
 80026b8:	fa02 f103 	lsl.w	r1, r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_ADC_Init+0x590>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10b      	bne.n	80026f2 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026f0:	e01a      	b.n	8002728 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f6:	f023 0312 	bic.w	r3, r3, #18
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002714:	e008      	b.n	8002728 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800272c:	4618      	mov	r0, r3
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	833ffff3 	.word	0x833ffff3

08002738 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fcf3 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d15d      	bne.n	800280c <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Start+0x26>
 800275a:	2302      	movs	r3, #2
 800275c:	e059      	b.n	8002812 <HAL_ADC_Start+0xda>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f001 f916 	bl	8003998 <ADC_Enable>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d145      	bne.n	8002802 <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_ADC_Start+0xe4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d011      	beq.n	80027b8 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a0:	d106      	bne.n	80027b0 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a6:	f023 0206 	bic.w	r2, r3, #6
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80027ae:	e006      	b.n	80027be <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027b6:	e002      	b.n	80027be <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	221c      	movs	r2, #28
 80027c4:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_ADC_Start+0xe4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fc70 	bl	80020e0 <LL_ADC_REG_StartConversion>
 8002800:	e006      	b.n	8002810 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800280a:	e001      	b.n	8002810 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800280c:	2302      	movs	r3, #2
 800280e:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	46021000 	.word	0x46021000

08002820 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Stop+0x16>
 8002832:	2302      	movs	r3, #2
 8002834:	e023      	b.n	800287e <HAL_ADC_Stop+0x5e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800283e:	2103      	movs	r1, #3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 ffed 	bl	8003820 <ADC_ConversionStop>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f001 f911 	bl	8003a78 <ADC_Disable>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002864:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d102      	bne.n	80028a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800289a:	2308      	movs	r3, #8
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e027      	b.n	80028f0 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_ADC_PollForConversion+0x1c8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d011      	beq.n	80028ce <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0be      	b.n	8002a46 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 80028c8:	2304      	movs	r3, #4
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e010      	b.n	80028f0 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0ac      	b.n	8002a46 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 80028ec:	2304      	movs	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028f0:	f7ff f8b6 	bl	8001a60 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80028f6:	e021      	b.n	800293c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d01d      	beq.n	800293c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002900:	f7ff f8ae 	bl	8001a60 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <HAL_ADC_PollForConversion+0x8e>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d112      	bne.n	800293c <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e084      	b.n	8002a46 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0d6      	beq.n	80028f8 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f9dc 	bl	8001d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d06e      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d169      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a36      	ldr	r2, [pc, #216]	; (8002a50 <HAL_ADC_PollForConversion+0x1c8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02e      	beq.n	80029d8 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d111      	bne.n	80029ac <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d104      	bne.n	80029c4 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2208      	movs	r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e03f      	b.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d13a      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e035      	b.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d126      	bne.n	8002a34 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fba0 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d112      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 020c 	bic.w	r2, r2, #12
 8002a04:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	679a      	str	r2, [r3, #120]	; 0x78
 8002a1a:	e00b      	b.n	8002a34 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7f1b      	ldrb	r3, [r3, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	220c      	movs	r2, #12
 8002a42:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	46021000 	.word	0x46021000

08002a54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0bc      	sub	sp, #240	; 0xf0
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4aa8      	ldr	r2, [pc, #672]	; (8002d2c <HAL_ADC_ConfigChannel+0x2bc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d103      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x36>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f000 beb5 	b.w	8003810 <HAL_ADC_ConfigChannel+0xda0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb3c 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8695 	bne.w	80037ea <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a99      	ldr	r2, [pc, #612]	; (8002d2c <HAL_ADC_ConfigChannel+0x2bc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f000 83ea 	beq.w	80032a0 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d108      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x7a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	e01d      	b.n	8002b26 <HAL_ADC_ConfigChannel+0xb6>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e004      	b.n	8002b1c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2201      	movs	r2, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	69d1      	ldr	r1, [r2, #28]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f7ff f8fd 	bl	8001d40 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff faf0 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fb10 	bl	800217e <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 81ed 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81e8 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7ff f988 	bl	8001e98 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d046      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bba:	f7fe ffe3 	bl	8001b84 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f7ff f811 	bl	8001bf2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7e9b      	ldrb	r3, [r3, #26]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d11e      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x17e>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	e000      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x180>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f7ff f834 	bl	8001c5e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x19c>
 8002c06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c0a:	e000      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x19e>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7ff f80a 	bl	8001c28 <LL_ADC_SetOffsetSignedSaturation>
 8002c14:	e197      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7ff f81c 	bl	8001c5e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fe fff9 	bl	8001c28 <LL_ADC_SetOffsetSignedSaturation>
 8002c36:	e186      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe ffc1 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1f4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe ffb6 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	e01e      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x232>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe ffab 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x24a>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	e018      	b.n	8002cec <HAL_ADC_ConfigChannel+0x27c>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002cd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f7fe ff42 	bl	8001b84 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ff5d 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x2c0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe ff52 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e020      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x2fe>
 8002d2c:	46021000 	.word	0x46021000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff45 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x316>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	e018      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x348>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f7fe fedc 	bl	8001b84 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fef7 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x388>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe feec 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	e01e      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x3c6>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fee1 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x3de>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	e018      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x410>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e004      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2102      	movs	r1, #2
 8002e90:	f7fe fe78 	bl	8001b84 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2103      	movs	r1, #3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fe93 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x450>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2103      	movs	r1, #3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fe88 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	e01a      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x486>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fe7d 	bl	8001bc6 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x49e>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	e011      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x4c2>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002f26:	2320      	movs	r3, #32
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d107      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2103      	movs	r1, #3
 8002f42:	f7fe fe1f 	bl	8001b84 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f8a2 	bl	8002094 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 8456 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f7fe fffb 	bl	8001f60 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f72:	f040 80d6 	bne.w	8003122 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x52a>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	bf94      	ite	ls
 8002f92:	2301      	movls	r3, #1
 8002f94:	2300      	movhi	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e019      	b.n	8002fce <HAL_ADC_ConfigChannel+0x55e>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002faa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d04d      	beq.n	800306e <HAL_ADC_ConfigChannel+0x5fe>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x57e>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	069b      	lsls	r3, r3, #26
 8002fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fec:	e015      	b.n	800301a <HAL_ADC_ConfigChannel+0x5aa>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	069b      	lsls	r3, r3, #26
 8003016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_ConfigChannel+0x5ca>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	3301      	adds	r3, #1
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	e017      	b.n	800306a <HAL_ADC_ConfigChannel+0x5fa>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e003      	b.n	800305e <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8003056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	e04e      	b.n	800310c <HAL_ADC_ConfigChannel+0x69c>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_ADC_ConfigChannel+0x61a>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003088:	e015      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x646>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80030a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	069b      	lsls	r3, r3, #26
 80030b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x666>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	e017      	b.n	8003106 <HAL_ADC_ConfigChannel+0x696>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	4313      	orrs	r3, r2
 8003108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	461a      	mov	r2, r3
 800311a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800311e:	f7fe febb 	bl	8001e98 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f280 836c 	bge.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a97      	ldr	r2, [pc, #604]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x6ca>
 8003136:	4b97      	ldr	r3, [pc, #604]	; (8003394 <HAL_ADC_ConfigChannel+0x924>)
 8003138:	e000      	b.n	800313c <HAL_ADC_ConfigChannel+0x6cc>
 800313a:	4b97      	ldr	r3, [pc, #604]	; (8003398 <HAL_ADC_ConfigChannel+0x928>)
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fcf3 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 8003142:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a91      	ldr	r2, [pc, #580]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d109      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x6f4>
 8003150:	488f      	ldr	r0, [pc, #572]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 8003152:	f7fe ff9f 	bl	8002094 <LL_ADC_IsEnabled>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e008      	b.n	8003176 <HAL_ADC_ConfigChannel+0x706>
 8003164:	488d      	ldr	r0, [pc, #564]	; (800339c <HAL_ADC_ConfigChannel+0x92c>)
 8003166:	f7fe ff95 	bl	8002094 <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8088 	beq.w	800328c <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a87      	ldr	r2, [pc, #540]	; (80033a0 <HAL_ADC_ConfigChannel+0x930>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d132      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d12c      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d005      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x738>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7e      	ldr	r2, [pc, #504]	; (800339c <HAL_ADC_ConfigChannel+0x92c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f040 832b 	bne.w	80037fe <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a78      	ldr	r2, [pc, #480]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x746>
 80031b2:	4a78      	ldr	r2, [pc, #480]	; (8003394 <HAL_ADC_ConfigChannel+0x924>)
 80031b4:	e000      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x748>
 80031b6:	4a78      	ldr	r2, [pc, #480]	; (8003398 <HAL_ADC_ConfigChannel+0x928>)
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7fe fc9d 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c8:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_ADC_ConfigChannel+0x934>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	4a76      	ldr	r2, [pc, #472]	; (80033a8 <HAL_ADC_ConfigChannel+0x938>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80031da:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ea:	e308      	b.n	80037fe <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6e      	ldr	r2, [pc, #440]	; (80033ac <HAL_ADC_ConfigChannel+0x93c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d121      	bne.n	800323a <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d11b      	bne.n	800323a <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a62      	ldr	r2, [pc, #392]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d005      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x7a8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a62      	ldr	r2, [pc, #392]	; (800339c <HAL_ADC_ConfigChannel+0x92c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	f040 82f5 	bne.w	8003802 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5c      	ldr	r2, [pc, #368]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x7b6>
 8003222:	4a5c      	ldr	r2, [pc, #368]	; (8003394 <HAL_ADC_ConfigChannel+0x924>)
 8003224:	e000      	b.n	8003228 <HAL_ADC_ConfigChannel+0x7b8>
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_ADC_ConfigChannel+0x928>)
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f7fe fc65 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003238:	e2e3      	b.n	8003802 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <HAL_ADC_ConfigChannel+0x940>)
 8003240:	4293      	cmp	r3, r2
 8003242:	f040 82df 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 82d8 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d005      	beq.n	800326a <HAL_ADC_ConfigChannel+0x7fa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a4e      	ldr	r2, [pc, #312]	; (800339c <HAL_ADC_ConfigChannel+0x92c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f040 82cd 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_ADC_ConfigChannel+0x920>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x808>
 8003274:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_ADC_ConfigChannel+0x924>)
 8003276:	e000      	b.n	800327a <HAL_ADC_ConfigChannel+0x80a>
 8003278:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_ADC_ConfigChannel+0x928>)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7fe fc3c 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 800328a:	e2bb      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800329e:	e2b1      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 80032a8:	f7fe fc0a 	bl	8001ac0 <HAL_GetREVID>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b2:	d130      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <HAL_ADC_ConfigChannel+0x944>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d103      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_ADC_ConfigChannel+0x948>)
 80032c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032c4:	e027      	b.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <HAL_ADC_ConfigChannel+0x94c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_ADC_ConfigChannel+0x950>)
 80032d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032d6:	e01e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a39      	ldr	r2, [pc, #228]	; (80033c4 <HAL_ADC_ConfigChannel+0x954>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d103      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_ADC_ConfigChannel+0x958>)
 80032e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e8:	e015      	b.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a37      	ldr	r2, [pc, #220]	; (80033cc <HAL_ADC_ConfigChannel+0x95c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_ADC_ConfigChannel+0x960>)
 80032f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032fa:	e00c      	b.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_ADC_ConfigChannel+0x964>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d103      	bne.n	800330e <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_ADC_ConfigChannel+0x95c>)
 8003308:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	f000 81a2 	beq.w	8003664 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003328:	d004      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800332e:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_ADC_ConfigChannel+0x968>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d107      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fd5f 	bl	8001e00 <LL_ADC_REG_SetSequencerChAdd>
 8003342:	e0c1      	b.n	80034c8 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	210f      	movs	r1, #15
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	401a      	ands	r2, r3
 800335c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003360:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x904>
 8003368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	e037      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x974>
 8003374:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d127      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e029      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x974>
 8003390:	42028000 	.word	0x42028000
 8003394:	42028308 	.word	0x42028308
 8003398:	46021308 	.word	0x46021308
 800339c:	46021000 	.word	0x46021000
 80033a0:	ce080000 	.word	0xce080000
 80033a4:	20000000 	.word	0x20000000
 80033a8:	053e2d63 	.word	0x053e2d63
 80033ac:	ca040000 	.word	0xca040000
 80033b0:	80000001 	.word	0x80000001
 80033b4:	b6002000 	.word	0xb6002000
 80033b8:	da400000 	.word	0xda400000
 80033bc:	ba004000 	.word	0xba004000
 80033c0:	de800000 	.word	0xde800000
 80033c4:	b2001000 	.word	0xb2001000
 80033c8:	81000001 	.word	0x81000001
 80033cc:	d6200000 	.word	0xd6200000
 80033d0:	d2100000 	.word	0xd2100000
 80033d4:	d7200000 	.word	0xd7200000
 80033d8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6849      	ldr	r1, [r1, #4]
 80033e8:	f001 011f 	and.w	r1, r1, #31
 80033ec:	408b      	lsls	r3, r1
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	429a      	cmp	r2, r3
 8003404:	d860      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003406:	f7fe fb5b 	bl	8001ac0 <HAL_GetREVID>
 800340a:	4603      	mov	r3, r0
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d851      	bhi.n	80034b6 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003416:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x9c4>
 800341e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003422:	0e9b      	lsrs	r3, r3, #26
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2b13      	cmp	r3, #19
 800342a:	bf8c      	ite	hi
 800342c:	2301      	movhi	r3, #1
 800342e:	2300      	movls	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e016      	b.n	8003462 <HAL_ADC_ConfigChannel+0x9f2>
 8003434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	61bb      	str	r3, [r7, #24]
  return result;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b13      	cmp	r3, #19
 800345a:	bf8c      	ite	hi
 800345c:	2301      	movhi	r3, #1
 800345e:	2300      	movls	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d027      	beq.n	80034b6 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8003466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800346a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_ADC_ConfigChannel+0xa16>
 8003472:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	3b09      	subs	r3, #9
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	e015      	b.n	80034b2 <HAL_ADC_ConfigChannel+0xa42>
 8003486:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800348a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	60fb      	str	r3, [r7, #12]
  return result;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b09      	subs	r3, #9
 80034ac:	2201      	movs	r2, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fe fc3c 	bl	8001d40 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80034d6:	f7fe fcdf 	bl	8001e98 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f280 8190 	bge.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a97      	ldr	r2, [pc, #604]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0xa82>
 80034ee:	4b97      	ldr	r3, [pc, #604]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 80034f0:	e000      	b.n	80034f4 <HAL_ADC_ConfigChannel+0xa84>
 80034f2:	4b97      	ldr	r3, [pc, #604]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fb17 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 80034fa:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a94      	ldr	r2, [pc, #592]	; (8003754 <HAL_ADC_ConfigChannel+0xce4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d126      	bne.n	8003556 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d120      	bne.n	8003556 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a8b      	ldr	r2, [pc, #556]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0xab2>
 800351e:	4a8b      	ldr	r2, [pc, #556]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 8003520:	e000      	b.n	8003524 <HAL_ADC_ConfigChannel+0xab4>
 8003522:	4a8b      	ldr	r2, [pc, #556]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f7fe fae7 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003534:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_ADC_ConfigChannel+0xce8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	4a88      	ldr	r2, [pc, #544]	; (800375c <HAL_ADC_ConfigChannel+0xcec>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003546:	e002      	b.n	800354e <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3b01      	subs	r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003554:	e067      	b.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a81      	ldr	r2, [pc, #516]	; (8003760 <HAL_ADC_ConfigChannel+0xcf0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d116      	bne.n	800358e <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003568:	2b00      	cmp	r3, #0
 800356a:	d110      	bne.n	800358e <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a75      	ldr	r2, [pc, #468]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0xb0a>
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 8003578:	e000      	b.n	800357c <HAL_ADC_ConfigChannel+0xb0c>
 800357a:	4a75      	ldr	r2, [pc, #468]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7fe fabb 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 800358c:	e04b      	b.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a74      	ldr	r2, [pc, #464]	; (8003764 <HAL_ADC_ConfigChannel+0xcf4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d116      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d110      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a67      	ldr	r2, [pc, #412]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0xb42>
 80035ae:	4a67      	ldr	r2, [pc, #412]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 80035b0:	e000      	b.n	80035b4 <HAL_ADC_ConfigChannel+0xb44>
 80035b2:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7fe fa9f 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 80035c4:	e02f      	b.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a67      	ldr	r2, [pc, #412]	; (8003768 <HAL_ADC_ConfigChannel+0xcf8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d12a      	bne.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d124      	bne.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a62      	ldr	r2, [pc, #392]	; (800376c <HAL_ADC_ConfigChannel+0xcfc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d11f      	bne.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0xb84>
 80035f0:	4a56      	ldr	r2, [pc, #344]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 80035f2:	e000      	b.n	80035f6 <HAL_ADC_ConfigChannel+0xb86>
 80035f4:	4a56      	ldr	r2, [pc, #344]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7fe fa7e 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003606:	f7fe fa5b 	bl	8001ac0 <HAL_GetREVID>
 800360a:	4603      	mov	r3, r0
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d809      	bhi.n	8003626 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003626:	f7fe fa4b 	bl	8001ac0 <HAL_GetREVID>
 800362a:	4603      	mov	r3, r0
 800362c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003630:	f040 80e8 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4d      	ldr	r2, [pc, #308]	; (8003770 <HAL_ADC_ConfigChannel+0xd00>)
 800363a:	4293      	cmp	r3, r2
 800363c:	f040 80e2 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 80db 	bne.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003662:	e0cf      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800366c:	d004      	beq.n	8003678 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <HAL_ADC_ConfigChannel+0xd04>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d106      	bne.n	8003686 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fbf0 	bl	8001e66 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f280 80ba 	bge.w	8003804 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0xc2e>
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 800369c:	e000      	b.n	80036a0 <HAL_ADC_ConfigChannel+0xc30>
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fa41 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 80036a6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a32      	ldr	r2, [pc, #200]	; (8003778 <HAL_ADC_ConfigChannel+0xd08>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d110      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0xc52>
 80036be:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 80036c0:	e000      	b.n	80036c4 <HAL_ADC_ConfigChannel+0xc54>
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7fe fa17 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 80036d4:	e06d      	b.n	80037b2 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_ADC_ConfigChannel+0xd0c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d110      	bne.n	8003702 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0xc7e>
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 80036ec:	e000      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xc80>
 80036ee:	4a18      	ldr	r2, [pc, #96]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f7fe fa01 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 8003700:	e057      	b.n	80037b2 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_ADC_ConfigChannel+0xcf4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d110      	bne.n	800372e <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0xcaa>
 8003716:	4a0d      	ldr	r2, [pc, #52]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 8003718:	e000      	b.n	800371c <HAL_ADC_ConfigChannel+0xcac>
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_ADC_ConfigChannel+0xce0>)
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003720:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe f9eb 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 800372c:	e041      	b.n	80037b2 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_ADC_ConfigChannel+0xcf8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d13c      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a02      	ldr	r2, [pc, #8]	; (8003748 <HAL_ADC_ConfigChannel+0xcd8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d11e      	bne.n	8003780 <HAL_ADC_ConfigChannel+0xd10>
 8003742:	4a02      	ldr	r2, [pc, #8]	; (800374c <HAL_ADC_ConfigChannel+0xcdc>)
 8003744:	e01d      	b.n	8003782 <HAL_ADC_ConfigChannel+0xd12>
 8003746:	bf00      	nop
 8003748:	42028000 	.word	0x42028000
 800374c:	42028308 	.word	0x42028308
 8003750:	46021308 	.word	0x46021308
 8003754:	b6002000 	.word	0xb6002000
 8003758:	20000000 	.word	0x20000000
 800375c:	053e2d63 	.word	0x053e2d63
 8003760:	ba004000 	.word	0xba004000
 8003764:	80000001 	.word	0x80000001
 8003768:	b2001000 	.word	0xb2001000
 800376c:	46021000 	.word	0x46021000
 8003770:	d7200000 	.word	0xd7200000
 8003774:	80000010 	.word	0x80000010
 8003778:	ce080000 	.word	0xce080000
 800377c:	ca040000 	.word	0xca040000
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_ADC_ConfigChannel+0xda8>)
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7fe f9b8 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003792:	f7fe f995 	bl	8001ac0 <HAL_GetREVID>
 8003796:	4603      	mov	r3, r0
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d809      	bhi.n	80037b2 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80037b2:	f7fe f985 	bl	8001ac0 <HAL_GetREVID>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d122      	bne.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_ADC_ConfigChannel+0xdac>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d11d      	bne.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d117      	bne.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80037e8:	e00c      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80037fc:	e002      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003802:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800380c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003810:	4618      	mov	r0, r3
 8003812:	37f0      	adds	r7, #240	; 0xf0
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	46021308 	.word	0x46021308
 800381c:	d7200000 	.word	0xd7200000

08003820 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc7a 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 800383c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fc9b 	bl	800217e <LL_ADC_INJ_IsConversionOngoing>
 8003848:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <ADC_ConversionStop+0x38>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8099 	beq.w	800398a <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02b      	beq.n	80038be <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800386c:	2b01      	cmp	r3, #1
 800386e:	d126      	bne.n	80038be <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7f1b      	ldrb	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d122      	bne.n	80038be <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003878:	2301      	movs	r3, #1
 800387a:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800387c:	e014      	b.n	80038a8 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4a44      	ldr	r2, [pc, #272]	; (8003994 <ADC_ConversionStop+0x174>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d90d      	bls.n	80038a2 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e074      	b.n	800398c <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d1e3      	bne.n	800387e <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d014      	beq.n	80038ee <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fc31 	bl	8002130 <LL_ADC_REG_IsConversionOngoing>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fbee 	bl	80020ba <LL_ADC_IsDisableOngoing>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fc0d 	bl	8002108 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d014      	beq.n	800391e <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fc40 	bl	800217e <LL_ADC_INJ_IsConversionOngoing>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fbd6 	bl	80020ba <LL_ADC_IsDisableOngoing>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fc1c 	bl	8002156 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d005      	beq.n	8003930 <ADC_ConversionStop+0x110>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d105      	bne.n	8003936 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800392a:	230c      	movs	r3, #12
 800392c:	617b      	str	r3, [r7, #20]
        break;
 800392e:	e005      	b.n	800393c <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003930:	2308      	movs	r3, #8
 8003932:	617b      	str	r3, [r7, #20]
        break;
 8003934:	e002      	b.n	800393c <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003936:	2304      	movs	r3, #4
 8003938:	617b      	str	r3, [r7, #20]
        break;
 800393a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800393c:	f7fe f890 	bl	8001a60 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003942:	e01b      	b.n	800397c <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003944:	f7fe f88c 	bl	8001a60 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b05      	cmp	r3, #5
 8003950:	d914      	bls.n	800397c <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1dc      	bne.n	8003944 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	000cdbff 	.word	0x000cdbff

08003998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fb75 	bl	8002094 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d15a      	bne.n	8003a66 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <ADC_Enable+0xd8>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c2:	f043 0210 	orr.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e046      	b.n	8003a68 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fb2c 	bl	8002044 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <ADC_Enable+0x66>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <ADC_Enable+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d033      	beq.n	8003a66 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80039fe:	f7fe f82f 	bl	8001a60 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a04:	e028      	b.n	8003a58 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fb42 	bl	8002094 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fb12 	bl	8002044 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a20:	f7fe f81e 	bl	8001a60 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d914      	bls.n	8003a58 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d00d      	beq.n	8003a58 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a40:	f043 0210 	orr.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d1cf      	bne.n	8003a06 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	8000003f 	.word	0x8000003f
 8003a74:	46021000 	.word	0x46021000

08003a78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fb18 	bl	80020ba <LL_ADC_IsDisableOngoing>
 8003a8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe faff 	bl	8002094 <LL_ADC_IsEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d047      	beq.n	8003b2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d144      	bne.n	8003b2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030d 	and.w	r3, r3, #13
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10c      	bne.n	8003aca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fad9 	bl	800206c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2203      	movs	r2, #3
 8003ac0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd ffcd 	bl	8001a60 <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac8:	e029      	b.n	8003b1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e023      	b.n	8003b2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ae6:	f7fd ffbb 	bl	8001a60 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d914      	bls.n	8003b1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e007      	b.n	8003b2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1dc      	bne.n	8003ae6 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <LL_ADC_StartCalibration>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <LL_ADC_StartCalibration+0x4c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00c      	beq.n	8003b64 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <LL_ADC_StartCalibration+0x50>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	e009      	b.n	8003b78 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	46021000 	.word	0x46021000
 8003b88:	7ffeffc0 	.word	0x7ffeffc0

08003b8c <LL_ADC_IsCalibrationOnGoing>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba0:	d101      	bne.n	8003ba6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e133      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x286>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ff4c 	bl	8003a78 <ADC_Disable>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8119 	bne.w	8003e22 <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	f043 0202 	orr.w	r2, r3, #2
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a8e      	ldr	r2, [pc, #568]	; (8003e44 <HAL_ADCEx_Calibration_Start+0x290>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d150      	bne.n	8003cb0 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0203 	bic.w	r2, r2, #3
 8003c34:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff73 	bl	8003b38 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c52:	e014      	b.n	8003c7e <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	3301      	adds	r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4a7a      	ldr	r2, [pc, #488]	; (8003e48 <HAL_ADCEx_Calibration_Start+0x294>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d90d      	bls.n	8003c7e <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c66:	f023 0312 	bic.w	r3, r3, #18
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0dd      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff82 	bl	8003b8c <LL_ADC_IsCalibrationOnGoing>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e2      	bne.n	8003c54 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68d9      	ldr	r1, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
 8003cae:	e0af      	b.n	8003e10 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003cb0:	4b66      	ldr	r3, [pc, #408]	; (8003e4c <HAL_ADCEx_Calibration_Start+0x298>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003cba:	4b64      	ldr	r3, [pc, #400]	; (8003e4c <HAL_ADCEx_Calibration_Start+0x298>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f240 4255 	movw	r2, #1109	; 0x455
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d012      	beq.n	8003cf4 <HAL_ADCEx_Calibration_Start+0x140>
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f240 4276 	movw	r2, #1142	; 0x476
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f240 4281 	movw	r2, #1153	; 0x481
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_ADCEx_Calibration_Start+0x138>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f240 4282 	movw	r2, #1154	; 0x482
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d16d      	bne.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x214>
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cf2:	d369      	bcc.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff fe4f 	bl	8003998 <ADC_Enable>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 8083 	bne.w	8003e10 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003d1c:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003d26:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff fe94 	bl	8003a78 <ADC_Disable>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003d5c:	d109      	bne.n	8003d72 <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d88:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d8a:	e014      	b.n	8003db6 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <HAL_ADCEx_Calibration_Start+0x294>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d90d      	bls.n	8003db6 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9e:	f023 0312 	bic.w	r3, r3, #18
 8003da2:	f043 0210 	orr.w	r2, r3, #16
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fee6 	bl	8003b8c <LL_ADC_IsCalibrationOnGoing>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e2      	bne.n	8003d8c <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003dc6:	e023      	b.n	8003e10 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff feb2 	bl	8003b38 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dd4:	e014      	b.n	8003e00 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_ADCEx_Calibration_Start+0x294>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d90d      	bls.n	8003e00 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de8:	f023 0312 	bic.w	r3, r3, #18
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e01c      	b.n	8003e3a <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fec1 	bl	8003b8c <LL_ADC_IsCalibrationOnGoing>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e2      	bne.n	8003dd6 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e14:	f023 0303 	bic.w	r3, r3, #3
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78
 8003e20:	e005      	b.n	8003e2e <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e26:	f043 0210 	orr.w	r2, r3, #16
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	46021000 	.word	0x46021000
 8003e48:	01ba813f 	.word	0x01ba813f
 8003e4c:	e0044000 	.word	0xe0044000
 8003e50:	7ffeffc0 	.word	0x7ffeffc0

08003e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <__NVIC_SetPriorityGrouping+0x44>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e70:	4013      	ands	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e86:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <__NVIC_SetPriorityGrouping+0x44>)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	60d3      	str	r3, [r2, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f003 0307 	and.w	r3, r3, #7
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db0b      	blt.n	8003ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	f003 021f 	and.w	r2, r3, #31
 8003ed0:	4907      	ldr	r1, [pc, #28]	; (8003ef0 <__NVIC_EnableIRQ+0x38>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2001      	movs	r0, #1
 8003eda:	fa00 f202 	lsl.w	r2, r0, r2
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000e100 	.word	0xe000e100

08003ef4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db12      	blt.n	8003f2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	490a      	ldr	r1, [pc, #40]	; (8003f38 <__NVIC_DisableIRQ+0x44>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f20:	f3bf 8f4f 	dsb	sy
}
 8003f24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f26:	f3bf 8f6f 	isb	sy
}
 8003f2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000e100 	.word	0xe000e100

08003f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db0a      	blt.n	8003f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	490c      	ldr	r1, [pc, #48]	; (8003f88 <__NVIC_SetPriority+0x4c>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	0112      	lsls	r2, r2, #4
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f64:	e00a      	b.n	8003f7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4908      	ldr	r1, [pc, #32]	; (8003f8c <__NVIC_SetPriority+0x50>)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	3b04      	subs	r3, #4
 8003f74:	0112      	lsls	r2, r2, #4
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	440b      	add	r3, r1
 8003f7a:	761a      	strb	r2, [r3, #24]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000e100 	.word	0xe000e100
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	bf28      	it	cs
 8003fae:	2304      	movcs	r3, #4
 8003fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d902      	bls.n	8003fc0 <NVIC_EncodePriority+0x30>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3b03      	subs	r3, #3
 8003fbe:	e000      	b.n	8003fc2 <NVIC_EncodePriority+0x32>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	43d9      	mvns	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	4313      	orrs	r3, r2
         );
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ff28 	bl	8003e54 <__NVIC_SetPriorityGrouping>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800401a:	f7ff ff3f 	bl	8003e9c <__NVIC_GetPriorityGrouping>
 800401e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	6978      	ldr	r0, [r7, #20]
 8004026:	f7ff ffb3 	bl	8003f90 <NVIC_EncodePriority>
 800402a:	4602      	mov	r2, r0
 800402c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff82 	bl	8003f3c <__NVIC_SetPriority>
}
 8004038:	bf00      	nop
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff32 	bl	8003eb8 <__NVIC_EnableIRQ>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff42 	bl	8003ef4 <__NVIC_DisableIRQ>
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800408a:	e1ba      	b.n	8004402 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 81aa 	beq.w	80043fc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a55      	ldr	r2, [pc, #340]	; (8004200 <HAL_GPIO_Init+0x188>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d15d      	bne.n	800416c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80040b6:	2201      	movs	r2, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0201 	and.w	r2, r3, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80040e0:	4a48      	ldr	r2, [pc, #288]	; (8004204 <HAL_GPIO_Init+0x18c>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80040ea:	4a46      	ldr	r2, [pc, #280]	; (8004204 <HAL_GPIO_Init+0x18c>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004102:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	4013      	ands	r3, r2
 8004118:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220b      	movs	r2, #11
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	4313      	orrs	r3, r2
 800412c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3208      	adds	r2, #8
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	4013      	ands	r3, r2
 8004152:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	2202      	movs	r2, #2
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e067      	b.n	800423c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x104>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b12      	cmp	r3, #18
 800417a:	d145      	bne.n	8004208 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	08da      	lsrs	r2, r3, #3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3208      	adds	r2, #8
 8004184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004188:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	220f      	movs	r2, #15
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	4013      	ands	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	08da      	lsrs	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4013      	ands	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0203 	and.w	r2, r3, #3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e01e      	b.n	800423c <HAL_GPIO_Init+0x1c4>
 80041fe:	bf00      	nop
 8004200:	46020000 	.word	0x46020000
 8004204:	08015c14 	.word	0x08015c14
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	2203      	movs	r2, #3
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	4013      	ands	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	4313      	orrs	r3, r2
 8004234:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d00b      	beq.n	800425c <HAL_GPIO_Init+0x1e4>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d007      	beq.n	800425c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004250:	2b11      	cmp	r3, #17
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b12      	cmp	r3, #18
 800425a:	d130      	bne.n	80042be <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	4013      	ands	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4313      	orrs	r3, r2
 8004284:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004292:	2201      	movs	r2, #1
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4013      	ands	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 0201 	and.w	r2, r3, #1
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d017      	beq.n	80042f6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	4013      	ands	r3, r2
 80042dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d07c      	beq.n	80043fc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004302:	4a47      	ldr	r2, [pc, #284]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3318      	adds	r3, #24
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	4013      	ands	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0a9a      	lsrs	r2, r3, #10
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_GPIO_Init+0x3ac>)
 800432c:	4013      	ands	r3, r2
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	00d2      	lsls	r2, r2, #3
 8004336:	4093      	lsls	r3, r2
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	4313      	orrs	r3, r2
 800433c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800433e:	4938      	ldr	r1, [pc, #224]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	3318      	adds	r3, #24
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	43db      	mvns	r3, r3
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	4013      	ands	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004370:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43db      	mvns	r3, r3
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	4013      	ands	r3, r2
 8004384:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	43db      	mvns	r3, r3
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	4013      	ands	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80043f4:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <HAL_GPIO_Init+0x3a8>)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3301      	adds	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae3d 	bne.w	800408c <HAL_GPIO_Init+0x14>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	46022000 	.word	0x46022000
 8004424:	002f7f7f 	.word	0x002f7f7f

08004428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
 8004434:	4613      	mov	r3, r2
 8004436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004444:	e002      	b.n	800444c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800446e:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	4618      	mov	r0, r3
 8004478:	f00b fa44 	bl	800f904 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004488:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f807 	bl	80044a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	46022000 	.word	0x46022000

080044a4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e007      	b.n	80044ea <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0204 	bic.w	r2, r3, #4
 80044e2:	4905      	ldr	r1, [pc, #20]	; (80044f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40030400 	.word	0x40030400

080044fc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_ICACHE_Enable+0x1c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_ICACHE_Enable+0x1c>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40030400 	.word	0x40030400

0800451c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0e7      	b.n	80046fe <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc ff89 	bl	8001460 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800456e:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004578:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800457a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fad4 	bl	8004b2c <LPTIM_WaitForFlag>
 8004584:	4603      	mov	r3, r0
 8004586:	2b03      	cmp	r3, #3
 8004588:	d101      	bne.n	800458e <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0b7      	b.n	80046fe <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6a12      	ldr	r2, [r2, #32]
 800459e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80045a0:	2110      	movs	r1, #16
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fac2 	bl	8004b2c <LPTIM_WaitForFlag>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d101      	bne.n	80045b2 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0a5      	b.n	80046fe <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <HAL_LPTIM_Init+0xc2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <HAL_LPTIM_Init+0xc2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d004      	beq.n	80045f8 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f6:	d103      	bne.n	8004600 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 031e 	bic.w	r3, r3, #30
 80045fe:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	4293      	cmp	r3, r2
 800460a:	d005      	beq.n	8004618 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004612:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004616:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_LPTIM_Init+0x1ec>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004628:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800462e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004634:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800464c:	4313      	orrs	r3, r2
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d004      	beq.n	8004666 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004664:	d107      	bne.n	8004676 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800466e:	4313      	orrs	r3, r2
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800467e:	4293      	cmp	r3, r2
 8004680:	d00a      	beq.n	8004698 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800468a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004690:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_LPTIM_Init+0x1f0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_LPTIM_Init+0x198>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_LPTIM_Init+0x1f4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
 80046c4:	e00e      	b.n	80046e4 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <HAL_LPTIM_Init+0x1f8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_LPTIM_Init+0x1be>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_LPTIM_Init+0x1fc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d104      	bne.n	80046e4 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	ff39f1fe 	.word	0xff39f1fe
 800470c:	46004400 	.word	0x46004400
 8004710:	40009400 	.word	0x40009400
 8004714:	46004800 	.word	0x46004800
 8004718:	46004c00 	.word	0x46004c00

0800471c <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00c      	beq.n	800474e <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800473c:	d107      	bne.n	800474e <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800474c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0204 	orr.w	r2, r2, #4
 800476c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d120      	bne.n	80047dc <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d119      	bne.n	80047dc <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f99c 	bl	8004b04 <HAL_LPTIM_IC_CaptureCallback>
 80047cc:	e002      	b.n	80047d4 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f93e 	bl	8004a50 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ea:	d122      	bne.n	8004832 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fa:	d11a      	bne.n	8004832 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004804:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f971 	bl	8004b04 <HAL_LPTIM_IC_CaptureCallback>
 8004822:	e002      	b.n	800482a <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f913 	bl	8004a50 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d117      	bne.n	8004872 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004850:	d10f      	bne.n	8004872 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800485a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f957 	bl	8004b18 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004880:	d117      	bne.n	80048b2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d10f      	bne.n	80048b2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800489a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f937 	bl	8004b18 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d10d      	bne.n	80048dc <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d106      	bne.n	80048dc <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2202      	movs	r2, #2
 80048d4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8c4 	bl	8004a64 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d10d      	bne.n	8004906 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d106      	bne.n	8004906 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2204      	movs	r2, #4
 80048fe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8b9 	bl	8004a78 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d111      	bne.n	8004938 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b08      	cmp	r3, #8
 8004920:	d10a      	bne.n	8004938 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2208      	movs	r2, #8
 8004928:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8aa 	bl	8004a8c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004942:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004946:	d113      	bne.n	8004970 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004952:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004956:	d10b      	bne.n	8004970 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004960:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f88e 	bl	8004a8c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d10d      	bne.n	800499a <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d106      	bne.n	800499a <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2210      	movs	r2, #16
 8004992:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f883 	bl	8004aa0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d10d      	bne.n	80049c4 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d106      	bne.n	80049c4 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2220      	movs	r2, #32
 80049bc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f878 	bl	8004ab4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d10d      	bne.n	80049ee <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d106      	bne.n	80049ee <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f86d 	bl	8004ac8 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d10d      	bne.n	8004a18 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d106      	bne.n	8004a18 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f862 	bl	8004adc <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d10f      	bne.n	8004a48 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d107      	bne.n	8004a48 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a40:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f854 	bl	8004af0 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <LPTIM_WaitForFlag+0x58>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <LPTIM_WaitForFlag+0x5c>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0b9b      	lsrs	r3, r3, #14
 8004b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d002      	beq.n	8004b76 <LPTIM_WaitForFlag+0x4a>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ec      	bne.n	8004b50 <LPTIM_WaitForFlag+0x24>

  return result;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	20000000 	.word	0x20000000
 8004b88:	d1b71759 	.word	0xd1b71759

08004b8c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	46020800 	.word	0x46020800

08004bac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bbc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10b      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d905      	bls.n	8004bda <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004bce:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e057      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be4:	d90a      	bls.n	8004bfc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004be6:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	60d3      	str	r3, [r2, #12]
 8004bfa:	e007      	b.n	8004c0c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c04:	4925      	ldr	r1, [pc, #148]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c0c:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	2232      	movs	r2, #50	; 0x32
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	099b      	lsrs	r3, r3, #6
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c2a:	e002      	b.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f3      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	2232      	movs	r2, #50	; 0x32
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c68:	e002      	b.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f3      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	46020800 	.word	0x46020800
 8004ca0:	20000000 	.word	0x20000000
 8004ca4:	10624dd3 	.word	0x10624dd3

08004ca8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	46020800 	.word	0x46020800

08004cc4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ccc:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_PWREx_ConfigSupply+0x94>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a22      	ldr	r2, [pc, #136]	; (8004d5c <HAL_PWREx_ConfigSupply+0x98>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	2232      	movs	r2, #50	; 0x32
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_PWREx_ConfigSupply+0x98>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d113      	bne.n	8004d18 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cf6:	f023 0302 	bic.w	r3, r3, #2
 8004cfa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004cfc:	e002      	b.n	8004d04 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d116      	bne.n	8004d3e <HAL_PWREx_ConfigSupply+0x7a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f3      	bne.n	8004cfe <HAL_PWREx_ConfigSupply+0x3a>
 8004d16:	e012      	b.n	8004d3e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d24:	e002      	b.n	8004d2c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_PWREx_ConfigSupply+0x7a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f3      	bne.n	8004d26 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e000      	b.n	8004d4a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	10624dd3 	.word	0x10624dd3
 8004d60:	46020800 	.word	0x46020800

08004d64 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	4a0f      	ldr	r2, [pc, #60]	; (8004db4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d90:	bf30      	wfi
 8004d92:	e002      	b.n	8004d9a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d94:	bf40      	sev
    __WFE();
 8004d96:	bf20      	wfe
    __WFE();
 8004d98:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	6113      	str	r3, [r2, #16]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	46020800 	.word	0x46020800
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dca:	6113      	str	r3, [r2, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	46020800 	.word	0x46020800

08004ddc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_PWREx_EnableVddA+0x1c>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	4a04      	ldr	r2, [pc, #16]	; (8004df8 <HAL_PWREx_EnableVddA+0x1c>)
 8004de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dea:	6113      	str	r3, [r2, #16]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	46020800 	.word	0x46020800

08004dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	46020800 	.word	0x46020800

08004e1c <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2e:	f000 8090 	beq.w	8004f52 <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 8004e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e36:	f200 8098 	bhi.w	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e3e:	d07c      	beq.n	8004f3a <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 8004e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e44:	f200 8091 	bhi.w	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4c:	d069      	beq.n	8004f22 <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	f200 808a 	bhi.w	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5a:	d056      	beq.n	8004f0a <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 8004e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e60:	f200 8083 	bhi.w	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e68:	d043      	beq.n	8004ef2 <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 8004e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6e:	d87c      	bhi.n	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e74:	d031      	beq.n	8004eda <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 8004e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e7a:	d876      	bhi.n	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e80:	d020      	beq.n	8004ec4 <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 8004e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e86:	d870      	bhi.n	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d003      	beq.n	8004e96 <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 8004e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e92:	d00b      	beq.n	8004eac <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR5_SRAM6PDS1) */

    default:
    {
      return;
 8004e94:	e069      	b.n	8004f6a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4935      	ldr	r1, [pc, #212]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	604b      	str	r3, [r1, #4]
      break;
 8004eaa:	e05f      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 8004eb4:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	492e      	ldr	r1, [pc, #184]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	604b      	str	r3, [r1, #4]
      break;
 8004ec2:	e053      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	4929      	ldr	r1, [pc, #164]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
      break;
 8004ed8:	e048      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 8004ee2:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	4923      	ldr	r1, [pc, #140]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
      break;
 8004ef0:	e03c      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 8004efa:	4b1f      	ldr	r3, [pc, #124]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	491d      	ldr	r1, [pc, #116]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
      break;
 8004f08:	e030      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	025b      	lsls	r3, r3, #9
 8004f1a:	4917      	ldr	r1, [pc, #92]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
      break;
 8004f20:	e024      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	4911      	ldr	r1, [pc, #68]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
      break;
 8004f38:	e018      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	02db      	lsls	r3, r3, #11
 8004f4a:	490b      	ldr	r1, [pc, #44]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
      break;
 8004f50:	e00c      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	4905      	ldr	r1, [pc, #20]	; (8004f78 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
      break;
 8004f68:	e000      	b.n	8004f6c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 8004f6a:	bf00      	nop
      break;
    }
  }
}
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	46020800 	.word	0x46020800

08004f7c <HAL_PWREx_EnableSRAM4FastWakeUp>:
  *         Stop 0, Stop 1 and Stop 2 modes, and also increases the LPDMA access time
  *         to SRAM4 during Stop modes.
  * @retval None.
  */
void HAL_PWREx_EnableSRAM4FastWakeUp(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_SRAM4FWU);
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8004f86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f8a:	6053      	str	r3, [r2, #4]
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	46020800 	.word	0x46020800

08004f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	; 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f000 bec8 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb6:	4b99      	ldr	r3, [pc, #612]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc0:	4b96      	ldr	r3, [pc, #600]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 816c 	beq.w	80052b0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_RCC_OscConfig+0x52>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	f040 80de 	bne.w	80051a2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 80da 	bne.w	80051a2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f000 bea5 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005000:	4b86      	ldr	r3, [pc, #536]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_RCC_OscConfig+0x7a>
 800500c:	4b83      	ldr	r3, [pc, #524]	; (800521c <HAL_RCC_OscConfig+0x280>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005014:	e005      	b.n	8005022 <HAL_RCC_OscConfig+0x86>
 8005016:	4b81      	ldr	r3, [pc, #516]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005022:	4293      	cmp	r3, r2
 8005024:	d255      	bcs.n	80050d2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fa17 	bl	8006464 <RCC_SetFlashLatencyFromMSIRange>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f000 be82 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005042:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a75      	ldr	r2, [pc, #468]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800504c:	6093      	str	r3, [r2, #8]
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	4970      	ldr	r1, [pc, #448]	; (800521c <HAL_RCC_OscConfig+0x280>)
 800505c:	4313      	orrs	r3, r2
 800505e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005068:	d309      	bcc.n	800507e <HAL_RCC_OscConfig+0xe2>
 800506a:	4b6c      	ldr	r3, [pc, #432]	; (800521c <HAL_RCC_OscConfig+0x280>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 021f 	bic.w	r2, r3, #31
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4969      	ldr	r1, [pc, #420]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005078:	4313      	orrs	r3, r2
 800507a:	60cb      	str	r3, [r1, #12]
 800507c:	e07e      	b.n	800517c <HAL_RCC_OscConfig+0x1e0>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	da0a      	bge.n	800509c <HAL_RCC_OscConfig+0x100>
 8005086:	4b65      	ldr	r3, [pc, #404]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	015b      	lsls	r3, r3, #5
 8005094:	4961      	ldr	r1, [pc, #388]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
 800509a:	e06f      	b.n	800517c <HAL_RCC_OscConfig+0x1e0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d30a      	bcc.n	80050bc <HAL_RCC_OscConfig+0x120>
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	029b      	lsls	r3, r3, #10
 80050b4:	4959      	ldr	r1, [pc, #356]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60cb      	str	r3, [r1, #12]
 80050ba:	e05f      	b.n	800517c <HAL_RCC_OscConfig+0x1e0>
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	03db      	lsls	r3, r3, #15
 80050ca:	4954      	ldr	r1, [pc, #336]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60cb      	str	r3, [r1, #12]
 80050d0:	e054      	b.n	800517c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80050d2:	4b52      	ldr	r3, [pc, #328]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a51      	ldr	r2, [pc, #324]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050dc:	6093      	str	r3, [r2, #8]
 80050de:	4b4f      	ldr	r3, [pc, #316]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	494c      	ldr	r1, [pc, #304]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80050f8:	d309      	bcc.n	800510e <HAL_RCC_OscConfig+0x172>
 80050fa:	4b48      	ldr	r3, [pc, #288]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f023 021f 	bic.w	r2, r3, #31
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4945      	ldr	r1, [pc, #276]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005108:	4313      	orrs	r3, r2
 800510a:	60cb      	str	r3, [r1, #12]
 800510c:	e028      	b.n	8005160 <HAL_RCC_OscConfig+0x1c4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	da0a      	bge.n	800512c <HAL_RCC_OscConfig+0x190>
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	015b      	lsls	r3, r3, #5
 8005124:	493d      	ldr	r1, [pc, #244]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005126:	4313      	orrs	r3, r2
 8005128:	60cb      	str	r3, [r1, #12]
 800512a:	e019      	b.n	8005160 <HAL_RCC_OscConfig+0x1c4>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d30a      	bcc.n	800514c <HAL_RCC_OscConfig+0x1b0>
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	029b      	lsls	r3, r3, #10
 8005144:	4935      	ldr	r1, [pc, #212]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005146:	4313      	orrs	r3, r2
 8005148:	60cb      	str	r3, [r1, #12]
 800514a:	e009      	b.n	8005160 <HAL_RCC_OscConfig+0x1c4>
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCC_OscConfig+0x280>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	03db      	lsls	r3, r3, #15
 800515a:	4930      	ldr	r1, [pc, #192]	; (800521c <HAL_RCC_OscConfig+0x280>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f97a 	bl	8006464 <RCC_SetFlashLatencyFromMSIRange>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f000 bde5 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800517c:	f001 f8e4 	bl	8006348 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <HAL_RCC_OscConfig+0x284>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc facd 	bl	8001724 <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 808a 	beq.w	80052ae <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800519a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800519e:	f000 bdd2 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d066      	beq.n	8005278 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051b6:	f7fc fc53 	bl	8001a60 <HAL_GetTick>
 80051ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80051bc:	e009      	b.n	80051d2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051be:	f7fc fc4f 	bl	8001a60 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	f000 bdba 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051e8:	6093      	str	r3, [r2, #8]
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	4909      	ldr	r1, [pc, #36]	; (800521c <HAL_RCC_OscConfig+0x280>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005204:	d30e      	bcc.n	8005224 <HAL_RCC_OscConfig+0x288>
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f023 021f 	bic.w	r2, r3, #31
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	4902      	ldr	r1, [pc, #8]	; (800521c <HAL_RCC_OscConfig+0x280>)
 8005214:	4313      	orrs	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
 8005218:	e04a      	b.n	80052b0 <HAL_RCC_OscConfig+0x314>
 800521a:	bf00      	nop
 800521c:	46020c00 	.word	0x46020c00
 8005220:	20000004 	.word	0x20000004
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	da0a      	bge.n	8005242 <HAL_RCC_OscConfig+0x2a6>
 800522c:	4b98      	ldr	r3, [pc, #608]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	4995      	ldr	r1, [pc, #596]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800523c:	4313      	orrs	r3, r2
 800523e:	60cb      	str	r3, [r1, #12]
 8005240:	e036      	b.n	80052b0 <HAL_RCC_OscConfig+0x314>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d30a      	bcc.n	8005262 <HAL_RCC_OscConfig+0x2c6>
 800524c:	4b90      	ldr	r3, [pc, #576]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	498d      	ldr	r1, [pc, #564]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	60cb      	str	r3, [r1, #12]
 8005260:	e026      	b.n	80052b0 <HAL_RCC_OscConfig+0x314>
 8005262:	4b8b      	ldr	r3, [pc, #556]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	03db      	lsls	r3, r3, #15
 8005270:	4987      	ldr	r1, [pc, #540]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
 8005276:	e01b      	b.n	80052b0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005278:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a84      	ldr	r2, [pc, #528]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005284:	f7fc fbec 	bl	8001a60 <HAL_GetTick>
 8005288:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800528a:	e009      	b.n	80052a0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800528c:	f7fc fbe8 	bl	8001a60 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d902      	bls.n	80052a0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	f000 bd53 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80052a0:	4b7b      	ldr	r3, [pc, #492]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ef      	bne.n	800528c <HAL_RCC_OscConfig+0x2f0>
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 808b 	beq.w	80053d4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_OscConfig+0x334>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d109      	bne.n	80052de <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d17d      	bne.n	80053d4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f000 bd34 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x35a>
 80052e8:	4b69      	ldr	r3, [pc, #420]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a68      	ldr	r2, [pc, #416]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e041      	b.n	800537a <HAL_RCC_OscConfig+0x3de>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052fe:	d112      	bne.n	8005326 <HAL_RCC_OscConfig+0x38a>
 8005300:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a62      	ldr	r2, [pc, #392]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b60      	ldr	r3, [pc, #384]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5f      	ldr	r2, [pc, #380]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4b5d      	ldr	r3, [pc, #372]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5c      	ldr	r2, [pc, #368]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e029      	b.n	800537a <HAL_RCC_OscConfig+0x3de>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800532e:	d112      	bne.n	8005356 <HAL_RCC_OscConfig+0x3ba>
 8005330:	4b57      	ldr	r3, [pc, #348]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a56      	ldr	r2, [pc, #344]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b54      	ldr	r3, [pc, #336]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a53      	ldr	r2, [pc, #332]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b51      	ldr	r3, [pc, #324]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a50      	ldr	r2, [pc, #320]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	e011      	b.n	800537a <HAL_RCC_OscConfig+0x3de>
 8005356:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a4d      	ldr	r2, [pc, #308]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4a      	ldr	r2, [pc, #296]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b48      	ldr	r3, [pc, #288]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a47      	ldr	r2, [pc, #284]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005378:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d014      	beq.n	80053ac <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005382:	f7fc fb6d 	bl	8001a60 <HAL_GetTick>
 8005386:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005388:	e009      	b.n	800539e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538a:	f7fc fb69 	bl	8001a60 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b64      	cmp	r3, #100	; 0x64
 8005396:	d902      	bls.n	800539e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	f000 bcd4 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <HAL_RCC_OscConfig+0x3ee>
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80053ac:	f7fc fb58 	bl	8001a60 <HAL_GetTick>
 80053b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053b2:	e009      	b.n	80053c8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fb54 	bl	8001a60 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d902      	bls.n	80053c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	f000 bcbf 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c8:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ef      	bne.n	80053b4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05f      	beq.n	80054a0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x456>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d114      	bne.n	8005416 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d111      	bne.n	8005416 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f000 bca3 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b23      	ldr	r3, [pc, #140]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	4920      	ldr	r1, [pc, #128]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005410:	4313      	orrs	r3, r2
 8005412:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005414:	e044      	b.n	80054a0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800541e:	4b1c      	ldr	r3, [pc, #112]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800542a:	f7fc fb19 	bl	8001a60 <HAL_GetTick>
 800542e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005430:	e009      	b.n	8005446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005432:	f7fc fb15 	bl	8001a60 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d902      	bls.n	8005446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	f000 bc80 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	490b      	ldr	r1, [pc, #44]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	610b      	str	r3, [r1, #16]
 8005466:	e01b      	b.n	80054a0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <HAL_RCC_OscConfig+0x4f4>)
 800546e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005472:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005474:	f7fc faf4 	bl	8001a60 <HAL_GetTick>
 8005478:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547a:	e00b      	b.n	8005494 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547c:	f7fc faf0 	bl	8001a60 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d904      	bls.n	8005494 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	f000 bc5b 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
 8005490:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005494:	4baf      	ldr	r3, [pc, #700]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ed      	bne.n	800547c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80c8 	beq.w	800563e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b4:	4ba7      	ldr	r3, [pc, #668]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80054b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d111      	bne.n	80054e6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	4ba4      	ldr	r3, [pc, #656]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c8:	4aa2      	ldr	r2, [pc, #648]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80054d2:	4ba0      	ldr	r3, [pc, #640]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80054d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054e6:	4b9c      	ldr	r3, [pc, #624]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d119      	bne.n	8005526 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054f2:	4b99      	ldr	r3, [pc, #612]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	4a98      	ldr	r2, [pc, #608]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054fe:	f7fc faaf 	bl	8001a60 <HAL_GetTick>
 8005502:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005504:	e009      	b.n	800551a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005506:	f7fc faab 	bl	8001a60 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d902      	bls.n	800551a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	f000 bc16 	b.w	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800551a:	4b8f      	ldr	r3, [pc, #572]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ef      	beq.n	8005506 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d05f      	beq.n	80055ee <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800552e:	4b89      	ldr	r3, [pc, #548]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005534:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	429a      	cmp	r2, r3
 8005542:	d037      	beq.n	80055b4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e3f4      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01b      	beq.n	800559e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005566:	4b7b      	ldr	r3, [pc, #492]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800556c:	4a79      	ldr	r2, [pc, #484]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 800556e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005576:	f7fc fa73 	bl	8001a60 <HAL_GetTick>
 800557a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800557e:	f7fc fa6f 	bl	8001a60 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b05      	cmp	r3, #5
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e3da      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005590:	4b70      	ldr	r3, [pc, #448]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ef      	bne.n	800557e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800559e:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	4969      	ldr	r1, [pc, #420]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80055b4:	4b67      	ldr	r3, [pc, #412]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055ba:	4a66      	ldr	r2, [pc, #408]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80055c4:	f7fc fa4c 	bl	8001a60 <HAL_GetTick>
 80055c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fc fa48 	bl	8001a60 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e3b3      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80055de:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ef      	beq.n	80055cc <HAL_RCC_OscConfig+0x630>
 80055ec:	e01b      	b.n	8005626 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80055ee:	4b59      	ldr	r3, [pc, #356]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f4:	4a57      	ldr	r2, [pc, #348]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80055f6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80055fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80055fe:	f7fc fa2f 	bl	8001a60 <HAL_GetTick>
 8005602:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fc fa2b 	bl	8001a60 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b05      	cmp	r3, #5
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e396      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005618:	4b4e      	ldr	r3, [pc, #312]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 800561a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ef      	bne.n	8005606 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005626:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800562a:	2b01      	cmp	r3, #1
 800562c:	d107      	bne.n	800563e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562e:	4b49      	ldr	r3, [pc, #292]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005634:	4a47      	ldr	r2, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005636:	f023 0304 	bic.w	r3, r3, #4
 800563a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8111 	beq.w	800586e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005652:	4b40      	ldr	r3, [pc, #256]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d111      	bne.n	8005684 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005660:	4b3c      	ldr	r3, [pc, #240]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005666:	4a3b      	ldr	r2, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005670:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005684:	4b34      	ldr	r3, [pc, #208]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d118      	bne.n	80056c2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005690:	4b31      	ldr	r3, [pc, #196]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	4a30      	ldr	r2, [pc, #192]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569c:	f7fc f9e0 	bl	8001a60 <HAL_GetTick>
 80056a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fc f9dc 	bl	8001a60 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e347      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCC_OscConfig+0x7bc>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01f      	beq.n	800570e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80056dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e0:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80056ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056f0:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056fa:	e018      	b.n	800572e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 80056fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005702:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800570c:	e00f      	b.n	800572e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005714:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005724:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x7b8>)
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d057      	beq.n	80057e6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005736:	f7fc f993 	bl	8001a60 <HAL_GetTick>
 800573a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573c:	e00e      	b.n	800575c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fc f98f 	bl	8001a60 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d905      	bls.n	800575c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e2f8      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
 8005754:	46020c00 	.word	0x46020c00
 8005758:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575c:	4b9c      	ldr	r3, [pc, #624]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 800575e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0e9      	beq.n	800573e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01b      	beq.n	80057ae <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005776:	4b96      	ldr	r3, [pc, #600]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800577c:	4a94      	ldr	r2, [pc, #592]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005786:	e00a      	b.n	800579e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fc f96a 	bl	8001a60 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	; 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e2d3      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800579e:	4b8c      	ldr	r3, [pc, #560]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80057a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ed      	beq.n	8005788 <HAL_RCC_OscConfig+0x7ec>
 80057ac:	e053      	b.n	8005856 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057ae:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80057b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057b4:	4a86      	ldr	r2, [pc, #536]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80057b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fc f94e 	bl	8001a60 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e2b7      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057d6:	4b7e      	ldr	r3, [pc, #504]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80057d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ed      	bne.n	80057c0 <HAL_RCC_OscConfig+0x824>
 80057e4:	e037      	b.n	8005856 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80057e6:	f7fc f93b 	bl	8001a60 <HAL_GetTick>
 80057ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fc f937 	bl	8001a60 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e2a0      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005804:	4b72      	ldr	r3, [pc, #456]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ed      	bne.n	80057ee <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005812:	4b6f      	ldr	r3, [pc, #444]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005820:	4b6b      	ldr	r3, [pc, #428]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005826:	4a6a      	ldr	r2, [pc, #424]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fc f915 	bl	8001a60 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e27e      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005848:	4b61      	ldr	r3, [pc, #388]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 800584a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800584e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1ed      	bne.n	8005832 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005856:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585e:	4b5c      	ldr	r3, [pc, #368]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005864:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d036      	beq.n	80058e8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005882:	4b53      	ldr	r3, [pc, #332]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a52      	ldr	r2, [pc, #328]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800588c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800588e:	f7fc f8e7 	bl	8001a60 <HAL_GetTick>
 8005892:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005896:	f7fc f8e3 	bl	8001a60 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e24e      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058a8:	4b49      	ldr	r3, [pc, #292]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x8fa>
 80058b4:	e018      	b.n	80058e8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a45      	ldr	r2, [pc, #276]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80058bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058c2:	f7fc f8cd 	bl	8001a60 <HAL_GetTick>
 80058c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ca:	f7fc f8c9 	bl	8001a60 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e234      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058dc:	4b3c      	ldr	r3, [pc, #240]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d036      	beq.n	8005962 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d019      	beq.n	8005930 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80058fc:	4b34      	ldr	r3, [pc, #208]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a33      	ldr	r2, [pc, #204]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005906:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005908:	f7fc f8aa 	bl	8001a60 <HAL_GetTick>
 800590c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005910:	f7fc f8a6 	bl	8001a60 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e211      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005922:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x974>
 800592e:	e018      	b.n	8005962 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800593c:	f7fc f890 	bl	8001a60 <HAL_GetTick>
 8005940:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005944:	f7fc f88c 	bl	8001a60 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e1f7      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d07f      	beq.n	8005a6e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	2b00      	cmp	r3, #0
 8005974:	d062      	beq.n	8005a3c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 800597c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005980:	6093      	str	r3, [r2, #8]
 8005982:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	4910      	ldr	r1, [pc, #64]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800599c:	d309      	bcc.n	80059b2 <HAL_RCC_OscConfig+0xa16>
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 021f 	bic.w	r2, r3, #31
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4909      	ldr	r1, [pc, #36]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60cb      	str	r3, [r1, #12]
 80059b0:	e02a      	b.n	8005a08 <HAL_RCC_OscConfig+0xa6c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da0c      	bge.n	80059d4 <HAL_RCC_OscConfig+0xa38>
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	015b      	lsls	r3, r3, #5
 80059c8:	4901      	ldr	r1, [pc, #4]	; (80059d0 <HAL_RCC_OscConfig+0xa34>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60cb      	str	r3, [r1, #12]
 80059ce:	e01b      	b.n	8005a08 <HAL_RCC_OscConfig+0xa6c>
 80059d0:	46020c00 	.word	0x46020c00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d30a      	bcc.n	80059f4 <HAL_RCC_OscConfig+0xa58>
 80059de:	4ba1      	ldr	r3, [pc, #644]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	029b      	lsls	r3, r3, #10
 80059ec:	499d      	ldr	r1, [pc, #628]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60cb      	str	r3, [r1, #12]
 80059f2:	e009      	b.n	8005a08 <HAL_RCC_OscConfig+0xa6c>
 80059f4:	4b9b      	ldr	r3, [pc, #620]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	03db      	lsls	r3, r3, #15
 8005a02:	4998      	ldr	r1, [pc, #608]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005a08:	4b96      	ldr	r3, [pc, #600]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a95      	ldr	r2, [pc, #596]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a0e:	f043 0310 	orr.w	r3, r3, #16
 8005a12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a14:	f7fc f824 	bl	8001a60 <HAL_GetTick>
 8005a18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a1c:	f7fc f820 	bl	8001a60 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e18b      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a2e:	4b8d      	ldr	r3, [pc, #564]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0xa80>
 8005a3a:	e018      	b.n	8005a6e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005a3c:	4b89      	ldr	r3, [pc, #548]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a88      	ldr	r2, [pc, #544]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a42:	f023 0310 	bic.w	r3, r3, #16
 8005a46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a48:	f7fc f80a 	bl	8001a60 <HAL_GetTick>
 8005a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a50:	f7fc f806 	bl	8001a60 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e171      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a62:	4b80      	ldr	r3, [pc, #512]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8166 	beq.w	8005d44 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a7e:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b0c      	cmp	r3, #12
 8005a88:	f000 80f2 	beq.w	8005c70 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	f040 80c5 	bne.w	8005c20 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a72      	ldr	r2, [pc, #456]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005aa2:	f7fb ffdd 	bl	8001a60 <HAL_GetTick>
 8005aa6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aaa:	f7fb ffd9 	bl	8001a60 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e144      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005abc:	4b69      	ldr	r3, [pc, #420]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac8:	4b66      	ldr	r3, [pc, #408]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d111      	bne.n	8005afa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005adc:	4a61      	ldr	r2, [pc, #388]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005ade:	f043 0304 	orr.w	r3, r3, #4
 8005ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ae6:	4b5f      	ldr	r3, [pc, #380]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005afa:	4b5b      	ldr	r3, [pc, #364]	; (8005c68 <HAL_RCC_OscConfig+0xccc>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b06:	d102      	bne.n	8005b0e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b0e:	4b56      	ldr	r3, [pc, #344]	; (8005c68 <HAL_RCC_OscConfig+0xccc>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	4a55      	ldr	r2, [pc, #340]	; (8005c68 <HAL_RCC_OscConfig+0xccc>)
 8005b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b18:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005b1a:	4b52      	ldr	r3, [pc, #328]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b2e:	3a01      	subs	r2, #1
 8005b30:	0212      	lsls	r2, r2, #8
 8005b32:	4311      	orrs	r1, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	494a      	ldr	r1, [pc, #296]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b40:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b44:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <HAL_RCC_OscConfig+0xcd0>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0252      	lsls	r2, r2, #9
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b62:	3a01      	subs	r2, #1
 8005b64:	0412      	lsls	r2, r2, #16
 8005b66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005b6a:	4311      	orrs	r1, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b70:	3a01      	subs	r2, #1
 8005b72:	0612      	lsls	r2, r2, #24
 8005b74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	493a      	ldr	r1, [pc, #232]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005b80:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b86:	f023 0310 	bic.w	r3, r3, #16
 8005b8a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005b96:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	4a32      	ldr	r2, [pc, #200]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005b9c:	f043 0310 	orr.w	r3, r3, #16
 8005ba0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f023 020c 	bic.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	492d      	ldr	r1, [pc, #180]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005bbc:	4b2a      	ldr	r3, [pc, #168]	; (8005c68 <HAL_RCC_OscConfig+0xccc>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_RCC_OscConfig+0xccc>)
 8005bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005bc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd6:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bea:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005bec:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005bf8:	f7fb ff32 	bl	8001a60 <HAL_GetTick>
 8005bfc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fb ff2e 	bl	8001a60 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e099      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0xc64>
 8005c1e:	e091      	b.n	8005d44 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c2c:	f7fb ff18 	bl	8001a60 <HAL_GetTick>
 8005c30:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fb ff14 	bl	8001a60 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e07f      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005c52:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	4a03      	ldr	r2, [pc, #12]	; (8005c64 <HAL_RCC_OscConfig+0xcc8>)
 8005c58:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	6293      	str	r3, [r2, #40]	; 0x28
 8005c62:	e06f      	b.n	8005d44 <HAL_RCC_OscConfig+0xda8>
 8005c64:	46020c00 	.word	0x46020c00
 8005c68:	46020800 	.word	0x46020800
 8005c6c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005c70:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c76:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d039      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0203 	and.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d132      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d129      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d122      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d11a      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	0a5b      	lsrs	r3, r3, #9
 8005cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d111      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d108      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e024      	b.n	8005d46 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fb fea1 	bl	8001a60 <HAL_GetTick>
 8005d1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005d20:	bf00      	nop
 8005d22:	f7fb fe9d 	bl	8001a60 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d0f9      	beq.n	8005d22 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d32:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_RCC_OscConfig+0xdb4>)
 8005d3e:	f043 0310 	orr.w	r3, r3, #16
 8005d42:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3738      	adds	r7, #56	; 0x38
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	46020c00 	.word	0x46020c00

08005d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e1d9      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d68:	4b9b      	ldr	r3, [pc, #620]	; (8005fd8 <HAL_RCC_ClockConfig+0x284>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d910      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b98      	ldr	r3, [pc, #608]	; (8005fd8 <HAL_RCC_ClockConfig+0x284>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 020f 	bic.w	r2, r3, #15
 8005d7e:	4996      	ldr	r1, [pc, #600]	; (8005fd8 <HAL_RCC_ClockConfig+0x284>)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b94      	ldr	r3, [pc, #592]	; (8005fd8 <HAL_RCC_ClockConfig+0x284>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e1c1      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	4b8c      	ldr	r3, [pc, #560]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d908      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005db4:	4b89      	ldr	r3, [pc, #548]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	4986      	ldr	r1, [pc, #536]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d012      	beq.n	8005df8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	4b81      	ldr	r3, [pc, #516]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d909      	bls.n	8005df8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005de4:	4b7d      	ldr	r3, [pc, #500]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	497a      	ldr	r1, [pc, #488]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	4b74      	ldr	r3, [pc, #464]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d908      	bls.n	8005e26 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e14:	4b71      	ldr	r3, [pc, #452]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	496e      	ldr	r1, [pc, #440]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	4b69      	ldr	r3, [pc, #420]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d908      	bls.n	8005e54 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005e42:	4b66      	ldr	r3, [pc, #408]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 020f 	bic.w	r2, r3, #15
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4963      	ldr	r1, [pc, #396]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80d2 	beq.w	8006006 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d143      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6e:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d110      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005e7c:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e82:	4a56      	ldr	r2, [pc, #344]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e8c:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005e9e:	f7fb fddf 	bl	8001a60 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005ea4:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCC_ClockConfig+0x28c>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005eb2:	f7fb fdd5 	bl	8001a60 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e12b      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ec4:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <HAL_RCC_ClockConfig+0x28c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005ed6:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	4a3f      	ldr	r2, [pc, #252]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005ede:	f023 0304 	bic.w	r3, r3, #4
 8005ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ee6:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d121      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e112      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d107      	bne.n	8005f0e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efe:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d115      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e106      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005f16:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0fa      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f26:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0f2      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f023 0203 	bic.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4926      	ldr	r1, [pc, #152]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005f48:	f7fb fd8a 	bl	8001a60 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d112      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fb fd82 	bl	8001a60 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0d6      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d1ee      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x204>
 8005f7a:	e044      	b.n	8006006 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d112      	bne.n	8005faa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f86:	f7fb fd6b 	bl	8001a60 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e0bf      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d1ee      	bne.n	8005f86 <HAL_RCC_ClockConfig+0x232>
 8005fa8:	e02d      	b.n	8006006 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d123      	bne.n	8005ffa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb4:	f7fb fd54 	bl	8001a60 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e0a8      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fca:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <HAL_RCC_ClockConfig+0x288>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1ee      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x260>
 8005fd6:	e016      	b.n	8006006 <HAL_RCC_ClockConfig+0x2b2>
 8005fd8:	40022000 	.word	0x40022000
 8005fdc:	46020c00 	.word	0x46020c00
 8005fe0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe4:	f7fb fd3c 	bl	8001a60 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e090      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b04      	cmp	r3, #4
 8006004:	d1ee      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d010      	beq.n	8006034 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	429a      	cmp	r2, r3
 8006020:	d208      	bcs.n	8006034 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006022:	4b40      	ldr	r3, [pc, #256]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 020f 	bic.w	r2, r3, #15
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	493d      	ldr	r1, [pc, #244]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8006030:	4313      	orrs	r3, r2
 8006032:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006034:	4b3c      	ldr	r3, [pc, #240]	; (8006128 <HAL_RCC_ClockConfig+0x3d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d210      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	4b39      	ldr	r3, [pc, #228]	; (8006128 <HAL_RCC_ClockConfig+0x3d4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 020f 	bic.w	r2, r3, #15
 800604a:	4937      	ldr	r1, [pc, #220]	; (8006128 <HAL_RCC_ClockConfig+0x3d4>)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b35      	ldr	r3, [pc, #212]	; (8006128 <HAL_RCC_ClockConfig+0x3d4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e05b      	b.n	800611c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800607c:	429a      	cmp	r2, r3
 800607e:	d208      	bcs.n	8006092 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006080:	4b28      	ldr	r3, [pc, #160]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4925      	ldr	r1, [pc, #148]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 800608e:	4313      	orrs	r3, r2
 8006090:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	4b20      	ldr	r3, [pc, #128]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d209      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	4919      	ldr	r1, [pc, #100]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	4b13      	ldr	r3, [pc, #76]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060dc:	429a      	cmp	r2, r3
 80060de:	d208      	bcs.n	80060f2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	490d      	ldr	r1, [pc, #52]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80060f2:	f000 f821 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <HAL_RCC_ClockConfig+0x3d0>)
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	490a      	ldr	r1, [pc, #40]	; (800612c <HAL_RCC_ClockConfig+0x3d8>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <HAL_RCC_ClockConfig+0x3dc>)
 800610a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_RCC_ClockConfig+0x3e0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fb fb07 	bl	8001724 <HAL_InitTick>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]

  return status;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	46020c00 	.word	0x46020c00
 8006128:	40022000 	.word	0x40022000
 800612c:	08015bbc 	.word	0x08015bbc
 8006130:	20000000 	.word	0x20000000
 8006134:	20000004 	.word	0x20000004

08006138 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006138:	b480      	push	{r7}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006146:	4b7b      	ldr	r3, [pc, #492]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006150:	4b78      	ldr	r3, [pc, #480]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x34>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b0c      	cmp	r3, #12
 8006164:	d121      	bne.n	80061aa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d11e      	bne.n	80061aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800616c:	4b71      	ldr	r3, [pc, #452]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006178:	4b6e      	ldr	r3, [pc, #440]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800617e:	0b1b      	lsrs	r3, r3, #12
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	e005      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006188:	4b6a      	ldr	r3, [pc, #424]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	0f1b      	lsrs	r3, r3, #28
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006194:	4a68      	ldr	r2, [pc, #416]	; (8006338 <HAL_RCC_GetSysClockFreq+0x200>)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061a8:	e00d      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061aa:	4b62      	ldr	r3, [pc, #392]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d102      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061b6:	4b61      	ldr	r3, [pc, #388]	; (800633c <HAL_RCC_GetSysClockFreq+0x204>)
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	e004      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d101      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061c2:	4b5e      	ldr	r3, [pc, #376]	; (800633c <HAL_RCC_GetSysClockFreq+0x204>)
 80061c4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b0c      	cmp	r3, #12
 80061ca:	f040 80ac 	bne.w	8006326 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061ce:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061d8:	4b56      	ldr	r3, [pc, #344]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061e6:	4b53      	ldr	r3, [pc, #332]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061f2:	4b50      	ldr	r3, [pc, #320]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	08db      	lsrs	r3, r3, #3
 80061f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8086 	beq.w	8006322 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d003      	beq.n	8006224 <HAL_RCC_GetSysClockFreq+0xec>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d022      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x130>
 8006222:	e043      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006340 <HAL_RCC_GetSysClockFreq+0x208>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006246:	ed97 6a01 	vldr	s12, [r7, #4]
 800624a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006344 <HAL_RCC_GetSysClockFreq+0x20c>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006266:	e046      	b.n	80062f6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006340 <HAL_RCC_GetSysClockFreq+0x208>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800628a:	ed97 6a01 	vldr	s12, [r7, #4]
 800628e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006344 <HAL_RCC_GetSysClockFreq+0x20c>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800629a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80062aa:	e024      	b.n	80062f6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062d4:	ed97 6a01 	vldr	s12, [r7, #4]
 80062d8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006344 <HAL_RCC_GetSysClockFreq+0x20c>
 80062dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80062f4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	0e1b      	lsrs	r3, r3, #24
 80062fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006300:	3301      	adds	r3, #1
 8006302:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800630e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631a:	ee17 3a90 	vmov	r3, s15
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	e001      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006326:	6a3b      	ldr	r3, [r7, #32]
}
 8006328:	4618      	mov	r0, r3
 800632a:	372c      	adds	r7, #44	; 0x2c
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	46020c00 	.word	0x46020c00
 8006338:	08015bd4 	.word	0x08015bd4
 800633c:	00f42400 	.word	0x00f42400
 8006340:	4b742400 	.word	0x4b742400
 8006344:	46000000 	.word	0x46000000

08006348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800634c:	f7ff fef4 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8006350:	4602      	mov	r2, r0
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <HAL_RCC_GetHCLKFreq+0x28>)
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	4906      	ldr	r1, [pc, #24]	; (8006374 <HAL_RCC_GetHCLKFreq+0x2c>)
 800635c:	5ccb      	ldrb	r3, [r1, r3]
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <HAL_RCC_GetHCLKFreq+0x30>)
 8006364:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006366:	4b04      	ldr	r3, [pc, #16]	; (8006378 <HAL_RCC_GetHCLKFreq+0x30>)
 8006368:	681b      	ldr	r3, [r3, #0]
}
 800636a:	4618      	mov	r0, r3
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	46020c00 	.word	0x46020c00
 8006374:	08015bbc 	.word	0x08015bbc
 8006378:	20000000 	.word	0x20000000

0800637c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006380:	f7ff ffe2 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4903      	ldr	r1, [pc, #12]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	46020c00 	.word	0x46020c00
 80063a0:	08015bcc 	.word	0x08015bcc

080063a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80063a8:	f7ff ffce 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	4903      	ldr	r1, [pc, #12]	; (80063c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	46020c00 	.word	0x46020c00
 80063c8:	08015bcc 	.word	0x08015bcc

080063cc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80063d0:	f7ff ffba 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_RCC_GetPCLK3Freq+0x20>)
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	4903      	ldr	r1, [pc, #12]	; (80063f0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	46020c00 	.word	0x46020c00
 80063f0:	08015bcc 	.word	0x08015bcc

080063f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	221f      	movs	r2, #31
 8006402:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_RCC_GetClockConfig+0x68>)
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_RCC_GetClockConfig+0x68>)
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_RCC_GetClockConfig+0x68>)
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <HAL_RCC_GetClockConfig+0x68>)
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <HAL_RCC_GetClockConfig+0x68>)
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <HAL_RCC_GetClockConfig+0x6c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	46020c00 	.word	0x46020c00
 8006460:	40022000 	.word	0x40022000

08006464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800646c:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800646e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800647a:	f7fe fc15 	bl	8004ca8 <HAL_PWREx_GetVoltageRange>
 800647e:	6178      	str	r0, [r7, #20]
 8006480:	e019      	b.n	80064b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006482:	4b39      	ldr	r3, [pc, #228]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006488:	4a37      	ldr	r2, [pc, #220]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800648a:	f043 0304 	orr.w	r3, r3, #4
 800648e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006492:	4b35      	ldr	r3, [pc, #212]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064a0:	f7fe fc02 	bl	8004ca8 <HAL_PWREx_GetVoltageRange>
 80064a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064a6:	4b30      	ldr	r3, [pc, #192]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ac:	4a2e      	ldr	r2, [pc, #184]	; (8006568 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064ae:	f023 0304 	bic.w	r3, r3, #4
 80064b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064bc:	d003      	beq.n	80064c6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c4:	d109      	bne.n	80064da <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064cc:	d202      	bcs.n	80064d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80064ce:	2301      	movs	r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064d2:	e033      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064d8:	e030      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e0:	d208      	bcs.n	80064f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d102      	bne.n	80064f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80064ea:	2303      	movs	r3, #3
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e025      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e035      	b.n	8006560 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fa:	d90f      	bls.n	800651c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006508:	d902      	bls.n	8006510 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e015      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006510:	2301      	movs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e012      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	e00f      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006522:	d109      	bne.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652a:	d102      	bne.n	8006532 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800652c:	2301      	movs	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e004      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006532:	2302      	movs	r3, #2
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e001      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006538:	2301      	movs	r3, #1
 800653a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 020f 	bic.w	r2, r3, #15
 8006544:	4909      	ldr	r1, [pc, #36]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800654c:	4b07      	ldr	r3, [pc, #28]	; (800656c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d001      	beq.n	800655e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	46020c00 	.word	0x46020c00
 800656c:	40022000 	.word	0x40022000

08006570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006574:	b0ba      	sub	sp, #232	; 0xe8
 8006576:	af00      	add	r7, sp, #0
 8006578:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800657c:	2300      	movs	r3, #0
 800657e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006582:	2300      	movs	r3, #0
 8006584:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f002 0401 	and.w	r4, r2, #1
 8006594:	2500      	movs	r5, #0
 8006596:	ea54 0305 	orrs.w	r3, r4, r5
 800659a:	d00b      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800659c:	4bcb      	ldr	r3, [pc, #812]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800659e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a2:	f023 0103 	bic.w	r1, r3, #3
 80065a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	4ac7      	ldr	r2, [pc, #796]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 0802 	and.w	r8, r2, #2
 80065c0:	f04f 0900 	mov.w	r9, #0
 80065c4:	ea58 0309 	orrs.w	r3, r8, r9
 80065c8:	d00b      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80065ca:	4bc0      	ldr	r3, [pc, #768]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d0:	f023 010c 	bic.w	r1, r3, #12
 80065d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	4abc      	ldr	r2, [pc, #752]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f002 0a04 	and.w	sl, r2, #4
 80065ee:	f04f 0b00 	mov.w	fp, #0
 80065f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80065f6:	d00b      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80065f8:	4bb4      	ldr	r3, [pc, #720]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065fe:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006608:	4ab0      	ldr	r2, [pc, #704]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800660a:	430b      	orrs	r3, r1
 800660c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f002 0308 	and.w	r3, r2, #8
 800661c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006620:	2300      	movs	r3, #0
 8006622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006626:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800662a:	460b      	mov	r3, r1
 800662c:	4313      	orrs	r3, r2
 800662e:	d00b      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006630:	4ba6      	ldr	r3, [pc, #664]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800663a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	4aa2      	ldr	r2, [pc, #648]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006642:	430b      	orrs	r3, r1
 8006644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f002 0310 	and.w	r3, r2, #16
 8006654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006658:	2300      	movs	r3, #0
 800665a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800665e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d00b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006668:	4b98      	ldr	r3, [pc, #608]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800666a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800666e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006678:	4a94      	ldr	r2, [pc, #592]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800667a:	430b      	orrs	r3, r1
 800667c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f002 0320 	and.w	r3, r2, #32
 800668c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006690:	2300      	movs	r3, #0
 8006692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006696:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d00b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80066a0:	4b8a      	ldr	r3, [pc, #552]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066a6:	f023 0107 	bic.w	r1, r3, #7
 80066aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b0:	4a86      	ldr	r2, [pc, #536]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066b2:	430b      	orrs	r3, r1
 80066b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80066c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80066d8:	4b7c      	ldr	r3, [pc, #496]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066de:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80066e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e8:	4a78      	ldr	r2, [pc, #480]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80066fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006706:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800670a:	460b      	mov	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	d00b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006710:	4b6e      	ldr	r3, [pc, #440]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800671a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	4a6a      	ldr	r2, [pc, #424]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006722:	430b      	orrs	r3, r1
 8006724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800673e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d00b      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006748:	4b60      	ldr	r3, [pc, #384]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800674a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800674e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	4a5c      	ldr	r2, [pc, #368]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800675a:	430b      	orrs	r3, r1
 800675c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800676c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006776:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d00b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006780:	4b52      	ldr	r3, [pc, #328]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006786:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800678a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006790:	4a4e      	ldr	r2, [pc, #312]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006792:	430b      	orrs	r3, r1
 8006794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80067a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80067b8:	4b44      	ldr	r3, [pc, #272]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067be:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80067c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c8:	4a40      	ldr	r2, [pc, #256]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80067dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d00b      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80067f0:	4b36      	ldr	r3, [pc, #216]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067f6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006800:	4a32      	ldr	r2, [pc, #200]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006802:	430b      	orrs	r3, r1
 8006804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800681e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d00c      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006828:	4b28      	ldr	r3, [pc, #160]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800682a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800682e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800683a:	4a24      	ldr	r2, [pc, #144]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800683c:	430b      	orrs	r3, r1
 800683e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800684e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006850:	2300      	movs	r3, #0
 8006852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006854:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006858:	460b      	mov	r3, r1
 800685a:	4313      	orrs	r3, r2
 800685c:	d04f      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d02d      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800686a:	2b80      	cmp	r3, #128	; 0x80
 800686c:	d827      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800686e:	2b60      	cmp	r3, #96	; 0x60
 8006870:	d02e      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006872:	2b60      	cmp	r3, #96	; 0x60
 8006874:	d823      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d006      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d81f      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006882:	2b20      	cmp	r3, #32
 8006884:	d011      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006886:	e01a      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006888:	4b10      	ldr	r3, [pc, #64]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006892:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006894:	e01d      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	3308      	adds	r3, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f002 fa41 	bl	8008d24 <RCCEx_PLL2_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80068a8:	e013      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ae:	332c      	adds	r3, #44	; 0x2c
 80068b0:	4618      	mov	r0, r3
 80068b2:	f002 facf 	bl	8008e54 <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80068bc:	e009      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80068c6:	bf00      	nop
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80068ca:	bf00      	nop
 80068cc:	46020c00 	.word	0x46020c00
        break;
 80068d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10d      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80068da:	4bb6      	ldr	r3, [pc, #728]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068e0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	4ab1      	ldr	r2, [pc, #708]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80068f4:	e003      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068fa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800690a:	673b      	str	r3, [r7, #112]	; 0x70
 800690c:	2300      	movs	r3, #0
 800690e:	677b      	str	r3, [r7, #116]	; 0x74
 8006910:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d053      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800691a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800691e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006926:	d033      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d82c      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800692e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006932:	d02f      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006938:	d826      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800693a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800693e:	d008      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006944:	d820      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800694a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694e:	d011      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006950:	e01a      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006952:	4b98      	ldr	r3, [pc, #608]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	4a97      	ldr	r2, [pc, #604]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800695e:	e01a      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006960:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006964:	3308      	adds	r3, #8
 8006966:	4618      	mov	r0, r3
 8006968:	f002 f9dc 	bl	8008d24 <RCCEx_PLL2_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006972:	e010      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006978:	332c      	adds	r3, #44	; 0x2c
 800697a:	4618      	mov	r0, r3
 800697c:	f002 fa6a 	bl	8008e54 <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006986:	e006      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800698e:	e002      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006996:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800699e:	4b85      	ldr	r3, [pc, #532]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80069a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069b0:	4a80      	ldr	r2, [pc, #512]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069b2:	430b      	orrs	r3, r1
 80069b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80069b8:	e003      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069be:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80069c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	2300      	movs	r3, #0
 80069d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d046      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80069de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069ea:	d028      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069f0:	d821      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f6:	d022      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069fc:	d81b      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a02:	d01c      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a08:	d815      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0e:	d008      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d80f      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d011      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	d00e      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a20:	e009      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a26:	3308      	adds	r3, #8
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f002 f97b 	bl	8008d24 <RCCEx_PLL2_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a40:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006a48:	4b5a      	ldr	r3, [pc, #360]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a4e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a5a:	4a56      	ldr	r2, [pc, #344]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a68:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a78:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	d03f      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d81e      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006abf 	.word	0x08006abf
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006adb 	.word	0x08006adb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ab0:	4b40      	ldr	r3, [pc, #256]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	4a3f      	ldr	r2, [pc, #252]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006abc:	e00e      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac2:	332c      	adds	r3, #44	; 0x2c
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f002 f9c5 	bl	8008e54 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006ada:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006adc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006ae4:	4b33      	ldr	r3, [pc, #204]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006aea:	f023 0107 	bic.w	r1, r3, #7
 8006aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	4a2f      	ldr	r2, [pc, #188]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006af8:	430b      	orrs	r3, r1
 8006afa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006afe:	e003      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b04:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b16:	2300      	movs	r3, #0
 8006b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d04d      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b30:	d028      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b36:	d821      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b3c:	d024      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006b3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b42:	d81b      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b48:	d00e      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4e:	d815      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01b      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d110      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b5a:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006b66:	e012      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b6c:	332c      	adds	r3, #44	; 0x2c
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 f970 	bl	8008e54 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d110      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006b96:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba8:	4a02      	ldr	r2, [pc, #8]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006baa:	430b      	orrs	r3, r1
 8006bac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bb0:	e006      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006bb2:	bf00      	nop
 8006bb4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bbc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8006bce:	2300      	movs	r3, #0
 8006bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8006bd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f000 80b5 	beq.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006be4:	4b9d      	ldr	r3, [pc, #628]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d113      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	4b9a      	ldr	r3, [pc, #616]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf8:	4a98      	ldr	r2, [pc, #608]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006c02:	4b96      	ldr	r3, [pc, #600]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c1a:	4b91      	ldr	r3, [pc, #580]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	4a90      	ldr	r2, [pc, #576]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c26:	f7fa ff1b 	bl	8001a60 <HAL_GetTick>
 8006c2a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c2e:	e00b      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c30:	f7fa ff16 	bl	8001a60 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d903      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c46:	e005      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c48:	4b85      	ldr	r3, [pc, #532]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ed      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006c54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d165      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c5c:	4b7f      	ldr	r3, [pc, #508]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d023      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01b      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c82:	4b76      	ldr	r3, [pc, #472]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c90:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c96:	4a71      	ldr	r2, [pc, #452]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ca0:	4b6e      	ldr	r3, [pc, #440]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca6:	4a6d      	ldr	r2, [pc, #436]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cb0:	4a6a      	ldr	r2, [pc, #424]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d019      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fa fecb 	bl	8001a60 <HAL_GetTick>
 8006cca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cce:	e00d      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fa fec6 	bl	8001a60 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006cea:	e006      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	4b5b      	ldr	r3, [pc, #364]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ea      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006d02:	4b56      	ldr	r3, [pc, #344]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d14:	4a51      	ldr	r2, [pc, #324]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d16:	430b      	orrs	r3, r1
 8006d18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d1c:	e008      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d22:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006d26:	e003      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d30:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d38:	4b48      	ldr	r3, [pc, #288]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3e:	4a47      	ldr	r2, [pc, #284]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d56:	2300      	movs	r3, #0
 8006d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d042      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d70:	d022      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006d72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d76:	d81b      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7c:	d011      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d82:	d815      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d019      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d8c:	d110      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d92:	3308      	adds	r3, #8
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 ffc5 	bl	8008d24 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006da0:	e00d      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006dae:	e006      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006db6:	e002      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006dbc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006dbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10d      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dcc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dd8:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006de0:	e003      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006de6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006df6:	643b      	str	r3, [r7, #64]	; 0x40
 8006df8:	2300      	movs	r3, #0
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d032      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e12:	d00b      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e18:	d804      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	d007      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e2c:	bf00      	nop
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e30:	bf00      	nop
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e34:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e36:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d112      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e50:	4a02      	ldr	r2, [pc, #8]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e52:	430b      	orrs	r3, r1
 8006e54:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006e5a:	bf00      	nop
 8006e5c:	46020c00 	.word	0x46020c00
 8006e60:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e68:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d00c      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006e88:	4b98      	ldr	r3, [pc, #608]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e8e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e9a:	4a94      	ldr	r2, [pc, #592]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006eae:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d019      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d105      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ecc:	4b87      	ldr	r3, [pc, #540]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	4a86      	ldr	r2, [pc, #536]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006ed8:	4b84      	ldr	r3, [pc, #528]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ede:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eea:	4a80      	ldr	r2, [pc, #512]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f00:	2300      	movs	r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	d00c      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006f0e:	4b77      	ldr	r3, [pc, #476]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f20:	4972      	ldr	r1, [pc, #456]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f34:	623b      	str	r3, [r7, #32]
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d00c      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006f44:	4b69      	ldr	r3, [pc, #420]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f56:	4965      	ldr	r1, [pc, #404]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d00c      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f7a:	4b5c      	ldr	r3, [pc, #368]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f80:	f023 0218 	bic.w	r2, r3, #24
 8006f84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006f8c:	4957      	ldr	r1, [pc, #348]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d032      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fbc:	d105      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fbe:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	4a4a      	ldr	r2, [pc, #296]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fd6:	d108      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fdc:	3308      	adds	r3, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fea0 	bl	8008d24 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006fea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007004:	4939      	ldr	r1, [pc, #228]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007012:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d03a      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703e:	d00e      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007044:	d815      	bhi.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d017      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800704e:	d110      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007050:	4b26      	ldr	r3, [pc, #152]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800705a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800705c:	e00e      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800705e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007062:	3308      	adds	r3, #8
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fe5d 	bl	8008d24 <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007070:	e004      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800707a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800707c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10d      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007084:	4b19      	ldr	r3, [pc, #100]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800708a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800708e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007096:	4915      	ldr	r1, [pc, #84]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80070a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80070a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	2300      	movs	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070be:	460b      	mov	r3, r1
 80070c0:	4313      	orrs	r3, r2
 80070c2:	d00c      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80070ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070d6:	4905      	ldr	r1, [pc, #20]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80070de:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	37e8      	adds	r7, #232	; 0xe8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ec:	46020c00 	.word	0x46020c00

080070f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80070f8:	4bad      	ldr	r3, [pc, #692]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007100:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007102:	4bab      	ldr	r3, [pc, #684]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800710c:	4ba8      	ldr	r3, [pc, #672]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	3301      	adds	r3, #1
 8007118:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800711a:	4ba5      	ldr	r3, [pc, #660]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007126:	4ba2      	ldr	r3, [pc, #648]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	08db      	lsrs	r3, r3, #3
 800712c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8123 	beq.w	8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d062      	beq.n	8007216 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b03      	cmp	r3, #3
 8007154:	f200 8081 	bhi.w	800725a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d024      	beq.n	80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d17a      	bne.n	800725a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b8e      	ldr	r3, [pc, #568]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007186:	ed97 6a02 	vldr	s12, [r7, #8]
 800718a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a6:	e08f      	b.n	80072c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071a8:	4b81      	ldr	r3, [pc, #516]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80071b4:	4b7e      	ldr	r3, [pc, #504]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	0f1b      	lsrs	r3, r3, #28
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	e006      	b.n	80071ce <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80071c0:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	0f1b      	lsrs	r3, r3, #28
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	4a7b      	ldr	r2, [pc, #492]	; (80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80071d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80071fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007208:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800720c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007210:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007214:	e058      	b.n	80072c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007220:	eddf 6a64 	vldr	s13, [pc, #400]	; 80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007228:	4b61      	ldr	r3, [pc, #388]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007238:	ed97 6a02 	vldr	s12, [r7, #8]
 800723c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007240:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007244:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007254:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007258:	e036      	b.n	80072c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800725a:	4b55      	ldr	r3, [pc, #340]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8007266:	4b52      	ldr	r3, [pc, #328]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	0f1b      	lsrs	r3, r3, #28
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8007272:	4b4f      	ldr	r3, [pc, #316]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	0f1b      	lsrs	r3, r3, #28
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	4a4e      	ldr	r2, [pc, #312]	; (80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8007282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072aa:	eddf 5a43 	vldr	s11, [pc, #268]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80072c8:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072d4:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800730a:	4b29      	ldr	r3, [pc, #164]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007316:	4b26      	ldr	r3, [pc, #152]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 2a90 	vmov	r2, s15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	e002      	b.n	800734c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800734c:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d017      	beq.n	8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	0e1b      	lsrs	r3, r3, #24
 800735e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800736a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800736e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007372:	edd7 6a07 	vldr	s13, [r7, #28]
 8007376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737e:	ee17 2a90 	vmov	r2, s15
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007386:	e00c      	b.n	80073a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	609a      	str	r2, [r3, #8]
}
 800738e:	e008      	b.n	80073a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
}
 80073a2:	bf00      	nop
 80073a4:	3724      	adds	r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	46020c00 	.word	0x46020c00
 80073b4:	4b742400 	.word	0x4b742400
 80073b8:	46000000 	.word	0x46000000
 80073bc:	08015bd4 	.word	0x08015bd4

080073c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80073c8:	4bad      	ldr	r3, [pc, #692]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80073d2:	4bab      	ldr	r3, [pc, #684]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80073dc:	4ba8      	ldr	r3, [pc, #672]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	3301      	adds	r3, #1
 80073e8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80073ea:	4ba5      	ldr	r3, [pc, #660]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80073f6:	4ba2      	ldr	r3, [pc, #648]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	08db      	lsrs	r3, r3, #3
 80073fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8123 	beq.w	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d062      	beq.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b03      	cmp	r3, #3
 8007424:	f200 8081 	bhi.w	800752a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d024      	beq.n	8007478 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d17a      	bne.n	800752a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b8e      	ldr	r3, [pc, #568]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007456:	ed97 6a02 	vldr	s12, [r7, #8]
 800745a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007476:	e08f      	b.n	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007478:	4b81      	ldr	r3, [pc, #516]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007484:	4b7e      	ldr	r3, [pc, #504]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	0f1b      	lsrs	r3, r3, #28
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	e006      	b.n	800749e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8007490:	4b7b      	ldr	r3, [pc, #492]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	0f1b      	lsrs	r3, r3, #28
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	4a7b      	ldr	r2, [pc, #492]	; (800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80074a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80074c8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80074cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80074dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e4:	e058      	b.n	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	ee07 3a90 	vmov	s15, r3
 80074ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80074f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f8:	4b61      	ldr	r3, [pc, #388]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007508:	ed97 6a02 	vldr	s12, [r7, #8]
 800750c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007510:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007514:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007528:	e036      	b.n	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800752a:	4b55      	ldr	r3, [pc, #340]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007536:	4b52      	ldr	r3, [pc, #328]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	0f1b      	lsrs	r3, r3, #28
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	e006      	b.n	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007542:	4b4f      	ldr	r3, [pc, #316]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	0f1b      	lsrs	r3, r3, #28
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	4a4e      	ldr	r2, [pc, #312]	; (800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a02 	vldr	s12, [r7, #8]
 800757a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007596:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007598:	4b39      	ldr	r3, [pc, #228]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075a4:	4b36      	ldr	r3, [pc, #216]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	0a5b      	lsrs	r3, r3, #9
 80075aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80075b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ba:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075be:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ca:	ee17 2a90 	vmov	r2, s15
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e002      	b.n	80075da <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80075da:	4b29      	ldr	r3, [pc, #164]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d017      	beq.n	8007616 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075e6:	4b26      	ldr	r3, [pc, #152]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80075f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007600:	edd7 6a07 	vldr	s13, [r7, #28]
 8007604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760c:	ee17 2a90 	vmov	r2, s15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	e002      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800761c:	4b18      	ldr	r3, [pc, #96]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d017      	beq.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007628:	4b15      	ldr	r3, [pc, #84]	; (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800763a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007642:	edd7 6a07 	vldr	s13, [r7, #28]
 8007646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764e:	ee17 2a90 	vmov	r2, s15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007656:	e00c      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	e008      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
}
 8007672:	bf00      	nop
 8007674:	3724      	adds	r7, #36	; 0x24
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	46020c00 	.word	0x46020c00
 8007684:	4b742400 	.word	0x4b742400
 8007688:	46000000 	.word	0x46000000
 800768c:	08015bd4 	.word	0x08015bd4

08007690 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007690:	b480      	push	{r7}
 8007692:	b089      	sub	sp, #36	; 0x24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007698:	4bad      	ldr	r3, [pc, #692]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80076a2:	4bab      	ldr	r3, [pc, #684]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80076ac:	4ba8      	ldr	r3, [pc, #672]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80076ba:	4ba5      	ldr	r3, [pc, #660]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80076c6:	4ba2      	ldr	r3, [pc, #648]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8123 	beq.w	8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d062      	beq.n	80077b6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	f200 8081 	bhi.w	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d024      	beq.n	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d17a      	bne.n	80077fa <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007716:	4b8e      	ldr	r3, [pc, #568]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007726:	ed97 6a02 	vldr	s12, [r7, #8]
 800772a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800772e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007732:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800773e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007742:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007746:	e08f      	b.n	8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007748:	4b81      	ldr	r3, [pc, #516]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007754:	4b7e      	ldr	r3, [pc, #504]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	0f1b      	lsrs	r3, r3, #28
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	e006      	b.n	800776e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007760:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	0f1b      	lsrs	r3, r3, #28
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	4a7b      	ldr	r2, [pc, #492]	; (800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007794:	ed97 6a02 	vldr	s12, [r7, #8]
 8007798:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800779c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b4:	e058      	b.n	8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80077c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c8:	4b61      	ldr	r3, [pc, #388]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80077dc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80077e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80077e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f8:	e036      	b.n	8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077fa:	4b55      	ldr	r3, [pc, #340]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8007806:	4b52      	ldr	r3, [pc, #328]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	0f1b      	lsrs	r3, r3, #28
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	4a4e      	ldr	r2, [pc, #312]	; (800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007846:	ed97 6a02 	vldr	s12, [r7, #8]
 800784a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800784e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800785e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007866:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007868:	4b39      	ldr	r3, [pc, #228]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d017      	beq.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007874:	4b36      	ldr	r3, [pc, #216]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007878:	0a5b      	lsrs	r3, r3, #9
 800787a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800788a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800788e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789a:	ee17 2a90 	vmov	r2, s15
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e002      	b.n	80078aa <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80078aa:	4b29      	ldr	r3, [pc, #164]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d017      	beq.n	80078e6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078b6:	4b26      	ldr	r3, [pc, #152]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80078c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078dc:	ee17 2a90 	vmov	r2, s15
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	e002      	b.n	80078ec <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80078ec:	4b18      	ldr	r3, [pc, #96]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d017      	beq.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007912:	edd7 6a07 	vldr	s13, [r7, #28]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007926:	e00c      	b.n	8007942 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	609a      	str	r2, [r3, #8]
}
 800792e:	e008      	b.n	8007942 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	46020c00 	.word	0x46020c00
 8007954:	4b742400 	.word	0x4b742400
 8007958:	46000000 	.word	0x46000000
 800795c:	08015bd4 	.word	0x08015bd4

08007960 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af00      	add	r7, sp, #0
 8007966:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800796a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007972:	430b      	orrs	r3, r1
 8007974:	d145      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007976:	4ba7      	ldr	r3, [pc, #668]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800797c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007980:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007982:	4ba4      	ldr	r3, [pc, #656]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d108      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007996:	d104      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
 800799e:	f001 b9b3 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80079a2:	4b9c      	ldr	r3, [pc, #624]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b0:	d114      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b8:	d110      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079ba:	4b96      	ldr	r3, [pc, #600]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c8:	d103      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80079ca:	23fa      	movs	r3, #250	; 0xfa
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079ce:	f001 b99b 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80079d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079d8:	f001 b996 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80079dc:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e8:	d107      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f0:	d103      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80079f2:	4b89      	ldr	r3, [pc, #548]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
 80079f6:	f001 b987 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
 80079fe:	f001 b983 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a06:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	d151      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007a0e:	4b81      	ldr	r3, [pc, #516]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a14:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d035      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d841      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	2b60      	cmp	r3, #96	; 0x60
 8007a2a:	d02a      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	2b60      	cmp	r3, #96	; 0x60
 8007a30:	d83b      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d009      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d835      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d012      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007a4a:	e02e      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fb4d 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5a:	f001 b955 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a5e:	f107 0318 	add.w	r3, r7, #24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fcac 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6c:	f001 b94c 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fe0b 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7e:	f001 b943 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a88:	f001 b93e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a8c:	4b61      	ldr	r3, [pc, #388]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a98:	d103      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007a9a:	4b60      	ldr	r3, [pc, #384]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a9e:	f001 b933 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa6:	f001 b92f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aae:	f001 b92b 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007aba:	430b      	orrs	r3, r1
 8007abc:	d158      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007abe:	4b55      	ldr	r3, [pc, #340]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d03b      	beq.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d846      	bhi.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae0:	d02e      	beq.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae8:	d83e      	bhi.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af0:	d00b      	beq.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af8:	d836      	bhi.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00d      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b06:	d012      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007b08:	e02e      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff faee 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b18:	f001 b8f6 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1c:	f107 0318 	add.w	r3, r7, #24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fc4d 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b2a:	f001 b8ed 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fdac 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3c:	f001 b8e4 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b40:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b46:	f001 b8df 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b4a:	4b32      	ldr	r3, [pc, #200]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b56:	d103      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007b58:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b5c:	f001 b8d4 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b64:	f001 b8d0 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b6c:	f001 b8cc 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b74:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	d126      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007b7c:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007b88:	4b22      	ldr	r3, [pc, #136]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d106      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007b9c:	4b1f      	ldr	r3, [pc, #124]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba0:	f001 b8b2 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb8:	d103      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007bba:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	f001 b8a3 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	f001 b89f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bce:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	d16e      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bdc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007be0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007be8:	d03d      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bf0:	d85c      	bhi.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf8:	d014      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c00:	d854      	bhi.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01f      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c0e:	d012      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007c10:	e04c      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007c12:	bf00      	nop
 8007c14:	46020c00 	.word	0x46020c00
 8007c18:	0007a120 	.word	0x0007a120
 8007c1c:	00f42400 	.word	0x00f42400
 8007c20:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff fa61 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c32:	f001 b869 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c36:	f107 0318 	add.w	r3, r7, #24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fbc0 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c44:	f001 b860 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007c48:	4ba7      	ldr	r3, [pc, #668]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c54:	d103      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007c56:	4ba5      	ldr	r3, [pc, #660]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c5a:	f001 b855 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c62:	f001 b851 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c66:	4ba0      	ldr	r3, [pc, #640]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d118      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c72:	4b9d      	ldr	r3, [pc, #628]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007c7e:	4b9a      	ldr	r3, [pc, #616]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	0e1b      	lsrs	r3, r3, #24
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	e006      	b.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007c8a:	4b97      	ldr	r3, [pc, #604]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	0e1b      	lsrs	r3, r3, #24
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	4a95      	ldr	r2, [pc, #596]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ca0:	f001 b832 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ca8:	f001 b82e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb0:	f001 b82a 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	d17f      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cc0:	4b89      	ldr	r3, [pc, #548]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d165      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007cd2:	4b85      	ldr	r3, [pc, #532]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cd8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007cdc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ce4:	d034      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007cec:	d853      	bhi.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf4:	d00b      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cfc:	d84b      	bhi.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d016      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d0a:	d009      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007d0c:	e043      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff f9ec 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007d1c:	f000 bff4 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d20:	f107 0318 	add.w	r3, r7, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fb4b 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007d2e:	f000 bfeb 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007d32:	4b6d      	ldr	r3, [pc, #436]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d103      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007d40:	4b6a      	ldr	r3, [pc, #424]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007d44:	f000 bfe0 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007d4c:	f000 bfdc 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d50:	4b65      	ldr	r3, [pc, #404]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d118      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d5c:	4b62      	ldr	r3, [pc, #392]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007d68:	4b5f      	ldr	r3, [pc, #380]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	0e1b      	lsrs	r3, r3, #24
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	e006      	b.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007d74:	4b5c      	ldr	r3, [pc, #368]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	0e1b      	lsrs	r3, r3, #24
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	4a5b      	ldr	r2, [pc, #364]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007d8a:	f000 bfbd 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007d92:	f000 bfb9 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007d9a:	f000 bfb5 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da4:	d108      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff f9a0 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
 8007db4:	f000 bfa8 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbc:	f000 bfa4 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc4:	1e51      	subs	r1, r2, #1
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	d136      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007ddc:	f7fe fae2 	bl	80063a4 <HAL_RCC_GetPCLK2Freq>
 8007de0:	6378      	str	r0, [r7, #52]	; 0x34
 8007de2:	f000 bf91 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d104      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dec:	f7fe f9a4 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8007df0:	6378      	str	r0, [r7, #52]	; 0x34
 8007df2:	f000 bf89 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007df6:	4b3c      	ldr	r3, [pc, #240]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d103      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007e0a:	4b3a      	ldr	r3, [pc, #232]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	f000 bf7b 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007e12:	4b35      	ldr	r3, [pc, #212]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d104      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	f000 bf6c 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
 8007e34:	f000 bf68 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3c:	1e91      	subs	r1, r2, #2
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	d136      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007e42:	4b29      	ldr	r3, [pc, #164]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e48:	f003 030c 	and.w	r3, r3, #12
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e54:	f7fe fa92 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8007e58:	6378      	str	r0, [r7, #52]	; 0x34
 8007e5a:	f000 bf55 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d104      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e64:	f7fe f968 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8007e68:	6378      	str	r0, [r7, #52]	; 0x34
 8007e6a:	f000 bf4d 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007e6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7a:	d106      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d103      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
 8007e86:	f000 bf3f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007e8a:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	2b0c      	cmp	r3, #12
 8007e9c:	d104      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea4:	f000 bf30 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8007eac:	f000 bf2c 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb4:	1f11      	subs	r1, r2, #4
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	d13f      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ec0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ecc:	f7fe fa56 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8007ed0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ed2:	f000 bf19 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d10d      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007edc:	f7fe f92c 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8007ee0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ee2:	f000 bf11 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007ee6:	bf00      	nop
 8007ee8:	46020c00 	.word	0x46020c00
 8007eec:	02dc6c00 	.word	0x02dc6c00
 8007ef0:	08015bd4 	.word	0x08015bd4
 8007ef4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007ef8:	4ba6      	ldr	r3, [pc, #664]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f04:	d106      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d103      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007f0c:	4ba2      	ldr	r3, [pc, #648]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f10:	f000 befa 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007f14:	4b9f      	ldr	r3, [pc, #636]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d107      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2b30      	cmp	r3, #48	; 0x30
 8007f26:	d104      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2e:	f000 beeb 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
 8007f36:	f000 bee7 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f3e:	f1a2 0108 	sub.w	r1, r2, #8
 8007f42:	430b      	orrs	r3, r1
 8007f44:	d136      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007f46:	4b93      	ldr	r3, [pc, #588]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f58:	f7fe fa10 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8007f5c:	6378      	str	r0, [r7, #52]	; 0x34
 8007f5e:	f000 bed3 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	d104      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f68:	f7fe f8e6 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8007f6c:	6378      	str	r0, [r7, #52]	; 0x34
 8007f6e:	f000 becb 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007f72:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d103      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007f86:	4b84      	ldr	r3, [pc, #528]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	f000 bebd 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007f8e:	4b81      	ldr	r3, [pc, #516]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007fa0:	d104      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa8:	f000 beae 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb0:	f000 beaa 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb8:	f1a2 0110 	sub.w	r1, r2, #16
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	d139      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007fc0:	4b74      	ldr	r3, [pc, #464]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007fd2:	f7fe f9d3 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8007fd6:	6378      	str	r0, [r7, #52]	; 0x34
 8007fd8:	f000 be96 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe2:	d104      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fe4:	f7fe f8a8 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8007fe8:	6378      	str	r0, [r7, #52]	; 0x34
 8007fea:	f000 be8d 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007fee:	4b69      	ldr	r3, [pc, #420]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffa:	d107      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008002:	d103      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008004:	4b64      	ldr	r3, [pc, #400]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	f000 be7e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800800c:	4b61      	ldr	r3, [pc, #388]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800800e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d108      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008020:	d104      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
 8008028:	f000 be6e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
 8008030:	f000 be6a 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008038:	f1a2 0120 	sub.w	r1, r2, #32
 800803c:	430b      	orrs	r3, r1
 800803e:	d158      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008040:	4b54      	ldr	r3, [pc, #336]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008052:	f7fe f9bb 	bl	80063cc <HAL_RCC_GetPCLK3Freq>
 8008056:	6378      	str	r0, [r7, #52]	; 0x34
 8008058:	f000 be56 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805e:	2b01      	cmp	r3, #1
 8008060:	d104      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008062:	f7fe f869 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008066:	6378      	str	r0, [r7, #52]	; 0x34
 8008068:	f000 be4e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800806c:	4b49      	ldr	r3, [pc, #292]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d106      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	2b02      	cmp	r3, #2
 800807e:	d103      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8008080:	4b45      	ldr	r3, [pc, #276]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008082:	637b      	str	r3, [r7, #52]	; 0x34
 8008084:	f000 be40 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008088:	4b42      	ldr	r3, [pc, #264]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800808a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d107      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	2b03      	cmp	r3, #3
 800809a:	d104      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800809c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
 80080a2:	f000 be31 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d11b      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d118      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080b8:	4b36      	ldr	r3, [pc, #216]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80080c4:	4b33      	ldr	r3, [pc, #204]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80080d0:	4b30      	ldr	r3, [pc, #192]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	4a2f      	ldr	r2, [pc, #188]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80080e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	f000 be0f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
 80080ee:	f000 be0b 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80080f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80080fa:	430b      	orrs	r3, r1
 80080fc:	d172      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80080fe:	4b25      	ldr	r3, [pc, #148]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008104:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008108:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d104      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008112:	f7fe f811 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008116:	6378      	str	r0, [r7, #52]	; 0x34
 8008118:	f000 bdf6 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008122:	d108      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008124:	f107 0318 	add.w	r3, r7, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff f949 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
 8008132:	f000 bde9 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800813c:	f7fe f904 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8008140:	6378      	str	r0, [r7, #52]	; 0x34
 8008142:	f000 bde1 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800814c:	d128      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b20      	cmp	r3, #32
 8008158:	d118      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800815a:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0e1b      	lsrs	r3, r3, #24
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	e006      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	0e1b      	lsrs	r3, r3, #24
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	4a06      	ldr	r2, [pc, #24]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
 8008188:	f000 bdbe 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
 8008190:	f000 bdba 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008194:	46020c00 	.word	0x46020c00
 8008198:	00f42400 	.word	0x00f42400
 800819c:	08015bd4 	.word	0x08015bd4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80081a0:	4baf      	ldr	r3, [pc, #700]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ac:	d107      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b4:	d103      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80081b6:	4bab      	ldr	r3, [pc, #684]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ba:	f000 bda5 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80081be:	4ba8      	ldr	r3, [pc, #672]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ca:	d107      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d2:	d103      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80081d4:	4ba3      	ldr	r3, [pc, #652]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
 80081d8:	f000 bd96 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
 80081e0:	f000 bd92 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80081e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80081ec:	430b      	orrs	r3, r1
 80081ee:	d158      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80081f0:	4b9b      	ldr	r3, [pc, #620]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d84b      	bhi.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008241 	.word	0x08008241
 800820c:	0800821d 	.word	0x0800821d
 8008210:	0800822f 	.word	0x0800822f
 8008214:	0800824b 	.word	0x0800824b
 8008218:	08008255 	.word	0x08008255
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800821c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe ff65 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800822a:	f000 bd6d 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822e:	f107 030c 	add.w	r3, r7, #12
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fa2c 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800823c:	f000 bd64 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008240:	f7fe f882 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8008244:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008246:	f000 bd5f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800824a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008250:	f000 bd5a 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008254:	4b82      	ldr	r3, [pc, #520]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b20      	cmp	r3, #32
 800825e:	d118      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008260:	4b7f      	ldr	r3, [pc, #508]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800826c:	4b7c      	ldr	r3, [pc, #496]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	e006      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008278:	4b79      	ldr	r3, [pc, #484]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800827a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	0e1b      	lsrs	r3, r3, #24
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	4a78      	ldr	r2, [pc, #480]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800828e:	f000 bd3b 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008296:	f000 bd37 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800829e:	f000 bd33 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80082a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80082aa:	430b      	orrs	r3, r1
 80082ac:	d167      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80082ae:	4b6c      	ldr	r3, [pc, #432]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80082b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082c0:	d036      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082c8:	d855      	bhi.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082d0:	d029      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082d8:	d84d      	bhi.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e0:	d013      	beq.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e8:	d845      	bhi.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d015      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f6:	d13e      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fef7 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008306:	f000 bcff 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800830a:	f107 030c 	add.w	r3, r7, #12
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f9be 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008318:	f000 bcf6 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800831c:	f7fe f814 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8008320:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008322:	f000 bcf1 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008326:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800832a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800832c:	f000 bcec 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008330:	4b4b      	ldr	r3, [pc, #300]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b20      	cmp	r3, #32
 800833a:	d118      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800833c:	4b48      	ldr	r3, [pc, #288]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008348:	4b45      	ldr	r3, [pc, #276]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	0e1b      	lsrs	r3, r3, #24
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	e006      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008354:	4b42      	ldr	r3, [pc, #264]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	0e1b      	lsrs	r3, r3, #24
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	4a41      	ldr	r2, [pc, #260]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800836a:	f000 bccd 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008372:	f000 bcc9 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800837a:	f000 bcc5 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800837e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008382:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008386:	430b      	orrs	r3, r1
 8008388:	d14c      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800838a:	4b35      	ldr	r3, [pc, #212]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800838c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008394:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fd ffee 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 80083a0:	6378      	str	r0, [r7, #52]	; 0x34
 80083a2:	f000 bcb1 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ac:	d104      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fd fec3 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80083b2:	6378      	str	r0, [r7, #52]	; 0x34
 80083b4:	f000 bca8 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80083b8:	4b29      	ldr	r3, [pc, #164]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c4:	d107      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083cc:	d103      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80083ce:	4b25      	ldr	r3, [pc, #148]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
 80083d2:	f000 bc99 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80083d6:	4b22      	ldr	r3, [pc, #136]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d11c      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e8:	d118      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083ea:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80083f6:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	0e1b      	lsrs	r3, r3, #24
 80083fc:	f003 030f 	and.w	r3, r3, #15
 8008400:	e006      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8008402:	4b17      	ldr	r3, [pc, #92]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	0e1b      	lsrs	r3, r3, #24
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	4a15      	ldr	r2, [pc, #84]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
 8008418:	f000 bc76 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	f000 bc72 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008428:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800842c:	430b      	orrs	r3, r1
 800842e:	d153      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008430:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008436:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800843a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008442:	f7fd ff9b 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8008446:	6378      	str	r0, [r7, #52]	; 0x34
 8008448:	f000 bc5e 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008452:	d10b      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008454:	f7fd fe70 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008458:	6378      	str	r0, [r7, #52]	; 0x34
 800845a:	f000 bc55 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800845e:	bf00      	nop
 8008460:	46020c00 	.word	0x46020c00
 8008464:	00f42400 	.word	0x00f42400
 8008468:	08015bd4 	.word	0x08015bd4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800846c:	4ba1      	ldr	r3, [pc, #644]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008478:	d107      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008480:	d103      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8008482:	4b9d      	ldr	r3, [pc, #628]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
 8008486:	f000 bc3f 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800848a:	4b9a      	ldr	r3, [pc, #616]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d11c      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800849c:	d118      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800849e:	4b95      	ldr	r3, [pc, #596]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80084aa:	4b92      	ldr	r3, [pc, #584]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	0e1b      	lsrs	r3, r3, #24
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	e006      	b.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80084b6:	4b8f      	ldr	r3, [pc, #572]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084bc:	041b      	lsls	r3, r3, #16
 80084be:	0e1b      	lsrs	r3, r3, #24
 80084c0:	f003 030f 	and.w	r3, r3, #15
 80084c4:	4a8d      	ldr	r2, [pc, #564]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80084c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
 80084cc:	f000 bc1c 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
 80084d4:	f000 bc18 	b.w	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80084d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084dc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80084e0:	430b      	orrs	r3, r1
 80084e2:	d151      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80084e4:	4b83      	ldr	r3, [pc, #524]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2bc0      	cmp	r3, #192	; 0xc0
 80084f4:	d024      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	2bc0      	cmp	r3, #192	; 0xc0
 80084fa:	d842      	bhi.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	2b80      	cmp	r3, #128	; 0x80
 8008500:	d00d      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2b80      	cmp	r3, #128	; 0x80
 8008506:	d83c      	bhi.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b40      	cmp	r3, #64	; 0x40
 8008512:	d011      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008514:	e035      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008516:	f7fd ff59 	bl	80063cc <HAL_RCC_GetPCLK3Freq>
 800851a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800851c:	e3f4      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800851e:	4b75      	ldr	r3, [pc, #468]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852a:	d102      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800852c:	4b72      	ldr	r3, [pc, #456]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008530:	e3ea      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008536:	e3e7      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008538:	f7fd fdfe 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 800853c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800853e:	e3e3      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008540:	4b6c      	ldr	r3, [pc, #432]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b20      	cmp	r3, #32
 800854a:	d117      	bne.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800854c:	4b69      	ldr	r3, [pc, #420]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008558:	4b66      	ldr	r3, [pc, #408]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	e006      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008564:	4b63      	ldr	r3, [pc, #396]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	0e1b      	lsrs	r3, r3, #24
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	4a62      	ldr	r2, [pc, #392]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800857a:	e3c5      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008580:	e3c2      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008586:	e3bf      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008590:	430b      	orrs	r3, r1
 8008592:	d147      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008594:	4b57      	ldr	r3, [pc, #348]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800859a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800859e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80085a6:	f7fd fee9 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 80085aa:	6378      	str	r0, [r7, #52]	; 0x34
 80085ac:	e3ac      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b4:	d103      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80085b6:	f7fd fdbf 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80085ba:	6378      	str	r0, [r7, #52]	; 0x34
 80085bc:	e3a4      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80085be:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ca:	d106      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d2:	d102      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80085d4:	4b48      	ldr	r3, [pc, #288]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
 80085d8:	e396      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80085da:	4b46      	ldr	r3, [pc, #280]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d11b      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085ec:	d117      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085ee:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80085fa:	4b3e      	ldr	r3, [pc, #248]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	0e1b      	lsrs	r3, r3, #24
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	e006      	b.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8008606:	4b3b      	ldr	r3, [pc, #236]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	0e1b      	lsrs	r3, r3, #24
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	4a39      	ldr	r2, [pc, #228]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
 800861c:	e374      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
 8008622:	e371      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008628:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800862c:	430b      	orrs	r3, r1
 800862e:	d16a      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008630:	4b30      	ldr	r3, [pc, #192]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	2b00      	cmp	r3, #0
 8008640:	d120      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008642:	4b2c      	ldr	r3, [pc, #176]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b20      	cmp	r3, #32
 800864c:	d117      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800864e:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	0e1b      	lsrs	r3, r3, #24
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	e006      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008666:	4b23      	ldr	r3, [pc, #140]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800866c:	041b      	lsls	r3, r3, #16
 800866e:	0e1b      	lsrs	r3, r3, #24
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	4a21      	ldr	r2, [pc, #132]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
 800867c:	e344      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
 8008682:	e341      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008684:	4b1b      	ldr	r3, [pc, #108]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800868a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800868e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008692:	d112      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869a:	d10e      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800869c:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800869e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80086ac:	23fa      	movs	r3, #250	; 0xfa
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086b0:	e32a      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80086b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086b8:	e326      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c6:	d106      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ce:	d102      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
 80086d4:	e318      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80086d6:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d10d      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d109      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80086ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
 80086f2:	e309      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80086f4:	46020c00 	.word	0x46020c00
 80086f8:	00f42400 	.word	0x00f42400
 80086fc:	08015bd4 	.word	0x08015bd4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	e300      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800870e:	430b      	orrs	r3, r1
 8008710:	d164      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008712:	4ba2      	ldr	r3, [pc, #648]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800871c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d120      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008724:	4b9d      	ldr	r3, [pc, #628]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b20      	cmp	r3, #32
 800872e:	d117      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008730:	4b9a      	ldr	r3, [pc, #616]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800873c:	4b97      	ldr	r3, [pc, #604]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	0e1b      	lsrs	r3, r3, #24
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	e006      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008748:	4b94      	ldr	r3, [pc, #592]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800874a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	0e1b      	lsrs	r3, r3, #24
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	4a92      	ldr	r2, [pc, #584]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
 800875e:	e2d3      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
 8008764:	e2d0      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008766:	4b8d      	ldr	r3, [pc, #564]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800876c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008774:	d112      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877c:	d10e      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800877e:	4b87      	ldr	r3, [pc, #540]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800878c:	d102      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800878e:	23fa      	movs	r3, #250	; 0xfa
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008792:	e2b9      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008794:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800879a:	e2b5      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800879c:	4b7f      	ldr	r3, [pc, #508]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a8:	d106      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b0:	d102      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80087b2:	4b7c      	ldr	r3, [pc, #496]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
 80087b6:	e2a7      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80087b8:	4b78      	ldr	r3, [pc, #480]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d107      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087cc:	d103      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80087ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087d2:	637b      	str	r3, [r7, #52]	; 0x34
 80087d4:	e298      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	e295      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80087dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80087e4:	430b      	orrs	r3, r1
 80087e6:	d147      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80087e8:	4b6c      	ldr	r3, [pc, #432]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80087f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80087fa:	f7fd fdbf 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 80087fe:	6378      	str	r0, [r7, #52]	; 0x34
 8008800:	e282      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008802:	4b66      	ldr	r3, [pc, #408]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800880c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008810:	d112      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008818:	d10e      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800881a:	4b60      	ldr	r3, [pc, #384]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800881c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008828:	d102      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800882a:	23fa      	movs	r3, #250	; 0xfa
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800882e:	e26b      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008830:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008836:	e267      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008838:	4b58      	ldr	r3, [pc, #352]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800884c:	d102      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800884e:	4b55      	ldr	r3, [pc, #340]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
 8008852:	e259      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008854:	4b51      	ldr	r3, [pc, #324]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d107      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008868:	d103      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800886a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
 8008870:	e24a      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	637b      	str	r3, [r7, #52]	; 0x34
 8008876:	e247      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800887c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008880:	430b      	orrs	r3, r1
 8008882:	d12d      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008884:	4b45      	ldr	r3, [pc, #276]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800888a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800888e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008890:	4b42      	ldr	r3, [pc, #264]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800889c:	d105      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80088a4:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
 80088a8:	e22e      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc1a 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
 80088c0:	e222      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088c8:	d107      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ca:	f107 0318 	add.w	r3, r7, #24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fd76 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
 80088d8:	e216      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
 80088de:	e213      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80088e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80088e8:	430b      	orrs	r3, r1
 80088ea:	d15d      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80088ec:	4b2b      	ldr	r3, [pc, #172]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088fe:	d028      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008906:	d845      	bhi.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800890e:	d013      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008916:	d83d      	bhi.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008924:	d004      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008926:	e035      	b.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fd fd3c 	bl	80063a4 <HAL_RCC_GetPCLK2Freq>
 800892c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800892e:	e1eb      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008930:	f7fd fc02 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008934:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008936:	e1e7      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008944:	d102      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008946:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800894a:	e1dd      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008950:	e1da      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b20      	cmp	r3, #32
 800895c:	d117      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	0e1b      	lsrs	r3, r3, #24
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	e006      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	0e1b      	lsrs	r3, r3, #24
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800898c:	e1bc      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008992:	e1b9      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008998:	e1b6      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800899a:	bf00      	nop
 800899c:	46020c00 	.word	0x46020c00
 80089a0:	08015bd4 	.word	0x08015bd4
 80089a4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80089a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ac:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80089b0:	430b      	orrs	r3, r1
 80089b2:	d156      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80089b4:	4ba5      	ldr	r3, [pc, #660]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089be:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089c6:	d028      	beq.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089ce:	d845      	bhi.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d6:	d013      	beq.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089de:	d83d      	bhi.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ec:	d004      	beq.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80089ee:	e035      	b.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80089f0:	f7fd fcc4 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 80089f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80089f6:	e187      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80089f8:	f7fd fb9e 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80089fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80089fe:	e183      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a00:	4b92      	ldr	r3, [pc, #584]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a0c:	d102      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8008a0e:	4b90      	ldr	r3, [pc, #576]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a12:	e179      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a18:	e176      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a1a:	4b8c      	ldr	r3, [pc, #560]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d117      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a26:	4b89      	ldr	r3, [pc, #548]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008a32:	4b86      	ldr	r3, [pc, #536]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	0e1b      	lsrs	r3, r3, #24
 8008a38:	f003 030f 	and.w	r3, r3, #15
 8008a3c:	e006      	b.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8008a3e:	4b83      	ldr	r3, [pc, #524]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	4a81      	ldr	r2, [pc, #516]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a54:	e158      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a5a:	e155      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a60:	e152      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a66:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	d177      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008a6e:	4b77      	ldr	r3, [pc, #476]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a74:	f003 0318 	and.w	r3, r3, #24
 8008a78:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	2b18      	cmp	r3, #24
 8008a7e:	d86b      	bhi.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008aed 	.word	0x08008aed
 8008a8c:	08008b59 	.word	0x08008b59
 8008a90:	08008b59 	.word	0x08008b59
 8008a94:	08008b59 	.word	0x08008b59
 8008a98:	08008b59 	.word	0x08008b59
 8008a9c:	08008b59 	.word	0x08008b59
 8008aa0:	08008b59 	.word	0x08008b59
 8008aa4:	08008b59 	.word	0x08008b59
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008b59 	.word	0x08008b59
 8008ab0:	08008b59 	.word	0x08008b59
 8008ab4:	08008b59 	.word	0x08008b59
 8008ab8:	08008b59 	.word	0x08008b59
 8008abc:	08008b59 	.word	0x08008b59
 8008ac0:	08008b59 	.word	0x08008b59
 8008ac4:	08008b59 	.word	0x08008b59
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008b59 	.word	0x08008b59
 8008ad0:	08008b59 	.word	0x08008b59
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b59 	.word	0x08008b59
 8008adc:	08008b59 	.word	0x08008b59
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b59 	.word	0x08008b59
 8008ae8:	08008b17 	.word	0x08008b17
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008aec:	f7fd fc6e 	bl	80063cc <HAL_RCC_GetPCLK3Freq>
 8008af0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008af2:	e109      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008af4:	f7fd fb20 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008af8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008afa:	e105      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008afc:	4b53      	ldr	r3, [pc, #332]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b08:	d102      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008b0a:	4b51      	ldr	r3, [pc, #324]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b0e:	e0fb      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b14:	e0f8      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b16:	4b4d      	ldr	r3, [pc, #308]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d117      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b22:	4b4a      	ldr	r3, [pc, #296]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008b2e:	4b47      	ldr	r3, [pc, #284]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	0e1b      	lsrs	r3, r3, #24
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	e006      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008b3a:	4b44      	ldr	r3, [pc, #272]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	0e1b      	lsrs	r3, r3, #24
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	4a42      	ldr	r2, [pc, #264]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b50:	e0da      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b56:	e0d7      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b5c:	e0d4      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b62:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008b66:	430b      	orrs	r3, r1
 8008b68:	d155      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008b6a:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b7c:	d013      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b84:	d844      	bhi.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b8c:	d013      	beq.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b94:	d83c      	bhi.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d014      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ba2:	d014      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008ba4:	e034      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0318 	add.w	r3, r7, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fc08 	bl	80073c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bb4:	e0a8      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fa98 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bc4:	e0a0      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008bc6:	f7fd fab7 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 8008bca:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008bcc:	e09c      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008bce:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d117      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008bda:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008be6:	4b19      	ldr	r3, [pc, #100]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	0e1b      	lsrs	r3, r3, #24
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	e006      	b.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008bf2:	4b16      	ldr	r3, [pc, #88]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bf8:	041b      	lsls	r3, r3, #16
 8008bfa:	0e1b      	lsrs	r3, r3, #24
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	4a14      	ldr	r2, [pc, #80]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c08:	e07e      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c0e:	e07b      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c14:	e078      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c1a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	d138      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c2c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008c2e:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d10d      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10a      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
 8008c48:	e05e      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008c4a:	bf00      	nop
 8008c4c:	46020c00 	.word	0x46020c00
 8008c50:	00f42400 	.word	0x00f42400
 8008c54:	08015bd4 	.word	0x08015bd4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008c58:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c66:	d112      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c6e:	d10e      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c70:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008c80:	23fa      	movs	r3, #250	; 0xfa
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c84:	e040      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008c86:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c8c:	e03c      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e039      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c98:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	d131      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008ca2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ca6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008cac:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb8:	d105      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	e020      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008cc6:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	d106      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cda:	d102      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008cde:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce0:	e012      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d106      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf6:	d102      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfc:	e004      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
 8008d02:	e001      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3738      	adds	r7, #56	; 0x38
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	46020c00 	.word	0x46020c00
 8008d18:	02dc6c00 	.word	0x02dc6c00
 8008d1c:	016e3600 	.word	0x016e3600
 8008d20:	00f42400 	.word	0x00f42400

08008d24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008d2c:	4b47      	ldr	r3, [pc, #284]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a46      	ldr	r2, [pc, #280]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d38:	f7f8 fe92 	bl	8001a60 <HAL_GetTick>
 8008d3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3e:	e008      	b.n	8008d52 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d40:	f7f8 fe8e 	bl	8001a60 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e077      	b.n	8008e42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d52:	4b3e      	ldr	r3, [pc, #248]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008d5e:	4b3b      	ldr	r3, [pc, #236]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6811      	ldr	r1, [r2, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6852      	ldr	r2, [r2, #4]
 8008d72:	3a01      	subs	r2, #1
 8008d74:	0212      	lsls	r2, r2, #8
 8008d76:	430a      	orrs	r2, r1
 8008d78:	4934      	ldr	r1, [pc, #208]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008d7e:	4b33      	ldr	r3, [pc, #204]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <RCCEx_PLL2_Config+0x12c>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6892      	ldr	r2, [r2, #8]
 8008d8a:	3a01      	subs	r2, #1
 8008d8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68d2      	ldr	r2, [r2, #12]
 8008d94:	3a01      	subs	r2, #1
 8008d96:	0252      	lsls	r2, r2, #9
 8008d98:	b292      	uxth	r2, r2
 8008d9a:	4311      	orrs	r1, r2
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6912      	ldr	r2, [r2, #16]
 8008da0:	3a01      	subs	r2, #1
 8008da2:	0412      	lsls	r2, r2, #16
 8008da4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008da8:	4311      	orrs	r1, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6952      	ldr	r2, [r2, #20]
 8008dae:	3a01      	subs	r2, #1
 8008db0:	0612      	lsls	r2, r2, #24
 8008db2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008db6:	430a      	orrs	r2, r1
 8008db8:	4924      	ldr	r1, [pc, #144]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f023 020c 	bic.w	r2, r3, #12
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	4920      	ldr	r1, [pc, #128]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	491c      	ldr	r1, [pc, #112]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	4a1a      	ldr	r2, [pc, #104]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008de4:	f023 0310 	bic.w	r3, r3, #16
 8008de8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008df2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	69d2      	ldr	r2, [r2, #28]
 8008dfa:	00d2      	lsls	r2, r2, #3
 8008dfc:	4913      	ldr	r1, [pc, #76]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4a11      	ldr	r2, [pc, #68]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008e08:	f043 0310 	orr.w	r3, r3, #16
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a0e      	ldr	r2, [pc, #56]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e1a:	f7f8 fe21 	bl	8001a60 <HAL_GetTick>
 8008e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e22:	f7f8 fe1d 	bl	8001a60 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e006      	b.n	8008e42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <RCCEx_PLL2_Config+0x128>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0f0      	beq.n	8008e22 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0

}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	46020c00 	.word	0x46020c00
 8008e50:	80800000 	.word	0x80800000

08008e54 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008e5c:	4b47      	ldr	r3, [pc, #284]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a46      	ldr	r2, [pc, #280]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e68:	f7f8 fdfa 	bl	8001a60 <HAL_GetTick>
 8008e6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e6e:	e008      	b.n	8008e82 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e70:	f7f8 fdf6 	bl	8001a60 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e077      	b.n	8008f72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e82:	4b3e      	ldr	r3, [pc, #248]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f0      	bne.n	8008e70 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008e8e:	4b3b      	ldr	r3, [pc, #236]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6852      	ldr	r2, [r2, #4]
 8008ea2:	3a01      	subs	r2, #1
 8008ea4:	0212      	lsls	r2, r2, #8
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	4934      	ldr	r1, [pc, #208]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	630b      	str	r3, [r1, #48]	; 0x30
 8008eae:	4b33      	ldr	r3, [pc, #204]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eb2:	4b33      	ldr	r3, [pc, #204]	; (8008f80 <RCCEx_PLL3_Config+0x12c>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6892      	ldr	r2, [r2, #8]
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68d2      	ldr	r2, [r2, #12]
 8008ec4:	3a01      	subs	r2, #1
 8008ec6:	0252      	lsls	r2, r2, #9
 8008ec8:	b292      	uxth	r2, r2
 8008eca:	4311      	orrs	r1, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	6912      	ldr	r2, [r2, #16]
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	0412      	lsls	r2, r2, #16
 8008ed4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008ed8:	4311      	orrs	r1, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6952      	ldr	r2, [r2, #20]
 8008ede:	3a01      	subs	r2, #1
 8008ee0:	0612      	lsls	r2, r2, #24
 8008ee2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	4924      	ldr	r1, [pc, #144]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008eee:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	f023 020c 	bic.w	r2, r3, #12
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	4920      	ldr	r1, [pc, #128]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	491c      	ldr	r1, [pc, #112]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	4a1a      	ldr	r2, [pc, #104]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f14:	f023 0310 	bic.w	r3, r3, #16
 8008f18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f1a:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	69d2      	ldr	r2, [r2, #28]
 8008f2a:	00d2      	lsls	r2, r2, #3
 8008f2c:	4913      	ldr	r1, [pc, #76]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008f32:	4b12      	ldr	r3, [pc, #72]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f38:	f043 0310 	orr.w	r3, r3, #16
 8008f3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a0e      	ldr	r2, [pc, #56]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f48:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f4a:	f7f8 fd89 	bl	8001a60 <HAL_GetTick>
 8008f4e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f50:	e008      	b.n	8008f64 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f52:	f7f8 fd85 	bl	8001a60 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d901      	bls.n	8008f64 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e006      	b.n	8008f72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <RCCEx_PLL3_Config+0x128>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f0      	beq.n	8008f52 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	46020c00 	.word	0x46020c00
 8008f80:	80800000 	.word	0x80800000

08008f84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d071      	beq.n	800907a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7f8 fa9c 	bl	80014e8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008fb8:	4b32      	ldr	r3, [pc, #200]	; (8009084 <HAL_RTC_Init+0x100>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d051      	beq.n	8009068 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fc4:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <HAL_RTC_Init+0x100>)
 8008fc6:	22ca      	movs	r2, #202	; 0xca
 8008fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8008fca:	4b2e      	ldr	r3, [pc, #184]	; (8009084 <HAL_RTC_Init+0x100>)
 8008fcc:	2253      	movs	r2, #83	; 0x53
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa6d 	bl	80094b0 <RTC_EnterInitMode>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d13f      	bne.n	8009060 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008fe0:	4b28      	ldr	r3, [pc, #160]	; (8009084 <HAL_RTC_Init+0x100>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	4a27      	ldr	r2, [pc, #156]	; (8009084 <HAL_RTC_Init+0x100>)
 8008fe6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fee:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008ff0:	4b24      	ldr	r3, [pc, #144]	; (8009084 <HAL_RTC_Init+0x100>)
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6859      	ldr	r1, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4319      	orrs	r1, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	430b      	orrs	r3, r1
 8009004:	491f      	ldr	r1, [pc, #124]	; (8009084 <HAL_RTC_Init+0x100>)
 8009006:	4313      	orrs	r3, r2
 8009008:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	491b      	ldr	r1, [pc, #108]	; (8009084 <HAL_RTC_Init+0x100>)
 8009016:	4313      	orrs	r3, r2
 8009018:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800901a:	4b1a      	ldr	r3, [pc, #104]	; (8009084 <HAL_RTC_Init+0x100>)
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	430b      	orrs	r3, r1
 800902c:	4915      	ldr	r1, [pc, #84]	; (8009084 <HAL_RTC_Init+0x100>)
 800902e:	4313      	orrs	r3, r2
 8009030:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa78 	bl	8009528 <RTC_ExitInitMode>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10e      	bne.n	8009060 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009042:	4b10      	ldr	r3, [pc, #64]	; (8009084 <HAL_RTC_Init+0x100>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a19      	ldr	r1, [r3, #32]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	4319      	orrs	r1, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	430b      	orrs	r3, r1
 800905a:	490a      	ldr	r1, [pc, #40]	; (8009084 <HAL_RTC_Init+0x100>)
 800905c:	4313      	orrs	r3, r2
 800905e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <HAL_RTC_Init+0x100>)
 8009062:	22ff      	movs	r2, #255	; 0xff
 8009064:	625a      	str	r2, [r3, #36]	; 0x24
 8009066:	e001      	b.n	800906c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	46007800 	.word	0x46007800

08009088 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009088:	b590      	push	{r4, r7, lr}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_RTC_SetTime+0x1a>
 800909e:	2302      	movs	r3, #2
 80090a0:	e088      	b.n	80091b4 <HAL_RTC_SetTime+0x12c>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090b2:	4b42      	ldr	r3, [pc, #264]	; (80091bc <HAL_RTC_SetTime+0x134>)
 80090b4:	22ca      	movs	r2, #202	; 0xca
 80090b6:	625a      	str	r2, [r3, #36]	; 0x24
 80090b8:	4b40      	ldr	r3, [pc, #256]	; (80091bc <HAL_RTC_SetTime+0x134>)
 80090ba:	2253      	movs	r2, #83	; 0x53
 80090bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f9f6 	bl	80094b0 <RTC_EnterInitMode>
 80090c4:	4603      	mov	r3, r0
 80090c6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80090c8:	7cfb      	ldrb	r3, [r7, #19]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d163      	bne.n	8009196 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80090ce:	4b3b      	ldr	r3, [pc, #236]	; (80091bc <HAL_RTC_SetTime+0x134>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090da:	d057      	beq.n	800918c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d125      	bne.n	800912e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80090e2:	4b36      	ldr	r3, [pc, #216]	; (80091bc <HAL_RTC_SetTime+0x134>)
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d102      	bne.n	80090f4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2200      	movs	r2, #0
 80090f2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fa53 	bl	80095a4 <RTC_ByteToBcd2>
 80090fe:	4603      	mov	r3, r0
 8009100:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fa4c 	bl	80095a4 <RTC_ByteToBcd2>
 800910c:	4603      	mov	r3, r0
 800910e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009110:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fa44 	bl	80095a4 <RTC_ByteToBcd2>
 800911c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800911e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	78db      	ldrb	r3, [r3, #3]
 8009126:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	e017      	b.n	800915e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800912e:	4b23      	ldr	r3, [pc, #140]	; (80091bc <HAL_RTC_SetTime+0x134>)
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2200      	movs	r2, #0
 800913e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800914c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009152:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	78db      	ldrb	r3, [r3, #3]
 8009158:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800915e:	4a17      	ldr	r2, [pc, #92]	; (80091bc <HAL_RTC_SetTime+0x134>)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009166:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800916a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800916c:	4b13      	ldr	r3, [pc, #76]	; (80091bc <HAL_RTC_SetTime+0x134>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	4a12      	ldr	r2, [pc, #72]	; (80091bc <HAL_RTC_SetTime+0x134>)
 8009172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009176:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009178:	4b10      	ldr	r3, [pc, #64]	; (80091bc <HAL_RTC_SetTime+0x134>)
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	68d9      	ldr	r1, [r3, #12]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	430b      	orrs	r3, r1
 8009186:	490d      	ldr	r1, [pc, #52]	; (80091bc <HAL_RTC_SetTime+0x134>)
 8009188:	4313      	orrs	r3, r2
 800918a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f9cb 	bl	8009528 <RTC_ExitInitMode>
 8009192:	4603      	mov	r3, r0
 8009194:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <HAL_RTC_SetTime+0x134>)
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800919c:	7cfb      	ldrb	r3, [r7, #19]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80091b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd90      	pop	{r4, r7, pc}
 80091bc:	46007800 	.word	0x46007800

080091c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80091cc:	4b34      	ldr	r3, [pc, #208]	; (80092a0 <HAL_RTC_GetTime+0xe0>)
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <HAL_RTC_GetTime+0xe0>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e0:	d04a      	beq.n	8009278 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80091e2:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <HAL_RTC_GetTime+0xe0>)
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80091ee:	4b2c      	ldr	r3, [pc, #176]	; (80092a0 <HAL_RTC_GetTime+0xe0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80091f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80091fa:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009206:	b2da      	uxtb	r2, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	0d9b      	lsrs	r3, r3, #22
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	b2da      	uxtb	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d12a      	bne.n	8009296 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9cd 	bl	80095e4 <RTC_Bcd2ToByte>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f9c4 	bl	80095e4 <RTC_Bcd2ToByte>
 800925c:	4603      	mov	r3, r0
 800925e:	461a      	mov	r2, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	789b      	ldrb	r3, [r3, #2]
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f9bb 	bl	80095e4 <RTC_Bcd2ToByte>
 800926e:	4603      	mov	r3, r0
 8009270:	461a      	mov	r2, r3
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	709a      	strb	r2, [r3, #2]
 8009276:	e00e      	b.n	8009296 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2200      	movs	r2, #0
 8009282:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	46007800 	.word	0x46007800

080092a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80092a4:	b590      	push	{r4, r7, lr}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <HAL_RTC_SetDate+0x1a>
 80092ba:	2302      	movs	r3, #2
 80092bc:	e071      	b.n	80093a2 <HAL_RTC_SetDate+0xfe>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10e      	bne.n	80092f2 <HAL_RTC_SetDate+0x4e>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d008      	beq.n	80092f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	f023 0310 	bic.w	r3, r3, #16
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	330a      	adds	r3, #10
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11c      	bne.n	8009332 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	78db      	ldrb	r3, [r3, #3]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f951 	bl	80095a4 <RTC_ByteToBcd2>
 8009302:	4603      	mov	r3, r0
 8009304:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f94a 	bl	80095a4 <RTC_ByteToBcd2>
 8009310:	4603      	mov	r3, r0
 8009312:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009314:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	789b      	ldrb	r3, [r3, #2]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f942 	bl	80095a4 <RTC_ByteToBcd2>
 8009320:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009322:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	e00e      	b.n	8009350 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	78db      	ldrb	r3, [r3, #3]
 8009336:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800933e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009344:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009350:	4b16      	ldr	r3, [pc, #88]	; (80093ac <HAL_RTC_SetDate+0x108>)
 8009352:	22ca      	movs	r2, #202	; 0xca
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <HAL_RTC_SetDate+0x108>)
 8009358:	2253      	movs	r2, #83	; 0x53
 800935a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f8a7 	bl	80094b0 <RTC_EnterInitMode>
 8009362:	4603      	mov	r3, r0
 8009364:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009366:	7cfb      	ldrb	r3, [r7, #19]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800936c:	4a0f      	ldr	r2, [pc, #60]	; (80093ac <HAL_RTC_SetDate+0x108>)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009374:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009378:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f8d4 	bl	8009528 <RTC_ExitInitMode>
 8009380:	4603      	mov	r3, r0
 8009382:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_RTC_SetDate+0x108>)
 8009386:	22ff      	movs	r2, #255	; 0xff
 8009388:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800938a:	7cfb      	ldrb	r3, [r7, #19]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80093a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd90      	pop	{r4, r7, pc}
 80093aa:	bf00      	nop
 80093ac:	46007800 	.word	0x46007800

080093b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80093bc:	4b22      	ldr	r3, [pc, #136]	; (8009448 <HAL_RTC_GetDate+0x98>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	0a1b      	lsrs	r3, r3, #8
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	0b5b      	lsrs	r3, r3, #13
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11a      	bne.n	800943e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	78db      	ldrb	r3, [r3, #3]
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f8e9 	bl	80095e4 <RTC_Bcd2ToByte>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f8e0 	bl	80095e4 <RTC_Bcd2ToByte>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	789b      	ldrb	r3, [r3, #2]
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f8d7 	bl	80095e4 <RTC_Bcd2ToByte>
 8009436:	4603      	mov	r3, r0
 8009438:	461a      	mov	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	46007800 	.word	0x46007800

0800944c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009454:	4b15      	ldr	r3, [pc, #84]	; (80094ac <HAL_RTC_WaitForSynchro+0x60>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	4a14      	ldr	r2, [pc, #80]	; (80094ac <HAL_RTC_WaitForSynchro+0x60>)
 800945a:	f023 0320 	bic.w	r3, r3, #32
 800945e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009460:	f7f8 fafe 	bl	8001a60 <HAL_GetTick>
 8009464:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009466:	e013      	b.n	8009490 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009468:	f7f8 fafa 	bl	8001a60 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009476:	d90b      	bls.n	8009490 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <HAL_RTC_WaitForSynchro+0x60>)
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10c      	bne.n	800949e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2203      	movs	r2, #3
 8009488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e008      	b.n	80094a2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <HAL_RTC_WaitForSynchro+0x60>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0e5      	beq.n	8009468 <HAL_RTC_WaitForSynchro+0x1c>
 800949c:	e000      	b.n	80094a0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800949e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	46007800 	.word	0x46007800

080094b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80094bc:	4b19      	ldr	r3, [pc, #100]	; (8009524 <RTC_EnterInitMode+0x74>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d128      	bne.n	800951a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80094c8:	4b16      	ldr	r3, [pc, #88]	; (8009524 <RTC_EnterInitMode+0x74>)
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4a15      	ldr	r2, [pc, #84]	; (8009524 <RTC_EnterInitMode+0x74>)
 80094ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80094d4:	f7f8 fac4 	bl	8001a60 <HAL_GetTick>
 80094d8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80094da:	e013      	b.n	8009504 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80094dc:	f7f8 fac0 	bl	8001a60 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ea:	d90b      	bls.n	8009504 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80094ec:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <RTC_EnterInitMode+0x74>)
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10f      	bne.n	8009518 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2203      	movs	r2, #3
 8009500:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009504:	4b07      	ldr	r3, [pc, #28]	; (8009524 <RTC_EnterInitMode+0x74>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <RTC_EnterInitMode+0x6a>
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	2b03      	cmp	r3, #3
 8009514:	d1e2      	bne.n	80094dc <RTC_EnterInitMode+0x2c>
 8009516:	e000      	b.n	800951a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009518:	bf00      	nop
        }
      }
    }
  }

  return status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	46007800 	.word	0x46007800

08009528 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <RTC_ExitInitMode+0x78>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <RTC_ExitInitMode+0x78>)
 800953a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800953e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009540:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <RTC_ExitInitMode+0x78>)
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10c      	bne.n	8009566 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff ff7d 	bl	800944c <HAL_RTC_WaitForSynchro>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01e      	beq.n	8009596 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2203      	movs	r2, #3
 800955c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	73fb      	strb	r3, [r7, #15]
 8009564:	e017      	b.n	8009596 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009566:	4b0e      	ldr	r3, [pc, #56]	; (80095a0 <RTC_ExitInitMode+0x78>)
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <RTC_ExitInitMode+0x78>)
 800956c:	f023 0320 	bic.w	r3, r3, #32
 8009570:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff ff6a 	bl	800944c <HAL_RTC_WaitForSynchro>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2203      	movs	r2, #3
 8009582:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800958a:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <RTC_ExitInitMode+0x78>)
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	4a04      	ldr	r2, [pc, #16]	; (80095a0 <RTC_ExitInitMode+0x78>)
 8009590:	f043 0320 	orr.w	r3, r3, #32
 8009594:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	46007800 	.word	0x46007800

080095a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80095b6:	e005      	b.n	80095c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	3b0a      	subs	r3, #10
 80095c2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	d8f6      	bhi.n	80095b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	b2db      	uxtb	r3, r3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4413      	add	r3, r2
 800960e:	b2db      	uxtb	r3, r3
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009634:	2302      	movs	r3, #2
 8009636:	e063      	b.n	8009700 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009648:	4b2f      	ldr	r3, [pc, #188]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800964a:	22ca      	movs	r2, #202	; 0xca
 800964c:	625a      	str	r2, [r3, #36]	; 0x24
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009650:	2253      	movs	r2, #83	; 0x53
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009654:	4b2c      	ldr	r3, [pc, #176]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	4a2b      	ldr	r2, [pc, #172]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800965a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800965e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009660:	4b29      	ldr	r3, [pc, #164]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009662:	2204      	movs	r2, #4
 8009664:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009666:	4b28      	ldr	r3, [pc, #160]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d126      	bne.n	80096c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 8009672:	f7f8 f9f5 	bl	8001a60 <HAL_GetTick>
 8009676:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009678:	e01a      	b.n	80096b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800967a:	f7f8 f9f1 	bl	8001a60 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009688:	d912      	bls.n	80096b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800968a:	4b1f      	ldr	r3, [pc, #124]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d113      	bne.n	80096be <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009696:	4b1c      	ldr	r3, [pc, #112]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009698:	22ff      	movs	r2, #255	; 0xff
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2203      	movs	r2, #3
 80096a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e027      	b.n	8009700 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80096b0:	4b15      	ldr	r3, [pc, #84]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0de      	beq.n	800967a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80096bc:	e000      	b.n	80096c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80096be:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	041a      	lsls	r2, r3, #16
 80096c4:	4910      	ldr	r1, [pc, #64]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80096cc:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f023 0207 	bic.w	r2, r3, #7
 80096d4:	490c      	ldr	r1, [pc, #48]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4313      	orrs	r3, r2
 80096da:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	4a09      	ldr	r2, [pc, #36]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096e2:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80096e6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80096ea:	22ff      	movs	r2, #255	; 0xff
 80096ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	46007800 	.word	0x46007800

0800970c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800971e:	2302      	movs	r3, #2
 8009720:	e046      	b.n	80097b0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009732:	4b21      	ldr	r3, [pc, #132]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009734:	22ca      	movs	r2, #202	; 0xca
 8009736:	625a      	str	r2, [r3, #36]	; 0x24
 8009738:	4b1f      	ldr	r3, [pc, #124]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800973a:	2253      	movs	r2, #83	; 0x53
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800973e:	4b1e      	ldr	r3, [pc, #120]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009744:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009748:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800974a:	f7f8 f989 	bl	8001a60 <HAL_GetTick>
 800974e:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009750:	e01a      	b.n	8009788 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009752:	f7f8 f985 	bl	8001a60 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009760:	d912      	bls.n	8009788 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009762:	4b15      	ldr	r3, [pc, #84]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d113      	bne.n	8009796 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009770:	22ff      	movs	r2, #255	; 0xff
 8009772:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2203      	movs	r2, #3
 8009778:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e013      	b.n	80097b0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009788:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0de      	beq.n	8009752 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009794:	e000      	b.n	8009798 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009796:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009798:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	46007800 	.word	0x46007800

080097bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80097c4:	4b09      	ldr	r3, [pc, #36]	; (80097ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80097d0:	4b06      	ldr	r3, [pc, #24]	; (80097ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80097d2:	2204      	movs	r2, #4
 80097d4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f7 fdc8 	bl	800136c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	46007800 	.word	0x46007800

080097f0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	4910      	ldr	r1, [pc, #64]	; (8009844 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009804:	4313      	orrs	r3, r2
 8009806:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	431a      	orrs	r2, r3
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	490c      	ldr	r1, [pc, #48]	; (8009848 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009818:	4313      	orrs	r3, r2
 800981a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	6919      	ldr	r1, [r3, #16]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	430b      	orrs	r3, r1
 8009830:	4905      	ldr	r1, [pc, #20]	; (8009848 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009832:	4313      	orrs	r3, r2
 8009834:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	46007800 	.word	0x46007800
 8009848:	46007c00 	.word	0x46007c00

0800984c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e0fb      	b.n	8009a56 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a7f      	ldr	r2, [pc, #508]	; (8009a60 <HAL_SPI_Init+0x214>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d004      	beq.n	8009872 <HAL_SPI_Init+0x26>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a7d      	ldr	r2, [pc, #500]	; (8009a64 <HAL_SPI_Init+0x218>)
 800986e:	4293      	cmp	r3, r2
 8009870:	e000      	b.n	8009874 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009872:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a78      	ldr	r2, [pc, #480]	; (8009a60 <HAL_SPI_Init+0x214>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_SPI_Init+0x42>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a76      	ldr	r2, [pc, #472]	; (8009a64 <HAL_SPI_Init+0x218>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d105      	bne.n	800989a <HAL_SPI_Init+0x4e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b0f      	cmp	r3, #15
 8009894:	d901      	bls.n	800989a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e0dd      	b.n	8009a56 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fbd8 	bl	800a050 <SPI_GetPacketSize>
 80098a0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a6e      	ldr	r2, [pc, #440]	; (8009a60 <HAL_SPI_Init+0x214>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d004      	beq.n	80098b6 <HAL_SPI_Init+0x6a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a6c      	ldr	r2, [pc, #432]	; (8009a64 <HAL_SPI_Init+0x218>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d102      	bne.n	80098bc <HAL_SPI_Init+0x70>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d816      	bhi.n	80098ea <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098c0:	4a69      	ldr	r2, [pc, #420]	; (8009a68 <HAL_SPI_Init+0x21c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00e      	beq.n	80098e4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a68      	ldr	r2, [pc, #416]	; (8009a6c <HAL_SPI_Init+0x220>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d009      	beq.n	80098e4 <HAL_SPI_Init+0x98>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a66      	ldr	r2, [pc, #408]	; (8009a70 <HAL_SPI_Init+0x224>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d004      	beq.n	80098e4 <HAL_SPI_Init+0x98>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a65      	ldr	r2, [pc, #404]	; (8009a74 <HAL_SPI_Init+0x228>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d104      	bne.n	80098ee <HAL_SPI_Init+0xa2>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d901      	bls.n	80098ee <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e0b3      	b.n	8009a56 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7f7 fe3c 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800992a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009934:	d119      	bne.n	800996a <HAL_SPI_Init+0x11e>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800993e:	d103      	bne.n	8009948 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009944:	2b00      	cmp	r3, #0
 8009946:	d008      	beq.n	800995a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10c      	bne.n	800996a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009958:	d107      	bne.n	800996a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009968:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00f      	beq.n	8009996 <HAL_SPI_Init+0x14a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	2b06      	cmp	r3, #6
 800997c:	d90b      	bls.n	8009996 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	e007      	b.n	80099a6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69da      	ldr	r2, [r3, #28]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	431a      	orrs	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b8:	ea42 0103 	orr.w	r1, r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	431a      	orrs	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a12:	ea42 0103 	orr.w	r1, r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	46002000 	.word	0x46002000
 8009a64:	56002000 	.word	0x56002000
 8009a68:	40013000 	.word	0x40013000
 8009a6c:	50013000 	.word	0x50013000
 8009a70:	40003800 	.word	0x40003800
 8009a74:	50003800 	.word	0x50003800

08009a78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	; 0x28
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3320      	adds	r3, #32
 8009a8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <HAL_SPI_Transmit+0x2a>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e203      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aaa:	f7f7 ffd9 	bl	8001a60 <HAL_GetTick>
 8009aae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d007      	beq.n	8009acc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
 8009abe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009ac8:	7efb      	ldrb	r3, [r7, #27]
 8009aca:	e1ee      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <HAL_SPI_Transmit+0x60>
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009ae4:	7efb      	ldrb	r3, [r7, #27]
 8009ae6:	e1e0      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2203      	movs	r2, #3
 8009aec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	88fa      	ldrh	r2, [r7, #6]
 8009b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009b38:	d108      	bne.n	8009b4c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e009      	b.n	8009b60 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009b5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	88f9      	ldrh	r1, [r7, #6]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	430b      	orrs	r3, r1
 8009b72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10c      	bne.n	8009bac <HAL_SPI_Transmit+0x134>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b9a:	d107      	bne.n	8009bac <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b0f      	cmp	r3, #15
 8009bb2:	d95b      	bls.n	8009c6c <HAL_SPI_Transmit+0x1f4>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a8f      	ldr	r2, [pc, #572]	; (8009df8 <HAL_SPI_Transmit+0x380>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d04f      	beq.n	8009c5e <HAL_SPI_Transmit+0x1e6>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a8e      	ldr	r2, [pc, #568]	; (8009dfc <HAL_SPI_Transmit+0x384>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d04a      	beq.n	8009c5e <HAL_SPI_Transmit+0x1e6>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a8c      	ldr	r2, [pc, #560]	; (8009e00 <HAL_SPI_Transmit+0x388>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d045      	beq.n	8009c5e <HAL_SPI_Transmit+0x1e6>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a8b      	ldr	r2, [pc, #556]	; (8009e04 <HAL_SPI_Transmit+0x38c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d147      	bne.n	8009c6c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bdc:	e03f      	b.n	8009c5e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d114      	bne.n	8009c16 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bfc:	1d1a      	adds	r2, r3, #4
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c14:	e023      	b.n	8009c5e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c16:	f7f7 ff23 	bl	8001a60 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d803      	bhi.n	8009c2e <HAL_SPI_Transmit+0x1b6>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2c:	d102      	bne.n	8009c34 <HAL_SPI_Transmit+0x1bc>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d114      	bne.n	8009c5e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f93d 	bl	8009eb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e125      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1b9      	bne.n	8009bde <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009c6a:	e0f8      	b.n	8009e5e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b07      	cmp	r3, #7
 8009c72:	f240 80ed 	bls.w	8009e50 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c76:	e05d      	b.n	8009d34 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d132      	bne.n	8009cec <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d918      	bls.n	8009cc4 <HAL_SPI_Transmit+0x24c>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d014      	beq.n	8009cc4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6812      	ldr	r2, [r2, #0]
 8009ca4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b02      	subs	r3, #2
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cc2:	e037      	b.n	8009d34 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cc8:	881a      	ldrh	r2, [r3, #0]
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd2:	1c9a      	adds	r2, r3, #2
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cea:	e023      	b.n	8009d34 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cec:	f7f7 feb8 	bl	8001a60 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d803      	bhi.n	8009d04 <HAL_SPI_Transmit+0x28c>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d02:	d102      	bne.n	8009d0a <HAL_SPI_Transmit+0x292>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d114      	bne.n	8009d34 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f8d2 	bl	8009eb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e0ba      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d19b      	bne.n	8009c78 <HAL_SPI_Transmit+0x200>
 8009d40:	e08d      	b.n	8009e5e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d15b      	bne.n	8009e08 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d918      	bls.n	8009d8e <HAL_SPI_Transmit+0x316>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d914      	bls.n	8009d8e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d74:	1d1a      	adds	r2, r3, #4
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b04      	subs	r3, #4
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d8c:	e060      	b.n	8009e50 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d917      	bls.n	8009dca <HAL_SPI_Transmit+0x352>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d013      	beq.n	8009dca <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009da6:	881a      	ldrh	r2, [r3, #0]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009db0:	1c9a      	adds	r2, r3, #2
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b02      	subs	r3, #2
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009dc8:	e042      	b.n	8009e50 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3320      	adds	r3, #32
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009df4:	e02c      	b.n	8009e50 <HAL_SPI_Transmit+0x3d8>
 8009df6:	bf00      	nop
 8009df8:	40013000 	.word	0x40013000
 8009dfc:	50013000 	.word	0x50013000
 8009e00:	40003800 	.word	0x40003800
 8009e04:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e08:	f7f7 fe2a 	bl	8001a60 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d803      	bhi.n	8009e20 <HAL_SPI_Transmit+0x3a8>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d102      	bne.n	8009e26 <HAL_SPI_Transmit+0x3ae>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d114      	bne.n	8009e50 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f844 	bl	8009eb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e02c      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f af72 	bne.w	8009d42 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2200      	movs	r2, #0
 8009e66:	2108      	movs	r1, #8
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 f8c3 	bl	8009ff4 <SPI_WaitOnFlagUntilTimeout>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e7a:	f043 0220 	orr.w	r2, r3, #32
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f815 	bl	8009eb4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009ea8:	7efb      	ldrb	r3, [r7, #27]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3720      	adds	r7, #32
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop

08009eb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0208 	orr.w	r2, r2, #8
 8009ed2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	699a      	ldr	r2, [r3, #24]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0210 	orr.w	r2, r2, #16
 8009ee2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0201 	bic.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009f02:	f023 0303 	bic.w	r3, r3, #3
 8009f06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009f16:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d014      	beq.n	8009f4e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00f      	beq.n	8009f4e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	699a      	ldr	r2, [r3, #24]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0220 	orr.w	r2, r2, #32
 8009f4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d014      	beq.n	8009f84 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00f      	beq.n	8009f84 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f6a:	f043 0204 	orr.w	r2, r3, #4
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f82:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00f      	beq.n	8009fae <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f94:	f043 0201 	orr.w	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00f      	beq.n	8009fd8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	f043 0208 	orr.w	r2, r3, #8
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fd6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	4613      	mov	r3, r2
 800a002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a004:	e010      	b.n	800a028 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a006:	f7f7 fd2b 	bl	8001a60 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d803      	bhi.n	800a01e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01c:	d102      	bne.n	800a024 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e00f      	b.n	800a048 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4013      	ands	r3, r2
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	bf0c      	ite	eq
 800a038:	2301      	moveq	r3, #1
 800a03a:	2300      	movne	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	429a      	cmp	r2, r3
 800a044:	d0df      	beq.n	800a006 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	095b      	lsrs	r3, r3, #5
 800a05e:	3301      	adds	r3, #1
 800a060:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3307      	adds	r3, #7
 800a06e:	08db      	lsrs	r3, r3, #3
 800a070:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	fb02 f303 	mul.w	r3, r2, r3
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d12e      	bne.n	800a0fa <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e028      	b.n	800a0fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0201 	bic.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800a0d6:	ea42 0103 	orr.w	r1, r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e000      	b.n	800a0fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
  }
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e049      	b.n	800a1ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f841 	bl	800a1b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f000 fa88 	bl	800a65c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
	...

0800a1cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d001      	beq.n	800a1e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e072      	b.n	800a2ca <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a35      	ldr	r2, [pc, #212]	; (800a2d8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d040      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a34      	ldr	r2, [pc, #208]	; (800a2dc <HAL_TIM_Base_Start_IT+0x110>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d03b      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a218:	d036      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a222:	d031      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a2d      	ldr	r2, [pc, #180]	; (800a2e0 <HAL_TIM_Base_Start_IT+0x114>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d02c      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a2c      	ldr	r2, [pc, #176]	; (800a2e4 <HAL_TIM_Base_Start_IT+0x118>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d027      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a2a      	ldr	r2, [pc, #168]	; (800a2e8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d022      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a29      	ldr	r2, [pc, #164]	; (800a2ec <HAL_TIM_Base_Start_IT+0x120>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d01d      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a27      	ldr	r2, [pc, #156]	; (800a2f0 <HAL_TIM_Base_Start_IT+0x124>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d018      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a26      	ldr	r2, [pc, #152]	; (800a2f4 <HAL_TIM_Base_Start_IT+0x128>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a24      	ldr	r2, [pc, #144]	; (800a2f8 <HAL_TIM_Base_Start_IT+0x12c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00e      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a23      	ldr	r2, [pc, #140]	; (800a2fc <HAL_TIM_Base_Start_IT+0x130>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d009      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a21      	ldr	r2, [pc, #132]	; (800a300 <HAL_TIM_Base_Start_IT+0x134>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0xbc>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a20      	ldr	r2, [pc, #128]	; (800a304 <HAL_TIM_Base_Start_IT+0x138>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d115      	bne.n	800a2b4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <HAL_TIM_Base_Start_IT+0x13c>)
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b06      	cmp	r3, #6
 800a298:	d015      	beq.n	800a2c6 <HAL_TIM_Base_Start_IT+0xfa>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a0:	d011      	beq.n	800a2c6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f042 0201 	orr.w	r2, r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b2:	e008      	b.n	800a2c6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f042 0201 	orr.w	r2, r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e000      	b.n	800a2c8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	50012c00 	.word	0x50012c00
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	50000400 	.word	0x50000400
 800a2e8:	40000800 	.word	0x40000800
 800a2ec:	50000800 	.word	0x50000800
 800a2f0:	40000c00 	.word	0x40000c00
 800a2f4:	50000c00 	.word	0x50000c00
 800a2f8:	40013400 	.word	0x40013400
 800a2fc:	50013400 	.word	0x50013400
 800a300:	40014000 	.word	0x40014000
 800a304:	50014000 	.word	0x50014000
 800a308:	00010007 	.word	0x00010007

0800a30c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d122      	bne.n	800a368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d11b      	bne.n	800a368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f06f 0202 	mvn.w	r2, #2
 800a338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f965 	bl	800a61e <HAL_TIM_IC_CaptureCallback>
 800a354:	e005      	b.n	800a362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f957 	bl	800a60a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f968 	bl	800a632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0304 	and.w	r3, r3, #4
 800a372:	2b04      	cmp	r3, #4
 800a374:	d122      	bne.n	800a3bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b04      	cmp	r3, #4
 800a382:	d11b      	bne.n	800a3bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0204 	mvn.w	r2, #4
 800a38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2202      	movs	r2, #2
 800a392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f93b 	bl	800a61e <HAL_TIM_IC_CaptureCallback>
 800a3a8:	e005      	b.n	800a3b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f92d 	bl	800a60a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f93e 	bl	800a632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	d122      	bne.n	800a410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d11b      	bne.n	800a410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f06f 0208 	mvn.w	r2, #8
 800a3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f911 	bl	800a61e <HAL_TIM_IC_CaptureCallback>
 800a3fc:	e005      	b.n	800a40a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f903 	bl	800a60a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f914 	bl	800a632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0310 	and.w	r3, r3, #16
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d122      	bne.n	800a464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f003 0310 	and.w	r3, r3, #16
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d11b      	bne.n	800a464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f06f 0210 	mvn.w	r2, #16
 800a434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2208      	movs	r2, #8
 800a43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f8e7 	bl	800a61e <HAL_TIM_IC_CaptureCallback>
 800a450:	e005      	b.n	800a45e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f8d9 	bl	800a60a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f8ea 	bl	800a632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d10e      	bne.n	800a490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d107      	bne.n	800a490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0201 	mvn.w	r2, #1
 800a488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7f6 ff7a 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d10e      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a8:	2b80      	cmp	r3, #128	; 0x80
 800a4aa:	d107      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9d4 	bl	800a864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ca:	d10e      	bne.n	800a4ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d6:	2b80      	cmp	r3, #128	; 0x80
 800a4d8:	d107      	bne.n	800a4ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f9c7 	bl	800a878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d10e      	bne.n	800a516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a502:	2b40      	cmp	r3, #64	; 0x40
 800a504:	d107      	bne.n	800a516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f898 	bl	800a646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f003 0320 	and.w	r3, r3, #32
 800a520:	2b20      	cmp	r3, #32
 800a522:	d10e      	bne.n	800a542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b20      	cmp	r3, #32
 800a530:	d107      	bne.n	800a542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f06f 0220 	mvn.w	r2, #32
 800a53a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f987 	bl	800a850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a54c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a550:	d10f      	bne.n	800a572 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a55c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a560:	d107      	bne.n	800a572 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f98d 	bl	800a88c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a57c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a580:	d10f      	bne.n	800a5a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a58c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a590:	d107      	bne.n	800a5a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a59a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f97f 	bl	800a8a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5b0:	d10f      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5c0:	d107      	bne.n	800a5d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f971 	bl	800a8b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5e0:	d10f      	bne.n	800a602 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5f0:	d107      	bne.n	800a602 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a5fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f963 	bl	800a8c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
	...

0800a65c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a68      	ldr	r2, [pc, #416]	; (800a810 <TIM_Base_SetConfig+0x1b4>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d02b      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a67      	ldr	r2, [pc, #412]	; (800a814 <TIM_Base_SetConfig+0x1b8>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d027      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a682:	d023      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a68a:	d01f      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a62      	ldr	r2, [pc, #392]	; (800a818 <TIM_Base_SetConfig+0x1bc>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d01b      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a61      	ldr	r2, [pc, #388]	; (800a81c <TIM_Base_SetConfig+0x1c0>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d017      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a60      	ldr	r2, [pc, #384]	; (800a820 <TIM_Base_SetConfig+0x1c4>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d013      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a5f      	ldr	r2, [pc, #380]	; (800a824 <TIM_Base_SetConfig+0x1c8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00f      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a5e      	ldr	r2, [pc, #376]	; (800a828 <TIM_Base_SetConfig+0x1cc>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00b      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a5d      	ldr	r2, [pc, #372]	; (800a82c <TIM_Base_SetConfig+0x1d0>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d007      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a5c      	ldr	r2, [pc, #368]	; (800a830 <TIM_Base_SetConfig+0x1d4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_Base_SetConfig+0x70>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a5b      	ldr	r2, [pc, #364]	; (800a834 <TIM_Base_SetConfig+0x1d8>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d108      	bne.n	800a6de <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a4b      	ldr	r2, [pc, #300]	; (800a810 <TIM_Base_SetConfig+0x1b4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d043      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a4a      	ldr	r2, [pc, #296]	; (800a814 <TIM_Base_SetConfig+0x1b8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d03f      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f4:	d03b      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6fc:	d037      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a45      	ldr	r2, [pc, #276]	; (800a818 <TIM_Base_SetConfig+0x1bc>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d033      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a44      	ldr	r2, [pc, #272]	; (800a81c <TIM_Base_SetConfig+0x1c0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d02f      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a43      	ldr	r2, [pc, #268]	; (800a820 <TIM_Base_SetConfig+0x1c4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d02b      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a42      	ldr	r2, [pc, #264]	; (800a824 <TIM_Base_SetConfig+0x1c8>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d027      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a41      	ldr	r2, [pc, #260]	; (800a828 <TIM_Base_SetConfig+0x1cc>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d023      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a40      	ldr	r2, [pc, #256]	; (800a82c <TIM_Base_SetConfig+0x1d0>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d01f      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a3f      	ldr	r2, [pc, #252]	; (800a830 <TIM_Base_SetConfig+0x1d4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01b      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a3e      	ldr	r2, [pc, #248]	; (800a834 <TIM_Base_SetConfig+0x1d8>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d017      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a3d      	ldr	r2, [pc, #244]	; (800a838 <TIM_Base_SetConfig+0x1dc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a3c      	ldr	r2, [pc, #240]	; (800a83c <TIM_Base_SetConfig+0x1e0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a3b      	ldr	r2, [pc, #236]	; (800a840 <TIM_Base_SetConfig+0x1e4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a3a      	ldr	r2, [pc, #232]	; (800a844 <TIM_Base_SetConfig+0x1e8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a39      	ldr	r2, [pc, #228]	; (800a848 <TIM_Base_SetConfig+0x1ec>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_Base_SetConfig+0x112>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a38      	ldr	r2, [pc, #224]	; (800a84c <TIM_Base_SetConfig+0x1f0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a1a      	ldr	r2, [pc, #104]	; (800a810 <TIM_Base_SetConfig+0x1b4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d023      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a19      	ldr	r2, [pc, #100]	; (800a814 <TIM_Base_SetConfig+0x1b8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d01f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <TIM_Base_SetConfig+0x1d4>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d01b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a1d      	ldr	r2, [pc, #116]	; (800a834 <TIM_Base_SetConfig+0x1d8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d017      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <TIM_Base_SetConfig+0x1dc>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d013      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a1b      	ldr	r2, [pc, #108]	; (800a83c <TIM_Base_SetConfig+0x1e0>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a1a      	ldr	r2, [pc, #104]	; (800a840 <TIM_Base_SetConfig+0x1e4>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a19      	ldr	r2, [pc, #100]	; (800a844 <TIM_Base_SetConfig+0x1e8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d007      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a18      	ldr	r2, [pc, #96]	; (800a848 <TIM_Base_SetConfig+0x1ec>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d003      	beq.n	800a7f4 <TIM_Base_SetConfig+0x198>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a17      	ldr	r2, [pc, #92]	; (800a84c <TIM_Base_SetConfig+0x1f0>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d103      	bne.n	800a7fc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	615a      	str	r2, [r3, #20]
}
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40012c00 	.word	0x40012c00
 800a814:	50012c00 	.word	0x50012c00
 800a818:	40000400 	.word	0x40000400
 800a81c:	50000400 	.word	0x50000400
 800a820:	40000800 	.word	0x40000800
 800a824:	50000800 	.word	0x50000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	50000c00 	.word	0x50000c00
 800a830:	40013400 	.word	0x40013400
 800a834:	50013400 	.word	0x50013400
 800a838:	40014000 	.word	0x40014000
 800a83c:	50014000 	.word	0x50014000
 800a840:	40014400 	.word	0x40014400
 800a844:	50014400 	.word	0x50014400
 800a848:	40014800 	.word	0x40014800
 800a84c:	50014800 	.word	0x50014800

0800a850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e042      	b.n	800a974 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7f6 fea7 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2224      	movs	r2, #36	; 0x24
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f022 0201 	bic.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f8ca 	bl	800aab8 <UART_SetConfig>
 800a924:	4603      	mov	r3, r0
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e022      	b.n	800a974 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa60 	bl	800adfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a94a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a95a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fae7 	bl	800af40 <UART_CheckIdleState>
 800a972:	4603      	mov	r3, r0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b20      	cmp	r3, #32
 800a994:	f040 808b 	bne.w	800aaae <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <HAL_UART_Transmit+0x28>
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e083      	b.n	800aab0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d107      	bne.n	800a9c6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9c4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2221      	movs	r2, #33	; 0x21
 800a9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9d6:	f7f7 f843 	bl	8001a60 <HAL_GetTick>
 800a9da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	88fa      	ldrh	r2, [r7, #6]
 800a9e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	88fa      	ldrh	r2, [r7, #6]
 800a9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f4:	d108      	bne.n	800aa08 <HAL_UART_Transmit+0x8c>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	61bb      	str	r3, [r7, #24]
 800aa06:	e003      	b.n	800aa10 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa10:	e030      	b.n	800aa74 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2180      	movs	r1, #128	; 0x80
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fb39 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e03d      	b.n	800aab0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	61bb      	str	r3, [r7, #24]
 800aa50:	e007      	b.n	800aa62 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1c8      	bne.n	800aa12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2200      	movs	r2, #0
 800aa88:	2140      	movs	r1, #64	; 0x40
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 fb02 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d005      	beq.n	800aaa2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e006      	b.n	800aab0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e000      	b.n	800aab0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aaae:	2302      	movs	r3, #2
  }
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aabc:	b094      	sub	sp, #80	; 0x50
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	4b7e      	ldr	r3, [pc, #504]	; (800acc8 <UART_SetConfig+0x210>)
 800aace:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	431a      	orrs	r2, r3
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	431a      	orrs	r2, r3
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4977      	ldr	r1, [pc, #476]	; (800accc <UART_SetConfig+0x214>)
 800aaf0:	4019      	ands	r1, r3
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	68d9      	ldr	r1, [r3, #12]
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	ea40 0301 	orr.w	r3, r0, r1
 800ab12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4b6a      	ldr	r3, [pc, #424]	; (800acc8 <UART_SetConfig+0x210>)
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d009      	beq.n	800ab38 <UART_SetConfig+0x80>
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	4b69      	ldr	r3, [pc, #420]	; (800acd0 <UART_SetConfig+0x218>)
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d004      	beq.n	800ab38 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab30:	6a1a      	ldr	r2, [r3, #32]
 800ab32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab34:	4313      	orrs	r3, r2
 800ab36:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ab42:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab56:	f023 000f 	bic.w	r0, r3, #15
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	ea40 0301 	orr.w	r3, r0, r1
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	4b59      	ldr	r3, [pc, #356]	; (800acd4 <UART_SetConfig+0x21c>)
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d102      	bne.n	800ab78 <UART_SetConfig+0xc0>
 800ab72:	2301      	movs	r3, #1
 800ab74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab76:	e029      	b.n	800abcc <UART_SetConfig+0x114>
 800ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	4b56      	ldr	r3, [pc, #344]	; (800acd8 <UART_SetConfig+0x220>)
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d102      	bne.n	800ab88 <UART_SetConfig+0xd0>
 800ab82:	2302      	movs	r3, #2
 800ab84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab86:	e021      	b.n	800abcc <UART_SetConfig+0x114>
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4b53      	ldr	r3, [pc, #332]	; (800acdc <UART_SetConfig+0x224>)
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d102      	bne.n	800ab98 <UART_SetConfig+0xe0>
 800ab92:	2304      	movs	r3, #4
 800ab94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab96:	e019      	b.n	800abcc <UART_SetConfig+0x114>
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	4b50      	ldr	r3, [pc, #320]	; (800ace0 <UART_SetConfig+0x228>)
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d102      	bne.n	800aba8 <UART_SetConfig+0xf0>
 800aba2:	2308      	movs	r3, #8
 800aba4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aba6:	e011      	b.n	800abcc <UART_SetConfig+0x114>
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	4b4d      	ldr	r3, [pc, #308]	; (800ace4 <UART_SetConfig+0x22c>)
 800abae:	429a      	cmp	r2, r3
 800abb0:	d102      	bne.n	800abb8 <UART_SetConfig+0x100>
 800abb2:	2310      	movs	r3, #16
 800abb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abb6:	e009      	b.n	800abcc <UART_SetConfig+0x114>
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	4b42      	ldr	r3, [pc, #264]	; (800acc8 <UART_SetConfig+0x210>)
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d102      	bne.n	800abc8 <UART_SetConfig+0x110>
 800abc2:	2320      	movs	r3, #32
 800abc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abc6:	e001      	b.n	800abcc <UART_SetConfig+0x114>
 800abc8:	2300      	movs	r3, #0
 800abca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	4b3d      	ldr	r3, [pc, #244]	; (800acc8 <UART_SetConfig+0x210>)
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d005      	beq.n	800abe2 <UART_SetConfig+0x12a>
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b3d      	ldr	r3, [pc, #244]	; (800acd0 <UART_SetConfig+0x218>)
 800abdc:	429a      	cmp	r2, r3
 800abde:	f040 8085 	bne.w	800acec <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800abe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe4:	2200      	movs	r2, #0
 800abe6:	623b      	str	r3, [r7, #32]
 800abe8:	627a      	str	r2, [r7, #36]	; 0x24
 800abea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800abee:	f7fc feb7 	bl	8007960 <HAL_RCCEx_GetPeriphCLKFreq>
 800abf2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800abf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 80e8 	beq.w	800adcc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	4a39      	ldr	r2, [pc, #228]	; (800ace8 <UART_SetConfig+0x230>)
 800ac02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac06:	461a      	mov	r2, r3
 800ac08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac0e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	4613      	mov	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4413      	add	r3, r2
 800ac1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d305      	bcc.n	800ac2c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d903      	bls.n	800ac34 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac32:	e048      	b.n	800acc6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac36:	2200      	movs	r2, #0
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	61fa      	str	r2, [r7, #28]
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	4a29      	ldr	r2, [pc, #164]	; (800ace8 <UART_SetConfig+0x230>)
 800ac42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	2200      	movs	r2, #0
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	617a      	str	r2, [r7, #20]
 800ac4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac56:	f7f5 fc3d 	bl	80004d4 <__aeabi_uldivmod>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f04f 0200 	mov.w	r2, #0
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	020b      	lsls	r3, r1, #8
 800ac6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac70:	0202      	lsls	r2, r0, #8
 800ac72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac74:	6849      	ldr	r1, [r1, #4]
 800ac76:	0849      	lsrs	r1, r1, #1
 800ac78:	2000      	movs	r0, #0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	eb12 0804 	adds.w	r8, r2, r4
 800ac82:	eb43 0905 	adc.w	r9, r3, r5
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	60fa      	str	r2, [r7, #12]
 800ac90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 fc1c 	bl	80004d4 <__aeabi_uldivmod>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4613      	mov	r3, r2
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acaa:	d308      	bcc.n	800acbe <UART_SetConfig+0x206>
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acb2:	d204      	bcs.n	800acbe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acba:	60da      	str	r2, [r3, #12]
 800acbc:	e003      	b.n	800acc6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800acc4:	e082      	b.n	800adcc <UART_SetConfig+0x314>
 800acc6:	e081      	b.n	800adcc <UART_SetConfig+0x314>
 800acc8:	46002400 	.word	0x46002400
 800accc:	cfff69f3 	.word	0xcfff69f3
 800acd0:	56002400 	.word	0x56002400
 800acd4:	40013800 	.word	0x40013800
 800acd8:	40004400 	.word	0x40004400
 800acdc:	40004800 	.word	0x40004800
 800ace0:	40004c00 	.word	0x40004c00
 800ace4:	40005000 	.word	0x40005000
 800ace8:	08015c94 	.word	0x08015c94
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acf4:	d13c      	bne.n	800ad70 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800acf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf8:	2200      	movs	r2, #0
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	607a      	str	r2, [r7, #4]
 800acfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad02:	f7fc fe2d 	bl	8007960 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad06:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d05e      	beq.n	800adcc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	4a39      	ldr	r2, [pc, #228]	; (800adf8 <UART_SetConfig+0x340>)
 800ad14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad20:	005a      	lsls	r2, r3, #1
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	441a      	add	r2, r3
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad36:	2b0f      	cmp	r3, #15
 800ad38:	d916      	bls.n	800ad68 <UART_SetConfig+0x2b0>
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad40:	d212      	bcs.n	800ad68 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	f023 030f 	bic.w	r3, r3, #15
 800ad4a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4e:	085b      	lsrs	r3, r3, #1
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad64:	60da      	str	r2, [r3, #12]
 800ad66:	e031      	b.n	800adcc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad6e:	e02d      	b.n	800adcc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ad70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad72:	2200      	movs	r2, #0
 800ad74:	469a      	mov	sl, r3
 800ad76:	4693      	mov	fp, r2
 800ad78:	4650      	mov	r0, sl
 800ad7a:	4659      	mov	r1, fp
 800ad7c:	f7fc fdf0 	bl	8007960 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad80:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ad82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d021      	beq.n	800adcc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	4a1a      	ldr	r2, [pc, #104]	; (800adf8 <UART_SetConfig+0x340>)
 800ad8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad96:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	441a      	add	r2, r3
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adae:	2b0f      	cmp	r3, #15
 800adb0:	d909      	bls.n	800adc6 <UART_SetConfig+0x30e>
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb8:	d205      	bcs.n	800adc6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	60da      	str	r2, [r3, #12]
 800adc4:	e002      	b.n	800adcc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	2201      	movs	r2, #1
 800add0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	2201      	movs	r2, #1
 800add8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	2200      	movs	r2, #0
 800ade0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	2200      	movs	r2, #0
 800ade6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ade8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800adec:	4618      	mov	r0, r3
 800adee:	3750      	adds	r7, #80	; 0x50
 800adf0:	46bd      	mov	sp, r7
 800adf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adf6:	bf00      	nop
 800adf8:	08015c94 	.word	0x08015c94

0800adfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00a      	beq.n	800ae26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00a      	beq.n	800ae6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00a      	beq.n	800ae8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae90:	f003 0310 	and.w	r3, r3, #16
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00a      	beq.n	800aeae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	430a      	orrs	r2, r1
 800aece:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01a      	beq.n	800af12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aefa:	d10a      	bne.n	800af12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00a      	beq.n	800af34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	430a      	orrs	r2, r1
 800af32:	605a      	str	r2, [r3, #4]
  }
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b098      	sub	sp, #96	; 0x60
 800af44:	af02      	add	r7, sp, #8
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af50:	f7f6 fd86 	bl	8001a60 <HAL_GetTick>
 800af54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b08      	cmp	r3, #8
 800af62:	d12f      	bne.n	800afc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af6c:	2200      	movs	r2, #0
 800af6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f88e 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d022      	beq.n	800afc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af92:	653b      	str	r3, [r7, #80]	; 0x50
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af9c:	647b      	str	r3, [r7, #68]	; 0x44
 800af9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e063      	b.n	800b08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0304 	and.w	r3, r3, #4
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d149      	bne.n	800b066 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afda:	2200      	movs	r2, #0
 800afdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f857 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d03c      	beq.n	800b066 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	623b      	str	r3, [r7, #32]
   return(result);
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b000:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b00a:	633b      	str	r3, [r7, #48]	; 0x30
 800b00c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e6      	bne.n	800afec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3308      	adds	r3, #8
 800b024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	e853 3f00 	ldrex	r3, [r3]
 800b02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f023 0301 	bic.w	r3, r3, #1
 800b034:	64bb      	str	r3, [r7, #72]	; 0x48
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3308      	adds	r3, #8
 800b03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b03e:	61fa      	str	r2, [r7, #28]
 800b040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	69b9      	ldr	r1, [r7, #24]
 800b044:	69fa      	ldr	r2, [r7, #28]
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	617b      	str	r3, [r7, #20]
   return(result);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e5      	bne.n	800b01e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2220      	movs	r2, #32
 800b056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e012      	b.n	800b08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2220      	movs	r2, #32
 800b06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2220      	movs	r2, #32
 800b072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3758      	adds	r7, #88	; 0x58
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a4:	e049      	b.n	800b13a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d045      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7f6 fcd7 	bl	8001a60 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d302      	bcc.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e048      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d031      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	f003 0308 	and.w	r3, r3, #8
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d110      	bne.n	800b106 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f838 	bl	800b162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e029      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b114:	d111      	bne.n	800b13a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b11e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f81e 	bl	800b162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2220      	movs	r2, #32
 800b12a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e00f      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69da      	ldr	r2, [r3, #28]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4013      	ands	r3, r2
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	429a      	cmp	r2, r3
 800b148:	bf0c      	ite	eq
 800b14a:	2301      	moveq	r3, #1
 800b14c:	2300      	movne	r3, #0
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	461a      	mov	r2, r3
 800b152:	79fb      	ldrb	r3, [r7, #7]
 800b154:	429a      	cmp	r2, r3
 800b156:	d0a6      	beq.n	800b0a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b162:	b480      	push	{r7}
 800b164:	b095      	sub	sp, #84	; 0x54
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b172:	e853 3f00 	ldrex	r3, [r3]
 800b176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b188:	643b      	str	r3, [r7, #64]	; 0x40
 800b18a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b18e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b190:	e841 2300 	strex	r3, r2, [r1]
 800b194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e6      	bne.n	800b16a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1b2:	f023 0301 	bic.w	r3, r3, #1
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e3      	bne.n	800b19c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d118      	bne.n	800b20e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	e853 3f00 	ldrex	r3, [r3]
 800b1e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f023 0310 	bic.w	r3, r3, #16
 800b1f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fa:	61bb      	str	r3, [r7, #24]
 800b1fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6979      	ldr	r1, [r7, #20]
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	613b      	str	r3, [r7, #16]
   return(result);
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e6      	bne.n	800b1dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b222:	bf00      	nop
 800b224:	3754      	adds	r7, #84	; 0x54
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d101      	bne.n	800b244 <HAL_UARTEx_DisableFifoMode+0x16>
 800b240:	2302      	movs	r3, #2
 800b242:	e027      	b.n	800b294 <HAL_UARTEx_DisableFifoMode+0x66>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2224      	movs	r2, #36	; 0x24
 800b250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f022 0201 	bic.w	r2, r2, #1
 800b26a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b272:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2220      	movs	r2, #32
 800b286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d101      	bne.n	800b2b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	e02d      	b.n	800b314 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2224      	movs	r2, #36	; 0x24
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 0201 	bic.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	430a      	orrs	r2, r1
 800b2f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f84f 	bl	800b398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b330:	2302      	movs	r3, #2
 800b332:	e02d      	b.n	800b390 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2224      	movs	r2, #36	; 0x24
 800b340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 0201 	bic.w	r2, r2, #1
 800b35a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f811 	bl	800b398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d108      	bne.n	800b3ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3b8:	e031      	b.n	800b41e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3ba:	2308      	movs	r3, #8
 800b3bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3be:	2308      	movs	r3, #8
 800b3c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	0e5b      	lsrs	r3, r3, #25
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	0f5b      	lsrs	r3, r3, #29
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0307 	and.w	r3, r3, #7
 800b3e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	7b3a      	ldrb	r2, [r7, #12]
 800b3e6:	4911      	ldr	r1, [pc, #68]	; (800b42c <UARTEx_SetNbDataToProcess+0x94>)
 800b3e8:	5c8a      	ldrb	r2, [r1, r2]
 800b3ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3ee:	7b3a      	ldrb	r2, [r7, #12]
 800b3f0:	490f      	ldr	r1, [pc, #60]	; (800b430 <UARTEx_SetNbDataToProcess+0x98>)
 800b3f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	7b7a      	ldrb	r2, [r7, #13]
 800b404:	4909      	ldr	r1, [pc, #36]	; (800b42c <UARTEx_SetNbDataToProcess+0x94>)
 800b406:	5c8a      	ldrb	r2, [r1, r2]
 800b408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b40c:	7b7a      	ldrb	r2, [r7, #13]
 800b40e:	4908      	ldr	r1, [pc, #32]	; (800b430 <UARTEx_SetNbDataToProcess+0x98>)
 800b410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b412:	fb93 f3f2 	sdiv	r3, r3, r2
 800b416:	b29a      	uxth	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b41e:	bf00      	nop
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	08015cac 	.word	0x08015cac
 800b430:	08015cb4 	.word	0x08015cb4

0800b434 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b096      	sub	sp, #88	; 0x58
 800b438:	af02      	add	r7, sp, #8
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b442:	2234      	movs	r2, #52	; 0x34
 800b444:	2100      	movs	r1, #0
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f009 fd2a 	bl	8014ea0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f023 0303 	bic.w	r3, r3, #3
 800b452:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	f1a3 0208 	sub.w	r2, r3, #8
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2202      	movs	r2, #2
 800b480:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	4413      	add	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	3b04      	subs	r3, #4
 800b492:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4a0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b8:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b4ba:	697a      	ldr	r2, [r7, #20]
 800b4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4be:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d0:	4a5d      	ldr	r2, [pc, #372]	; (800b648 <_tx_byte_pool_create+0x214>)
 800b4d2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4da:	f3ef 8310 	mrs	r3, PRIMASK
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b4e2:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4e4:	b672      	cpsid	i
#endif
    return(int_posture);
 800b4e6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b4e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4a57      	ldr	r2, [pc, #348]	; (800b64c <_tx_byte_pool_create+0x218>)
 800b4ee:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b4f0:	4b57      	ldr	r3, [pc, #348]	; (800b650 <_tx_byte_pool_create+0x21c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d109      	bne.n	800b50c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b4f8:	4a56      	ldr	r2, [pc, #344]	; (800b654 <_tx_byte_pool_create+0x220>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	631a      	str	r2, [r3, #48]	; 0x30
 800b50a:	e011      	b.n	800b530 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b50c:	4b51      	ldr	r3, [pc, #324]	; (800b654 <_tx_byte_pool_create+0x220>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b516:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b528:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b52e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b530:	4b47      	ldr	r3, [pc, #284]	; (800b650 <_tx_byte_pool_create+0x21c>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3301      	adds	r3, #1
 800b536:	4a46      	ldr	r2, [pc, #280]	; (800b650 <_tx_byte_pool_create+0x21c>)
 800b538:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b53a:	2300      	movs	r3, #0
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	68f9      	ldr	r1, [r7, #12]
 800b544:	2008      	movs	r0, #8
 800b546:	f002 fd6d 	bl	800e024 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b54a:	4b43      	ldr	r3, [pc, #268]	; (800b658 <_tx_byte_pool_create+0x224>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d06c      	beq.n	800b630 <_tx_byte_pool_create+0x1fc>
 800b556:	4b41      	ldr	r3, [pc, #260]	; (800b65c <_tx_byte_pool_create+0x228>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d066      	beq.n	800b630 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b562:	f3ef 8305 	mrs	r3, IPSR
 800b566:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	4b3d      	ldr	r3, [pc, #244]	; (800b660 <_tx_byte_pool_create+0x22c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4313      	orrs	r3, r2
 800b570:	62bb      	str	r3, [r7, #40]	; 0x28
 800b572:	4b3c      	ldr	r3, [pc, #240]	; (800b664 <_tx_byte_pool_create+0x230>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	64bb      	str	r3, [r7, #72]	; 0x48
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10b      	bne.n	800b596 <_tx_byte_pool_create+0x162>
 800b57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b588:	041a      	lsls	r2, r3, #16
 800b58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b592:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b594:	e00e      	b.n	800b5b4 <_tx_byte_pool_create+0x180>
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b59c:	d205      	bcs.n	800b5aa <_tx_byte_pool_create+0x176>
 800b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a8:	e004      	b.n	800b5b4 <_tx_byte_pool_create+0x180>
 800b5aa:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b5ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5be:	605a      	str	r2, [r3, #4]
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	2215      	movs	r2, #21
 800b5c4:	609a      	str	r2, [r3, #8]
 800b5c6:	4b28      	ldr	r3, [pc, #160]	; (800b668 <_tx_byte_pool_create+0x234>)
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	60da      	str	r2, [r3, #12]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d2:	611a      	str	r2, [r3, #16]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d8:	615a      	str	r2, [r3, #20]
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	619a      	str	r2, [r3, #24]
 800b5e0:	f107 0214 	add.w	r2, r7, #20
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e6:	61da      	str	r2, [r3, #28]
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	3320      	adds	r3, #32
 800b5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ee:	4b1f      	ldr	r3, [pc, #124]	; (800b66c <_tx_byte_pool_create+0x238>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d314      	bcc.n	800b622 <_tx_byte_pool_create+0x1ee>
 800b5f8:	4b1d      	ldr	r3, [pc, #116]	; (800b670 <_tx_byte_pool_create+0x23c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5fe:	4a16      	ldr	r2, [pc, #88]	; (800b658 <_tx_byte_pool_create+0x224>)
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	4b1b      	ldr	r3, [pc, #108]	; (800b674 <_tx_byte_pool_create+0x240>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b60a:	621a      	str	r2, [r3, #32]
 800b60c:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <_tx_byte_pool_create+0x244>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00d      	beq.n	800b630 <_tx_byte_pool_create+0x1fc>
 800b614:	4b18      	ldr	r3, [pc, #96]	; (800b678 <_tx_byte_pool_create+0x244>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a16      	ldr	r2, [pc, #88]	; (800b674 <_tx_byte_pool_create+0x240>)
 800b61a:	6812      	ldr	r2, [r2, #0]
 800b61c:	4610      	mov	r0, r2
 800b61e:	4798      	blx	r3
 800b620:	e006      	b.n	800b630 <_tx_byte_pool_create+0x1fc>
 800b622:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <_tx_byte_pool_create+0x224>)
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	4b12      	ldr	r3, [pc, #72]	; (800b674 <_tx_byte_pool_create+0x240>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b62e:	621a      	str	r2, [r3, #32]
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	f383 8810 	msr	PRIMASK, r3
}
 800b63a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3750      	adds	r7, #80	; 0x50
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	ffffeeee 	.word	0xffffeeee
 800b64c:	42595445 	.word	0x42595445
 800b650:	20001678 	.word	0x20001678
 800b654:	20001674 	.word	0x20001674
 800b658:	20001ca0 	.word	0x20001ca0
 800b65c:	20001ca4 	.word	0x20001ca4
 800b660:	2000000c 	.word	0x2000000c
 800b664:	20001684 	.word	0x20001684
 800b668:	e0001004 	.word	0xe0001004
 800b66c:	20001c9c 	.word	0x20001c9c
 800b670:	20001c98 	.word	0x20001c98
 800b674:	20001c8c 	.word	0x20001c8c
 800b678:	20001ca8 	.word	0x20001ca8

0800b67c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b680:	f002 fcaa 	bl	800dfd8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b684:	f001 fbe6 	bl	800ce54 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b688:	f002 fa92 	bl	800dbb0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b68c:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <_tx_initialize_high_level+0x5c>)
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <_tx_initialize_high_level+0x60>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <_tx_initialize_high_level+0x64>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <_tx_initialize_high_level+0x68>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b6a4:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <_tx_initialize_high_level+0x6c>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	4b10      	ldr	r3, [pc, #64]	; (800b6ec <_tx_initialize_high_level+0x70>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b6b0:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <_tx_initialize_high_level+0x74>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <_tx_initialize_high_level+0x78>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b6bc:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <_tx_initialize_high_level+0x7c>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <_tx_initialize_high_level+0x80>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <_tx_initialize_high_level+0x84>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <_tx_initialize_high_level+0x88>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]
#endif
}
 800b6d4:	bf00      	nop
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	2000164c 	.word	0x2000164c
 800b6dc:	20001650 	.word	0x20001650
 800b6e0:	20001654 	.word	0x20001654
 800b6e4:	20001658 	.word	0x20001658
 800b6e8:	2000165c 	.word	0x2000165c
 800b6ec:	20001660 	.word	0x20001660
 800b6f0:	2000166c 	.word	0x2000166c
 800b6f4:	20001670 	.word	0x20001670
 800b6f8:	20001674 	.word	0x20001674
 800b6fc:	20001678 	.word	0x20001678
 800b700:	20001664 	.word	0x20001664
 800b704:	20001668 	.word	0x20001668

0800b708 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b70c:	4b10      	ldr	r3, [pc, #64]	; (800b750 <_tx_initialize_kernel_enter+0x48>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b714:	d00c      	beq.n	800b730 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <_tx_initialize_kernel_enter+0x48>)
 800b718:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b71c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b71e:	f7f4 fdab 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b722:	f7ff ffab 	bl	800b67c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b726:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <_tx_initialize_kernel_enter+0x4c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	4a09      	ldr	r2, [pc, #36]	; (800b754 <_tx_initialize_kernel_enter+0x4c>)
 800b72e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b730:	4b07      	ldr	r3, [pc, #28]	; (800b750 <_tx_initialize_kernel_enter+0x48>)
 800b732:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b736:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b738:	4b07      	ldr	r3, [pc, #28]	; (800b758 <_tx_initialize_kernel_enter+0x50>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f5 f859 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b742:	4b03      	ldr	r3, [pc, #12]	; (800b750 <_tx_initialize_kernel_enter+0x48>)
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b748:	f7f4 fdd2 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b74c:	bf00      	nop
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	2000000c 	.word	0x2000000c
 800b754:	2000171c 	.word	0x2000171c
 800b758:	2000167c 	.word	0x2000167c

0800b75c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08e      	sub	sp, #56	; 0x38
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b766:	f3ef 8310 	mrs	r3, PRIMASK
 800b76a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b76c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b76e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b770:	b672      	cpsid	i
    return(int_posture);
 800b772:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b774:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b77a:	4a37      	ldr	r2, [pc, #220]	; (800b858 <_tx_queue_cleanup+0xfc>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d161      	bne.n	800b844 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d15b      	bne.n	800b844 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b790:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b794:	2b00      	cmp	r3, #0
 800b796:	d055      	beq.n	800b844 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a2f      	ldr	r2, [pc, #188]	; (800b85c <_tx_queue_cleanup+0x100>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d150      	bne.n	800b844 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d04c      	beq.n	800b844 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b4:	1e5a      	subs	r2, r3, #1
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d103      	bne.n	800b7ce <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	629a      	str	r2, [r3, #40]	; 0x28
 800b7cc:	e013      	b.n	800b7f6 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d102      	bne.n	800b7f6 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f4:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fa:	2b05      	cmp	r3, #5
 800b7fc:	d122      	bne.n	800b844 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	220b      	movs	r2, #11
 800b80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b80e:	e003      	b.n	800b818 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	220a      	movs	r2, #10
 800b814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b818:	4b11      	ldr	r3, [pc, #68]	; (800b860 <_tx_queue_cleanup+0x104>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	4a10      	ldr	r2, [pc, #64]	; (800b860 <_tx_queue_cleanup+0x104>)
 800b820:	6013      	str	r3, [r2, #0]
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f383 8810 	msr	PRIMASK, r3
}
 800b82c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fcd6 	bl	800d1e0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b834:	f3ef 8310 	mrs	r3, PRIMASK
 800b838:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b83a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b83c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b83e:	b672      	cpsid	i
    return(int_posture);
 800b840:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b842:	637b      	str	r3, [r7, #52]	; 0x34
 800b844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b846:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f383 8810 	msr	PRIMASK, r3
}
 800b84e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b850:	bf00      	nop
 800b852:	3738      	adds	r7, #56	; 0x38
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	0800b75d 	.word	0x0800b75d
 800b85c:	51554555 	.word	0x51554555
 800b860:	2000171c 	.word	0x2000171c

0800b864 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b094      	sub	sp, #80	; 0x50
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b872:	2238      	movs	r2, #56	; 0x38
 800b874:	2100      	movs	r1, #0
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f009 fb12 	bl	8014ea0 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	fb02 f303 	mul.w	r3, r2, r3
 800b89c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	699a      	ldr	r2, [r3, #24]
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	441a      	add	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8c2:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8c8:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ce:	623b      	str	r3, [r7, #32]
    return(posture);
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b8d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8d4:	b672      	cpsid	i
    return(int_posture);
 800b8d6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b8d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4a55      	ldr	r2, [pc, #340]	; (800ba34 <_tx_queue_create+0x1d0>)
 800b8de:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b8e0:	4b55      	ldr	r3, [pc, #340]	; (800ba38 <_tx_queue_create+0x1d4>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d109      	bne.n	800b8fc <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b8e8:	4a54      	ldr	r2, [pc, #336]	; (800ba3c <_tx_queue_create+0x1d8>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	635a      	str	r2, [r3, #52]	; 0x34
 800b8fa:	e011      	b.n	800b920 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b8fc:	4b4f      	ldr	r3, [pc, #316]	; (800ba3c <_tx_queue_create+0x1d8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b906:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b918:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b920:	4b45      	ldr	r3, [pc, #276]	; (800ba38 <_tx_queue_create+0x1d4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3301      	adds	r3, #1
 800b926:	4a44      	ldr	r2, [pc, #272]	; (800ba38 <_tx_queue_create+0x1d4>)
 800b928:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	68f9      	ldr	r1, [r7, #12]
 800b934:	2003      	movs	r0, #3
 800b936:	f002 fb75 	bl	800e024 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b93a:	4b41      	ldr	r3, [pc, #260]	; (800ba40 <_tx_queue_create+0x1dc>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	d06b      	beq.n	800ba1e <_tx_queue_create+0x1ba>
 800b946:	4b3f      	ldr	r3, [pc, #252]	; (800ba44 <_tx_queue_create+0x1e0>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d065      	beq.n	800ba1e <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b952:	f3ef 8305 	mrs	r3, IPSR
 800b956:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	4b3b      	ldr	r3, [pc, #236]	; (800ba48 <_tx_queue_create+0x1e4>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4313      	orrs	r3, r2
 800b960:	627b      	str	r3, [r7, #36]	; 0x24
 800b962:	4b3a      	ldr	r3, [pc, #232]	; (800ba4c <_tx_queue_create+0x1e8>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	643b      	str	r3, [r7, #64]	; 0x40
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10b      	bne.n	800b986 <_tx_queue_create+0x122>
 800b96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b972:	647b      	str	r3, [r7, #68]	; 0x44
 800b974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b978:	041a      	lsls	r2, r3, #16
 800b97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b982:	647b      	str	r3, [r7, #68]	; 0x44
 800b984:	e00e      	b.n	800b9a4 <_tx_queue_create+0x140>
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b98c:	d205      	bcs.n	800b99a <_tx_queue_create+0x136>
 800b98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b990:	647b      	str	r3, [r7, #68]	; 0x44
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
 800b996:	643b      	str	r3, [r7, #64]	; 0x40
 800b998:	e004      	b.n	800b9a4 <_tx_queue_create+0x140>
 800b99a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b99e:	643b      	str	r3, [r7, #64]	; 0x40
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ae:	605a      	str	r2, [r3, #4]
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	223c      	movs	r2, #60	; 0x3c
 800b9b4:	609a      	str	r2, [r3, #8]
 800b9b6:	4b26      	ldr	r3, [pc, #152]	; (800ba50 <_tx_queue_create+0x1ec>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	60da      	str	r2, [r3, #12]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	611a      	str	r2, [r3, #16]
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	615a      	str	r2, [r3, #20]
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	619a      	str	r2, [r3, #24]
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9d4:	61da      	str	r2, [r3, #28]
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	3320      	adds	r3, #32
 800b9da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9dc:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <_tx_queue_create+0x1f0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d314      	bcc.n	800ba10 <_tx_queue_create+0x1ac>
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ba58 <_tx_queue_create+0x1f4>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9ec:	4a14      	ldr	r2, [pc, #80]	; (800ba40 <_tx_queue_create+0x1dc>)
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <_tx_queue_create+0x1f8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9f8:	621a      	str	r2, [r3, #32]
 800b9fa:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <_tx_queue_create+0x1fc>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00d      	beq.n	800ba1e <_tx_queue_create+0x1ba>
 800ba02:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <_tx_queue_create+0x1fc>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a15      	ldr	r2, [pc, #84]	; (800ba5c <_tx_queue_create+0x1f8>)
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	4798      	blx	r3
 800ba0e:	e006      	b.n	800ba1e <_tx_queue_create+0x1ba>
 800ba10:	4a0b      	ldr	r2, [pc, #44]	; (800ba40 <_tx_queue_create+0x1dc>)
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	4b11      	ldr	r3, [pc, #68]	; (800ba5c <_tx_queue_create+0x1f8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1c:	621a      	str	r2, [r3, #32]
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f383 8810 	msr	PRIMASK, r3
}
 800ba28:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3748      	adds	r7, #72	; 0x48
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	51554555 	.word	0x51554555
 800ba38:	20001658 	.word	0x20001658
 800ba3c:	20001654 	.word	0x20001654
 800ba40:	20001ca0 	.word	0x20001ca0
 800ba44:	20001ca4 	.word	0x20001ca4
 800ba48:	2000000c 	.word	0x2000000c
 800ba4c:	20001684 	.word	0x20001684
 800ba50:	e0001004 	.word	0xe0001004
 800ba54:	20001c9c 	.word	0x20001c9c
 800ba58:	20001c98 	.word	0x20001c98
 800ba5c:	20001c8c 	.word	0x20001c8c
 800ba60:	20001ca8 	.word	0x20001ca8

0800ba64 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b094      	sub	sp, #80	; 0x50
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba74:	f3ef 8310 	mrs	r3, PRIMASK
 800ba78:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba7e:	b672      	cpsid	i
    return(int_posture);
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800ba84:	4b76      	ldr	r3, [pc, #472]	; (800bc60 <_tx_queue_flush+0x1fc>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d06c      	beq.n	800bb6a <_tx_queue_flush+0x106>
 800ba90:	4b74      	ldr	r3, [pc, #464]	; (800bc64 <_tx_queue_flush+0x200>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d066      	beq.n	800bb6a <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ba9c:	f3ef 8305 	mrs	r3, IPSR
 800baa0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800baa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baa4:	4b70      	ldr	r3, [pc, #448]	; (800bc68 <_tx_queue_flush+0x204>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	637b      	str	r3, [r7, #52]	; 0x34
 800baac:	4b6f      	ldr	r3, [pc, #444]	; (800bc6c <_tx_queue_flush+0x208>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	643b      	str	r3, [r7, #64]	; 0x40
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10b      	bne.n	800bad0 <_tx_queue_flush+0x6c>
 800bab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	647b      	str	r3, [r7, #68]	; 0x44
 800babe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	041a      	lsls	r2, r3, #16
 800bac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac6:	4313      	orrs	r3, r2
 800bac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bacc:	647b      	str	r3, [r7, #68]	; 0x44
 800bace:	e00e      	b.n	800baee <_tx_queue_flush+0x8a>
 800bad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bad6:	d205      	bcs.n	800bae4 <_tx_queue_flush+0x80>
 800bad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bada:	647b      	str	r3, [r7, #68]	; 0x44
 800badc:	f04f 33ff 	mov.w	r3, #4294967295
 800bae0:	643b      	str	r3, [r7, #64]	; 0x40
 800bae2:	e004      	b.n	800baee <_tx_queue_flush+0x8a>
 800bae4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bae8:	643b      	str	r3, [r7, #64]	; 0x40
 800baea:	2300      	movs	r3, #0
 800baec:	647b      	str	r3, [r7, #68]	; 0x44
 800baee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baf8:	605a      	str	r2, [r3, #4]
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	223e      	movs	r2, #62	; 0x3e
 800bafe:	609a      	str	r2, [r3, #8]
 800bb00:	4b5b      	ldr	r3, [pc, #364]	; (800bc70 <_tx_queue_flush+0x20c>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	60da      	str	r2, [r3, #12]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	611a      	str	r2, [r3, #16]
 800bb0e:	f107 0208 	add.w	r2, r7, #8
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	615a      	str	r2, [r3, #20]
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	2200      	movs	r2, #0
 800bb1a:	619a      	str	r2, [r3, #24]
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1e:	2200      	movs	r2, #0
 800bb20:	61da      	str	r2, [r3, #28]
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	3320      	adds	r3, #32
 800bb26:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb28:	4b52      	ldr	r3, [pc, #328]	; (800bc74 <_tx_queue_flush+0x210>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d314      	bcc.n	800bb5c <_tx_queue_flush+0xf8>
 800bb32:	4b51      	ldr	r3, [pc, #324]	; (800bc78 <_tx_queue_flush+0x214>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb38:	4a49      	ldr	r2, [pc, #292]	; (800bc60 <_tx_queue_flush+0x1fc>)
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	4b4f      	ldr	r3, [pc, #316]	; (800bc7c <_tx_queue_flush+0x218>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb44:	621a      	str	r2, [r3, #32]
 800bb46:	4b4e      	ldr	r3, [pc, #312]	; (800bc80 <_tx_queue_flush+0x21c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00d      	beq.n	800bb6a <_tx_queue_flush+0x106>
 800bb4e:	4b4c      	ldr	r3, [pc, #304]	; (800bc80 <_tx_queue_flush+0x21c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a4a      	ldr	r2, [pc, #296]	; (800bc7c <_tx_queue_flush+0x218>)
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	4610      	mov	r0, r2
 800bb58:	4798      	blx	r3
 800bb5a:	e006      	b.n	800bb6a <_tx_queue_flush+0x106>
 800bb5c:	4a40      	ldr	r2, [pc, #256]	; (800bc60 <_tx_queue_flush+0x1fc>)
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	4b46      	ldr	r3, [pc, #280]	; (800bc7c <_tx_queue_flush+0x218>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb68:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d023      	beq.n	800bbba <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	699a      	ldr	r2, [r3, #24]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699a      	ldr	r2, [r3, #24]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d010      	beq.n	800bbba <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9c:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bbb0:	4b34      	ldr	r3, [pc, #208]	; (800bc84 <_tx_queue_flush+0x220>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	4a33      	ldr	r2, [pc, #204]	; (800bc84 <_tx_queue_flush+0x220>)
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	f383 8810 	msr	PRIMASK, r3
}
 800bbc4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800bbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d044      	beq.n	800bc56 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800bbcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbce:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800bbd0:	e027      	b.n	800bc22 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800bbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d025      	beq.n	800bc2a <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbde:	f3ef 8310 	mrs	r3, PRIMASK
 800bbe2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bbe4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bbe6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbe8:	b672      	cpsid	i
    return(int_posture);
 800bbea:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc00:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bc02:	4b20      	ldr	r3, [pc, #128]	; (800bc84 <_tx_queue_flush+0x220>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	4a1e      	ldr	r2, [pc, #120]	; (800bc84 <_tx_queue_flush+0x220>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	f383 8810 	msr	PRIMASK, r3
}
 800bc16:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fadf 	bl	800d1e0 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800bc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1d4      	bne.n	800bbd2 <_tx_queue_flush+0x16e>
 800bc28:	e000      	b.n	800bc2c <_tx_queue_flush+0x1c8>
                break;
 800bc2a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc30:	613b      	str	r3, [r7, #16]
    return(posture);
 800bc32:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bc34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc36:	b672      	cpsid	i
    return(int_posture);
 800bc38:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800bc3c:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <_tx_queue_flush+0x220>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	4a10      	ldr	r2, [pc, #64]	; (800bc84 <_tx_queue_flush+0x220>)
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f383 8810 	msr	PRIMASK, r3
}
 800bc50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bc52:	f001 fa8b 	bl	800d16c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3750      	adds	r7, #80	; 0x50
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20001ca0 	.word	0x20001ca0
 800bc64:	20001ca4 	.word	0x20001ca4
 800bc68:	2000000c 	.word	0x2000000c
 800bc6c:	20001684 	.word	0x20001684
 800bc70:	e0001004 	.word	0xe0001004
 800bc74:	20001c9c 	.word	0x20001c9c
 800bc78:	20001c98 	.word	0x20001c98
 800bc7c:	20001c8c 	.word	0x20001c8c
 800bc80:	20001ca8 	.word	0x20001ca8
 800bc84:	2000171c 	.word	0x2000171c

0800bc88 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b09a      	sub	sp, #104	; 0x68
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bc94:	2300      	movs	r3, #0
 800bc96:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc98:	f3ef 8310 	mrs	r3, PRIMASK
 800bc9c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bca2:	b672      	cpsid	i
    return(int_posture);
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800bca6:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800bca8:	4b77      	ldr	r3, [pc, #476]	; (800be88 <_tx_queue_receive+0x200>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d06c      	beq.n	800bd8e <_tx_queue_receive+0x106>
 800bcb4:	4b75      	ldr	r3, [pc, #468]	; (800be8c <_tx_queue_receive+0x204>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d066      	beq.n	800bd8e <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcc0:	f3ef 8305 	mrs	r3, IPSR
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bcc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc8:	4b71      	ldr	r3, [pc, #452]	; (800be90 <_tx_queue_receive+0x208>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	647b      	str	r3, [r7, #68]	; 0x44
 800bcd0:	4b70      	ldr	r3, [pc, #448]	; (800be94 <_tx_queue_receive+0x20c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	653b      	str	r3, [r7, #80]	; 0x50
 800bcd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <_tx_queue_receive+0x6c>
 800bcdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce0:	657b      	str	r3, [r7, #84]	; 0x54
 800bce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce6:	041a      	lsls	r2, r3, #16
 800bce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcf0:	657b      	str	r3, [r7, #84]	; 0x54
 800bcf2:	e00e      	b.n	800bd12 <_tx_queue_receive+0x8a>
 800bcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcf6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bcfa:	d205      	bcs.n	800bd08 <_tx_queue_receive+0x80>
 800bcfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfe:	657b      	str	r3, [r7, #84]	; 0x54
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	653b      	str	r3, [r7, #80]	; 0x50
 800bd06:	e004      	b.n	800bd12 <_tx_queue_receive+0x8a>
 800bd08:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bd0c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd0e:	2300      	movs	r3, #0
 800bd10:	657b      	str	r3, [r7, #84]	; 0x54
 800bd12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd1c:	605a      	str	r2, [r3, #4]
 800bd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd20:	2244      	movs	r2, #68	; 0x44
 800bd22:	609a      	str	r2, [r3, #8]
 800bd24:	4b5c      	ldr	r3, [pc, #368]	; (800be98 <_tx_queue_receive+0x210>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2a:	60da      	str	r2, [r3, #12]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd30:	611a      	str	r2, [r3, #16]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd36:	615a      	str	r2, [r3, #20]
 800bd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	619a      	str	r2, [r3, #24]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	691a      	ldr	r2, [r3, #16]
 800bd42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd44:	61da      	str	r2, [r3, #28]
 800bd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd48:	3320      	adds	r3, #32
 800bd4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd4c:	4b53      	ldr	r3, [pc, #332]	; (800be9c <_tx_queue_receive+0x214>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d314      	bcc.n	800bd80 <_tx_queue_receive+0xf8>
 800bd56:	4b52      	ldr	r3, [pc, #328]	; (800bea0 <_tx_queue_receive+0x218>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd5c:	4a4a      	ldr	r2, [pc, #296]	; (800be88 <_tx_queue_receive+0x200>)
 800bd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	4b50      	ldr	r3, [pc, #320]	; (800bea4 <_tx_queue_receive+0x21c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd68:	621a      	str	r2, [r3, #32]
 800bd6a:	4b4f      	ldr	r3, [pc, #316]	; (800bea8 <_tx_queue_receive+0x220>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00d      	beq.n	800bd8e <_tx_queue_receive+0x106>
 800bd72:	4b4d      	ldr	r3, [pc, #308]	; (800bea8 <_tx_queue_receive+0x220>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a4b      	ldr	r2, [pc, #300]	; (800bea4 <_tx_queue_receive+0x21c>)
 800bd78:	6812      	ldr	r2, [r2, #0]
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
 800bd7e:	e006      	b.n	800bd8e <_tx_queue_receive+0x106>
 800bd80:	4a41      	ldr	r2, [pc, #260]	; (800be88 <_tx_queue_receive+0x200>)
 800bd82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	4b47      	ldr	r3, [pc, #284]	; (800bea4 <_tx_queue_receive+0x21c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd8c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 8149 	beq.w	800c030 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bd9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d13c      	bne.n	800be1e <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6a1b      	ldr	r3, [r3, #32]
 800bda8:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bdb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdb6:	1d13      	adds	r3, r2, #4
 800bdb8:	667b      	str	r3, [r7, #100]	; 0x64
 800bdba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdbc:	1d19      	adds	r1, r3, #4
 800bdbe:	6639      	str	r1, [r7, #96]	; 0x60
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d90e      	bls.n	800bde8 <_tx_queue_receive+0x160>
 800bdca:	e007      	b.n	800bddc <_tx_queue_receive+0x154>
 800bdcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdce:	1d13      	adds	r3, r2, #4
 800bdd0:	667b      	str	r3, [r7, #100]	; 0x64
 800bdd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdd4:	1d19      	adds	r1, r3, #4
 800bdd6:	6639      	str	r1, [r7, #96]	; 0x60
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdde:	3b01      	subs	r3, #1
 800bde0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bde2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f1      	bne.n	800bdcc <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d102      	bne.n	800bdf8 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdfc:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	1e5a      	subs	r2, r3, #1
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	611a      	str	r2, [r3, #16]
 800be12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	f383 8810 	msr	PRIMASK, r3
}
 800be1c:	e176      	b.n	800c10c <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800be24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d166      	bne.n	800befc <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800be2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be32:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800be3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be40:	1d13      	adds	r3, r2, #4
 800be42:	667b      	str	r3, [r7, #100]	; 0x64
 800be44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be46:	1d19      	adds	r1, r3, #4
 800be48:	6639      	str	r1, [r7, #96]	; 0x60
 800be4a:	6812      	ldr	r2, [r2, #0]
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be50:	2b01      	cmp	r3, #1
 800be52:	d90e      	bls.n	800be72 <_tx_queue_receive+0x1ea>
 800be54:	e007      	b.n	800be66 <_tx_queue_receive+0x1de>
 800be56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be58:	1d13      	adds	r3, r2, #4
 800be5a:	667b      	str	r3, [r7, #100]	; 0x64
 800be5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be5e:	1d19      	adds	r1, r3, #4
 800be60:	6639      	str	r1, [r7, #96]	; 0x60
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be68:	3b01      	subs	r3, #1
 800be6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1f1      	bne.n	800be56 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800be72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be74:	3b01      	subs	r3, #1
 800be76:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800be78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d116      	bne.n	800beac <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	629a      	str	r2, [r3, #40]	; 0x28
 800be84:	e021      	b.n	800beca <_tx_queue_receive+0x242>
 800be86:	bf00      	nop
 800be88:	20001ca0 	.word	0x20001ca0
 800be8c:	20001ca4 	.word	0x20001ca4
 800be90:	2000000c 	.word	0x2000000c
 800be94:	20001684 	.word	0x20001684
 800be98:	e0001004 	.word	0xe0001004
 800be9c:	20001c9c 	.word	0x20001c9c
 800bea0:	20001c98 	.word	0x20001c98
 800bea4:	20001c8c 	.word	0x20001c8c
 800bea8:	20001ca8 	.word	0x20001ca8
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beb6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800beb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bebc:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bec2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bece:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed2:	2200      	movs	r2, #0
 800bed4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bede:	4b8e      	ldr	r3, [pc, #568]	; (800c118 <_tx_queue_receive+0x490>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	4a8c      	ldr	r2, [pc, #560]	; (800c118 <_tx_queue_receive+0x490>)
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	f383 8810 	msr	PRIMASK, r3
}
 800bef2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bef6:	f001 f973 	bl	800d1e0 <_tx_thread_system_resume>
 800befa:	e107      	b.n	800c10c <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bf0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf0e:	1d13      	adds	r3, r2, #4
 800bf10:	667b      	str	r3, [r7, #100]	; 0x64
 800bf12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf14:	1d19      	adds	r1, r3, #4
 800bf16:	6639      	str	r1, [r7, #96]	; 0x60
 800bf18:	6812      	ldr	r2, [r2, #0]
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d90e      	bls.n	800bf40 <_tx_queue_receive+0x2b8>
 800bf22:	e007      	b.n	800bf34 <_tx_queue_receive+0x2ac>
 800bf24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf26:	1d13      	adds	r3, r2, #4
 800bf28:	667b      	str	r3, [r7, #100]	; 0x64
 800bf2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf2c:	1d19      	adds	r1, r3, #4
 800bf2e:	6639      	str	r1, [r7, #96]	; 0x60
 800bf30:	6812      	ldr	r2, [r2, #0]
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf36:	3b01      	subs	r3, #1
 800bf38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1f1      	bne.n	800bf24 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d102      	bne.n	800bf50 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf54:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bf56:	4b70      	ldr	r3, [pc, #448]	; (800c118 <_tx_queue_receive+0x490>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	4a6e      	ldr	r2, [pc, #440]	; (800c118 <_tx_queue_receive+0x490>)
 800bf5e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bf60:	4b6d      	ldr	r3, [pc, #436]	; (800c118 <_tx_queue_receive+0x490>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	4a6c      	ldr	r2, [pc, #432]	; (800c118 <_tx_queue_receive+0x490>)
 800bf68:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf74:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bf7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf7e:	1d13      	adds	r3, r2, #4
 800bf80:	667b      	str	r3, [r7, #100]	; 0x64
 800bf82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf84:	1d19      	adds	r1, r3, #4
 800bf86:	6639      	str	r1, [r7, #96]	; 0x60
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d90e      	bls.n	800bfb0 <_tx_queue_receive+0x328>
 800bf92:	e007      	b.n	800bfa4 <_tx_queue_receive+0x31c>
 800bf94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf96:	1d13      	adds	r3, r2, #4
 800bf98:	667b      	str	r3, [r7, #100]	; 0x64
 800bf9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf9c:	1d19      	adds	r1, r3, #4
 800bf9e:	6639      	str	r1, [r7, #96]	; 0x60
 800bfa0:	6812      	ldr	r2, [r2, #0]
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1f1      	bne.n	800bf94 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d102      	bne.n	800bfc0 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfc4:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	629a      	str	r2, [r3, #40]	; 0x28
 800bfde:	e00e      	b.n	800bffe <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfea:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bffc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c002:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c006:	2200      	movs	r2, #0
 800c008:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00c:	2200      	movs	r2, #0
 800c00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c012:	4b41      	ldr	r3, [pc, #260]	; (800c118 <_tx_queue_receive+0x490>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3301      	adds	r3, #1
 800c018:	4a3f      	ldr	r2, [pc, #252]	; (800c118 <_tx_queue_receive+0x490>)
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	f383 8810 	msr	PRIMASK, r3
}
 800c026:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800c028:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c02a:	f001 f8d9 	bl	800d1e0 <_tx_thread_system_resume>
 800c02e:	e06d      	b.n	800c10c <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d062      	beq.n	800c0fc <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c036:	4b38      	ldr	r3, [pc, #224]	; (800c118 <_tx_queue_receive+0x490>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d008      	beq.n	800c050 <_tx_queue_receive+0x3c8>
 800c03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c040:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	f383 8810 	msr	PRIMASK, r3
}
 800c048:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800c04a:	230a      	movs	r3, #10
 800c04c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c04e:	e05d      	b.n	800c10c <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c050:	4b32      	ldr	r3, [pc, #200]	; (800c11c <_tx_queue_receive+0x494>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c058:	4a31      	ldr	r2, [pc, #196]	; (800c120 <_tx_queue_receive+0x498>)
 800c05a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c07a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d109      	bne.n	800c098 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c088:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c08e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c094:	675a      	str	r2, [r3, #116]	; 0x74
 800c096:	e011      	b.n	800c0bc <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a8:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ae:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0b4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0ba:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c6:	2205      	movs	r2, #5
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c0d6:	4b10      	ldr	r3, [pc, #64]	; (800c118 <_tx_queue_receive+0x490>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	4a0e      	ldr	r2, [pc, #56]	; (800c118 <_tx_queue_receive+0x490>)
 800c0de:	6013      	str	r3, [r2, #0]
 800c0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c0ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0ee:	f001 fa31 	bl	800d554 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0fa:	e007      	b.n	800c10c <_tx_queue_receive+0x484>
 800c0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f383 8810 	msr	PRIMASK, r3
}
 800c106:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800c108:	230a      	movs	r3, #10
 800c10a:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3768      	adds	r7, #104	; 0x68
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2000171c 	.word	0x2000171c
 800c11c:	20001684 	.word	0x20001684
 800c120:	0800b75d 	.word	0x0800b75d

0800c124 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b09a      	sub	sp, #104	; 0x68
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c130:	2300      	movs	r3, #0
 800c132:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c134:	f3ef 8310 	mrs	r3, PRIMASK
 800c138:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c13c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c13e:	b672      	cpsid	i
    return(int_posture);
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c142:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c144:	4b7a      	ldr	r3, [pc, #488]	; (800c330 <_tx_queue_send+0x20c>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	64bb      	str	r3, [r7, #72]	; 0x48
 800c14a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d06c      	beq.n	800c22a <_tx_queue_send+0x106>
 800c150:	4b78      	ldr	r3, [pc, #480]	; (800c334 <_tx_queue_send+0x210>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d066      	beq.n	800c22a <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c15c:	f3ef 8305 	mrs	r3, IPSR
 800c160:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c164:	4b74      	ldr	r3, [pc, #464]	; (800c338 <_tx_queue_send+0x214>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4313      	orrs	r3, r2
 800c16a:	647b      	str	r3, [r7, #68]	; 0x44
 800c16c:	4b73      	ldr	r3, [pc, #460]	; (800c33c <_tx_queue_send+0x218>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	653b      	str	r3, [r7, #80]	; 0x50
 800c172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <_tx_queue_send+0x6c>
 800c178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17c:	657b      	str	r3, [r7, #84]	; 0x54
 800c17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c182:	041a      	lsls	r2, r3, #16
 800c184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c186:	4313      	orrs	r3, r2
 800c188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c18c:	657b      	str	r3, [r7, #84]	; 0x54
 800c18e:	e00e      	b.n	800c1ae <_tx_queue_send+0x8a>
 800c190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c192:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c196:	d205      	bcs.n	800c1a4 <_tx_queue_send+0x80>
 800c198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c19a:	657b      	str	r3, [r7, #84]	; 0x54
 800c19c:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c1a2:	e004      	b.n	800c1ae <_tx_queue_send+0x8a>
 800c1a4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c1a8:	653b      	str	r3, [r7, #80]	; 0x50
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	657b      	str	r3, [r7, #84]	; 0x54
 800c1ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1b8:	605a      	str	r2, [r3, #4]
 800c1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1bc:	2245      	movs	r2, #69	; 0x45
 800c1be:	609a      	str	r2, [r3, #8]
 800c1c0:	4b5f      	ldr	r3, [pc, #380]	; (800c340 <_tx_queue_send+0x21c>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c6:	60da      	str	r2, [r3, #12]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1cc:	611a      	str	r2, [r3, #16]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	615a      	str	r2, [r3, #20]
 800c1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	619a      	str	r2, [r3, #24]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e0:	61da      	str	r2, [r3, #28]
 800c1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e4:	3320      	adds	r3, #32
 800c1e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e8:	4b56      	ldr	r3, [pc, #344]	; (800c344 <_tx_queue_send+0x220>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d314      	bcc.n	800c21c <_tx_queue_send+0xf8>
 800c1f2:	4b55      	ldr	r3, [pc, #340]	; (800c348 <_tx_queue_send+0x224>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1f8:	4a4d      	ldr	r2, [pc, #308]	; (800c330 <_tx_queue_send+0x20c>)
 800c1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	4b53      	ldr	r3, [pc, #332]	; (800c34c <_tx_queue_send+0x228>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c204:	621a      	str	r2, [r3, #32]
 800c206:	4b52      	ldr	r3, [pc, #328]	; (800c350 <_tx_queue_send+0x22c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00d      	beq.n	800c22a <_tx_queue_send+0x106>
 800c20e:	4b50      	ldr	r3, [pc, #320]	; (800c350 <_tx_queue_send+0x22c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a4e      	ldr	r2, [pc, #312]	; (800c34c <_tx_queue_send+0x228>)
 800c214:	6812      	ldr	r2, [r2, #0]
 800c216:	4610      	mov	r0, r2
 800c218:	4798      	blx	r3
 800c21a:	e006      	b.n	800c22a <_tx_queue_send+0x106>
 800c21c:	4a44      	ldr	r2, [pc, #272]	; (800c330 <_tx_queue_send+0x20c>)
 800c21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c220:	6013      	str	r3, [r2, #0]
 800c222:	4b4a      	ldr	r3, [pc, #296]	; (800c34c <_tx_queue_send+0x228>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c228:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 80ae 	beq.w	800c396 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d13c      	bne.n	800c2ba <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	1e5a      	subs	r2, r3, #1
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c266:	1d13      	adds	r3, r2, #4
 800c268:	667b      	str	r3, [r7, #100]	; 0x64
 800c26a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26c:	1d19      	adds	r1, r3, #4
 800c26e:	6639      	str	r1, [r7, #96]	; 0x60
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c276:	2b01      	cmp	r3, #1
 800c278:	d90e      	bls.n	800c298 <_tx_queue_send+0x174>
 800c27a:	e007      	b.n	800c28c <_tx_queue_send+0x168>
 800c27c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c27e:	1d13      	adds	r3, r2, #4
 800c280:	667b      	str	r3, [r7, #100]	; 0x64
 800c282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c284:	1d19      	adds	r1, r3, #4
 800c286:	6639      	str	r1, [r7, #96]	; 0x60
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28e:	3b01      	subs	r3, #1
 800c290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f1      	bne.n	800c27c <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	69db      	ldr	r3, [r3, #28]
 800c29c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d102      	bne.n	800c2a8 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2ac:	625a      	str	r2, [r3, #36]	; 0x24
 800c2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	f383 8810 	msr	PRIMASK, r3
}
 800c2b8:	e0db      	b.n	800c472 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2be:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	629a      	str	r2, [r3, #40]	; 0x28
 800c2d2:	e012      	b.n	800c2fa <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e0:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2e6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2f2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2f8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2fe:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	2200      	movs	r2, #0
 800c304:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c30e:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c316:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c318:	1d13      	adds	r3, r2, #4
 800c31a:	667b      	str	r3, [r7, #100]	; 0x64
 800c31c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c31e:	1d19      	adds	r1, r3, #4
 800c320:	6639      	str	r1, [r7, #96]	; 0x60
 800c322:	6812      	ldr	r2, [r2, #0]
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d921      	bls.n	800c370 <_tx_queue_send+0x24c>
 800c32c:	e01a      	b.n	800c364 <_tx_queue_send+0x240>
 800c32e:	bf00      	nop
 800c330:	20001ca0 	.word	0x20001ca0
 800c334:	20001ca4 	.word	0x20001ca4
 800c338:	2000000c 	.word	0x2000000c
 800c33c:	20001684 	.word	0x20001684
 800c340:	e0001004 	.word	0xe0001004
 800c344:	20001c9c 	.word	0x20001c9c
 800c348:	20001c98 	.word	0x20001c98
 800c34c:	20001c8c 	.word	0x20001c8c
 800c350:	20001ca8 	.word	0x20001ca8
 800c354:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c356:	1d13      	adds	r3, r2, #4
 800c358:	667b      	str	r3, [r7, #100]	; 0x64
 800c35a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c35c:	1d19      	adds	r1, r3, #4
 800c35e:	6639      	str	r1, [r7, #96]	; 0x60
 800c360:	6812      	ldr	r2, [r2, #0]
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c366:	3b01      	subs	r3, #1
 800c368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f1      	bne.n	800c354 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c378:	4b40      	ldr	r3, [pc, #256]	; (800c47c <_tx_queue_send+0x358>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	4a3f      	ldr	r2, [pc, #252]	; (800c47c <_tx_queue_send+0x358>)
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c384:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	f383 8810 	msr	PRIMASK, r3
}
 800c38c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c38e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c390:	f000 ff26 	bl	800d1e0 <_tx_thread_system_resume>
 800c394:	e06d      	b.n	800c472 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d062      	beq.n	800c462 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c39c:	4b37      	ldr	r3, [pc, #220]	; (800c47c <_tx_queue_send+0x358>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <_tx_queue_send+0x292>
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	f383 8810 	msr	PRIMASK, r3
}
 800c3ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c3b0:	230b      	movs	r3, #11
 800c3b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3b4:	e05d      	b.n	800c472 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c3b6:	4b32      	ldr	r3, [pc, #200]	; (800c480 <_tx_queue_send+0x35c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3be:	4a31      	ldr	r2, [pc, #196]	; (800c484 <_tx_queue_send+0x360>)
 800c3c0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d109      	bne.n	800c3fe <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3ee:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3f4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3fa:	675a      	str	r2, [r3, #116]	; 0x74
 800c3fc:	e011      	b.n	800c422 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c402:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c408:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c414:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c41a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c420:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42c:	2205      	movs	r2, #5
 800c42e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c432:	2201      	movs	r2, #1
 800c434:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <_tx_queue_send+0x358>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3301      	adds	r3, #1
 800c442:	4a0e      	ldr	r2, [pc, #56]	; (800c47c <_tx_queue_send+0x358>)
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	f383 8810 	msr	PRIMASK, r3
}
 800c450:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c454:	f001 f87e 	bl	800d554 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c45e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c460:	e007      	b.n	800c472 <_tx_queue_send+0x34e>
 800c462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c464:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f383 8810 	msr	PRIMASK, r3
}
 800c46c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c46e:	230b      	movs	r3, #11
 800c470:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c474:	4618      	mov	r0, r3
 800c476:	3768      	adds	r7, #104	; 0x68
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000171c 	.word	0x2000171c
 800c480:	20001684 	.word	0x20001684
 800c484:	0800b75d 	.word	0x0800b75d

0800c488 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b092      	sub	sp, #72	; 0x48
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c492:	2300      	movs	r3, #0
 800c494:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c496:	f3ef 8310 	mrs	r3, PRIMASK
 800c49a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c49c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c49e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4a0:	b672      	cpsid	i
    return(int_posture);
 800c4a2:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c4a4:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c4a6:	4b67      	ldr	r3, [pc, #412]	; (800c644 <_tx_semaphore_ceiling_put+0x1bc>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d06d      	beq.n	800c58e <_tx_semaphore_ceiling_put+0x106>
 800c4b2:	4b65      	ldr	r3, [pc, #404]	; (800c648 <_tx_semaphore_ceiling_put+0x1c0>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d067      	beq.n	800c58e <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4be:	f3ef 8305 	mrs	r3, IPSR
 800c4c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4b61      	ldr	r3, [pc, #388]	; (800c64c <_tx_semaphore_ceiling_put+0x1c4>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	633b      	str	r3, [r7, #48]	; 0x30
 800c4ce:	4b60      	ldr	r3, [pc, #384]	; (800c650 <_tx_semaphore_ceiling_put+0x1c8>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10b      	bne.n	800c4f2 <_tx_semaphore_ceiling_put+0x6a>
 800c4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	643b      	str	r3, [r7, #64]	; 0x40
 800c4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e4:	041a      	lsls	r2, r3, #16
 800c4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800c4f0:	e00e      	b.n	800c510 <_tx_semaphore_ceiling_put+0x88>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c4f8:	d205      	bcs.n	800c506 <_tx_semaphore_ceiling_put+0x7e>
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fc:	643b      	str	r3, [r7, #64]	; 0x40
 800c4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c504:	e004      	b.n	800c510 <_tx_semaphore_ceiling_put+0x88>
 800c506:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c50c:	2300      	movs	r3, #0
 800c50e:	643b      	str	r3, [r7, #64]	; 0x40
 800c510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c51a:	605a      	str	r2, [r3, #4]
 800c51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51e:	2250      	movs	r2, #80	; 0x50
 800c520:	609a      	str	r2, [r3, #8]
 800c522:	4b4c      	ldr	r3, [pc, #304]	; (800c654 <_tx_semaphore_ceiling_put+0x1cc>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c528:	60da      	str	r2, [r3, #12]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52e:	611a      	str	r2, [r3, #16]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	689a      	ldr	r2, [r3, #8]
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	615a      	str	r2, [r3, #20]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691a      	ldr	r2, [r3, #16]
 800c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53e:	619a      	str	r2, [r3, #24]
 800c540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	61da      	str	r2, [r3, #28]
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	3320      	adds	r3, #32
 800c54a:	637b      	str	r3, [r7, #52]	; 0x34
 800c54c:	4b42      	ldr	r3, [pc, #264]	; (800c658 <_tx_semaphore_ceiling_put+0x1d0>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c552:	429a      	cmp	r2, r3
 800c554:	d314      	bcc.n	800c580 <_tx_semaphore_ceiling_put+0xf8>
 800c556:	4b41      	ldr	r3, [pc, #260]	; (800c65c <_tx_semaphore_ceiling_put+0x1d4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
 800c55c:	4a39      	ldr	r2, [pc, #228]	; (800c644 <_tx_semaphore_ceiling_put+0x1bc>)
 800c55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c560:	6013      	str	r3, [r2, #0]
 800c562:	4b3f      	ldr	r3, [pc, #252]	; (800c660 <_tx_semaphore_ceiling_put+0x1d8>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c568:	621a      	str	r2, [r3, #32]
 800c56a:	4b3e      	ldr	r3, [pc, #248]	; (800c664 <_tx_semaphore_ceiling_put+0x1dc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00d      	beq.n	800c58e <_tx_semaphore_ceiling_put+0x106>
 800c572:	4b3c      	ldr	r3, [pc, #240]	; (800c664 <_tx_semaphore_ceiling_put+0x1dc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a3a      	ldr	r2, [pc, #232]	; (800c660 <_tx_semaphore_ceiling_put+0x1d8>)
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	4610      	mov	r0, r2
 800c57c:	4798      	blx	r3
 800c57e:	e006      	b.n	800c58e <_tx_semaphore_ceiling_put+0x106>
 800c580:	4a30      	ldr	r2, [pc, #192]	; (800c644 <_tx_semaphore_ceiling_put+0x1bc>)
 800c582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4b36      	ldr	r3, [pc, #216]	; (800c660 <_tx_semaphore_ceiling_put+0x1d8>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c58c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	2b00      	cmp	r3, #0
 800c598:	d11b      	bne.n	800c5d2 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d808      	bhi.n	800c5b6 <_tx_semaphore_ceiling_put+0x12e>
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f383 8810 	msr	PRIMASK, r3
}
 800c5ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c5b0:	2321      	movs	r3, #33	; 0x21
 800c5b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c5b4:	e041      	b.n	800c63a <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	609a      	str	r2, [r3, #8]
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f383 8810 	msr	PRIMASK, r3
}
 800c5ca:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	647b      	str	r3, [r7, #68]	; 0x44
 800c5d0:	e033      	b.n	800c63a <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	60da      	str	r2, [r3, #12]
 800c5ea:	e00e      	b.n	800c60a <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f0:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fc:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	6a3a      	ldr	r2, [r7, #32]
 800c602:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c608:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c60e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	2200      	movs	r2, #0
 800c614:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	2200      	movs	r2, #0
 800c61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c61e:	4b12      	ldr	r3, [pc, #72]	; (800c668 <_tx_semaphore_ceiling_put+0x1e0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	4a10      	ldr	r2, [pc, #64]	; (800c668 <_tx_semaphore_ceiling_put+0x1e0>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f383 8810 	msr	PRIMASK, r3
}
 800c632:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c636:	f000 fdd3 	bl	800d1e0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3748      	adds	r7, #72	; 0x48
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	20001ca0 	.word	0x20001ca0
 800c648:	20001ca4 	.word	0x20001ca4
 800c64c:	2000000c 	.word	0x2000000c
 800c650:	20001684 	.word	0x20001684
 800c654:	e0001004 	.word	0xe0001004
 800c658:	20001c9c 	.word	0x20001c9c
 800c65c:	20001c98 	.word	0x20001c98
 800c660:	20001c8c 	.word	0x20001c8c
 800c664:	20001ca8 	.word	0x20001ca8
 800c668:	2000171c 	.word	0x2000171c

0800c66c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08e      	sub	sp, #56	; 0x38
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c676:	f3ef 8310 	mrs	r3, PRIMASK
 800c67a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c67c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c67e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c680:	b672      	cpsid	i
    return(int_posture);
 800c682:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c684:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c68a:	4a33      	ldr	r2, [pc, #204]	; (800c758 <_tx_semaphore_cleanup+0xec>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d158      	bne.n	800c742 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d152      	bne.n	800c742 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6a0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d04c      	beq.n	800c742 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a2b      	ldr	r2, [pc, #172]	; (800c75c <_tx_semaphore_cleanup+0xf0>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d147      	bne.n	800c742 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d043      	beq.n	800c742 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	1e5a      	subs	r2, r3, #1
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d103      	bne.n	800c6de <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	2200      	movs	r2, #0
 800c6da:	60da      	str	r2, [r3, #12]
 800c6dc:	e013      	b.n	800c706 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6f4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d102      	bne.n	800c706 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c704:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70a:	2b06      	cmp	r3, #6
 800c70c:	d119      	bne.n	800c742 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	220d      	movs	r2, #13
 800c712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c716:	4b12      	ldr	r3, [pc, #72]	; (800c760 <_tx_semaphore_cleanup+0xf4>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3301      	adds	r3, #1
 800c71c:	4a10      	ldr	r2, [pc, #64]	; (800c760 <_tx_semaphore_cleanup+0xf4>)
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	f383 8810 	msr	PRIMASK, r3
}
 800c72a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fd57 	bl	800d1e0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c732:	f3ef 8310 	mrs	r3, PRIMASK
 800c736:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c738:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c73a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c73c:	b672      	cpsid	i
    return(int_posture);
 800c73e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c740:	637b      	str	r3, [r7, #52]	; 0x34
 800c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c744:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f383 8810 	msr	PRIMASK, r3
}
 800c74c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c74e:	bf00      	nop
 800c750:	3738      	adds	r7, #56	; 0x38
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	0800c66d 	.word	0x0800c66d
 800c75c:	53454d41 	.word	0x53454d41
 800c760:	2000171c 	.word	0x2000171c

0800c764 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b092      	sub	sp, #72	; 0x48
 800c768:	af02      	add	r7, sp, #8
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c770:	221c      	movs	r2, #28
 800c772:	2100      	movs	r1, #0
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f008 fb93 	bl	8014ea0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c786:	f3ef 8310 	mrs	r3, PRIMASK
 800c78a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c78e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c790:	b672      	cpsid	i
    return(int_posture);
 800c792:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c794:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	4a56      	ldr	r2, [pc, #344]	; (800c8f4 <_tx_semaphore_create+0x190>)
 800c79a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c79c:	4b56      	ldr	r3, [pc, #344]	; (800c8f8 <_tx_semaphore_create+0x194>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d109      	bne.n	800c7b8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c7a4:	4a55      	ldr	r2, [pc, #340]	; (800c8fc <_tx_semaphore_create+0x198>)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	619a      	str	r2, [r3, #24]
 800c7b6:	e011      	b.n	800c7dc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c7b8:	4b50      	ldr	r3, [pc, #320]	; (800c8fc <_tx_semaphore_create+0x198>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c7dc:	4b46      	ldr	r3, [pc, #280]	; (800c8f8 <_tx_semaphore_create+0x194>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	4a45      	ldr	r2, [pc, #276]	; (800c8f8 <_tx_semaphore_create+0x194>)
 800c7e4:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	2004      	movs	r0, #4
 800c7f2:	f001 fc17 	bl	800e024 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c7f6:	4b42      	ldr	r3, [pc, #264]	; (800c900 <_tx_semaphore_create+0x19c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d06c      	beq.n	800c8dc <_tx_semaphore_create+0x178>
 800c802:	4b40      	ldr	r3, [pc, #256]	; (800c904 <_tx_semaphore_create+0x1a0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d066      	beq.n	800c8dc <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c80e:	f3ef 8305 	mrs	r3, IPSR
 800c812:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	4b3c      	ldr	r3, [pc, #240]	; (800c908 <_tx_semaphore_create+0x1a4>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c81e:	4b3b      	ldr	r3, [pc, #236]	; (800c90c <_tx_semaphore_create+0x1a8>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	63bb      	str	r3, [r7, #56]	; 0x38
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10b      	bne.n	800c842 <_tx_semaphore_create+0xde>
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c834:	041a      	lsls	r2, r3, #16
 800c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c838:	4313      	orrs	r3, r2
 800c83a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c840:	e00e      	b.n	800c860 <_tx_semaphore_create+0xfc>
 800c842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c844:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c848:	d205      	bcs.n	800c856 <_tx_semaphore_create+0xf2>
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295
 800c852:	63bb      	str	r3, [r7, #56]	; 0x38
 800c854:	e004      	b.n	800c860 <_tx_semaphore_create+0xfc>
 800c856:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c85a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c86a:	605a      	str	r2, [r3, #4]
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	2251      	movs	r2, #81	; 0x51
 800c870:	609a      	str	r2, [r3, #8]
 800c872:	4b27      	ldr	r3, [pc, #156]	; (800c910 <_tx_semaphore_create+0x1ac>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	60da      	str	r2, [r3, #12]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	611a      	str	r2, [r3, #16]
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	615a      	str	r2, [r3, #20]
 800c886:	f107 0214 	add.w	r2, r7, #20
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	619a      	str	r2, [r3, #24]
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	2200      	movs	r2, #0
 800c892:	61da      	str	r2, [r3, #28]
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	3320      	adds	r3, #32
 800c898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c89a:	4b1e      	ldr	r3, [pc, #120]	; (800c914 <_tx_semaphore_create+0x1b0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d314      	bcc.n	800c8ce <_tx_semaphore_create+0x16a>
 800c8a4:	4b1c      	ldr	r3, [pc, #112]	; (800c918 <_tx_semaphore_create+0x1b4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8aa:	4a15      	ldr	r2, [pc, #84]	; (800c900 <_tx_semaphore_create+0x19c>)
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	4b1a      	ldr	r3, [pc, #104]	; (800c91c <_tx_semaphore_create+0x1b8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8b6:	621a      	str	r2, [r3, #32]
 800c8b8:	4b19      	ldr	r3, [pc, #100]	; (800c920 <_tx_semaphore_create+0x1bc>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00d      	beq.n	800c8dc <_tx_semaphore_create+0x178>
 800c8c0:	4b17      	ldr	r3, [pc, #92]	; (800c920 <_tx_semaphore_create+0x1bc>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a15      	ldr	r2, [pc, #84]	; (800c91c <_tx_semaphore_create+0x1b8>)
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	e006      	b.n	800c8dc <_tx_semaphore_create+0x178>
 800c8ce:	4a0c      	ldr	r2, [pc, #48]	; (800c900 <_tx_semaphore_create+0x19c>)
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	6013      	str	r3, [r2, #0]
 800c8d4:	4b11      	ldr	r3, [pc, #68]	; (800c91c <_tx_semaphore_create+0x1b8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8da:	621a      	str	r2, [r3, #32]
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8de:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	f383 8810 	msr	PRIMASK, r3
}
 800c8e6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3740      	adds	r7, #64	; 0x40
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	53454d41 	.word	0x53454d41
 800c8f8:	20001650 	.word	0x20001650
 800c8fc:	2000164c 	.word	0x2000164c
 800c900:	20001ca0 	.word	0x20001ca0
 800c904:	20001ca4 	.word	0x20001ca4
 800c908:	2000000c 	.word	0x2000000c
 800c90c:	20001684 	.word	0x20001684
 800c910:	e0001004 	.word	0xe0001004
 800c914:	20001c9c 	.word	0x20001c9c
 800c918:	20001c98 	.word	0x20001c98
 800c91c:	20001c8c 	.word	0x20001c8c
 800c920:	20001ca8 	.word	0x20001ca8

0800c924 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b092      	sub	sp, #72	; 0x48
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c92e:	2300      	movs	r3, #0
 800c930:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c932:	f3ef 8310 	mrs	r3, PRIMASK
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c93a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c93c:	b672      	cpsid	i
    return(int_posture);
 800c93e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c940:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c942:	4b78      	ldr	r3, [pc, #480]	; (800cb24 <_tx_semaphore_get+0x200>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	637b      	str	r3, [r7, #52]	; 0x34
 800c948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d06d      	beq.n	800ca2a <_tx_semaphore_get+0x106>
 800c94e:	4b76      	ldr	r3, [pc, #472]	; (800cb28 <_tx_semaphore_get+0x204>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c956:	2b00      	cmp	r3, #0
 800c958:	d067      	beq.n	800ca2a <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c95a:	f3ef 8305 	mrs	r3, IPSR
 800c95e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	4b72      	ldr	r3, [pc, #456]	; (800cb2c <_tx_semaphore_get+0x208>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4313      	orrs	r3, r2
 800c968:	633b      	str	r3, [r7, #48]	; 0x30
 800c96a:	4b71      	ldr	r3, [pc, #452]	; (800cb30 <_tx_semaphore_get+0x20c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <_tx_semaphore_get+0x6a>
 800c976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97a:	643b      	str	r3, [r7, #64]	; 0x40
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c980:	041a      	lsls	r2, r3, #16
 800c982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c984:	4313      	orrs	r3, r2
 800c986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c98a:	643b      	str	r3, [r7, #64]	; 0x40
 800c98c:	e00e      	b.n	800c9ac <_tx_semaphore_get+0x88>
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c994:	d205      	bcs.n	800c9a2 <_tx_semaphore_get+0x7e>
 800c996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c998:	643b      	str	r3, [r7, #64]	; 0x40
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a0:	e004      	b.n	800c9ac <_tx_semaphore_get+0x88>
 800c9a2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9b6:	605a      	str	r2, [r3, #4]
 800c9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ba:	2253      	movs	r2, #83	; 0x53
 800c9bc:	609a      	str	r2, [r3, #8]
 800c9be:	4b5d      	ldr	r3, [pc, #372]	; (800cb34 <_tx_semaphore_get+0x210>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c4:	60da      	str	r2, [r3, #12]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	611a      	str	r2, [r3, #16]
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	615a      	str	r2, [r3, #20]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d8:	619a      	str	r2, [r3, #24]
 800c9da:	f107 0208 	add.w	r2, r7, #8
 800c9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e0:	61da      	str	r2, [r3, #28]
 800c9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e4:	3320      	adds	r3, #32
 800c9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e8:	4b53      	ldr	r3, [pc, #332]	; (800cb38 <_tx_semaphore_get+0x214>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d314      	bcc.n	800ca1c <_tx_semaphore_get+0xf8>
 800c9f2:	4b52      	ldr	r3, [pc, #328]	; (800cb3c <_tx_semaphore_get+0x218>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f8:	4a4a      	ldr	r2, [pc, #296]	; (800cb24 <_tx_semaphore_get+0x200>)
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	4b50      	ldr	r3, [pc, #320]	; (800cb40 <_tx_semaphore_get+0x21c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca04:	621a      	str	r2, [r3, #32]
 800ca06:	4b4f      	ldr	r3, [pc, #316]	; (800cb44 <_tx_semaphore_get+0x220>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00d      	beq.n	800ca2a <_tx_semaphore_get+0x106>
 800ca0e:	4b4d      	ldr	r3, [pc, #308]	; (800cb44 <_tx_semaphore_get+0x220>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a4b      	ldr	r2, [pc, #300]	; (800cb40 <_tx_semaphore_get+0x21c>)
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	4610      	mov	r0, r2
 800ca18:	4798      	blx	r3
 800ca1a:	e006      	b.n	800ca2a <_tx_semaphore_get+0x106>
 800ca1c:	4a41      	ldr	r2, [pc, #260]	; (800cb24 <_tx_semaphore_get+0x200>)
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	4b47      	ldr	r3, [pc, #284]	; (800cb40 <_tx_semaphore_get+0x21c>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca28:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00a      	beq.n	800ca48 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	1e5a      	subs	r2, r3, #1
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	609a      	str	r2, [r3, #8]
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	f383 8810 	msr	PRIMASK, r3
}
 800ca46:	e068      	b.n	800cb1a <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d05d      	beq.n	800cb0a <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800ca4e:	4b3e      	ldr	r3, [pc, #248]	; (800cb48 <_tx_semaphore_get+0x224>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d008      	beq.n	800ca68 <_tx_semaphore_get+0x144>
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f383 8810 	msr	PRIMASK, r3
}
 800ca60:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800ca62:	230d      	movs	r3, #13
 800ca64:	647b      	str	r3, [r7, #68]	; 0x44
 800ca66:	e058      	b.n	800cb1a <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ca68:	4b31      	ldr	r3, [pc, #196]	; (800cb30 <_tx_semaphore_get+0x20c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	4a36      	ldr	r2, [pc, #216]	; (800cb4c <_tx_semaphore_get+0x228>)
 800ca72:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ca80:	3201      	adds	r2, #1
 800ca82:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d109      	bne.n	800caa2 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	675a      	str	r2, [r3, #116]	; 0x74
 800caa0:	e011      	b.n	800cac6 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caac:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cab2:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	1c5a      	adds	r2, r3, #1
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2206      	movs	r2, #6
 800cad4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2201      	movs	r2, #1
 800cada:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cae2:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <_tx_semaphore_get+0x224>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3301      	adds	r3, #1
 800cae8:	4a17      	ldr	r2, [pc, #92]	; (800cb48 <_tx_semaphore_get+0x224>)
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f383 8810 	msr	PRIMASK, r3
}
 800caf6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fd2a 	bl	800d554 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb06:	647b      	str	r3, [r7, #68]	; 0x44
 800cb08:	e007      	b.n	800cb1a <_tx_semaphore_get+0x1f6>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f383 8810 	msr	PRIMASK, r3
}
 800cb14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800cb16:	230d      	movs	r3, #13
 800cb18:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3748      	adds	r7, #72	; 0x48
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	20001ca0 	.word	0x20001ca0
 800cb28:	20001ca4 	.word	0x20001ca4
 800cb2c:	2000000c 	.word	0x2000000c
 800cb30:	20001684 	.word	0x20001684
 800cb34:	e0001004 	.word	0xe0001004
 800cb38:	20001c9c 	.word	0x20001c9c
 800cb3c:	20001c98 	.word	0x20001c98
 800cb40:	20001c8c 	.word	0x20001c8c
 800cb44:	20001ca8 	.word	0x20001ca8
 800cb48:	2000171c 	.word	0x2000171c
 800cb4c:	0800c66d 	.word	0x0800c66d

0800cb50 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b09a      	sub	sp, #104	; 0x68
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cb5e:	2300      	movs	r3, #0
 800cb60:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cb62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb64:	21ef      	movs	r1, #239	; 0xef
 800cb66:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cb68:	f008 f99a 	bl	8014ea0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cb6c:	22b0      	movs	r2, #176	; 0xb0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f008 f995 	bl	8014ea0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb8c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb92:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb98:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cba6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cbac:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cbb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cbba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbc0:	4413      	add	r3, r2
 800cbc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbc8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cbca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cbcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d007      	beq.n	800cbe2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cbe0:	e006      	b.n	800cbf0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cbe6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cbec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2203      	movs	r2, #3
 800cbf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4a86      	ldr	r2, [pc, #536]	; (800ce14 <_tx_thread_create+0x2c4>)
 800cbfa:	655a      	str	r2, [r3, #84]	; 0x54
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cc02:	4985      	ldr	r1, [pc, #532]	; (800ce18 <_tx_thread_create+0x2c8>)
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f7f3 fbe1 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0e:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cc12:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc14:	b672      	cpsid	i
    return(int_posture);
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cc18:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4a7f      	ldr	r2, [pc, #508]	; (800ce1c <_tx_thread_create+0x2cc>)
 800cc1e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cc20:	4b7f      	ldr	r3, [pc, #508]	; (800ce20 <_tx_thread_create+0x2d0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10b      	bne.n	800cc40 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cc28:	4a7e      	ldr	r2, [pc, #504]	; (800ce24 <_tx_thread_create+0x2d4>)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800cc3e:	e016      	b.n	800cc6e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cc40:	4b78      	ldr	r3, [pc, #480]	; (800ce24 <_tx_thread_create+0x2d4>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc4c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cc56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cc6e:	4b6c      	ldr	r3, [pc, #432]	; (800ce20 <_tx_thread_create+0x2d0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3301      	adds	r3, #1
 800cc74:	4a6a      	ldr	r2, [pc, #424]	; (800ce20 <_tx_thread_create+0x2d0>)
 800cc76:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800cc78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	2001      	movs	r0, #1
 800cc86:	f001 f9cd 	bl	800e024 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800cc8a:	4b67      	ldr	r3, [pc, #412]	; (800ce28 <_tx_thread_create+0x2d8>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d06b      	beq.n	800cd6e <_tx_thread_create+0x21e>
 800cc96:	4b65      	ldr	r3, [pc, #404]	; (800ce2c <_tx_thread_create+0x2dc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d065      	beq.n	800cd6e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cca2:	f3ef 8305 	mrs	r3, IPSR
 800cca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800cca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccaa:	4b61      	ldr	r3, [pc, #388]	; (800ce30 <_tx_thread_create+0x2e0>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccb2:	4b60      	ldr	r3, [pc, #384]	; (800ce34 <_tx_thread_create+0x2e4>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	653b      	str	r3, [r7, #80]	; 0x50
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10b      	bne.n	800ccd6 <_tx_thread_create+0x186>
 800ccbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc8:	041a      	lsls	r2, r3, #16
 800ccca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cccc:	4313      	orrs	r3, r2
 800ccce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccd4:	e00e      	b.n	800ccf4 <_tx_thread_create+0x1a4>
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ccdc:	d205      	bcs.n	800ccea <_tx_thread_create+0x19a>
 800ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce0:	657b      	str	r3, [r7, #84]	; 0x54
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	653b      	str	r3, [r7, #80]	; 0x50
 800cce8:	e004      	b.n	800ccf4 <_tx_thread_create+0x1a4>
 800ccea:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ccee:	653b      	str	r3, [r7, #80]	; 0x50
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccfe:	605a      	str	r2, [r3, #4]
 800cd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd02:	2264      	movs	r2, #100	; 0x64
 800cd04:	609a      	str	r2, [r3, #8]
 800cd06:	4b4c      	ldr	r3, [pc, #304]	; (800ce38 <_tx_thread_create+0x2e8>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0c:	60da      	str	r2, [r3, #12]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd12:	611a      	str	r2, [r3, #16]
 800cd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd18:	615a      	str	r2, [r3, #20]
 800cd1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1e:	619a      	str	r2, [r3, #24]
 800cd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd24:	61da      	str	r2, [r3, #28]
 800cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd28:	3320      	adds	r3, #32
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd2c:	4b43      	ldr	r3, [pc, #268]	; (800ce3c <_tx_thread_create+0x2ec>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d314      	bcc.n	800cd60 <_tx_thread_create+0x210>
 800cd36:	4b42      	ldr	r3, [pc, #264]	; (800ce40 <_tx_thread_create+0x2f0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd3c:	4a3a      	ldr	r2, [pc, #232]	; (800ce28 <_tx_thread_create+0x2d8>)
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd40:	6013      	str	r3, [r2, #0]
 800cd42:	4b40      	ldr	r3, [pc, #256]	; (800ce44 <_tx_thread_create+0x2f4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd48:	621a      	str	r2, [r3, #32]
 800cd4a:	4b3f      	ldr	r3, [pc, #252]	; (800ce48 <_tx_thread_create+0x2f8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00d      	beq.n	800cd6e <_tx_thread_create+0x21e>
 800cd52:	4b3d      	ldr	r3, [pc, #244]	; (800ce48 <_tx_thread_create+0x2f8>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a3b      	ldr	r2, [pc, #236]	; (800ce44 <_tx_thread_create+0x2f4>)
 800cd58:	6812      	ldr	r2, [r2, #0]
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	4798      	blx	r3
 800cd5e:	e006      	b.n	800cd6e <_tx_thread_create+0x21e>
 800cd60:	4a31      	ldr	r2, [pc, #196]	; (800ce28 <_tx_thread_create+0x2d8>)
 800cd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	4b37      	ldr	r3, [pc, #220]	; (800ce44 <_tx_thread_create+0x2f4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd6c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cd6e:	4b37      	ldr	r3, [pc, #220]	; (800ce4c <_tx_thread_create+0x2fc>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3301      	adds	r3, #1
 800cd74:	4a35      	ldr	r2, [pc, #212]	; (800ce4c <_tx_thread_create+0x2fc>)
 800cd76:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cd78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d129      	bne.n	800cdd2 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd7e:	f3ef 8305 	mrs	r3, IPSR
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cd84:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cd86:	4b2a      	ldr	r3, [pc, #168]	; (800ce30 <_tx_thread_create+0x2e0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cd90:	d30d      	bcc.n	800cdae <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cd92:	4b2f      	ldr	r3, [pc, #188]	; (800ce50 <_tx_thread_create+0x300>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cd98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cd9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdaa:	63da      	str	r2, [r3, #60]	; 0x3c
 800cdac:	e001      	b.n	800cdb2 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	f383 8810 	msr	PRIMASK, r3
}
 800cdbc:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 fa0e 	bl	800d1e0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cdc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01e      	beq.n	800ce08 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cdca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdce:	63da      	str	r2, [r3, #60]	; 0x3c
 800cdd0:	e01a      	b.n	800ce08 <_tx_thread_create+0x2b8>
 800cdd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f383 8810 	msr	PRIMASK, r3
}
 800cddc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdde:	f3ef 8310 	mrs	r3, PRIMASK
 800cde2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cde4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cde6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cde8:	b672      	cpsid	i
    return(int_posture);
 800cdea:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cdec:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cdee:	4b17      	ldr	r3, [pc, #92]	; (800ce4c <_tx_thread_create+0x2fc>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	4a15      	ldr	r2, [pc, #84]	; (800ce4c <_tx_thread_create+0x2fc>)
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdfa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	f383 8810 	msr	PRIMASK, r3
}
 800ce02:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ce04:	f000 f9b2 	bl	800d16c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3760      	adds	r7, #96	; 0x60
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	0800daf5 	.word	0x0800daf5
 800ce18:	0800ced1 	.word	0x0800ced1
 800ce1c:	54485244 	.word	0x54485244
 800ce20:	20001690 	.word	0x20001690
 800ce24:	2000168c 	.word	0x2000168c
 800ce28:	20001ca0 	.word	0x20001ca0
 800ce2c:	20001ca4 	.word	0x20001ca4
 800ce30:	2000000c 	.word	0x2000000c
 800ce34:	20001684 	.word	0x20001684
 800ce38:	e0001004 	.word	0xe0001004
 800ce3c:	20001c9c 	.word	0x20001c9c
 800ce40:	20001c98 	.word	0x20001c98
 800ce44:	20001c8c 	.word	0x20001c8c
 800ce48:	20001ca8 	.word	0x20001ca8
 800ce4c:	2000171c 	.word	0x2000171c
 800ce50:	20001688 	.word	0x20001688

0800ce54 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <_tx_thread_initialize+0x54>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ce5e:	4b13      	ldr	r3, [pc, #76]	; (800ceac <_tx_thread_initialize+0x58>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <_tx_thread_initialize+0x5c>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ce6a:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <_tx_thread_initialize+0x60>)
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800ce70:	2280      	movs	r2, #128	; 0x80
 800ce72:	2100      	movs	r1, #0
 800ce74:	4810      	ldr	r0, [pc, #64]	; (800ceb8 <_tx_thread_initialize+0x64>)
 800ce76:	f008 f813 	bl	8014ea0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800ce7a:	4b10      	ldr	r3, [pc, #64]	; (800cebc <_tx_thread_initialize+0x68>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800ce80:	4b0f      	ldr	r3, [pc, #60]	; (800cec0 <_tx_thread_initialize+0x6c>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800ce86:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <_tx_thread_initialize+0x70>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800ce8c:	4b0e      	ldr	r3, [pc, #56]	; (800cec8 <_tx_thread_initialize+0x74>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800ce92:	4b0e      	ldr	r3, [pc, #56]	; (800cecc <_tx_thread_initialize+0x78>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800ce9a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800ce9e:	4a0b      	ldr	r2, [pc, #44]	; (800cecc <_tx_thread_initialize+0x78>)
 800cea0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cea2:	bf00      	nop
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20001684 	.word	0x20001684
 800ceac:	20001688 	.word	0x20001688
 800ceb0:	20001694 	.word	0x20001694
 800ceb4:	20001698 	.word	0x20001698
 800ceb8:	2000169c 	.word	0x2000169c
 800cebc:	2000168c 	.word	0x2000168c
 800cec0:	20001690 	.word	0x20001690
 800cec4:	2000171c 	.word	0x2000171c
 800cec8:	20001720 	.word	0x20001720
 800cecc:	20001724 	.word	0x20001724

0800ced0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ced6:	4b21      	ldr	r3, [pc, #132]	; (800cf5c <_tx_thread_shell_entry+0x8c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee0:	69fa      	ldr	r2, [r7, #28]
 800cee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cee4:	4610      	mov	r0, r2
 800cee6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cee8:	4b1d      	ldr	r3, [pc, #116]	; (800cf60 <_tx_thread_shell_entry+0x90>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cef0:	4b1b      	ldr	r3, [pc, #108]	; (800cf60 <_tx_thread_shell_entry+0x90>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	69f8      	ldr	r0, [r7, #28]
 800cef6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cef8:	f3ef 8310 	mrs	r3, PRIMASK
 800cefc:	607b      	str	r3, [r7, #4]
    return(posture);
 800cefe:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cf00:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf02:	b672      	cpsid	i
    return(int_posture);
 800cf04:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cf06:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	2201      	movs	r2, #1
 800cf12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	2200      	movs	r2, #0
 800cf18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cf1a:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <_tx_thread_shell_entry+0x94>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	4a10      	ldr	r2, [pc, #64]	; (800cf64 <_tx_thread_shell_entry+0x94>)
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	f383 8810 	msr	PRIMASK, r3
}
 800cf2e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800cf30:	f3ef 8314 	mrs	r3, CONTROL
 800cf34:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800cf36:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f023 0304 	bic.w	r3, r3, #4
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f383 8814 	msr	CONTROL, r3
}
 800cf4c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cf4e:	69f8      	ldr	r0, [r7, #28]
 800cf50:	f000 fb00 	bl	800d554 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cf54:	bf00      	nop
 800cf56:	3720      	adds	r7, #32
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20001684 	.word	0x20001684
 800cf60:	20001720 	.word	0x20001720
 800cf64:	2000171c 	.word	0x2000171c

0800cf68 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b094      	sub	sp, #80	; 0x50
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf70:	f3ef 8310 	mrs	r3, PRIMASK
 800cf74:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cf78:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf7a:	b672      	cpsid	i
    return(int_posture);
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cf7e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cf80:	4b6f      	ldr	r3, [pc, #444]	; (800d140 <_tx_thread_sleep+0x1d8>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cf86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d108      	bne.n	800cf9e <_tx_thread_sleep+0x36>
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	f383 8810 	msr	PRIMASK, r3
}
 800cf96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cf98:	2313      	movs	r3, #19
 800cf9a:	60fb      	str	r3, [r7, #12]
 800cf9c:	e0ca      	b.n	800d134 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf9e:	f3ef 8305 	mrs	r3, IPSR
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cfa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cfa6:	4b67      	ldr	r3, [pc, #412]	; (800d144 <_tx_thread_sleep+0x1dc>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <_tx_thread_sleep+0x5a>
 800cfb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	f383 8810 	msr	PRIMASK, r3
}
 800cfba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cfbc:	2313      	movs	r3, #19
 800cfbe:	60fb      	str	r3, [r7, #12]
 800cfc0:	e0b8      	b.n	800d134 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc4:	4a60      	ldr	r2, [pc, #384]	; (800d148 <_tx_thread_sleep+0x1e0>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d108      	bne.n	800cfdc <_tx_thread_sleep+0x74>
 800cfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfcc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	f383 8810 	msr	PRIMASK, r3
}
 800cfd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cfd6:	2313      	movs	r3, #19
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e0ab      	b.n	800d134 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d108      	bne.n	800cff4 <_tx_thread_sleep+0x8c>
 800cfe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	f383 8810 	msr	PRIMASK, r3
}
 800cfec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cfee:	2300      	movs	r3, #0
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	e09f      	b.n	800d134 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cff4:	4b55      	ldr	r3, [pc, #340]	; (800d14c <_tx_thread_sleep+0x1e4>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d008      	beq.n	800d00e <_tx_thread_sleep+0xa6>
 800cffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	f383 8810 	msr	PRIMASK, r3
}
 800d006:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d008:	2313      	movs	r3, #19
 800d00a:	60fb      	str	r3, [r7, #12]
 800d00c:	e092      	b.n	800d134 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800d00e:	4b50      	ldr	r3, [pc, #320]	; (800d150 <_tx_thread_sleep+0x1e8>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d016:	2b00      	cmp	r3, #0
 800d018:	d06d      	beq.n	800d0f6 <_tx_thread_sleep+0x18e>
 800d01a:	4b4e      	ldr	r3, [pc, #312]	; (800d154 <_tx_thread_sleep+0x1ec>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d022:	2b00      	cmp	r3, #0
 800d024:	d067      	beq.n	800d0f6 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d026:	f3ef 8305 	mrs	r3, IPSR
 800d02a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	4b45      	ldr	r3, [pc, #276]	; (800d144 <_tx_thread_sleep+0x1dc>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4313      	orrs	r3, r2
 800d034:	63bb      	str	r3, [r7, #56]	; 0x38
 800d036:	4b42      	ldr	r3, [pc, #264]	; (800d140 <_tx_thread_sleep+0x1d8>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10b      	bne.n	800d05a <_tx_thread_sleep+0xf2>
 800d042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04c:	041a      	lsls	r2, r3, #16
 800d04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d050:	4313      	orrs	r3, r2
 800d052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d056:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d058:	e00e      	b.n	800d078 <_tx_thread_sleep+0x110>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d060:	d205      	bcs.n	800d06e <_tx_thread_sleep+0x106>
 800d062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d064:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d066:	f04f 33ff 	mov.w	r3, #4294967295
 800d06a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d06c:	e004      	b.n	800d078 <_tx_thread_sleep+0x110>
 800d06e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d072:	64bb      	str	r3, [r7, #72]	; 0x48
 800d074:	2300      	movs	r3, #0
 800d076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d082:	605a      	str	r2, [r3, #4]
 800d084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d086:	2270      	movs	r2, #112	; 0x70
 800d088:	609a      	str	r2, [r3, #8]
 800d08a:	4b33      	ldr	r3, [pc, #204]	; (800d158 <_tx_thread_sleep+0x1f0>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d090:	60da      	str	r2, [r3, #12]
 800d092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	611a      	str	r2, [r3, #16]
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09e:	615a      	str	r2, [r3, #20]
 800d0a0:	f107 020c 	add.w	r2, r7, #12
 800d0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a6:	619a      	str	r2, [r3, #24]
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	61da      	str	r2, [r3, #28]
 800d0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b0:	3320      	adds	r3, #32
 800d0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0b4:	4b29      	ldr	r3, [pc, #164]	; (800d15c <_tx_thread_sleep+0x1f4>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d314      	bcc.n	800d0e8 <_tx_thread_sleep+0x180>
 800d0be:	4b28      	ldr	r3, [pc, #160]	; (800d160 <_tx_thread_sleep+0x1f8>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0c4:	4a22      	ldr	r2, [pc, #136]	; (800d150 <_tx_thread_sleep+0x1e8>)
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	4b26      	ldr	r3, [pc, #152]	; (800d164 <_tx_thread_sleep+0x1fc>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0d0:	621a      	str	r2, [r3, #32]
 800d0d2:	4b25      	ldr	r3, [pc, #148]	; (800d168 <_tx_thread_sleep+0x200>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00d      	beq.n	800d0f6 <_tx_thread_sleep+0x18e>
 800d0da:	4b23      	ldr	r3, [pc, #140]	; (800d168 <_tx_thread_sleep+0x200>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a21      	ldr	r2, [pc, #132]	; (800d164 <_tx_thread_sleep+0x1fc>)
 800d0e0:	6812      	ldr	r2, [r2, #0]
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	4798      	blx	r3
 800d0e6:	e006      	b.n	800d0f6 <_tx_thread_sleep+0x18e>
 800d0e8:	4a19      	ldr	r2, [pc, #100]	; (800d150 <_tx_thread_sleep+0x1e8>)
 800d0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	4b1d      	ldr	r3, [pc, #116]	; (800d164 <_tx_thread_sleep+0x1fc>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0f4:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f8:	2204      	movs	r2, #4
 800d0fa:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fe:	2201      	movs	r2, #1
 800d100:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d104:	2200      	movs	r2, #0
 800d106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d110:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <_tx_thread_sleep+0x1e4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	4a0d      	ldr	r2, [pc, #52]	; (800d14c <_tx_thread_sleep+0x1e4>)
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	f383 8810 	msr	PRIMASK, r3
}
 800d124:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d126:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d128:	f000 fa14 	bl	800d554 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d132:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d134:	68fb      	ldr	r3, [r7, #12]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3750      	adds	r7, #80	; 0x50
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20001684 	.word	0x20001684
 800d144:	2000000c 	.word	0x2000000c
 800d148:	200017cc 	.word	0x200017cc
 800d14c:	2000171c 	.word	0x2000171c
 800d150:	20001ca0 	.word	0x20001ca0
 800d154:	20001ca4 	.word	0x20001ca4
 800d158:	e0001004 	.word	0xe0001004
 800d15c:	20001c9c 	.word	0x20001c9c
 800d160:	20001c98 	.word	0x20001c98
 800d164:	20001c8c 	.word	0x20001c8c
 800d168:	20001ca8 	.word	0x20001ca8

0800d16c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b089      	sub	sp, #36	; 0x24
 800d170:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <_tx_thread_system_preempt_check+0x64>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d121      	bne.n	800d1c2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d17e:	4b15      	ldr	r3, [pc, #84]	; (800d1d4 <_tx_thread_system_preempt_check+0x68>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d184:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <_tx_thread_system_preempt_check+0x6c>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d18a:	69ba      	ldr	r2, [r7, #24]
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d017      	beq.n	800d1c2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d192:	4b12      	ldr	r3, [pc, #72]	; (800d1dc <_tx_thread_system_preempt_check+0x70>)
 800d194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d198:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d19a:	f3ef 8305 	mrs	r3, IPSR
 800d19e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d1a0:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10c      	bne.n	800d1c0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d1aa:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d1ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d1b0:	b662      	cpsie	i
}
 800d1b2:	bf00      	nop
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f383 8810 	msr	PRIMASK, r3
}
 800d1be:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d1c0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d1c2:	bf00      	nop
 800d1c4:	3724      	adds	r7, #36	; 0x24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	2000171c 	.word	0x2000171c
 800d1d4:	20001684 	.word	0x20001684
 800d1d8:	20001688 	.word	0x20001688
 800d1dc:	e000ed04 	.word	0xe000ed04

0800d1e0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b09e      	sub	sp, #120	; 0x78
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d1f0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d1f6:	b672      	cpsid	i
    return(int_posture);
 800d1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d1fa:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	334c      	adds	r3, #76	; 0x4c
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fdaf 	bl	800dd6c <_tx_timer_system_deactivate>
 800d20e:	e002      	b.n	800d216 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d216:	4b8b      	ldr	r3, [pc, #556]	; (800d444 <_tx_thread_system_resume+0x264>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d21c:	4b89      	ldr	r3, [pc, #548]	; (800d444 <_tx_thread_system_resume+0x264>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	663b      	str	r3, [r7, #96]	; 0x60
 800d222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d224:	2b00      	cmp	r3, #0
 800d226:	d06f      	beq.n	800d308 <_tx_thread_system_resume+0x128>
 800d228:	4b87      	ldr	r3, [pc, #540]	; (800d448 <_tx_thread_system_resume+0x268>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	d069      	beq.n	800d308 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d234:	f3ef 8305 	mrs	r3, IPSR
 800d238:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d23a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d23c:	4b83      	ldr	r3, [pc, #524]	; (800d44c <_tx_thread_system_resume+0x26c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4313      	orrs	r3, r2
 800d242:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d244:	4b82      	ldr	r3, [pc, #520]	; (800d450 <_tx_thread_system_resume+0x270>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10b      	bne.n	800d268 <_tx_thread_system_resume+0x88>
 800d250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	673b      	str	r3, [r7, #112]	; 0x70
 800d256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25a:	041a      	lsls	r2, r3, #16
 800d25c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d25e:	4313      	orrs	r3, r2
 800d260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d264:	673b      	str	r3, [r7, #112]	; 0x70
 800d266:	e00e      	b.n	800d286 <_tx_thread_system_resume+0xa6>
 800d268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d26a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d26e:	d205      	bcs.n	800d27c <_tx_thread_system_resume+0x9c>
 800d270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d272:	673b      	str	r3, [r7, #112]	; 0x70
 800d274:	f04f 33ff 	mov.w	r3, #4294967295
 800d278:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d27a:	e004      	b.n	800d286 <_tx_thread_system_resume+0xa6>
 800d27c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d280:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d282:	2300      	movs	r3, #0
 800d284:	673b      	str	r3, [r7, #112]	; 0x70
 800d286:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d28e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d290:	605a      	str	r2, [r3, #4]
 800d292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d294:	2201      	movs	r2, #1
 800d296:	609a      	str	r2, [r3, #8]
 800d298:	4b6e      	ldr	r3, [pc, #440]	; (800d454 <_tx_thread_system_resume+0x274>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d29e:	60da      	str	r2, [r3, #12]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2a4:	611a      	str	r2, [r3, #16]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2ac:	615a      	str	r2, [r3, #20]
 800d2ae:	f107 020c 	add.w	r2, r7, #12
 800d2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2b4:	619a      	str	r2, [r3, #24]
 800d2b6:	4b68      	ldr	r3, [pc, #416]	; (800d458 <_tx_thread_system_resume+0x278>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2be:	61da      	str	r2, [r3, #28]
 800d2c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2c2:	3320      	adds	r3, #32
 800d2c4:	663b      	str	r3, [r7, #96]	; 0x60
 800d2c6:	4b65      	ldr	r3, [pc, #404]	; (800d45c <_tx_thread_system_resume+0x27c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d314      	bcc.n	800d2fa <_tx_thread_system_resume+0x11a>
 800d2d0:	4b63      	ldr	r3, [pc, #396]	; (800d460 <_tx_thread_system_resume+0x280>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	663b      	str	r3, [r7, #96]	; 0x60
 800d2d6:	4a5b      	ldr	r2, [pc, #364]	; (800d444 <_tx_thread_system_resume+0x264>)
 800d2d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	4b61      	ldr	r3, [pc, #388]	; (800d464 <_tx_thread_system_resume+0x284>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2e2:	621a      	str	r2, [r3, #32]
 800d2e4:	4b60      	ldr	r3, [pc, #384]	; (800d468 <_tx_thread_system_resume+0x288>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00d      	beq.n	800d308 <_tx_thread_system_resume+0x128>
 800d2ec:	4b5e      	ldr	r3, [pc, #376]	; (800d468 <_tx_thread_system_resume+0x288>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a5c      	ldr	r2, [pc, #368]	; (800d464 <_tx_thread_system_resume+0x284>)
 800d2f2:	6812      	ldr	r2, [r2, #0]
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4798      	blx	r3
 800d2f8:	e006      	b.n	800d308 <_tx_thread_system_resume+0x128>
 800d2fa:	4a52      	ldr	r2, [pc, #328]	; (800d444 <_tx_thread_system_resume+0x264>)
 800d2fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	4b58      	ldr	r3, [pc, #352]	; (800d464 <_tx_thread_system_resume+0x284>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d306:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d314:	4b55      	ldr	r3, [pc, #340]	; (800d46c <_tx_thread_system_resume+0x28c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3b01      	subs	r3, #1
 800d31a:	4a54      	ldr	r2, [pc, #336]	; (800d46c <_tx_thread_system_resume+0x28c>)
 800d31c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d322:	2b00      	cmp	r3, #0
 800d324:	f040 80b3 	bne.w	800d48e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 80c7 	beq.w	800d4c0 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d336:	2b00      	cmp	r3, #0
 800d338:	f040 80a2 	bne.w	800d480 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d346:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d348:	4a49      	ldr	r2, [pc, #292]	; (800d470 <_tx_thread_system_resume+0x290>)
 800d34a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d350:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d354:	2b00      	cmp	r3, #0
 800d356:	d164      	bne.n	800d422 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d358:	4945      	ldr	r1, [pc, #276]	; (800d470 <_tx_thread_system_resume+0x290>)
 800d35a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d36e:	2201      	movs	r2, #1
 800d370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d372:	fa02 f303 	lsl.w	r3, r2, r3
 800d376:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d378:	4b3e      	ldr	r3, [pc, #248]	; (800d474 <_tx_thread_system_resume+0x294>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d37e:	4313      	orrs	r3, r2
 800d380:	4a3c      	ldr	r2, [pc, #240]	; (800d474 <_tx_thread_system_resume+0x294>)
 800d382:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d384:	4b3c      	ldr	r3, [pc, #240]	; (800d478 <_tx_thread_system_resume+0x298>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d38a:	429a      	cmp	r2, r3
 800d38c:	f080 8098 	bcs.w	800d4c0 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d390:	4a39      	ldr	r2, [pc, #228]	; (800d478 <_tx_thread_system_resume+0x298>)
 800d392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d394:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d396:	4b30      	ldr	r3, [pc, #192]	; (800d458 <_tx_thread_system_resume+0x278>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d103      	bne.n	800d3aa <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d3a2:	4a2d      	ldr	r2, [pc, #180]	; (800d458 <_tx_thread_system_resume+0x278>)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	e08a      	b.n	800d4c0 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f080 8085 	bcs.w	800d4c0 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d3b6:	4a28      	ldr	r2, [pc, #160]	; (800d458 <_tx_thread_system_resume+0x278>)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d009      	beq.n	800d3d6 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d104      	bne.n	800d3d6 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d3cc:	4b22      	ldr	r3, [pc, #136]	; (800d458 <_tx_thread_system_resume+0x278>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3d4:	61da      	str	r2, [r3, #28]
 800d3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	f383 8810 	msr	PRIMASK, r3
}
 800d3e0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d3e2:	4b22      	ldr	r3, [pc, #136]	; (800d46c <_tx_thread_system_resume+0x28c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f040 80a1 	bne.w	800d532 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d3f0:	4b22      	ldr	r3, [pc, #136]	; (800d47c <_tx_thread_system_resume+0x29c>)
 800d3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3f8:	f3ef 8305 	mrs	r3, IPSR
 800d3fc:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 8098 	bne.w	800d536 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d406:	f3ef 8310 	mrs	r3, PRIMASK
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d40e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d410:	b662      	cpsie	i
}
 800d412:	bf00      	nop
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	f383 8810 	msr	PRIMASK, r3
}
 800d41e:	bf00      	nop
}
 800d420:	e089      	b.n	800d536 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d438:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d43e:	621a      	str	r2, [r3, #32]
 800d440:	e03e      	b.n	800d4c0 <_tx_thread_system_resume+0x2e0>
 800d442:	bf00      	nop
 800d444:	20001ca0 	.word	0x20001ca0
 800d448:	20001ca4 	.word	0x20001ca4
 800d44c:	2000000c 	.word	0x2000000c
 800d450:	20001684 	.word	0x20001684
 800d454:	e0001004 	.word	0xe0001004
 800d458:	20001688 	.word	0x20001688
 800d45c:	20001c9c 	.word	0x20001c9c
 800d460:	20001c98 	.word	0x20001c98
 800d464:	20001c8c 	.word	0x20001c8c
 800d468:	20001ca8 	.word	0x20001ca8
 800d46c:	2000171c 	.word	0x2000171c
 800d470:	2000169c 	.word	0x2000169c
 800d474:	20001694 	.word	0x20001694
 800d478:	20001698 	.word	0x20001698
 800d47c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2203      	movs	r2, #3
 800d48a:	631a      	str	r2, [r3, #48]	; 0x30
 800d48c:	e018      	b.n	800d4c0 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	2b01      	cmp	r3, #1
 800d494:	d014      	beq.n	800d4c0 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d010      	beq.n	800d4c0 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	631a      	str	r2, [r3, #48]	; 0x30
 800d4b2:	e005      	b.n	800d4c0 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2203      	movs	r2, #3
 800d4be:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d009      	beq.n	800d4da <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d4c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d104      	bne.n	800d4da <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d4d0:	4b1c      	ldr	r3, [pc, #112]	; (800d544 <_tx_thread_system_resume+0x364>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d8:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d4da:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <_tx_thread_system_resume+0x368>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	647b      	str	r3, [r7, #68]	; 0x44
 800d4e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d4ec:	4b15      	ldr	r3, [pc, #84]	; (800d544 <_tx_thread_system_resume+0x364>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d022      	beq.n	800d53c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d4f6:	4b15      	ldr	r3, [pc, #84]	; (800d54c <_tx_thread_system_resume+0x36c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11c      	bne.n	800d53c <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <_tx_thread_system_resume+0x370>)
 800d504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d508:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d50a:	f3ef 8305 	mrs	r3, IPSR
 800d50e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d510:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d512:	2b00      	cmp	r3, #0
 800d514:	d111      	bne.n	800d53a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d516:	f3ef 8310 	mrs	r3, PRIMASK
 800d51a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d51c:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d51e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d520:	b662      	cpsie	i
}
 800d522:	bf00      	nop
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	f383 8810 	msr	PRIMASK, r3
}
 800d52e:	bf00      	nop
}
 800d530:	e003      	b.n	800d53a <_tx_thread_system_resume+0x35a>
                                return;
 800d532:	bf00      	nop
 800d534:	e002      	b.n	800d53c <_tx_thread_system_resume+0x35c>
 800d536:	bf00      	nop
 800d538:	e000      	b.n	800d53c <_tx_thread_system_resume+0x35c>
 800d53a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d53c:	3778      	adds	r7, #120	; 0x78
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20001688 	.word	0x20001688
 800d548:	20001684 	.word	0x20001684
 800d54c:	2000171c 	.word	0x2000171c
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b0a4      	sub	sp, #144	; 0x90
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d55c:	2300      	movs	r3, #0
 800d55e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d562:	4b98      	ldr	r3, [pc, #608]	; (800d7c4 <_tx_thread_system_suspend+0x270>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d56a:	f3ef 8310 	mrs	r3, PRIMASK
 800d56e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d572:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d574:	b672      	cpsid	i
    return(int_posture);
 800d576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d578:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d580:	429a      	cmp	r2, r3
 800d582:	d112      	bne.n	800d5aa <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d588:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d008      	beq.n	800d5a2 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d596:	d004      	beq.n	800d5a2 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	334c      	adds	r3, #76	; 0x4c
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 fb83 	bl	800dca8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	4a88      	ldr	r2, [pc, #544]	; (800d7c8 <_tx_thread_system_suspend+0x274>)
 800d5a8:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d5aa:	4b88      	ldr	r3, [pc, #544]	; (800d7cc <_tx_thread_system_suspend+0x278>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	4a86      	ldr	r2, [pc, #536]	; (800d7cc <_tx_thread_system_suspend+0x278>)
 800d5b2:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	f040 817d 	bne.w	800d8b8 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d5be:	4b84      	ldr	r3, [pc, #528]	; (800d7d0 <_tx_thread_system_suspend+0x27c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d5c4:	4b82      	ldr	r3, [pc, #520]	; (800d7d0 <_tx_thread_system_suspend+0x27c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	673b      	str	r3, [r7, #112]	; 0x70
 800d5ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d07c      	beq.n	800d6ca <_tx_thread_system_suspend+0x176>
 800d5d0:	4b80      	ldr	r3, [pc, #512]	; (800d7d4 <_tx_thread_system_suspend+0x280>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d076      	beq.n	800d6ca <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5dc:	f3ef 8305 	mrs	r3, IPSR
 800d5e0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5e4:	4b7c      	ldr	r3, [pc, #496]	; (800d7d8 <_tx_thread_system_suspend+0x284>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5ec:	4b75      	ldr	r3, [pc, #468]	; (800d7c4 <_tx_thread_system_suspend+0x270>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d110      	bne.n	800d61c <_tx_thread_system_suspend+0xc8>
 800d5fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d60a:	041a      	lsls	r2, r3, #16
 800d60c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d610:	4313      	orrs	r3, r2
 800d612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d61a:	e013      	b.n	800d644 <_tx_thread_system_suspend+0xf0>
 800d61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d61e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d622:	d208      	bcs.n	800d636 <_tx_thread_system_suspend+0xe2>
 800d624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d62c:	f04f 33ff 	mov.w	r3, #4294967295
 800d630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d634:	e006      	b.n	800d644 <_tx_thread_system_suspend+0xf0>
 800d636:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d63a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d63e:	2300      	movs	r3, #0
 800d640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d644:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d64e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d652:	605a      	str	r2, [r3, #4]
 800d654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d656:	2202      	movs	r2, #2
 800d658:	609a      	str	r2, [r3, #8]
 800d65a:	4b60      	ldr	r3, [pc, #384]	; (800d7dc <_tx_thread_system_suspend+0x288>)
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d660:	60da      	str	r2, [r3, #12]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d666:	611a      	str	r2, [r3, #16]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d66c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d66e:	615a      	str	r2, [r3, #20]
 800d670:	f107 0208 	add.w	r2, r7, #8
 800d674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d676:	619a      	str	r2, [r3, #24]
 800d678:	4b59      	ldr	r3, [pc, #356]	; (800d7e0 <_tx_thread_system_suspend+0x28c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d680:	61da      	str	r2, [r3, #28]
 800d682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d684:	3320      	adds	r3, #32
 800d686:	673b      	str	r3, [r7, #112]	; 0x70
 800d688:	4b56      	ldr	r3, [pc, #344]	; (800d7e4 <_tx_thread_system_suspend+0x290>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d68e:	429a      	cmp	r2, r3
 800d690:	d314      	bcc.n	800d6bc <_tx_thread_system_suspend+0x168>
 800d692:	4b55      	ldr	r3, [pc, #340]	; (800d7e8 <_tx_thread_system_suspend+0x294>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	673b      	str	r3, [r7, #112]	; 0x70
 800d698:	4a4d      	ldr	r2, [pc, #308]	; (800d7d0 <_tx_thread_system_suspend+0x27c>)
 800d69a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d69c:	6013      	str	r3, [r2, #0]
 800d69e:	4b53      	ldr	r3, [pc, #332]	; (800d7ec <_tx_thread_system_suspend+0x298>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d6a4:	621a      	str	r2, [r3, #32]
 800d6a6:	4b52      	ldr	r3, [pc, #328]	; (800d7f0 <_tx_thread_system_suspend+0x29c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00d      	beq.n	800d6ca <_tx_thread_system_suspend+0x176>
 800d6ae:	4b50      	ldr	r3, [pc, #320]	; (800d7f0 <_tx_thread_system_suspend+0x29c>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a4e      	ldr	r2, [pc, #312]	; (800d7ec <_tx_thread_system_suspend+0x298>)
 800d6b4:	6812      	ldr	r2, [r2, #0]
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4798      	blx	r3
 800d6ba:	e006      	b.n	800d6ca <_tx_thread_system_suspend+0x176>
 800d6bc:	4a44      	ldr	r2, [pc, #272]	; (800d7d0 <_tx_thread_system_suspend+0x27c>)
 800d6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6c0:	6013      	str	r3, [r2, #0]
 800d6c2:	4b4a      	ldr	r3, [pc, #296]	; (800d7ec <_tx_thread_system_suspend+0x298>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d6c8:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d6ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d6d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e2:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d6ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d016      	beq.n	800d720 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d6f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6fc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d702:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	4a3b      	ldr	r2, [pc, #236]	; (800d7f4 <_tx_thread_system_suspend+0x2a0>)
 800d708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	429a      	cmp	r2, r3
 800d710:	f040 8085 	bne.w	800d81e <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	4937      	ldr	r1, [pc, #220]	; (800d7f4 <_tx_thread_system_suspend+0x2a0>)
 800d718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d71e:	e07e      	b.n	800d81e <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4a34      	ldr	r2, [pc, #208]	; (800d7f4 <_tx_thread_system_suspend+0x2a0>)
 800d724:	2100      	movs	r1, #0
 800d726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2201      	movs	r2, #1
 800d72e:	fa02 f303 	lsl.w	r3, r2, r3
 800d732:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d734:	4b30      	ldr	r3, [pc, #192]	; (800d7f8 <_tx_thread_system_suspend+0x2a4>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d73a:	43db      	mvns	r3, r3
 800d73c:	4013      	ands	r3, r2
 800d73e:	4a2e      	ldr	r2, [pc, #184]	; (800d7f8 <_tx_thread_system_suspend+0x2a4>)
 800d740:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d742:	2300      	movs	r3, #0
 800d744:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d746:	4b2c      	ldr	r3, [pc, #176]	; (800d7f8 <_tx_thread_system_suspend+0x2a4>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d74c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d158      	bne.n	800d804 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d752:	4b2a      	ldr	r3, [pc, #168]	; (800d7fc <_tx_thread_system_suspend+0x2a8>)
 800d754:	2220      	movs	r2, #32
 800d756:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d758:	4b21      	ldr	r3, [pc, #132]	; (800d7e0 <_tx_thread_system_suspend+0x28c>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d760:	2b00      	cmp	r3, #0
 800d762:	d008      	beq.n	800d776 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d102      	bne.n	800d776 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d772:	2200      	movs	r2, #0
 800d774:	61da      	str	r2, [r3, #28]
 800d776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d778:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d77c:	f383 8810 	msr	PRIMASK, r3
}
 800d780:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d782:	4b12      	ldr	r3, [pc, #72]	; (800d7cc <_tx_thread_system_suspend+0x278>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f040 80bf 	bne.w	800d90e <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d790:	4b1b      	ldr	r3, [pc, #108]	; (800d800 <_tx_thread_system_suspend+0x2ac>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d798:	f3ef 8305 	mrs	r3, IPSR
 800d79c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10c      	bne.n	800d7be <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7a4:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d7ac:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7ae:	b662      	cpsie	i
}
 800d7b0:	bf00      	nop
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b8:	f383 8810 	msr	PRIMASK, r3
}
 800d7bc:	bf00      	nop
}
 800d7be:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d7c0:	e0a5      	b.n	800d90e <_tx_thread_system_suspend+0x3ba>
 800d7c2:	bf00      	nop
 800d7c4:	20001684 	.word	0x20001684
 800d7c8:	20001c88 	.word	0x20001c88
 800d7cc:	2000171c 	.word	0x2000171c
 800d7d0:	20001ca0 	.word	0x20001ca0
 800d7d4:	20001ca4 	.word	0x20001ca4
 800d7d8:	2000000c 	.word	0x2000000c
 800d7dc:	e0001004 	.word	0xe0001004
 800d7e0:	20001688 	.word	0x20001688
 800d7e4:	20001c9c 	.word	0x20001c9c
 800d7e8:	20001c98 	.word	0x20001c98
 800d7ec:	20001c8c 	.word	0x20001c8c
 800d7f0:	20001ca8 	.word	0x20001ca8
 800d7f4:	2000169c 	.word	0x2000169c
 800d7f8:	20001694 	.word	0x20001694
 800d7fc:	20001698 	.word	0x20001698
 800d800:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d806:	fa93 f3a3 	rbit	r3, r3
 800d80a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d80e:	fab3 f383 	clz	r3, r3
 800d812:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d818:	4413      	add	r3, r2
 800d81a:	4a41      	ldr	r2, [pc, #260]	; (800d920 <_tx_thread_system_suspend+0x3cc>)
 800d81c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d81e:	4b41      	ldr	r3, [pc, #260]	; (800d924 <_tx_thread_system_suspend+0x3d0>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	429a      	cmp	r2, r3
 800d826:	d139      	bne.n	800d89c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d828:	4b3d      	ldr	r3, [pc, #244]	; (800d920 <_tx_thread_system_suspend+0x3cc>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a3e      	ldr	r2, [pc, #248]	; (800d928 <_tx_thread_system_suspend+0x3d4>)
 800d82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d832:	4a3c      	ldr	r2, [pc, #240]	; (800d924 <_tx_thread_system_suspend+0x3d0>)
 800d834:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d844:	429a      	cmp	r2, r3
 800d846:	d104      	bne.n	800d852 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d848:	4b36      	ldr	r3, [pc, #216]	; (800d924 <_tx_thread_system_suspend+0x3d0>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	461a      	mov	r2, r3
 800d84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d850:	61da      	str	r2, [r3, #28]
 800d852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d854:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	f383 8810 	msr	PRIMASK, r3
}
 800d85c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d85e:	4b33      	ldr	r3, [pc, #204]	; (800d92c <_tx_thread_system_suspend+0x3d8>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d866:	2b00      	cmp	r3, #0
 800d868:	d153      	bne.n	800d912 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d86a:	4b31      	ldr	r3, [pc, #196]	; (800d930 <_tx_thread_system_suspend+0x3dc>)
 800d86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d870:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d872:	f3ef 8305 	mrs	r3, IPSR
 800d876:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10c      	bne.n	800d898 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d87e:	f3ef 8310 	mrs	r3, PRIMASK
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d886:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d888:	b662      	cpsie	i
}
 800d88a:	bf00      	nop
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	f383 8810 	msr	PRIMASK, r3
}
 800d896:	bf00      	nop
}
 800d898:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d89a:	e03a      	b.n	800d912 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d89c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d8a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d104      	bne.n	800d8b8 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d8ae:	4b1d      	ldr	r3, [pc, #116]	; (800d924 <_tx_thread_system_suspend+0x3d0>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8b6:	61da      	str	r2, [r3, #28]
 800d8b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f383 8810 	msr	PRIMASK, r3
}
 800d8c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d8c4:	4b17      	ldr	r3, [pc, #92]	; (800d924 <_tx_thread_system_suspend+0x3d0>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d022      	beq.n	800d916 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d8d0:	4b16      	ldr	r3, [pc, #88]	; (800d92c <_tx_thread_system_suspend+0x3d8>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d8d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d11c      	bne.n	800d916 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d8dc:	4b14      	ldr	r3, [pc, #80]	; (800d930 <_tx_thread_system_suspend+0x3dc>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8e4:	f3ef 8305 	mrs	r3, IPSR
 800d8e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d8ea:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10c      	bne.n	800d90a <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f4:	617b      	str	r3, [r7, #20]
    return(posture);
 800d8f6:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d8f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d8fa:	b662      	cpsie	i
}
 800d8fc:	bf00      	nop
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f383 8810 	msr	PRIMASK, r3
}
 800d908:	bf00      	nop
}
 800d90a:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d90c:	e003      	b.n	800d916 <_tx_thread_system_suspend+0x3c2>
                return;
 800d90e:	bf00      	nop
 800d910:	e002      	b.n	800d918 <_tx_thread_system_suspend+0x3c4>
            return;
 800d912:	bf00      	nop
 800d914:	e000      	b.n	800d918 <_tx_thread_system_suspend+0x3c4>
    return;
 800d916:	bf00      	nop
}
 800d918:	3790      	adds	r7, #144	; 0x90
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	20001698 	.word	0x20001698
 800d924:	20001688 	.word	0x20001688
 800d928:	2000169c 	.word	0x2000169c
 800d92c:	2000171c 	.word	0x2000171c
 800d930:	e000ed04 	.word	0xe000ed04

0800d934 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08e      	sub	sp, #56	; 0x38
 800d938:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d93a:	4b5f      	ldr	r3, [pc, #380]	; (800dab8 <_tx_thread_time_slice+0x184>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d940:	f3ef 8310 	mrs	r3, PRIMASK
 800d944:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d946:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d948:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d94a:	b672      	cpsid	i
    return(int_posture);
 800d94c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d94e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d950:	4b5a      	ldr	r3, [pc, #360]	; (800dabc <_tx_thread_time_slice+0x188>)
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d024      	beq.n	800d9a6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d960:	2b00      	cmp	r3, #0
 800d962:	d120      	bne.n	800d9a6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	69d2      	ldr	r2, [r2, #28]
 800d96a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	4a53      	ldr	r2, [pc, #332]	; (800dac0 <_tx_thread_time_slice+0x18c>)
 800d972:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a1a      	ldr	r2, [r3, #32]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d013      	beq.n	800d9a6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d986:	429a      	cmp	r2, r3
 800d988:	d10d      	bne.n	800d9a6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d990:	6a12      	ldr	r2, [r2, #32]
 800d992:	494c      	ldr	r1, [pc, #304]	; (800dac4 <_tx_thread_time_slice+0x190>)
 800d994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d998:	4b4b      	ldr	r3, [pc, #300]	; (800dac8 <_tx_thread_time_slice+0x194>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a49      	ldr	r2, [pc, #292]	; (800dac4 <_tx_thread_time_slice+0x190>)
 800d99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a2:	4a4a      	ldr	r2, [pc, #296]	; (800dacc <_tx_thread_time_slice+0x198>)
 800d9a4:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d9a6:	f3ef 8305 	mrs	r3, IPSR
 800d9aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d9ac:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d9ae:	4b48      	ldr	r3, [pc, #288]	; (800dad0 <_tx_thread_time_slice+0x19c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d9b6:	4b47      	ldr	r3, [pc, #284]	; (800dad4 <_tx_thread_time_slice+0x1a0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d9bc:	4b46      	ldr	r3, [pc, #280]	; (800dad8 <_tx_thread_time_slice+0x1a4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	623b      	str	r3, [r7, #32]
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d06d      	beq.n	800daa4 <_tx_thread_time_slice+0x170>
 800d9c8:	4b44      	ldr	r3, [pc, #272]	; (800dadc <_tx_thread_time_slice+0x1a8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d067      	beq.n	800daa4 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d9d4:	f3ef 8305 	mrs	r3, IPSR
 800d9d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	4b3c      	ldr	r3, [pc, #240]	; (800dad0 <_tx_thread_time_slice+0x19c>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	4b34      	ldr	r3, [pc, #208]	; (800dab8 <_tx_thread_time_slice+0x184>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	633b      	str	r3, [r7, #48]	; 0x30
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10b      	bne.n	800da08 <_tx_thread_time_slice+0xd4>
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	041a      	lsls	r2, r3, #16
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fe:	4313      	orrs	r3, r2
 800da00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da04:	637b      	str	r3, [r7, #52]	; 0x34
 800da06:	e00e      	b.n	800da26 <_tx_thread_time_slice+0xf2>
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800da0e:	d205      	bcs.n	800da1c <_tx_thread_time_slice+0xe8>
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	637b      	str	r3, [r7, #52]	; 0x34
 800da14:	f04f 33ff 	mov.w	r3, #4294967295
 800da18:	633b      	str	r3, [r7, #48]	; 0x30
 800da1a:	e004      	b.n	800da26 <_tx_thread_time_slice+0xf2>
 800da1c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800da20:	633b      	str	r3, [r7, #48]	; 0x30
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
 800da26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	6a3b      	ldr	r3, [r7, #32]
 800da2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da30:	605a      	str	r2, [r3, #4]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	2205      	movs	r2, #5
 800da36:	609a      	str	r2, [r3, #8]
 800da38:	4b29      	ldr	r3, [pc, #164]	; (800dae0 <_tx_thread_time_slice+0x1ac>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	60da      	str	r2, [r3, #12]
 800da40:	4b22      	ldr	r3, [pc, #136]	; (800dacc <_tx_thread_time_slice+0x198>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	611a      	str	r2, [r3, #16]
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4e:	615a      	str	r2, [r3, #20]
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da54:	619a      	str	r2, [r3, #24]
 800da56:	1d3a      	adds	r2, r7, #4
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	61da      	str	r2, [r3, #28]
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	3320      	adds	r3, #32
 800da60:	623b      	str	r3, [r7, #32]
 800da62:	4b20      	ldr	r3, [pc, #128]	; (800dae4 <_tx_thread_time_slice+0x1b0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6a3a      	ldr	r2, [r7, #32]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d314      	bcc.n	800da96 <_tx_thread_time_slice+0x162>
 800da6c:	4b1e      	ldr	r3, [pc, #120]	; (800dae8 <_tx_thread_time_slice+0x1b4>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	623b      	str	r3, [r7, #32]
 800da72:	4a19      	ldr	r2, [pc, #100]	; (800dad8 <_tx_thread_time_slice+0x1a4>)
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	4b1c      	ldr	r3, [pc, #112]	; (800daec <_tx_thread_time_slice+0x1b8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6a3a      	ldr	r2, [r7, #32]
 800da7e:	621a      	str	r2, [r3, #32]
 800da80:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <_tx_thread_time_slice+0x1bc>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00d      	beq.n	800daa4 <_tx_thread_time_slice+0x170>
 800da88:	4b19      	ldr	r3, [pc, #100]	; (800daf0 <_tx_thread_time_slice+0x1bc>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a17      	ldr	r2, [pc, #92]	; (800daec <_tx_thread_time_slice+0x1b8>)
 800da8e:	6812      	ldr	r2, [r2, #0]
 800da90:	4610      	mov	r0, r2
 800da92:	4798      	blx	r3
 800da94:	e006      	b.n	800daa4 <_tx_thread_time_slice+0x170>
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <_tx_thread_time_slice+0x1a4>)
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	4b13      	ldr	r3, [pc, #76]	; (800daec <_tx_thread_time_slice+0x1b8>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6a3a      	ldr	r2, [r7, #32]
 800daa2:	621a      	str	r2, [r3, #32]
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f383 8810 	msr	PRIMASK, r3
}
 800daae:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800dab0:	bf00      	nop
 800dab2:	3738      	adds	r7, #56	; 0x38
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20001684 	.word	0x20001684
 800dabc:	2000172c 	.word	0x2000172c
 800dac0:	20001c88 	.word	0x20001c88
 800dac4:	2000169c 	.word	0x2000169c
 800dac8:	20001698 	.word	0x20001698
 800dacc:	20001688 	.word	0x20001688
 800dad0:	2000000c 	.word	0x2000000c
 800dad4:	2000171c 	.word	0x2000171c
 800dad8:	20001ca0 	.word	0x20001ca0
 800dadc:	20001ca4 	.word	0x20001ca4
 800dae0:	e0001004 	.word	0xe0001004
 800dae4:	20001c9c 	.word	0x20001c9c
 800dae8:	20001c98 	.word	0x20001c98
 800daec:	20001c8c 	.word	0x20001c8c
 800daf0:	20001ca8 	.word	0x20001ca8

0800daf4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b08a      	sub	sp, #40	; 0x28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db00:	f3ef 8310 	mrs	r3, PRIMASK
 800db04:	617b      	str	r3, [r7, #20]
    return(posture);
 800db06:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800db08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db0a:	b672      	cpsid	i
    return(int_posture);
 800db0c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800db0e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db14:	2b04      	cmp	r3, #4
 800db16:	d10e      	bne.n	800db36 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800db18:	4b13      	ldr	r3, [pc, #76]	; (800db68 <_tx_thread_timeout+0x74>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	3301      	adds	r3, #1
 800db1e:	4a12      	ldr	r2, [pc, #72]	; (800db68 <_tx_thread_timeout+0x74>)
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f383 8810 	msr	PRIMASK, r3
}
 800db2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800db2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db30:	f7ff fb56 	bl	800d1e0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800db34:	e013      	b.n	800db5e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800db42:	61bb      	str	r3, [r7, #24]
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	f383 8810 	msr	PRIMASK, r3
}
 800db4e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	69b9      	ldr	r1, [r7, #24]
 800db5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db5c:	4798      	blx	r3
}
 800db5e:	bf00      	nop
 800db60:	3728      	adds	r7, #40	; 0x28
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	2000171c 	.word	0x2000171c

0800db6c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db72:	f3ef 8310 	mrs	r3, PRIMASK
 800db76:	607b      	str	r3, [r7, #4]
    return(posture);
 800db78:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800db7a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db7c:	b672      	cpsid	i
    return(int_posture);
 800db7e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800db80:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800db82:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <_tx_timer_expiration_process+0x3c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3301      	adds	r3, #1
 800db88:	4a07      	ldr	r2, [pc, #28]	; (800dba8 <_tx_timer_expiration_process+0x3c>)
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	f383 8810 	msr	PRIMASK, r3
}
 800db96:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800db98:	4804      	ldr	r0, [pc, #16]	; (800dbac <_tx_timer_expiration_process+0x40>)
 800db9a:	f7ff fb21 	bl	800d1e0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	2000171c 	.word	0x2000171c
 800dbac:	200017cc 	.word	0x200017cc

0800dbb0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800dbb0:	b590      	push	{r4, r7, lr}
 800dbb2:	b089      	sub	sp, #36	; 0x24
 800dbb4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800dbb6:	4b28      	ldr	r3, [pc, #160]	; (800dc58 <_tx_timer_initialize+0xa8>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800dbbc:	4b27      	ldr	r3, [pc, #156]	; (800dc5c <_tx_timer_initialize+0xac>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800dbc2:	4b27      	ldr	r3, [pc, #156]	; (800dc60 <_tx_timer_initialize+0xb0>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800dbc8:	4b26      	ldr	r3, [pc, #152]	; (800dc64 <_tx_timer_initialize+0xb4>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800dbce:	4b26      	ldr	r3, [pc, #152]	; (800dc68 <_tx_timer_initialize+0xb8>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800dbd4:	2280      	movs	r2, #128	; 0x80
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	4824      	ldr	r0, [pc, #144]	; (800dc6c <_tx_timer_initialize+0xbc>)
 800dbda:	f007 f961 	bl	8014ea0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800dbde:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <_tx_timer_initialize+0xc0>)
 800dbe0:	4a22      	ldr	r2, [pc, #136]	; (800dc6c <_tx_timer_initialize+0xbc>)
 800dbe2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dbe4:	4b23      	ldr	r3, [pc, #140]	; (800dc74 <_tx_timer_initialize+0xc4>)
 800dbe6:	4a21      	ldr	r2, [pc, #132]	; (800dc6c <_tx_timer_initialize+0xbc>)
 800dbe8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800dbea:	4b23      	ldr	r3, [pc, #140]	; (800dc78 <_tx_timer_initialize+0xc8>)
 800dbec:	4a23      	ldr	r2, [pc, #140]	; (800dc7c <_tx_timer_initialize+0xcc>)
 800dbee:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dbf0:	4b21      	ldr	r3, [pc, #132]	; (800dc78 <_tx_timer_initialize+0xc8>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	4a20      	ldr	r2, [pc, #128]	; (800dc78 <_tx_timer_initialize+0xc8>)
 800dbf8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800dbfa:	4b21      	ldr	r3, [pc, #132]	; (800dc80 <_tx_timer_initialize+0xd0>)
 800dbfc:	4a21      	ldr	r2, [pc, #132]	; (800dc84 <_tx_timer_initialize+0xd4>)
 800dbfe:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dc00:	4b21      	ldr	r3, [pc, #132]	; (800dc88 <_tx_timer_initialize+0xd8>)
 800dc02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc06:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dc08:	4b20      	ldr	r3, [pc, #128]	; (800dc8c <_tx_timer_initialize+0xdc>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800dc0e:	4b1c      	ldr	r3, [pc, #112]	; (800dc80 <_tx_timer_initialize+0xd0>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a1d      	ldr	r2, [pc, #116]	; (800dc88 <_tx_timer_initialize+0xd8>)
 800dc14:	6812      	ldr	r2, [r2, #0]
 800dc16:	491d      	ldr	r1, [pc, #116]	; (800dc8c <_tx_timer_initialize+0xdc>)
 800dc18:	6809      	ldr	r1, [r1, #0]
 800dc1a:	481c      	ldr	r0, [pc, #112]	; (800dc8c <_tx_timer_initialize+0xdc>)
 800dc1c:	6800      	ldr	r0, [r0, #0]
 800dc1e:	2400      	movs	r4, #0
 800dc20:	9405      	str	r4, [sp, #20]
 800dc22:	2400      	movs	r4, #0
 800dc24:	9404      	str	r4, [sp, #16]
 800dc26:	9003      	str	r0, [sp, #12]
 800dc28:	9102      	str	r1, [sp, #8]
 800dc2a:	9201      	str	r2, [sp, #4]
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	4b18      	ldr	r3, [pc, #96]	; (800dc90 <_tx_timer_initialize+0xe0>)
 800dc30:	4a18      	ldr	r2, [pc, #96]	; (800dc94 <_tx_timer_initialize+0xe4>)
 800dc32:	4919      	ldr	r1, [pc, #100]	; (800dc98 <_tx_timer_initialize+0xe8>)
 800dc34:	4819      	ldr	r0, [pc, #100]	; (800dc9c <_tx_timer_initialize+0xec>)
 800dc36:	f7fe ff8b 	bl	800cb50 <_tx_thread_create>
 800dc3a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e5      	bne.n	800dc0e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800dc42:	4b17      	ldr	r3, [pc, #92]	; (800dca0 <_tx_timer_initialize+0xf0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800dc48:	4b16      	ldr	r3, [pc, #88]	; (800dca4 <_tx_timer_initialize+0xf4>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800dc4e:	bf00      	nop
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd90      	pop	{r4, r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20001728 	.word	0x20001728
 800dc5c:	20001c88 	.word	0x20001c88
 800dc60:	2000172c 	.word	0x2000172c
 800dc64:	200017bc 	.word	0x200017bc
 800dc68:	200017c8 	.word	0x200017c8
 800dc6c:	20001730 	.word	0x20001730
 800dc70:	200017b0 	.word	0x200017b0
 800dc74:	200017b8 	.word	0x200017b8
 800dc78:	200017b4 	.word	0x200017b4
 800dc7c:	200017ac 	.word	0x200017ac
 800dc80:	2000187c 	.word	0x2000187c
 800dc84:	20001888 	.word	0x20001888
 800dc88:	20001880 	.word	0x20001880
 800dc8c:	20001884 	.word	0x20001884
 800dc90:	4154494d 	.word	0x4154494d
 800dc94:	0800dddd 	.word	0x0800dddd
 800dc98:	08015994 	.word	0x08015994
 800dc9c:	200017cc 	.word	0x200017cc
 800dca0:	200017c0 	.word	0x200017c0
 800dca4:	200017c4 	.word	0x200017c4

0800dca8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b089      	sub	sp, #36	; 0x24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d04a      	beq.n	800dd52 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc2:	d046      	beq.n	800dd52 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d142      	bne.n	800dd52 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d902      	bls.n	800dcd8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dcd2:	231f      	movs	r3, #31
 800dcd4:	61bb      	str	r3, [r7, #24]
 800dcd6:	e002      	b.n	800dcde <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dcde:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <_tx_timer_system_activate+0xb8>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dcea:	4b1e      	ldr	r3, [pc, #120]	; (800dd64 <_tx_timer_system_activate+0xbc>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d30b      	bcc.n	800dd0c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dcf4:	4b1b      	ldr	r3, [pc, #108]	; (800dd64 <_tx_timer_system_activate+0xbc>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	69fa      	ldr	r2, [r7, #28]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	109b      	asrs	r3, r3, #2
 800dcfe:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dd00:	4b19      	ldr	r3, [pc, #100]	; (800dd68 <_tx_timer_system_activate+0xc0>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d109      	bne.n	800dd28 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	e011      	b.n	800dd4c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dd52:	bf00      	nop
 800dd54:	3724      	adds	r7, #36	; 0x24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	200017b8 	.word	0x200017b8
 800dd64:	200017b4 	.word	0x200017b4
 800dd68:	200017b0 	.word	0x200017b0

0800dd6c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d026      	beq.n	800ddce <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d108      	bne.n	800dda0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d117      	bne.n	800ddc8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	e013      	b.n	800ddc8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d105      	bne.n	800ddc8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	619a      	str	r2, [r3, #24]
    }
}
 800ddce:	bf00      	nop
 800ddd0:	371c      	adds	r7, #28
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
	...

0800dddc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b098      	sub	sp, #96	; 0x60
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dde4:	2300      	movs	r3, #0
 800dde6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a73      	ldr	r2, [pc, #460]	; (800dfb8 <_tx_timer_thread_entry+0x1dc>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	f040 80de 	bne.w	800dfae <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddf6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ddf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddfc:	b672      	cpsid	i
    return(int_posture);
 800ddfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800de00:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800de02:	4b6e      	ldr	r3, [pc, #440]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d003      	beq.n	800de18 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f107 020c 	add.w	r2, r7, #12
 800de16:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800de18:	4b68      	ldr	r3, [pc, #416]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800de20:	4b66      	ldr	r3, [pc, #408]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3304      	adds	r3, #4
 800de26:	4a65      	ldr	r2, [pc, #404]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de28:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800de2a:	4b64      	ldr	r3, [pc, #400]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	4b64      	ldr	r3, [pc, #400]	; (800dfc0 <_tx_timer_thread_entry+0x1e4>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d103      	bne.n	800de3e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800de36:	4b63      	ldr	r3, [pc, #396]	; (800dfc4 <_tx_timer_thread_entry+0x1e8>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a60      	ldr	r2, [pc, #384]	; (800dfbc <_tx_timer_thread_entry+0x1e0>)
 800de3c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800de3e:	4b62      	ldr	r3, [pc, #392]	; (800dfc8 <_tx_timer_thread_entry+0x1ec>)
 800de40:	2200      	movs	r2, #0
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	f383 8810 	msr	PRIMASK, r3
}
 800de4e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de50:	f3ef 8310 	mrs	r3, PRIMASK
 800de54:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800de58:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800de5a:	b672      	cpsid	i
    return(int_posture);
 800de5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800de5e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800de60:	e07f      	b.n	800df62 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800de70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de74:	429a      	cmp	r2, r3
 800de76:	d102      	bne.n	800de7e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e00e      	b.n	800de9c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800de7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800de84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de88:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800de8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de8e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800de90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de92:	f107 020c 	add.w	r2, r7, #12
 800de96:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800de98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de9a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800de9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b20      	cmp	r3, #32
 800dea2:	d911      	bls.n	800dec8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800deac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deae:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800deb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb6:	f107 0208 	add.w	r2, r7, #8
 800deba:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800debc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dec0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec4:	60bb      	str	r3, [r7, #8]
 800dec6:	e01a      	b.n	800defe <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ded4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deda:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800dedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d009      	beq.n	800def8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee6:	f107 0208 	add.w	r2, r7, #8
 800deea:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800deec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800def2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def4:	60bb      	str	r3, [r7, #8]
 800def6:	e002      	b.n	800defe <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800def8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defa:	2200      	movs	r2, #0
 800defc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800defe:	4a33      	ldr	r2, [pc, #204]	; (800dfcc <_tx_timer_thread_entry+0x1f0>)
 800df00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df02:	6013      	str	r3, [r2, #0]
 800df04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df06:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	f383 8810 	msr	PRIMASK, r3
}
 800df0e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800df10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800df16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df1a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df1c:	f3ef 8310 	mrs	r3, PRIMASK
 800df20:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800df24:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800df26:	b672      	cpsid	i
    return(int_posture);
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800df2a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800df2c:	4b27      	ldr	r3, [pc, #156]	; (800dfcc <_tx_timer_thread_entry+0x1f0>)
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df36:	429a      	cmp	r2, r3
 800df38:	d105      	bne.n	800df46 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800df3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3c:	2200      	movs	r2, #0
 800df3e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800df40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df42:	f7ff feb1 	bl	800dca8 <_tx_timer_system_activate>
 800df46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	f383 8810 	msr	PRIMASK, r3
}
 800df50:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df52:	f3ef 8310 	mrs	r3, PRIMASK
 800df56:	623b      	str	r3, [r7, #32]
    return(posture);
 800df58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800df5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df5c:	b672      	cpsid	i
    return(int_posture);
 800df5e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800df60:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	f47f af7c 	bne.w	800de62 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800df6a:	4b17      	ldr	r3, [pc, #92]	; (800dfc8 <_tx_timer_thread_entry+0x1ec>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d116      	bne.n	800dfa0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800df72:	4b17      	ldr	r3, [pc, #92]	; (800dfd0 <_tx_timer_thread_entry+0x1f4>)
 800df74:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800df76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df78:	2203      	movs	r2, #3
 800df7a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800df7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df7e:	2201      	movs	r2, #1
 800df80:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800df82:	4b14      	ldr	r3, [pc, #80]	; (800dfd4 <_tx_timer_thread_entry+0x1f8>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3301      	adds	r3, #1
 800df88:	4a12      	ldr	r2, [pc, #72]	; (800dfd4 <_tx_timer_thread_entry+0x1f8>)
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f383 8810 	msr	PRIMASK, r3
}
 800df96:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800df98:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800df9a:	f7ff fadb 	bl	800d554 <_tx_thread_system_suspend>
 800df9e:	e728      	b.n	800ddf2 <_tx_timer_thread_entry+0x16>
 800dfa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f383 8810 	msr	PRIMASK, r3
}
 800dfaa:	bf00      	nop
            TX_DISABLE
 800dfac:	e721      	b.n	800ddf2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800dfae:	bf00      	nop
 800dfb0:	3760      	adds	r7, #96	; 0x60
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	4154494d 	.word	0x4154494d
 800dfbc:	200017b8 	.word	0x200017b8
 800dfc0:	200017b4 	.word	0x200017b4
 800dfc4:	200017b0 	.word	0x200017b0
 800dfc8:	200017bc 	.word	0x200017bc
 800dfcc:	200017c8 	.word	0x200017c8
 800dfd0:	200017cc 	.word	0x200017cc
 800dfd4:	2000171c 	.word	0x2000171c

0800dfd8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800dfdc:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <_tx_trace_initialize+0x34>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <_tx_trace_initialize+0x38>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800dfe8:	4b0a      	ldr	r3, [pc, #40]	; (800e014 <_tx_trace_initialize+0x3c>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800dfee:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <_tx_trace_initialize+0x40>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800dff4:	4b09      	ldr	r3, [pc, #36]	; (800e01c <_tx_trace_initialize+0x44>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800dffa:	4b09      	ldr	r3, [pc, #36]	; (800e020 <_tx_trace_initialize+0x48>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800e000:	bf00      	nop
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	20001c8c 	.word	0x20001c8c
 800e010:	20001c90 	.word	0x20001c90
 800e014:	20001c94 	.word	0x20001c94
 800e018:	20001c98 	.word	0x20001c98
 800e01c:	20001c9c 	.word	0x20001c9c
 800e020:	20001ca0 	.word	0x20001ca0

0800e024 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800e024:	b480      	push	{r7}
 800e026:	b08d      	sub	sp, #52	; 0x34
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60b9      	str	r1, [r7, #8]
 800e02c:	607a      	str	r2, [r7, #4]
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800e034:	4b6f      	ldr	r3, [pc, #444]	; (800e1f4 <_tx_trace_object_register+0x1d0>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 80d5 	beq.w	800e1e8 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800e03e:	4b6e      	ldr	r3, [pc, #440]	; (800e1f8 <_tx_trace_object_register+0x1d4>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800e044:	4b6d      	ldr	r3, [pc, #436]	; (800e1fc <_tx_trace_object_register+0x1d8>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 80cd 	beq.w	800e1e8 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800e056:	4b6a      	ldr	r3, [pc, #424]	; (800e200 <_tx_trace_object_register+0x1dc>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e05c:	4b65      	ldr	r3, [pc, #404]	; (800e1f4 <_tx_trace_object_register+0x1d0>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800e062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	461a      	mov	r2, r3
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4413      	add	r3, r2
 800e072:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d103      	bne.n	800e088 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e084:	2301      	movs	r3, #1
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	685a      	ldr	r2, [r3, #4]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d103      	bne.n	800e09a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e096:	2301      	movs	r3, #1
 800e098:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d02d      	beq.n	800e0fc <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d11a      	bne.n	800e0de <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800e0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d102      	bne.n	800e0b6 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0b4:	e013      	b.n	800e0de <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e0b6:	4b4f      	ldr	r3, [pc, #316]	; (800e1f4 <_tx_trace_object_register+0x1d0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0be:	4613      	mov	r3, r2
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	4413      	add	r3, r2
 800e0c4:	011b      	lsls	r3, r3, #4
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	785b      	ldrb	r3, [r3, #1]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800e0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d301      	bcc.n	800e0f0 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800e0f0:	4b43      	ldr	r3, [pc, #268]	; (800e200 <_tx_trace_object_register+0x1dc>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d1b0      	bne.n	800e05c <_tx_trace_object_register+0x38>
 800e0fa:	e000      	b.n	800e0fe <_tx_trace_object_register+0xda>
                    break;
 800e0fc:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800e0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	429a      	cmp	r2, r3
 800e104:	d270      	bcs.n	800e1e8 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800e106:	4b3d      	ldr	r3, [pc, #244]	; (800e1fc <_tx_trace_object_register+0x1d8>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	4a3b      	ldr	r2, [pc, #236]	; (800e1fc <_tx_trace_object_register+0x1d8>)
 800e10e:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	3301      	adds	r3, #1
 800e114:	6a3a      	ldr	r2, [r7, #32]
 800e116:	429a      	cmp	r2, r3
 800e118:	d904      	bls.n	800e124 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	3301      	adds	r3, #1
 800e11e:	4a38      	ldr	r2, [pc, #224]	; (800e200 <_tx_trace_object_register+0x1dc>)
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	e002      	b.n	800e12a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800e124:	4b36      	ldr	r3, [pc, #216]	; (800e200 <_tx_trace_object_register+0x1dc>)
 800e126:	2200      	movs	r2, #0
 800e128:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e12a:	4b32      	ldr	r3, [pc, #200]	; (800e1f4 <_tx_trace_object_register+0x1d0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	011b      	lsls	r3, r3, #4
 800e13a:	461a      	mov	r2, r3
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	4413      	add	r3, r2
 800e140:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	2200      	movs	r2, #0
 800e14a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	7bfa      	ldrb	r2, [r7, #15]
 800e150:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e162:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e164:	2300      	movs	r3, #0
 800e166:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e168:	e017      	b.n	800e19a <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e16e:	69fa      	ldr	r2, [r7, #28]
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	4413      	add	r3, r2
 800e174:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d012      	beq.n	800e1a2 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	7819      	ldrb	r1, [r3, #0]
 800e180:	69ba      	ldr	r2, [r7, #24]
 800e182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e184:	4413      	add	r3, r2
 800e186:	3310      	adds	r3, #16
 800e188:	460a      	mov	r2, r1
 800e18a:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d008      	beq.n	800e1a6 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	3301      	adds	r3, #1
 800e198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19c:	2b1e      	cmp	r3, #30
 800e19e:	d9e4      	bls.n	800e16a <_tx_trace_object_register+0x146>
 800e1a0:	e002      	b.n	800e1a8 <_tx_trace_object_register+0x184>
                        break;
 800e1a2:	bf00      	nop
 800e1a4:	e000      	b.n	800e1a8 <_tx_trace_object_register+0x184>
                    {
                        break;
 800e1a6:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e1a8:	69ba      	ldr	r2, [r7, #24]
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	4413      	add	r3, r2
 800e1ae:	3310      	adds	r3, #16
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d110      	bne.n	800e1dc <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c2:	0a1b      	lsrs	r3, r3, #8
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e1da:	e005      	b.n	800e1e8 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	70da      	strb	r2, [r3, #3]
}
 800e1e8:	bf00      	nop
 800e1ea:	3734      	adds	r7, #52	; 0x34
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	20001c90 	.word	0x20001c90
 800e1f8:	20001cac 	.word	0x20001cac
 800e1fc:	20001cb0 	.word	0x20001cb0
 800e200:	20001cb4 	.word	0x20001cb4

0800e204 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b092      	sub	sp, #72	; 0x48
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
 800e210:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e212:	2300      	movs	r3, #0
 800e214:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e21c:	2302      	movs	r3, #2
 800e21e:	647b      	str	r3, [r7, #68]	; 0x44
 800e220:	e075      	b.n	800e30e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e224:	2b34      	cmp	r3, #52	; 0x34
 800e226:	d002      	beq.n	800e22e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e228:	2302      	movs	r3, #2
 800e22a:	647b      	str	r3, [r7, #68]	; 0x44
 800e22c:	e06f      	b.n	800e30e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e22e:	f3ef 8310 	mrs	r3, PRIMASK
 800e232:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e238:	b672      	cpsid	i
    return(int_posture);
 800e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e23c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e23e:	4b3b      	ldr	r3, [pc, #236]	; (800e32c <_txe_byte_pool_create+0x128>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3301      	adds	r3, #1
 800e244:	4a39      	ldr	r2, [pc, #228]	; (800e32c <_txe_byte_pool_create+0x128>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	f383 8810 	msr	PRIMASK, r3
}
 800e252:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e254:	4b36      	ldr	r3, [pc, #216]	; (800e330 <_txe_byte_pool_create+0x12c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e25a:	2300      	movs	r3, #0
 800e25c:	643b      	str	r3, [r7, #64]	; 0x40
 800e25e:	e009      	b.n	800e274 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e264:	429a      	cmp	r2, r3
 800e266:	d00b      	beq.n	800e280 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e270:	3301      	adds	r3, #1
 800e272:	643b      	str	r3, [r7, #64]	; 0x40
 800e274:	4b2f      	ldr	r3, [pc, #188]	; (800e334 <_txe_byte_pool_create+0x130>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d3f0      	bcc.n	800e260 <_txe_byte_pool_create+0x5c>
 800e27e:	e000      	b.n	800e282 <_txe_byte_pool_create+0x7e>
                break;
 800e280:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e282:	f3ef 8310 	mrs	r3, PRIMASK
 800e286:	623b      	str	r3, [r7, #32]
    return(posture);
 800e288:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e28a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e28c:	b672      	cpsid	i
    return(int_posture);
 800e28e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e290:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e292:	4b26      	ldr	r3, [pc, #152]	; (800e32c <_txe_byte_pool_create+0x128>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	3b01      	subs	r3, #1
 800e298:	4a24      	ldr	r2, [pc, #144]	; (800e32c <_txe_byte_pool_create+0x128>)
 800e29a:	6013      	str	r3, [r2, #0]
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	f383 8810 	msr	PRIMASK, r3
}
 800e2a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e2a8:	f7fe ff60 	bl	800d16c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d102      	bne.n	800e2ba <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2b8:	e029      	b.n	800e30e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d102      	bne.n	800e2c6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c4:	e023      	b.n	800e30e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b63      	cmp	r3, #99	; 0x63
 800e2ca:	d802      	bhi.n	800e2d2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e2cc:	2305      	movs	r3, #5
 800e2ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e2d0:	e01d      	b.n	800e30e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e2d2:	4b19      	ldr	r3, [pc, #100]	; (800e338 <_txe_byte_pool_create+0x134>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2da:	4a18      	ldr	r2, [pc, #96]	; (800e33c <_txe_byte_pool_create+0x138>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d101      	bne.n	800e2e4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e2e0:	2313      	movs	r3, #19
 800e2e2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2e4:	f3ef 8305 	mrs	r3, IPSR
 800e2e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e2ea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2ec:	4b14      	ldr	r3, [pc, #80]	; (800e340 <_txe_byte_pool_create+0x13c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00b      	beq.n	800e30e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2f6:	f3ef 8305 	mrs	r3, IPSR
 800e2fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e2fc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e2fe:	4b10      	ldr	r3, [pc, #64]	; (800e340 <_txe_byte_pool_create+0x13c>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4313      	orrs	r3, r2
 800e304:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e308:	d201      	bcs.n	800e30e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e30a:	2313      	movs	r3, #19
 800e30c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f7fd f88a 	bl	800b434 <_tx_byte_pool_create>
 800e320:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e324:	4618      	mov	r0, r3
 800e326:	3748      	adds	r7, #72	; 0x48
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	2000171c 	.word	0x2000171c
 800e330:	20001674 	.word	0x20001674
 800e334:	20001678 	.word	0x20001678
 800e338:	20001684 	.word	0x20001684
 800e33c:	200017cc 	.word	0x200017cc
 800e340:	2000000c 	.word	0x2000000c

0800e344 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b094      	sub	sp, #80	; 0x50
 800e348:	af02      	add	r7, sp, #8
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
 800e350:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e352:	2300      	movs	r3, #0
 800e354:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e35c:	2309      	movs	r3, #9
 800e35e:	647b      	str	r3, [r7, #68]	; 0x44
 800e360:	e083      	b.n	800e46a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e364:	2b38      	cmp	r3, #56	; 0x38
 800e366:	d002      	beq.n	800e36e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e368:	2309      	movs	r3, #9
 800e36a:	647b      	str	r3, [r7, #68]	; 0x44
 800e36c:	e07d      	b.n	800e46a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e36e:	f3ef 8310 	mrs	r3, PRIMASK
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e376:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e378:	b672      	cpsid	i
    return(int_posture);
 800e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e37c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e37e:	4b43      	ldr	r3, [pc, #268]	; (800e48c <_txe_queue_create+0x148>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3301      	adds	r3, #1
 800e384:	4a41      	ldr	r2, [pc, #260]	; (800e48c <_txe_queue_create+0x148>)
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	f383 8810 	msr	PRIMASK, r3
}
 800e392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e394:	4b3e      	ldr	r3, [pc, #248]	; (800e490 <_txe_queue_create+0x14c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e39a:	2300      	movs	r3, #0
 800e39c:	643b      	str	r3, [r7, #64]	; 0x40
 800e39e:	e009      	b.n	800e3b4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d00b      	beq.n	800e3c0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b4:	4b37      	ldr	r3, [pc, #220]	; (800e494 <_txe_queue_create+0x150>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d3f0      	bcc.n	800e3a0 <_txe_queue_create+0x5c>
 800e3be:	e000      	b.n	800e3c2 <_txe_queue_create+0x7e>
                break;
 800e3c0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e3ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3cc:	b672      	cpsid	i
    return(int_posture);
 800e3ce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e3d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e3d2:	4b2e      	ldr	r3, [pc, #184]	; (800e48c <_txe_queue_create+0x148>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	4a2c      	ldr	r2, [pc, #176]	; (800e48c <_txe_queue_create+0x148>)
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e3e8:	f7fe fec0 	bl	800d16c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d102      	bne.n	800e3fa <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e3f4:	2309      	movs	r3, #9
 800e3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e3f8:	e037      	b.n	800e46a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d102      	bne.n	800e406 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e400:	2303      	movs	r3, #3
 800e402:	647b      	str	r3, [r7, #68]	; 0x44
 800e404:	e031      	b.n	800e46a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d102      	bne.n	800e412 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e40c:	2305      	movs	r3, #5
 800e40e:	647b      	str	r3, [r7, #68]	; 0x44
 800e410:	e02b      	b.n	800e46a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b10      	cmp	r3, #16
 800e416:	d902      	bls.n	800e41e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e418:	2305      	movs	r3, #5
 800e41a:	647b      	str	r3, [r7, #68]	; 0x44
 800e41c:	e025      	b.n	800e46a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e41e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e420:	089b      	lsrs	r3, r3, #2
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d902      	bls.n	800e42e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e428:	2305      	movs	r3, #5
 800e42a:	647b      	str	r3, [r7, #68]	; 0x44
 800e42c:	e01d      	b.n	800e46a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e42e:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <_txe_queue_create+0x154>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	4a19      	ldr	r2, [pc, #100]	; (800e49c <_txe_queue_create+0x158>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d101      	bne.n	800e440 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e43c:	2313      	movs	r3, #19
 800e43e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e440:	f3ef 8305 	mrs	r3, IPSR
 800e444:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e446:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e448:	4b15      	ldr	r3, [pc, #84]	; (800e4a0 <_txe_queue_create+0x15c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4313      	orrs	r3, r2
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00b      	beq.n	800e46a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e452:	f3ef 8305 	mrs	r3, IPSR
 800e456:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e458:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e45a:	4b11      	ldr	r3, [pc, #68]	; (800e4a0 <_txe_queue_create+0x15c>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4313      	orrs	r3, r2
 800e460:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e464:	d201      	bcs.n	800e46a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e466:	2313      	movs	r3, #19
 800e468:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d108      	bne.n	800e482 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f7fd f9f2 	bl	800b864 <_tx_queue_create>
 800e480:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e484:	4618      	mov	r0, r3
 800e486:	3748      	adds	r7, #72	; 0x48
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	2000171c 	.word	0x2000171c
 800e490:	20001654 	.word	0x20001654
 800e494:	20001658 	.word	0x20001658
 800e498:	20001684 	.word	0x20001684
 800e49c:	200017cc 	.word	0x200017cc
 800e4a0:	2000000c 	.word	0x2000000c

0800e4a4 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4b2:	2309      	movs	r3, #9
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	e00b      	b.n	800e4d0 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a07      	ldr	r2, [pc, #28]	; (800e4dc <_txe_queue_flush+0x38>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d002      	beq.n	800e4c8 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4c2:	2309      	movs	r3, #9
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	e003      	b.n	800e4d0 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7fd facb 	bl	800ba64 <_tx_queue_flush>
 800e4ce:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	51554555 	.word	0x51554555

0800e4e0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d102      	bne.n	800e4fc <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e4f6:	2309      	movs	r3, #9
 800e4f8:	61fb      	str	r3, [r7, #28]
 800e4fa:	e025      	b.n	800e548 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a18      	ldr	r2, [pc, #96]	; (800e564 <_txe_queue_receive+0x84>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d002      	beq.n	800e50c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e506:	2309      	movs	r3, #9
 800e508:	61fb      	str	r3, [r7, #28]
 800e50a:	e01d      	b.n	800e548 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e512:	2303      	movs	r3, #3
 800e514:	61fb      	str	r3, [r7, #28]
 800e516:	e017      	b.n	800e548 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d014      	beq.n	800e548 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e51e:	f3ef 8305 	mrs	r3, IPSR
 800e522:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e524:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e526:	4b10      	ldr	r3, [pc, #64]	; (800e568 <_txe_queue_receive+0x88>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e530:	2304      	movs	r3, #4
 800e532:	61fb      	str	r3, [r7, #28]
 800e534:	e008      	b.n	800e548 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e536:	4b0d      	ldr	r3, [pc, #52]	; (800e56c <_txe_queue_receive+0x8c>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	4a0c      	ldr	r2, [pc, #48]	; (800e570 <_txe_queue_receive+0x90>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d101      	bne.n	800e548 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e544:	2304      	movs	r3, #4
 800e546:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d105      	bne.n	800e55a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	68b9      	ldr	r1, [r7, #8]
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f7fd fb98 	bl	800bc88 <_tx_queue_receive>
 800e558:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e55a:	69fb      	ldr	r3, [r7, #28]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	51554555 	.word	0x51554555
 800e568:	2000000c 	.word	0x2000000c
 800e56c:	20001684 	.word	0x20001684
 800e570:	200017cc 	.word	0x200017cc

0800e574 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d102      	bne.n	800e590 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e58a:	2309      	movs	r3, #9
 800e58c:	61fb      	str	r3, [r7, #28]
 800e58e:	e025      	b.n	800e5dc <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a18      	ldr	r2, [pc, #96]	; (800e5f8 <_txe_queue_send+0x84>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d002      	beq.n	800e5a0 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e59a:	2309      	movs	r3, #9
 800e59c:	61fb      	str	r3, [r7, #28]
 800e59e:	e01d      	b.n	800e5dc <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d102      	bne.n	800e5ac <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e5a6:	2303      	movs	r3, #3
 800e5a8:	61fb      	str	r3, [r7, #28]
 800e5aa:	e017      	b.n	800e5dc <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d014      	beq.n	800e5dc <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5b2:	f3ef 8305 	mrs	r3, IPSR
 800e5b6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e5b8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e5ba:	4b10      	ldr	r3, [pc, #64]	; (800e5fc <_txe_queue_send+0x88>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e5c4:	2304      	movs	r3, #4
 800e5c6:	61fb      	str	r3, [r7, #28]
 800e5c8:	e008      	b.n	800e5dc <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	; (800e600 <_txe_queue_send+0x8c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	4a0c      	ldr	r2, [pc, #48]	; (800e604 <_txe_queue_send+0x90>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d101      	bne.n	800e5dc <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e5d8:	2304      	movs	r3, #4
 800e5da:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d105      	bne.n	800e5ee <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	68b9      	ldr	r1, [r7, #8]
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7fd fd9c 	bl	800c124 <_tx_queue_send>
 800e5ec:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e5ee:	69fb      	ldr	r3, [r7, #28]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3720      	adds	r7, #32
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	51554555 	.word	0x51554555
 800e5fc:	2000000c 	.word	0x2000000c
 800e600:	20001684 	.word	0x20001684
 800e604:	200017cc 	.word	0x200017cc

0800e608 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d102      	bne.n	800e61e <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e618:	230c      	movs	r3, #12
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e012      	b.n	800e644 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a0b      	ldr	r2, [pc, #44]	; (800e650 <_txe_semaphore_ceiling_put+0x48>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d002      	beq.n	800e62e <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e628:	230c      	movs	r3, #12
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e00a      	b.n	800e644 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d102      	bne.n	800e63a <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e634:	2322      	movs	r3, #34	; 0x22
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	e004      	b.n	800e644 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e63a:	6839      	ldr	r1, [r7, #0]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7fd ff23 	bl	800c488 <_tx_semaphore_ceiling_put>
 800e642:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	53454d41 	.word	0x53454d41

0800e654 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b092      	sub	sp, #72	; 0x48
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
 800e660:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e662:	2300      	movs	r3, #0
 800e664:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d102      	bne.n	800e672 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e66c:	230c      	movs	r3, #12
 800e66e:	647b      	str	r3, [r7, #68]	; 0x44
 800e670:	e054      	b.n	800e71c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	2b1c      	cmp	r3, #28
 800e676:	d002      	beq.n	800e67e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e678:	230c      	movs	r3, #12
 800e67a:	647b      	str	r3, [r7, #68]	; 0x44
 800e67c:	e04e      	b.n	800e71c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e67e:	f3ef 8310 	mrs	r3, PRIMASK
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e688:	b672      	cpsid	i
    return(int_posture);
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e68c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e68e:	4b36      	ldr	r3, [pc, #216]	; (800e768 <_txe_semaphore_create+0x114>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3301      	adds	r3, #1
 800e694:	4a34      	ldr	r2, [pc, #208]	; (800e768 <_txe_semaphore_create+0x114>)
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	f383 8810 	msr	PRIMASK, r3
}
 800e6a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e6a4:	4b31      	ldr	r3, [pc, #196]	; (800e76c <_txe_semaphore_create+0x118>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	643b      	str	r3, [r7, #64]	; 0x40
 800e6ae:	e009      	b.n	800e6c4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d00b      	beq.n	800e6d0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e6c4:	4b2a      	ldr	r3, [pc, #168]	; (800e770 <_txe_semaphore_create+0x11c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d3f0      	bcc.n	800e6b0 <_txe_semaphore_create+0x5c>
 800e6ce:	e000      	b.n	800e6d2 <_txe_semaphore_create+0x7e>
                break;
 800e6d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e6d6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e6da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6dc:	b672      	cpsid	i
    return(int_posture);
 800e6de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e6e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e6e2:	4b21      	ldr	r3, [pc, #132]	; (800e768 <_txe_semaphore_create+0x114>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	4a1f      	ldr	r2, [pc, #124]	; (800e768 <_txe_semaphore_create+0x114>)
 800e6ea:	6013      	str	r3, [r2, #0]
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	f383 8810 	msr	PRIMASK, r3
}
 800e6f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e6f8:	f7fe fd38 	bl	800d16c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e700:	429a      	cmp	r2, r3
 800e702:	d102      	bne.n	800e70a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e704:	230c      	movs	r3, #12
 800e706:	647b      	str	r3, [r7, #68]	; 0x44
 800e708:	e008      	b.n	800e71c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e70a:	4b1a      	ldr	r3, [pc, #104]	; (800e774 <_txe_semaphore_create+0x120>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	4a19      	ldr	r2, [pc, #100]	; (800e778 <_txe_semaphore_create+0x124>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d101      	bne.n	800e71c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e718:	2313      	movs	r3, #19
 800e71a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d114      	bne.n	800e74c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e722:	f3ef 8305 	mrs	r3, IPSR
 800e726:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e728:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e72a:	4b14      	ldr	r3, [pc, #80]	; (800e77c <_txe_semaphore_create+0x128>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4313      	orrs	r3, r2
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00b      	beq.n	800e74c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e734:	f3ef 8305 	mrs	r3, IPSR
 800e738:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e73a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e73c:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <_txe_semaphore_create+0x128>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4313      	orrs	r3, r2
 800e742:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e746:	d201      	bcs.n	800e74c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e748:	2313      	movs	r3, #19
 800e74a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f7fe f804 	bl	800c764 <_tx_semaphore_create>
 800e75c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e760:	4618      	mov	r0, r3
 800e762:	3748      	adds	r7, #72	; 0x48
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	2000171c 	.word	0x2000171c
 800e76c:	2000164c 	.word	0x2000164c
 800e770:	20001650 	.word	0x20001650
 800e774:	20001684 	.word	0x20001684
 800e778:	200017cc 	.word	0x200017cc
 800e77c:	2000000c 	.word	0x2000000c

0800e780 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d102      	bne.n	800e79a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e794:	230c      	movs	r3, #12
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	e01f      	b.n	800e7da <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a15      	ldr	r2, [pc, #84]	; (800e7f4 <_txe_semaphore_get+0x74>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d002      	beq.n	800e7aa <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e7a4:	230c      	movs	r3, #12
 800e7a6:	617b      	str	r3, [r7, #20]
 800e7a8:	e017      	b.n	800e7da <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d014      	beq.n	800e7da <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7b0:	f3ef 8305 	mrs	r3, IPSR
 800e7b4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e7b6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <_txe_semaphore_get+0x78>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d002      	beq.n	800e7c8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e7c2:	2304      	movs	r3, #4
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	e008      	b.n	800e7da <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e7c8:	4b0c      	ldr	r3, [pc, #48]	; (800e7fc <_txe_semaphore_get+0x7c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	4a0b      	ldr	r2, [pc, #44]	; (800e800 <_txe_semaphore_get+0x80>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d101      	bne.n	800e7da <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e7d6:	2304      	movs	r3, #4
 800e7d8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d104      	bne.n	800e7ea <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7fe f89e 	bl	800c924 <_tx_semaphore_get>
 800e7e8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e7ea:	697b      	ldr	r3, [r7, #20]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	53454d41 	.word	0x53454d41
 800e7f8:	2000000c 	.word	0x2000000c
 800e7fc:	20001684 	.word	0x20001684
 800e800:	200017cc 	.word	0x200017cc

0800e804 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b09a      	sub	sp, #104	; 0x68
 800e808:	af06      	add	r7, sp, #24
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e812:	2300      	movs	r3, #0
 800e814:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d102      	bne.n	800e822 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e81c:	230e      	movs	r3, #14
 800e81e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e820:	e0bb      	b.n	800e99a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e824:	2bb0      	cmp	r3, #176	; 0xb0
 800e826:	d002      	beq.n	800e82e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e828:	230e      	movs	r3, #14
 800e82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e82c:	e0b5      	b.n	800e99a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e82e:	f3ef 8310 	mrs	r3, PRIMASK
 800e832:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e836:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e838:	b672      	cpsid	i
    return(int_posture);
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e83c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e83e:	4b64      	ldr	r3, [pc, #400]	; (800e9d0 <_txe_thread_create+0x1cc>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3301      	adds	r3, #1
 800e844:	4a62      	ldr	r2, [pc, #392]	; (800e9d0 <_txe_thread_create+0x1cc>)
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	f383 8810 	msr	PRIMASK, r3
}
 800e852:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e854:	2300      	movs	r3, #0
 800e856:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e858:	4b5e      	ldr	r3, [pc, #376]	; (800e9d4 <_txe_thread_create+0x1d0>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e85e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e860:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e864:	3b01      	subs	r3, #1
 800e866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e868:	4413      	add	r3, r2
 800e86a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e870:	2300      	movs	r3, #0
 800e872:	647b      	str	r3, [r7, #68]	; 0x44
 800e874:	e02b      	b.n	800e8ce <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d101      	bne.n	800e882 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e87e:	2301      	movs	r3, #1
 800e880:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e884:	2b01      	cmp	r3, #1
 800e886:	d028      	beq.n	800e8da <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e88e:	429a      	cmp	r2, r3
 800e890:	d308      	bcc.n	800e8a4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e898:	429a      	cmp	r2, r3
 800e89a:	d203      	bcs.n	800e8a4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d308      	bcc.n	800e8c0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d203      	bcs.n	800e8c0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8c6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e8ce:	4b42      	ldr	r3, [pc, #264]	; (800e9d8 <_txe_thread_create+0x1d4>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d3ce      	bcc.n	800e876 <_txe_thread_create+0x72>
 800e8d8:	e000      	b.n	800e8dc <_txe_thread_create+0xd8>
                break;
 800e8da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800e8e0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e8e2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e8e4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8e6:	b672      	cpsid	i
    return(int_posture);
 800e8e8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e8ec:	4b38      	ldr	r3, [pc, #224]	; (800e9d0 <_txe_thread_create+0x1cc>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	4a37      	ldr	r2, [pc, #220]	; (800e9d0 <_txe_thread_create+0x1cc>)
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	f383 8810 	msr	PRIMASK, r3
}
 800e900:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e902:	f7fe fc33 	bl	800d16c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d102      	bne.n	800e914 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e90e:	230e      	movs	r3, #14
 800e910:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e912:	e042      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e916:	2b00      	cmp	r3, #0
 800e918:	d102      	bne.n	800e920 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e91a:	2303      	movs	r3, #3
 800e91c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e91e:	e03c      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d102      	bne.n	800e92c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e926:	2303      	movs	r3, #3
 800e928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e92a:	e036      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e92c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e92e:	2bc7      	cmp	r3, #199	; 0xc7
 800e930:	d802      	bhi.n	800e938 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e932:	2305      	movs	r3, #5
 800e934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e936:	e030      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e93a:	2b1f      	cmp	r3, #31
 800e93c:	d902      	bls.n	800e944 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e93e:	230f      	movs	r3, #15
 800e940:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e942:	e02a      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e944:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e948:	429a      	cmp	r2, r3
 800e94a:	d902      	bls.n	800e952 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e94c:	2318      	movs	r3, #24
 800e94e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e950:	e023      	b.n	800e99a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e954:	2b01      	cmp	r3, #1
 800e956:	d902      	bls.n	800e95e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e958:	2310      	movs	r3, #16
 800e95a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e95c:	e01d      	b.n	800e99a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e95e:	4b1f      	ldr	r3, [pc, #124]	; (800e9dc <_txe_thread_create+0x1d8>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e966:	4a1e      	ldr	r2, [pc, #120]	; (800e9e0 <_txe_thread_create+0x1dc>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d101      	bne.n	800e970 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e96c:	2313      	movs	r3, #19
 800e96e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e970:	f3ef 8305 	mrs	r3, IPSR
 800e974:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e976:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e978:	4b1a      	ldr	r3, [pc, #104]	; (800e9e4 <_txe_thread_create+0x1e0>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00b      	beq.n	800e99a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e982:	f3ef 8305 	mrs	r3, IPSR
 800e986:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e988:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e98a:	4b16      	ldr	r3, [pc, #88]	; (800e9e4 <_txe_thread_create+0x1e0>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4313      	orrs	r3, r2
 800e990:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e994:	d201      	bcs.n	800e99a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e996:	2313      	movs	r3, #19
 800e998:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d112      	bne.n	800e9c6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a2:	9305      	str	r3, [sp, #20]
 800e9a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9ae:	9302      	str	r3, [sp, #8]
 800e9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f7fe f8c6 	bl	800cb50 <_tx_thread_create>
 800e9c4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3750      	adds	r7, #80	; 0x50
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	2000171c 	.word	0x2000171c
 800e9d4:	2000168c 	.word	0x2000168c
 800e9d8:	20001690 	.word	0x20001690
 800e9dc:	20001684 	.word	0x20001684
 800e9e0:	200017cc 	.word	0x200017cc
 800e9e4:	2000000c 	.word	0x2000000c

0800e9e8 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e9f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e9f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9f8:	b672      	cpsid	i
    return(int_posture);
 800e9fa:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e9fc:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e9fe:	463b      	mov	r3, r7
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 f835 	bl	800ea70 <tx_timer_get_next>
 800ea06:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d103      	bne.n	800ea16 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f1 ff7d 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800ea16:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <tx_low_power_enter+0x4c>)
 800ea18:	2201      	movs	r2, #1
 800ea1a:	601a      	str	r2, [r3, #0]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f383 8810 	msr	PRIMASK, r3
}
 800ea26:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800ea28:	f7f1 ffa6 	bl	8000978 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800ea2c:	bf00      	nop
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20001cb8 	.word	0x20001cb8

0800ea38 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800ea3e:	4b0b      	ldr	r3, [pc, #44]	; (800ea6c <tx_low_power_exit+0x34>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00d      	beq.n	800ea62 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800ea46:	4b09      	ldr	r3, [pc, #36]	; (800ea6c <tx_low_power_exit+0x34>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800ea4c:	f7f1 ffa2 	bl	8000994 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800ea50:	f7f1 fffe 	bl	8000a50 <App_ThreadX_LowPower_Timer_Adjust>
 800ea54:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f86f 	bl	800eb40 <tx_time_increment>
        }
    }
}
 800ea62:	bf00      	nop
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20001cb8 	.word	0x20001cb8

0800ea70 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b08d      	sub	sp, #52	; 0x34
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800ea78:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea82:	617b      	str	r3, [r7, #20]
    return(posture);
 800ea84:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ea86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea88:	b672      	cpsid	i
    return(int_posture);
 800ea8a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800ea8c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800ea8e:	4b29      	ldr	r3, [pc, #164]	; (800eb34 <tx_timer_get_next+0xc4>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ea94:	2300      	movs	r3, #0
 800ea96:	627b      	str	r3, [r7, #36]	; 0x24
 800ea98:	e02f      	b.n	800eafa <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d01d      	beq.n	800eade <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d906      	bls.n	800eabe <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	4413      	add	r3, r2
 800eab8:	3b20      	subs	r3, #32
 800eaba:	623b      	str	r3, [r7, #32]
 800eabc:	e001      	b.n	800eac2 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d901      	bls.n	800eace <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800ead4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eada:	429a      	cmp	r2, r3
 800eadc:	d1e4      	bne.n	800eaa8 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	3304      	adds	r3, #4
 800eae2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800eae4:	4b14      	ldr	r3, [pc, #80]	; (800eb38 <tx_timer_get_next+0xc8>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d302      	bcc.n	800eaf4 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800eaee:	4b13      	ldr	r3, [pc, #76]	; (800eb3c <tx_timer_get_next+0xcc>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	627b      	str	r3, [r7, #36]	; 0x24
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	2b1f      	cmp	r3, #31
 800eafe:	d9cc      	bls.n	800ea9a <tx_timer_get_next+0x2a>
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f383 8810 	msr	PRIMASK, r3
}
 800eb0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb12:	d004      	beq.n	800eb1e <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	69fa      	ldr	r2, [r7, #28]
 800eb18:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e003      	b.n	800eb26 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800eb24:	2300      	movs	r3, #0
    }
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3734      	adds	r7, #52	; 0x34
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	200017b8 	.word	0x200017b8
 800eb38:	200017b4 	.word	0x200017b4
 800eb3c:	200017b0 	.word	0x200017b0

0800eb40 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08a      	sub	sp, #40	; 0x28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 809b 	beq.w	800ec86 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb50:	f3ef 8310 	mrs	r3, PRIMASK
 800eb54:	613b      	str	r3, [r7, #16]
    return(posture);
 800eb56:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800eb58:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb5a:	b672      	cpsid	i
    return(int_posture);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800eb5e:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800eb60:	4b4b      	ldr	r3, [pc, #300]	; (800ec90 <tx_time_increment+0x150>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4413      	add	r3, r2
 800eb68:	4a49      	ldr	r2, [pc, #292]	; (800ec90 <tx_time_increment+0x150>)
 800eb6a:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800eb6c:	4b49      	ldr	r3, [pc, #292]	; (800ec94 <tx_time_increment+0x154>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00e      	beq.n	800eb92 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800eb74:	4b47      	ldr	r3, [pc, #284]	; (800ec94 <tx_time_increment+0x154>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d206      	bcs.n	800eb8c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800eb7e:	4b45      	ldr	r3, [pc, #276]	; (800ec94 <tx_time_increment+0x154>)
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	4a43      	ldr	r2, [pc, #268]	; (800ec94 <tx_time_increment+0x154>)
 800eb88:	6013      	str	r3, [r2, #0]
 800eb8a:	e002      	b.n	800eb92 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800eb8c:	4b41      	ldr	r3, [pc, #260]	; (800ec94 <tx_time_increment+0x154>)
 800eb8e:	2201      	movs	r2, #1
 800eb90:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800eb92:	4b41      	ldr	r3, [pc, #260]	; (800ec98 <tx_time_increment+0x158>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
 800eba0:	e046      	b.n	800ec30 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d034      	beq.n	800ec14 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b20      	cmp	r3, #32
 800ebb6:	d908      	bls.n	800ebca <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbe:	4413      	add	r3, r2
 800ebc0:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	601a      	str	r2, [r3, #0]
 800ebc8:	e003      	b.n	800ebd2 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	69fa      	ldr	r2, [r7, #28]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d1e6      	bne.n	800ebb0 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800ebe2:	6a3b      	ldr	r3, [r7, #32]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	695b      	ldr	r3, [r3, #20]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d103      	bne.n	800ebfa <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	61bb      	str	r3, [r7, #24]
 800ebf8:	e009      	b.n	800ec0e <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	6a3a      	ldr	r2, [r7, #32]
 800ec00:	6812      	ldr	r2, [r2, #0]
 800ec02:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	695a      	ldr	r2, [r3, #20]
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	3304      	adds	r3, #4
 800ec18:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ec1a:	4b20      	ldr	r3, [pc, #128]	; (800ec9c <tx_time_increment+0x15c>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6a3a      	ldr	r2, [r7, #32]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d302      	bcc.n	800ec2a <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ec24:	4b1e      	ldr	r3, [pc, #120]	; (800eca0 <tx_time_increment+0x160>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	2b1f      	cmp	r3, #31
 800ec34:	d9b5      	bls.n	800eba2 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800ec36:	4b1a      	ldr	r3, [pc, #104]	; (800eca0 <tx_time_increment+0x160>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a17      	ldr	r2, [pc, #92]	; (800ec98 <tx_time_increment+0x158>)
 800ec3c:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800ec3e:	e019      	b.n	800ec74 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d206      	bcs.n	800ec62 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	1ad2      	subs	r2, r2, r3
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	e002      	b.n	800ec68 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	2201      	movs	r2, #1
 800ec66:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800ec6e:	69f8      	ldr	r0, [r7, #28]
 800ec70:	f7ff f81a 	bl	800dca8 <_tx_timer_system_activate>
    while (temp_list_head)
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1e2      	bne.n	800ec40 <tx_time_increment+0x100>
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f383 8810 	msr	PRIMASK, r3
}
 800ec84:	e000      	b.n	800ec88 <tx_time_increment+0x148>
        return;
 800ec86:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ec88:	3728      	adds	r7, #40	; 0x28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	20001728 	.word	0x20001728
 800ec94:	20001c88 	.word	0x20001c88
 800ec98:	200017b8 	.word	0x200017b8
 800ec9c:	200017b4 	.word	0x200017b4
 800eca0:	200017b0 	.word	0x200017b0

0800eca4 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af02      	add	r7, sp, #8
    int date_int = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ecae:	f000 f845 	bl	800ed3c <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800ecb2:	4b0d      	ldr	r3, [pc, #52]	; (800ece8 <fm_calendar_format_date+0x44>)
 800ecb4:	789b      	ldrb	r3, [r3, #2]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	4b0b      	ldr	r3, [pc, #44]	; (800ece8 <fm_calendar_format_date+0x44>)
 800ecba:	785b      	ldrb	r3, [r3, #1]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4b0a      	ldr	r3, [pc, #40]	; (800ece8 <fm_calendar_format_date+0x44>)
 800ecc0:	78db      	ldrb	r3, [r3, #3]
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4908      	ldr	r1, [pc, #32]	; (800ecec <fm_calendar_format_date+0x48>)
 800ecca:	f006 f925 	bl	8014f18 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800ecce:	463b      	mov	r3, r7
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f006 f8b7 	bl	8014e44 <atoi>
 800ecd6:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800ecd8:	6978      	ldr	r0, [r7, #20]
 800ecda:	f000 fa4f 	bl	800f17c <fm_factory_modify_fp_date>
}
 800ecde:	bf00      	nop
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20001cd0 	.word	0x20001cd0
 800ecec:	080159a8 	.word	0x080159a8

0800ecf0 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b088      	sub	sp, #32
 800ecf4:	af02      	add	r7, sp, #8
    int time_int = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ecfa:	f000 f81f 	bl	800ed3c <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <fm_calendar_format_time+0x44>)
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	4b0b      	ldr	r3, [pc, #44]	; (800ed34 <fm_calendar_format_time+0x44>)
 800ed06:	785b      	ldrb	r3, [r3, #1]
 800ed08:	4619      	mov	r1, r3
    sTime.Seconds);
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <fm_calendar_format_time+0x44>)
 800ed0c:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ed0e:	4638      	mov	r0, r7
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	460b      	mov	r3, r1
 800ed14:	4908      	ldr	r1, [pc, #32]	; (800ed38 <fm_calendar_format_time+0x48>)
 800ed16:	f006 f8ff 	bl	8014f18 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f006 f891 	bl	8014e44 <atoi>
 800ed22:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ed24:	6978      	ldr	r0, [r7, #20]
 800ed26:	f000 fa39 	bl	800f19c <fm_factory_modify_fp_time>
}
 800ed2a:	bf00      	nop
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	20001cbc 	.word	0x20001cbc
 800ed38:	080159b8 	.word	0x080159b8

0800ed3c <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ed40:	2200      	movs	r2, #0
 800ed42:	4905      	ldr	r1, [pc, #20]	; (800ed58 <fm_calendar_get+0x1c>)
 800ed44:	4805      	ldr	r0, [pc, #20]	; (800ed5c <fm_calendar_get+0x20>)
 800ed46:	f7fa fa3b 	bl	80091c0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4904      	ldr	r1, [pc, #16]	; (800ed60 <fm_calendar_get+0x24>)
 800ed4e:	4803      	ldr	r0, [pc, #12]	; (800ed5c <fm_calendar_get+0x20>)
 800ed50:	f7fa fb2e 	bl	80093b0 <HAL_RTC_GetDate>
}
 800ed54:	bf00      	nop
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20001cbc 	.word	0x20001cbc
 800ed5c:	200014a4 	.word	0x200014a4
 800ed60:	20001cd0 	.word	0x20001cd0

0800ed64 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed68:	f7ff ffe8 	bl	800ed3c <fm_calendar_get>
    return (sDate.Date);
 800ed6c:	4b01      	ldr	r3, [pc, #4]	; (800ed74 <fm_calendar_get_day+0x10>)
 800ed6e:	789b      	ldrb	r3, [r3, #2]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20001cd0 	.word	0x20001cd0

0800ed78 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed7c:	f7ff ffde 	bl	800ed3c <fm_calendar_get>
    return (sTime.Hours);
 800ed80:	4b01      	ldr	r3, [pc, #4]	; (800ed88 <fm_calendar_get_hour+0x10>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	20001cbc 	.word	0x20001cbc

0800ed8c <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ed90:	f7ff ffd4 	bl	800ed3c <fm_calendar_get>
    return (sTime.Minutes);
 800ed94:	4b01      	ldr	r3, [pc, #4]	; (800ed9c <fm_calendar_get_minute+0x10>)
 800ed96:	785b      	ldrb	r3, [r3, #1]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	20001cbc 	.word	0x20001cbc

0800eda0 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leido del calendario.
 */
int fm_calendar_get_month()
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800eda4:	f7ff ffca 	bl	800ed3c <fm_calendar_get>
    return (sDate.Month);
 800eda8:	4b01      	ldr	r3, [pc, #4]	; (800edb0 <fm_calendar_get_month+0x10>)
 800edaa:	785b      	ldrb	r3, [r3, #1]
}
 800edac:	4618      	mov	r0, r3
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	20001cd0 	.word	0x20001cd0

0800edb4 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800edb8:	f7ff ffc0 	bl	800ed3c <fm_calendar_get>
    return (sTime.Seconds);
 800edbc:	4b01      	ldr	r3, [pc, #4]	; (800edc4 <fm_calendar_get_second+0x10>)
 800edbe:	789b      	ldrb	r3, [r3, #2]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	20001cbc 	.word	0x20001cbc

0800edc8 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800edcc:	f7ff ffb6 	bl	800ed3c <fm_calendar_get>
    return (sDate.Year);
 800edd0:	4b01      	ldr	r3, [pc, #4]	; (800edd8 <fm_calendar_get_year+0x10>)
 800edd2:	78db      	ldrb	r3, [r3, #3]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20001cd0 	.word	0x20001cd0

0800eddc <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800ede8:	2302      	movs	r3, #2
 800edea:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800edec:	e008      	b.n	800ee00 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	230a      	movs	r3, #10
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	4806      	ldr	r0, [pc, #24]	; (800ee10 <fm_debug_msg_uart+0x34>)
 800edf8:	f7fb fdc0 	bl	800a97c <HAL_UART_Transmit>
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d0f3      	beq.n	800edee <fm_debug_msg_uart+0x12>
    }

}
 800ee06:	bf00      	nop
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	20001564 	.word	0x20001564

0800ee14 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800ee14:	b4b0      	push	{r4, r5, r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a07      	ldr	r2, [pc, #28]	; (800ee3c <fm_factory_get_acm+0x28>)
 800ee20:	461c      	mov	r4, r3
 800ee22:	4615      	mov	r5, r2
 800ee24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ee2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bcb0      	pop	{r4, r5, r7}
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	20000030 	.word	0x20000030

0800ee40 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800ee40:	b4b0      	push	{r4, r5, r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
    return (date_time_config);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a07      	ldr	r2, [pc, #28]	; (800ee68 <fm_factory_get_date_time+0x28>)
 800ee4c:	461c      	mov	r4, r3
 800ee4e:	4615      	mov	r5, r2
 800ee50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee58:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bcb0      	pop	{r4, r5, r7}
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	2000007c 	.word	0x2000007c

0800ee6c <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
    return (date_user);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a05      	ldr	r2, [pc, #20]	; (800ee8c <fm_factory_get_fp_date+0x20>)
 800ee78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee7c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	20000104 	.word	0x20000104

0800ee90 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
    return (date_config);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a05      	ldr	r2, [pc, #20]	; (800eeb0 <fm_factory_get_fp_date_conf+0x20>)
 800ee9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eea0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	20000114 	.word	0x20000114

0800eeb4 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
    return (time_user);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a05      	ldr	r2, [pc, #20]	; (800eed4 <fm_factory_get_fp_time+0x20>)
 800eec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eec4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	200000fc 	.word	0x200000fc

0800eed8 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
    return (time_config);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a05      	ldr	r2, [pc, #20]	; (800eef8 <fm_factory_get_fp_time_conf+0x20>)
 800eee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eee8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	2000010c 	.word	0x2000010c

0800eefc <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if (k_sel == K_LIN_1)
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d106      	bne.n	800ef1c <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800ef0e:	4b1d      	ldr	r3, [pc, #116]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef10:	4a1d      	ldr	r2, [pc, #116]	; (800ef88 <fm_factory_get_frec_lin+0x8c>)
 800ef12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef16:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef1a:	e026      	b.n	800ef6a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_2)
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d106      	bne.n	800ef30 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ef22:	4b18      	ldr	r3, [pc, #96]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef24:	4a19      	ldr	r2, [pc, #100]	; (800ef8c <fm_factory_get_frec_lin+0x90>)
 800ef26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef2e:	e01c      	b.n	800ef6a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_3)
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d106      	bne.n	800ef44 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ef36:	4b13      	ldr	r3, [pc, #76]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef38:	4a15      	ldr	r2, [pc, #84]	; (800ef90 <fm_factory_get_frec_lin+0x94>)
 800ef3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef3e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef42:	e012      	b.n	800ef6a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_4)
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	2b04      	cmp	r3, #4
 800ef48:	d106      	bne.n	800ef58 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800ef4a:	4b0e      	ldr	r3, [pc, #56]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef4c:	4a11      	ldr	r2, [pc, #68]	; (800ef94 <fm_factory_get_frec_lin+0x98>)
 800ef4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef52:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef56:	e008      	b.n	800ef6a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_5)
 800ef58:	78fb      	ldrb	r3, [r7, #3]
 800ef5a:	2b05      	cmp	r3, #5
 800ef5c:	d105      	bne.n	800ef6a <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800ef5e:	4b09      	ldr	r3, [pc, #36]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef60:	4a0d      	ldr	r2, [pc, #52]	; (800ef98 <fm_factory_get_frec_lin+0x9c>)
 800ef62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef66:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a05      	ldr	r2, [pc, #20]	; (800ef84 <fm_factory_get_frec_lin+0x88>)
 800ef6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef72:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	20001cec 	.word	0x20001cec
 800ef88:	200000a4 	.word	0x200000a4
 800ef8c:	200000ac 	.word	0x200000ac
 800ef90:	200000b4 	.word	0x200000b4
 800ef94:	200000bc 	.word	0x200000bc
 800ef98:	200000c4 	.word	0x200000c4

0800ef9c <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if (k_sel == K_FACTOR)
 800efa8:	78fb      	ldrb	r3, [r7, #3]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800efae:	4b22      	ldr	r3, [pc, #136]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800efb0:	4a22      	ldr	r2, [pc, #136]	; (800f03c <fm_factory_get_k_factor+0xa0>)
 800efb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efb6:	e883 0003 	stmia.w	r3, {r0, r1}
 800efba:	e030      	b.n	800f01e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_1)
 800efbc:	78fb      	ldrb	r3, [r7, #3]
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d106      	bne.n	800efd0 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800efc2:	4b1d      	ldr	r3, [pc, #116]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800efc4:	4a1e      	ldr	r2, [pc, #120]	; (800f040 <fm_factory_get_k_factor+0xa4>)
 800efc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efca:	e883 0003 	stmia.w	r3, {r0, r1}
 800efce:	e026      	b.n	800f01e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_2)
 800efd0:	78fb      	ldrb	r3, [r7, #3]
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d106      	bne.n	800efe4 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800efd6:	4b18      	ldr	r3, [pc, #96]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800efd8:	4a1a      	ldr	r2, [pc, #104]	; (800f044 <fm_factory_get_k_factor+0xa8>)
 800efda:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efde:	e883 0003 	stmia.w	r3, {r0, r1}
 800efe2:	e01c      	b.n	800f01e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_3)
 800efe4:	78fb      	ldrb	r3, [r7, #3]
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d106      	bne.n	800eff8 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800efea:	4b13      	ldr	r3, [pc, #76]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800efec:	4a16      	ldr	r2, [pc, #88]	; (800f048 <fm_factory_get_k_factor+0xac>)
 800efee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eff2:	e883 0003 	stmia.w	r3, {r0, r1}
 800eff6:	e012      	b.n	800f01e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_4)
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	2b04      	cmp	r3, #4
 800effc:	d106      	bne.n	800f00c <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800effe:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800f000:	4a12      	ldr	r2, [pc, #72]	; (800f04c <fm_factory_get_k_factor+0xb0>)
 800f002:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f006:	e883 0003 	stmia.w	r3, {r0, r1}
 800f00a:	e008      	b.n	800f01e <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_5)
 800f00c:	78fb      	ldrb	r3, [r7, #3]
 800f00e:	2b05      	cmp	r3, #5
 800f010:	d105      	bne.n	800f01e <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800f012:	4b09      	ldr	r3, [pc, #36]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800f014:	4a0e      	ldr	r2, [pc, #56]	; (800f050 <fm_factory_get_k_factor+0xb4>)
 800f016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f01a:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4a05      	ldr	r2, [pc, #20]	; (800f038 <fm_factory_get_k_factor+0x9c>)
 800f022:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f026:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	20001cf4 	.word	0x20001cf4
 800f03c:	200000f4 	.word	0x200000f4
 800f040:	200000cc 	.word	0x200000cc
 800f044:	200000d4 	.word	0x200000d4
 800f048:	200000dc 	.word	0x200000dc
 800f04c:	200000e4 	.word	0x200000e4
 800f050:	200000ec 	.word	0x200000ec

0800f054 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800f054:	b4b0      	push	{r4, r5, r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a07      	ldr	r2, [pc, #28]	; (800f07c <fm_factory_get_rate+0x28>)
 800f060:	461c      	mov	r4, r3
 800f062:	4615      	mov	r5, r2
 800f064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f068:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f06c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	bcb0      	pop	{r4, r5, r7}
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	20000050 	.word	0x20000050

0800f080 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a05      	ldr	r2, [pc, #20]	; (800f0a0 <fm_factory_get_temp+0x20>)
 800f08c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f08e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	20000070 	.word	0x20000070

0800f0a4 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800f0a4:	b4b0      	push	{r4, r5, r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a07      	ldr	r2, [pc, #28]	; (800f0cc <fm_factory_get_ttl+0x28>)
 800f0b0:	461c      	mov	r4, r3
 800f0b2:	4615      	mov	r5, r2
 800f0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f0bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bcb0      	pop	{r4, r5, r7}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	20000010 	.word	0x20000010

0800f0d0 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a05      	ldr	r2, [pc, #20]	; (800f0f0 <fm_factory_get_units_tim+0x20>)
 800f0dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	20000094 	.word	0x20000094

0800f0f4 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a05      	ldr	r2, [pc, #20]	; (800f114 <fm_factory_get_units_vol+0x20>)
 800f100:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f104:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	2000009c 	.word	0x2000009c

0800f118 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
    static const int century = 2000;
    static const int day_mult = 1000000;
    static const int month_mult = 10000;

    date_time_config.day = mod_day;
 800f124:	4a10      	ldr	r2, [pc, #64]	; (800f168 <fm_factory_modify_date+0x50>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f12a:	4a0f      	ldr	r2, [pc, #60]	; (800f168 <fm_factory_modify_date+0x50>)
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f130:	4a0d      	ldr	r2, [pc, #52]	; (800f168 <fm_factory_modify_date+0x50>)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f136:	4b0d      	ldr	r3, [pc, #52]	; (800f16c <fm_factory_modify_date+0x54>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	fb03 f202 	mul.w	r2, r3, r2
 800f140:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <fm_factory_modify_date+0x58>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68b9      	ldr	r1, [r7, #8]
 800f146:	fb01 f303 	mul.w	r3, r1, r3
 800f14a:	441a      	add	r2, r3
 800f14c:	4b09      	ldr	r3, [pc, #36]	; (800f174 <fm_factory_modify_date+0x5c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	441a      	add	r2, r3
    + mod_year;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4413      	add	r3, r2
 800f156:	461a      	mov	r2, r3
    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f158:	4b07      	ldr	r3, [pc, #28]	; (800f178 <fm_factory_modify_date+0x60>)
 800f15a:	601a      	str	r2, [r3, #0]
}
 800f15c:	bf00      	nop
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	2000007c 	.word	0x2000007c
 800f16c:	08015cbc 	.word	0x08015cbc
 800f170:	08015cc0 	.word	0x08015cc0
 800f174:	08015cc4 	.word	0x08015cc4
 800f178:	20000114 	.word	0x20000114

0800f17c <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a04      	ldr	r2, [pc, #16]	; (800f198 <fm_factory_modify_fp_date+0x1c>)
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	20000104 	.word	0x20000104

0800f19c <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a04      	ldr	r2, [pc, #16]	; (800f1b8 <fm_factory_modify_fp_time+0x1c>)
 800f1a8:	6013      	str	r3, [r2, #0]
}
 800f1aa:	bf00      	nop
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	200000fc 	.word	0x200000fc

0800f1bc <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f1ca:	f000 faf7 	bl	800f7bc <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
 800f1d0:	f1c3 0307 	rsb	r3, r3, #7
 800f1d4:	4a17      	ldr	r2, [pc, #92]	; (800f234 <fm_factory_modify_k_factor_add+0x78>)
 800f1d6:	5cd3      	ldrb	r3, [r2, r3]
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	d809      	bhi.n	800f1f0 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	f1c3 0307 	rsb	r3, r3, #7
 800f1e2:	4a14      	ldr	r2, [pc, #80]	; (800f234 <fm_factory_modify_k_factor_add+0x78>)
 800f1e4:	5cd2      	ldrb	r2, [r2, r3]
 800f1e6:	3201      	adds	r2, #1
 800f1e8:	b2d1      	uxtb	r1, r2
 800f1ea:	4a12      	ldr	r2, [pc, #72]	; (800f234 <fm_factory_modify_k_factor_add+0x78>)
 800f1ec:	54d1      	strb	r1, [r2, r3]
 800f1ee:	e005      	b.n	800f1fc <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	f1c3 0307 	rsb	r3, r3, #7
 800f1f6:	4a0f      	ldr	r2, [pc, #60]	; (800f234 <fm_factory_modify_k_factor_add+0x78>)
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60bb      	str	r3, [r7, #8]
 800f200:	e00d      	b.n	800f21e <fm_factory_modify_k_factor_add+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f202:	230a      	movs	r3, #10
 800f204:	461a      	mov	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	fb02 f303 	mul.w	r3, r2, r3
 800f20c:	4909      	ldr	r1, [pc, #36]	; (800f234 <fm_factory_modify_k_factor_add+0x78>)
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	440a      	add	r2, r1
 800f212:	7812      	ldrb	r2, [r2, #0]
 800f214:	4413      	add	r3, r2
 800f216:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	3301      	adds	r3, #1
 800f21c:	60bb      	str	r3, [r7, #8]
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b07      	cmp	r3, #7
 800f222:	ddee      	ble.n	800f202 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f224:	4a04      	ldr	r2, [pc, #16]	; (800f238 <fm_factory_modify_k_factor_add+0x7c>)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6013      	str	r3, [r2, #0]
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20001cd4 	.word	0x20001cd4
 800f238:	200000f4 	.word	0x200000f4

0800f23c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	4603      	mov	r3, r0
 800f244:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f24a:	f000 fab7 	bl	800f7bc <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	f1c3 0307 	rsb	r3, r3, #7
 800f254:	4a17      	ldr	r2, [pc, #92]	; (800f2b4 <fm_factory_modify_k_factor_subs+0x78>)
 800f256:	5cd3      	ldrb	r3, [r2, r3]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d009      	beq.n	800f270 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f25c:	79fb      	ldrb	r3, [r7, #7]
 800f25e:	f1c3 0307 	rsb	r3, r3, #7
 800f262:	4a14      	ldr	r2, [pc, #80]	; (800f2b4 <fm_factory_modify_k_factor_subs+0x78>)
 800f264:	5cd2      	ldrb	r2, [r2, r3]
 800f266:	3a01      	subs	r2, #1
 800f268:	b2d1      	uxtb	r1, r2
 800f26a:	4a12      	ldr	r2, [pc, #72]	; (800f2b4 <fm_factory_modify_k_factor_subs+0x78>)
 800f26c:	54d1      	strb	r1, [r2, r3]
 800f26e:	e005      	b.n	800f27c <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	f1c3 0307 	rsb	r3, r3, #7
 800f276:	4a0f      	ldr	r2, [pc, #60]	; (800f2b4 <fm_factory_modify_k_factor_subs+0x78>)
 800f278:	2109      	movs	r1, #9
 800f27a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f27c:	2300      	movs	r3, #0
 800f27e:	60bb      	str	r3, [r7, #8]
 800f280:	e00d      	b.n	800f29e <fm_factory_modify_k_factor_subs+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f282:	230a      	movs	r3, #10
 800f284:	461a      	mov	r2, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	fb02 f303 	mul.w	r3, r2, r3
 800f28c:	4909      	ldr	r1, [pc, #36]	; (800f2b4 <fm_factory_modify_k_factor_subs+0x78>)
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	440a      	add	r2, r1
 800f292:	7812      	ldrb	r2, [r2, #0]
 800f294:	4413      	add	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	3301      	adds	r3, #1
 800f29c:	60bb      	str	r3, [r7, #8]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b07      	cmp	r3, #7
 800f2a2:	ddee      	ble.n	800f282 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f2a4:	4a04      	ldr	r2, [pc, #16]	; (800f2b8 <fm_factory_modify_k_factor_subs+0x7c>)
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6013      	str	r3, [r2, #0]
}
 800f2aa:	bf00      	nop
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	20001cd4 	.word	0x20001cd4
 800f2b8:	200000f4 	.word	0x200000f4

0800f2bc <fm_factory_modify_k_lin_add>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	71fb      	strb	r3, [r7, #7]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f2d4:	79bb      	ldrb	r3, [r7, #6]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 faa8 	bl	800f82c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	2b07      	cmp	r3, #7
 800f2e0:	d84d      	bhi.n	800f37e <fm_factory_modify_k_lin_add+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	f1c3 0307 	rsb	r3, r3, #7
 800f2e8:	4a5d      	ldr	r2, [pc, #372]	; (800f460 <fm_factory_modify_k_lin_add+0x1a4>)
 800f2ea:	5cd3      	ldrb	r3, [r2, r3]
 800f2ec:	2b08      	cmp	r3, #8
 800f2ee:	d809      	bhi.n	800f304 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f2f0:	79fb      	ldrb	r3, [r7, #7]
 800f2f2:	f1c3 0307 	rsb	r3, r3, #7
 800f2f6:	4a5a      	ldr	r2, [pc, #360]	; (800f460 <fm_factory_modify_k_lin_add+0x1a4>)
 800f2f8:	5cd2      	ldrb	r2, [r2, r3]
 800f2fa:	3201      	adds	r2, #1
 800f2fc:	b2d1      	uxtb	r1, r2
 800f2fe:	4a58      	ldr	r2, [pc, #352]	; (800f460 <fm_factory_modify_k_lin_add+0x1a4>)
 800f300:	54d1      	strb	r1, [r2, r3]
 800f302:	e005      	b.n	800f310 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f304:	79fb      	ldrb	r3, [r7, #7]
 800f306:	f1c3 0307 	rsb	r3, r3, #7
 800f30a:	4a55      	ldr	r2, [pc, #340]	; (800f460 <fm_factory_modify_k_lin_add+0x1a4>)
 800f30c:	2100      	movs	r1, #0
 800f30e:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	e00d      	b.n	800f332 <fm_factory_modify_k_lin_add+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f316:	230a      	movs	r3, #10
 800f318:	461a      	mov	r2, r3
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	fb02 f303 	mul.w	r3, r2, r3
 800f320:	494f      	ldr	r1, [pc, #316]	; (800f460 <fm_factory_modify_k_lin_add+0x1a4>)
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	440a      	add	r2, r1
 800f326:	7812      	ldrb	r2, [r2, #0]
 800f328:	4413      	add	r3, r2
 800f32a:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3301      	adds	r3, #1
 800f330:	60fb      	str	r3, [r7, #12]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2b07      	cmp	r3, #7
 800f336:	ddee      	ble.n	800f316 <fm_factory_modify_k_lin_add+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f338:	79bb      	ldrb	r3, [r7, #6]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d103      	bne.n	800f346 <fm_factory_modify_k_lin_add+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f33e:	4a49      	ldr	r2, [pc, #292]	; (800f464 <fm_factory_modify_k_lin_add+0x1a8>)
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f344:	e088      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f346:	79bb      	ldrb	r3, [r7, #6]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d103      	bne.n	800f354 <fm_factory_modify_k_lin_add+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f34c:	4a46      	ldr	r2, [pc, #280]	; (800f468 <fm_factory_modify_k_lin_add+0x1ac>)
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	6013      	str	r3, [r2, #0]
}
 800f352:	e081      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f354:	79bb      	ldrb	r3, [r7, #6]
 800f356:	2b03      	cmp	r3, #3
 800f358:	d103      	bne.n	800f362 <fm_factory_modify_k_lin_add+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f35a:	4a44      	ldr	r2, [pc, #272]	; (800f46c <fm_factory_modify_k_lin_add+0x1b0>)
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	6013      	str	r3, [r2, #0]
}
 800f360:	e07a      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f362:	79bb      	ldrb	r3, [r7, #6]
 800f364:	2b04      	cmp	r3, #4
 800f366:	d103      	bne.n	800f370 <fm_factory_modify_k_lin_add+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f368:	4a41      	ldr	r2, [pc, #260]	; (800f470 <fm_factory_modify_k_lin_add+0x1b4>)
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	6013      	str	r3, [r2, #0]
}
 800f36e:	e073      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f370:	79bb      	ldrb	r3, [r7, #6]
 800f372:	2b05      	cmp	r3, #5
 800f374:	d170      	bne.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f376:	4a3f      	ldr	r2, [pc, #252]	; (800f474 <fm_factory_modify_k_lin_add+0x1b8>)
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	6013      	str	r3, [r2, #0]
}
 800f37c:	e06c      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	2b07      	cmp	r3, #7
 800f382:	d969      	bls.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f384:	79fb      	ldrb	r3, [r7, #7]
 800f386:	f1c3 030e 	rsb	r3, r3, #14
 800f38a:	2b03      	cmp	r3, #3
 800f38c:	d017      	beq.n	800f3be <fm_factory_modify_k_lin_add+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	f1c3 030e 	rsb	r3, r3, #14
 800f394:	4a38      	ldr	r2, [pc, #224]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f396:	5cd3      	ldrb	r3, [r2, r3]
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d809      	bhi.n	800f3b0 <fm_factory_modify_k_lin_add+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f39c:	79fb      	ldrb	r3, [r7, #7]
 800f39e:	f1c3 030e 	rsb	r3, r3, #14
 800f3a2:	4a35      	ldr	r2, [pc, #212]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3a4:	5cd2      	ldrb	r2, [r2, r3]
 800f3a6:	3201      	adds	r2, #1
 800f3a8:	b2d1      	uxtb	r1, r2
 800f3aa:	4a33      	ldr	r2, [pc, #204]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3ac:	54d1      	strb	r1, [r2, r3]
 800f3ae:	e01d      	b.n	800f3ec <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f3b0:	79fb      	ldrb	r3, [r7, #7]
 800f3b2:	f1c3 030e 	rsb	r3, r3, #14
 800f3b6:	4a30      	ldr	r2, [pc, #192]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	54d1      	strb	r1, [r2, r3]
 800f3bc:	e016      	b.n	800f3ec <fm_factory_modify_k_lin_add+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f3be:	79fb      	ldrb	r3, [r7, #7]
 800f3c0:	f1c3 030e 	rsb	r3, r3, #14
 800f3c4:	4a2c      	ldr	r2, [pc, #176]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3c6:	5cd3      	ldrb	r3, [r2, r3]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d109      	bne.n	800f3e0 <fm_factory_modify_k_lin_add+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f3cc:	79fb      	ldrb	r3, [r7, #7]
 800f3ce:	f1c3 030e 	rsb	r3, r3, #14
 800f3d2:	4a29      	ldr	r2, [pc, #164]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3d4:	5cd2      	ldrb	r2, [r2, r3]
 800f3d6:	3201      	adds	r2, #1
 800f3d8:	b2d1      	uxtb	r1, r2
 800f3da:	4a27      	ldr	r2, [pc, #156]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3dc:	54d1      	strb	r1, [r2, r3]
 800f3de:	e005      	b.n	800f3ec <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	f1c3 030e 	rsb	r3, r3, #14
 800f3e6:	4a24      	ldr	r2, [pc, #144]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	60bb      	str	r3, [r7, #8]
 800f3f0:	e00d      	b.n	800f40e <fm_factory_modify_k_lin_add+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f3f2:	230a      	movs	r3, #10
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f3fc:	491e      	ldr	r1, [pc, #120]	; (800f478 <fm_factory_modify_k_lin_add+0x1bc>)
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	440a      	add	r2, r1
 800f402:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f404:	4413      	add	r3, r2
 800f406:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	3301      	adds	r3, #1
 800f40c:	60bb      	str	r3, [r7, #8]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b06      	cmp	r3, #6
 800f412:	ddee      	ble.n	800f3f2 <fm_factory_modify_k_lin_add+0x136>
        if (k_sel == K_LIN_1)
 800f414:	79bb      	ldrb	r3, [r7, #6]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d103      	bne.n	800f422 <fm_factory_modify_k_lin_add+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f41a:	4a18      	ldr	r2, [pc, #96]	; (800f47c <fm_factory_modify_k_lin_add+0x1c0>)
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	6013      	str	r3, [r2, #0]
}
 800f420:	e01a      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f422:	79bb      	ldrb	r3, [r7, #6]
 800f424:	2b02      	cmp	r3, #2
 800f426:	d103      	bne.n	800f430 <fm_factory_modify_k_lin_add+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f428:	4a15      	ldr	r2, [pc, #84]	; (800f480 <fm_factory_modify_k_lin_add+0x1c4>)
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	6013      	str	r3, [r2, #0]
}
 800f42e:	e013      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f430:	79bb      	ldrb	r3, [r7, #6]
 800f432:	2b03      	cmp	r3, #3
 800f434:	d103      	bne.n	800f43e <fm_factory_modify_k_lin_add+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f436:	4a13      	ldr	r2, [pc, #76]	; (800f484 <fm_factory_modify_k_lin_add+0x1c8>)
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	6013      	str	r3, [r2, #0]
}
 800f43c:	e00c      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f43e:	79bb      	ldrb	r3, [r7, #6]
 800f440:	2b04      	cmp	r3, #4
 800f442:	d103      	bne.n	800f44c <fm_factory_modify_k_lin_add+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f444:	4a10      	ldr	r2, [pc, #64]	; (800f488 <fm_factory_modify_k_lin_add+0x1cc>)
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	6013      	str	r3, [r2, #0]
}
 800f44a:	e005      	b.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f44c:	79bb      	ldrb	r3, [r7, #6]
 800f44e:	2b05      	cmp	r3, #5
 800f450:	d102      	bne.n	800f458 <fm_factory_modify_k_lin_add+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f452:	4a0e      	ldr	r2, [pc, #56]	; (800f48c <fm_factory_modify_k_lin_add+0x1d0>)
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	6013      	str	r3, [r2, #0]
}
 800f458:	bf00      	nop
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	20001cdc 	.word	0x20001cdc
 800f464:	200000cc 	.word	0x200000cc
 800f468:	200000d4 	.word	0x200000d4
 800f46c:	200000dc 	.word	0x200000dc
 800f470:	200000e4 	.word	0x200000e4
 800f474:	200000ec 	.word	0x200000ec
 800f478:	20001ce4 	.word	0x20001ce4
 800f47c:	200000a4 	.word	0x200000a4
 800f480:	200000ac 	.word	0x200000ac
 800f484:	200000b4 	.word	0x200000b4
 800f488:	200000bc 	.word	0x200000bc
 800f48c:	200000c4 	.word	0x200000c4

0800f490 <fm_factory_modify_k_lin_subs>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	460a      	mov	r2, r1
 800f49a:	71fb      	strb	r3, [r7, #7]
 800f49c:	4613      	mov	r3, r2
 800f49e:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f4a8:	79bb      	ldrb	r3, [r7, #6]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 f9be 	bl	800f82c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f4b0:	79fb      	ldrb	r3, [r7, #7]
 800f4b2:	2b07      	cmp	r3, #7
 800f4b4:	d84d      	bhi.n	800f552 <fm_factory_modify_k_lin_subs+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	f1c3 0307 	rsb	r3, r3, #7
 800f4bc:	4a5d      	ldr	r2, [pc, #372]	; (800f634 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f4be:	5cd3      	ldrb	r3, [r2, r3]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d009      	beq.n	800f4d8 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	f1c3 0307 	rsb	r3, r3, #7
 800f4ca:	4a5a      	ldr	r2, [pc, #360]	; (800f634 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f4cc:	5cd2      	ldrb	r2, [r2, r3]
 800f4ce:	3a01      	subs	r2, #1
 800f4d0:	b2d1      	uxtb	r1, r2
 800f4d2:	4a58      	ldr	r2, [pc, #352]	; (800f634 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f4d4:	54d1      	strb	r1, [r2, r3]
 800f4d6:	e005      	b.n	800f4e4 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
 800f4da:	f1c3 0307 	rsb	r3, r3, #7
 800f4de:	4a55      	ldr	r2, [pc, #340]	; (800f634 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f4e0:	2109      	movs	r1, #9
 800f4e2:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	e00d      	b.n	800f506 <fm_factory_modify_k_lin_subs+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	fb02 f303 	mul.w	r3, r2, r3
 800f4f4:	494f      	ldr	r1, [pc, #316]	; (800f634 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	440a      	add	r2, r1
 800f4fa:	7812      	ldrb	r2, [r2, #0]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	3301      	adds	r3, #1
 800f504:	60fb      	str	r3, [r7, #12]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b07      	cmp	r3, #7
 800f50a:	ddee      	ble.n	800f4ea <fm_factory_modify_k_lin_subs+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f50c:	79bb      	ldrb	r3, [r7, #6]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d103      	bne.n	800f51a <fm_factory_modify_k_lin_subs+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f512:	4a49      	ldr	r2, [pc, #292]	; (800f638 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f518:	e088      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f51a:	79bb      	ldrb	r3, [r7, #6]
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d103      	bne.n	800f528 <fm_factory_modify_k_lin_subs+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f520:	4a46      	ldr	r2, [pc, #280]	; (800f63c <fm_factory_modify_k_lin_subs+0x1ac>)
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	6013      	str	r3, [r2, #0]
}
 800f526:	e081      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f528:	79bb      	ldrb	r3, [r7, #6]
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d103      	bne.n	800f536 <fm_factory_modify_k_lin_subs+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f52e:	4a44      	ldr	r2, [pc, #272]	; (800f640 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	6013      	str	r3, [r2, #0]
}
 800f534:	e07a      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f536:	79bb      	ldrb	r3, [r7, #6]
 800f538:	2b04      	cmp	r3, #4
 800f53a:	d103      	bne.n	800f544 <fm_factory_modify_k_lin_subs+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f53c:	4a41      	ldr	r2, [pc, #260]	; (800f644 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	6013      	str	r3, [r2, #0]
}
 800f542:	e073      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f544:	79bb      	ldrb	r3, [r7, #6]
 800f546:	2b05      	cmp	r3, #5
 800f548:	d170      	bne.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f54a:	4a3f      	ldr	r2, [pc, #252]	; (800f648 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	6013      	str	r3, [r2, #0]
}
 800f550:	e06c      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f552:	79fb      	ldrb	r3, [r7, #7]
 800f554:	2b07      	cmp	r3, #7
 800f556:	d969      	bls.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	f1c3 030e 	rsb	r3, r3, #14
 800f55e:	2b03      	cmp	r3, #3
 800f560:	d017      	beq.n	800f592 <fm_factory_modify_k_lin_subs+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	f1c3 030e 	rsb	r3, r3, #14
 800f568:	4a38      	ldr	r2, [pc, #224]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f56a:	5cd3      	ldrb	r3, [r2, r3]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <fm_factory_modify_k_lin_subs+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	f1c3 030e 	rsb	r3, r3, #14
 800f576:	4a35      	ldr	r2, [pc, #212]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f578:	5cd2      	ldrb	r2, [r2, r3]
 800f57a:	3a01      	subs	r2, #1
 800f57c:	b2d1      	uxtb	r1, r2
 800f57e:	4a33      	ldr	r2, [pc, #204]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f580:	54d1      	strb	r1, [r2, r3]
 800f582:	e01d      	b.n	800f5c0 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	f1c3 030e 	rsb	r3, r3, #14
 800f58a:	4a30      	ldr	r2, [pc, #192]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f58c:	2109      	movs	r1, #9
 800f58e:	54d1      	strb	r1, [r2, r3]
 800f590:	e016      	b.n	800f5c0 <fm_factory_modify_k_lin_subs+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	f1c3 030e 	rsb	r3, r3, #14
 800f598:	4a2c      	ldr	r2, [pc, #176]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f59a:	5cd3      	ldrb	r3, [r2, r3]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d009      	beq.n	800f5b4 <fm_factory_modify_k_lin_subs+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f5a0:	79fb      	ldrb	r3, [r7, #7]
 800f5a2:	f1c3 030e 	rsb	r3, r3, #14
 800f5a6:	4a29      	ldr	r2, [pc, #164]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f5a8:	5cd2      	ldrb	r2, [r2, r3]
 800f5aa:	3a01      	subs	r2, #1
 800f5ac:	b2d1      	uxtb	r1, r2
 800f5ae:	4a27      	ldr	r2, [pc, #156]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f5b0:	54d1      	strb	r1, [r2, r3]
 800f5b2:	e005      	b.n	800f5c0 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	f1c3 030e 	rsb	r3, r3, #14
 800f5ba:	4a24      	ldr	r2, [pc, #144]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f5bc:	2101      	movs	r1, #1
 800f5be:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	60bb      	str	r3, [r7, #8]
 800f5c4:	e00d      	b.n	800f5e2 <fm_factory_modify_k_lin_subs+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5c6:	230a      	movs	r3, #10
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f5d0:	491e      	ldr	r1, [pc, #120]	; (800f64c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	440a      	add	r2, r1
 800f5d6:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5d8:	4413      	add	r3, r2
 800f5da:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	60bb      	str	r3, [r7, #8]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b06      	cmp	r3, #6
 800f5e6:	ddee      	ble.n	800f5c6 <fm_factory_modify_k_lin_subs+0x136>
        if (k_sel == K_LIN_1)
 800f5e8:	79bb      	ldrb	r3, [r7, #6]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d103      	bne.n	800f5f6 <fm_factory_modify_k_lin_subs+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f5ee:	4a18      	ldr	r2, [pc, #96]	; (800f650 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	6013      	str	r3, [r2, #0]
}
 800f5f4:	e01a      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f5f6:	79bb      	ldrb	r3, [r7, #6]
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d103      	bne.n	800f604 <fm_factory_modify_k_lin_subs+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f5fc:	4a15      	ldr	r2, [pc, #84]	; (800f654 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	6013      	str	r3, [r2, #0]
}
 800f602:	e013      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f604:	79bb      	ldrb	r3, [r7, #6]
 800f606:	2b03      	cmp	r3, #3
 800f608:	d103      	bne.n	800f612 <fm_factory_modify_k_lin_subs+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f60a:	4a13      	ldr	r2, [pc, #76]	; (800f658 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	6013      	str	r3, [r2, #0]
}
 800f610:	e00c      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f612:	79bb      	ldrb	r3, [r7, #6]
 800f614:	2b04      	cmp	r3, #4
 800f616:	d103      	bne.n	800f620 <fm_factory_modify_k_lin_subs+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f618:	4a10      	ldr	r2, [pc, #64]	; (800f65c <fm_factory_modify_k_lin_subs+0x1cc>)
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	6013      	str	r3, [r2, #0]
}
 800f61e:	e005      	b.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f620:	79bb      	ldrb	r3, [r7, #6]
 800f622:	2b05      	cmp	r3, #5
 800f624:	d102      	bne.n	800f62c <fm_factory_modify_k_lin_subs+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f626:	4a0e      	ldr	r2, [pc, #56]	; (800f660 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	6013      	str	r3, [r2, #0]
}
 800f62c:	bf00      	nop
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	20001cdc 	.word	0x20001cdc
 800f638:	200000cc 	.word	0x200000cc
 800f63c:	200000d4 	.word	0x200000d4
 800f640:	200000dc 	.word	0x200000dc
 800f644:	200000e4 	.word	0x200000e4
 800f648:	200000ec 	.word	0x200000ec
 800f64c:	20001ce4 	.word	0x20001ce4
 800f650:	200000a4 	.word	0x200000a4
 800f654:	200000ac 	.word	0x200000ac
 800f658:	200000b4 	.word	0x200000b4
 800f65c:	200000bc 	.word	0x200000bc
 800f660:	200000c4 	.word	0x200000c4

0800f664 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	71fb      	strb	r3, [r7, #7]
 800f66e:	460b      	mov	r3, r1
 800f670:	71bb      	strb	r3, [r7, #6]
 800f672:	4613      	mov	r3, r2
 800f674:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f676:	4a07      	ldr	r2, [pc, #28]	; (800f694 <fm_factory_modify_res_acm_ttl+0x30>)
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f67c:	4a06      	ldr	r2, [pc, #24]	; (800f698 <fm_factory_modify_res_acm_ttl+0x34>)
 800f67e:	79bb      	ldrb	r3, [r7, #6]
 800f680:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f682:	4a06      	ldr	r2, [pc, #24]	; (800f69c <fm_factory_modify_res_acm_ttl+0x38>)
 800f684:	797b      	ldrb	r3, [r7, #5]
 800f686:	7313      	strb	r3, [r2, #12]
}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	2000009c 	.word	0x2000009c
 800f698:	20000030 	.word	0x20000030
 800f69c:	20000010 	.word	0x20000010

0800f6a0 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	460a      	mov	r2, r1
 800f6aa:	71fb      	strb	r3, [r7, #7]
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f6b0:	4a05      	ldr	r2, [pc, #20]	; (800f6c8 <fm_factory_modify_res_rate+0x28>)
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f6b6:	4a05      	ldr	r2, [pc, #20]	; (800f6cc <fm_factory_modify_res_rate+0x2c>)
 800f6b8:	79bb      	ldrb	r3, [r7, #6]
 800f6ba:	7313      	strb	r3, [r2, #12]
}
 800f6bc:	bf00      	nop
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	20000094 	.word	0x20000094
 800f6cc:	20000050 	.word	0x20000050

0800f6d0 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
    static const int hour_mult = 10000;
    static const int min_mult = 100;

    date_time_config.hour = mod_hour;
 800f6dc:	4a0f      	ldr	r2, [pc, #60]	; (800f71c <fm_factory_modify_time+0x4c>)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f6e2:	4a0e      	ldr	r2, [pc, #56]	; (800f71c <fm_factory_modify_time+0x4c>)
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f6e8:	4a0c      	ldr	r2, [pc, #48]	; (800f71c <fm_factory_modify_time+0x4c>)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * hour_mult + mod_minute * min_mult + mod_second;
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <fm_factory_modify_time+0x50>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	fb03 f202 	mul.w	r2, r3, r2
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <fm_factory_modify_time+0x54>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	fb01 f303 	mul.w	r3, r1, r3
 800f702:	441a      	add	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4413      	add	r3, r2
 800f708:	461a      	mov	r2, r3
 800f70a:	4b07      	ldr	r3, [pc, #28]	; (800f728 <fm_factory_modify_time+0x58>)
 800f70c:	601a      	str	r2, [r3, #0]
}
 800f70e:	bf00      	nop
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	2000007c 	.word	0x2000007c
 800f720:	08015cc8 	.word	0x08015cc8
 800f724:	08015ccc 	.word	0x08015ccc
 800f728:	2000010c 	.word	0x2000010c

0800f72c <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	4603      	mov	r3, r0
 800f734:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f736:	4a07      	ldr	r2, [pc, #28]	; (800f754 <fm_factory_modify_time_units+0x28>)
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f73c:	4a06      	ldr	r2, [pc, #24]	; (800f758 <fm_factory_modify_time_units+0x2c>)
 800f73e:	79fb      	ldrb	r3, [r7, #7]
 800f740:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f742:	4a06      	ldr	r2, [pc, #24]	; (800f75c <fm_factory_modify_time_units+0x30>)
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	7653      	strb	r3, [r2, #25]
}
 800f748:	bf00      	nop
 800f74a:	370c      	adds	r7, #12
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	20000030 	.word	0x20000030
 800f758:	20000010 	.word	0x20000010
 800f75c:	20000050 	.word	0x20000050

0800f760 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	4603      	mov	r3, r0
 800f768:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f76a:	4a07      	ldr	r2, [pc, #28]	; (800f788 <fm_factory_modify_volume_units+0x28>)
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <fm_factory_modify_volume_units+0x2c>)
 800f772:	79fb      	ldrb	r3, [r7, #7]
 800f774:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f776:	4a06      	ldr	r2, [pc, #24]	; (800f790 <fm_factory_modify_volume_units+0x30>)
 800f778:	79fb      	ldrb	r3, [r7, #7]
 800f77a:	7613      	strb	r3, [r2, #24]
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	20000030 	.word	0x20000030
 800f78c:	20000010 	.word	0x20000010
 800f790:	20000050 	.word	0x20000050

0800f794 <fm_factory_reset_acm>:
 * funcionalidad del botón ENTER en el menú de usuario ACM-RATE.
 * @param None
 * @retval None
 */
void fm_factory_reset_acm()
{
 800f794:	b480      	push	{r7}
 800f796:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f798:	4907      	ldr	r1, [pc, #28]	; (800f7b8 <fm_factory_reset_acm+0x24>)
 800f79a:	f04f 0200 	mov.w	r2, #0
 800f79e:	f04f 0300 	mov.w	r3, #0
 800f7a2:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f7a6:	4b04      	ldr	r3, [pc, #16]	; (800f7b8 <fm_factory_reset_acm+0x24>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	609a      	str	r2, [r3, #8]
}
 800f7ac:	bf00      	nop
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	20000030 	.word	0x20000030

0800f7bc <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f7c2:	2307      	movs	r3, #7
 800f7c4:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f7c6:	463b      	mov	r3, r7
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff fbe6 	bl	800ef9c <fm_factory_get_k_factor>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f7d4:	e01f      	b.n	800f816 <fm_factory_separate_k_factor+0x5a>
    {
        if (k_num > 0)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d014      	beq.n	800f806 <fm_factory_separate_k_factor+0x4a>
        {
            k_array[i] = k_num % ten_multipllier;
 800f7dc:	230a      	movs	r3, #10
 800f7de:	461a      	mov	r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7e6:	fb01 f202 	mul.w	r2, r1, r2
 800f7ea:	1a9b      	subs	r3, r3, r2
 800f7ec:	b2d9      	uxtb	r1, r3
 800f7ee:	4a0e      	ldr	r2, [pc, #56]	; (800f828 <fm_factory_separate_k_factor+0x6c>)
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	460a      	mov	r2, r1
 800f7f6:	701a      	strb	r2, [r3, #0]
            k_num /= ten_multipllier;
 800f7f8:	230a      	movs	r3, #10
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f802:	60fb      	str	r3, [r7, #12]
 800f804:	e004      	b.n	800f810 <fm_factory_separate_k_factor+0x54>
        }
        else
        {
            k_array[i] = 0;
 800f806:	4a08      	ldr	r2, [pc, #32]	; (800f828 <fm_factory_separate_k_factor+0x6c>)
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	4413      	add	r3, r2
 800f80c:	2200      	movs	r2, #0
 800f80e:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	3b01      	subs	r3, #1
 800f814:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dadc      	bge.n	800f7d6 <fm_factory_separate_k_factor+0x1a>
    }
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	20001cd4 	.word	0x20001cd4

0800f82c <fm_factory_separate_k_lin_and_frec>:
 * y los guarda en un arreglo global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	; 0x28
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f836:	2307      	movs	r3, #7
 800f838:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f83a:	2306      	movs	r3, #6
 800f83c:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f83e:	f107 0308 	add.w	r3, r7, #8
 800f842:	79fa      	ldrb	r2, [r7, #7]
 800f844:	4611      	mov	r1, r2
 800f846:	4618      	mov	r0, r3
 800f848:	f7ff fba8 	bl	800ef9c <fm_factory_get_k_factor>
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f850:	f107 0310 	add.w	r3, r7, #16
 800f854:	79fa      	ldrb	r2, [r7, #7]
 800f856:	4611      	mov	r1, r2
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff fb4f 	bl	800eefc <fm_factory_get_frec_lin>
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f862:	e01f      	b.n	800f8a4 <fm_factory_separate_k_lin_and_frec+0x78>
    {
        if (k_lin_num > 0)
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	2b00      	cmp	r3, #0
 800f868:	d014      	beq.n	800f894 <fm_factory_separate_k_lin_and_frec+0x68>
        {
            k_lin_array[i] = k_lin_num % ten_multipllier;
 800f86a:	230a      	movs	r3, #10
 800f86c:	461a      	mov	r2, r3
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	fbb3 f1f2 	udiv	r1, r3, r2
 800f874:	fb01 f202 	mul.w	r2, r1, r2
 800f878:	1a9b      	subs	r3, r3, r2
 800f87a:	b2d9      	uxtb	r1, r3
 800f87c:	4a1f      	ldr	r2, [pc, #124]	; (800f8fc <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	4413      	add	r3, r2
 800f882:	460a      	mov	r2, r1
 800f884:	701a      	strb	r2, [r3, #0]
            k_lin_num /= ten_multipllier;
 800f886:	230a      	movs	r3, #10
 800f888:	461a      	mov	r2, r3
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f890:	627b      	str	r3, [r7, #36]	; 0x24
 800f892:	e004      	b.n	800f89e <fm_factory_separate_k_lin_and_frec+0x72>
        }
        else
        {
            k_lin_array[i] = 0;
 800f894:	4a19      	ldr	r2, [pc, #100]	; (800f8fc <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	4413      	add	r3, r2
 800f89a:	2200      	movs	r2, #0
 800f89c:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	dadc      	bge.n	800f864 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f8aa:	e01f      	b.n	800f8ec <fm_factory_separate_k_lin_and_frec+0xc0>
    {
        if (frec_num > 0)
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d014      	beq.n	800f8dc <fm_factory_separate_k_lin_and_frec+0xb0>
        {
            frec_array[j] = frec_num % ten_multipllier;
 800f8b2:	230a      	movs	r3, #10
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8bc:	fb01 f202 	mul.w	r2, r1, r2
 800f8c0:	1a9b      	subs	r3, r3, r2
 800f8c2:	b2d9      	uxtb	r1, r3
 800f8c4:	4a0e      	ldr	r2, [pc, #56]	; (800f900 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	460a      	mov	r2, r1
 800f8cc:	701a      	strb	r2, [r3, #0]
            frec_num /= ten_multipllier;
 800f8ce:	230a      	movs	r3, #10
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8d8:	623b      	str	r3, [r7, #32]
 800f8da:	e004      	b.n	800f8e6 <fm_factory_separate_k_lin_and_frec+0xba>
        }
        else
        {
            frec_array[j] = 0;
 800f8dc:	4a08      	ldr	r2, [pc, #32]	; (800f900 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	61bb      	str	r3, [r7, #24]
    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	dadc      	bge.n	800f8ac <fm_factory_separate_k_lin_and_frec+0x80>
    }
}
 800f8f2:	bf00      	nop
 800f8f4:	bf00      	nop
 800f8f6:	3728      	adds	r7, #40	; 0x28
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	20001cdc 	.word	0x20001cdc
 800f900:	20001ce4 	.word	0x20001ce4

0800f904 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	4603      	mov	r3, r0
 800f90c:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f90e:	2015      	movs	r0, #21
 800f910:	f7f4 fba4 	bl	800405c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f914:	2016      	movs	r0, #22
 800f916:	f7f4 fba1 	bl	800405c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f91a:	2017      	movs	r0, #23
 800f91c:	f7f4 fb9e 	bl	800405c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f920:	2018      	movs	r0, #24
 800f922:	f7f4 fb9b 	bl	800405c <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f926:	88fb      	ldrh	r3, [r7, #6]
 800f928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f92c:	d018      	beq.n	800f960 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f932:	dc18      	bgt.n	800f966 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f938:	d00f      	beq.n	800f95a <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f93e:	dc12      	bgt.n	800f966 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f944:	d003      	beq.n	800f94e <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f94a:	d003      	beq.n	800f954 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f94c:	e00b      	b.n	800f966 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f94e:	2302      	movs	r3, #2
 800f950:	73fb      	strb	r3, [r7, #15]
        break;
 800f952:	e009      	b.n	800f968 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f954:	2303      	movs	r3, #3
 800f956:	73fb      	strb	r3, [r7, #15]
        break;
 800f958:	e006      	b.n	800f968 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f95a:	2304      	movs	r3, #4
 800f95c:	73fb      	strb	r3, [r7, #15]
        break;
 800f95e:	e003      	b.n	800f968 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f960:	2305      	movs	r3, #5
 800f962:	73fb      	strb	r3, [r7, #15]
        break;
 800f964:	e000      	b.n	800f968 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f966:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f968:	f107 030f 	add.w	r3, r7, #15
 800f96c:	2200      	movs	r2, #0
 800f96e:	4619      	mov	r1, r3
 800f970:	4805      	ldr	r0, [pc, #20]	; (800f988 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f972:	f7fe fdff 	bl	800e574 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f976:	2101      	movs	r1, #1
 800f978:	4804      	ldr	r0, [pc, #16]	; (800f98c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f97a:	f7fe fe45 	bl	800e608 <_txe_semaphore_ceiling_put>
}
 800f97e:	bf00      	nop
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20001388 	.word	0x20001388
 800f98c:	2000136c 	.word	0x2000136c

0800f990 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b0b8      	sub	sp, #224	; 0xe0
 800f994:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f996:	f107 0318 	add.w	r3, r7, #24
 800f99a:	4618      	mov	r0, r3
 800f99c:	f005 f90e 	bl	8014bbc <fmc_get_acm>
 800f9a0:	2314      	movs	r3, #20
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	1d3b      	adds	r3, r7, #4
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	2309      	movs	r3, #9
 800f9aa:	2220      	movs	r2, #32
 800f9ac:	f107 0120 	add.w	r1, r7, #32
 800f9b0:	c903      	ldmia	r1, {r0, r1}
 800f9b2:	f000 fa13 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f9b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f005 f8fe 	bl	8014bbc <fmc_get_acm>
 800f9c0:	1d3a      	adds	r2, r7, #4
 800f9c2:	2314      	movs	r3, #20
 800f9c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f9c8:	c903      	ldmia	r1, {r0, r1}
 800f9ca:	f000 f9c3 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f9ce:	1d3b      	adds	r3, r7, #4
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f000 fbea 	bl	80101ac <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f9d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f005 f92d 	bl	8014c3c <fmc_get_rate>
 800f9e2:	2314      	movs	r3, #20
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	1d3b      	adds	r3, r7, #4
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	2308      	movs	r3, #8
 800f9ec:	2220      	movs	r2, #32
 800f9ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f9f2:	c903      	ldmia	r1, {r0, r1}
 800f9f4:	f000 f9f2 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f9f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f005 f91d 	bl	8014c3c <fmc_get_rate>
 800fa02:	1d3a      	adds	r2, r7, #4
 800fa04:	2314      	movs	r3, #20
 800fa06:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800fa0a:	c903      	ldmia	r1, {r0, r1}
 800fa0c:	f000 f9a2 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fa10:	1d3b      	adds	r3, r7, #4
 800fa12:	2101      	movs	r1, #1
 800fa14:	4618      	mov	r0, r3
 800fa16:	f000 fbc9 	bl	80101ac <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	2006      	movs	r0, #6
 800fa1e:	f001 ff2b 	bl	8011878 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800fa22:	2100      	movs	r1, #0
 800fa24:	2002      	movs	r0, #2
 800fa26:	f001 ff27 	bl	8011878 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800fa2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f005 f8c4 	bl	8014bbc <fmc_get_acm>
 800fa34:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800fa38:	2100      	movs	r1, #0
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f002 fadc 	bl	8011ff8 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800fa40:	2100      	movs	r1, #0
 800fa42:	2007      	movs	r0, #7
 800fa44:	f001 ff18 	bl	8011878 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800fa48:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f005 f8b5 	bl	8014bbc <fmc_get_acm>
 800fa52:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800fa56:	2100      	movs	r1, #0
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f002 fa8b 	bl	8011f74 <lcd_set_time_unit>
}
 800fa5e:	bf00      	nop
 800fa60:	37d8      	adds	r7, #216	; 0xd8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b0a2      	sub	sp, #136	; 0x88
 800fa6a:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fa6c:	f107 0318 	add.w	r3, r7, #24
 800fa70:	4618      	mov	r0, r3
 800fa72:	f005 f8a3 	bl	8014bbc <fmc_get_acm>
 800fa76:	2314      	movs	r3, #20
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	1d3b      	adds	r3, r7, #4
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	2309      	movs	r3, #9
 800fa80:	2220      	movs	r2, #32
 800fa82:	f107 0120 	add.w	r1, r7, #32
 800fa86:	c903      	ldmia	r1, {r0, r1}
 800fa88:	f000 f9a8 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800fa8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa90:	4618      	mov	r0, r3
 800fa92:	f005 f893 	bl	8014bbc <fmc_get_acm>
 800fa96:	1d3a      	adds	r2, r7, #4
 800fa98:	2314      	movs	r3, #20
 800fa9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800fa9e:	c903      	ldmia	r1, {r0, r1}
 800faa0:	f000 f958 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800faa4:	1d3b      	adds	r3, r7, #4
 800faa6:	2100      	movs	r1, #0
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 fb7f 	bl	80101ac <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800faae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fab2:	4618      	mov	r0, r3
 800fab4:	f005 f902 	bl	8014cbc <fmc_get_stm32_temp>
 800fab8:	2314      	movs	r3, #20
 800faba:	9301      	str	r3, [sp, #4]
 800fabc:	1d3b      	adds	r3, r7, #4
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	2308      	movs	r3, #8
 800fac2:	2220      	movs	r2, #32
 800fac4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fac8:	c903      	ldmia	r1, {r0, r1}
 800faca:	f000 f987 	bl	800fddc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800face:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fad2:	4618      	mov	r0, r3
 800fad4:	f005 f8f2 	bl	8014cbc <fmc_get_stm32_temp>
 800fad8:	1d3a      	adds	r2, r7, #4
 800fada:	2314      	movs	r3, #20
 800fadc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800fae0:	c903      	ldmia	r1, {r0, r1}
 800fae2:	f000 f937 	bl	800fd54 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fae6:	1d3b      	adds	r3, r7, #4
 800fae8:	2101      	movs	r1, #1
 800faea:	4618      	mov	r0, r3
 800faec:	f000 fb5e 	bl	80101ac <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800faf0:	2100      	movs	r1, #0
 800faf2:	2006      	movs	r0, #6
 800faf4:	f001 fec0 	bl	8011878 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800faf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fafc:	4618      	mov	r0, r3
 800fafe:	f005 f8dd 	bl	8014cbc <fmc_get_stm32_temp>
 800fb02:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fb06:	2100      	movs	r1, #0
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f002 fa75 	bl	8011ff8 <lcd_set_vol_unit>
}
 800fb0e:	bf00      	nop
 800fb10:	3780      	adds	r7, #128	; 0x80
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fb1a:	f000 fd5f 	bl	80105dc <lcd_clear_all>
}
 800fb1e:	bf00      	nop
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <fm_lcd_date_hour>:
 * @param Campo seleccionado el cual debe titilar.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b090      	sub	sp, #64	; 0x40
 800fb28:	af02      	add	r7, sp, #8
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	73fb      	strb	r3, [r7, #15]
 800fb2e:	460b      	mov	r3, r1
 800fb30:	73bb      	strb	r3, [r7, #14]
 800fb32:	4613      	mov	r3, r2
 800fb34:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if (configuration)
 800fb36:	7bfb      	ldrb	r3, [r7, #15]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00a      	beq.n	800fb52 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fb3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff f9a5 	bl	800ee90 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800fb46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff f9c4 	bl	800eed8 <fm_factory_get_fp_time_conf>
 800fb50:	e019      	b.n	800fb86 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fb52:	f7ff f8a7 	bl	800eca4 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fb56:	f7ff f8cb 	bl	800ecf0 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800fb5a:	463b      	mov	r3, r7
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff f985 	bl	800ee6c <fm_factory_get_fp_date>
 800fb62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb66:	463a      	mov	r2, r7
 800fb68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb6c:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fb70:	463b      	mov	r3, r7
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff f99e 	bl	800eeb4 <fm_factory_get_fp_time>
 800fb78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb7c:	463a      	mov	r2, r7
 800fb7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb82:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fb86:	2314      	movs	r3, #20
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	f107 0314 	add.w	r3, r7, #20
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	2309      	movs	r3, #9
 800fb92:	2230      	movs	r2, #48	; 0x30
 800fb94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fb98:	c903      	ldmia	r1, {r0, r1}
 800fb9a:	f000 f91f 	bl	800fddc <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fb9e:	f107 0314 	add.w	r3, r7, #20
 800fba2:	2100      	movs	r1, #0
 800fba4:	4618      	mov	r0, r3
 800fba6:	f000 fb01 	bl	80101ac <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fbaa:	2101      	movs	r1, #1
 800fbac:	2000      	movs	r0, #0
 800fbae:	f001 fdb7 	bl	8011720 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fbb2:	2103      	movs	r1, #3
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	f001 fdb3 	bl	8011720 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fbba:	2314      	movs	r3, #20
 800fbbc:	9301      	str	r3, [sp, #4]
 800fbbe:	f107 0314 	add.w	r3, r7, #20
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	2308      	movs	r3, #8
 800fbc6:	2230      	movs	r2, #48	; 0x30
 800fbc8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fbcc:	c903      	ldmia	r1, {r0, r1}
 800fbce:	f000 f905 	bl	800fddc <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fbd2:	f107 0314 	add.w	r3, r7, #20
 800fbd6:	2101      	movs	r1, #1
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 fae7 	bl	80101ac <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fbde:	2101      	movs	r1, #1
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	f000 fd23 	bl	801062c <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fbe6:	2102      	movs	r1, #2
 800fbe8:	2001      	movs	r0, #1
 800fbea:	f001 fd99 	bl	8011720 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800fbee:	2104      	movs	r1, #4
 800fbf0:	2001      	movs	r0, #1
 800fbf2:	f001 fd95 	bl	8011720 <lcd_set_point>

    if (configuration)
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d07e      	beq.n	800fcfa <fm_lcd_date_hour+0x1d6>
    {
        if (event_id == EVENT_KEY_ENTER
 800fbfc:	7bbb      	ldrb	r3, [r7, #14]
 800fbfe:	2b04      	cmp	r3, #4
 800fc00:	d006      	beq.n	800fc10 <fm_lcd_date_hour+0xec>
        || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fc02:	4b40      	ldr	r3, [pc, #256]	; (800fd04 <fm_lcd_date_hour+0x1e0>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b04      	cmp	r3, #4
 800fc08:	d106      	bne.n	800fc18 <fm_lcd_date_hour+0xf4>
 800fc0a:	7bbb      	ldrb	r3, [r7, #14]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d103      	bne.n	800fc18 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800fc10:	4b3d      	ldr	r3, [pc, #244]	; (800fd08 <fm_lcd_date_hour+0x1e4>)
 800fc12:	2201      	movs	r2, #1
 800fc14:	601a      	str	r2, [r3, #0]
 800fc16:	e016      	b.n	800fc46 <fm_lcd_date_hour+0x122>
        }
        else if (event_id == EVENT_KEY_DOWN
 800fc18:	7bbb      	ldrb	r3, [r7, #14]
 800fc1a:	2b03      	cmp	r3, #3
 800fc1c:	d010      	beq.n	800fc40 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fc1e:	4b39      	ldr	r3, [pc, #228]	; (800fd04 <fm_lcd_date_hour+0x1e0>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d102      	bne.n	800fc2c <fm_lcd_date_hour+0x108>
 800fc26:	7bbb      	ldrb	r3, [r7, #14]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d009      	beq.n	800fc40 <fm_lcd_date_hour+0x11c>
        || event_id == EVENT_KEY_UP
 800fc2c:	7bbb      	ldrb	r3, [r7, #14]
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d006      	beq.n	800fc40 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fc32:	4b34      	ldr	r3, [pc, #208]	; (800fd04 <fm_lcd_date_hour+0x1e0>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	d105      	bne.n	800fc46 <fm_lcd_date_hour+0x122>
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d102      	bne.n	800fc46 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fc40:	4b31      	ldr	r3, [pc, #196]	; (800fd08 <fm_lcd_date_hour+0x1e4>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
        }

        if (blink == 1)
 800fc46:	4b30      	ldr	r3, [pc, #192]	; (800fd08 <fm_lcd_date_hour+0x1e4>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d152      	bne.n	800fcf4 <fm_lcd_date_hour+0x1d0>
        {
            if (field == DAY)
 800fc4e:	7b7b      	ldrb	r3, [r7, #13]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d108      	bne.n	800fc66 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fc54:	2100      	movs	r1, #0
 800fc56:	2001      	movs	r0, #1
 800fc58:	f000 fce8 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	2000      	movs	r0, #0
 800fc60:	f000 fce4 	bl	801062c <lcd_clear_digit>
 800fc64:	e042      	b.n	800fcec <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MONTH)
 800fc66:	7b7b      	ldrb	r3, [r7, #13]
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d108      	bne.n	800fc7e <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	2003      	movs	r0, #3
 800fc70:	f000 fcdc 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fc74:	2100      	movs	r1, #0
 800fc76:	2002      	movs	r0, #2
 800fc78:	f000 fcd8 	bl	801062c <lcd_clear_digit>
 800fc7c:	e036      	b.n	800fcec <fm_lcd_date_hour+0x1c8>
            }
            else if (field == YEAR)
 800fc7e:	7b7b      	ldrb	r3, [r7, #13]
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d110      	bne.n	800fca6 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fc84:	2100      	movs	r1, #0
 800fc86:	2007      	movs	r0, #7
 800fc88:	f000 fcd0 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	2006      	movs	r0, #6
 800fc90:	f000 fccc 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fc94:	2100      	movs	r1, #0
 800fc96:	2005      	movs	r0, #5
 800fc98:	f000 fcc8 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	2004      	movs	r0, #4
 800fca0:	f000 fcc4 	bl	801062c <lcd_clear_digit>
 800fca4:	e022      	b.n	800fcec <fm_lcd_date_hour+0x1c8>
            }
            else if (field == HOUR)
 800fca6:	7b7b      	ldrb	r3, [r7, #13]
 800fca8:	2b03      	cmp	r3, #3
 800fcaa:	d108      	bne.n	800fcbe <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fcac:	2101      	movs	r1, #1
 800fcae:	2002      	movs	r0, #2
 800fcb0:	f000 fcbc 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fcb4:	2101      	movs	r1, #1
 800fcb6:	2001      	movs	r0, #1
 800fcb8:	f000 fcb8 	bl	801062c <lcd_clear_digit>
 800fcbc:	e016      	b.n	800fcec <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MINUTE)
 800fcbe:	7b7b      	ldrb	r3, [r7, #13]
 800fcc0:	2b04      	cmp	r3, #4
 800fcc2:	d108      	bne.n	800fcd6 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	2004      	movs	r0, #4
 800fcc8:	f000 fcb0 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fccc:	2101      	movs	r1, #1
 800fcce:	2003      	movs	r0, #3
 800fcd0:	f000 fcac 	bl	801062c <lcd_clear_digit>
 800fcd4:	e00a      	b.n	800fcec <fm_lcd_date_hour+0x1c8>
            }
            else if (field == SECOND)
 800fcd6:	7b7b      	ldrb	r3, [r7, #13]
 800fcd8:	2b05      	cmp	r3, #5
 800fcda:	d107      	bne.n	800fcec <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fcdc:	2101      	movs	r1, #1
 800fcde:	2006      	movs	r0, #6
 800fce0:	f000 fca4 	bl	801062c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fce4:	2101      	movs	r1, #1
 800fce6:	2005      	movs	r0, #5
 800fce8:	f000 fca0 	bl	801062c <lcd_clear_digit>
            }

            blink = 0;
 800fcec:	4b06      	ldr	r3, [pc, #24]	; (800fd08 <fm_lcd_date_hour+0x1e4>)
 800fcee:	2200      	movs	r2, #0
 800fcf0:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800fcf2:	e002      	b.n	800fcfa <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800fcf4:	4b04      	ldr	r3, [pc, #16]	; (800fd08 <fm_lcd_date_hour+0x1e4>)
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	601a      	str	r2, [r3, #0]
}
 800fcfa:	bf00      	nop
 800fcfc:	3738      	adds	r7, #56	; 0x38
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20001dbb 	.word	0x20001dbb
 800fd08:	2000011c 	.word	0x2000011c

0800fd0c <fm_lcd_format_number_in_line>:
 * @param Longitud de este String.
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60b9      	str	r1, [r7, #8]
 800fd14:	607a      	str	r2, [r7, #4]
 800fd16:	603b      	str	r3, [r7, #0]
 800fd18:	4603      	mov	r3, r0
 800fd1a:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	4a09      	ldr	r2, [pc, #36]	; (800fd4c <fm_lcd_format_number_in_line+0x40>)
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f005 f8c1 	bl	8014eb0 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fd2e:	e008      	b.n	800fd42 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d105      	bne.n	800fd42 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	4a05      	ldr	r2, [pc, #20]	; (800fd50 <fm_lcd_format_number_in_line+0x44>)
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f005 f8b7 	bl	8014eb0 <sniprintf>
}
 800fd42:	bf00      	nop
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	080159c8 	.word	0x080159c8
 800fd50:	080159d0 	.word	0x080159d0

0800fd54 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fd54:	b590      	push	{r4, r7, lr}
 800fd56:	b087      	sub	sp, #28
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	f107 0408 	add.w	r4, r7, #8
 800fd5e:	e884 0003 	stmia.w	r4, {r0, r1}
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fd66:	7b3b      	ldrb	r3, [r7, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d101      	bne.n	800fd70 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e031      	b.n	800fdd4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7f0 fba7 	bl	80004c4 <strlen>
 800fd76:	4603      	mov	r3, r0
 800fd78:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	3302      	adds	r3, #2
 800fd7e:	683a      	ldr	r2, [r7, #0]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	dc02      	bgt.n	800fd8a <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fd84:	f04f 33ff 	mov.w	r3, #4294967295
 800fd88:	e024      	b.n	800fdd4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fd8a:	7b3b      	ldrb	r3, [r7, #12]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	1a9b      	subs	r3, r3, r2
 800fd92:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fd94:	e00b      	b.n	800fdae <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	441a      	add	r2, r3
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	6879      	ldr	r1, [r7, #4]
 800fda2:	440b      	add	r3, r1
 800fda4:	7812      	ldrb	r2, [r2, #0]
 800fda6:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d1ef      	bne.n	800fd96 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	441a      	add	r2, r3
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	440b      	add	r3, r1
 800fdc4:	7812      	ldrb	r2, [r2, #0]
 800fdc6:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	4413      	add	r3, r2
 800fdce:	222e      	movs	r2, #46	; 0x2e
 800fdd0:	701a      	strb	r2, [r3, #0]

    return (0);
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	371c      	adds	r7, #28
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd90      	pop	{r4, r7, pc}

0800fddc <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fddc:	b490      	push	{r4, r7}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	f107 0408 	add.w	r4, r7, #8
 800fde6:	e884 0003 	stmia.w	r4, {r0, r1}
 800fdea:	603b      	str	r3, [r7, #0]
 800fdec:	4613      	mov	r3, r2
 800fdee:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	2b13      	cmp	r3, #19
 800fdf8:	dc02      	bgt.n	800fe00 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800fdfe:	e07d      	b.n	800fefc <fm_lcd_fp_to_str+0x120>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	220a      	movs	r2, #10
 800fe04:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe08:	fb01 f202 	mul.w	r2, r1, r2
 800fe0c:	1a9b      	subs	r3, r3, r2
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe14:	440b      	add	r3, r1
 800fe16:	3230      	adds	r2, #48	; 0x30
 800fe18:	b2d2      	uxtb	r2, r2
 800fe1a:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / ten_multiplier)
 800fe20:	e015      	b.n	800fe4e <fm_lcd_fp_to_str+0x72>
    {
        idx_1++;
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	3301      	adds	r3, #1
 800fe26:	61fb      	str	r3, [r7, #28]
        fp.num /= ten_multiplier;
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	220a      	movs	r2, #10
 800fe2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe30:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	220a      	movs	r2, #10
 800fe36:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe3a:	fb01 f202 	mul.w	r2, r1, r2
 800fe3e:	1a9b      	subs	r3, r3, r2
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe46:	440b      	add	r3, r1
 800fe48:	3230      	adds	r2, #48	; 0x30
 800fe4a:	b2d2      	uxtb	r2, r2
 800fe4c:	701a      	strb	r2, [r3, #0]
    while (fp.num / ten_multiplier)
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	220a      	movs	r2, #10
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d2e5      	bcs.n	800fe22 <fm_lcd_fp_to_str+0x46>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d116      	bne.n	800fe8a <fm_lcd_fp_to_str+0xae>
    {
        while (idx_1 < fp.res)
 800fe5c:	e010      	b.n	800fe80 <fm_lcd_fp_to_str+0xa4>
        {
            idx_1++;
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	3301      	adds	r3, #1
 800fe62:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	220a      	movs	r2, #10
 800fe68:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe6c:	fb01 f202 	mul.w	r2, r1, r2
 800fe70:	1a9b      	subs	r3, r3, r2
 800fe72:	b2da      	uxtb	r2, r3
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe78:	440b      	add	r3, r1
 800fe7a:	3230      	adds	r2, #48	; 0x30
 800fe7c:	b2d2      	uxtb	r2, r2
 800fe7e:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fe80:	7b3b      	ldrb	r3, [r7, #12]
 800fe82:	461a      	mov	r2, r3
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	4293      	cmp	r3, r2
 800fe88:	dbe9      	blt.n	800fe5e <fm_lcd_fp_to_str+0x82>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fe8a:	79fb      	ldrb	r3, [r7, #7]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00d      	beq.n	800feac <fm_lcd_fp_to_str+0xd0>
    {
        while (idx_1 < str_width - 1)
 800fe90:	e007      	b.n	800fea2 <fm_lcd_fp_to_str+0xc6>
        {
            idx_1++;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3301      	adds	r3, #1
 800fe96:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9c:	4413      	add	r3, r2
 800fe9e:	79fa      	ldrb	r2, [r7, #7]
 800fea0:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	69fa      	ldr	r2, [r7, #28]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	dbf2      	blt.n	800fe92 <fm_lcd_fp_to_str+0xb6>
        }
    }
    p_str[idx_1] = '\0';
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feb0:	4413      	add	r3, r2
 800feb2:	2200      	movs	r2, #0
 800feb4:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	3b01      	subs	r3, #1
 800feba:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fec0:	e017      	b.n	800fef2 <fm_lcd_fp_to_str+0x116>
    {
        ch_temp = p_str[idx_1];
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fec6:	4413      	add	r3, r2
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed0:	441a      	add	r2, r3
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fed6:	440b      	add	r3, r1
 800fed8:	7812      	ldrb	r2, [r2, #0]
 800feda:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fee0:	4413      	add	r3, r2
 800fee2:	7cfa      	ldrb	r2, [r7, #19]
 800fee4:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	3b01      	subs	r3, #1
 800feea:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	3301      	adds	r3, #1
 800fef0:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fef2:	69fa      	ldr	r2, [r7, #28]
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	dce3      	bgt.n	800fec2 <fm_lcd_fp_to_str+0xe6>
    }

    return (0);
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3720      	adds	r7, #32
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bc90      	pop	{r4, r7}
 800ff04:	4770      	bx	lr

0800ff06 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800ff0a:	f000 fb67 	bl	80105dc <lcd_clear_all>
    lcd_init();
 800ff0e:	f001 f9fd 	bl	801130c <lcd_init>
}
 800ff12:	bf00      	nop
 800ff14:	bd80      	pop	{r7, pc}
	...

0800ff18 <fm_lcd_k_factor>:
 * @param Evento actual con el que se imprime esta pantalla.
 * @param Dígito a modificar el cual debe titilar.
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b08e      	sub	sp, #56	; 0x38
 800ff1c:	af02      	add	r7, sp, #8
 800ff1e:	4603      	mov	r3, r0
 800ff20:	460a      	mov	r2, r1
 800ff22:	71fb      	strb	r3, [r7, #7]
 800ff24:	4613      	mov	r3, r2
 800ff26:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800ff28:	f107 0320 	add.w	r3, r7, #32
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff f834 	bl	800ef9c <fm_factory_get_k_factor>
 800ff34:	2314      	movs	r3, #20
 800ff36:	9301      	str	r3, [sp, #4]
 800ff38:	f107 030c 	add.w	r3, r7, #12
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	2309      	movs	r3, #9
 800ff40:	2230      	movs	r2, #48	; 0x30
 800ff42:	f107 0120 	add.w	r1, r7, #32
 800ff46:	c903      	ldmia	r1, {r0, r1}
 800ff48:	f7ff ff48 	bl	800fddc <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800ff4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff50:	2100      	movs	r1, #0
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff f822 	bl	800ef9c <fm_factory_get_k_factor>
 800ff58:	f107 020c 	add.w	r2, r7, #12
 800ff5c:	2314      	movs	r3, #20
 800ff5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ff62:	c903      	ldmia	r1, {r0, r1}
 800ff64:	f7ff fef6 	bl	800fd54 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ff68:	f107 030c 	add.w	r3, r7, #12
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f000 f91c 	bl	80101ac <fm_lcd_puts>

    if (event_id == EVENT_KEY_ENTER
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	2b04      	cmp	r3, #4
 800ff78:	d006      	beq.n	800ff88 <fm_lcd_k_factor+0x70>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800ff7a:	4b1e      	ldr	r3, [pc, #120]	; (800fff4 <fm_lcd_k_factor+0xdc>)
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	2b04      	cmp	r3, #4
 800ff80:	d106      	bne.n	800ff90 <fm_lcd_k_factor+0x78>
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d103      	bne.n	800ff90 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800ff88:	4b1b      	ldr	r3, [pc, #108]	; (800fff8 <fm_lcd_k_factor+0xe0>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	e016      	b.n	800ffbe <fm_lcd_k_factor+0xa6>
    }
    else if (event_id == EVENT_KEY_DOWN
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	2b03      	cmp	r3, #3
 800ff94:	d010      	beq.n	800ffb8 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800ff96:	4b17      	ldr	r3, [pc, #92]	; (800fff4 <fm_lcd_k_factor+0xdc>)
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d102      	bne.n	800ffa4 <fm_lcd_k_factor+0x8c>
 800ff9e:	79fb      	ldrb	r3, [r7, #7]
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d009      	beq.n	800ffb8 <fm_lcd_k_factor+0xa0>
    || event_id == EVENT_KEY_UP
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d006      	beq.n	800ffb8 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800ffaa:	4b12      	ldr	r3, [pc, #72]	; (800fff4 <fm_lcd_k_factor+0xdc>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d105      	bne.n	800ffbe <fm_lcd_k_factor+0xa6>
 800ffb2:	79fb      	ldrb	r3, [r7, #7]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d102      	bne.n	800ffbe <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800ffb8:	4b0f      	ldr	r3, [pc, #60]	; (800fff8 <fm_lcd_k_factor+0xe0>)
 800ffba:	2200      	movs	r2, #0
 800ffbc:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 800ffbe:	4b0e      	ldr	r3, [pc, #56]	; (800fff8 <fm_lcd_k_factor+0xe0>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d10b      	bne.n	800ffde <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800ffc6:	79bb      	ldrb	r3, [r7, #6]
 800ffc8:	f1c3 0307 	rsb	r3, r3, #7
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 fb2b 	bl	801062c <lcd_clear_digit>
        blink = 0;
 800ffd6:	4b08      	ldr	r3, [pc, #32]	; (800fff8 <fm_lcd_k_factor+0xe0>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	e002      	b.n	800ffe4 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800ffde:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <fm_lcd_k_factor+0xe0>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	200b      	movs	r0, #11
 800ffe8:	f001 fc46 	bl	8011878 <lcd_set_symbol>
}
 800ffec:	bf00      	nop
 800ffee:	3730      	adds	r7, #48	; 0x30
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	20001dbb 	.word	0x20001dbb
 800fff8:	2000011c 	.word	0x2000011c

0800fffc <fm_lcd_k_lin>:
 * @param Evento actual con el que se imprimió esta pantalla.
 * @param Digito a modificar, el cual debe parpadear.
 */
void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id,
sel_digit_k_lin_t digit_lin_modify)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b090      	sub	sp, #64	; 0x40
 8010000:	af02      	add	r7, sp, #8
 8010002:	4603      	mov	r3, r0
 8010004:	71fb      	strb	r3, [r7, #7]
 8010006:	460b      	mov	r3, r1
 8010008:	71bb      	strb	r3, [r7, #6]
 801000a:	4613      	mov	r3, r2
 801000c:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 801000e:	f107 0320 	add.w	r3, r7, #32
 8010012:	79fa      	ldrb	r2, [r7, #7]
 8010014:	4611      	mov	r1, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f7fe ffc0 	bl	800ef9c <fm_factory_get_k_factor>
 801001c:	2314      	movs	r3, #20
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	f107 030c 	add.w	r3, r7, #12
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	2309      	movs	r3, #9
 8010028:	2230      	movs	r2, #48	; 0x30
 801002a:	f107 0120 	add.w	r1, r7, #32
 801002e:	c903      	ldmia	r1, {r0, r1}
 8010030:	f7ff fed4 	bl	800fddc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg, sizeof(lcd_msg));
 8010034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010038:	79fa      	ldrb	r2, [r7, #7]
 801003a:	4611      	mov	r1, r2
 801003c:	4618      	mov	r0, r3
 801003e:	f7fe ffad 	bl	800ef9c <fm_factory_get_k_factor>
 8010042:	f107 020c 	add.w	r2, r7, #12
 8010046:	2314      	movs	r3, #20
 8010048:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801004c:	c903      	ldmia	r1, {r0, r1}
 801004e:	f7ff fe81 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010052:	f107 030c 	add.w	r3, r7, #12
 8010056:	2100      	movs	r1, #0
 8010058:	4618      	mov	r0, r3
 801005a:	f000 f8a7 	bl	80101ac <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 801005e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010062:	79fa      	ldrb	r2, [r7, #7]
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7fe ff48 	bl	800eefc <fm_factory_get_frec_lin>
 801006c:	2314      	movs	r3, #20
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	f107 030c 	add.w	r3, r7, #12
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	2308      	movs	r3, #8
 8010078:	2230      	movs	r2, #48	; 0x30
 801007a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801007e:	c903      	ldmia	r1, {r0, r1}
 8010080:	f7ff feac 	bl	800fddc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010084:	f107 030c 	add.w	r3, r7, #12
 8010088:	2101      	movs	r1, #1
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f88e 	bl	80101ac <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 8010090:	2101      	movs	r1, #1
 8010092:	2000      	movs	r0, #0
 8010094:	f000 faca 	bl	801062c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 8010098:	2101      	movs	r1, #1
 801009a:	2001      	movs	r0, #1
 801009c:	f000 fac6 	bl	801062c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 80100a0:	2101      	movs	r1, #1
 80100a2:	2002      	movs	r0, #2
 80100a4:	f000 fac2 	bl	801062c <lcd_clear_digit>

    if (event_id == EVENT_KEY_ENTER
 80100a8:	79bb      	ldrb	r3, [r7, #6]
 80100aa:	2b04      	cmp	r3, #4
 80100ac:	d006      	beq.n	80100bc <fm_lcd_k_lin+0xc0>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 80100ae:	4b3d      	ldr	r3, [pc, #244]	; (80101a4 <fm_lcd_k_lin+0x1a8>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	d106      	bne.n	80100c4 <fm_lcd_k_lin+0xc8>
 80100b6:	79bb      	ldrb	r3, [r7, #6]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d103      	bne.n	80100c4 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 80100bc:	4b3a      	ldr	r3, [pc, #232]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 80100be:	2201      	movs	r2, #1
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	e016      	b.n	80100f2 <fm_lcd_k_lin+0xf6>
    }
    else if (event_id == EVENT_KEY_DOWN
 80100c4:	79bb      	ldrb	r3, [r7, #6]
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d010      	beq.n	80100ec <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 80100ca:	4b36      	ldr	r3, [pc, #216]	; (80101a4 <fm_lcd_k_lin+0x1a8>)
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d102      	bne.n	80100d8 <fm_lcd_k_lin+0xdc>
 80100d2:	79bb      	ldrb	r3, [r7, #6]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d009      	beq.n	80100ec <fm_lcd_k_lin+0xf0>
    || event_id == EVENT_KEY_UP
 80100d8:	79bb      	ldrb	r3, [r7, #6]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d006      	beq.n	80100ec <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 80100de:	4b31      	ldr	r3, [pc, #196]	; (80101a4 <fm_lcd_k_lin+0x1a8>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	d105      	bne.n	80100f2 <fm_lcd_k_lin+0xf6>
 80100e6:	79bb      	ldrb	r3, [r7, #6]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d102      	bne.n	80100f2 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 80100ec:	4b2e      	ldr	r3, [pc, #184]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
    }

    if (digit_lin_modify <= DIG_LIN_7)
 80100f2:	797b      	ldrb	r3, [r7, #5]
 80100f4:	2b07      	cmp	r3, #7
 80100f6:	d813      	bhi.n	8010120 <fm_lcd_k_lin+0x124>
    {
        if (blink == 1)
 80100f8:	4b2b      	ldr	r3, [pc, #172]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d10b      	bne.n	8010118 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 8010100:	797b      	ldrb	r3, [r7, #5]
 8010102:	f1c3 0307 	rsb	r3, r3, #7
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2100      	movs	r1, #0
 801010a:	4618      	mov	r0, r3
 801010c:	f000 fa8e 	bl	801062c <lcd_clear_digit>
            blink = 0;
 8010110:	4b25      	ldr	r3, [pc, #148]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	e016      	b.n	8010146 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010118:	4b23      	ldr	r3, [pc, #140]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 801011a:	2201      	movs	r2, #1
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	e012      	b.n	8010146 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if (blink == 1)
 8010120:	4b21      	ldr	r3, [pc, #132]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b01      	cmp	r3, #1
 8010126:	d10b      	bne.n	8010140 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010128:	797b      	ldrb	r3, [r7, #5]
 801012a:	f1c3 030e 	rsb	r3, r3, #14
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2101      	movs	r1, #1
 8010132:	4618      	mov	r0, r3
 8010134:	f000 fa7a 	bl	801062c <lcd_clear_digit>
            blink = 0;
 8010138:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 801013a:	2200      	movs	r2, #0
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	e002      	b.n	8010146 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010140:	4b19      	ldr	r3, [pc, #100]	; (80101a8 <fm_lcd_k_lin+0x1ac>)
 8010142:	2201      	movs	r2, #1
 8010144:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 8010146:	2100      	movs	r1, #0
 8010148:	2010      	movs	r0, #16
 801014a:	f001 fb95 	bl	8011878 <lcd_set_symbol>
    if (k_sel == K_LIN_1)
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	2b01      	cmp	r3, #1
 8010152:	d103      	bne.n	801015c <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 8010154:	2100      	movs	r1, #0
 8010156:	2011      	movs	r0, #17
 8010158:	f001 fb8e 	bl	8011878 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_2)
 801015c:	79fb      	ldrb	r3, [r7, #7]
 801015e:	2b02      	cmp	r3, #2
 8010160:	d103      	bne.n	801016a <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 8010162:	2100      	movs	r1, #0
 8010164:	2012      	movs	r0, #18
 8010166:	f001 fb87 	bl	8011878 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_3)
 801016a:	79fb      	ldrb	r3, [r7, #7]
 801016c:	2b03      	cmp	r3, #3
 801016e:	d103      	bne.n	8010178 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 8010170:	2100      	movs	r1, #0
 8010172:	2013      	movs	r0, #19
 8010174:	f001 fb80 	bl	8011878 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_4)
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b04      	cmp	r3, #4
 801017c:	d103      	bne.n	8010186 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 801017e:	2100      	movs	r1, #0
 8010180:	2014      	movs	r0, #20
 8010182:	f001 fb79 	bl	8011878 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_5)
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	2b05      	cmp	r3, #5
 801018a:	d103      	bne.n	8010194 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 801018c:	2100      	movs	r1, #0
 801018e:	2015      	movs	r0, #21
 8010190:	f001 fb72 	bl	8011878 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ, 0x00);
 8010194:	2100      	movs	r1, #0
 8010196:	2016      	movs	r0, #22
 8010198:	f001 fb6e 	bl	8011878 <lcd_set_symbol>
}
 801019c:	bf00      	nop
 801019e:	3738      	adds	r7, #56	; 0x38
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	20001dbb 	.word	0x20001dbb
 80101a8:	2000011c 	.word	0x2000011c

080101ac <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 80101bc:	78fb      	ldrb	r3, [r7, #3]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d102      	bne.n	80101c8 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 80101c2:	2308      	movs	r3, #8
 80101c4:	73bb      	strb	r3, [r7, #14]
 80101c6:	e026      	b.n	8010216 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 80101c8:	2307      	movs	r3, #7
 80101ca:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 80101cc:	e023      	b.n	8010216 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	2b2f      	cmp	r3, #47	; 0x2f
 80101d4:	d903      	bls.n	80101de <fm_lcd_puts+0x32>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b39      	cmp	r3, #57	; 0x39
 80101dc:	d907      	bls.n	80101ee <fm_lcd_puts+0x42>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b20      	cmp	r3, #32
 80101e4:	d003      	beq.n	80101ee <fm_lcd_puts+0x42>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	2b2e      	cmp	r3, #46	; 0x2e
 80101ec:	d106      	bne.n	80101fc <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	78fa      	ldrb	r2, [r7, #3]
 80101f4:	7bf9      	ldrb	r1, [r7, #15]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f001 f88e 	bl	8011318 <lcd_put_char>
        }
        col++;
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	3301      	adds	r3, #1
 8010200:	73fb      	strb	r3, [r7, #15]
        c++;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3301      	adds	r3, #1
 8010206:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2b2e      	cmp	r3, #46	; 0x2e
 801020e:	d102      	bne.n	8010216 <fm_lcd_puts+0x6a>
        {
            col--;
 8010210:	7bfb      	ldrb	r3, [r7, #15]
 8010212:	3b01      	subs	r3, #1
 8010214:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <fm_lcd_puts+0x7a>
 801021e:	7bfa      	ldrb	r2, [r7, #15]
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	429a      	cmp	r2, r3
 8010224:	d3d3      	bcc.n	80101ce <fm_lcd_puts+0x22>
        }
    }
}
 8010226:	bf00      	nop
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 801022e:	b580      	push	{r7, lr}
 8010230:	af00      	add	r7, sp, #0
    lcd_refresh();
 8010232:	f001 fa6f 	bl	8011714 <lcd_refresh>
}
 8010236:	bf00      	nop
 8010238:	bd80      	pop	{r7, pc}

0801023a <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b0b8      	sub	sp, #224	; 0xe0
 801023e:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 8010240:	f107 0318 	add.w	r3, r7, #24
 8010244:	4618      	mov	r0, r3
 8010246:	f004 fd5f 	bl	8014d08 <fmc_get_ttl>
 801024a:	2314      	movs	r3, #20
 801024c:	9301      	str	r3, [sp, #4]
 801024e:	1d3b      	adds	r3, r7, #4
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	2309      	movs	r3, #9
 8010254:	2220      	movs	r2, #32
 8010256:	f107 0120 	add.w	r1, r7, #32
 801025a:	c903      	ldmia	r1, {r0, r1}
 801025c:	f7ff fdbe 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 8010260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010264:	4618      	mov	r0, r3
 8010266:	f004 fd4f 	bl	8014d08 <fmc_get_ttl>
 801026a:	1d3a      	adds	r2, r7, #4
 801026c:	2314      	movs	r3, #20
 801026e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010272:	c903      	ldmia	r1, {r0, r1}
 8010274:	f7ff fd6e 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010278:	1d3b      	adds	r3, r7, #4
 801027a:	2100      	movs	r1, #0
 801027c:	4618      	mov	r0, r3
 801027e:	f7ff ff95 	bl	80101ac <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 8010282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010286:	4618      	mov	r0, r3
 8010288:	f004 fcd8 	bl	8014c3c <fmc_get_rate>
 801028c:	2314      	movs	r3, #20
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	1d3b      	adds	r3, r7, #4
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	2308      	movs	r3, #8
 8010296:	2220      	movs	r2, #32
 8010298:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801029c:	c903      	ldmia	r1, {r0, r1}
 801029e:	f7ff fd9d 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 80102a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80102a6:	4618      	mov	r0, r3
 80102a8:	f004 fcc8 	bl	8014c3c <fmc_get_rate>
 80102ac:	1d3a      	adds	r2, r7, #4
 80102ae:	2314      	movs	r3, #20
 80102b0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80102b4:	c903      	ldmia	r1, {r0, r1}
 80102b6:	f7ff fd4d 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80102ba:	1d3b      	adds	r3, r7, #4
 80102bc:	2101      	movs	r1, #1
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ff ff74 	bl	80101ac <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 80102c4:	2100      	movs	r1, #0
 80102c6:	2005      	movs	r0, #5
 80102c8:	f001 fad6 	bl	8011878 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 80102cc:	2100      	movs	r1, #0
 80102ce:	2002      	movs	r0, #2
 80102d0:	f001 fad2 	bl	8011878 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 80102d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80102d8:	4618      	mov	r0, r3
 80102da:	f004 fd15 	bl	8014d08 <fmc_get_ttl>
 80102de:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80102e2:	2100      	movs	r1, #0
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 fe87 	bl	8011ff8 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 80102ea:	2100      	movs	r1, #0
 80102ec:	2007      	movs	r0, #7
 80102ee:	f001 fac3 	bl	8011878 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 80102f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80102f6:	4618      	mov	r0, r3
 80102f8:	f004 fd06 	bl	8014d08 <fmc_get_ttl>
 80102fc:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8010300:	2100      	movs	r1, #0
 8010302:	4618      	mov	r0, r3
 8010304:	f001 fe36 	bl	8011f74 <lcd_set_time_unit>
}
 8010308:	bf00      	nop
 801030a:	37d8      	adds	r7, #216	; 0xd8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b0a6      	sub	sp, #152	; 0x98
 8010314:	af02      	add	r7, sp, #8
 8010316:	4603      	mov	r3, r0
 8010318:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 801031a:	f107 0320 	add.w	r3, r7, #32
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fed6 	bl	800f0d0 <fm_factory_get_units_tim>
 8010324:	2314      	movs	r3, #20
 8010326:	9301      	str	r3, [sp, #4]
 8010328:	f107 030c 	add.w	r3, r7, #12
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	2308      	movs	r3, #8
 8010330:	2230      	movs	r2, #48	; 0x30
 8010332:	f107 0120 	add.w	r1, r7, #32
 8010336:	c903      	ldmia	r1, {r0, r1}
 8010338:	f7ff fd50 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 801033c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010340:	4618      	mov	r0, r3
 8010342:	f7fe fec5 	bl	800f0d0 <fm_factory_get_units_tim>
 8010346:	f107 020c 	add.w	r2, r7, #12
 801034a:	2314      	movs	r3, #20
 801034c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010350:	c903      	ldmia	r1, {r0, r1}
 8010352:	f7ff fcff 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010356:	f107 030c 	add.w	r3, r7, #12
 801035a:	2101      	movs	r1, #1
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff ff25 	bl	80101ac <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 8010362:	79fb      	ldrb	r3, [r7, #7]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d106      	bne.n	8010376 <fm_lcd_units_tim+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010368:	4b35      	ldr	r3, [pc, #212]	; (8010440 <fm_lcd_units_tim+0x130>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d005      	beq.n	801037c <fm_lcd_units_tim+0x6c>
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	2b01      	cmp	r3, #1
 8010374:	d102      	bne.n	801037c <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 8010376:	4b33      	ldr	r3, [pc, #204]	; (8010444 <fm_lcd_units_tim+0x134>)
 8010378:	2200      	movs	r2, #0
 801037a:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 801037c:	4b31      	ldr	r3, [pc, #196]	; (8010444 <fm_lcd_units_tim+0x134>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d146      	bne.n	8010412 <fm_lcd_units_tim+0x102>
    {
        if (fm_factory_get_units_tim().res == DECIMAL_1)
 8010384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe fea1 	bl	800f0d0 <fm_factory_get_units_tim>
 801038e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010392:	2b01      	cmp	r3, #1
 8010394:	d109      	bne.n	80103aa <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 8010396:	2305      	movs	r3, #5
 8010398:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 801039c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103a0:	4619      	mov	r1, r3
 80103a2:	2001      	movs	r0, #1
 80103a4:	f000 fc80 	bl	8010ca8 <lcd_clear_point>
 80103a8:	e024      	b.n	80103f4 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_2)
 80103aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe fe8e 	bl	800f0d0 <fm_factory_get_units_tim>
 80103b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d109      	bne.n	80103d0 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 80103bc:	2304      	movs	r3, #4
 80103be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80103c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103c6:	4619      	mov	r1, r3
 80103c8:	2001      	movs	r0, #1
 80103ca:	f000 fc6d 	bl	8010ca8 <lcd_clear_point>
 80103ce:	e011      	b.n	80103f4 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_3)
 80103d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fe fe7b 	bl	800f0d0 <fm_factory_get_units_tim>
 80103da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d108      	bne.n	80103f4 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 80103e2:	2303      	movs	r3, #3
 80103e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80103e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103ec:	4619      	mov	r1, r3
 80103ee:	2001      	movs	r0, #1
 80103f0:	f000 fc5a 	bl	8010ca8 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 80103f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103f8:	4618      	mov	r0, r3
 80103fa:	f004 fc1f 	bl	8014c3c <fmc_get_rate>
 80103fe:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8010402:	2100      	movs	r1, #0
 8010404:	4618      	mov	r0, r3
 8010406:	f000 fcfb 	bl	8010e00 <lcd_clear_time_unit>

        blink = 0;
 801040a:	4b0e      	ldr	r3, [pc, #56]	; (8010444 <fm_lcd_units_tim+0x134>)
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	e00d      	b.n	801042e <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 8010412:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010416:	4618      	mov	r0, r3
 8010418:	f004 fc10 	bl	8014c3c <fmc_get_rate>
 801041c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010420:	2100      	movs	r1, #0
 8010422:	4618      	mov	r0, r3
 8010424:	f001 fda6 	bl	8011f74 <lcd_set_time_unit>
        blink = 1;
 8010428:	4b06      	ldr	r3, [pc, #24]	; (8010444 <fm_lcd_units_tim+0x134>)
 801042a:	2201      	movs	r2, #1
 801042c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 801042e:	2100      	movs	r1, #0
 8010430:	2002      	movs	r0, #2
 8010432:	f001 fa21 	bl	8011878 <lcd_set_symbol>
}
 8010436:	bf00      	nop
 8010438:	3790      	adds	r7, #144	; 0x90
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	20001dbb 	.word	0x20001dbb
 8010444:	2000011c 	.word	0x2000011c

08010448 <fm_lcd_units_vol>:
 * TTL.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b0a6      	sub	sp, #152	; 0x98
 801044c:	af02      	add	r7, sp, #8
 801044e:	4603      	mov	r3, r0
 8010450:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS, lcd_msg,
 8010452:	f107 0320 	add.w	r3, r7, #32
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fe4c 	bl	800f0f4 <fm_factory_get_units_vol>
 801045c:	2314      	movs	r3, #20
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	f107 030c 	add.w	r3, r7, #12
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	2309      	movs	r3, #9
 8010468:	2230      	movs	r2, #48	; 0x30
 801046a:	f107 0120 	add.w	r1, r7, #32
 801046e:	c903      	ldmia	r1, {r0, r1}
 8010470:	f7ff fcb4 	bl	800fddc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 8010474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010478:	4618      	mov	r0, r3
 801047a:	f7fe fe3b 	bl	800f0f4 <fm_factory_get_units_vol>
 801047e:	f107 020c 	add.w	r2, r7, #12
 8010482:	2314      	movs	r3, #20
 8010484:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010488:	c903      	ldmia	r1, {r0, r1}
 801048a:	f7ff fc63 	bl	800fd54 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 801048e:	f107 030c 	add.w	r3, r7, #12
 8010492:	2100      	movs	r1, #0
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fe89 	bl	80101ac <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d106      	bne.n	80104ae <fm_lcd_units_vol+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80104a0:	4b37      	ldr	r3, [pc, #220]	; (8010580 <fm_lcd_units_vol+0x138>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d005      	beq.n	80104b4 <fm_lcd_units_vol+0x6c>
 80104a8:	79fb      	ldrb	r3, [r7, #7]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d102      	bne.n	80104b4 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 80104ae:	4b35      	ldr	r3, [pc, #212]	; (8010584 <fm_lcd_units_vol+0x13c>)
 80104b0:	2200      	movs	r2, #0
 80104b2:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 80104b4:	4b33      	ldr	r3, [pc, #204]	; (8010584 <fm_lcd_units_vol+0x13c>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d146      	bne.n	801054a <fm_lcd_units_vol+0x102>
    {
        if (fm_factory_get_units_vol().res == DECIMAL_1)
 80104bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fe fe17 	bl	800f0f4 <fm_factory_get_units_vol>
 80104c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d109      	bne.n	80104e2 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 80104ce:	2306      	movs	r3, #6
 80104d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80104d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80104d8:	4619      	mov	r1, r3
 80104da:	2000      	movs	r0, #0
 80104dc:	f000 fbe4 	bl	8010ca8 <lcd_clear_point>
 80104e0:	e024      	b.n	801052c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_2)
 80104e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fe fe04 	bl	800f0f4 <fm_factory_get_units_vol>
 80104ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d109      	bne.n	8010508 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 80104f4:	2305      	movs	r3, #5
 80104f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80104fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80104fe:	4619      	mov	r1, r3
 8010500:	2000      	movs	r0, #0
 8010502:	f000 fbd1 	bl	8010ca8 <lcd_clear_point>
 8010506:	e011      	b.n	801052c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_3)
 8010508:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801050c:	4618      	mov	r0, r3
 801050e:	f7fe fdf1 	bl	800f0f4 <fm_factory_get_units_vol>
 8010512:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010516:	2b03      	cmp	r3, #3
 8010518:	d108      	bne.n	801052c <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 801051a:	2304      	movs	r3, #4
 801051c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010520:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010524:	4619      	mov	r1, r3
 8010526:	2000      	movs	r0, #0
 8010528:	f000 fbbe 	bl	8010ca8 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801052c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010530:	4618      	mov	r0, r3
 8010532:	f004 fb43 	bl	8014bbc <fmc_get_acm>
 8010536:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801053a:	2100      	movs	r1, #0
 801053c:	4618      	mov	r0, r3
 801053e:	f000 fca1 	bl	8010e84 <lcd_clear_vol_unit>

        blink = 0;
 8010542:	4b10      	ldr	r3, [pc, #64]	; (8010584 <fm_lcd_units_vol+0x13c>)
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	e00d      	b.n	8010566 <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801054a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801054e:	4618      	mov	r0, r3
 8010550:	f004 fb34 	bl	8014bbc <fmc_get_acm>
 8010554:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010558:	2100      	movs	r1, #0
 801055a:	4618      	mov	r0, r3
 801055c:	f001 fd4c 	bl	8011ff8 <lcd_set_vol_unit>
        blink = 1;
 8010560:	4b08      	ldr	r3, [pc, #32]	; (8010584 <fm_lcd_units_vol+0x13c>)
 8010562:	2201      	movs	r2, #1
 8010564:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 8010566:	2100      	movs	r1, #0
 8010568:	2006      	movs	r0, #6
 801056a:	f001 f985 	bl	8011878 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 801056e:	2100      	movs	r1, #0
 8010570:	2005      	movs	r0, #5
 8010572:	f001 f981 	bl	8011878 <lcd_set_symbol>
}
 8010576:	bf00      	nop
 8010578:	3790      	adds	r7, #144	; 0x90
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	20001dbb 	.word	0x20001dbb
 8010584:	2000011c 	.word	0x2000011c

08010588 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	4603      	mov	r3, r0
 8010590:	460a      	mov	r2, r1
 8010592:	71fb      	strb	r3, [r7, #7]
 8010594:	4613      	mov	r3, r2
 8010596:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 8010598:	f004 faf6 	bl	8014b88 <fm_version_get>
 801059c:	4601      	mov	r1, r0
 801059e:	f107 020c 	add.w	r2, r7, #12
 80105a2:	230c      	movs	r3, #12
 80105a4:	2001      	movs	r0, #1
 80105a6:	f7ff fbb1 	bl	800fd0c <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80105aa:	f107 030c 	add.w	r3, r7, #12
 80105ae:	2101      	movs	r1, #1
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff fdfb 	bl	80101ac <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 80105b6:	79fb      	ldrb	r3, [r7, #7]
 80105b8:	4619      	mov	r1, r3
 80105ba:	2001      	movs	r0, #1
 80105bc:	f001 f8b0 	bl	8011720 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 80105c0:	79bb      	ldrb	r3, [r7, #6]
 80105c2:	4619      	mov	r1, r3
 80105c4:	2001      	movs	r0, #1
 80105c6:	f001 f8ab 	bl	8011720 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 80105ca:	2100      	movs	r1, #0
 80105cc:	2009      	movs	r0, #9
 80105ce:	f001 f953 	bl	8011878 <lcd_set_symbol>
}
 80105d2:	bf00      	nop
 80105d4:	3718      	adds	r7, #24
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
	...

080105dc <lcd_clear_all>:
 * bits de los segmentos a imprimir.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 80105e2:	f002 f873 	bl	80126cc <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80105e6:	2300      	movs	r3, #0
 80105e8:	607b      	str	r3, [r7, #4]
 80105ea:	e013      	b.n	8010614 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80105ec:	2300      	movs	r3, #0
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	e00a      	b.n	8010608 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 80105f2:	4a0d      	ldr	r2, [pc, #52]	; (8010628 <lcd_clear_all+0x4c>)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	441a      	add	r2, r3
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	4413      	add	r3, r2
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	3301      	adds	r3, #1
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	2b07      	cmp	r3, #7
 801060c:	ddf1      	ble.n	80105f2 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	3301      	adds	r3, #1
 8010612:	607b      	str	r3, [r7, #4]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b01      	cmp	r3, #1
 8010618:	dde8      	ble.n	80105ec <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 801061a:	2000      	movs	r0, #0
 801061c:	f002 f8e6 	bl	80127ec <pcf8553_write_all>
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	20001cfc 	.word	0x20001cfc

0801062c <lcd_clear_digit>:
 * @param Dígito a borrar de la pantalla.
 * @param Fila de este dígito.
 * @retval None
 */
void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	4603      	mov	r3, r0
 8010634:	460a      	mov	r2, r1
 8010636:	71fb      	strb	r3, [r7, #7]
 8010638:	4613      	mov	r3, r2
 801063a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 801063c:	79bb      	ldrb	r3, [r7, #6]
 801063e:	2b00      	cmp	r3, #0
 8010640:	f040 81aa 	bne.w	8010998 <lcd_clear_digit+0x36c>
    {
        switch (digit)
 8010644:	79fb      	ldrb	r3, [r7, #7]
 8010646:	2b07      	cmp	r3, #7
 8010648:	f200 8320 	bhi.w	8010c8c <lcd_clear_digit+0x660>
 801064c:	a201      	add	r2, pc, #4	; (adr r2, 8010654 <lcd_clear_digit+0x28>)
 801064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010652:	bf00      	nop
 8010654:	08010675 	.word	0x08010675
 8010658:	080106d9 	.word	0x080106d9
 801065c:	0801073d 	.word	0x0801073d
 8010660:	080107a1 	.word	0x080107a1
 8010664:	08010805 	.word	0x08010805
 8010668:	08010869 	.word	0x08010869
 801066c:	080108d1 	.word	0x080108d1
 8010670:	08010935 	.word	0x08010935
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 8010674:	4b95      	ldr	r3, [pc, #596]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010676:	7b1b      	ldrb	r3, [r3, #12]
 8010678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801067c:	b2da      	uxtb	r2, r3
 801067e:	4b93      	ldr	r3, [pc, #588]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010680:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 8010682:	4b92      	ldr	r3, [pc, #584]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010684:	7b1b      	ldrb	r3, [r3, #12]
 8010686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801068a:	b2da      	uxtb	r2, r3
 801068c:	4b8f      	ldr	r3, [pc, #572]	; (80108cc <lcd_clear_digit+0x2a0>)
 801068e:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 8010690:	4b8e      	ldr	r3, [pc, #568]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010692:	7c5b      	ldrb	r3, [r3, #17]
 8010694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010698:	b2da      	uxtb	r2, r3
 801069a:	4b8c      	ldr	r3, [pc, #560]	; (80108cc <lcd_clear_digit+0x2a0>)
 801069c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 801069e:	4b8b      	ldr	r3, [pc, #556]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106a0:	7c5b      	ldrb	r3, [r3, #17]
 80106a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	4b88      	ldr	r3, [pc, #544]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106aa:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 80106ac:	4b87      	ldr	r3, [pc, #540]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106ae:	789b      	ldrb	r3, [r3, #2]
 80106b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	4b85      	ldr	r3, [pc, #532]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106b8:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 80106ba:	4b84      	ldr	r3, [pc, #528]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106bc:	789b      	ldrb	r3, [r3, #2]
 80106be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	4b81      	ldr	r3, [pc, #516]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106c6:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 80106c8:	4b80      	ldr	r3, [pc, #512]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106ca:	79db      	ldrb	r3, [r3, #7]
 80106cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	4b7e      	ldr	r3, [pc, #504]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106d4:	71da      	strb	r2, [r3, #7]
            break;
 80106d6:	e2de      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 80106d8:	4b7c      	ldr	r3, [pc, #496]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106da:	7b5b      	ldrb	r3, [r3, #13]
 80106dc:	f023 0302 	bic.w	r3, r3, #2
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	4b7a      	ldr	r3, [pc, #488]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106e4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 80106e6:	4b79      	ldr	r3, [pc, #484]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106e8:	7b5b      	ldrb	r3, [r3, #13]
 80106ea:	f023 0301 	bic.w	r3, r3, #1
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	4b76      	ldr	r3, [pc, #472]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106f2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 80106f4:	4b75      	ldr	r3, [pc, #468]	; (80108cc <lcd_clear_digit+0x2a0>)
 80106f6:	7c9b      	ldrb	r3, [r3, #18]
 80106f8:	f023 0302 	bic.w	r3, r3, #2
 80106fc:	b2da      	uxtb	r2, r3
 80106fe:	4b73      	ldr	r3, [pc, #460]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010700:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 8010702:	4b72      	ldr	r3, [pc, #456]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010704:	7c9b      	ldrb	r3, [r3, #18]
 8010706:	f023 0301 	bic.w	r3, r3, #1
 801070a:	b2da      	uxtb	r2, r3
 801070c:	4b6f      	ldr	r3, [pc, #444]	; (80108cc <lcd_clear_digit+0x2a0>)
 801070e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 8010710:	4b6e      	ldr	r3, [pc, #440]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010712:	78db      	ldrb	r3, [r3, #3]
 8010714:	f023 0301 	bic.w	r3, r3, #1
 8010718:	b2da      	uxtb	r2, r3
 801071a:	4b6c      	ldr	r3, [pc, #432]	; (80108cc <lcd_clear_digit+0x2a0>)
 801071c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 801071e:	4b6b      	ldr	r3, [pc, #428]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010720:	78db      	ldrb	r3, [r3, #3]
 8010722:	f023 0302 	bic.w	r3, r3, #2
 8010726:	b2da      	uxtb	r2, r3
 8010728:	4b68      	ldr	r3, [pc, #416]	; (80108cc <lcd_clear_digit+0x2a0>)
 801072a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 801072c:	4b67      	ldr	r3, [pc, #412]	; (80108cc <lcd_clear_digit+0x2a0>)
 801072e:	7a1b      	ldrb	r3, [r3, #8]
 8010730:	f023 0301 	bic.w	r3, r3, #1
 8010734:	b2da      	uxtb	r2, r3
 8010736:	4b65      	ldr	r3, [pc, #404]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010738:	721a      	strb	r2, [r3, #8]
            break;
 801073a:	e2ac      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 801073c:	4b63      	ldr	r3, [pc, #396]	; (80108cc <lcd_clear_digit+0x2a0>)
 801073e:	7b5b      	ldrb	r3, [r3, #13]
 8010740:	f023 0308 	bic.w	r3, r3, #8
 8010744:	b2da      	uxtb	r2, r3
 8010746:	4b61      	ldr	r3, [pc, #388]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010748:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 801074a:	4b60      	ldr	r3, [pc, #384]	; (80108cc <lcd_clear_digit+0x2a0>)
 801074c:	7b5b      	ldrb	r3, [r3, #13]
 801074e:	f023 0304 	bic.w	r3, r3, #4
 8010752:	b2da      	uxtb	r2, r3
 8010754:	4b5d      	ldr	r3, [pc, #372]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010756:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 8010758:	4b5c      	ldr	r3, [pc, #368]	; (80108cc <lcd_clear_digit+0x2a0>)
 801075a:	7c9b      	ldrb	r3, [r3, #18]
 801075c:	f023 0308 	bic.w	r3, r3, #8
 8010760:	b2da      	uxtb	r2, r3
 8010762:	4b5a      	ldr	r3, [pc, #360]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010764:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 8010766:	4b59      	ldr	r3, [pc, #356]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010768:	7c9b      	ldrb	r3, [r3, #18]
 801076a:	f023 0304 	bic.w	r3, r3, #4
 801076e:	b2da      	uxtb	r2, r3
 8010770:	4b56      	ldr	r3, [pc, #344]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010772:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 8010774:	4b55      	ldr	r3, [pc, #340]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010776:	78db      	ldrb	r3, [r3, #3]
 8010778:	f023 0304 	bic.w	r3, r3, #4
 801077c:	b2da      	uxtb	r2, r3
 801077e:	4b53      	ldr	r3, [pc, #332]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010780:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 8010782:	4b52      	ldr	r3, [pc, #328]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010784:	78db      	ldrb	r3, [r3, #3]
 8010786:	f023 0308 	bic.w	r3, r3, #8
 801078a:	b2da      	uxtb	r2, r3
 801078c:	4b4f      	ldr	r3, [pc, #316]	; (80108cc <lcd_clear_digit+0x2a0>)
 801078e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 8010790:	4b4e      	ldr	r3, [pc, #312]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010792:	7a1b      	ldrb	r3, [r3, #8]
 8010794:	f023 0304 	bic.w	r3, r3, #4
 8010798:	b2da      	uxtb	r2, r3
 801079a:	4b4c      	ldr	r3, [pc, #304]	; (80108cc <lcd_clear_digit+0x2a0>)
 801079c:	721a      	strb	r2, [r3, #8]
            break;
 801079e:	e27a      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 80107a0:	4b4a      	ldr	r3, [pc, #296]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107a2:	7b5b      	ldrb	r3, [r3, #13]
 80107a4:	f023 0320 	bic.w	r3, r3, #32
 80107a8:	b2da      	uxtb	r2, r3
 80107aa:	4b48      	ldr	r3, [pc, #288]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107ac:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 80107ae:	4b47      	ldr	r3, [pc, #284]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107b0:	7b5b      	ldrb	r3, [r3, #13]
 80107b2:	f023 0310 	bic.w	r3, r3, #16
 80107b6:	b2da      	uxtb	r2, r3
 80107b8:	4b44      	ldr	r3, [pc, #272]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107ba:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 80107bc:	4b43      	ldr	r3, [pc, #268]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107be:	7c9b      	ldrb	r3, [r3, #18]
 80107c0:	f023 0320 	bic.w	r3, r3, #32
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	4b41      	ldr	r3, [pc, #260]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107c8:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 80107ca:	4b40      	ldr	r3, [pc, #256]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107cc:	7c9b      	ldrb	r3, [r3, #18]
 80107ce:	f023 0310 	bic.w	r3, r3, #16
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	4b3d      	ldr	r3, [pc, #244]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107d6:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 80107d8:	4b3c      	ldr	r3, [pc, #240]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107da:	78db      	ldrb	r3, [r3, #3]
 80107dc:	f023 0310 	bic.w	r3, r3, #16
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	4b3a      	ldr	r3, [pc, #232]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107e4:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 80107e6:	4b39      	ldr	r3, [pc, #228]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107e8:	78db      	ldrb	r3, [r3, #3]
 80107ea:	f023 0320 	bic.w	r3, r3, #32
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	4b36      	ldr	r3, [pc, #216]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107f2:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 80107f4:	4b35      	ldr	r3, [pc, #212]	; (80108cc <lcd_clear_digit+0x2a0>)
 80107f6:	7a1b      	ldrb	r3, [r3, #8]
 80107f8:	f023 0310 	bic.w	r3, r3, #16
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b33      	ldr	r3, [pc, #204]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010800:	721a      	strb	r2, [r3, #8]
            break;
 8010802:	e248      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 8010804:	4b31      	ldr	r3, [pc, #196]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010806:	7b5b      	ldrb	r3, [r3, #13]
 8010808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801080c:	b2da      	uxtb	r2, r3
 801080e:	4b2f      	ldr	r3, [pc, #188]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010810:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 8010812:	4b2e      	ldr	r3, [pc, #184]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010814:	7b5b      	ldrb	r3, [r3, #13]
 8010816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801081a:	b2da      	uxtb	r2, r3
 801081c:	4b2b      	ldr	r3, [pc, #172]	; (80108cc <lcd_clear_digit+0x2a0>)
 801081e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010820:	4b2a      	ldr	r3, [pc, #168]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010822:	7c9b      	ldrb	r3, [r3, #18]
 8010824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010828:	b2da      	uxtb	r2, r3
 801082a:	4b28      	ldr	r3, [pc, #160]	; (80108cc <lcd_clear_digit+0x2a0>)
 801082c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 801082e:	4b27      	ldr	r3, [pc, #156]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010830:	7c9b      	ldrb	r3, [r3, #18]
 8010832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010836:	b2da      	uxtb	r2, r3
 8010838:	4b24      	ldr	r3, [pc, #144]	; (80108cc <lcd_clear_digit+0x2a0>)
 801083a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 801083c:	4b23      	ldr	r3, [pc, #140]	; (80108cc <lcd_clear_digit+0x2a0>)
 801083e:	78db      	ldrb	r3, [r3, #3]
 8010840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4b21      	ldr	r3, [pc, #132]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010848:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 801084a:	4b20      	ldr	r3, [pc, #128]	; (80108cc <lcd_clear_digit+0x2a0>)
 801084c:	78db      	ldrb	r3, [r3, #3]
 801084e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010852:	b2da      	uxtb	r2, r3
 8010854:	4b1d      	ldr	r3, [pc, #116]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010856:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010858:	4b1c      	ldr	r3, [pc, #112]	; (80108cc <lcd_clear_digit+0x2a0>)
 801085a:	7a1b      	ldrb	r3, [r3, #8]
 801085c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010860:	b2da      	uxtb	r2, r3
 8010862:	4b1a      	ldr	r3, [pc, #104]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010864:	721a      	strb	r2, [r3, #8]
            break;
 8010866:	e216      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 8010868:	4b18      	ldr	r3, [pc, #96]	; (80108cc <lcd_clear_digit+0x2a0>)
 801086a:	7b9b      	ldrb	r3, [r3, #14]
 801086c:	f023 0302 	bic.w	r3, r3, #2
 8010870:	b2da      	uxtb	r2, r3
 8010872:	4b16      	ldr	r3, [pc, #88]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010874:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 8010876:	4b15      	ldr	r3, [pc, #84]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010878:	7b9b      	ldrb	r3, [r3, #14]
 801087a:	f023 0301 	bic.w	r3, r3, #1
 801087e:	b2da      	uxtb	r2, r3
 8010880:	4b12      	ldr	r3, [pc, #72]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010882:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010884:	4b11      	ldr	r3, [pc, #68]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010886:	7cdb      	ldrb	r3, [r3, #19]
 8010888:	f023 0302 	bic.w	r3, r3, #2
 801088c:	b2da      	uxtb	r2, r3
 801088e:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010890:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010892:	4b0e      	ldr	r3, [pc, #56]	; (80108cc <lcd_clear_digit+0x2a0>)
 8010894:	7cdb      	ldrb	r3, [r3, #19]
 8010896:	f023 0301 	bic.w	r3, r3, #1
 801089a:	b2da      	uxtb	r2, r3
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <lcd_clear_digit+0x2a0>)
 801089e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 80108a0:	4b0a      	ldr	r3, [pc, #40]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108a2:	791b      	ldrb	r3, [r3, #4]
 80108a4:	f023 0301 	bic.w	r3, r3, #1
 80108a8:	b2da      	uxtb	r2, r3
 80108aa:	4b08      	ldr	r3, [pc, #32]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108ac:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 80108ae:	4b07      	ldr	r3, [pc, #28]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108b0:	791b      	ldrb	r3, [r3, #4]
 80108b2:	f023 0302 	bic.w	r3, r3, #2
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	4b04      	ldr	r3, [pc, #16]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108ba:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 80108bc:	4b03      	ldr	r3, [pc, #12]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108be:	7a5b      	ldrb	r3, [r3, #9]
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	b2da      	uxtb	r2, r3
 80108c6:	4b01      	ldr	r3, [pc, #4]	; (80108cc <lcd_clear_digit+0x2a0>)
 80108c8:	725a      	strb	r2, [r3, #9]
            break;
 80108ca:	e1e4      	b.n	8010c96 <lcd_clear_digit+0x66a>
 80108cc:	20001da0 	.word	0x20001da0
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 80108d0:	4ba2      	ldr	r3, [pc, #648]	; (8010b5c <lcd_clear_digit+0x530>)
 80108d2:	7b9b      	ldrb	r3, [r3, #14]
 80108d4:	f023 0308 	bic.w	r3, r3, #8
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	4ba0      	ldr	r3, [pc, #640]	; (8010b5c <lcd_clear_digit+0x530>)
 80108dc:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 80108de:	4b9f      	ldr	r3, [pc, #636]	; (8010b5c <lcd_clear_digit+0x530>)
 80108e0:	7b9b      	ldrb	r3, [r3, #14]
 80108e2:	f023 0304 	bic.w	r3, r3, #4
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	4b9c      	ldr	r3, [pc, #624]	; (8010b5c <lcd_clear_digit+0x530>)
 80108ea:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 80108ec:	4b9b      	ldr	r3, [pc, #620]	; (8010b5c <lcd_clear_digit+0x530>)
 80108ee:	7cdb      	ldrb	r3, [r3, #19]
 80108f0:	f023 0308 	bic.w	r3, r3, #8
 80108f4:	b2da      	uxtb	r2, r3
 80108f6:	4b99      	ldr	r3, [pc, #612]	; (8010b5c <lcd_clear_digit+0x530>)
 80108f8:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 80108fa:	4b98      	ldr	r3, [pc, #608]	; (8010b5c <lcd_clear_digit+0x530>)
 80108fc:	7cdb      	ldrb	r3, [r3, #19]
 80108fe:	f023 0304 	bic.w	r3, r3, #4
 8010902:	b2da      	uxtb	r2, r3
 8010904:	4b95      	ldr	r3, [pc, #596]	; (8010b5c <lcd_clear_digit+0x530>)
 8010906:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 8010908:	4b94      	ldr	r3, [pc, #592]	; (8010b5c <lcd_clear_digit+0x530>)
 801090a:	791b      	ldrb	r3, [r3, #4]
 801090c:	f023 0304 	bic.w	r3, r3, #4
 8010910:	b2da      	uxtb	r2, r3
 8010912:	4b92      	ldr	r3, [pc, #584]	; (8010b5c <lcd_clear_digit+0x530>)
 8010914:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 8010916:	4b91      	ldr	r3, [pc, #580]	; (8010b5c <lcd_clear_digit+0x530>)
 8010918:	791b      	ldrb	r3, [r3, #4]
 801091a:	f023 0308 	bic.w	r3, r3, #8
 801091e:	b2da      	uxtb	r2, r3
 8010920:	4b8e      	ldr	r3, [pc, #568]	; (8010b5c <lcd_clear_digit+0x530>)
 8010922:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010924:	4b8d      	ldr	r3, [pc, #564]	; (8010b5c <lcd_clear_digit+0x530>)
 8010926:	7a5b      	ldrb	r3, [r3, #9]
 8010928:	f023 0304 	bic.w	r3, r3, #4
 801092c:	b2da      	uxtb	r2, r3
 801092e:	4b8b      	ldr	r3, [pc, #556]	; (8010b5c <lcd_clear_digit+0x530>)
 8010930:	725a      	strb	r2, [r3, #9]
            break;
 8010932:	e1b0      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010934:	4b89      	ldr	r3, [pc, #548]	; (8010b5c <lcd_clear_digit+0x530>)
 8010936:	7b9b      	ldrb	r3, [r3, #14]
 8010938:	f023 0320 	bic.w	r3, r3, #32
 801093c:	b2da      	uxtb	r2, r3
 801093e:	4b87      	ldr	r3, [pc, #540]	; (8010b5c <lcd_clear_digit+0x530>)
 8010940:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010942:	4b86      	ldr	r3, [pc, #536]	; (8010b5c <lcd_clear_digit+0x530>)
 8010944:	7b9b      	ldrb	r3, [r3, #14]
 8010946:	f023 0310 	bic.w	r3, r3, #16
 801094a:	b2da      	uxtb	r2, r3
 801094c:	4b83      	ldr	r3, [pc, #524]	; (8010b5c <lcd_clear_digit+0x530>)
 801094e:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010950:	4b82      	ldr	r3, [pc, #520]	; (8010b5c <lcd_clear_digit+0x530>)
 8010952:	7cdb      	ldrb	r3, [r3, #19]
 8010954:	f023 0320 	bic.w	r3, r3, #32
 8010958:	b2da      	uxtb	r2, r3
 801095a:	4b80      	ldr	r3, [pc, #512]	; (8010b5c <lcd_clear_digit+0x530>)
 801095c:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 801095e:	4b7f      	ldr	r3, [pc, #508]	; (8010b5c <lcd_clear_digit+0x530>)
 8010960:	7cdb      	ldrb	r3, [r3, #19]
 8010962:	f023 0310 	bic.w	r3, r3, #16
 8010966:	b2da      	uxtb	r2, r3
 8010968:	4b7c      	ldr	r3, [pc, #496]	; (8010b5c <lcd_clear_digit+0x530>)
 801096a:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 801096c:	4b7b      	ldr	r3, [pc, #492]	; (8010b5c <lcd_clear_digit+0x530>)
 801096e:	791b      	ldrb	r3, [r3, #4]
 8010970:	f023 0310 	bic.w	r3, r3, #16
 8010974:	b2da      	uxtb	r2, r3
 8010976:	4b79      	ldr	r3, [pc, #484]	; (8010b5c <lcd_clear_digit+0x530>)
 8010978:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 801097a:	4b78      	ldr	r3, [pc, #480]	; (8010b5c <lcd_clear_digit+0x530>)
 801097c:	791b      	ldrb	r3, [r3, #4]
 801097e:	f023 0320 	bic.w	r3, r3, #32
 8010982:	b2da      	uxtb	r2, r3
 8010984:	4b75      	ldr	r3, [pc, #468]	; (8010b5c <lcd_clear_digit+0x530>)
 8010986:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 8010988:	4b74      	ldr	r3, [pc, #464]	; (8010b5c <lcd_clear_digit+0x530>)
 801098a:	7a5b      	ldrb	r3, [r3, #9]
 801098c:	f023 0310 	bic.w	r3, r3, #16
 8010990:	b2da      	uxtb	r2, r3
 8010992:	4b72      	ldr	r3, [pc, #456]	; (8010b5c <lcd_clear_digit+0x530>)
 8010994:	725a      	strb	r2, [r3, #9]
            break;
 8010996:	e17e      	b.n	8010c96 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010998:	79bb      	ldrb	r3, [r7, #6]
 801099a:	2b01      	cmp	r3, #1
 801099c:	f040 8178 	bne.w	8010c90 <lcd_clear_digit+0x664>
    {
        switch (digit)
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	2b06      	cmp	r3, #6
 80109a4:	f200 8176 	bhi.w	8010c94 <lcd_clear_digit+0x668>
 80109a8:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <lcd_clear_digit+0x384>)
 80109aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ae:	bf00      	nop
 80109b0:	080109cd 	.word	0x080109cd
 80109b4:	08010a31 	.word	0x08010a31
 80109b8:	08010a95 	.word	0x08010a95
 80109bc:	08010af9 	.word	0x08010af9
 80109c0:	08010b61 	.word	0x08010b61
 80109c4:	08010bc5 	.word	0x08010bc5
 80109c8:	08010c29 	.word	0x08010c29
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 80109cc:	4b63      	ldr	r3, [pc, #396]	; (8010b5c <lcd_clear_digit+0x530>)
 80109ce:	7b1b      	ldrb	r3, [r3, #12]
 80109d0:	f023 0304 	bic.w	r3, r3, #4
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	4b61      	ldr	r3, [pc, #388]	; (8010b5c <lcd_clear_digit+0x530>)
 80109d8:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 80109da:	4b60      	ldr	r3, [pc, #384]	; (8010b5c <lcd_clear_digit+0x530>)
 80109dc:	7b1b      	ldrb	r3, [r3, #12]
 80109de:	f023 0308 	bic.w	r3, r3, #8
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	4b5d      	ldr	r3, [pc, #372]	; (8010b5c <lcd_clear_digit+0x530>)
 80109e6:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 80109e8:	4b5c      	ldr	r3, [pc, #368]	; (8010b5c <lcd_clear_digit+0x530>)
 80109ea:	7c5b      	ldrb	r3, [r3, #17]
 80109ec:	f023 0304 	bic.w	r3, r3, #4
 80109f0:	b2da      	uxtb	r2, r3
 80109f2:	4b5a      	ldr	r3, [pc, #360]	; (8010b5c <lcd_clear_digit+0x530>)
 80109f4:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 80109f6:	4b59      	ldr	r3, [pc, #356]	; (8010b5c <lcd_clear_digit+0x530>)
 80109f8:	7c5b      	ldrb	r3, [r3, #17]
 80109fa:	f023 0308 	bic.w	r3, r3, #8
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	4b56      	ldr	r3, [pc, #344]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a02:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 8010a04:	4b55      	ldr	r3, [pc, #340]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a06:	789b      	ldrb	r3, [r3, #2]
 8010a08:	f023 0304 	bic.w	r3, r3, #4
 8010a0c:	b2da      	uxtb	r2, r3
 8010a0e:	4b53      	ldr	r3, [pc, #332]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a10:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 8010a12:	4b52      	ldr	r3, [pc, #328]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a14:	789b      	ldrb	r3, [r3, #2]
 8010a16:	f023 0308 	bic.w	r3, r3, #8
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	4b4f      	ldr	r3, [pc, #316]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a1e:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010a20:	4b4e      	ldr	r3, [pc, #312]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a22:	79db      	ldrb	r3, [r3, #7]
 8010a24:	f023 0308 	bic.w	r3, r3, #8
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	4b4c      	ldr	r3, [pc, #304]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a2c:	71da      	strb	r2, [r3, #7]
            break;
 8010a2e:	e132      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010a30:	4b4a      	ldr	r3, [pc, #296]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a32:	7b1b      	ldrb	r3, [r3, #12]
 8010a34:	f023 0301 	bic.w	r3, r3, #1
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	4b48      	ldr	r3, [pc, #288]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a3c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 8010a3e:	4b47      	ldr	r3, [pc, #284]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a40:	7b1b      	ldrb	r3, [r3, #12]
 8010a42:	f023 0302 	bic.w	r3, r3, #2
 8010a46:	b2da      	uxtb	r2, r3
 8010a48:	4b44      	ldr	r3, [pc, #272]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a4a:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010a4c:	4b43      	ldr	r3, [pc, #268]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a4e:	7c5b      	ldrb	r3, [r3, #17]
 8010a50:	f023 0301 	bic.w	r3, r3, #1
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	4b41      	ldr	r3, [pc, #260]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a58:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 8010a5a:	4b40      	ldr	r3, [pc, #256]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a5c:	7c5b      	ldrb	r3, [r3, #17]
 8010a5e:	f023 0302 	bic.w	r3, r3, #2
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	4b3d      	ldr	r3, [pc, #244]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a66:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 8010a68:	4b3c      	ldr	r3, [pc, #240]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a6a:	789b      	ldrb	r3, [r3, #2]
 8010a6c:	f023 0301 	bic.w	r3, r3, #1
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	4b3a      	ldr	r3, [pc, #232]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a74:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 8010a76:	4b39      	ldr	r3, [pc, #228]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a78:	789b      	ldrb	r3, [r3, #2]
 8010a7a:	f023 0302 	bic.w	r3, r3, #2
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	4b36      	ldr	r3, [pc, #216]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a82:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010a84:	4b35      	ldr	r3, [pc, #212]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a86:	79db      	ldrb	r3, [r3, #7]
 8010a88:	f023 0302 	bic.w	r3, r3, #2
 8010a8c:	b2da      	uxtb	r2, r3
 8010a8e:	4b33      	ldr	r3, [pc, #204]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a90:	71da      	strb	r2, [r3, #7]
            break;
 8010a92:	e100      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010a94:	4b31      	ldr	r3, [pc, #196]	; (8010b5c <lcd_clear_digit+0x530>)
 8010a96:	7adb      	ldrb	r3, [r3, #11]
 8010a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	4b2f      	ldr	r3, [pc, #188]	; (8010b5c <lcd_clear_digit+0x530>)
 8010aa0:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010aa2:	4b2e      	ldr	r3, [pc, #184]	; (8010b5c <lcd_clear_digit+0x530>)
 8010aa4:	7adb      	ldrb	r3, [r3, #11]
 8010aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	4b2b      	ldr	r3, [pc, #172]	; (8010b5c <lcd_clear_digit+0x530>)
 8010aae:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010ab0:	4b2a      	ldr	r3, [pc, #168]	; (8010b5c <lcd_clear_digit+0x530>)
 8010ab2:	7c1b      	ldrb	r3, [r3, #16]
 8010ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	4b28      	ldr	r3, [pc, #160]	; (8010b5c <lcd_clear_digit+0x530>)
 8010abc:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 8010abe:	4b27      	ldr	r3, [pc, #156]	; (8010b5c <lcd_clear_digit+0x530>)
 8010ac0:	7c1b      	ldrb	r3, [r3, #16]
 8010ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	4b24      	ldr	r3, [pc, #144]	; (8010b5c <lcd_clear_digit+0x530>)
 8010aca:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010acc:	4b23      	ldr	r3, [pc, #140]	; (8010b5c <lcd_clear_digit+0x530>)
 8010ace:	785b      	ldrb	r3, [r3, #1]
 8010ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	4b21      	ldr	r3, [pc, #132]	; (8010b5c <lcd_clear_digit+0x530>)
 8010ad8:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 8010ada:	4b20      	ldr	r3, [pc, #128]	; (8010b5c <lcd_clear_digit+0x530>)
 8010adc:	785b      	ldrb	r3, [r3, #1]
 8010ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	4b1d      	ldr	r3, [pc, #116]	; (8010b5c <lcd_clear_digit+0x530>)
 8010ae6:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 8010ae8:	4b1c      	ldr	r3, [pc, #112]	; (8010b5c <lcd_clear_digit+0x530>)
 8010aea:	799b      	ldrb	r3, [r3, #6]
 8010aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	4b1a      	ldr	r3, [pc, #104]	; (8010b5c <lcd_clear_digit+0x530>)
 8010af4:	719a      	strb	r2, [r3, #6]
            break;
 8010af6:	e0ce      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 8010af8:	4b18      	ldr	r3, [pc, #96]	; (8010b5c <lcd_clear_digit+0x530>)
 8010afa:	7adb      	ldrb	r3, [r3, #11]
 8010afc:	f023 0310 	bic.w	r3, r3, #16
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b16      	ldr	r3, [pc, #88]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b04:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 8010b06:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b08:	7adb      	ldrb	r3, [r3, #11]
 8010b0a:	f023 0320 	bic.w	r3, r3, #32
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	4b12      	ldr	r3, [pc, #72]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b12:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 8010b14:	4b11      	ldr	r3, [pc, #68]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b16:	7c1b      	ldrb	r3, [r3, #16]
 8010b18:	f023 0310 	bic.w	r3, r3, #16
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b20:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010b22:	4b0e      	ldr	r3, [pc, #56]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b24:	7c1b      	ldrb	r3, [r3, #16]
 8010b26:	f023 0320 	bic.w	r3, r3, #32
 8010b2a:	b2da      	uxtb	r2, r3
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b2e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010b30:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b32:	785b      	ldrb	r3, [r3, #1]
 8010b34:	f023 0310 	bic.w	r3, r3, #16
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	4b08      	ldr	r3, [pc, #32]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b3c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010b3e:	4b07      	ldr	r3, [pc, #28]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b40:	785b      	ldrb	r3, [r3, #1]
 8010b42:	f023 0320 	bic.w	r3, r3, #32
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b4a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010b4c:	4b03      	ldr	r3, [pc, #12]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b4e:	799b      	ldrb	r3, [r3, #6]
 8010b50:	f023 0320 	bic.w	r3, r3, #32
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	4b01      	ldr	r3, [pc, #4]	; (8010b5c <lcd_clear_digit+0x530>)
 8010b58:	719a      	strb	r2, [r3, #6]
            break;
 8010b5a:	e09c      	b.n	8010c96 <lcd_clear_digit+0x66a>
 8010b5c:	20001da0 	.word	0x20001da0
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010b60:	4b50      	ldr	r3, [pc, #320]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b62:	7adb      	ldrb	r3, [r3, #11]
 8010b64:	f023 0304 	bic.w	r3, r3, #4
 8010b68:	b2da      	uxtb	r2, r3
 8010b6a:	4b4e      	ldr	r3, [pc, #312]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b6c:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010b6e:	4b4d      	ldr	r3, [pc, #308]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b70:	7adb      	ldrb	r3, [r3, #11]
 8010b72:	f023 0308 	bic.w	r3, r3, #8
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	4b4a      	ldr	r3, [pc, #296]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b7a:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010b7c:	4b49      	ldr	r3, [pc, #292]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b7e:	7c1b      	ldrb	r3, [r3, #16]
 8010b80:	f023 0304 	bic.w	r3, r3, #4
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	4b47      	ldr	r3, [pc, #284]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b88:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010b8a:	4b46      	ldr	r3, [pc, #280]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b8c:	7c1b      	ldrb	r3, [r3, #16]
 8010b8e:	f023 0308 	bic.w	r3, r3, #8
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	4b43      	ldr	r3, [pc, #268]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b96:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010b98:	4b42      	ldr	r3, [pc, #264]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010b9a:	785b      	ldrb	r3, [r3, #1]
 8010b9c:	f023 0304 	bic.w	r3, r3, #4
 8010ba0:	b2da      	uxtb	r2, r3
 8010ba2:	4b40      	ldr	r3, [pc, #256]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010ba4:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010ba6:	4b3f      	ldr	r3, [pc, #252]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010ba8:	785b      	ldrb	r3, [r3, #1]
 8010baa:	f023 0308 	bic.w	r3, r3, #8
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	4b3c      	ldr	r3, [pc, #240]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bb2:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010bb4:	4b3b      	ldr	r3, [pc, #236]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bb6:	799b      	ldrb	r3, [r3, #6]
 8010bb8:	f023 0308 	bic.w	r3, r3, #8
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	4b39      	ldr	r3, [pc, #228]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bc0:	719a      	strb	r2, [r3, #6]
            break;
 8010bc2:	e068      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010bc4:	4b37      	ldr	r3, [pc, #220]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bc6:	7adb      	ldrb	r3, [r3, #11]
 8010bc8:	f023 0301 	bic.w	r3, r3, #1
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b35      	ldr	r3, [pc, #212]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bd0:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010bd2:	4b34      	ldr	r3, [pc, #208]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bd4:	7adb      	ldrb	r3, [r3, #11]
 8010bd6:	f023 0302 	bic.w	r3, r3, #2
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	4b31      	ldr	r3, [pc, #196]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bde:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010be0:	4b30      	ldr	r3, [pc, #192]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010be2:	7c1b      	ldrb	r3, [r3, #16]
 8010be4:	f023 0301 	bic.w	r3, r3, #1
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	4b2e      	ldr	r3, [pc, #184]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bec:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010bee:	4b2d      	ldr	r3, [pc, #180]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bf0:	7c1b      	ldrb	r3, [r3, #16]
 8010bf2:	f023 0302 	bic.w	r3, r3, #2
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	4b2a      	ldr	r3, [pc, #168]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bfa:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010bfc:	4b29      	ldr	r3, [pc, #164]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010bfe:	785b      	ldrb	r3, [r3, #1]
 8010c00:	f023 0301 	bic.w	r3, r3, #1
 8010c04:	b2da      	uxtb	r2, r3
 8010c06:	4b27      	ldr	r3, [pc, #156]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c08:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010c0a:	4b26      	ldr	r3, [pc, #152]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c0c:	785b      	ldrb	r3, [r3, #1]
 8010c0e:	f023 0302 	bic.w	r3, r3, #2
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	4b23      	ldr	r3, [pc, #140]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c16:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010c18:	4b22      	ldr	r3, [pc, #136]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c1a:	799b      	ldrb	r3, [r3, #6]
 8010c1c:	f023 0302 	bic.w	r3, r3, #2
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	4b20      	ldr	r3, [pc, #128]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c24:	719a      	strb	r2, [r3, #6]
            break;
 8010c26:	e036      	b.n	8010c96 <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010c28:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c2a:	7a9b      	ldrb	r3, [r3, #10]
 8010c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b1c      	ldr	r3, [pc, #112]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c34:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010c36:	4b1b      	ldr	r3, [pc, #108]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c38:	7a9b      	ldrb	r3, [r3, #10]
 8010c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	4b18      	ldr	r3, [pc, #96]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c42:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010c44:	4b17      	ldr	r3, [pc, #92]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c46:	7bdb      	ldrb	r3, [r3, #15]
 8010c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	4b15      	ldr	r3, [pc, #84]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c50:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010c52:	4b14      	ldr	r3, [pc, #80]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c54:	7bdb      	ldrb	r3, [r3, #15]
 8010c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	4b11      	ldr	r3, [pc, #68]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c5e:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010c60:	4b10      	ldr	r3, [pc, #64]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c6c:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010c6e:	4b0d      	ldr	r3, [pc, #52]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	4b0a      	ldr	r3, [pc, #40]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c7a:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010c7c:	4b09      	ldr	r3, [pc, #36]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c7e:	795b      	ldrb	r3, [r3, #5]
 8010c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	4b07      	ldr	r3, [pc, #28]	; (8010ca4 <lcd_clear_digit+0x678>)
 8010c88:	715a      	strb	r2, [r3, #5]
            break;
 8010c8a:	e004      	b.n	8010c96 <lcd_clear_digit+0x66a>
            break;
 8010c8c:	bf00      	nop
 8010c8e:	e002      	b.n	8010c96 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010c90:	bf00      	nop
 8010c92:	e000      	b.n	8010c96 <lcd_clear_digit+0x66a>
            break;
 8010c94:	bf00      	nop
}
 8010c96:	bf00      	nop
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	20001da0 	.word	0x20001da0

08010ca8 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	460a      	mov	r2, r1
 8010cb2:	71fb      	strb	r3, [r7, #7]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d14c      	bne.n	8010d58 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010cbe:	79bb      	ldrb	r3, [r7, #6]
 8010cc0:	2b06      	cmp	r3, #6
 8010cc2:	f200 808f 	bhi.w	8010de4 <lcd_clear_point+0x13c>
 8010cc6:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <lcd_clear_point+0x24>)
 8010cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ccc:	08010ce9 	.word	0x08010ce9
 8010cd0:	08010cf9 	.word	0x08010cf9
 8010cd4:	08010d09 	.word	0x08010d09
 8010cd8:	08010d19 	.word	0x08010d19
 8010cdc:	08010d29 	.word	0x08010d29
 8010ce0:	08010d39 	.word	0x08010d39
 8010ce4:	08010d49 	.word	0x08010d49
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010ce8:	4b44      	ldr	r3, [pc, #272]	; (8010dfc <lcd_clear_point+0x154>)
 8010cea:	79db      	ldrb	r3, [r3, #7]
 8010cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	4b42      	ldr	r3, [pc, #264]	; (8010dfc <lcd_clear_point+0x154>)
 8010cf4:	71da      	strb	r2, [r3, #7]
            break;
 8010cf6:	e07a      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010cf8:	4b40      	ldr	r3, [pc, #256]	; (8010dfc <lcd_clear_point+0x154>)
 8010cfa:	7a1b      	ldrb	r3, [r3, #8]
 8010cfc:	f023 0302 	bic.w	r3, r3, #2
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	4b3e      	ldr	r3, [pc, #248]	; (8010dfc <lcd_clear_point+0x154>)
 8010d04:	721a      	strb	r2, [r3, #8]
            break;
 8010d06:	e072      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010d08:	4b3c      	ldr	r3, [pc, #240]	; (8010dfc <lcd_clear_point+0x154>)
 8010d0a:	7a1b      	ldrb	r3, [r3, #8]
 8010d0c:	f023 0308 	bic.w	r3, r3, #8
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	4b3a      	ldr	r3, [pc, #232]	; (8010dfc <lcd_clear_point+0x154>)
 8010d14:	721a      	strb	r2, [r3, #8]
            break;
 8010d16:	e06a      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010d18:	4b38      	ldr	r3, [pc, #224]	; (8010dfc <lcd_clear_point+0x154>)
 8010d1a:	7a1b      	ldrb	r3, [r3, #8]
 8010d1c:	f023 0320 	bic.w	r3, r3, #32
 8010d20:	b2da      	uxtb	r2, r3
 8010d22:	4b36      	ldr	r3, [pc, #216]	; (8010dfc <lcd_clear_point+0x154>)
 8010d24:	721a      	strb	r2, [r3, #8]
            break;
 8010d26:	e062      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010d28:	4b34      	ldr	r3, [pc, #208]	; (8010dfc <lcd_clear_point+0x154>)
 8010d2a:	7a1b      	ldrb	r3, [r3, #8]
 8010d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	4b32      	ldr	r3, [pc, #200]	; (8010dfc <lcd_clear_point+0x154>)
 8010d34:	721a      	strb	r2, [r3, #8]
            break;
 8010d36:	e05a      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010d38:	4b30      	ldr	r3, [pc, #192]	; (8010dfc <lcd_clear_point+0x154>)
 8010d3a:	7a5b      	ldrb	r3, [r3, #9]
 8010d3c:	f023 0302 	bic.w	r3, r3, #2
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	4b2e      	ldr	r3, [pc, #184]	; (8010dfc <lcd_clear_point+0x154>)
 8010d44:	725a      	strb	r2, [r3, #9]
            break;
 8010d46:	e052      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010d48:	4b2c      	ldr	r3, [pc, #176]	; (8010dfc <lcd_clear_point+0x154>)
 8010d4a:	7a5b      	ldrb	r3, [r3, #9]
 8010d4c:	f023 0308 	bic.w	r3, r3, #8
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	4b2a      	ldr	r3, [pc, #168]	; (8010dfc <lcd_clear_point+0x154>)
 8010d54:	725a      	strb	r2, [r3, #9]
            break;
 8010d56:	e04a      	b.n	8010dee <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010d58:	79fb      	ldrb	r3, [r7, #7]
 8010d5a:	2b01      	cmp	r3, #1
 8010d5c:	d144      	bne.n	8010de8 <lcd_clear_point+0x140>
    {
        switch (point)
 8010d5e:	79bb      	ldrb	r3, [r7, #6]
 8010d60:	2b05      	cmp	r3, #5
 8010d62:	d843      	bhi.n	8010dec <lcd_clear_point+0x144>
 8010d64:	a201      	add	r2, pc, #4	; (adr r2, 8010d6c <lcd_clear_point+0xc4>)
 8010d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d6a:	bf00      	nop
 8010d6c:	08010d85 	.word	0x08010d85
 8010d70:	08010d95 	.word	0x08010d95
 8010d74:	08010da5 	.word	0x08010da5
 8010d78:	08010db5 	.word	0x08010db5
 8010d7c:	08010dc5 	.word	0x08010dc5
 8010d80:	08010dd5 	.word	0x08010dd5
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010d84:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <lcd_clear_point+0x154>)
 8010d86:	79db      	ldrb	r3, [r3, #7]
 8010d88:	f023 0304 	bic.w	r3, r3, #4
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	4b1b      	ldr	r3, [pc, #108]	; (8010dfc <lcd_clear_point+0x154>)
 8010d90:	71da      	strb	r2, [r3, #7]
            break;
 8010d92:	e02c      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010d94:	4b19      	ldr	r3, [pc, #100]	; (8010dfc <lcd_clear_point+0x154>)
 8010d96:	79db      	ldrb	r3, [r3, #7]
 8010d98:	f023 0301 	bic.w	r3, r3, #1
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b17      	ldr	r3, [pc, #92]	; (8010dfc <lcd_clear_point+0x154>)
 8010da0:	71da      	strb	r2, [r3, #7]
            break;
 8010da2:	e024      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <lcd_clear_point+0x154>)
 8010da6:	799b      	ldrb	r3, [r3, #6]
 8010da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	4b13      	ldr	r3, [pc, #76]	; (8010dfc <lcd_clear_point+0x154>)
 8010db0:	719a      	strb	r2, [r3, #6]
            break;
 8010db2:	e01c      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010db4:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <lcd_clear_point+0x154>)
 8010db6:	799b      	ldrb	r3, [r3, #6]
 8010db8:	f023 0310 	bic.w	r3, r3, #16
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	4b0f      	ldr	r3, [pc, #60]	; (8010dfc <lcd_clear_point+0x154>)
 8010dc0:	719a      	strb	r2, [r3, #6]
            break;
 8010dc2:	e014      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010dc4:	4b0d      	ldr	r3, [pc, #52]	; (8010dfc <lcd_clear_point+0x154>)
 8010dc6:	799b      	ldrb	r3, [r3, #6]
 8010dc8:	f023 0304 	bic.w	r3, r3, #4
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	4b0b      	ldr	r3, [pc, #44]	; (8010dfc <lcd_clear_point+0x154>)
 8010dd0:	719a      	strb	r2, [r3, #6]
            break;
 8010dd2:	e00c      	b.n	8010dee <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010dd4:	4b09      	ldr	r3, [pc, #36]	; (8010dfc <lcd_clear_point+0x154>)
 8010dd6:	799b      	ldrb	r3, [r3, #6]
 8010dd8:	f023 0301 	bic.w	r3, r3, #1
 8010ddc:	b2da      	uxtb	r2, r3
 8010dde:	4b07      	ldr	r3, [pc, #28]	; (8010dfc <lcd_clear_point+0x154>)
 8010de0:	719a      	strb	r2, [r3, #6]
            break;
 8010de2:	e004      	b.n	8010dee <lcd_clear_point+0x146>
            break;
 8010de4:	bf00      	nop
 8010de6:	e002      	b.n	8010dee <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010de8:	bf00      	nop
 8010dea:	e000      	b.n	8010dee <lcd_clear_point+0x146>
            break;
 8010dec:	bf00      	nop
}
 8010dee:	bf00      	nop
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	20001da0 	.word	0x20001da0

08010e00 <lcd_clear_time_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	4603      	mov	r3, r0
 8010e08:	460a      	mov	r2, r1
 8010e0a:	71fb      	strb	r3, [r7, #7]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010e10:	79fb      	ldrb	r3, [r7, #7]
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d82a      	bhi.n	8010e6c <lcd_clear_time_unit+0x6c>
 8010e16:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <lcd_clear_time_unit+0x1c>)
 8010e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1c:	08010e2d 	.word	0x08010e2d
 8010e20:	08010e3d 	.word	0x08010e3d
 8010e24:	08010e4d 	.word	0x08010e4d
 8010e28:	08010e5d 	.word	0x08010e5d
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010e2c:	4b14      	ldr	r3, [pc, #80]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e2e:	795b      	ldrb	r3, [r3, #5]
 8010e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	4b12      	ldr	r3, [pc, #72]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e38:	715a      	strb	r2, [r3, #5]
        break;
 8010e3a:	e018      	b.n	8010e6e <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010e3c:	4b10      	ldr	r3, [pc, #64]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e3e:	7a5b      	ldrb	r3, [r3, #9]
 8010e40:	f023 0320 	bic.w	r3, r3, #32
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	4b0e      	ldr	r3, [pc, #56]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e48:	725a      	strb	r2, [r3, #9]
        break;
 8010e4a:	e010      	b.n	8010e6e <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010e4c:	4b0c      	ldr	r3, [pc, #48]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e4e:	7a9b      	ldrb	r3, [r3, #10]
 8010e50:	f023 0320 	bic.w	r3, r3, #32
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	4b0a      	ldr	r3, [pc, #40]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e58:	729a      	strb	r2, [r3, #10]
        break;
 8010e5a:	e008      	b.n	8010e6e <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010e5c:	4b08      	ldr	r3, [pc, #32]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e5e:	7a5b      	ldrb	r3, [r3, #9]
 8010e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	4b06      	ldr	r3, [pc, #24]	; (8010e80 <lcd_clear_time_unit+0x80>)
 8010e68:	725a      	strb	r2, [r3, #9]
        break;
 8010e6a:	e000      	b.n	8010e6e <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010e6c:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010e6e:	79bb      	ldrb	r3, [r7, #6]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f001 fbff 	bl	8012674 <pcf8553_blink>
}
 8010e76:	bf00      	nop
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	20001da0 	.word	0x20001da0

08010e84 <lcd_clear_vol_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	460a      	mov	r2, r1
 8010e8e:	71fb      	strb	r3, [r7, #7]
 8010e90:	4613      	mov	r3, r2
 8010e92:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010e94:	79fb      	ldrb	r3, [r7, #7]
 8010e96:	2b07      	cmp	r3, #7
 8010e98:	f200 822c 	bhi.w	80112f4 <lcd_clear_vol_unit+0x470>
 8010e9c:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <lcd_clear_vol_unit+0x20>)
 8010e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea2:	bf00      	nop
 8010ea4:	08010ec5 	.word	0x08010ec5
 8010ea8:	08010fb7 	.word	0x08010fb7
 8010eac:	08011061 	.word	0x08011061
 8010eb0:	08010f1b 	.word	0x08010f1b
 8010eb4:	080111bb 	.word	0x080111bb
 8010eb8:	080110f5 	.word	0x080110f5
 8010ebc:	0801123b 	.word	0x0801123b
 8010ec0:	080112bb 	.word	0x080112bb
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010ec4:	4b8a      	ldr	r3, [pc, #552]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ec6:	7bdb      	ldrb	r3, [r3, #15]
 8010ec8:	f023 0320 	bic.w	r3, r3, #32
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4b88      	ldr	r3, [pc, #544]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ed0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010ed2:	4b87      	ldr	r3, [pc, #540]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	f023 0320 	bic.w	r3, r3, #32
 8010eda:	b2da      	uxtb	r2, r3
 8010edc:	4b84      	ldr	r3, [pc, #528]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ede:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010ee0:	4b83      	ldr	r3, [pc, #524]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ee2:	795b      	ldrb	r3, [r3, #5]
 8010ee4:	f023 0320 	bic.w	r3, r3, #32
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	4b81      	ldr	r3, [pc, #516]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010eec:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010eee:	4b80      	ldr	r3, [pc, #512]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ef0:	7b9b      	ldrb	r3, [r3, #14]
 8010ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	4b7d      	ldr	r3, [pc, #500]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010efa:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010efc:	4b7c      	ldr	r3, [pc, #496]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010efe:	7a9b      	ldrb	r3, [r3, #10]
 8010f00:	f023 0301 	bic.w	r3, r3, #1
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4b7a      	ldr	r3, [pc, #488]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f08:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010f0a:	4b79      	ldr	r3, [pc, #484]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f0c:	7a5b      	ldrb	r3, [r3, #9]
 8010f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	4b76      	ldr	r3, [pc, #472]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f16:	725a      	strb	r2, [r3, #9]
        break;
 8010f18:	e1ed      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010f1a:	4b75      	ldr	r3, [pc, #468]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f1c:	7bdb      	ldrb	r3, [r3, #15]
 8010f1e:	f023 0320 	bic.w	r3, r3, #32
 8010f22:	b2da      	uxtb	r2, r3
 8010f24:	4b72      	ldr	r3, [pc, #456]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f26:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010f28:	4b71      	ldr	r3, [pc, #452]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f2a:	7bdb      	ldrb	r3, [r3, #15]
 8010f2c:	f023 0310 	bic.w	r3, r3, #16
 8010f30:	b2da      	uxtb	r2, r3
 8010f32:	4b6f      	ldr	r3, [pc, #444]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f34:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010f36:	4b6e      	ldr	r3, [pc, #440]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f38:	7bdb      	ldrb	r3, [r3, #15]
 8010f3a:	f023 0304 	bic.w	r3, r3, #4
 8010f3e:	b2da      	uxtb	r2, r3
 8010f40:	4b6b      	ldr	r3, [pc, #428]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f42:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010f44:	4b6a      	ldr	r3, [pc, #424]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f023 0320 	bic.w	r3, r3, #32
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	4b68      	ldr	r3, [pc, #416]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f50:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010f52:	4b67      	ldr	r3, [pc, #412]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f54:	795b      	ldrb	r3, [r3, #5]
 8010f56:	f023 0310 	bic.w	r3, r3, #16
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	4b64      	ldr	r3, [pc, #400]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f5e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010f60:	4b63      	ldr	r3, [pc, #396]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f62:	7b9b      	ldrb	r3, [r3, #14]
 8010f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	4b61      	ldr	r3, [pc, #388]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f6c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010f6e:	4b60      	ldr	r3, [pc, #384]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f70:	7bdb      	ldrb	r3, [r3, #15]
 8010f72:	f023 0302 	bic.w	r3, r3, #2
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b5d      	ldr	r3, [pc, #372]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f7a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f7c:	4b5c      	ldr	r3, [pc, #368]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f023 0301 	bic.w	r3, r3, #1
 8010f84:	b2da      	uxtb	r2, r3
 8010f86:	4b5a      	ldr	r3, [pc, #360]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f88:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010f8a:	4b59      	ldr	r3, [pc, #356]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	f023 0302 	bic.w	r3, r3, #2
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	4b56      	ldr	r3, [pc, #344]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f96:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010f98:	4b55      	ldr	r3, [pc, #340]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010f9a:	791b      	ldrb	r3, [r3, #4]
 8010f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	4b53      	ldr	r3, [pc, #332]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fa4:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010fa6:	4b52      	ldr	r3, [pc, #328]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fa8:	795b      	ldrb	r3, [r3, #5]
 8010faa:	f023 0302 	bic.w	r3, r3, #2
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	4b4f      	ldr	r3, [pc, #316]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fb2:	715a      	strb	r2, [r3, #5]
        break;
 8010fb4:	e19f      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010fb6:	4b4e      	ldr	r3, [pc, #312]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fb8:	7bdb      	ldrb	r3, [r3, #15]
 8010fba:	f023 0320 	bic.w	r3, r3, #32
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	4b4b      	ldr	r3, [pc, #300]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fc2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010fc4:	4b4a      	ldr	r3, [pc, #296]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fc6:	7a9b      	ldrb	r3, [r3, #10]
 8010fc8:	f023 0304 	bic.w	r3, r3, #4
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4b48      	ldr	r3, [pc, #288]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fd0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010fd2:	4b47      	ldr	r3, [pc, #284]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fd4:	7bdb      	ldrb	r3, [r3, #15]
 8010fd6:	f023 0310 	bic.w	r3, r3, #16
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	4b44      	ldr	r3, [pc, #272]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fde:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010fe0:	4b43      	ldr	r3, [pc, #268]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fe2:	7bdb      	ldrb	r3, [r3, #15]
 8010fe4:	f023 0308 	bic.w	r3, r3, #8
 8010fe8:	b2da      	uxtb	r2, r3
 8010fea:	4b41      	ldr	r3, [pc, #260]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010fec:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010fee:	4b40      	ldr	r3, [pc, #256]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	f023 0320 	bic.w	r3, r3, #32
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	4b3d      	ldr	r3, [pc, #244]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ffa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010ffc:	4b3c      	ldr	r3, [pc, #240]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f023 0308 	bic.w	r3, r3, #8
 8011004:	b2da      	uxtb	r2, r3
 8011006:	4b3a      	ldr	r3, [pc, #232]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011008:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 801100a:	4b39      	ldr	r3, [pc, #228]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801100c:	7b9b      	ldrb	r3, [r3, #14]
 801100e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011012:	b2da      	uxtb	r2, r3
 8011014:	4b36      	ldr	r3, [pc, #216]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011016:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8011018:	4b35      	ldr	r3, [pc, #212]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801101a:	7cdb      	ldrb	r3, [r3, #19]
 801101c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011020:	b2da      	uxtb	r2, r3
 8011022:	4b33      	ldr	r3, [pc, #204]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011024:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011026:	4b32      	ldr	r3, [pc, #200]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011028:	7cdb      	ldrb	r3, [r3, #19]
 801102a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801102e:	b2da      	uxtb	r2, r3
 8011030:	4b2f      	ldr	r3, [pc, #188]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011032:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011034:	4b2e      	ldr	r3, [pc, #184]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	f023 0301 	bic.w	r3, r3, #1
 801103c:	b2da      	uxtb	r2, r3
 801103e:	4b2c      	ldr	r3, [pc, #176]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011040:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8011042:	4b2b      	ldr	r3, [pc, #172]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011044:	791b      	ldrb	r3, [r3, #4]
 8011046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b28      	ldr	r3, [pc, #160]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801104e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8011050:	4b27      	ldr	r3, [pc, #156]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011052:	795b      	ldrb	r3, [r3, #5]
 8011054:	f023 0302 	bic.w	r3, r3, #2
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b25      	ldr	r3, [pc, #148]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801105c:	715a      	strb	r2, [r3, #5]
        break;
 801105e:	e14a      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011060:	4b23      	ldr	r3, [pc, #140]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011062:	7bdb      	ldrb	r3, [r3, #15]
 8011064:	f023 0320 	bic.w	r3, r3, #32
 8011068:	b2da      	uxtb	r2, r3
 801106a:	4b21      	ldr	r3, [pc, #132]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801106c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 801106e:	4b20      	ldr	r3, [pc, #128]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011070:	7a9b      	ldrb	r3, [r3, #10]
 8011072:	f023 0304 	bic.w	r3, r3, #4
 8011076:	b2da      	uxtb	r2, r3
 8011078:	4b1d      	ldr	r3, [pc, #116]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801107a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 801107c:	4b1c      	ldr	r3, [pc, #112]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801107e:	7bdb      	ldrb	r3, [r3, #15]
 8011080:	f023 0310 	bic.w	r3, r3, #16
 8011084:	b2da      	uxtb	r2, r3
 8011086:	4b1a      	ldr	r3, [pc, #104]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011088:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 801108a:	4b19      	ldr	r3, [pc, #100]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801108c:	7bdb      	ldrb	r3, [r3, #15]
 801108e:	f023 0308 	bic.w	r3, r3, #8
 8011092:	b2da      	uxtb	r2, r3
 8011094:	4b16      	ldr	r3, [pc, #88]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 8011096:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011098:	4b15      	ldr	r3, [pc, #84]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f023 0320 	bic.w	r3, r3, #32
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b13      	ldr	r3, [pc, #76]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110a4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 80110a6:	4b12      	ldr	r3, [pc, #72]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	f023 0308 	bic.w	r3, r3, #8
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110b2:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80110b4:	4b0e      	ldr	r3, [pc, #56]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110b6:	7b9b      	ldrb	r3, [r3, #14]
 80110b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	4b0c      	ldr	r3, [pc, #48]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110c0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80110c2:	4b0b      	ldr	r3, [pc, #44]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110c4:	7bdb      	ldrb	r3, [r3, #15]
 80110c6:	f023 0302 	bic.w	r3, r3, #2
 80110ca:	b2da      	uxtb	r2, r3
 80110cc:	4b08      	ldr	r3, [pc, #32]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110ce:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80110d0:	4b07      	ldr	r3, [pc, #28]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	f023 0302 	bic.w	r3, r3, #2
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	4b05      	ldr	r3, [pc, #20]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110dc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80110de:	4b04      	ldr	r3, [pc, #16]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110e0:	795b      	ldrb	r3, [r3, #5]
 80110e2:	f023 0302 	bic.w	r3, r3, #2
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	4b01      	ldr	r3, [pc, #4]	; (80110f0 <lcd_clear_vol_unit+0x26c>)
 80110ea:	715a      	strb	r2, [r3, #5]
        break;
 80110ec:	e103      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
 80110ee:	bf00      	nop
 80110f0:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 80110f4:	4b84      	ldr	r3, [pc, #528]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80110f6:	7a9b      	ldrb	r3, [r3, #10]
 80110f8:	f023 0308 	bic.w	r3, r3, #8
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	4b82      	ldr	r3, [pc, #520]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011100:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8011102:	4b81      	ldr	r3, [pc, #516]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011104:	7a9b      	ldrb	r3, [r3, #10]
 8011106:	f023 0310 	bic.w	r3, r3, #16
 801110a:	b2da      	uxtb	r2, r3
 801110c:	4b7e      	ldr	r3, [pc, #504]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801110e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011110:	4b7d      	ldr	r3, [pc, #500]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011112:	7bdb      	ldrb	r3, [r3, #15]
 8011114:	f023 0308 	bic.w	r3, r3, #8
 8011118:	b2da      	uxtb	r2, r3
 801111a:	4b7b      	ldr	r3, [pc, #492]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801111c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801111e:	4b7a      	ldr	r3, [pc, #488]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	f023 0310 	bic.w	r3, r3, #16
 8011126:	b2da      	uxtb	r2, r3
 8011128:	4b77      	ldr	r3, [pc, #476]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801112a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 801112c:	4b76      	ldr	r3, [pc, #472]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801112e:	795b      	ldrb	r3, [r3, #5]
 8011130:	f023 0304 	bic.w	r3, r3, #4
 8011134:	b2da      	uxtb	r2, r3
 8011136:	4b74      	ldr	r3, [pc, #464]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011138:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801113a:	4b73      	ldr	r3, [pc, #460]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	f023 0308 	bic.w	r3, r3, #8
 8011142:	b2da      	uxtb	r2, r3
 8011144:	4b70      	ldr	r3, [pc, #448]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011146:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011148:	4b6f      	ldr	r3, [pc, #444]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801114a:	795b      	ldrb	r3, [r3, #5]
 801114c:	f023 0320 	bic.w	r3, r3, #32
 8011150:	b2da      	uxtb	r2, r3
 8011152:	4b6d      	ldr	r3, [pc, #436]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011154:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011156:	4b6c      	ldr	r3, [pc, #432]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011158:	7b9b      	ldrb	r3, [r3, #14]
 801115a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801115e:	b2da      	uxtb	r2, r3
 8011160:	4b69      	ldr	r3, [pc, #420]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011162:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011164:	4b68      	ldr	r3, [pc, #416]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011166:	7bdb      	ldrb	r3, [r3, #15]
 8011168:	f023 0302 	bic.w	r3, r3, #2
 801116c:	b2da      	uxtb	r2, r3
 801116e:	4b66      	ldr	r3, [pc, #408]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011170:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8011172:	4b65      	ldr	r3, [pc, #404]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011174:	7cdb      	ldrb	r3, [r3, #19]
 8011176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801117a:	b2da      	uxtb	r2, r3
 801117c:	4b62      	ldr	r3, [pc, #392]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801117e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011180:	4b61      	ldr	r3, [pc, #388]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011182:	7cdb      	ldrb	r3, [r3, #19]
 8011184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011188:	b2da      	uxtb	r2, r3
 801118a:	4b5f      	ldr	r3, [pc, #380]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801118c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 801118e:	4b5e      	ldr	r3, [pc, #376]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	f023 0301 	bic.w	r3, r3, #1
 8011196:	b2da      	uxtb	r2, r3
 8011198:	4b5b      	ldr	r3, [pc, #364]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801119a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801119c:	4b5a      	ldr	r3, [pc, #360]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	f023 0302 	bic.w	r3, r3, #2
 80111a4:	b2da      	uxtb	r2, r3
 80111a6:	4b58      	ldr	r3, [pc, #352]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111a8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 80111aa:	4b57      	ldr	r3, [pc, #348]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111ac:	795b      	ldrb	r3, [r3, #5]
 80111ae:	f023 0301 	bic.w	r3, r3, #1
 80111b2:	b2da      	uxtb	r2, r3
 80111b4:	4b54      	ldr	r3, [pc, #336]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111b6:	715a      	strb	r2, [r3, #5]
        break;
 80111b8:	e09d      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 80111ba:	4b53      	ldr	r3, [pc, #332]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111bc:	7a9b      	ldrb	r3, [r3, #10]
 80111be:	f023 0308 	bic.w	r3, r3, #8
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b50      	ldr	r3, [pc, #320]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111c6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80111c8:	4b4f      	ldr	r3, [pc, #316]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111ca:	7bdb      	ldrb	r3, [r3, #15]
 80111cc:	f023 0320 	bic.w	r3, r3, #32
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	4b4d      	ldr	r3, [pc, #308]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111d4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80111d6:	4b4c      	ldr	r3, [pc, #304]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f023 0310 	bic.w	r3, r3, #16
 80111de:	b2da      	uxtb	r2, r3
 80111e0:	4b49      	ldr	r3, [pc, #292]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111e2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80111e4:	4b48      	ldr	r3, [pc, #288]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f023 0320 	bic.w	r3, r3, #32
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4b46      	ldr	r3, [pc, #280]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111f0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 80111f2:	4b45      	ldr	r3, [pc, #276]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	f023 0308 	bic.w	r3, r3, #8
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	4b42      	ldr	r3, [pc, #264]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80111fe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011200:	4b41      	ldr	r3, [pc, #260]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011202:	795b      	ldrb	r3, [r3, #5]
 8011204:	f023 0320 	bic.w	r3, r3, #32
 8011208:	b2da      	uxtb	r2, r3
 801120a:	4b3f      	ldr	r3, [pc, #252]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801120c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801120e:	4b3e      	ldr	r3, [pc, #248]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011210:	7bdb      	ldrb	r3, [r3, #15]
 8011212:	f023 0302 	bic.w	r3, r3, #2
 8011216:	b2da      	uxtb	r2, r3
 8011218:	4b3b      	ldr	r3, [pc, #236]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801121a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801121c:	4b3a      	ldr	r3, [pc, #232]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	f023 0302 	bic.w	r3, r3, #2
 8011224:	b2da      	uxtb	r2, r3
 8011226:	4b38      	ldr	r3, [pc, #224]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011228:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801122a:	4b37      	ldr	r3, [pc, #220]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801122c:	795b      	ldrb	r3, [r3, #5]
 801122e:	f023 0302 	bic.w	r3, r3, #2
 8011232:	b2da      	uxtb	r2, r3
 8011234:	4b34      	ldr	r3, [pc, #208]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011236:	715a      	strb	r2, [r3, #5]
        break;
 8011238:	e05d      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801123a:	4b33      	ldr	r3, [pc, #204]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801123c:	7a9b      	ldrb	r3, [r3, #10]
 801123e:	f023 0308 	bic.w	r3, r3, #8
 8011242:	b2da      	uxtb	r2, r3
 8011244:	4b30      	ldr	r3, [pc, #192]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011246:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011248:	4b2f      	ldr	r3, [pc, #188]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801124a:	7bdb      	ldrb	r3, [r3, #15]
 801124c:	f023 0320 	bic.w	r3, r3, #32
 8011250:	b2da      	uxtb	r2, r3
 8011252:	4b2d      	ldr	r3, [pc, #180]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011254:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011256:	4b2c      	ldr	r3, [pc, #176]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011258:	7bdb      	ldrb	r3, [r3, #15]
 801125a:	f023 0308 	bic.w	r3, r3, #8
 801125e:	b2da      	uxtb	r2, r3
 8011260:	4b29      	ldr	r3, [pc, #164]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011262:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8011264:	4b28      	ldr	r3, [pc, #160]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011266:	7bdb      	ldrb	r3, [r3, #15]
 8011268:	f023 0304 	bic.w	r3, r3, #4
 801126c:	b2da      	uxtb	r2, r3
 801126e:	4b26      	ldr	r3, [pc, #152]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011270:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011272:	4b25      	ldr	r3, [pc, #148]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	f023 0310 	bic.w	r3, r3, #16
 801127a:	b2da      	uxtb	r2, r3
 801127c:	4b22      	ldr	r3, [pc, #136]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801127e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011280:	4b21      	ldr	r3, [pc, #132]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011282:	7b9b      	ldrb	r3, [r3, #14]
 8011284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011288:	b2da      	uxtb	r2, r3
 801128a:	4b1f      	ldr	r3, [pc, #124]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801128c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801128e:	4b1e      	ldr	r3, [pc, #120]	; (8011308 <lcd_clear_vol_unit+0x484>)
 8011290:	7bdb      	ldrb	r3, [r3, #15]
 8011292:	f023 0302 	bic.w	r3, r3, #2
 8011296:	b2da      	uxtb	r2, r3
 8011298:	4b1b      	ldr	r3, [pc, #108]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801129a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801129c:	4b1a      	ldr	r3, [pc, #104]	; (8011308 <lcd_clear_vol_unit+0x484>)
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	f023 0302 	bic.w	r3, r3, #2
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	4b18      	ldr	r3, [pc, #96]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112a8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80112aa:	4b17      	ldr	r3, [pc, #92]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112ac:	795b      	ldrb	r3, [r3, #5]
 80112ae:	f023 0302 	bic.w	r3, r3, #2
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	4b14      	ldr	r3, [pc, #80]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112b6:	715a      	strb	r2, [r3, #5]
        break;
 80112b8:	e01d      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80112ba:	4b13      	ldr	r3, [pc, #76]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112bc:	7bdb      	ldrb	r3, [r3, #15]
 80112be:	f023 0304 	bic.w	r3, r3, #4
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	4b10      	ldr	r3, [pc, #64]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112c6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80112c8:	4b0f      	ldr	r3, [pc, #60]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	f023 0310 	bic.w	r3, r3, #16
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	4b0d      	ldr	r3, [pc, #52]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112d4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80112d6:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112d8:	7cdb      	ldrb	r3, [r3, #19]
 80112da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	4b09      	ldr	r3, [pc, #36]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112e2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80112e4:	4b08      	ldr	r3, [pc, #32]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f023 0301 	bic.w	r3, r3, #1
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b06      	ldr	r3, [pc, #24]	; (8011308 <lcd_clear_vol_unit+0x484>)
 80112f0:	701a      	strb	r2, [r3, #0]
        break;
 80112f2:	e000      	b.n	80112f6 <lcd_clear_vol_unit+0x472>
        default:
        break;
 80112f4:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80112f6:	79bb      	ldrb	r3, [r7, #6]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f001 f9bb 	bl	8012674 <pcf8553_blink>
}
 80112fe:	bf00      	nop
 8011300:	3708      	adds	r7, #8
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	20001da0 	.word	0x20001da0

0801130c <lcd_init>:
 * @brief Inicialización de la pantalla LCD mediante el puerto SPI1.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 801130c:	b580      	push	{r7, lr}
 801130e:	af00      	add	r7, sp, #0
    pcf8553_init();
 8011310:	f001 fa22 	bl	8012758 <pcf8553_init>
}
 8011314:	bf00      	nop
 8011316:	bd80      	pop	{r7, pc}

08011318 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	71fb      	strb	r3, [r7, #7]
 8011322:	460b      	mov	r3, r1
 8011324:	71bb      	strb	r3, [r7, #6]
 8011326:	4613      	mov	r3, r2
 8011328:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 801132a:	797b      	ldrb	r3, [r7, #5]
 801132c:	3301      	adds	r3, #1
 801132e:	b2da      	uxtb	r2, r3
 8011330:	4bde      	ldr	r3, [pc, #888]	; (80116ac <lcd_put_char+0x394>)
 8011332:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if (in_configuration == 0)
 8011334:	4bde      	ldr	r3, [pc, #888]	; (80116b0 <lcd_put_char+0x398>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10a      	bne.n	8011352 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 801133c:	797a      	ldrb	r2, [r7, #5]
 801133e:	79bb      	ldrb	r3, [r7, #6]
 8011340:	49dc      	ldr	r1, [pc, #880]	; (80116b4 <lcd_put_char+0x39c>)
 8011342:	00d2      	lsls	r2, r2, #3
 8011344:	440a      	add	r2, r1
 8011346:	4413      	add	r3, r2
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	79fa      	ldrb	r2, [r7, #7]
 801134c:	429a      	cmp	r2, r3
 801134e:	f000 81d6 	beq.w	80116fe <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8011352:	797a      	ldrb	r2, [r7, #5]
 8011354:	79bb      	ldrb	r3, [r7, #6]
 8011356:	49d7      	ldr	r1, [pc, #860]	; (80116b4 <lcd_put_char+0x39c>)
 8011358:	00d2      	lsls	r2, r2, #3
 801135a:	440a      	add	r2, r1
 801135c:	4413      	add	r3, r2
 801135e:	79fa      	ldrb	r2, [r7, #7]
 8011360:	701a      	strb	r2, [r3, #0]

    switch (row)
 8011362:	797b      	ldrb	r3, [r7, #5]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <lcd_put_char+0x56>
 8011368:	2b01      	cmp	r3, #1
 801136a:	d008      	beq.n	801137e <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 801136c:	e1ce      	b.n	801170c <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 801136e:	79bb      	ldrb	r3, [r7, #6]
 8011370:	2b07      	cmp	r3, #7
 8011372:	f200 81c6 	bhi.w	8011702 <lcd_put_char+0x3ea>
                g_col = col;
 8011376:	4ad0      	ldr	r2, [pc, #832]	; (80116b8 <lcd_put_char+0x3a0>)
 8011378:	79bb      	ldrb	r3, [r7, #6]
 801137a:	7013      	strb	r3, [r2, #0]
        break;
 801137c:	e00a      	b.n	8011394 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 801137e:	79bb      	ldrb	r3, [r7, #6]
 8011380:	2b06      	cmp	r3, #6
 8011382:	f200 81c0 	bhi.w	8011706 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 8011386:	79bb      	ldrb	r3, [r7, #6]
 8011388:	f1c3 0306 	rsb	r3, r3, #6
 801138c:	b2da      	uxtb	r2, r3
 801138e:	4bca      	ldr	r3, [pc, #808]	; (80116b8 <lcd_put_char+0x3a0>)
 8011390:	701a      	strb	r2, [r3, #0]
        break;
 8011392:	bf00      	nop
        break;
    }

    switch (c)
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	3b20      	subs	r3, #32
 8011398:	2b19      	cmp	r3, #25
 801139a:	f200 81b6 	bhi.w	801170a <lcd_put_char+0x3f2>
 801139e:	a201      	add	r2, pc, #4	; (adr r2, 80113a4 <lcd_put_char+0x8c>)
 80113a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a4:	0801140d 	.word	0x0801140d
 80113a8:	0801170b 	.word	0x0801170b
 80113ac:	0801170b 	.word	0x0801170b
 80113b0:	0801170b 	.word	0x0801170b
 80113b4:	0801170b 	.word	0x0801170b
 80113b8:	0801170b 	.word	0x0801170b
 80113bc:	0801170b 	.word	0x0801170b
 80113c0:	0801170b 	.word	0x0801170b
 80113c4:	0801170b 	.word	0x0801170b
 80113c8:	0801170b 	.word	0x0801170b
 80113cc:	0801170b 	.word	0x0801170b
 80113d0:	0801170b 	.word	0x0801170b
 80113d4:	0801170b 	.word	0x0801170b
 80113d8:	0801170b 	.word	0x0801170b
 80113dc:	0801144f 	.word	0x0801144f
 80113e0:	0801170b 	.word	0x0801170b
 80113e4:	08011459 	.word	0x08011459
 80113e8:	0801149b 	.word	0x0801149b
 80113ec:	080114dd 	.word	0x080114dd
 80113f0:	0801151f 	.word	0x0801151f
 80113f4:	08011561 	.word	0x08011561
 80113f8:	080115a3 	.word	0x080115a3
 80113fc:	080115e5 	.word	0x080115e5
 8011400:	08011627 	.word	0x08011627
 8011404:	08011669 	.word	0x08011669
 8011408:	080116bd 	.word	0x080116bd
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 801140c:	2100      	movs	r1, #0
 801140e:	2000      	movs	r0, #0
 8011410:	f001 f836 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011414:	2100      	movs	r1, #0
 8011416:	2001      	movs	r0, #1
 8011418:	f001 f832 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801141c:	2100      	movs	r1, #0
 801141e:	2002      	movs	r0, #2
 8011420:	f001 f82e 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011424:	2100      	movs	r1, #0
 8011426:	2003      	movs	r0, #3
 8011428:	f001 f82a 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801142c:	2100      	movs	r1, #0
 801142e:	2004      	movs	r0, #4
 8011430:	f001 f826 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011434:	2100      	movs	r1, #0
 8011436:	2005      	movs	r0, #5
 8011438:	f001 f822 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801143c:	2100      	movs	r1, #0
 801143e:	2006      	movs	r0, #6
 8011440:	f001 f81e 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011444:	2100      	movs	r1, #0
 8011446:	2007      	movs	r0, #7
 8011448:	f001 f81a 	bl	8012480 <lcd_write_line>
        break;
 801144c:	e15e      	b.n	801170c <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 801144e:	2101      	movs	r1, #1
 8011450:	2007      	movs	r0, #7
 8011452:	f001 f815 	bl	8012480 <lcd_write_line>
        break;
 8011456:	e159      	b.n	801170c <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 8011458:	2101      	movs	r1, #1
 801145a:	2000      	movs	r0, #0
 801145c:	f001 f810 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011460:	2101      	movs	r1, #1
 8011462:	2001      	movs	r0, #1
 8011464:	f001 f80c 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011468:	2101      	movs	r1, #1
 801146a:	2002      	movs	r0, #2
 801146c:	f001 f808 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011470:	2100      	movs	r1, #0
 8011472:	2003      	movs	r0, #3
 8011474:	f001 f804 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011478:	2101      	movs	r1, #1
 801147a:	2004      	movs	r0, #4
 801147c:	f001 f800 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011480:	2101      	movs	r1, #1
 8011482:	2005      	movs	r0, #5
 8011484:	f000 fffc 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011488:	2101      	movs	r1, #1
 801148a:	2006      	movs	r0, #6
 801148c:	f000 fff8 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011490:	2100      	movs	r1, #0
 8011492:	2007      	movs	r0, #7
 8011494:	f000 fff4 	bl	8012480 <lcd_write_line>
        break;
 8011498:	e138      	b.n	801170c <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 801149a:	2100      	movs	r1, #0
 801149c:	2000      	movs	r0, #0
 801149e:	f000 ffef 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80114a2:	2100      	movs	r1, #0
 80114a4:	2001      	movs	r0, #1
 80114a6:	f000 ffeb 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80114aa:	2101      	movs	r1, #1
 80114ac:	2002      	movs	r0, #2
 80114ae:	f000 ffe7 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80114b2:	2100      	movs	r1, #0
 80114b4:	2003      	movs	r0, #3
 80114b6:	f000 ffe3 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80114ba:	2100      	movs	r1, #0
 80114bc:	2004      	movs	r0, #4
 80114be:	f000 ffdf 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80114c2:	2101      	movs	r1, #1
 80114c4:	2005      	movs	r0, #5
 80114c6:	f000 ffdb 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80114ca:	2100      	movs	r1, #0
 80114cc:	2006      	movs	r0, #6
 80114ce:	f000 ffd7 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114d2:	2100      	movs	r1, #0
 80114d4:	2007      	movs	r0, #7
 80114d6:	f000 ffd3 	bl	8012480 <lcd_write_line>
        break;
 80114da:	e117      	b.n	801170c <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 80114dc:	2101      	movs	r1, #1
 80114de:	2000      	movs	r0, #0
 80114e0:	f000 ffce 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80114e4:	2101      	movs	r1, #1
 80114e6:	2001      	movs	r0, #1
 80114e8:	f000 ffca 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 80114ec:	2100      	movs	r1, #0
 80114ee:	2002      	movs	r0, #2
 80114f0:	f000 ffc6 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80114f4:	2101      	movs	r1, #1
 80114f6:	2003      	movs	r0, #3
 80114f8:	f000 ffc2 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80114fc:	2100      	movs	r1, #0
 80114fe:	2004      	movs	r0, #4
 8011500:	f000 ffbe 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011504:	2101      	movs	r1, #1
 8011506:	2005      	movs	r0, #5
 8011508:	f000 ffba 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801150c:	2101      	movs	r1, #1
 801150e:	2006      	movs	r0, #6
 8011510:	f000 ffb6 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011514:	2100      	movs	r1, #0
 8011516:	2007      	movs	r0, #7
 8011518:	f000 ffb2 	bl	8012480 <lcd_write_line>
        break;
 801151c:	e0f6      	b.n	801170c <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 801151e:	2101      	movs	r1, #1
 8011520:	2000      	movs	r0, #0
 8011522:	f000 ffad 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011526:	2100      	movs	r1, #0
 8011528:	2001      	movs	r0, #1
 801152a:	f000 ffa9 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801152e:	2101      	movs	r1, #1
 8011530:	2002      	movs	r0, #2
 8011532:	f000 ffa5 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011536:	2101      	movs	r1, #1
 8011538:	2003      	movs	r0, #3
 801153a:	f000 ffa1 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801153e:	2100      	movs	r1, #0
 8011540:	2004      	movs	r0, #4
 8011542:	f000 ff9d 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011546:	2101      	movs	r1, #1
 8011548:	2005      	movs	r0, #5
 801154a:	f000 ff99 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801154e:	2101      	movs	r1, #1
 8011550:	2006      	movs	r0, #6
 8011552:	f000 ff95 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011556:	2100      	movs	r1, #0
 8011558:	2007      	movs	r0, #7
 801155a:	f000 ff91 	bl	8012480 <lcd_write_line>
        break;
 801155e:	e0d5      	b.n	801170c <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 8011560:	2100      	movs	r1, #0
 8011562:	2000      	movs	r0, #0
 8011564:	f000 ff8c 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011568:	2100      	movs	r1, #0
 801156a:	2001      	movs	r0, #1
 801156c:	f000 ff88 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011570:	2101      	movs	r1, #1
 8011572:	2002      	movs	r0, #2
 8011574:	f000 ff84 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011578:	2101      	movs	r1, #1
 801157a:	2003      	movs	r0, #3
 801157c:	f000 ff80 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011580:	2101      	movs	r1, #1
 8011582:	2004      	movs	r0, #4
 8011584:	f000 ff7c 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011588:	2101      	movs	r1, #1
 801158a:	2005      	movs	r0, #5
 801158c:	f000 ff78 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011590:	2100      	movs	r1, #0
 8011592:	2006      	movs	r0, #6
 8011594:	f000 ff74 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011598:	2100      	movs	r1, #0
 801159a:	2007      	movs	r0, #7
 801159c:	f000 ff70 	bl	8012480 <lcd_write_line>
        break;
 80115a0:	e0b4      	b.n	801170c <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80115a2:	2101      	movs	r1, #1
 80115a4:	2000      	movs	r0, #0
 80115a6:	f000 ff6b 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80115aa:	2100      	movs	r1, #0
 80115ac:	2001      	movs	r0, #1
 80115ae:	f000 ff67 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80115b2:	2101      	movs	r1, #1
 80115b4:	2002      	movs	r0, #2
 80115b6:	f000 ff63 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80115ba:	2101      	movs	r1, #1
 80115bc:	2003      	movs	r0, #3
 80115be:	f000 ff5f 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80115c2:	2101      	movs	r1, #1
 80115c4:	2004      	movs	r0, #4
 80115c6:	f000 ff5b 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80115ca:	2100      	movs	r1, #0
 80115cc:	2005      	movs	r0, #5
 80115ce:	f000 ff57 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80115d2:	2101      	movs	r1, #1
 80115d4:	2006      	movs	r0, #6
 80115d6:	f000 ff53 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80115da:	2100      	movs	r1, #0
 80115dc:	2007      	movs	r0, #7
 80115de:	f000 ff4f 	bl	8012480 <lcd_write_line>
        break;
 80115e2:	e093      	b.n	801170c <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 80115e4:	2101      	movs	r1, #1
 80115e6:	2000      	movs	r0, #0
 80115e8:	f000 ff4a 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80115ec:	2101      	movs	r1, #1
 80115ee:	2001      	movs	r0, #1
 80115f0:	f000 ff46 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80115f4:	2101      	movs	r1, #1
 80115f6:	2002      	movs	r0, #2
 80115f8:	f000 ff42 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80115fc:	2101      	movs	r1, #1
 80115fe:	2003      	movs	r0, #3
 8011600:	f000 ff3e 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011604:	2101      	movs	r1, #1
 8011606:	2004      	movs	r0, #4
 8011608:	f000 ff3a 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801160c:	2100      	movs	r1, #0
 801160e:	2005      	movs	r0, #5
 8011610:	f000 ff36 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011614:	2101      	movs	r1, #1
 8011616:	2006      	movs	r0, #6
 8011618:	f000 ff32 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801161c:	2100      	movs	r1, #0
 801161e:	2007      	movs	r0, #7
 8011620:	f000 ff2e 	bl	8012480 <lcd_write_line>
        break;
 8011624:	e072      	b.n	801170c <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011626:	2100      	movs	r1, #0
 8011628:	2000      	movs	r0, #0
 801162a:	f000 ff29 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801162e:	2100      	movs	r1, #0
 8011630:	2001      	movs	r0, #1
 8011632:	f000 ff25 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011636:	2101      	movs	r1, #1
 8011638:	2002      	movs	r0, #2
 801163a:	f000 ff21 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801163e:	2100      	movs	r1, #0
 8011640:	2003      	movs	r0, #3
 8011642:	f000 ff1d 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011646:	2100      	movs	r1, #0
 8011648:	2004      	movs	r0, #4
 801164a:	f000 ff19 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801164e:	2101      	movs	r1, #1
 8011650:	2005      	movs	r0, #5
 8011652:	f000 ff15 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011656:	2101      	movs	r1, #1
 8011658:	2006      	movs	r0, #6
 801165a:	f000 ff11 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801165e:	2100      	movs	r1, #0
 8011660:	2007      	movs	r0, #7
 8011662:	f000 ff0d 	bl	8012480 <lcd_write_line>
        break;
 8011666:	e051      	b.n	801170c <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 8011668:	2101      	movs	r1, #1
 801166a:	2000      	movs	r0, #0
 801166c:	f000 ff08 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011670:	2101      	movs	r1, #1
 8011672:	2001      	movs	r0, #1
 8011674:	f000 ff04 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011678:	2101      	movs	r1, #1
 801167a:	2002      	movs	r0, #2
 801167c:	f000 ff00 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011680:	2101      	movs	r1, #1
 8011682:	2003      	movs	r0, #3
 8011684:	f000 fefc 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011688:	2101      	movs	r1, #1
 801168a:	2004      	movs	r0, #4
 801168c:	f000 fef8 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011690:	2101      	movs	r1, #1
 8011692:	2005      	movs	r0, #5
 8011694:	f000 fef4 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011698:	2101      	movs	r1, #1
 801169a:	2006      	movs	r0, #6
 801169c:	f000 fef0 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80116a0:	2100      	movs	r1, #0
 80116a2:	2007      	movs	r0, #7
 80116a4:	f000 feec 	bl	8012480 <lcd_write_line>
        break;
 80116a8:	e030      	b.n	801170c <lcd_put_char+0x3f4>
 80116aa:	bf00      	nop
 80116ac:	20001d0d 	.word	0x20001d0d
 80116b0:	20001dbc 	.word	0x20001dbc
 80116b4:	20001cfc 	.word	0x20001cfc
 80116b8:	20001d0c 	.word	0x20001d0c
        case '9':
            lcd_write_line(SEG_A, 0);
 80116bc:	2100      	movs	r1, #0
 80116be:	2000      	movs	r0, #0
 80116c0:	f000 fede 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80116c4:	2100      	movs	r1, #0
 80116c6:	2001      	movs	r0, #1
 80116c8:	f000 feda 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80116cc:	2101      	movs	r1, #1
 80116ce:	2002      	movs	r0, #2
 80116d0:	f000 fed6 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80116d4:	2101      	movs	r1, #1
 80116d6:	2003      	movs	r0, #3
 80116d8:	f000 fed2 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80116dc:	2101      	movs	r1, #1
 80116de:	2004      	movs	r0, #4
 80116e0:	f000 fece 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80116e4:	2101      	movs	r1, #1
 80116e6:	2005      	movs	r0, #5
 80116e8:	f000 feca 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80116ec:	2101      	movs	r1, #1
 80116ee:	2006      	movs	r0, #6
 80116f0:	f000 fec6 	bl	8012480 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80116f4:	2100      	movs	r1, #0
 80116f6:	2007      	movs	r0, #7
 80116f8:	f000 fec2 	bl	8012480 <lcd_write_line>
        break;
 80116fc:	e006      	b.n	801170c <lcd_put_char+0x3f4>
            return;
 80116fe:	bf00      	nop
 8011700:	e004      	b.n	801170c <lcd_put_char+0x3f4>
                return;
 8011702:	bf00      	nop
 8011704:	e002      	b.n	801170c <lcd_put_char+0x3f4>
                return;
 8011706:	bf00      	nop
 8011708:	e000      	b.n	801170c <lcd_put_char+0x3f4>
        default:
        break;
 801170a:	bf00      	nop
    }
}
 801170c:	3708      	adds	r7, #8
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop

08011714 <lcd_refresh>:
 * enviar en dicho buffer y luego enviar todo junto.
 * @param None
 * @retval None
 */
void lcd_refresh()
{
 8011714:	b580      	push	{r7, lr}
 8011716:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011718:	f000 fff2 	bl	8012700 <pcf8553_dump>
}
 801171c:	bf00      	nop
 801171e:	bd80      	pop	{r7, pc}

08011720 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	460a      	mov	r2, r1
 801172a:	71fb      	strb	r3, [r7, #7]
 801172c:	4613      	mov	r3, r2
 801172e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d14c      	bne.n	80117d0 <lcd_set_point+0xb0>
    {
        switch (point)
 8011736:	79bb      	ldrb	r3, [r7, #6]
 8011738:	2b06      	cmp	r3, #6
 801173a:	f200 808f 	bhi.w	801185c <lcd_set_point+0x13c>
 801173e:	a201      	add	r2, pc, #4	; (adr r2, 8011744 <lcd_set_point+0x24>)
 8011740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011744:	08011761 	.word	0x08011761
 8011748:	08011771 	.word	0x08011771
 801174c:	08011781 	.word	0x08011781
 8011750:	08011791 	.word	0x08011791
 8011754:	080117a1 	.word	0x080117a1
 8011758:	080117b1 	.word	0x080117b1
 801175c:	080117c1 	.word	0x080117c1
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 8011760:	4b44      	ldr	r3, [pc, #272]	; (8011874 <lcd_set_point+0x154>)
 8011762:	79db      	ldrb	r3, [r3, #7]
 8011764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011768:	b2da      	uxtb	r2, r3
 801176a:	4b42      	ldr	r3, [pc, #264]	; (8011874 <lcd_set_point+0x154>)
 801176c:	71da      	strb	r2, [r3, #7]
            break;
 801176e:	e07a      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 8011770:	4b40      	ldr	r3, [pc, #256]	; (8011874 <lcd_set_point+0x154>)
 8011772:	7a1b      	ldrb	r3, [r3, #8]
 8011774:	f043 0302 	orr.w	r3, r3, #2
 8011778:	b2da      	uxtb	r2, r3
 801177a:	4b3e      	ldr	r3, [pc, #248]	; (8011874 <lcd_set_point+0x154>)
 801177c:	721a      	strb	r2, [r3, #8]
            break;
 801177e:	e072      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 8011780:	4b3c      	ldr	r3, [pc, #240]	; (8011874 <lcd_set_point+0x154>)
 8011782:	7a1b      	ldrb	r3, [r3, #8]
 8011784:	f043 0308 	orr.w	r3, r3, #8
 8011788:	b2da      	uxtb	r2, r3
 801178a:	4b3a      	ldr	r3, [pc, #232]	; (8011874 <lcd_set_point+0x154>)
 801178c:	721a      	strb	r2, [r3, #8]
            break;
 801178e:	e06a      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 8011790:	4b38      	ldr	r3, [pc, #224]	; (8011874 <lcd_set_point+0x154>)
 8011792:	7a1b      	ldrb	r3, [r3, #8]
 8011794:	f043 0320 	orr.w	r3, r3, #32
 8011798:	b2da      	uxtb	r2, r3
 801179a:	4b36      	ldr	r3, [pc, #216]	; (8011874 <lcd_set_point+0x154>)
 801179c:	721a      	strb	r2, [r3, #8]
            break;
 801179e:	e062      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80117a0:	4b34      	ldr	r3, [pc, #208]	; (8011874 <lcd_set_point+0x154>)
 80117a2:	7a1b      	ldrb	r3, [r3, #8]
 80117a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	4b32      	ldr	r3, [pc, #200]	; (8011874 <lcd_set_point+0x154>)
 80117ac:	721a      	strb	r2, [r3, #8]
            break;
 80117ae:	e05a      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 80117b0:	4b30      	ldr	r3, [pc, #192]	; (8011874 <lcd_set_point+0x154>)
 80117b2:	7a5b      	ldrb	r3, [r3, #9]
 80117b4:	f043 0302 	orr.w	r3, r3, #2
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	4b2e      	ldr	r3, [pc, #184]	; (8011874 <lcd_set_point+0x154>)
 80117bc:	725a      	strb	r2, [r3, #9]
            break;
 80117be:	e052      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 80117c0:	4b2c      	ldr	r3, [pc, #176]	; (8011874 <lcd_set_point+0x154>)
 80117c2:	7a5b      	ldrb	r3, [r3, #9]
 80117c4:	f043 0308 	orr.w	r3, r3, #8
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	4b2a      	ldr	r3, [pc, #168]	; (8011874 <lcd_set_point+0x154>)
 80117cc:	725a      	strb	r2, [r3, #9]
            break;
 80117ce:	e04a      	b.n	8011866 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 80117d0:	79fb      	ldrb	r3, [r7, #7]
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d144      	bne.n	8011860 <lcd_set_point+0x140>
    {
        switch (point)
 80117d6:	79bb      	ldrb	r3, [r7, #6]
 80117d8:	2b05      	cmp	r3, #5
 80117da:	d843      	bhi.n	8011864 <lcd_set_point+0x144>
 80117dc:	a201      	add	r2, pc, #4	; (adr r2, 80117e4 <lcd_set_point+0xc4>)
 80117de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e2:	bf00      	nop
 80117e4:	080117fd 	.word	0x080117fd
 80117e8:	0801180d 	.word	0x0801180d
 80117ec:	0801181d 	.word	0x0801181d
 80117f0:	0801182d 	.word	0x0801182d
 80117f4:	0801183d 	.word	0x0801183d
 80117f8:	0801184d 	.word	0x0801184d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 80117fc:	4b1d      	ldr	r3, [pc, #116]	; (8011874 <lcd_set_point+0x154>)
 80117fe:	79db      	ldrb	r3, [r3, #7]
 8011800:	f043 0304 	orr.w	r3, r3, #4
 8011804:	b2da      	uxtb	r2, r3
 8011806:	4b1b      	ldr	r3, [pc, #108]	; (8011874 <lcd_set_point+0x154>)
 8011808:	71da      	strb	r2, [r3, #7]
            break;
 801180a:	e02c      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 801180c:	4b19      	ldr	r3, [pc, #100]	; (8011874 <lcd_set_point+0x154>)
 801180e:	79db      	ldrb	r3, [r3, #7]
 8011810:	f043 0301 	orr.w	r3, r3, #1
 8011814:	b2da      	uxtb	r2, r3
 8011816:	4b17      	ldr	r3, [pc, #92]	; (8011874 <lcd_set_point+0x154>)
 8011818:	71da      	strb	r2, [r3, #7]
            break;
 801181a:	e024      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 801181c:	4b15      	ldr	r3, [pc, #84]	; (8011874 <lcd_set_point+0x154>)
 801181e:	799b      	ldrb	r3, [r3, #6]
 8011820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011824:	b2da      	uxtb	r2, r3
 8011826:	4b13      	ldr	r3, [pc, #76]	; (8011874 <lcd_set_point+0x154>)
 8011828:	719a      	strb	r2, [r3, #6]
            break;
 801182a:	e01c      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 801182c:	4b11      	ldr	r3, [pc, #68]	; (8011874 <lcd_set_point+0x154>)
 801182e:	799b      	ldrb	r3, [r3, #6]
 8011830:	f043 0310 	orr.w	r3, r3, #16
 8011834:	b2da      	uxtb	r2, r3
 8011836:	4b0f      	ldr	r3, [pc, #60]	; (8011874 <lcd_set_point+0x154>)
 8011838:	719a      	strb	r2, [r3, #6]
            break;
 801183a:	e014      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 801183c:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <lcd_set_point+0x154>)
 801183e:	799b      	ldrb	r3, [r3, #6]
 8011840:	f043 0304 	orr.w	r3, r3, #4
 8011844:	b2da      	uxtb	r2, r3
 8011846:	4b0b      	ldr	r3, [pc, #44]	; (8011874 <lcd_set_point+0x154>)
 8011848:	719a      	strb	r2, [r3, #6]
            break;
 801184a:	e00c      	b.n	8011866 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 801184c:	4b09      	ldr	r3, [pc, #36]	; (8011874 <lcd_set_point+0x154>)
 801184e:	799b      	ldrb	r3, [r3, #6]
 8011850:	f043 0301 	orr.w	r3, r3, #1
 8011854:	b2da      	uxtb	r2, r3
 8011856:	4b07      	ldr	r3, [pc, #28]	; (8011874 <lcd_set_point+0x154>)
 8011858:	719a      	strb	r2, [r3, #6]
            break;
 801185a:	e004      	b.n	8011866 <lcd_set_point+0x146>
            break;
 801185c:	bf00      	nop
 801185e:	e002      	b.n	8011866 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 8011860:	bf00      	nop
 8011862:	e000      	b.n	8011866 <lcd_set_point+0x146>
            break;
 8011864:	bf00      	nop
}
 8011866:	bf00      	nop
 8011868:	370c      	adds	r7, #12
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	20001da0 	.word	0x20001da0

08011878 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	4603      	mov	r3, r0
 8011880:	460a      	mov	r2, r1
 8011882:	71fb      	strb	r3, [r7, #7]
 8011884:	4613      	mov	r3, r2
 8011886:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 8011888:	79fb      	ldrb	r3, [r7, #7]
 801188a:	2b16      	cmp	r3, #22
 801188c:	f200 8366 	bhi.w	8011f5c <lcd_set_symbol+0x6e4>
 8011890:	a201      	add	r2, pc, #4	; (adr r2, 8011898 <lcd_set_symbol+0x20>)
 8011892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011896:	bf00      	nop
 8011898:	08011905 	.word	0x08011905
 801189c:	080118f5 	.word	0x080118f5
 80118a0:	08011925 	.word	0x08011925
 80118a4:	08011935 	.word	0x08011935
 80118a8:	08011915 	.word	0x08011915
 80118ac:	08011965 	.word	0x08011965
 80118b0:	08011955 	.word	0x08011955
 80118b4:	08011975 	.word	0x08011975
 80118b8:	08011945 	.word	0x08011945
 80118bc:	08011985 	.word	0x08011985
 80118c0:	08011a13 	.word	0x08011a13
 80118c4:	08011b41 	.word	0x08011b41
 80118c8:	08011b89 	.word	0x08011b89
 80118cc:	08011c17 	.word	0x08011c17
 80118d0:	08011c7b 	.word	0x08011c7b
 80118d4:	08011cdf 	.word	0x08011cdf
 80118d8:	08011d43 	.word	0x08011d43
 80118dc:	08011d7d 	.word	0x08011d7d
 80118e0:	08011da1 	.word	0x08011da1
 80118e4:	08011de9 	.word	0x08011de9
 80118e8:	08011e31 	.word	0x08011e31
 80118ec:	08011e6b 	.word	0x08011e6b
 80118f0:	08011eb3 	.word	0x08011eb3
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 80118f4:	4b91      	ldr	r3, [pc, #580]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80118f6:	789b      	ldrb	r3, [r3, #2]
 80118f8:	f043 0320 	orr.w	r3, r3, #32
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	4b8f      	ldr	r3, [pc, #572]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011900:	709a      	strb	r2, [r3, #2]
        break;
 8011902:	e32c      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011904:	4b8d      	ldr	r3, [pc, #564]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011906:	79db      	ldrb	r3, [r3, #7]
 8011908:	f043 0320 	orr.w	r3, r3, #32
 801190c:	b2da      	uxtb	r2, r3
 801190e:	4b8b      	ldr	r3, [pc, #556]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011910:	71da      	strb	r2, [r3, #7]
        break;
 8011912:	e324      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011914:	4b89      	ldr	r3, [pc, #548]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011916:	7b1b      	ldrb	r3, [r3, #12]
 8011918:	f043 0320 	orr.w	r3, r3, #32
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b87      	ldr	r3, [pc, #540]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011920:	731a      	strb	r2, [r3, #12]
        break;
 8011922:	e31c      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011924:	4b85      	ldr	r3, [pc, #532]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011926:	7c5b      	ldrb	r3, [r3, #17]
 8011928:	f043 0320 	orr.w	r3, r3, #32
 801192c:	b2da      	uxtb	r2, r3
 801192e:	4b83      	ldr	r3, [pc, #524]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011930:	745a      	strb	r2, [r3, #17]
        break;
 8011932:	e314      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011934:	4b81      	ldr	r3, [pc, #516]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011936:	789b      	ldrb	r3, [r3, #2]
 8011938:	f043 0310 	orr.w	r3, r3, #16
 801193c:	b2da      	uxtb	r2, r3
 801193e:	4b7f      	ldr	r3, [pc, #508]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011940:	709a      	strb	r2, [r3, #2]
        break;
 8011942:	e30c      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011944:	4b7d      	ldr	r3, [pc, #500]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011946:	79db      	ldrb	r3, [r3, #7]
 8011948:	f043 0310 	orr.w	r3, r3, #16
 801194c:	b2da      	uxtb	r2, r3
 801194e:	4b7b      	ldr	r3, [pc, #492]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011950:	71da      	strb	r2, [r3, #7]
        break;
 8011952:	e304      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011954:	4b79      	ldr	r3, [pc, #484]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011956:	7b1b      	ldrb	r3, [r3, #12]
 8011958:	f043 0310 	orr.w	r3, r3, #16
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b77      	ldr	r3, [pc, #476]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011960:	731a      	strb	r2, [r3, #12]
        break;
 8011962:	e2fc      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 8011964:	4b75      	ldr	r3, [pc, #468]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011966:	7c5b      	ldrb	r3, [r3, #17]
 8011968:	f043 0310 	orr.w	r3, r3, #16
 801196c:	b2da      	uxtb	r2, r3
 801196e:	4b73      	ldr	r3, [pc, #460]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011970:	745a      	strb	r2, [r3, #17]
        break;
 8011972:	e2f4      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 8011974:	4b71      	ldr	r3, [pc, #452]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011976:	7a9b      	ldrb	r3, [r3, #10]
 8011978:	f043 0302 	orr.w	r3, r3, #2
 801197c:	b2da      	uxtb	r2, r3
 801197e:	4b6f      	ldr	r3, [pc, #444]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011980:	729a      	strb	r2, [r3, #10]
        break;
 8011982:	e2ec      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011984:	4b6d      	ldr	r3, [pc, #436]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011986:	7bdb      	ldrb	r3, [r3, #15]
 8011988:	f043 0320 	orr.w	r3, r3, #32
 801198c:	b2da      	uxtb	r2, r3
 801198e:	4b6b      	ldr	r3, [pc, #428]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011990:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011992:	4b6a      	ldr	r3, [pc, #424]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011994:	7bdb      	ldrb	r3, [r3, #15]
 8011996:	f043 0310 	orr.w	r3, r3, #16
 801199a:	b2da      	uxtb	r2, r3
 801199c:	4b67      	ldr	r3, [pc, #412]	; (8011b3c <lcd_set_symbol+0x2c4>)
 801199e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80119a0:	4b66      	ldr	r3, [pc, #408]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	f043 0320 	orr.w	r3, r3, #32
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	4b64      	ldr	r3, [pc, #400]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119ac:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 80119ae:	4b63      	ldr	r3, [pc, #396]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	f043 0304 	orr.w	r3, r3, #4
 80119b6:	b2da      	uxtb	r2, r3
 80119b8:	4b60      	ldr	r3, [pc, #384]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119ba:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80119bc:	4b5f      	ldr	r3, [pc, #380]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119be:	7b9b      	ldrb	r3, [r3, #14]
 80119c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	4b5d      	ldr	r3, [pc, #372]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119c8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80119ca:	4b5c      	ldr	r3, [pc, #368]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119cc:	7bdb      	ldrb	r3, [r3, #15]
 80119ce:	f043 0302 	orr.w	r3, r3, #2
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	4b59      	ldr	r3, [pc, #356]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119d6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80119d8:	4b58      	ldr	r3, [pc, #352]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119da:	7cdb      	ldrb	r3, [r3, #19]
 80119dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	4b56      	ldr	r3, [pc, #344]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119e4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80119e6:	4b55      	ldr	r3, [pc, #340]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	f043 0301 	orr.w	r3, r3, #1
 80119ee:	b2da      	uxtb	r2, r3
 80119f0:	4b52      	ldr	r3, [pc, #328]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119f2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80119f4:	4b51      	ldr	r3, [pc, #324]	; (8011b3c <lcd_set_symbol+0x2c4>)
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	4b4f      	ldr	r3, [pc, #316]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a00:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011a02:	4b4e      	ldr	r3, [pc, #312]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a04:	795b      	ldrb	r3, [r3, #5]
 8011a06:	f043 0302 	orr.w	r3, r3, #2
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	4b4b      	ldr	r3, [pc, #300]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a0e:	715a      	strb	r2, [r3, #5]
        break;
 8011a10:	e2a5      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011a12:	4b4a      	ldr	r3, [pc, #296]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a14:	7b5b      	ldrb	r3, [r3, #13]
 8011a16:	f043 0302 	orr.w	r3, r3, #2
 8011a1a:	b2da      	uxtb	r2, r3
 8011a1c:	4b47      	ldr	r3, [pc, #284]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a1e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011a20:	4b46      	ldr	r3, [pc, #280]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a22:	7b5b      	ldrb	r3, [r3, #13]
 8011a24:	f043 0301 	orr.w	r3, r3, #1
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	4b44      	ldr	r3, [pc, #272]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a2c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 8011a2e:	4b43      	ldr	r3, [pc, #268]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a30:	7c9b      	ldrb	r3, [r3, #18]
 8011a32:	f043 0302 	orr.w	r3, r3, #2
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	4b40      	ldr	r3, [pc, #256]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a3a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 8011a3c:	4b3f      	ldr	r3, [pc, #252]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a3e:	7c9b      	ldrb	r3, [r3, #18]
 8011a40:	f043 0301 	orr.w	r3, r3, #1
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	4b3d      	ldr	r3, [pc, #244]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a48:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 8011a4a:	4b3c      	ldr	r3, [pc, #240]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a4c:	78db      	ldrb	r3, [r3, #3]
 8011a4e:	f043 0301 	orr.w	r3, r3, #1
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	4b39      	ldr	r3, [pc, #228]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a56:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 8011a58:	4b38      	ldr	r3, [pc, #224]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a5a:	7b5b      	ldrb	r3, [r3, #13]
 8011a5c:	f043 0308 	orr.w	r3, r3, #8
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	4b36      	ldr	r3, [pc, #216]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a64:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 8011a66:	4b35      	ldr	r3, [pc, #212]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a68:	7b5b      	ldrb	r3, [r3, #13]
 8011a6a:	f043 0304 	orr.w	r3, r3, #4
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	4b32      	ldr	r3, [pc, #200]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a72:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 8011a74:	4b31      	ldr	r3, [pc, #196]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a76:	7c9b      	ldrb	r3, [r3, #18]
 8011a78:	f043 0308 	orr.w	r3, r3, #8
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	4b2f      	ldr	r3, [pc, #188]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a80:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 8011a82:	4b2e      	ldr	r3, [pc, #184]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a84:	7c9b      	ldrb	r3, [r3, #18]
 8011a86:	f043 0304 	orr.w	r3, r3, #4
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	4b2b      	ldr	r3, [pc, #172]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a8e:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 8011a90:	4b2a      	ldr	r3, [pc, #168]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a92:	78db      	ldrb	r3, [r3, #3]
 8011a94:	f043 0304 	orr.w	r3, r3, #4
 8011a98:	b2da      	uxtb	r2, r3
 8011a9a:	4b28      	ldr	r3, [pc, #160]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011a9c:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 8011a9e:	4b27      	ldr	r3, [pc, #156]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011aa0:	78db      	ldrb	r3, [r3, #3]
 8011aa2:	f043 0308 	orr.w	r3, r3, #8
 8011aa6:	b2da      	uxtb	r2, r3
 8011aa8:	4b24      	ldr	r3, [pc, #144]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011aaa:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 8011aac:	4b23      	ldr	r3, [pc, #140]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011aae:	7b5b      	ldrb	r3, [r3, #13]
 8011ab0:	f043 0320 	orr.w	r3, r3, #32
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	4b21      	ldr	r3, [pc, #132]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ab8:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 8011aba:	4b20      	ldr	r3, [pc, #128]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011abc:	7b5b      	ldrb	r3, [r3, #13]
 8011abe:	f043 0310 	orr.w	r3, r3, #16
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	4b1d      	ldr	r3, [pc, #116]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ac6:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011ac8:	4b1c      	ldr	r3, [pc, #112]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011aca:	7c9b      	ldrb	r3, [r3, #18]
 8011acc:	f043 0310 	orr.w	r3, r3, #16
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	4b1a      	ldr	r3, [pc, #104]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ad4:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011ad6:	4b19      	ldr	r3, [pc, #100]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ad8:	78db      	ldrb	r3, [r3, #3]
 8011ada:	f043 0320 	orr.w	r3, r3, #32
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	4b16      	ldr	r3, [pc, #88]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ae2:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011ae4:	4b15      	ldr	r3, [pc, #84]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011ae6:	7a1b      	ldrb	r3, [r3, #8]
 8011ae8:	f043 0310 	orr.w	r3, r3, #16
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011af0:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011af2:	4b12      	ldr	r3, [pc, #72]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011af4:	7b5b      	ldrb	r3, [r3, #13]
 8011af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	4b0f      	ldr	r3, [pc, #60]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011afe:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011b00:	4b0e      	ldr	r3, [pc, #56]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b02:	7b5b      	ldrb	r3, [r3, #13]
 8011b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	4b0c      	ldr	r3, [pc, #48]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b0c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 8011b0e:	4b0b      	ldr	r3, [pc, #44]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b10:	7c9b      	ldrb	r3, [r3, #18]
 8011b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	4b08      	ldr	r3, [pc, #32]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b1a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011b1c:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b1e:	78db      	ldrb	r3, [r3, #3]
 8011b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b24:	b2da      	uxtb	r2, r3
 8011b26:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b28:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011b2a:	4b04      	ldr	r3, [pc, #16]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b2c:	7a1b      	ldrb	r3, [r3, #8]
 8011b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	4b01      	ldr	r3, [pc, #4]	; (8011b3c <lcd_set_symbol+0x2c4>)
 8011b36:	721a      	strb	r2, [r3, #8]

        break;
 8011b38:	e211      	b.n	8011f5e <lcd_set_symbol+0x6e6>
 8011b3a:	bf00      	nop
 8011b3c:	20001da0 	.word	0x20001da0
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011b40:	4b96      	ldr	r3, [pc, #600]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b42:	7bdb      	ldrb	r3, [r3, #15]
 8011b44:	f043 0320 	orr.w	r3, r3, #32
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	4b94      	ldr	r3, [pc, #592]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b4c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011b4e:	4b93      	ldr	r3, [pc, #588]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b50:	7bdb      	ldrb	r3, [r3, #15]
 8011b52:	f043 0310 	orr.w	r3, r3, #16
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	4b90      	ldr	r3, [pc, #576]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b5a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011b5c:	4b8f      	ldr	r3, [pc, #572]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b5e:	7bdb      	ldrb	r3, [r3, #15]
 8011b60:	f043 0304 	orr.w	r3, r3, #4
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	4b8d      	ldr	r3, [pc, #564]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b68:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011b6a:	4b8c      	ldr	r3, [pc, #560]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	f043 0320 	orr.w	r3, r3, #32
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	4b89      	ldr	r3, [pc, #548]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b76:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011b78:	4b88      	ldr	r3, [pc, #544]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b7a:	795b      	ldrb	r3, [r3, #5]
 8011b7c:	f043 0310 	orr.w	r3, r3, #16
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	4b86      	ldr	r3, [pc, #536]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b84:	715a      	strb	r2, [r3, #5]
        break;
 8011b86:	e1ea      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011b88:	4b84      	ldr	r3, [pc, #528]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b8a:	7bdb      	ldrb	r3, [r3, #15]
 8011b8c:	f043 0320 	orr.w	r3, r3, #32
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	4b82      	ldr	r3, [pc, #520]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b94:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011b96:	4b81      	ldr	r3, [pc, #516]	; (8011d9c <lcd_set_symbol+0x524>)
 8011b98:	7bdb      	ldrb	r3, [r3, #15]
 8011b9a:	f043 0310 	orr.w	r3, r3, #16
 8011b9e:	b2da      	uxtb	r2, r3
 8011ba0:	4b7e      	ldr	r3, [pc, #504]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ba2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011ba4:	4b7d      	ldr	r3, [pc, #500]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ba6:	7bdb      	ldrb	r3, [r3, #15]
 8011ba8:	f043 0304 	orr.w	r3, r3, #4
 8011bac:	b2da      	uxtb	r2, r3
 8011bae:	4b7b      	ldr	r3, [pc, #492]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bb0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011bb2:	4b7a      	ldr	r3, [pc, #488]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	f043 0320 	orr.w	r3, r3, #32
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	4b77      	ldr	r3, [pc, #476]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bbe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011bc0:	4b76      	ldr	r3, [pc, #472]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bc2:	795b      	ldrb	r3, [r3, #5]
 8011bc4:	f043 0310 	orr.w	r3, r3, #16
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	4b74      	ldr	r3, [pc, #464]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bcc:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011bce:	4b73      	ldr	r3, [pc, #460]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bd0:	7cdb      	ldrb	r3, [r3, #19]
 8011bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	4b70      	ldr	r3, [pc, #448]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bda:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011bdc:	4b6f      	ldr	r3, [pc, #444]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	f043 0301 	orr.w	r3, r3, #1
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	4b6d      	ldr	r3, [pc, #436]	; (8011d9c <lcd_set_symbol+0x524>)
 8011be8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011bea:	4b6c      	ldr	r3, [pc, #432]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	f043 0302 	orr.w	r3, r3, #2
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	4b69      	ldr	r3, [pc, #420]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bf6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011bf8:	4b68      	ldr	r3, [pc, #416]	; (8011d9c <lcd_set_symbol+0x524>)
 8011bfa:	791b      	ldrb	r3, [r3, #4]
 8011bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c00:	b2da      	uxtb	r2, r3
 8011c02:	4b66      	ldr	r3, [pc, #408]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c04:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011c06:	4b65      	ldr	r3, [pc, #404]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c08:	795b      	ldrb	r3, [r3, #5]
 8011c0a:	f043 0302 	orr.w	r3, r3, #2
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	4b62      	ldr	r3, [pc, #392]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c12:	715a      	strb	r2, [r3, #5]
        break;
 8011c14:	e1a3      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011c16:	4b61      	ldr	r3, [pc, #388]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c18:	7b1b      	ldrb	r3, [r3, #12]
 8011c1a:	f043 0301 	orr.w	r3, r3, #1
 8011c1e:	b2da      	uxtb	r2, r3
 8011c20:	4b5e      	ldr	r3, [pc, #376]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c22:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011c24:	4b5d      	ldr	r3, [pc, #372]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c26:	7b1b      	ldrb	r3, [r3, #12]
 8011c28:	f043 0302 	orr.w	r3, r3, #2
 8011c2c:	b2da      	uxtb	r2, r3
 8011c2e:	4b5b      	ldr	r3, [pc, #364]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c30:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011c32:	4b5a      	ldr	r3, [pc, #360]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c34:	7c5b      	ldrb	r3, [r3, #17]
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	4b57      	ldr	r3, [pc, #348]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c3e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011c40:	4b56      	ldr	r3, [pc, #344]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c42:	7c5b      	ldrb	r3, [r3, #17]
 8011c44:	f043 0302 	orr.w	r3, r3, #2
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	4b54      	ldr	r3, [pc, #336]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c4c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011c4e:	4b53      	ldr	r3, [pc, #332]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c50:	789b      	ldrb	r3, [r3, #2]
 8011c52:	f043 0302 	orr.w	r3, r3, #2
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	4b50      	ldr	r3, [pc, #320]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c5a:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011c5c:	4b4f      	ldr	r3, [pc, #316]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c5e:	789b      	ldrb	r3, [r3, #2]
 8011c60:	f043 0301 	orr.w	r3, r3, #1
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	4b4d      	ldr	r3, [pc, #308]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c68:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011c6a:	4b4c      	ldr	r3, [pc, #304]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c6c:	79db      	ldrb	r3, [r3, #7]
 8011c6e:	f043 0302 	orr.w	r3, r3, #2
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b49      	ldr	r3, [pc, #292]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c76:	71da      	strb	r2, [r3, #7]
        break;
 8011c78:	e171      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011c7a:	4b48      	ldr	r3, [pc, #288]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c7c:	7adb      	ldrb	r3, [r3, #11]
 8011c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	4b45      	ldr	r3, [pc, #276]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c86:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011c88:	4b44      	ldr	r3, [pc, #272]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c8a:	7adb      	ldrb	r3, [r3, #11]
 8011c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	4b42      	ldr	r3, [pc, #264]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c94:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011c96:	4b41      	ldr	r3, [pc, #260]	; (8011d9c <lcd_set_symbol+0x524>)
 8011c98:	7c1b      	ldrb	r3, [r3, #16]
 8011c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c9e:	b2da      	uxtb	r2, r3
 8011ca0:	4b3e      	ldr	r3, [pc, #248]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ca2:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011ca4:	4b3d      	ldr	r3, [pc, #244]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ca6:	7c1b      	ldrb	r3, [r3, #16]
 8011ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	4b3b      	ldr	r3, [pc, #236]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cb0:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011cb2:	4b3a      	ldr	r3, [pc, #232]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cb4:	785b      	ldrb	r3, [r3, #1]
 8011cb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cba:	b2da      	uxtb	r2, r3
 8011cbc:	4b37      	ldr	r3, [pc, #220]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cbe:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011cc0:	4b36      	ldr	r3, [pc, #216]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cc2:	785b      	ldrb	r3, [r3, #1]
 8011cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	4b34      	ldr	r3, [pc, #208]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ccc:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011cce:	4b33      	ldr	r3, [pc, #204]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cd0:	799b      	ldrb	r3, [r3, #6]
 8011cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	4b30      	ldr	r3, [pc, #192]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cda:	719a      	strb	r2, [r3, #6]
        break;
 8011cdc:	e13f      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011cde:	4b2f      	ldr	r3, [pc, #188]	; (8011d9c <lcd_set_symbol+0x524>)
 8011ce0:	7adb      	ldrb	r3, [r3, #11]
 8011ce2:	f043 0310 	orr.w	r3, r3, #16
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	4b2c      	ldr	r3, [pc, #176]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cea:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011cec:	4b2b      	ldr	r3, [pc, #172]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cee:	7adb      	ldrb	r3, [r3, #11]
 8011cf0:	f043 0320 	orr.w	r3, r3, #32
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	4b29      	ldr	r3, [pc, #164]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cf8:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011cfa:	4b28      	ldr	r3, [pc, #160]	; (8011d9c <lcd_set_symbol+0x524>)
 8011cfc:	7c1b      	ldrb	r3, [r3, #16]
 8011cfe:	f043 0310 	orr.w	r3, r3, #16
 8011d02:	b2da      	uxtb	r2, r3
 8011d04:	4b25      	ldr	r3, [pc, #148]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d06:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011d08:	4b24      	ldr	r3, [pc, #144]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d0a:	7c1b      	ldrb	r3, [r3, #16]
 8011d0c:	f043 0320 	orr.w	r3, r3, #32
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	4b22      	ldr	r3, [pc, #136]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d14:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011d16:	4b21      	ldr	r3, [pc, #132]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d18:	785b      	ldrb	r3, [r3, #1]
 8011d1a:	f043 0320 	orr.w	r3, r3, #32
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	4b1e      	ldr	r3, [pc, #120]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d22:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011d24:	4b1d      	ldr	r3, [pc, #116]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d26:	785b      	ldrb	r3, [r3, #1]
 8011d28:	f043 0310 	orr.w	r3, r3, #16
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	4b1b      	ldr	r3, [pc, #108]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d30:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011d32:	4b1a      	ldr	r3, [pc, #104]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d34:	799b      	ldrb	r3, [r3, #6]
 8011d36:	f043 0320 	orr.w	r3, r3, #32
 8011d3a:	b2da      	uxtb	r2, r3
 8011d3c:	4b17      	ldr	r3, [pc, #92]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d3e:	719a      	strb	r2, [r3, #6]
        break;
 8011d40:	e10d      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011d42:	4b16      	ldr	r3, [pc, #88]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d44:	7b1b      	ldrb	r3, [r3, #12]
 8011d46:	f043 0304 	orr.w	r3, r3, #4
 8011d4a:	b2da      	uxtb	r2, r3
 8011d4c:	4b13      	ldr	r3, [pc, #76]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d4e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011d50:	4b12      	ldr	r3, [pc, #72]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d52:	7b1b      	ldrb	r3, [r3, #12]
 8011d54:	f043 0308 	orr.w	r3, r3, #8
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	4b10      	ldr	r3, [pc, #64]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d5c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011d5e:	4b0f      	ldr	r3, [pc, #60]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d60:	7c5b      	ldrb	r3, [r3, #17]
 8011d62:	f043 0308 	orr.w	r3, r3, #8
 8011d66:	b2da      	uxtb	r2, r3
 8011d68:	4b0c      	ldr	r3, [pc, #48]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d6a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_3);
 8011d6c:	4b0b      	ldr	r3, [pc, #44]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d6e:	789b      	ldrb	r3, [r3, #2]
 8011d70:	f043 0308 	orr.w	r3, r3, #8
 8011d74:	b2da      	uxtb	r2, r3
 8011d76:	4b09      	ldr	r3, [pc, #36]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d78:	709a      	strb	r2, [r3, #2]
        break;
 8011d7a:	e0f0      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d7c:	4b07      	ldr	r3, [pc, #28]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d7e:	7c5b      	ldrb	r3, [r3, #17]
 8011d80:	f043 0301 	orr.w	r3, r3, #1
 8011d84:	b2da      	uxtb	r2, r3
 8011d86:	4b05      	ldr	r3, [pc, #20]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d88:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011d8a:	4b04      	ldr	r3, [pc, #16]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d8c:	789b      	ldrb	r3, [r3, #2]
 8011d8e:	f043 0301 	orr.w	r3, r3, #1
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	4b01      	ldr	r3, [pc, #4]	; (8011d9c <lcd_set_symbol+0x524>)
 8011d96:	709a      	strb	r2, [r3, #2]
        break;
 8011d98:	e0e1      	b.n	8011f5e <lcd_set_symbol+0x6e6>
 8011d9a:	bf00      	nop
 8011d9c:	20001da0 	.word	0x20001da0
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011da0:	4b73      	ldr	r3, [pc, #460]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011da2:	7b1b      	ldrb	r3, [r3, #12]
 8011da4:	f043 0301 	orr.w	r3, r3, #1
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	4b71      	ldr	r3, [pc, #452]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dac:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011dae:	4b70      	ldr	r3, [pc, #448]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011db0:	7c5b      	ldrb	r3, [r3, #17]
 8011db2:	f043 0301 	orr.w	r3, r3, #1
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	4b6d      	ldr	r3, [pc, #436]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dba:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011dbc:	4b6c      	ldr	r3, [pc, #432]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dbe:	7c5b      	ldrb	r3, [r3, #17]
 8011dc0:	f043 0302 	orr.w	r3, r3, #2
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	4b6a      	ldr	r3, [pc, #424]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dc8:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011dca:	4b69      	ldr	r3, [pc, #420]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dcc:	789b      	ldrb	r3, [r3, #2]
 8011dce:	f043 0302 	orr.w	r3, r3, #2
 8011dd2:	b2da      	uxtb	r2, r3
 8011dd4:	4b66      	ldr	r3, [pc, #408]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dd6:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011dd8:	4b65      	ldr	r3, [pc, #404]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dda:	79db      	ldrb	r3, [r3, #7]
 8011ddc:	f043 0302 	orr.w	r3, r3, #2
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b63      	ldr	r3, [pc, #396]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011de4:	71da      	strb	r2, [r3, #7]
        break;
 8011de6:	e0ba      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011de8:	4b61      	ldr	r3, [pc, #388]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011dea:	7b1b      	ldrb	r3, [r3, #12]
 8011dec:	f043 0301 	orr.w	r3, r3, #1
 8011df0:	b2da      	uxtb	r2, r3
 8011df2:	4b5f      	ldr	r3, [pc, #380]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011df4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011df6:	4b5e      	ldr	r3, [pc, #376]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011df8:	7c5b      	ldrb	r3, [r3, #17]
 8011dfa:	f043 0301 	orr.w	r3, r3, #1
 8011dfe:	b2da      	uxtb	r2, r3
 8011e00:	4b5b      	ldr	r3, [pc, #364]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e02:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011e04:	4b5a      	ldr	r3, [pc, #360]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e06:	7c5b      	ldrb	r3, [r3, #17]
 8011e08:	f043 0302 	orr.w	r3, r3, #2
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	4b58      	ldr	r3, [pc, #352]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e10:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011e12:	4b57      	ldr	r3, [pc, #348]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e14:	789b      	ldrb	r3, [r3, #2]
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	4b54      	ldr	r3, [pc, #336]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e1e:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011e20:	4b53      	ldr	r3, [pc, #332]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e22:	79db      	ldrb	r3, [r3, #7]
 8011e24:	f043 0302 	orr.w	r3, r3, #2
 8011e28:	b2da      	uxtb	r2, r3
 8011e2a:	4b51      	ldr	r3, [pc, #324]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e2c:	71da      	strb	r2, [r3, #7]
        break;
 8011e2e:	e096      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011e30:	4b4f      	ldr	r3, [pc, #316]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e32:	7b1b      	ldrb	r3, [r3, #12]
 8011e34:	f043 0302 	orr.w	r3, r3, #2
 8011e38:	b2da      	uxtb	r2, r3
 8011e3a:	4b4d      	ldr	r3, [pc, #308]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e3c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011e3e:	4b4c      	ldr	r3, [pc, #304]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e40:	7c5b      	ldrb	r3, [r3, #17]
 8011e42:	f043 0301 	orr.w	r3, r3, #1
 8011e46:	b2da      	uxtb	r2, r3
 8011e48:	4b49      	ldr	r3, [pc, #292]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e4a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011e4c:	4b48      	ldr	r3, [pc, #288]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e4e:	7c5b      	ldrb	r3, [r3, #17]
 8011e50:	f043 0302 	orr.w	r3, r3, #2
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	4b46      	ldr	r3, [pc, #280]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e58:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011e5a:	4b45      	ldr	r3, [pc, #276]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e5c:	789b      	ldrb	r3, [r3, #2]
 8011e5e:	f043 0301 	orr.w	r3, r3, #1
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	4b42      	ldr	r3, [pc, #264]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e66:	709a      	strb	r2, [r3, #2]
        break;
 8011e68:	e079      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011e6a:	4b41      	ldr	r3, [pc, #260]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e6c:	7b1b      	ldrb	r3, [r3, #12]
 8011e6e:	f043 0301 	orr.w	r3, r3, #1
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	4b3e      	ldr	r3, [pc, #248]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e76:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011e78:	4b3d      	ldr	r3, [pc, #244]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e7a:	7b1b      	ldrb	r3, [r3, #12]
 8011e7c:	f043 0302 	orr.w	r3, r3, #2
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	4b3b      	ldr	r3, [pc, #236]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e84:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011e86:	4b3a      	ldr	r3, [pc, #232]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e88:	7c5b      	ldrb	r3, [r3, #17]
 8011e8a:	f043 0302 	orr.w	r3, r3, #2
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	4b37      	ldr	r3, [pc, #220]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e92:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011e94:	4b36      	ldr	r3, [pc, #216]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011e96:	789b      	ldrb	r3, [r3, #2]
 8011e98:	f043 0301 	orr.w	r3, r3, #1
 8011e9c:	b2da      	uxtb	r2, r3
 8011e9e:	4b34      	ldr	r3, [pc, #208]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ea0:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011ea2:	4b33      	ldr	r3, [pc, #204]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ea4:	79db      	ldrb	r3, [r3, #7]
 8011ea6:	f043 0302 	orr.w	r3, r3, #2
 8011eaa:	b2da      	uxtb	r2, r3
 8011eac:	4b30      	ldr	r3, [pc, #192]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011eae:	71da      	strb	r2, [r3, #7]
        break;
 8011eb0:	e055      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011eb2:	4b2f      	ldr	r3, [pc, #188]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011eb4:	7bdb      	ldrb	r3, [r3, #15]
 8011eb6:	f043 0320 	orr.w	r3, r3, #32
 8011eba:	b2da      	uxtb	r2, r3
 8011ebc:	4b2c      	ldr	r3, [pc, #176]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ebe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011ec0:	4b2b      	ldr	r3, [pc, #172]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ec2:	7bdb      	ldrb	r3, [r3, #15]
 8011ec4:	f043 0308 	orr.w	r3, r3, #8
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	4b29      	ldr	r3, [pc, #164]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ecc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011ece:	4b28      	ldr	r3, [pc, #160]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ed0:	7bdb      	ldrb	r3, [r3, #15]
 8011ed2:	f043 0304 	orr.w	r3, r3, #4
 8011ed6:	b2da      	uxtb	r2, r3
 8011ed8:	4b25      	ldr	r3, [pc, #148]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011eda:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011edc:	4b24      	ldr	r3, [pc, #144]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	f043 0310 	orr.w	r3, r3, #16
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	4b22      	ldr	r3, [pc, #136]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ee8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011eea:	4b21      	ldr	r3, [pc, #132]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	f043 0320 	orr.w	r3, r3, #32
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	4b1e      	ldr	r3, [pc, #120]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011ef6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011ef8:	4b1d      	ldr	r3, [pc, #116]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f043 0308 	orr.w	r3, r3, #8
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	4b1b      	ldr	r3, [pc, #108]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f04:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011f06:	4b1a      	ldr	r3, [pc, #104]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f08:	7b9b      	ldrb	r3, [r3, #14]
 8011f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	4b17      	ldr	r3, [pc, #92]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f12:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8011f14:	4b16      	ldr	r3, [pc, #88]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f16:	7bdb      	ldrb	r3, [r3, #15]
 8011f18:	f043 0301 	orr.w	r3, r3, #1
 8011f1c:	b2da      	uxtb	r2, r3
 8011f1e:	4b14      	ldr	r3, [pc, #80]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f20:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011f22:	4b13      	ldr	r3, [pc, #76]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f24:	7cdb      	ldrb	r3, [r3, #19]
 8011f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f2a:	b2da      	uxtb	r2, r3
 8011f2c:	4b10      	ldr	r3, [pc, #64]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f2e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011f30:	4b0f      	ldr	r3, [pc, #60]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f043 0301 	orr.w	r3, r3, #1
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	4b0d      	ldr	r3, [pc, #52]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f3c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_6);
 8011f3e:	4b0c      	ldr	r3, [pc, #48]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f40:	791b      	ldrb	r3, [r3, #4]
 8011f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f46:	b2da      	uxtb	r2, r3
 8011f48:	4b09      	ldr	r3, [pc, #36]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f4a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011f4c:	4b08      	ldr	r3, [pc, #32]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f4e:	795b      	ldrb	r3, [r3, #5]
 8011f50:	f043 0302 	orr.w	r3, r3, #2
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	4b06      	ldr	r3, [pc, #24]	; (8011f70 <lcd_set_symbol+0x6f8>)
 8011f58:	715a      	strb	r2, [r3, #5]
        break;
 8011f5a:	e000      	b.n	8011f5e <lcd_set_symbol+0x6e6>
        default:
        break;
 8011f5c:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011f5e:	79bb      	ldrb	r3, [r7, #6]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f000 fb87 	bl	8012674 <pcf8553_blink>
}
 8011f66:	bf00      	nop
 8011f68:	3708      	adds	r7, #8
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20001da0 	.word	0x20001da0

08011f74 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	460a      	mov	r2, r1
 8011f7e:	71fb      	strb	r3, [r7, #7]
 8011f80:	4613      	mov	r3, r2
 8011f82:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2b03      	cmp	r3, #3
 8011f88:	d82a      	bhi.n	8011fe0 <lcd_set_time_unit+0x6c>
 8011f8a:	a201      	add	r2, pc, #4	; (adr r2, 8011f90 <lcd_set_time_unit+0x1c>)
 8011f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f90:	08011fa1 	.word	0x08011fa1
 8011f94:	08011fb1 	.word	0x08011fb1
 8011f98:	08011fc1 	.word	0x08011fc1
 8011f9c:	08011fd1 	.word	0x08011fd1
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011fa0:	4b14      	ldr	r3, [pc, #80]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fa2:	795b      	ldrb	r3, [r3, #5]
 8011fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fa8:	b2da      	uxtb	r2, r3
 8011faa:	4b12      	ldr	r3, [pc, #72]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fac:	715a      	strb	r2, [r3, #5]
        break;
 8011fae:	e018      	b.n	8011fe2 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011fb0:	4b10      	ldr	r3, [pc, #64]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fb2:	7a5b      	ldrb	r3, [r3, #9]
 8011fb4:	f043 0320 	orr.w	r3, r3, #32
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	4b0e      	ldr	r3, [pc, #56]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fbc:	725a      	strb	r2, [r3, #9]
        break;
 8011fbe:	e010      	b.n	8011fe2 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011fc0:	4b0c      	ldr	r3, [pc, #48]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fc2:	7a9b      	ldrb	r3, [r3, #10]
 8011fc4:	f043 0320 	orr.w	r3, r3, #32
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	4b0a      	ldr	r3, [pc, #40]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fcc:	729a      	strb	r2, [r3, #10]
        break;
 8011fce:	e008      	b.n	8011fe2 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011fd0:	4b08      	ldr	r3, [pc, #32]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fd2:	7a5b      	ldrb	r3, [r3, #9]
 8011fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b06      	ldr	r3, [pc, #24]	; (8011ff4 <lcd_set_time_unit+0x80>)
 8011fdc:	725a      	strb	r2, [r3, #9]
        break;
 8011fde:	e000      	b.n	8011fe2 <lcd_set_time_unit+0x6e>
        default:
        break;
 8011fe0:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011fe2:	79bb      	ldrb	r3, [r7, #6]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 fb45 	bl	8012674 <pcf8553_blink>
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	20001da0 	.word	0x20001da0

08011ff8 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	4603      	mov	r3, r0
 8012000:	460a      	mov	r2, r1
 8012002:	71fb      	strb	r3, [r7, #7]
 8012004:	4613      	mov	r3, r2
 8012006:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8012008:	79fb      	ldrb	r3, [r7, #7]
 801200a:	2b07      	cmp	r3, #7
 801200c:	f200 822c 	bhi.w	8012468 <lcd_set_vol_unit+0x470>
 8012010:	a201      	add	r2, pc, #4	; (adr r2, 8012018 <lcd_set_vol_unit+0x20>)
 8012012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012016:	bf00      	nop
 8012018:	08012039 	.word	0x08012039
 801201c:	0801212b 	.word	0x0801212b
 8012020:	080121d5 	.word	0x080121d5
 8012024:	0801208f 	.word	0x0801208f
 8012028:	0801232f 	.word	0x0801232f
 801202c:	08012269 	.word	0x08012269
 8012030:	080123af 	.word	0x080123af
 8012034:	0801242f 	.word	0x0801242f
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012038:	4b8a      	ldr	r3, [pc, #552]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801203a:	7bdb      	ldrb	r3, [r3, #15]
 801203c:	f043 0320 	orr.w	r3, r3, #32
 8012040:	b2da      	uxtb	r2, r3
 8012042:	4b88      	ldr	r3, [pc, #544]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012044:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012046:	4b87      	ldr	r3, [pc, #540]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	f043 0320 	orr.w	r3, r3, #32
 801204e:	b2da      	uxtb	r2, r3
 8012050:	4b84      	ldr	r3, [pc, #528]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012052:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012054:	4b83      	ldr	r3, [pc, #524]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012056:	795b      	ldrb	r3, [r3, #5]
 8012058:	f043 0320 	orr.w	r3, r3, #32
 801205c:	b2da      	uxtb	r2, r3
 801205e:	4b81      	ldr	r3, [pc, #516]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012060:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012062:	4b80      	ldr	r3, [pc, #512]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012064:	7b9b      	ldrb	r3, [r3, #14]
 8012066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801206a:	b2da      	uxtb	r2, r3
 801206c:	4b7d      	ldr	r3, [pc, #500]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801206e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8012070:	4b7c      	ldr	r3, [pc, #496]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012072:	7a9b      	ldrb	r3, [r3, #10]
 8012074:	f043 0301 	orr.w	r3, r3, #1
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b7a      	ldr	r3, [pc, #488]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801207c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 801207e:	4b79      	ldr	r3, [pc, #484]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012080:	7a5b      	ldrb	r3, [r3, #9]
 8012082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012086:	b2da      	uxtb	r2, r3
 8012088:	4b76      	ldr	r3, [pc, #472]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801208a:	725a      	strb	r2, [r3, #9]
        break;
 801208c:	e1ed      	b.n	801246a <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801208e:	4b75      	ldr	r3, [pc, #468]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012090:	7bdb      	ldrb	r3, [r3, #15]
 8012092:	f043 0320 	orr.w	r3, r3, #32
 8012096:	b2da      	uxtb	r2, r3
 8012098:	4b72      	ldr	r3, [pc, #456]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801209a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801209c:	4b71      	ldr	r3, [pc, #452]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801209e:	7bdb      	ldrb	r3, [r3, #15]
 80120a0:	f043 0310 	orr.w	r3, r3, #16
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	4b6f      	ldr	r3, [pc, #444]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80120aa:	4b6e      	ldr	r3, [pc, #440]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120ac:	7bdb      	ldrb	r3, [r3, #15]
 80120ae:	f043 0304 	orr.w	r3, r3, #4
 80120b2:	b2da      	uxtb	r2, r3
 80120b4:	4b6b      	ldr	r3, [pc, #428]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80120b8:	4b6a      	ldr	r3, [pc, #424]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	f043 0320 	orr.w	r3, r3, #32
 80120c0:	b2da      	uxtb	r2, r3
 80120c2:	4b68      	ldr	r3, [pc, #416]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120c4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 80120c6:	4b67      	ldr	r3, [pc, #412]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120c8:	795b      	ldrb	r3, [r3, #5]
 80120ca:	f043 0310 	orr.w	r3, r3, #16
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	4b64      	ldr	r3, [pc, #400]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120d2:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80120d4:	4b63      	ldr	r3, [pc, #396]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120d6:	7b9b      	ldrb	r3, [r3, #14]
 80120d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	4b61      	ldr	r3, [pc, #388]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120e0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80120e2:	4b60      	ldr	r3, [pc, #384]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120e4:	7bdb      	ldrb	r3, [r3, #15]
 80120e6:	f043 0302 	orr.w	r3, r3, #2
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	4b5d      	ldr	r3, [pc, #372]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80120f0:	4b5c      	ldr	r3, [pc, #368]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	f043 0301 	orr.w	r3, r3, #1
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	4b5a      	ldr	r3, [pc, #360]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80120fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80120fe:	4b59      	ldr	r3, [pc, #356]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	f043 0302 	orr.w	r3, r3, #2
 8012106:	b2da      	uxtb	r2, r3
 8012108:	4b56      	ldr	r3, [pc, #344]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801210a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 801210c:	4b55      	ldr	r3, [pc, #340]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801210e:	791b      	ldrb	r3, [r3, #4]
 8012110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012114:	b2da      	uxtb	r2, r3
 8012116:	4b53      	ldr	r3, [pc, #332]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012118:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801211a:	4b52      	ldr	r3, [pc, #328]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801211c:	795b      	ldrb	r3, [r3, #5]
 801211e:	f043 0302 	orr.w	r3, r3, #2
 8012122:	b2da      	uxtb	r2, r3
 8012124:	4b4f      	ldr	r3, [pc, #316]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012126:	715a      	strb	r2, [r3, #5]
        break;
 8012128:	e19f      	b.n	801246a <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801212a:	4b4e      	ldr	r3, [pc, #312]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801212c:	7bdb      	ldrb	r3, [r3, #15]
 801212e:	f043 0320 	orr.w	r3, r3, #32
 8012132:	b2da      	uxtb	r2, r3
 8012134:	4b4b      	ldr	r3, [pc, #300]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012136:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012138:	4b4a      	ldr	r3, [pc, #296]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801213a:	7a9b      	ldrb	r3, [r3, #10]
 801213c:	f043 0304 	orr.w	r3, r3, #4
 8012140:	b2da      	uxtb	r2, r3
 8012142:	4b48      	ldr	r3, [pc, #288]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012144:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012146:	4b47      	ldr	r3, [pc, #284]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012148:	7bdb      	ldrb	r3, [r3, #15]
 801214a:	f043 0310 	orr.w	r3, r3, #16
 801214e:	b2da      	uxtb	r2, r3
 8012150:	4b44      	ldr	r3, [pc, #272]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012152:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012154:	4b43      	ldr	r3, [pc, #268]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012156:	7bdb      	ldrb	r3, [r3, #15]
 8012158:	f043 0308 	orr.w	r3, r3, #8
 801215c:	b2da      	uxtb	r2, r3
 801215e:	4b41      	ldr	r3, [pc, #260]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012160:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012162:	4b40      	ldr	r3, [pc, #256]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	f043 0320 	orr.w	r3, r3, #32
 801216a:	b2da      	uxtb	r2, r3
 801216c:	4b3d      	ldr	r3, [pc, #244]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801216e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012170:	4b3c      	ldr	r3, [pc, #240]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	f043 0308 	orr.w	r3, r3, #8
 8012178:	b2da      	uxtb	r2, r3
 801217a:	4b3a      	ldr	r3, [pc, #232]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801217c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801217e:	4b39      	ldr	r3, [pc, #228]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012180:	7b9b      	ldrb	r3, [r3, #14]
 8012182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012186:	b2da      	uxtb	r2, r3
 8012188:	4b36      	ldr	r3, [pc, #216]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801218a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 801218c:	4b35      	ldr	r3, [pc, #212]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801218e:	7cdb      	ldrb	r3, [r3, #19]
 8012190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012194:	b2da      	uxtb	r2, r3
 8012196:	4b33      	ldr	r3, [pc, #204]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012198:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801219a:	4b32      	ldr	r3, [pc, #200]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801219c:	7cdb      	ldrb	r3, [r3, #19]
 801219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	4b2f      	ldr	r3, [pc, #188]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121a6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80121a8:	4b2e      	ldr	r3, [pc, #184]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	f043 0301 	orr.w	r3, r3, #1
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	4b2c      	ldr	r3, [pc, #176]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121b4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 80121b6:	4b2b      	ldr	r3, [pc, #172]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121b8:	791b      	ldrb	r3, [r3, #4]
 80121ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121be:	b2da      	uxtb	r2, r3
 80121c0:	4b28      	ldr	r3, [pc, #160]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121c2:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80121c4:	4b27      	ldr	r3, [pc, #156]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121c6:	795b      	ldrb	r3, [r3, #5]
 80121c8:	f043 0302 	orr.w	r3, r3, #2
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	4b25      	ldr	r3, [pc, #148]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121d0:	715a      	strb	r2, [r3, #5]
        break;
 80121d2:	e14a      	b.n	801246a <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80121d4:	4b23      	ldr	r3, [pc, #140]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121d6:	7bdb      	ldrb	r3, [r3, #15]
 80121d8:	f043 0320 	orr.w	r3, r3, #32
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	4b21      	ldr	r3, [pc, #132]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121e0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 80121e2:	4b20      	ldr	r3, [pc, #128]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121e4:	7a9b      	ldrb	r3, [r3, #10]
 80121e6:	f043 0304 	orr.w	r3, r3, #4
 80121ea:	b2da      	uxtb	r2, r3
 80121ec:	4b1d      	ldr	r3, [pc, #116]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121ee:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80121f0:	4b1c      	ldr	r3, [pc, #112]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121f2:	7bdb      	ldrb	r3, [r3, #15]
 80121f4:	f043 0310 	orr.w	r3, r3, #16
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	4b1a      	ldr	r3, [pc, #104]	; (8012264 <lcd_set_vol_unit+0x26c>)
 80121fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80121fe:	4b19      	ldr	r3, [pc, #100]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012200:	7bdb      	ldrb	r3, [r3, #15]
 8012202:	f043 0308 	orr.w	r3, r3, #8
 8012206:	b2da      	uxtb	r2, r3
 8012208:	4b16      	ldr	r3, [pc, #88]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801220a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801220c:	4b15      	ldr	r3, [pc, #84]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	f043 0320 	orr.w	r3, r3, #32
 8012214:	b2da      	uxtb	r2, r3
 8012216:	4b13      	ldr	r3, [pc, #76]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012218:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801221a:	4b12      	ldr	r3, [pc, #72]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	f043 0308 	orr.w	r3, r3, #8
 8012222:	b2da      	uxtb	r2, r3
 8012224:	4b0f      	ldr	r3, [pc, #60]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012226:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012228:	4b0e      	ldr	r3, [pc, #56]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801222a:	7b9b      	ldrb	r3, [r3, #14]
 801222c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012230:	b2da      	uxtb	r2, r3
 8012232:	4b0c      	ldr	r3, [pc, #48]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012234:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012236:	4b0b      	ldr	r3, [pc, #44]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012238:	7bdb      	ldrb	r3, [r3, #15]
 801223a:	f043 0302 	orr.w	r3, r3, #2
 801223e:	b2da      	uxtb	r2, r3
 8012240:	4b08      	ldr	r3, [pc, #32]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012242:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012244:	4b07      	ldr	r3, [pc, #28]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	f043 0302 	orr.w	r3, r3, #2
 801224c:	b2da      	uxtb	r2, r3
 801224e:	4b05      	ldr	r3, [pc, #20]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012250:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012252:	4b04      	ldr	r3, [pc, #16]	; (8012264 <lcd_set_vol_unit+0x26c>)
 8012254:	795b      	ldrb	r3, [r3, #5]
 8012256:	f043 0302 	orr.w	r3, r3, #2
 801225a:	b2da      	uxtb	r2, r3
 801225c:	4b01      	ldr	r3, [pc, #4]	; (8012264 <lcd_set_vol_unit+0x26c>)
 801225e:	715a      	strb	r2, [r3, #5]
        break;
 8012260:	e103      	b.n	801246a <lcd_set_vol_unit+0x472>
 8012262:	bf00      	nop
 8012264:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8012268:	4b84      	ldr	r3, [pc, #528]	; (801247c <lcd_set_vol_unit+0x484>)
 801226a:	7a9b      	ldrb	r3, [r3, #10]
 801226c:	f043 0308 	orr.w	r3, r3, #8
 8012270:	b2da      	uxtb	r2, r3
 8012272:	4b82      	ldr	r3, [pc, #520]	; (801247c <lcd_set_vol_unit+0x484>)
 8012274:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 8012276:	4b81      	ldr	r3, [pc, #516]	; (801247c <lcd_set_vol_unit+0x484>)
 8012278:	7a9b      	ldrb	r3, [r3, #10]
 801227a:	f043 0310 	orr.w	r3, r3, #16
 801227e:	b2da      	uxtb	r2, r3
 8012280:	4b7e      	ldr	r3, [pc, #504]	; (801247c <lcd_set_vol_unit+0x484>)
 8012282:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012284:	4b7d      	ldr	r3, [pc, #500]	; (801247c <lcd_set_vol_unit+0x484>)
 8012286:	7bdb      	ldrb	r3, [r3, #15]
 8012288:	f043 0308 	orr.w	r3, r3, #8
 801228c:	b2da      	uxtb	r2, r3
 801228e:	4b7b      	ldr	r3, [pc, #492]	; (801247c <lcd_set_vol_unit+0x484>)
 8012290:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012292:	4b7a      	ldr	r3, [pc, #488]	; (801247c <lcd_set_vol_unit+0x484>)
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	f043 0310 	orr.w	r3, r3, #16
 801229a:	b2da      	uxtb	r2, r3
 801229c:	4b77      	ldr	r3, [pc, #476]	; (801247c <lcd_set_vol_unit+0x484>)
 801229e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 80122a0:	4b76      	ldr	r3, [pc, #472]	; (801247c <lcd_set_vol_unit+0x484>)
 80122a2:	795b      	ldrb	r3, [r3, #5]
 80122a4:	f043 0304 	orr.w	r3, r3, #4
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	4b74      	ldr	r3, [pc, #464]	; (801247c <lcd_set_vol_unit+0x484>)
 80122ac:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80122ae:	4b73      	ldr	r3, [pc, #460]	; (801247c <lcd_set_vol_unit+0x484>)
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f043 0308 	orr.w	r3, r3, #8
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	4b70      	ldr	r3, [pc, #448]	; (801247c <lcd_set_vol_unit+0x484>)
 80122ba:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80122bc:	4b6f      	ldr	r3, [pc, #444]	; (801247c <lcd_set_vol_unit+0x484>)
 80122be:	795b      	ldrb	r3, [r3, #5]
 80122c0:	f043 0320 	orr.w	r3, r3, #32
 80122c4:	b2da      	uxtb	r2, r3
 80122c6:	4b6d      	ldr	r3, [pc, #436]	; (801247c <lcd_set_vol_unit+0x484>)
 80122c8:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80122ca:	4b6c      	ldr	r3, [pc, #432]	; (801247c <lcd_set_vol_unit+0x484>)
 80122cc:	7b9b      	ldrb	r3, [r3, #14]
 80122ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122d2:	b2da      	uxtb	r2, r3
 80122d4:	4b69      	ldr	r3, [pc, #420]	; (801247c <lcd_set_vol_unit+0x484>)
 80122d6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80122d8:	4b68      	ldr	r3, [pc, #416]	; (801247c <lcd_set_vol_unit+0x484>)
 80122da:	7bdb      	ldrb	r3, [r3, #15]
 80122dc:	f043 0302 	orr.w	r3, r3, #2
 80122e0:	b2da      	uxtb	r2, r3
 80122e2:	4b66      	ldr	r3, [pc, #408]	; (801247c <lcd_set_vol_unit+0x484>)
 80122e4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80122e6:	4b65      	ldr	r3, [pc, #404]	; (801247c <lcd_set_vol_unit+0x484>)
 80122e8:	7cdb      	ldrb	r3, [r3, #19]
 80122ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122ee:	b2da      	uxtb	r2, r3
 80122f0:	4b62      	ldr	r3, [pc, #392]	; (801247c <lcd_set_vol_unit+0x484>)
 80122f2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80122f4:	4b61      	ldr	r3, [pc, #388]	; (801247c <lcd_set_vol_unit+0x484>)
 80122f6:	7cdb      	ldrb	r3, [r3, #19]
 80122f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122fc:	b2da      	uxtb	r2, r3
 80122fe:	4b5f      	ldr	r3, [pc, #380]	; (801247c <lcd_set_vol_unit+0x484>)
 8012300:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012302:	4b5e      	ldr	r3, [pc, #376]	; (801247c <lcd_set_vol_unit+0x484>)
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	f043 0301 	orr.w	r3, r3, #1
 801230a:	b2da      	uxtb	r2, r3
 801230c:	4b5b      	ldr	r3, [pc, #364]	; (801247c <lcd_set_vol_unit+0x484>)
 801230e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012310:	4b5a      	ldr	r3, [pc, #360]	; (801247c <lcd_set_vol_unit+0x484>)
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	f043 0302 	orr.w	r3, r3, #2
 8012318:	b2da      	uxtb	r2, r3
 801231a:	4b58      	ldr	r3, [pc, #352]	; (801247c <lcd_set_vol_unit+0x484>)
 801231c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 801231e:	4b57      	ldr	r3, [pc, #348]	; (801247c <lcd_set_vol_unit+0x484>)
 8012320:	795b      	ldrb	r3, [r3, #5]
 8012322:	f043 0301 	orr.w	r3, r3, #1
 8012326:	b2da      	uxtb	r2, r3
 8012328:	4b54      	ldr	r3, [pc, #336]	; (801247c <lcd_set_vol_unit+0x484>)
 801232a:	715a      	strb	r2, [r3, #5]
        break;
 801232c:	e09d      	b.n	801246a <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801232e:	4b53      	ldr	r3, [pc, #332]	; (801247c <lcd_set_vol_unit+0x484>)
 8012330:	7a9b      	ldrb	r3, [r3, #10]
 8012332:	f043 0308 	orr.w	r3, r3, #8
 8012336:	b2da      	uxtb	r2, r3
 8012338:	4b50      	ldr	r3, [pc, #320]	; (801247c <lcd_set_vol_unit+0x484>)
 801233a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801233c:	4b4f      	ldr	r3, [pc, #316]	; (801247c <lcd_set_vol_unit+0x484>)
 801233e:	7bdb      	ldrb	r3, [r3, #15]
 8012340:	f043 0320 	orr.w	r3, r3, #32
 8012344:	b2da      	uxtb	r2, r3
 8012346:	4b4d      	ldr	r3, [pc, #308]	; (801247c <lcd_set_vol_unit+0x484>)
 8012348:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801234a:	4b4c      	ldr	r3, [pc, #304]	; (801247c <lcd_set_vol_unit+0x484>)
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	f043 0310 	orr.w	r3, r3, #16
 8012352:	b2da      	uxtb	r2, r3
 8012354:	4b49      	ldr	r3, [pc, #292]	; (801247c <lcd_set_vol_unit+0x484>)
 8012356:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012358:	4b48      	ldr	r3, [pc, #288]	; (801247c <lcd_set_vol_unit+0x484>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f043 0320 	orr.w	r3, r3, #32
 8012360:	b2da      	uxtb	r2, r3
 8012362:	4b46      	ldr	r3, [pc, #280]	; (801247c <lcd_set_vol_unit+0x484>)
 8012364:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012366:	4b45      	ldr	r3, [pc, #276]	; (801247c <lcd_set_vol_unit+0x484>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	f043 0308 	orr.w	r3, r3, #8
 801236e:	b2da      	uxtb	r2, r3
 8012370:	4b42      	ldr	r3, [pc, #264]	; (801247c <lcd_set_vol_unit+0x484>)
 8012372:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012374:	4b41      	ldr	r3, [pc, #260]	; (801247c <lcd_set_vol_unit+0x484>)
 8012376:	795b      	ldrb	r3, [r3, #5]
 8012378:	f043 0320 	orr.w	r3, r3, #32
 801237c:	b2da      	uxtb	r2, r3
 801237e:	4b3f      	ldr	r3, [pc, #252]	; (801247c <lcd_set_vol_unit+0x484>)
 8012380:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012382:	4b3e      	ldr	r3, [pc, #248]	; (801247c <lcd_set_vol_unit+0x484>)
 8012384:	7bdb      	ldrb	r3, [r3, #15]
 8012386:	f043 0302 	orr.w	r3, r3, #2
 801238a:	b2da      	uxtb	r2, r3
 801238c:	4b3b      	ldr	r3, [pc, #236]	; (801247c <lcd_set_vol_unit+0x484>)
 801238e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012390:	4b3a      	ldr	r3, [pc, #232]	; (801247c <lcd_set_vol_unit+0x484>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	f043 0302 	orr.w	r3, r3, #2
 8012398:	b2da      	uxtb	r2, r3
 801239a:	4b38      	ldr	r3, [pc, #224]	; (801247c <lcd_set_vol_unit+0x484>)
 801239c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801239e:	4b37      	ldr	r3, [pc, #220]	; (801247c <lcd_set_vol_unit+0x484>)
 80123a0:	795b      	ldrb	r3, [r3, #5]
 80123a2:	f043 0302 	orr.w	r3, r3, #2
 80123a6:	b2da      	uxtb	r2, r3
 80123a8:	4b34      	ldr	r3, [pc, #208]	; (801247c <lcd_set_vol_unit+0x484>)
 80123aa:	715a      	strb	r2, [r3, #5]
        break;
 80123ac:	e05d      	b.n	801246a <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80123ae:	4b33      	ldr	r3, [pc, #204]	; (801247c <lcd_set_vol_unit+0x484>)
 80123b0:	7a9b      	ldrb	r3, [r3, #10]
 80123b2:	f043 0308 	orr.w	r3, r3, #8
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	4b30      	ldr	r3, [pc, #192]	; (801247c <lcd_set_vol_unit+0x484>)
 80123ba:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80123bc:	4b2f      	ldr	r3, [pc, #188]	; (801247c <lcd_set_vol_unit+0x484>)
 80123be:	7bdb      	ldrb	r3, [r3, #15]
 80123c0:	f043 0320 	orr.w	r3, r3, #32
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	4b2d      	ldr	r3, [pc, #180]	; (801247c <lcd_set_vol_unit+0x484>)
 80123c8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80123ca:	4b2c      	ldr	r3, [pc, #176]	; (801247c <lcd_set_vol_unit+0x484>)
 80123cc:	7bdb      	ldrb	r3, [r3, #15]
 80123ce:	f043 0308 	orr.w	r3, r3, #8
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	4b29      	ldr	r3, [pc, #164]	; (801247c <lcd_set_vol_unit+0x484>)
 80123d6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80123d8:	4b28      	ldr	r3, [pc, #160]	; (801247c <lcd_set_vol_unit+0x484>)
 80123da:	7bdb      	ldrb	r3, [r3, #15]
 80123dc:	f043 0304 	orr.w	r3, r3, #4
 80123e0:	b2da      	uxtb	r2, r3
 80123e2:	4b26      	ldr	r3, [pc, #152]	; (801247c <lcd_set_vol_unit+0x484>)
 80123e4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80123e6:	4b25      	ldr	r3, [pc, #148]	; (801247c <lcd_set_vol_unit+0x484>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	f043 0310 	orr.w	r3, r3, #16
 80123ee:	b2da      	uxtb	r2, r3
 80123f0:	4b22      	ldr	r3, [pc, #136]	; (801247c <lcd_set_vol_unit+0x484>)
 80123f2:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80123f4:	4b21      	ldr	r3, [pc, #132]	; (801247c <lcd_set_vol_unit+0x484>)
 80123f6:	7b9b      	ldrb	r3, [r3, #14]
 80123f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	4b1f      	ldr	r3, [pc, #124]	; (801247c <lcd_set_vol_unit+0x484>)
 8012400:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012402:	4b1e      	ldr	r3, [pc, #120]	; (801247c <lcd_set_vol_unit+0x484>)
 8012404:	7bdb      	ldrb	r3, [r3, #15]
 8012406:	f043 0302 	orr.w	r3, r3, #2
 801240a:	b2da      	uxtb	r2, r3
 801240c:	4b1b      	ldr	r3, [pc, #108]	; (801247c <lcd_set_vol_unit+0x484>)
 801240e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012410:	4b1a      	ldr	r3, [pc, #104]	; (801247c <lcd_set_vol_unit+0x484>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	f043 0302 	orr.w	r3, r3, #2
 8012418:	b2da      	uxtb	r2, r3
 801241a:	4b18      	ldr	r3, [pc, #96]	; (801247c <lcd_set_vol_unit+0x484>)
 801241c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801241e:	4b17      	ldr	r3, [pc, #92]	; (801247c <lcd_set_vol_unit+0x484>)
 8012420:	795b      	ldrb	r3, [r3, #5]
 8012422:	f043 0302 	orr.w	r3, r3, #2
 8012426:	b2da      	uxtb	r2, r3
 8012428:	4b14      	ldr	r3, [pc, #80]	; (801247c <lcd_set_vol_unit+0x484>)
 801242a:	715a      	strb	r2, [r3, #5]
        break;
 801242c:	e01d      	b.n	801246a <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801242e:	4b13      	ldr	r3, [pc, #76]	; (801247c <lcd_set_vol_unit+0x484>)
 8012430:	7bdb      	ldrb	r3, [r3, #15]
 8012432:	f043 0304 	orr.w	r3, r3, #4
 8012436:	b2da      	uxtb	r2, r3
 8012438:	4b10      	ldr	r3, [pc, #64]	; (801247c <lcd_set_vol_unit+0x484>)
 801243a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801243c:	4b0f      	ldr	r3, [pc, #60]	; (801247c <lcd_set_vol_unit+0x484>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f043 0310 	orr.w	r3, r3, #16
 8012444:	b2da      	uxtb	r2, r3
 8012446:	4b0d      	ldr	r3, [pc, #52]	; (801247c <lcd_set_vol_unit+0x484>)
 8012448:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801244a:	4b0c      	ldr	r3, [pc, #48]	; (801247c <lcd_set_vol_unit+0x484>)
 801244c:	7cdb      	ldrb	r3, [r3, #19]
 801244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012452:	b2da      	uxtb	r2, r3
 8012454:	4b09      	ldr	r3, [pc, #36]	; (801247c <lcd_set_vol_unit+0x484>)
 8012456:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012458:	4b08      	ldr	r3, [pc, #32]	; (801247c <lcd_set_vol_unit+0x484>)
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	f043 0301 	orr.w	r3, r3, #1
 8012460:	b2da      	uxtb	r2, r3
 8012462:	4b06      	ldr	r3, [pc, #24]	; (801247c <lcd_set_vol_unit+0x484>)
 8012464:	701a      	strb	r2, [r3, #0]
        break;
 8012466:	e000      	b.n	801246a <lcd_set_vol_unit+0x472>
        default:
        break;
 8012468:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 801246a:	79bb      	ldrb	r3, [r7, #6]
 801246c:	4618      	mov	r0, r3
 801246e:	f000 f901 	bl	8012674 <pcf8553_blink>
}
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	20001da0 	.word	0x20001da0

08012480 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	4603      	mov	r3, r0
 8012488:	460a      	mov	r2, r1
 801248a:	71fb      	strb	r3, [r7, #7]
 801248c:	4613      	mov	r3, r2
 801248e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 8012490:	2300      	movs	r3, #0
 8012492:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 8012498:	4b33      	ldr	r3, [pc, #204]	; (8012568 <lcd_write_line+0xe8>)
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d002      	beq.n	80124a6 <lcd_write_line+0x26>
 80124a0:	2b02      	cmp	r3, #2
 80124a2:	d01b      	beq.n	80124dc <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 80124a4:	e035      	b.n	8012512 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 80124a6:	79fb      	ldrb	r3, [r7, #7]
 80124a8:	4a30      	ldr	r2, [pc, #192]	; (801256c <lcd_write_line+0xec>)
 80124aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80124ae:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80124b0:	4b2f      	ldr	r3, [pc, #188]	; (8012570 <lcd_write_line+0xf0>)
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	7bbb      	ldrb	r3, [r7, #14]
 80124ba:	4413      	add	r3, r2
 80124bc:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 80124be:	7bbb      	ldrb	r3, [r7, #14]
 80124c0:	08db      	lsrs	r3, r3, #3
 80124c2:	b2da      	uxtb	r2, r3
 80124c4:	79fb      	ldrb	r3, [r7, #7]
 80124c6:	4929      	ldr	r1, [pc, #164]	; (801256c <lcd_write_line+0xec>)
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	440b      	add	r3, r1
 80124cc:	785b      	ldrb	r3, [r3, #1]
 80124ce:	4413      	add	r3, r2
 80124d0:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 80124d2:	7bbb      	ldrb	r3, [r7, #14]
 80124d4:	f003 0307 	and.w	r3, r3, #7
 80124d8:	73bb      	strb	r3, [r7, #14]
        break;
 80124da:	e01a      	b.n	8012512 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 80124dc:	79fb      	ldrb	r3, [r7, #7]
 80124de:	4a25      	ldr	r2, [pc, #148]	; (8012574 <lcd_write_line+0xf4>)
 80124e0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80124e4:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80124e6:	4b22      	ldr	r3, [pc, #136]	; (8012570 <lcd_write_line+0xf0>)
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	b2da      	uxtb	r2, r3
 80124ee:	7bbb      	ldrb	r3, [r7, #14]
 80124f0:	4413      	add	r3, r2
 80124f2:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 80124f4:	7bbb      	ldrb	r3, [r7, #14]
 80124f6:	08db      	lsrs	r3, r3, #3
 80124f8:	b2da      	uxtb	r2, r3
 80124fa:	79fb      	ldrb	r3, [r7, #7]
 80124fc:	491d      	ldr	r1, [pc, #116]	; (8012574 <lcd_write_line+0xf4>)
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	440b      	add	r3, r1
 8012502:	785b      	ldrb	r3, [r3, #1]
 8012504:	4413      	add	r3, r2
 8012506:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	f003 0307 	and.w	r3, r3, #7
 801250e:	73bb      	strb	r3, [r7, #14]
        break;
 8012510:	bf00      	nop
    }

    if (data)
 8012512:	79bb      	ldrb	r3, [r7, #6]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00f      	beq.n	8012538 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012518:	7bfb      	ldrb	r3, [r7, #15]
 801251a:	4a17      	ldr	r2, [pc, #92]	; (8012578 <lcd_write_line+0xf8>)
 801251c:	5cd3      	ldrb	r3, [r2, r3]
 801251e:	b25a      	sxtb	r2, r3
 8012520:	7bbb      	ldrb	r3, [r7, #14]
 8012522:	2101      	movs	r1, #1
 8012524:	fa01 f303 	lsl.w	r3, r1, r3
 8012528:	b25b      	sxtb	r3, r3
 801252a:	4313      	orrs	r3, r2
 801252c:	b25a      	sxtb	r2, r3
 801252e:	7bfb      	ldrb	r3, [r7, #15]
 8012530:	b2d1      	uxtb	r1, r2
 8012532:	4a11      	ldr	r2, [pc, #68]	; (8012578 <lcd_write_line+0xf8>)
 8012534:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 8012536:	e010      	b.n	801255a <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012538:	7bfb      	ldrb	r3, [r7, #15]
 801253a:	4a0f      	ldr	r2, [pc, #60]	; (8012578 <lcd_write_line+0xf8>)
 801253c:	5cd3      	ldrb	r3, [r2, r3]
 801253e:	b25a      	sxtb	r2, r3
 8012540:	7bbb      	ldrb	r3, [r7, #14]
 8012542:	2101      	movs	r1, #1
 8012544:	fa01 f303 	lsl.w	r3, r1, r3
 8012548:	b25b      	sxtb	r3, r3
 801254a:	43db      	mvns	r3, r3
 801254c:	b25b      	sxtb	r3, r3
 801254e:	4013      	ands	r3, r2
 8012550:	b25a      	sxtb	r2, r3
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	b2d1      	uxtb	r1, r2
 8012556:	4a08      	ldr	r2, [pc, #32]	; (8012578 <lcd_write_line+0xf8>)
 8012558:	54d1      	strb	r1, [r2, r3]
}
 801255a:	bf00      	nop
 801255c:	3714      	adds	r7, #20
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop
 8012568:	20001d0d 	.word	0x20001d0d
 801256c:	20000120 	.word	0x20000120
 8012570:	20001d0c 	.word	0x20001d0c
 8012574:	20000130 	.word	0x20000130
 8012578:	20001da0 	.word	0x20001da0

0801257c <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	4603      	mov	r3, r0
 8012584:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	f003 031f 	and.w	r3, r3, #31
 801258c:	b2da      	uxtb	r2, r3
 801258e:	7b3b      	ldrb	r3, [r7, #12]
 8012590:	f362 0304 	bfi	r3, r2, #0, #5
 8012594:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 8012596:	7b3b      	ldrb	r3, [r7, #12]
 8012598:	f36f 1346 	bfc	r3, #5, #2
 801259c:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 801259e:	7b3b      	ldrb	r3, [r7, #12]
 80125a0:	f36f 13c7 	bfc	r3, #7, #1
 80125a4:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80125a6:	2314      	movs	r3, #20
 80125a8:	f107 010c 	add.w	r1, r7, #12
 80125ac:	2201      	movs	r2, #1
 80125ae:	4803      	ldr	r0, [pc, #12]	; (80125bc <prepare_to_send+0x40>)
 80125b0:	f7f7 fa62 	bl	8009a78 <HAL_SPI_Transmit>
}
 80125b4:	bf00      	nop
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	20001d10 	.word	0x20001d10

080125c0 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 80125c4:	4b29      	ldr	r3, [pc, #164]	; (801266c <spi1_init+0xac>)
 80125c6:	4a2a      	ldr	r2, [pc, #168]	; (8012670 <spi1_init+0xb0>)
 80125c8:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 80125ca:	4b28      	ldr	r3, [pc, #160]	; (801266c <spi1_init+0xac>)
 80125cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80125d0:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 80125d2:	4b26      	ldr	r3, [pc, #152]	; (801266c <spi1_init+0xac>)
 80125d4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80125d8:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80125da:	4b24      	ldr	r3, [pc, #144]	; (801266c <spi1_init+0xac>)
 80125dc:	2207      	movs	r2, #7
 80125de:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80125e0:	4b22      	ldr	r3, [pc, #136]	; (801266c <spi1_init+0xac>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80125e6:	4b21      	ldr	r3, [pc, #132]	; (801266c <spi1_init+0xac>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 80125ec:	4b1f      	ldr	r3, [pc, #124]	; (801266c <spi1_init+0xac>)
 80125ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80125f2:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80125f4:	4b1d      	ldr	r3, [pc, #116]	; (801266c <spi1_init+0xac>)
 80125f6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80125fa:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80125fc:	4b1b      	ldr	r3, [pc, #108]	; (801266c <spi1_init+0xac>)
 80125fe:	2200      	movs	r2, #0
 8012600:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012602:	4b1a      	ldr	r3, [pc, #104]	; (801266c <spi1_init+0xac>)
 8012604:	2200      	movs	r2, #0
 8012606:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012608:	4b18      	ldr	r3, [pc, #96]	; (801266c <spi1_init+0xac>)
 801260a:	2200      	movs	r2, #0
 801260c:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 801260e:	4b17      	ldr	r3, [pc, #92]	; (801266c <spi1_init+0xac>)
 8012610:	2207      	movs	r2, #7
 8012612:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012614:	4b15      	ldr	r3, [pc, #84]	; (801266c <spi1_init+0xac>)
 8012616:	2200      	movs	r2, #0
 8012618:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801261a:	4b14      	ldr	r3, [pc, #80]	; (801266c <spi1_init+0xac>)
 801261c:	2200      	movs	r2, #0
 801261e:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012620:	4b12      	ldr	r3, [pc, #72]	; (801266c <spi1_init+0xac>)
 8012622:	2200      	movs	r2, #0
 8012624:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8012626:	4b11      	ldr	r3, [pc, #68]	; (801266c <spi1_init+0xac>)
 8012628:	2200      	movs	r2, #0
 801262a:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801262c:	4b0f      	ldr	r3, [pc, #60]	; (801266c <spi1_init+0xac>)
 801262e:	2200      	movs	r2, #0
 8012630:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8012632:	4b0e      	ldr	r3, [pc, #56]	; (801266c <spi1_init+0xac>)
 8012634:	2200      	movs	r2, #0
 8012636:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012638:	4b0c      	ldr	r3, [pc, #48]	; (801266c <spi1_init+0xac>)
 801263a:	2200      	movs	r2, #0
 801263c:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801263e:	4b0b      	ldr	r3, [pc, #44]	; (801266c <spi1_init+0xac>)
 8012640:	2200      	movs	r2, #0
 8012642:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8012644:	4b09      	ldr	r3, [pc, #36]	; (801266c <spi1_init+0xac>)
 8012646:	2200      	movs	r2, #0
 8012648:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 801264a:	4b08      	ldr	r3, [pc, #32]	; (801266c <spi1_init+0xac>)
 801264c:	2200      	movs	r2, #0
 801264e:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012650:	4b06      	ldr	r3, [pc, #24]	; (801266c <spi1_init+0xac>)
 8012652:	2200      	movs	r2, #0
 8012654:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 8012656:	4805      	ldr	r0, [pc, #20]	; (801266c <spi1_init+0xac>)
 8012658:	f7f7 f8f8 	bl	800984c <HAL_SPI_Init>
 801265c:	4603      	mov	r3, r0
 801265e:	2b00      	cmp	r3, #0
 8012660:	d001      	beq.n	8012666 <spi1_init+0xa6>
    {
        Error_Handler();
 8012662:	f7ee fea1 	bl	80013a8 <Error_Handler>
    }
}
 8012666:	bf00      	nop
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	20001d10 	.word	0x20001d10
 8012670:	40013000 	.word	0x40013000

08012674 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	4603      	mov	r3, r0
 801267c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801267e:	2200      	movs	r2, #0
 8012680:	2110      	movs	r1, #16
 8012682:	480f      	ldr	r0, [pc, #60]	; (80126c0 <pcf8553_blink+0x4c>)
 8012684:	f7f1 fed0 	bl	8004428 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 8012688:	79fb      	ldrb	r3, [r7, #7]
 801268a:	f003 0303 	and.w	r3, r3, #3
 801268e:	b2d9      	uxtb	r1, r3
 8012690:	4a0c      	ldr	r2, [pc, #48]	; (80126c4 <pcf8553_blink+0x50>)
 8012692:	7813      	ldrb	r3, [r2, #0]
 8012694:	f361 0342 	bfi	r3, r1, #1, #2
 8012698:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 801269a:	2003      	movs	r0, #3
 801269c:	f7ff ff6e 	bl	801257c <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80126a0:	2314      	movs	r3, #20
 80126a2:	2201      	movs	r2, #1
 80126a4:	4907      	ldr	r1, [pc, #28]	; (80126c4 <pcf8553_blink+0x50>)
 80126a6:	4808      	ldr	r0, [pc, #32]	; (80126c8 <pcf8553_blink+0x54>)
 80126a8:	f7f7 f9e6 	bl	8009a78 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80126ac:	2201      	movs	r2, #1
 80126ae:	2110      	movs	r1, #16
 80126b0:	4803      	ldr	r0, [pc, #12]	; (80126c0 <pcf8553_blink+0x4c>)
 80126b2:	f7f1 feb9 	bl	8004428 <HAL_GPIO_WritePin>
}
 80126b6:	bf00      	nop
 80126b8:	3708      	adds	r7, #8
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	42020000 	.word	0x42020000
 80126c4:	20001db8 	.word	0x20001db8
 80126c8:	20001d10 	.word	0x20001d10

080126cc <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80126d2:	2300      	movs	r3, #0
 80126d4:	607b      	str	r3, [r7, #4]
 80126d6:	e007      	b.n	80126e8 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 80126d8:	4a08      	ldr	r2, [pc, #32]	; (80126fc <pcf8553_clear_buff+0x30>)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4413      	add	r3, r2
 80126de:	2200      	movs	r2, #0
 80126e0:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	3301      	adds	r3, #1
 80126e6:	607b      	str	r3, [r7, #4]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b13      	cmp	r3, #19
 80126ec:	ddf4      	ble.n	80126d8 <pcf8553_clear_buff+0xc>
    }
}
 80126ee:	bf00      	nop
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr
 80126fc:	20001da0 	.word	0x20001da0

08012700 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012706:	2200      	movs	r2, #0
 8012708:	2110      	movs	r1, #16
 801270a:	4810      	ldr	r0, [pc, #64]	; (801274c <pcf8553_dump+0x4c>)
 801270c:	f7f1 fe8c 	bl	8004428 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012710:	2004      	movs	r0, #4
 8012712:	f7ff ff33 	bl	801257c <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012716:	2300      	movs	r3, #0
 8012718:	607b      	str	r3, [r7, #4]
 801271a:	e00a      	b.n	8012732 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	4a0c      	ldr	r2, [pc, #48]	; (8012750 <pcf8553_dump+0x50>)
 8012720:	1899      	adds	r1, r3, r2
 8012722:	2314      	movs	r3, #20
 8012724:	2201      	movs	r2, #1
 8012726:	480b      	ldr	r0, [pc, #44]	; (8012754 <pcf8553_dump+0x54>)
 8012728:	f7f7 f9a6 	bl	8009a78 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	3301      	adds	r3, #1
 8012730:	607b      	str	r3, [r7, #4]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b13      	cmp	r3, #19
 8012736:	ddf1      	ble.n	801271c <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012738:	2201      	movs	r2, #1
 801273a:	2110      	movs	r1, #16
 801273c:	4803      	ldr	r0, [pc, #12]	; (801274c <pcf8553_dump+0x4c>)
 801273e:	f7f1 fe73 	bl	8004428 <HAL_GPIO_WritePin>
}
 8012742:	bf00      	nop
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	42020000 	.word	0x42020000
 8012750:	20001da0 	.word	0x20001da0
 8012754:	20001d10 	.word	0x20001d10

08012758 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 8012758:	b580      	push	{r7, lr}
 801275a:	af00      	add	r7, sp, #0
    spi1_init();
 801275c:	f7ff ff30 	bl	80125c0 <spi1_init>
    pcf8553_reset();
 8012760:	f000 f830 	bl	80127c4 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 8012764:	2314      	movs	r3, #20
 8012766:	4618      	mov	r0, r3
 8012768:	f7ef f986 	bl	8001a78 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801276c:	2200      	movs	r2, #0
 801276e:	2110      	movs	r1, #16
 8012770:	480f      	ldr	r0, [pc, #60]	; (80127b0 <pcf8553_init+0x58>)
 8012772:	f7f1 fe59 	bl	8004428 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 8012776:	2001      	movs	r0, #1
 8012778:	f7ff ff00 	bl	801257c <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 801277c:	2314      	movs	r3, #20
 801277e:	2201      	movs	r2, #1
 8012780:	490c      	ldr	r1, [pc, #48]	; (80127b4 <pcf8553_init+0x5c>)
 8012782:	480d      	ldr	r0, [pc, #52]	; (80127b8 <pcf8553_init+0x60>)
 8012784:	f7f7 f978 	bl	8009a78 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 8012788:	2314      	movs	r3, #20
 801278a:	2201      	movs	r2, #1
 801278c:	490b      	ldr	r1, [pc, #44]	; (80127bc <pcf8553_init+0x64>)
 801278e:	480a      	ldr	r0, [pc, #40]	; (80127b8 <pcf8553_init+0x60>)
 8012790:	f7f7 f972 	bl	8009a78 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012794:	2314      	movs	r3, #20
 8012796:	2201      	movs	r2, #1
 8012798:	4909      	ldr	r1, [pc, #36]	; (80127c0 <pcf8553_init+0x68>)
 801279a:	4807      	ldr	r0, [pc, #28]	; (80127b8 <pcf8553_init+0x60>)
 801279c:	f7f7 f96c 	bl	8009a78 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80127a0:	2201      	movs	r2, #1
 80127a2:	2110      	movs	r1, #16
 80127a4:	4802      	ldr	r0, [pc, #8]	; (80127b0 <pcf8553_init+0x58>)
 80127a6:	f7f1 fe3f 	bl	8004428 <HAL_GPIO_WritePin>
}
 80127aa:	bf00      	nop
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	42020000 	.word	0x42020000
 80127b4:	20001db4 	.word	0x20001db4
 80127b8:	20001d10 	.word	0x20001d10
 80127bc:	20000140 	.word	0x20000140
 80127c0:	20001db8 	.word	0x20001db8

080127c4 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 80127c8:	2200      	movs	r2, #0
 80127ca:	2140      	movs	r1, #64	; 0x40
 80127cc:	4806      	ldr	r0, [pc, #24]	; (80127e8 <pcf8553_reset+0x24>)
 80127ce:	f7f1 fe2b 	bl	8004428 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 80127d2:	2314      	movs	r3, #20
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ef f94f 	bl	8001a78 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 80127da:	2201      	movs	r2, #1
 80127dc:	2140      	movs	r1, #64	; 0x40
 80127de:	4802      	ldr	r0, [pc, #8]	; (80127e8 <pcf8553_reset+0x24>)
 80127e0:	f7f1 fe22 	bl	8004428 <HAL_GPIO_WritePin>
}
 80127e4:	bf00      	nop
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	42020000 	.word	0x42020000

080127ec <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	4603      	mov	r3, r0
 80127f4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80127f6:	2300      	movs	r3, #0
 80127f8:	60fb      	str	r3, [r7, #12]
 80127fa:	e007      	b.n	801280c <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 80127fc:	4a08      	ldr	r2, [pc, #32]	; (8012820 <pcf8553_write_all+0x34>)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	4413      	add	r3, r2
 8012802:	79fa      	ldrb	r2, [r7, #7]
 8012804:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	3301      	adds	r3, #1
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2b13      	cmp	r3, #19
 8012810:	ddf4      	ble.n	80127fc <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012812:	f7ff ff75 	bl	8012700 <pcf8553_dump>
}
 8012816:	bf00      	nop
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20001da0 	.word	0x20001da0

08012824 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012824:	b5b0      	push	{r4, r5, r7, lr}
 8012826:	b0b4      	sub	sp, #208	; 0xd0
 8012828:	af00      	add	r7, sp, #0
 801282a:	4603      	mov	r3, r0
 801282c:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 801282e:	4b9d      	ldr	r3, [pc, #628]	; (8012aa4 <fm_menu_config_date_hour+0x280>)
 8012830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 8012834:	4b9c      	ldr	r3, [pc, #624]	; (8012aa8 <fm_menu_config_date_hour+0x284>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b01      	cmp	r3, #1
 801283a:	d107      	bne.n	801284c <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 801283c:	4b9b      	ldr	r3, [pc, #620]	; (8012aac <fm_menu_config_date_hour+0x288>)
 801283e:	2200      	movs	r2, #0
 8012840:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012842:	f7fd f968 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8012846:	4b98      	ldr	r3, [pc, #608]	; (8012aa8 <fm_menu_config_date_hour+0x284>)
 8012848:	2200      	movs	r2, #0
 801284a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 801284c:	4b97      	ldr	r3, [pc, #604]	; (8012aac <fm_menu_config_date_hour+0x288>)
 801284e:	781a      	ldrb	r2, [r3, #0]
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	4619      	mov	r1, r3
 8012854:	2001      	movs	r0, #1
 8012856:	f7fd f965 	bl	800fb24 <fm_lcd_date_hour>
    fm_lcd_refresh();
 801285a:	f7fd fce8 	bl	801022e <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 801285e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012862:	4618      	mov	r0, r3
 8012864:	f7fc faec 	bl	800ee40 <fm_factory_get_date_time>
 8012868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801286a:	b2da      	uxtb	r2, r3
 801286c:	4b90      	ldr	r3, [pc, #576]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 801286e:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 8012870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012874:	4618      	mov	r0, r3
 8012876:	f7fc fae3 	bl	800ee40 <fm_factory_get_date_time>
 801287a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801287c:	b2da      	uxtb	r2, r3
 801287e:	4b8d      	ldr	r3, [pc, #564]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012880:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 8012882:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012886:	4618      	mov	r0, r3
 8012888:	f7fc fada 	bl	800ee40 <fm_factory_get_date_time>
 801288c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801288e:	b2da      	uxtb	r2, r3
 8012890:	4b89      	ldr	r3, [pc, #548]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012892:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 8012894:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012898:	4618      	mov	r0, r3
 801289a:	f7fc fad1 	bl	800ee40 <fm_factory_get_date_time>
 801289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	4b85      	ldr	r3, [pc, #532]	; (8012abc <fm_menu_config_date_hour+0x298>)
 80128a6:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 80128a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fc fac7 	bl	800ee40 <fm_factory_get_date_time>
 80128b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128b6:	b2da      	uxtb	r2, r3
 80128b8:	4b81      	ldr	r3, [pc, #516]	; (8012ac0 <fm_menu_config_date_hour+0x29c>)
 80128ba:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 80128bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7fc fabd 	bl	800ee40 <fm_factory_get_date_time>
 80128c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	4b7d      	ldr	r3, [pc, #500]	; (8012ac4 <fm_menu_config_date_hour+0x2a0>)
 80128ce:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 80128d0:	79fb      	ldrb	r3, [r7, #7]
 80128d2:	3b01      	subs	r3, #1
 80128d4:	2b04      	cmp	r3, #4
 80128d6:	f200 83be 	bhi.w	8013056 <fm_menu_config_date_hour+0x832>
 80128da:	a201      	add	r2, pc, #4	; (adr r2, 80128e0 <fm_menu_config_date_hour+0xbc>)
 80128dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128e0:	08013057 	.word	0x08013057
 80128e4:	080128f5 	.word	0x080128f5
 80128e8:	08012c49 	.word	0x08012c49
 80128ec:	08012fb9 	.word	0x08012fb9
 80128f0:	08013035 	.word	0x08013035
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80128f4:	4b74      	ldr	r3, [pc, #464]	; (8012ac8 <fm_menu_config_date_hour+0x2a4>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 83ae 	beq.w	801305a <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 80128fe:	4b6b      	ldr	r3, [pc, #428]	; (8012aac <fm_menu_config_date_hour+0x288>)
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	f040 809b 	bne.w	8012a3e <fm_menu_config_date_hour+0x21a>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012908:	4b6a      	ldr	r3, [pc, #424]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d017      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
 8012910:	4b68      	ldr	r3, [pc, #416]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b03      	cmp	r3, #3
 8012916:	d013      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
                    || month_enum == MAY || month_enum == JULY
 8012918:	4b66      	ldr	r3, [pc, #408]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b05      	cmp	r3, #5
 801291e:	d00f      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
 8012920:	4b64      	ldr	r3, [pc, #400]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b07      	cmp	r3, #7
 8012926:	d00b      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012928:	4b62      	ldr	r3, [pc, #392]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	2b08      	cmp	r3, #8
 801292e:	d007      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
 8012930:	4b60      	ldr	r3, [pc, #384]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b0a      	cmp	r3, #10
 8012936:	d003      	beq.n	8012940 <fm_menu_config_date_hour+0x11c>
                    || month_enum == DECEMBER)
 8012938:	4b5e      	ldr	r3, [pc, #376]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b0c      	cmp	r3, #12
 801293e:	d119      	bne.n	8012974 <fm_menu_config_date_hour+0x150>
                    {
                        if (day_enum < DAY_31)
 8012940:	4b5b      	ldr	r3, [pc, #364]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	2b1e      	cmp	r3, #30
 8012946:	d80b      	bhi.n	8012960 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012948:	4b59      	ldr	r3, [pc, #356]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	3301      	adds	r3, #1
 801294e:	4a59      	ldr	r2, [pc, #356]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012950:	7812      	ldrb	r2, [r2, #0]
 8012952:	4611      	mov	r1, r2
 8012954:	4a58      	ldr	r2, [pc, #352]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012956:	7812      	ldrb	r2, [r2, #0]
 8012958:	4618      	mov	r0, r3
 801295a:	f7fc fbdd 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 801295e:	e168      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012960:	4b54      	ldr	r3, [pc, #336]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	4619      	mov	r1, r3
 8012966:	4b54      	ldr	r3, [pc, #336]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	461a      	mov	r2, r3
 801296c:	2001      	movs	r0, #1
 801296e:	f7fc fbd3 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012972:	e15e      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012974:	4b4f      	ldr	r3, [pc, #316]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b04      	cmp	r3, #4
 801297a:	d00b      	beq.n	8012994 <fm_menu_config_date_hour+0x170>
 801297c:	4b4d      	ldr	r3, [pc, #308]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b06      	cmp	r3, #6
 8012982:	d007      	beq.n	8012994 <fm_menu_config_date_hour+0x170>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012984:	4b4b      	ldr	r3, [pc, #300]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	2b09      	cmp	r3, #9
 801298a:	d003      	beq.n	8012994 <fm_menu_config_date_hour+0x170>
 801298c:	4b49      	ldr	r3, [pc, #292]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	2b0b      	cmp	r3, #11
 8012992:	d119      	bne.n	80129c8 <fm_menu_config_date_hour+0x1a4>
                    {
                        if (day_enum < DAY_30)
 8012994:	4b46      	ldr	r3, [pc, #280]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b1d      	cmp	r3, #29
 801299a:	d80b      	bhi.n	80129b4 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 801299c:	4b44      	ldr	r3, [pc, #272]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	3301      	adds	r3, #1
 80129a2:	4a44      	ldr	r2, [pc, #272]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 80129a4:	7812      	ldrb	r2, [r2, #0]
 80129a6:	4611      	mov	r1, r2
 80129a8:	4a43      	ldr	r2, [pc, #268]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 80129aa:	7812      	ldrb	r2, [r2, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fc fbb3 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 80129b2:	e13e      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 80129b4:	4b3f      	ldr	r3, [pc, #252]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	4619      	mov	r1, r3
 80129ba:	4b3f      	ldr	r3, [pc, #252]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	461a      	mov	r2, r3
 80129c0:	2001      	movs	r0, #1
 80129c2:	f7fc fba9 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 80129c6:	e134      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 80129c8:	4b3b      	ldr	r3, [pc, #236]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 0303 	and.w	r3, r3, #3
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d119      	bne.n	8012a0a <fm_menu_config_date_hour+0x1e6>
                        {
                            if (day_enum < DAY_29)
 80129d6:	4b36      	ldr	r3, [pc, #216]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b1c      	cmp	r3, #28
 80129dc:	d80b      	bhi.n	80129f6 <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 80129de:	4b34      	ldr	r3, [pc, #208]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	3301      	adds	r3, #1
 80129e4:	4a33      	ldr	r2, [pc, #204]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 80129e6:	7812      	ldrb	r2, [r2, #0]
 80129e8:	4611      	mov	r1, r2
 80129ea:	4a33      	ldr	r2, [pc, #204]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 80129ec:	7812      	ldrb	r2, [r2, #0]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fc fb92 	bl	800f118 <fm_factory_modify_date>
 80129f4:	e11d      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 80129f6:	4b2f      	ldr	r3, [pc, #188]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	4619      	mov	r1, r3
 80129fc:	4b2e      	ldr	r3, [pc, #184]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	461a      	mov	r2, r3
 8012a02:	2001      	movs	r0, #1
 8012a04:	f7fc fb88 	bl	800f118 <fm_factory_modify_date>
 8012a08:	e113      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum < DAY_28)
 8012a0a:	4b29      	ldr	r3, [pc, #164]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	2b1b      	cmp	r3, #27
 8012a10:	d80b      	bhi.n	8012a2a <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012a12:	4b27      	ldr	r3, [pc, #156]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	3301      	adds	r3, #1
 8012a18:	4a26      	ldr	r2, [pc, #152]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a1a:	7812      	ldrb	r2, [r2, #0]
 8012a1c:	4611      	mov	r1, r2
 8012a1e:	4a26      	ldr	r2, [pc, #152]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012a20:	7812      	ldrb	r2, [r2, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fc fb78 	bl	800f118 <fm_factory_modify_date>
 8012a28:	e103      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012a2a:	4b22      	ldr	r3, [pc, #136]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	4619      	mov	r1, r3
 8012a30:	4b21      	ldr	r3, [pc, #132]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	461a      	mov	r2, r3
 8012a36:	2001      	movs	r0, #1
 8012a38:	f7fc fb6e 	bl	800f118 <fm_factory_modify_date>
 8012a3c:	e0f9      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012a3e:	4b1b      	ldr	r3, [pc, #108]	; (8012aac <fm_menu_config_date_hour+0x288>)
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d16a      	bne.n	8012b1c <fm_menu_config_date_hour+0x2f8>
                {
                    if (month_enum < DECEMBER)
 8012a46:	4b1b      	ldr	r3, [pc, #108]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	2b0b      	cmp	r3, #11
 8012a4c:	d85c      	bhi.n	8012b08 <fm_menu_config_date_hour+0x2e4>
                    {
                        if ((month_enum + 1 == APRIL || month_enum + 1 == JUNE
 8012a4e:	4b19      	ldr	r3, [pc, #100]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	2b03      	cmp	r3, #3
 8012a54:	d00b      	beq.n	8012a6e <fm_menu_config_date_hour+0x24a>
 8012a56:	4b17      	ldr	r3, [pc, #92]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b05      	cmp	r3, #5
 8012a5c:	d007      	beq.n	8012a6e <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == SEPTEMBER
 8012a5e:	4b15      	ldr	r3, [pc, #84]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	2b08      	cmp	r3, #8
 8012a64:	d003      	beq.n	8012a6e <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == NOVEMBER) && (day_enum > DAY_30))
 8012a66:	4b13      	ldr	r3, [pc, #76]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b0a      	cmp	r3, #10
 8012a6c:	d107      	bne.n	8012a7e <fm_menu_config_date_hour+0x25a>
 8012a6e:	4b10      	ldr	r3, [pc, #64]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b1e      	cmp	r3, #30
 8012a74:	d903      	bls.n	8012a7e <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 8012a76:	4b0e      	ldr	r3, [pc, #56]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a78:	221e      	movs	r2, #30
 8012a7a:	701a      	strb	r2, [r3, #0]
 8012a7c:	e038      	b.n	8012af0 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012a7e:	4b0d      	ldr	r3, [pc, #52]	; (8012ab4 <fm_menu_config_date_hour+0x290>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d122      	bne.n	8012acc <fm_menu_config_date_hour+0x2a8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012a86:	4b0c      	ldr	r3, [pc, #48]	; (8012ab8 <fm_menu_config_date_hour+0x294>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0303 	and.w	r3, r3, #3
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d11b      	bne.n	8012acc <fm_menu_config_date_hour+0x2a8>
 8012a94:	4b06      	ldr	r3, [pc, #24]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	2b1d      	cmp	r3, #29
 8012a9a:	d917      	bls.n	8012acc <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 8012a9c:	4b04      	ldr	r3, [pc, #16]	; (8012ab0 <fm_menu_config_date_hour+0x28c>)
 8012a9e:	221d      	movs	r2, #29
 8012aa0:	701a      	strb	r2, [r3, #0]
 8012aa2:	e025      	b.n	8012af0 <fm_menu_config_date_hour+0x2cc>
 8012aa4:	08012825 	.word	0x08012825
 8012aa8:	20000141 	.word	0x20000141
 8012aac:	20001dbd 	.word	0x20001dbd
 8012ab0:	20001dbe 	.word	0x20001dbe
 8012ab4:	20001dbf 	.word	0x20001dbf
 8012ab8:	20001dc0 	.word	0x20001dc0
 8012abc:	20001dc1 	.word	0x20001dc1
 8012ac0:	20001dc2 	.word	0x20001dc2
 8012ac4:	20001dc3 	.word	0x20001dc3
 8012ac8:	20001dba 	.word	0x20001dba
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012acc:	4b93      	ldr	r3, [pc, #588]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d10d      	bne.n	8012af0 <fm_menu_config_date_hour+0x2cc>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012ad4:	4b92      	ldr	r3, [pc, #584]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	f003 0303 	and.w	r3, r3, #3
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d006      	beq.n	8012af0 <fm_menu_config_date_hour+0x2cc>
 8012ae2:	4b90      	ldr	r3, [pc, #576]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b1c      	cmp	r3, #28
 8012ae8:	d902      	bls.n	8012af0 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012aea:	4b8e      	ldr	r3, [pc, #568]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012aec:	221c      	movs	r2, #28
 8012aee:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012af0:	4b8c      	ldr	r3, [pc, #560]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	4618      	mov	r0, r3
 8012af6:	4b89      	ldr	r3, [pc, #548]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	3301      	adds	r3, #1
 8012afc:	4a88      	ldr	r2, [pc, #544]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012afe:	7812      	ldrb	r2, [r2, #0]
 8012b00:	4619      	mov	r1, r3
 8012b02:	f7fc fb09 	bl	800f118 <fm_factory_modify_date>
 8012b06:	e094      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012b08:	4b86      	ldr	r3, [pc, #536]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	4b84      	ldr	r3, [pc, #528]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	461a      	mov	r2, r3
 8012b14:	2101      	movs	r1, #1
 8012b16:	f7fc faff 	bl	800f118 <fm_factory_modify_date>
 8012b1a:	e08a      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == YEAR)
 8012b1c:	4b82      	ldr	r3, [pc, #520]	; (8012d28 <fm_menu_config_date_hour+0x504>)
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2b02      	cmp	r3, #2
 8012b22:	d12c      	bne.n	8012b7e <fm_menu_config_date_hour+0x35a>
                {
                    if (year_enum < YEAR_99)
 8012b24:	4b7e      	ldr	r3, [pc, #504]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b62      	cmp	r3, #98	; 0x62
 8012b2a:	d81e      	bhi.n	8012b6a <fm_menu_config_date_hour+0x346>
                    {
                        if (((year_enum + 1) % YEAR_4 != YEAR_0)
 8012b2c:	4b7c      	ldr	r3, [pc, #496]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	f003 0303 	and.w	r3, r3, #3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00a      	beq.n	8012b50 <fm_menu_config_date_hour+0x32c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012b3a:	4b78      	ldr	r3, [pc, #480]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d106      	bne.n	8012b50 <fm_menu_config_date_hour+0x32c>
 8012b42:	4b78      	ldr	r3, [pc, #480]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b1c      	cmp	r3, #28
 8012b48:	d902      	bls.n	8012b50 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012b4a:	4b76      	ldr	r3, [pc, #472]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012b4c:	221c      	movs	r2, #28
 8012b4e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012b50:	4b74      	ldr	r3, [pc, #464]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	4618      	mov	r0, r3
 8012b56:	4b71      	ldr	r3, [pc, #452]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4b70      	ldr	r3, [pc, #448]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	3301      	adds	r3, #1
 8012b62:	461a      	mov	r2, r3
 8012b64:	f7fc fad8 	bl	800f118 <fm_factory_modify_date>
 8012b68:	e063      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        year_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012b6a:	4b6e      	ldr	r3, [pc, #440]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	4b6a      	ldr	r3, [pc, #424]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	2200      	movs	r2, #0
 8012b76:	4619      	mov	r1, r3
 8012b78:	f7fc face 	bl	800f118 <fm_factory_modify_date>
 8012b7c:	e059      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == HOUR)
 8012b7e:	4b6a      	ldr	r3, [pc, #424]	; (8012d28 <fm_menu_config_date_hour+0x504>)
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b03      	cmp	r3, #3
 8012b84:	d119      	bne.n	8012bba <fm_menu_config_date_hour+0x396>
                {
                    if (hour_enum < HOUR_23)
 8012b86:	4b69      	ldr	r3, [pc, #420]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	2b16      	cmp	r3, #22
 8012b8c:	d80b      	bhi.n	8012ba6 <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1, minute_enum,
 8012b8e:	4b67      	ldr	r3, [pc, #412]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	3301      	adds	r3, #1
 8012b94:	4a66      	ldr	r2, [pc, #408]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012b96:	7812      	ldrb	r2, [r2, #0]
 8012b98:	4611      	mov	r1, r2
 8012b9a:	4a66      	ldr	r2, [pc, #408]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012b9c:	7812      	ldrb	r2, [r2, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fc fd96 	bl	800f6d0 <fm_factory_modify_time>
 8012ba4:	e045      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012ba6:	4b62      	ldr	r3, [pc, #392]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	4619      	mov	r1, r3
 8012bac:	4b61      	ldr	r3, [pc, #388]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7fc fd8c 	bl	800f6d0 <fm_factory_modify_time>
 8012bb8:	e03b      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012bba:	4b5b      	ldr	r3, [pc, #364]	; (8012d28 <fm_menu_config_date_hour+0x504>)
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2b04      	cmp	r3, #4
 8012bc0:	d119      	bne.n	8012bf6 <fm_menu_config_date_hour+0x3d2>
                {
                    if (minute_enum < MINU_59)
 8012bc2:	4b5b      	ldr	r3, [pc, #364]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b3a      	cmp	r3, #58	; 0x3a
 8012bc8:	d80b      	bhi.n	8012be2 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum + 1,
 8012bca:	4b58      	ldr	r3, [pc, #352]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	4b57      	ldr	r3, [pc, #348]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	4a57      	ldr	r2, [pc, #348]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012bd8:	7812      	ldrb	r2, [r2, #0]
 8012bda:	4619      	mov	r1, r3
 8012bdc:	f7fc fd78 	bl	800f6d0 <fm_factory_modify_time>
 8012be0:	e027      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_0, second_enum);
 8012be2:	4b52      	ldr	r3, [pc, #328]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	4618      	mov	r0, r3
 8012be8:	4b52      	ldr	r3, [pc, #328]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	461a      	mov	r2, r3
 8012bee:	2100      	movs	r1, #0
 8012bf0:	f7fc fd6e 	bl	800f6d0 <fm_factory_modify_time>
 8012bf4:	e01d      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == SECOND)
 8012bf6:	4b4c      	ldr	r3, [pc, #304]	; (8012d28 <fm_menu_config_date_hour+0x504>)
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b05      	cmp	r3, #5
 8012bfc:	d119      	bne.n	8012c32 <fm_menu_config_date_hour+0x40e>
                {
                    if (second_enum < SEC_59)
 8012bfe:	4b4d      	ldr	r3, [pc, #308]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	2b3a      	cmp	r3, #58	; 0x3a
 8012c04:	d80c      	bhi.n	8012c20 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012c06:	4b49      	ldr	r3, [pc, #292]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	4b48      	ldr	r3, [pc, #288]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	4619      	mov	r1, r3
 8012c12:	4b48      	ldr	r3, [pc, #288]	; (8012d34 <fm_menu_config_date_hour+0x510>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	3301      	adds	r3, #1
 8012c18:	461a      	mov	r2, r3
 8012c1a:	f7fc fd59 	bl	800f6d0 <fm_factory_modify_time>
 8012c1e:	e008      	b.n	8012c32 <fm_menu_config_date_hour+0x40e>
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_0);
 8012c20:	4b42      	ldr	r3, [pc, #264]	; (8012d2c <fm_menu_config_date_hour+0x508>)
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	4618      	mov	r0, r3
 8012c26:	4b42      	ldr	r3, [pc, #264]	; (8012d30 <fm_menu_config_date_hour+0x50c>)
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f7fc fd4f 	bl	800f6d0 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012c32:	2301      	movs	r3, #1
 8012c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012c38:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	4619      	mov	r1, r3
 8012c40:	483d      	ldr	r0, [pc, #244]	; (8012d38 <fm_menu_config_date_hour+0x514>)
 8012c42:	f7fb fc97 	bl	800e574 <_txe_queue_send>
            }
        break;
 8012c46:	e208      	b.n	801305a <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012c48:	4b3c      	ldr	r3, [pc, #240]	; (8012d3c <fm_menu_config_date_hour+0x518>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f000 8206 	beq.w	801305e <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012c52:	4b35      	ldr	r3, [pc, #212]	; (8012d28 <fm_menu_config_date_hour+0x504>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f040 80ad 	bne.w	8012db6 <fm_menu_config_date_hour+0x592>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012c5c:	4b2f      	ldr	r3, [pc, #188]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d017      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
 8012c64:	4b2d      	ldr	r3, [pc, #180]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b03      	cmp	r3, #3
 8012c6a:	d013      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
                    || month_enum == MAY || month_enum == JULY
 8012c6c:	4b2b      	ldr	r3, [pc, #172]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	2b05      	cmp	r3, #5
 8012c72:	d00f      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
 8012c74:	4b29      	ldr	r3, [pc, #164]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2b07      	cmp	r3, #7
 8012c7a:	d00b      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012c7c:	4b27      	ldr	r3, [pc, #156]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	2b08      	cmp	r3, #8
 8012c82:	d007      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
 8012c84:	4b25      	ldr	r3, [pc, #148]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	2b0a      	cmp	r3, #10
 8012c8a:	d003      	beq.n	8012c94 <fm_menu_config_date_hour+0x470>
                    || month_enum == DECEMBER)
 8012c8c:	4b23      	ldr	r3, [pc, #140]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	2b0c      	cmp	r3, #12
 8012c92:	d119      	bne.n	8012cc8 <fm_menu_config_date_hour+0x4a4>
                    {
                        if (day_enum > DAY_1)
 8012c94:	4b23      	ldr	r3, [pc, #140]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	d90b      	bls.n	8012cb4 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012c9c:	4b21      	ldr	r3, [pc, #132]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	4a1e      	ldr	r2, [pc, #120]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012ca4:	7812      	ldrb	r2, [r2, #0]
 8012ca6:	4611      	mov	r1, r2
 8012ca8:	4a1d      	ldr	r2, [pc, #116]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012caa:	7812      	ldrb	r2, [r2, #0]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7fc fa33 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012cb2:	e166      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012cb4:	4b19      	ldr	r3, [pc, #100]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	4b19      	ldr	r3, [pc, #100]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	201f      	movs	r0, #31
 8012cc2:	f7fc fa29 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012cc6:	e15c      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012cc8:	4b14      	ldr	r3, [pc, #80]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b04      	cmp	r3, #4
 8012cce:	d00b      	beq.n	8012ce8 <fm_menu_config_date_hour+0x4c4>
 8012cd0:	4b12      	ldr	r3, [pc, #72]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2b06      	cmp	r3, #6
 8012cd6:	d007      	beq.n	8012ce8 <fm_menu_config_date_hour+0x4c4>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012cd8:	4b10      	ldr	r3, [pc, #64]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	2b09      	cmp	r3, #9
 8012cde:	d003      	beq.n	8012ce8 <fm_menu_config_date_hour+0x4c4>
 8012ce0:	4b0e      	ldr	r3, [pc, #56]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b0b      	cmp	r3, #11
 8012ce6:	d12b      	bne.n	8012d40 <fm_menu_config_date_hour+0x51c>
                    {
                        if (day_enum > DAY_1)
 8012ce8:	4b0e      	ldr	r3, [pc, #56]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d90b      	bls.n	8012d08 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012cf0:	4b0c      	ldr	r3, [pc, #48]	; (8012d24 <fm_menu_config_date_hour+0x500>)
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	4a09      	ldr	r2, [pc, #36]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012cf8:	7812      	ldrb	r2, [r2, #0]
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4a08      	ldr	r2, [pc, #32]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012cfe:	7812      	ldrb	r2, [r2, #0]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fc fa09 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012d06:	e13c      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012d08:	4b04      	ldr	r3, [pc, #16]	; (8012d1c <fm_menu_config_date_hour+0x4f8>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <fm_menu_config_date_hour+0x4fc>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	461a      	mov	r2, r3
 8012d14:	201e      	movs	r0, #30
 8012d16:	f7fc f9ff 	bl	800f118 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012d1a:	e132      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
 8012d1c:	20001dbf 	.word	0x20001dbf
 8012d20:	20001dc0 	.word	0x20001dc0
 8012d24:	20001dbe 	.word	0x20001dbe
 8012d28:	20001dbd 	.word	0x20001dbd
 8012d2c:	20001dc1 	.word	0x20001dc1
 8012d30:	20001dc2 	.word	0x20001dc2
 8012d34:	20001dc3 	.word	0x20001dc3
 8012d38:	20001388 	.word	0x20001388
 8012d3c:	20001dba 	.word	0x20001dba
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012d40:	4b95      	ldr	r3, [pc, #596]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f003 0303 	and.w	r3, r3, #3
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d119      	bne.n	8012d82 <fm_menu_config_date_hour+0x55e>
                        {
                            if (day_enum > DAY_1)
 8012d4e:	4b93      	ldr	r3, [pc, #588]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d90b      	bls.n	8012d6e <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012d56:	4b91      	ldr	r3, [pc, #580]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	4a90      	ldr	r2, [pc, #576]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012d5e:	7812      	ldrb	r2, [r2, #0]
 8012d60:	4611      	mov	r1, r2
 8012d62:	4a8d      	ldr	r2, [pc, #564]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012d64:	7812      	ldrb	r2, [r2, #0]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fc f9d6 	bl	800f118 <fm_factory_modify_date>
 8012d6c:	e109      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012d6e:	4b8c      	ldr	r3, [pc, #560]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	4619      	mov	r1, r3
 8012d74:	4b88      	ldr	r3, [pc, #544]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	461a      	mov	r2, r3
 8012d7a:	201d      	movs	r0, #29
 8012d7c:	f7fc f9cc 	bl	800f118 <fm_factory_modify_date>
 8012d80:	e0ff      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum > DAY_1)
 8012d82:	4b86      	ldr	r3, [pc, #536]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d90b      	bls.n	8012da2 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012d8a:	4b84      	ldr	r3, [pc, #528]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	4a83      	ldr	r2, [pc, #524]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012d92:	7812      	ldrb	r2, [r2, #0]
 8012d94:	4611      	mov	r1, r2
 8012d96:	4a80      	ldr	r2, [pc, #512]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012d98:	7812      	ldrb	r2, [r2, #0]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fc f9bc 	bl	800f118 <fm_factory_modify_date>
 8012da0:	e0ef      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012da2:	4b7f      	ldr	r3, [pc, #508]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	4619      	mov	r1, r3
 8012da8:	4b7b      	ldr	r3, [pc, #492]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	461a      	mov	r2, r3
 8012dae:	201c      	movs	r0, #28
 8012db0:	f7fc f9b2 	bl	800f118 <fm_factory_modify_date>
 8012db4:	e0e5      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012db6:	4b7b      	ldr	r3, [pc, #492]	; (8012fa4 <fm_menu_config_date_hour+0x780>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d156      	bne.n	8012e6c <fm_menu_config_date_hour+0x648>
                {
                    if (month_enum > JANUARY)
 8012dbe:	4b78      	ldr	r3, [pc, #480]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d948      	bls.n	8012e58 <fm_menu_config_date_hour+0x634>
                    {
                        if ((month_enum - 1 == APRIL || month_enum - 1 == JUNE
 8012dc6:	4b76      	ldr	r3, [pc, #472]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2b05      	cmp	r3, #5
 8012dcc:	d00b      	beq.n	8012de6 <fm_menu_config_date_hour+0x5c2>
 8012dce:	4b74      	ldr	r3, [pc, #464]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	2b07      	cmp	r3, #7
 8012dd4:	d007      	beq.n	8012de6 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == SEPTEMBER
 8012dd6:	4b72      	ldr	r3, [pc, #456]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b0a      	cmp	r3, #10
 8012ddc:	d003      	beq.n	8012de6 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012dde:	4b70      	ldr	r3, [pc, #448]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	2b0c      	cmp	r3, #12
 8012de4:	d107      	bne.n	8012df6 <fm_menu_config_date_hour+0x5d2>
 8012de6:	4b6d      	ldr	r3, [pc, #436]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b1e      	cmp	r3, #30
 8012dec:	d903      	bls.n	8012df6 <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012dee:	4b6b      	ldr	r3, [pc, #428]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012df0:	221e      	movs	r2, #30
 8012df2:	701a      	strb	r2, [r3, #0]
 8012df4:	e024      	b.n	8012e40 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012df6:	4b6a      	ldr	r3, [pc, #424]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	2b03      	cmp	r3, #3
 8012dfc:	d10e      	bne.n	8012e1c <fm_menu_config_date_hour+0x5f8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012dfe:	4b66      	ldr	r3, [pc, #408]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	f003 0303 	and.w	r3, r3, #3
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d107      	bne.n	8012e1c <fm_menu_config_date_hour+0x5f8>
 8012e0c:	4b63      	ldr	r3, [pc, #396]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	2b1d      	cmp	r3, #29
 8012e12:	d903      	bls.n	8012e1c <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012e14:	4b61      	ldr	r3, [pc, #388]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e16:	221d      	movs	r2, #29
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	e011      	b.n	8012e40 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012e1c:	4b60      	ldr	r3, [pc, #384]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b03      	cmp	r3, #3
 8012e22:	d10d      	bne.n	8012e40 <fm_menu_config_date_hour+0x61c>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012e24:	4b5c      	ldr	r3, [pc, #368]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f003 0303 	and.w	r3, r3, #3
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d006      	beq.n	8012e40 <fm_menu_config_date_hour+0x61c>
 8012e32:	4b5a      	ldr	r3, [pc, #360]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b1c      	cmp	r3, #28
 8012e38:	d902      	bls.n	8012e40 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012e3a:	4b58      	ldr	r3, [pc, #352]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e3c:	221c      	movs	r2, #28
 8012e3e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012e40:	4b56      	ldr	r3, [pc, #344]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	4618      	mov	r0, r3
 8012e46:	4b56      	ldr	r3, [pc, #344]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	4a52      	ldr	r2, [pc, #328]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e4e:	7812      	ldrb	r2, [r2, #0]
 8012e50:	4619      	mov	r1, r3
 8012e52:	f7fc f961 	bl	800f118 <fm_factory_modify_date>
 8012e56:	e094      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8012e58:	4b50      	ldr	r3, [pc, #320]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	4b4e      	ldr	r3, [pc, #312]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	461a      	mov	r2, r3
 8012e64:	210c      	movs	r1, #12
 8012e66:	f7fc f957 	bl	800f118 <fm_factory_modify_date>
 8012e6a:	e08a      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == YEAR)
 8012e6c:	4b4d      	ldr	r3, [pc, #308]	; (8012fa4 <fm_menu_config_date_hour+0x780>)
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d12c      	bne.n	8012ece <fm_menu_config_date_hour+0x6aa>
                {
                    if (year_enum > YEAR_0)
 8012e74:	4b48      	ldr	r3, [pc, #288]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d01e      	beq.n	8012eba <fm_menu_config_date_hour+0x696>
                    {
                        if (((year_enum - 1) % YEAR_4 != YEAR_0)
 8012e7c:	4b46      	ldr	r3, [pc, #280]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	3b01      	subs	r3, #1
 8012e82:	f003 0303 	and.w	r3, r3, #3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00a      	beq.n	8012ea0 <fm_menu_config_date_hour+0x67c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012e8a:	4b45      	ldr	r3, [pc, #276]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d106      	bne.n	8012ea0 <fm_menu_config_date_hour+0x67c>
 8012e92:	4b42      	ldr	r3, [pc, #264]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b1c      	cmp	r3, #28
 8012e98:	d902      	bls.n	8012ea0 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 8012e9a:	4b40      	ldr	r3, [pc, #256]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012e9c:	221c      	movs	r2, #28
 8012e9e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012ea0:	4b3e      	ldr	r3, [pc, #248]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	4b3e      	ldr	r3, [pc, #248]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	4619      	mov	r1, r3
 8012eac:	4b3a      	ldr	r3, [pc, #232]	; (8012f98 <fm_menu_config_date_hour+0x774>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	f7fc f930 	bl	800f118 <fm_factory_modify_date>
 8012eb8:	e063      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012eba:	4b38      	ldr	r3, [pc, #224]	; (8012f9c <fm_menu_config_date_hour+0x778>)
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	4b37      	ldr	r3, [pc, #220]	; (8012fa0 <fm_menu_config_date_hour+0x77c>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2263      	movs	r2, #99	; 0x63
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	f7fc f926 	bl	800f118 <fm_factory_modify_date>
 8012ecc:	e059      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == HOUR)
 8012ece:	4b35      	ldr	r3, [pc, #212]	; (8012fa4 <fm_menu_config_date_hour+0x780>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b03      	cmp	r3, #3
 8012ed4:	d119      	bne.n	8012f0a <fm_menu_config_date_hour+0x6e6>
                {
                    if (hour_enum > HOUR_0)
 8012ed6:	4b34      	ldr	r3, [pc, #208]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00b      	beq.n	8012ef6 <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012ede:	4b32      	ldr	r3, [pc, #200]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	4a31      	ldr	r2, [pc, #196]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012ee6:	7812      	ldrb	r2, [r2, #0]
 8012ee8:	4611      	mov	r1, r2
 8012eea:	4a31      	ldr	r2, [pc, #196]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012eec:	7812      	ldrb	r2, [r2, #0]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fc fbee 	bl	800f6d0 <fm_factory_modify_time>
 8012ef4:	e045      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012ef6:	4b2d      	ldr	r3, [pc, #180]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	4619      	mov	r1, r3
 8012efc:	4b2c      	ldr	r3, [pc, #176]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	461a      	mov	r2, r3
 8012f02:	2017      	movs	r0, #23
 8012f04:	f7fc fbe4 	bl	800f6d0 <fm_factory_modify_time>
 8012f08:	e03b      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012f0a:	4b26      	ldr	r3, [pc, #152]	; (8012fa4 <fm_menu_config_date_hour+0x780>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	2b04      	cmp	r3, #4
 8012f10:	d119      	bne.n	8012f46 <fm_menu_config_date_hour+0x722>
                {
                    if (minute_enum > MINU_0)
 8012f12:	4b26      	ldr	r3, [pc, #152]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d00b      	beq.n	8012f32 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012f1a:	4b23      	ldr	r3, [pc, #140]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	4b22      	ldr	r3, [pc, #136]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	4a22      	ldr	r2, [pc, #136]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012f28:	7812      	ldrb	r2, [r2, #0]
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	f7fc fbd0 	bl	800f6d0 <fm_factory_modify_time>
 8012f30:	e027      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012f32:	4b1d      	ldr	r3, [pc, #116]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	4618      	mov	r0, r3
 8012f38:	4b1d      	ldr	r3, [pc, #116]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	213b      	movs	r1, #59	; 0x3b
 8012f40:	f7fc fbc6 	bl	800f6d0 <fm_factory_modify_time>
 8012f44:	e01d      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == SECOND)
 8012f46:	4b17      	ldr	r3, [pc, #92]	; (8012fa4 <fm_menu_config_date_hour+0x780>)
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2b05      	cmp	r3, #5
 8012f4c:	d119      	bne.n	8012f82 <fm_menu_config_date_hour+0x75e>
                {
                    if (second_enum > SEC_0)
 8012f4e:	4b18      	ldr	r3, [pc, #96]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d00c      	beq.n	8012f70 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012f56:	4b14      	ldr	r3, [pc, #80]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	4b13      	ldr	r3, [pc, #76]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	4619      	mov	r1, r3
 8012f62:	4b13      	ldr	r3, [pc, #76]	; (8012fb0 <fm_menu_config_date_hour+0x78c>)
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	3b01      	subs	r3, #1
 8012f68:	461a      	mov	r2, r3
 8012f6a:	f7fc fbb1 	bl	800f6d0 <fm_factory_modify_time>
 8012f6e:	e008      	b.n	8012f82 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012f70:	4b0d      	ldr	r3, [pc, #52]	; (8012fa8 <fm_menu_config_date_hour+0x784>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4618      	mov	r0, r3
 8012f76:	4b0d      	ldr	r3, [pc, #52]	; (8012fac <fm_menu_config_date_hour+0x788>)
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	223b      	movs	r2, #59	; 0x3b
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	f7fc fba7 	bl	800f6d0 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012f82:	2301      	movs	r3, #1
 8012f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f88:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	4619      	mov	r1, r3
 8012f90:	4808      	ldr	r0, [pc, #32]	; (8012fb4 <fm_menu_config_date_hour+0x790>)
 8012f92:	f7fb faef 	bl	800e574 <_txe_queue_send>
            }
        break;
 8012f96:	e062      	b.n	801305e <fm_menu_config_date_hour+0x83a>
 8012f98:	20001dc0 	.word	0x20001dc0
 8012f9c:	20001dbe 	.word	0x20001dbe
 8012fa0:	20001dbf 	.word	0x20001dbf
 8012fa4:	20001dbd 	.word	0x20001dbd
 8012fa8:	20001dc1 	.word	0x20001dc1
 8012fac:	20001dc2 	.word	0x20001dc2
 8012fb0:	20001dc3 	.word	0x20001dc3
 8012fb4:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012fb8:	4b5b      	ldr	r3, [pc, #364]	; (8013128 <fm_menu_config_date_hour+0x904>)
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d050      	beq.n	8013062 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if (field == DAY)
 8012fc0:	4b5a      	ldr	r3, [pc, #360]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d103      	bne.n	8012fd0 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012fc8:	4b58      	ldr	r3, [pc, #352]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fca:	2201      	movs	r2, #1
 8012fcc:	701a      	strb	r2, [r3, #0]
 8012fce:	e026      	b.n	801301e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MONTH)
 8012fd0:	4b56      	ldr	r3, [pc, #344]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d103      	bne.n	8012fe0 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012fd8:	4b54      	ldr	r3, [pc, #336]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fda:	2202      	movs	r2, #2
 8012fdc:	701a      	strb	r2, [r3, #0]
 8012fde:	e01e      	b.n	801301e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == YEAR)
 8012fe0:	4b52      	ldr	r3, [pc, #328]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d103      	bne.n	8012ff0 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012fe8:	4b50      	ldr	r3, [pc, #320]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012fea:	2203      	movs	r2, #3
 8012fec:	701a      	strb	r2, [r3, #0]
 8012fee:	e016      	b.n	801301e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == HOUR)
 8012ff0:	4b4e      	ldr	r3, [pc, #312]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b03      	cmp	r3, #3
 8012ff6:	d103      	bne.n	8013000 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012ff8:	4b4c      	ldr	r3, [pc, #304]	; (801312c <fm_menu_config_date_hour+0x908>)
 8012ffa:	2204      	movs	r2, #4
 8012ffc:	701a      	strb	r2, [r3, #0]
 8012ffe:	e00e      	b.n	801301e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MINUTE)
 8013000:	4b4a      	ldr	r3, [pc, #296]	; (801312c <fm_menu_config_date_hour+0x908>)
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2b04      	cmp	r3, #4
 8013006:	d103      	bne.n	8013010 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8013008:	4b48      	ldr	r3, [pc, #288]	; (801312c <fm_menu_config_date_hour+0x908>)
 801300a:	2205      	movs	r2, #5
 801300c:	701a      	strb	r2, [r3, #0]
 801300e:	e006      	b.n	801301e <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == SECOND)
 8013010:	4b46      	ldr	r3, [pc, #280]	; (801312c <fm_menu_config_date_hour+0x908>)
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	2b05      	cmp	r3, #5
 8013016:	d102      	bne.n	801301e <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8013018:	4b44      	ldr	r3, [pc, #272]	; (801312c <fm_menu_config_date_hour+0x908>)
 801301a:	2200      	movs	r2, #0
 801301c:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 801301e:	2301      	movs	r3, #1
 8013020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013024:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013028:	2200      	movs	r2, #0
 801302a:	4619      	mov	r1, r3
 801302c:	4840      	ldr	r0, [pc, #256]	; (8013130 <fm_menu_config_date_hour+0x90c>)
 801302e:	f7fb faa1 	bl	800e574 <_txe_queue_send>
            }
        break;
 8013032:	e016      	b.n	8013062 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013034:	4b3f      	ldr	r3, [pc, #252]	; (8013134 <fm_menu_config_date_hour+0x910>)
 8013036:	2201      	movs	r2, #1
 8013038:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 801303a:	4b3f      	ldr	r3, [pc, #252]	; (8013138 <fm_menu_config_date_hour+0x914>)
 801303c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8013040:	2301      	movs	r3, #1
 8013042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013046:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801304a:	2200      	movs	r2, #0
 801304c:	4619      	mov	r1, r3
 801304e:	4838      	ldr	r0, [pc, #224]	; (8013130 <fm_menu_config_date_hour+0x90c>)
 8013050:	f7fb fa90 	bl	800e574 <_txe_queue_send>
        break;
 8013054:	e006      	b.n	8013064 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013056:	bf00      	nop
 8013058:	e004      	b.n	8013064 <fm_menu_config_date_hour+0x840>
        break;
 801305a:	bf00      	nop
 801305c:	e002      	b.n	8013064 <fm_menu_config_date_hour+0x840>
        break;
 801305e:	bf00      	nop
 8013060:	e000      	b.n	8013064 <fm_menu_config_date_hour+0x840>
        break;
 8013062:	bf00      	nop
    }

    previous_event = event_id;
 8013064:	4a35      	ldr	r2, [pc, #212]	; (801313c <fm_menu_config_date_hour+0x918>)
 8013066:	79fb      	ldrb	r3, [r7, #7]
 8013068:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 801306a:	4b35      	ldr	r3, [pc, #212]	; (8013140 <fm_menu_config_date_hour+0x91c>)
 801306c:	f107 0408 	add.w	r4, r7, #8
 8013070:	461d      	mov	r5, r3
 8013072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801307a:	c403      	stmia	r4!, {r0, r1}
 801307c:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801307e:	f107 0308 	add.w	r3, r7, #8
 8013082:	2119      	movs	r1, #25
 8013084:	4618      	mov	r0, r3
 8013086:	f7fb fea9 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801308a:	4b2a      	ldr	r3, [pc, #168]	; (8013134 <fm_menu_config_date_hour+0x910>)
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d143      	bne.n	801311a <fm_menu_config_date_hour+0x8f6>
    {
        if (correct_password)
 8013092:	4b25      	ldr	r3, [pc, #148]	; (8013128 <fm_menu_config_date_hour+0x904>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d036      	beq.n	8013108 <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 801309a:	4b2a      	ldr	r3, [pc, #168]	; (8013144 <fm_menu_config_date_hour+0x920>)
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 80130a2:	4b29      	ldr	r3, [pc, #164]	; (8013148 <fm_menu_config_date_hour+0x924>)
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 80130aa:	4b28      	ldr	r3, [pc, #160]	; (801314c <fm_menu_config_date_hour+0x928>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 80130b2:	2305      	movs	r3, #5
 80130b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 80130b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130bc:	2200      	movs	r2, #0
 80130be:	4619      	mov	r1, r3
 80130c0:	4823      	ldr	r0, [pc, #140]	; (8013150 <fm_menu_config_date_hour+0x92c>)
 80130c2:	f7f6 f8ef 	bl	80092a4 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 80130c6:	4b23      	ldr	r3, [pc, #140]	; (8013154 <fm_menu_config_date_hour+0x930>)
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 80130ce:	4b22      	ldr	r3, [pc, #136]	; (8013158 <fm_menu_config_date_hour+0x934>)
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 80130d6:	4b21      	ldr	r3, [pc, #132]	; (801315c <fm_menu_config_date_hour+0x938>)
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 80130de:	2300      	movs	r3, #0
 80130e0:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80130e2:	2300      	movs	r3, #0
 80130e4:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 80130e6:	2300      	movs	r3, #0
 80130e8:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 80130ea:	2300      	movs	r3, #0
 80130ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 80130ee:	2300      	movs	r3, #0
 80130f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 80130f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130f8:	2200      	movs	r2, #0
 80130fa:	4619      	mov	r1, r3
 80130fc:	4814      	ldr	r0, [pc, #80]	; (8013150 <fm_menu_config_date_hour+0x92c>)
 80130fe:	f7f5 ffc3 	bl	8009088 <HAL_RTC_SetTime>

            correct_password = 0;
 8013102:	4b09      	ldr	r3, [pc, #36]	; (8013128 <fm_menu_config_date_hour+0x904>)
 8013104:	2200      	movs	r2, #0
 8013106:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8013108:	4b15      	ldr	r3, [pc, #84]	; (8013160 <fm_menu_config_date_hour+0x93c>)
 801310a:	2200      	movs	r2, #0
 801310c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801310e:	4b15      	ldr	r3, [pc, #84]	; (8013164 <fm_menu_config_date_hour+0x940>)
 8013110:	2201      	movs	r2, #1
 8013112:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013114:	4b07      	ldr	r3, [pc, #28]	; (8013134 <fm_menu_config_date_hour+0x910>)
 8013116:	2200      	movs	r2, #0
 8013118:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801311a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 801311e:	4618      	mov	r0, r3
 8013120:	37d0      	adds	r7, #208	; 0xd0
 8013122:	46bd      	mov	sp, r7
 8013124:	bdb0      	pop	{r4, r5, r7, pc}
 8013126:	bf00      	nop
 8013128:	20001dba 	.word	0x20001dba
 801312c:	20001dbd 	.word	0x20001dbd
 8013130:	20001388 	.word	0x20001388
 8013134:	20001dc4 	.word	0x20001dc4
 8013138:	08014775 	.word	0x08014775
 801313c:	20001dbb 	.word	0x20001dbb
 8013140:	080159d8 	.word	0x080159d8
 8013144:	20001dbe 	.word	0x20001dbe
 8013148:	20001dbf 	.word	0x20001dbf
 801314c:	20001dc0 	.word	0x20001dc0
 8013150:	200014a4 	.word	0x200014a4
 8013154:	20001dc1 	.word	0x20001dc1
 8013158:	20001dc2 	.word	0x20001dc2
 801315c:	20001dc3 	.word	0x20001dc3
 8013160:	20001dbc 	.word	0x20001dbc
 8013164:	20000141 	.word	0x20000141

08013168 <fm_menu_config_k_lin_1>:
 * @brief Función que imprime el menú del K linealizado 1.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8013168:	b5b0      	push	{r4, r5, r7, lr}
 801316a:	b08c      	sub	sp, #48	; 0x30
 801316c:	af00      	add	r7, sp, #0
 801316e:	4603      	mov	r3, r0
 8013170:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013172:	4b51      	ldr	r3, [pc, #324]	; (80132b8 <fm_menu_config_k_lin_1+0x150>)
 8013174:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013176:	4b51      	ldr	r3, [pc, #324]	; (80132bc <fm_menu_config_k_lin_1+0x154>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d104      	bne.n	8013188 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 801317e:	f7fc fcca 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8013182:	4b4e      	ldr	r3, [pc, #312]	; (80132bc <fm_menu_config_k_lin_1+0x154>)
 8013184:	2200      	movs	r2, #0
 8013186:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8013188:	4b4d      	ldr	r3, [pc, #308]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 801318a:	781a      	ldrb	r2, [r3, #0]
 801318c:	79fb      	ldrb	r3, [r7, #7]
 801318e:	4619      	mov	r1, r3
 8013190:	2001      	movs	r0, #1
 8013192:	f7fc ff33 	bl	800fffc <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013196:	f7fd f84a 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 801319a:	79fb      	ldrb	r3, [r7, #7]
 801319c:	3b01      	subs	r3, #1
 801319e:	2b04      	cmp	r3, #4
 80131a0:	d863      	bhi.n	801326a <fm_menu_config_k_lin_1+0x102>
 80131a2:	a201      	add	r2, pc, #4	; (adr r2, 80131a8 <fm_menu_config_k_lin_1+0x40>)
 80131a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a8:	0801326b 	.word	0x0801326b
 80131ac:	080131bd 	.word	0x080131bd
 80131b0:	080131e7 	.word	0x080131e7
 80131b4:	08013211 	.word	0x08013211
 80131b8:	0801324b 	.word	0x0801324b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80131bc:	4b41      	ldr	r3, [pc, #260]	; (80132c4 <fm_menu_config_k_lin_1+0x15c>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d005      	beq.n	80131d0 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 80131c4:	4b3e      	ldr	r3, [pc, #248]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	2101      	movs	r1, #1
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fc f876 	bl	800f2bc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80131d0:	2301      	movs	r3, #1
 80131d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131da:	2200      	movs	r2, #0
 80131dc:	4619      	mov	r1, r3
 80131de:	483a      	ldr	r0, [pc, #232]	; (80132c8 <fm_menu_config_k_lin_1+0x160>)
 80131e0:	f7fb f9c8 	bl	800e574 <_txe_queue_send>
        break;
 80131e4:	e042      	b.n	801326c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80131e6:	4b37      	ldr	r3, [pc, #220]	; (80132c4 <fm_menu_config_k_lin_1+0x15c>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d005      	beq.n	80131fa <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 80131ee:	4b34      	ldr	r3, [pc, #208]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2101      	movs	r1, #1
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fc f94b 	bl	800f490 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80131fa:	2301      	movs	r3, #1
 80131fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013200:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013204:	2200      	movs	r2, #0
 8013206:	4619      	mov	r1, r3
 8013208:	482f      	ldr	r0, [pc, #188]	; (80132c8 <fm_menu_config_k_lin_1+0x160>)
 801320a:	f7fb f9b3 	bl	800e574 <_txe_queue_send>
        break;
 801320e:	e02d      	b.n	801326c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013210:	4b2c      	ldr	r3, [pc, #176]	; (80132c4 <fm_menu_config_k_lin_1+0x15c>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00d      	beq.n	8013234 <fm_menu_config_k_lin_1+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013218:	4b29      	ldr	r3, [pc, #164]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	2b0a      	cmp	r3, #10
 801321e:	d806      	bhi.n	801322e <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8013220:	4b27      	ldr	r3, [pc, #156]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	3301      	adds	r3, #1
 8013226:	b2da      	uxtb	r2, r3
 8013228:	4b25      	ldr	r3, [pc, #148]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 801322a:	701a      	strb	r2, [r3, #0]
 801322c:	e002      	b.n	8013234 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801322e:	4b24      	ldr	r3, [pc, #144]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 8013230:	2200      	movs	r2, #0
 8013232:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013234:	2301      	movs	r3, #1
 8013236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801323a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801323e:	2200      	movs	r2, #0
 8013240:	4619      	mov	r1, r3
 8013242:	4821      	ldr	r0, [pc, #132]	; (80132c8 <fm_menu_config_k_lin_1+0x160>)
 8013244:	f7fb f996 	bl	800e574 <_txe_queue_send>
        break;
 8013248:	e010      	b.n	801326c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801324a:	4b20      	ldr	r3, [pc, #128]	; (80132cc <fm_menu_config_k_lin_1+0x164>)
 801324c:	2201      	movs	r2, #1
 801324e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013250:	4b1f      	ldr	r3, [pc, #124]	; (80132d0 <fm_menu_config_k_lin_1+0x168>)
 8013252:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013254:	2301      	movs	r3, #1
 8013256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801325a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801325e:	2200      	movs	r2, #0
 8013260:	4619      	mov	r1, r3
 8013262:	4819      	ldr	r0, [pc, #100]	; (80132c8 <fm_menu_config_k_lin_1+0x160>)
 8013264:	f7fb f986 	bl	800e574 <_txe_queue_send>
        break;
 8013268:	e000      	b.n	801326c <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801326a:	bf00      	nop
    }

    previous_event = event_id;
 801326c:	4a19      	ldr	r2, [pc, #100]	; (80132d4 <fm_menu_config_k_lin_1+0x16c>)
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_1\n";
 8013272:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <fm_menu_config_k_lin_1+0x170>)
 8013274:	f107 040c 	add.w	r4, r7, #12
 8013278:	461d      	mov	r5, r3
 801327a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801327c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801327e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013282:	c407      	stmia	r4!, {r0, r1, r2}
 8013284:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013286:	f107 030c 	add.w	r3, r7, #12
 801328a:	211e      	movs	r1, #30
 801328c:	4618      	mov	r0, r3
 801328e:	f7fb fda5 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013292:	4b0e      	ldr	r3, [pc, #56]	; (80132cc <fm_menu_config_k_lin_1+0x164>)
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b01      	cmp	r3, #1
 8013298:	d108      	bne.n	80132ac <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801329a:	4b09      	ldr	r3, [pc, #36]	; (80132c0 <fm_menu_config_k_lin_1+0x158>)
 801329c:	2200      	movs	r2, #0
 801329e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80132a0:	4b06      	ldr	r3, [pc, #24]	; (80132bc <fm_menu_config_k_lin_1+0x154>)
 80132a2:	2201      	movs	r2, #1
 80132a4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80132a6:	4b09      	ldr	r3, [pc, #36]	; (80132cc <fm_menu_config_k_lin_1+0x164>)
 80132a8:	2200      	movs	r2, #0
 80132aa:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80132ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3730      	adds	r7, #48	; 0x30
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bdb0      	pop	{r4, r5, r7, pc}
 80132b6:	bf00      	nop
 80132b8:	08013169 	.word	0x08013169
 80132bc:	20000142 	.word	0x20000142
 80132c0:	20001dc5 	.word	0x20001dc5
 80132c4:	20001dba 	.word	0x20001dba
 80132c8:	20001388 	.word	0x20001388
 80132cc:	20001dc6 	.word	0x20001dc6
 80132d0:	080132dd 	.word	0x080132dd
 80132d4:	20001dbb 	.word	0x20001dbb
 80132d8:	08015a14 	.word	0x08015a14

080132dc <fm_menu_config_k_lin_2>:
 * @brief Función que imprime el menú del K linealizado 2.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 80132dc:	b5b0      	push	{r4, r5, r7, lr}
 80132de:	b08c      	sub	sp, #48	; 0x30
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	4603      	mov	r3, r0
 80132e4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 80132e6:	4b51      	ldr	r3, [pc, #324]	; (801342c <fm_menu_config_k_lin_2+0x150>)
 80132e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80132ea:	4b51      	ldr	r3, [pc, #324]	; (8013430 <fm_menu_config_k_lin_2+0x154>)
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d104      	bne.n	80132fc <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 80132f2:	f7fc fc10 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80132f6:	4b4e      	ldr	r3, [pc, #312]	; (8013430 <fm_menu_config_k_lin_2+0x154>)
 80132f8:	2200      	movs	r2, #0
 80132fa:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 80132fc:	4b4d      	ldr	r3, [pc, #308]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 80132fe:	781a      	ldrb	r2, [r3, #0]
 8013300:	79fb      	ldrb	r3, [r7, #7]
 8013302:	4619      	mov	r1, r3
 8013304:	2002      	movs	r0, #2
 8013306:	f7fc fe79 	bl	800fffc <fm_lcd_k_lin>
    fm_lcd_refresh();
 801330a:	f7fc ff90 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 801330e:	79fb      	ldrb	r3, [r7, #7]
 8013310:	3b01      	subs	r3, #1
 8013312:	2b04      	cmp	r3, #4
 8013314:	d863      	bhi.n	80133de <fm_menu_config_k_lin_2+0x102>
 8013316:	a201      	add	r2, pc, #4	; (adr r2, 801331c <fm_menu_config_k_lin_2+0x40>)
 8013318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801331c:	080133df 	.word	0x080133df
 8013320:	08013331 	.word	0x08013331
 8013324:	0801335b 	.word	0x0801335b
 8013328:	08013385 	.word	0x08013385
 801332c:	080133bf 	.word	0x080133bf
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013330:	4b41      	ldr	r3, [pc, #260]	; (8013438 <fm_menu_config_k_lin_2+0x15c>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d005      	beq.n	8013344 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8013338:	4b3e      	ldr	r3, [pc, #248]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2102      	movs	r1, #2
 801333e:	4618      	mov	r0, r3
 8013340:	f7fb ffbc 	bl	800f2bc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013344:	2301      	movs	r3, #1
 8013346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801334a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801334e:	2200      	movs	r2, #0
 8013350:	4619      	mov	r1, r3
 8013352:	483a      	ldr	r0, [pc, #232]	; (801343c <fm_menu_config_k_lin_2+0x160>)
 8013354:	f7fb f90e 	bl	800e574 <_txe_queue_send>
        break;
 8013358:	e042      	b.n	80133e0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801335a:	4b37      	ldr	r3, [pc, #220]	; (8013438 <fm_menu_config_k_lin_2+0x15c>)
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d005      	beq.n	801336e <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8013362:	4b34      	ldr	r3, [pc, #208]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	2102      	movs	r1, #2
 8013368:	4618      	mov	r0, r3
 801336a:	f7fc f891 	bl	800f490 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801336e:	2301      	movs	r3, #1
 8013370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013374:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013378:	2200      	movs	r2, #0
 801337a:	4619      	mov	r1, r3
 801337c:	482f      	ldr	r0, [pc, #188]	; (801343c <fm_menu_config_k_lin_2+0x160>)
 801337e:	f7fb f8f9 	bl	800e574 <_txe_queue_send>
        break;
 8013382:	e02d      	b.n	80133e0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013384:	4b2c      	ldr	r3, [pc, #176]	; (8013438 <fm_menu_config_k_lin_2+0x15c>)
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d00d      	beq.n	80133a8 <fm_menu_config_k_lin_2+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 801338c:	4b29      	ldr	r3, [pc, #164]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	2b0a      	cmp	r3, #10
 8013392:	d806      	bhi.n	80133a2 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 8013394:	4b27      	ldr	r3, [pc, #156]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	3301      	adds	r3, #1
 801339a:	b2da      	uxtb	r2, r3
 801339c:	4b25      	ldr	r3, [pc, #148]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 801339e:	701a      	strb	r2, [r3, #0]
 80133a0:	e002      	b.n	80133a8 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80133a2:	4b24      	ldr	r3, [pc, #144]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 80133a4:	2200      	movs	r2, #0
 80133a6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80133a8:	2301      	movs	r3, #1
 80133aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133ae:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80133b2:	2200      	movs	r2, #0
 80133b4:	4619      	mov	r1, r3
 80133b6:	4821      	ldr	r0, [pc, #132]	; (801343c <fm_menu_config_k_lin_2+0x160>)
 80133b8:	f7fb f8dc 	bl	800e574 <_txe_queue_send>
        break;
 80133bc:	e010      	b.n	80133e0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80133be:	4b20      	ldr	r3, [pc, #128]	; (8013440 <fm_menu_config_k_lin_2+0x164>)
 80133c0:	2201      	movs	r2, #1
 80133c2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 80133c4:	4b1f      	ldr	r3, [pc, #124]	; (8013444 <fm_menu_config_k_lin_2+0x168>)
 80133c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80133c8:	2301      	movs	r3, #1
 80133ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133ce:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80133d2:	2200      	movs	r2, #0
 80133d4:	4619      	mov	r1, r3
 80133d6:	4819      	ldr	r0, [pc, #100]	; (801343c <fm_menu_config_k_lin_2+0x160>)
 80133d8:	f7fb f8cc 	bl	800e574 <_txe_queue_send>
        break;
 80133dc:	e000      	b.n	80133e0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80133de:	bf00      	nop
    }

    previous_event = event_id;
 80133e0:	4a19      	ldr	r2, [pc, #100]	; (8013448 <fm_menu_config_k_lin_2+0x16c>)
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_2\n";
 80133e6:	4b19      	ldr	r3, [pc, #100]	; (801344c <fm_menu_config_k_lin_2+0x170>)
 80133e8:	f107 040c 	add.w	r4, r7, #12
 80133ec:	461d      	mov	r5, r3
 80133ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80133f6:	c407      	stmia	r4!, {r0, r1, r2}
 80133f8:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80133fa:	f107 030c 	add.w	r3, r7, #12
 80133fe:	211e      	movs	r1, #30
 8013400:	4618      	mov	r0, r3
 8013402:	f7fb fceb 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013406:	4b0e      	ldr	r3, [pc, #56]	; (8013440 <fm_menu_config_k_lin_2+0x164>)
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	2b01      	cmp	r3, #1
 801340c:	d108      	bne.n	8013420 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801340e:	4b09      	ldr	r3, [pc, #36]	; (8013434 <fm_menu_config_k_lin_2+0x158>)
 8013410:	2200      	movs	r2, #0
 8013412:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013414:	4b06      	ldr	r3, [pc, #24]	; (8013430 <fm_menu_config_k_lin_2+0x154>)
 8013416:	2201      	movs	r2, #1
 8013418:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801341a:	4b09      	ldr	r3, [pc, #36]	; (8013440 <fm_menu_config_k_lin_2+0x164>)
 801341c:	2200      	movs	r2, #0
 801341e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013422:	4618      	mov	r0, r3
 8013424:	3730      	adds	r7, #48	; 0x30
 8013426:	46bd      	mov	sp, r7
 8013428:	bdb0      	pop	{r4, r5, r7, pc}
 801342a:	bf00      	nop
 801342c:	080132dd 	.word	0x080132dd
 8013430:	20000143 	.word	0x20000143
 8013434:	20001dc7 	.word	0x20001dc7
 8013438:	20001dba 	.word	0x20001dba
 801343c:	20001388 	.word	0x20001388
 8013440:	20001dc8 	.word	0x20001dc8
 8013444:	08013451 	.word	0x08013451
 8013448:	20001dbb 	.word	0x20001dbb
 801344c:	08015a34 	.word	0x08015a34

08013450 <fm_menu_config_k_lin_3>:
 * @brief Función que imprime el menú del K linealizado 3.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8013450:	b5b0      	push	{r4, r5, r7, lr}
 8013452:	b08c      	sub	sp, #48	; 0x30
 8013454:	af00      	add	r7, sp, #0
 8013456:	4603      	mov	r3, r0
 8013458:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 801345a:	4b51      	ldr	r3, [pc, #324]	; (80135a0 <fm_menu_config_k_lin_3+0x150>)
 801345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801345e:	4b51      	ldr	r3, [pc, #324]	; (80135a4 <fm_menu_config_k_lin_3+0x154>)
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	2b01      	cmp	r3, #1
 8013464:	d104      	bne.n	8013470 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 8013466:	f7fc fb56 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 801346a:	4b4e      	ldr	r3, [pc, #312]	; (80135a4 <fm_menu_config_k_lin_3+0x154>)
 801346c:	2200      	movs	r2, #0
 801346e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 8013470:	4b4d      	ldr	r3, [pc, #308]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 8013472:	781a      	ldrb	r2, [r3, #0]
 8013474:	79fb      	ldrb	r3, [r7, #7]
 8013476:	4619      	mov	r1, r3
 8013478:	2003      	movs	r0, #3
 801347a:	f7fc fdbf 	bl	800fffc <fm_lcd_k_lin>
    fm_lcd_refresh();
 801347e:	f7fc fed6 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	3b01      	subs	r3, #1
 8013486:	2b04      	cmp	r3, #4
 8013488:	d863      	bhi.n	8013552 <fm_menu_config_k_lin_3+0x102>
 801348a:	a201      	add	r2, pc, #4	; (adr r2, 8013490 <fm_menu_config_k_lin_3+0x40>)
 801348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013490:	08013553 	.word	0x08013553
 8013494:	080134a5 	.word	0x080134a5
 8013498:	080134cf 	.word	0x080134cf
 801349c:	080134f9 	.word	0x080134f9
 80134a0:	08013533 	.word	0x08013533
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80134a4:	4b41      	ldr	r3, [pc, #260]	; (80135ac <fm_menu_config_k_lin_3+0x15c>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d005      	beq.n	80134b8 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 80134ac:	4b3e      	ldr	r3, [pc, #248]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	2103      	movs	r1, #3
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fb ff02 	bl	800f2bc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80134b8:	2301      	movs	r3, #1
 80134ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80134be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80134c2:	2200      	movs	r2, #0
 80134c4:	4619      	mov	r1, r3
 80134c6:	483a      	ldr	r0, [pc, #232]	; (80135b0 <fm_menu_config_k_lin_3+0x160>)
 80134c8:	f7fb f854 	bl	800e574 <_txe_queue_send>
        break;
 80134cc:	e042      	b.n	8013554 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80134ce:	4b37      	ldr	r3, [pc, #220]	; (80135ac <fm_menu_config_k_lin_3+0x15c>)
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d005      	beq.n	80134e2 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 80134d6:	4b34      	ldr	r3, [pc, #208]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	2103      	movs	r1, #3
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fb ffd7 	bl	800f490 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80134e2:	2301      	movs	r3, #1
 80134e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80134e8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80134ec:	2200      	movs	r2, #0
 80134ee:	4619      	mov	r1, r3
 80134f0:	482f      	ldr	r0, [pc, #188]	; (80135b0 <fm_menu_config_k_lin_3+0x160>)
 80134f2:	f7fb f83f 	bl	800e574 <_txe_queue_send>
        break;
 80134f6:	e02d      	b.n	8013554 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80134f8:	4b2c      	ldr	r3, [pc, #176]	; (80135ac <fm_menu_config_k_lin_3+0x15c>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00d      	beq.n	801351c <fm_menu_config_k_lin_3+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013500:	4b29      	ldr	r3, [pc, #164]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	2b0a      	cmp	r3, #10
 8013506:	d806      	bhi.n	8013516 <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 8013508:	4b27      	ldr	r3, [pc, #156]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	3301      	adds	r3, #1
 801350e:	b2da      	uxtb	r2, r3
 8013510:	4b25      	ldr	r3, [pc, #148]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 8013512:	701a      	strb	r2, [r3, #0]
 8013514:	e002      	b.n	801351c <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013516:	4b24      	ldr	r3, [pc, #144]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 8013518:	2200      	movs	r2, #0
 801351a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801351c:	2301      	movs	r3, #1
 801351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013522:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013526:	2200      	movs	r2, #0
 8013528:	4619      	mov	r1, r3
 801352a:	4821      	ldr	r0, [pc, #132]	; (80135b0 <fm_menu_config_k_lin_3+0x160>)
 801352c:	f7fb f822 	bl	800e574 <_txe_queue_send>
        break;
 8013530:	e010      	b.n	8013554 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013532:	4b20      	ldr	r3, [pc, #128]	; (80135b4 <fm_menu_config_k_lin_3+0x164>)
 8013534:	2201      	movs	r2, #1
 8013536:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013538:	4b1f      	ldr	r3, [pc, #124]	; (80135b8 <fm_menu_config_k_lin_3+0x168>)
 801353a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801353c:	2301      	movs	r3, #1
 801353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013542:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013546:	2200      	movs	r2, #0
 8013548:	4619      	mov	r1, r3
 801354a:	4819      	ldr	r0, [pc, #100]	; (80135b0 <fm_menu_config_k_lin_3+0x160>)
 801354c:	f7fb f812 	bl	800e574 <_txe_queue_send>
        break;
 8013550:	e000      	b.n	8013554 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013552:	bf00      	nop
    }

    previous_event = event_id;
 8013554:	4a19      	ldr	r2, [pc, #100]	; (80135bc <fm_menu_config_k_lin_3+0x16c>)
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_3\n";
 801355a:	4b19      	ldr	r3, [pc, #100]	; (80135c0 <fm_menu_config_k_lin_3+0x170>)
 801355c:	f107 040c 	add.w	r4, r7, #12
 8013560:	461d      	mov	r5, r3
 8013562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013566:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801356a:	c407      	stmia	r4!, {r0, r1, r2}
 801356c:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801356e:	f107 030c 	add.w	r3, r7, #12
 8013572:	211e      	movs	r1, #30
 8013574:	4618      	mov	r0, r3
 8013576:	f7fb fc31 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801357a:	4b0e      	ldr	r3, [pc, #56]	; (80135b4 <fm_menu_config_k_lin_3+0x164>)
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	2b01      	cmp	r3, #1
 8013580:	d108      	bne.n	8013594 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8013582:	4b09      	ldr	r3, [pc, #36]	; (80135a8 <fm_menu_config_k_lin_3+0x158>)
 8013584:	2200      	movs	r2, #0
 8013586:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013588:	4b06      	ldr	r3, [pc, #24]	; (80135a4 <fm_menu_config_k_lin_3+0x154>)
 801358a:	2201      	movs	r2, #1
 801358c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801358e:	4b09      	ldr	r3, [pc, #36]	; (80135b4 <fm_menu_config_k_lin_3+0x164>)
 8013590:	2200      	movs	r2, #0
 8013592:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013596:	4618      	mov	r0, r3
 8013598:	3730      	adds	r7, #48	; 0x30
 801359a:	46bd      	mov	sp, r7
 801359c:	bdb0      	pop	{r4, r5, r7, pc}
 801359e:	bf00      	nop
 80135a0:	08013451 	.word	0x08013451
 80135a4:	20000144 	.word	0x20000144
 80135a8:	20001dc9 	.word	0x20001dc9
 80135ac:	20001dba 	.word	0x20001dba
 80135b0:	20001388 	.word	0x20001388
 80135b4:	20001dca 	.word	0x20001dca
 80135b8:	080135c5 	.word	0x080135c5
 80135bc:	20001dbb 	.word	0x20001dbb
 80135c0:	08015a54 	.word	0x08015a54

080135c4 <fm_menu_config_k_lin_4>:
 * @brief Función que imprime el menú del K linealizado 4.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 80135c4:	b5b0      	push	{r4, r5, r7, lr}
 80135c6:	b08c      	sub	sp, #48	; 0x30
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	4603      	mov	r3, r0
 80135cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 80135ce:	4b51      	ldr	r3, [pc, #324]	; (8013714 <fm_menu_config_k_lin_4+0x150>)
 80135d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80135d2:	4b51      	ldr	r3, [pc, #324]	; (8013718 <fm_menu_config_k_lin_4+0x154>)
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d104      	bne.n	80135e4 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 80135da:	f7fc fa9c 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80135de:	4b4e      	ldr	r3, [pc, #312]	; (8013718 <fm_menu_config_k_lin_4+0x154>)
 80135e0:	2200      	movs	r2, #0
 80135e2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 80135e4:	4b4d      	ldr	r3, [pc, #308]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 80135e6:	781a      	ldrb	r2, [r3, #0]
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	4619      	mov	r1, r3
 80135ec:	2004      	movs	r0, #4
 80135ee:	f7fc fd05 	bl	800fffc <fm_lcd_k_lin>
    fm_lcd_refresh();
 80135f2:	f7fc fe1c 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80135f6:	79fb      	ldrb	r3, [r7, #7]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	2b04      	cmp	r3, #4
 80135fc:	d863      	bhi.n	80136c6 <fm_menu_config_k_lin_4+0x102>
 80135fe:	a201      	add	r2, pc, #4	; (adr r2, 8013604 <fm_menu_config_k_lin_4+0x40>)
 8013600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013604:	080136c7 	.word	0x080136c7
 8013608:	08013619 	.word	0x08013619
 801360c:	08013643 	.word	0x08013643
 8013610:	0801366d 	.word	0x0801366d
 8013614:	080136a7 	.word	0x080136a7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013618:	4b41      	ldr	r3, [pc, #260]	; (8013720 <fm_menu_config_k_lin_4+0x15c>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d005      	beq.n	801362c <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013620:	4b3e      	ldr	r3, [pc, #248]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2104      	movs	r1, #4
 8013626:	4618      	mov	r0, r3
 8013628:	f7fb fe48 	bl	800f2bc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801362c:	2301      	movs	r3, #1
 801362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013632:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013636:	2200      	movs	r2, #0
 8013638:	4619      	mov	r1, r3
 801363a:	483a      	ldr	r0, [pc, #232]	; (8013724 <fm_menu_config_k_lin_4+0x160>)
 801363c:	f7fa ff9a 	bl	800e574 <_txe_queue_send>
        break;
 8013640:	e042      	b.n	80136c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013642:	4b37      	ldr	r3, [pc, #220]	; (8013720 <fm_menu_config_k_lin_4+0x15c>)
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d005      	beq.n	8013656 <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 801364a:	4b34      	ldr	r3, [pc, #208]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	2104      	movs	r1, #4
 8013650:	4618      	mov	r0, r3
 8013652:	f7fb ff1d 	bl	800f490 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013656:	2301      	movs	r3, #1
 8013658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801365c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013660:	2200      	movs	r2, #0
 8013662:	4619      	mov	r1, r3
 8013664:	482f      	ldr	r0, [pc, #188]	; (8013724 <fm_menu_config_k_lin_4+0x160>)
 8013666:	f7fa ff85 	bl	800e574 <_txe_queue_send>
        break;
 801366a:	e02d      	b.n	80136c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801366c:	4b2c      	ldr	r3, [pc, #176]	; (8013720 <fm_menu_config_k_lin_4+0x15c>)
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00d      	beq.n	8013690 <fm_menu_config_k_lin_4+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013674:	4b29      	ldr	r3, [pc, #164]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	2b0a      	cmp	r3, #10
 801367a:	d806      	bhi.n	801368a <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 801367c:	4b27      	ldr	r3, [pc, #156]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	3301      	adds	r3, #1
 8013682:	b2da      	uxtb	r2, r3
 8013684:	4b25      	ldr	r3, [pc, #148]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 8013686:	701a      	strb	r2, [r3, #0]
 8013688:	e002      	b.n	8013690 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801368a:	4b24      	ldr	r3, [pc, #144]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 801368c:	2200      	movs	r2, #0
 801368e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013690:	2301      	movs	r3, #1
 8013692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013696:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801369a:	2200      	movs	r2, #0
 801369c:	4619      	mov	r1, r3
 801369e:	4821      	ldr	r0, [pc, #132]	; (8013724 <fm_menu_config_k_lin_4+0x160>)
 80136a0:	f7fa ff68 	bl	800e574 <_txe_queue_send>
        break;
 80136a4:	e010      	b.n	80136c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80136a6:	4b20      	ldr	r3, [pc, #128]	; (8013728 <fm_menu_config_k_lin_4+0x164>)
 80136a8:	2201      	movs	r2, #1
 80136aa:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80136ac:	4b1f      	ldr	r3, [pc, #124]	; (801372c <fm_menu_config_k_lin_4+0x168>)
 80136ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80136b0:	2301      	movs	r3, #1
 80136b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80136ba:	2200      	movs	r2, #0
 80136bc:	4619      	mov	r1, r3
 80136be:	4819      	ldr	r0, [pc, #100]	; (8013724 <fm_menu_config_k_lin_4+0x160>)
 80136c0:	f7fa ff58 	bl	800e574 <_txe_queue_send>
        break;
 80136c4:	e000      	b.n	80136c8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80136c6:	bf00      	nop
    }

    previous_event = event_id;
 80136c8:	4a19      	ldr	r2, [pc, #100]	; (8013730 <fm_menu_config_k_lin_4+0x16c>)
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_4\n";
 80136ce:	4b19      	ldr	r3, [pc, #100]	; (8013734 <fm_menu_config_k_lin_4+0x170>)
 80136d0:	f107 040c 	add.w	r4, r7, #12
 80136d4:	461d      	mov	r5, r3
 80136d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80136de:	c407      	stmia	r4!, {r0, r1, r2}
 80136e0:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80136e2:	f107 030c 	add.w	r3, r7, #12
 80136e6:	211e      	movs	r1, #30
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7fb fb77 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80136ee:	4b0e      	ldr	r3, [pc, #56]	; (8013728 <fm_menu_config_k_lin_4+0x164>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d108      	bne.n	8013708 <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80136f6:	4b09      	ldr	r3, [pc, #36]	; (801371c <fm_menu_config_k_lin_4+0x158>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80136fc:	4b06      	ldr	r3, [pc, #24]	; (8013718 <fm_menu_config_k_lin_4+0x154>)
 80136fe:	2201      	movs	r2, #1
 8013700:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013702:	4b09      	ldr	r3, [pc, #36]	; (8013728 <fm_menu_config_k_lin_4+0x164>)
 8013704:	2200      	movs	r2, #0
 8013706:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801370a:	4618      	mov	r0, r3
 801370c:	3730      	adds	r7, #48	; 0x30
 801370e:	46bd      	mov	sp, r7
 8013710:	bdb0      	pop	{r4, r5, r7, pc}
 8013712:	bf00      	nop
 8013714:	080135c5 	.word	0x080135c5
 8013718:	20000145 	.word	0x20000145
 801371c:	20001dcb 	.word	0x20001dcb
 8013720:	20001dba 	.word	0x20001dba
 8013724:	20001388 	.word	0x20001388
 8013728:	20001dcc 	.word	0x20001dcc
 801372c:	08013739 	.word	0x08013739
 8013730:	20001dbb 	.word	0x20001dbb
 8013734:	08015a74 	.word	0x08015a74

08013738 <fm_menu_config_k_lin_5>:
 * @brief Función que imprime el menú del K linealizado 5.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013738:	b5b0      	push	{r4, r5, r7, lr}
 801373a:	b08c      	sub	sp, #48	; 0x30
 801373c:	af00      	add	r7, sp, #0
 801373e:	4603      	mov	r3, r0
 8013740:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013742:	4b52      	ldr	r3, [pc, #328]	; (801388c <fm_menu_config_k_lin_5+0x154>)
 8013744:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013746:	4b52      	ldr	r3, [pc, #328]	; (8013890 <fm_menu_config_k_lin_5+0x158>)
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	2b01      	cmp	r3, #1
 801374c:	d104      	bne.n	8013758 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 801374e:	f7fc f9e2 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8013752:	4b4f      	ldr	r3, [pc, #316]	; (8013890 <fm_menu_config_k_lin_5+0x158>)
 8013754:	2200      	movs	r2, #0
 8013756:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 8013758:	4b4e      	ldr	r3, [pc, #312]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 801375a:	781a      	ldrb	r2, [r3, #0]
 801375c:	79fb      	ldrb	r3, [r7, #7]
 801375e:	4619      	mov	r1, r3
 8013760:	2005      	movs	r0, #5
 8013762:	f7fc fc4b 	bl	800fffc <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013766:	f7fc fd62 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 801376a:	79fb      	ldrb	r3, [r7, #7]
 801376c:	3b01      	subs	r3, #1
 801376e:	2b04      	cmp	r3, #4
 8013770:	d866      	bhi.n	8013840 <fm_menu_config_k_lin_5+0x108>
 8013772:	a201      	add	r2, pc, #4	; (adr r2, 8013778 <fm_menu_config_k_lin_5+0x40>)
 8013774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013778:	08013841 	.word	0x08013841
 801377c:	0801378d 	.word	0x0801378d
 8013780:	080137b7 	.word	0x080137b7
 8013784:	080137e1 	.word	0x080137e1
 8013788:	0801381b 	.word	0x0801381b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801378c:	4b42      	ldr	r3, [pc, #264]	; (8013898 <fm_menu_config_k_lin_5+0x160>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d005      	beq.n	80137a0 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 8013794:	4b3f      	ldr	r3, [pc, #252]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	2105      	movs	r1, #5
 801379a:	4618      	mov	r0, r3
 801379c:	f7fb fd8e 	bl	800f2bc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80137a0:	2301      	movs	r3, #1
 80137a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137a6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80137aa:	2200      	movs	r2, #0
 80137ac:	4619      	mov	r1, r3
 80137ae:	483b      	ldr	r0, [pc, #236]	; (801389c <fm_menu_config_k_lin_5+0x164>)
 80137b0:	f7fa fee0 	bl	800e574 <_txe_queue_send>
        break;
 80137b4:	e045      	b.n	8013842 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80137b6:	4b38      	ldr	r3, [pc, #224]	; (8013898 <fm_menu_config_k_lin_5+0x160>)
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d005      	beq.n	80137ca <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 80137be:	4b35      	ldr	r3, [pc, #212]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	2105      	movs	r1, #5
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fb fe63 	bl	800f490 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80137ca:	2301      	movs	r3, #1
 80137cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137d0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80137d4:	2200      	movs	r2, #0
 80137d6:	4619      	mov	r1, r3
 80137d8:	4830      	ldr	r0, [pc, #192]	; (801389c <fm_menu_config_k_lin_5+0x164>)
 80137da:	f7fa fecb 	bl	800e574 <_txe_queue_send>
        break;
 80137de:	e030      	b.n	8013842 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80137e0:	4b2d      	ldr	r3, [pc, #180]	; (8013898 <fm_menu_config_k_lin_5+0x160>)
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d00d      	beq.n	8013804 <fm_menu_config_k_lin_5+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80137e8:	4b2a      	ldr	r3, [pc, #168]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	2b0a      	cmp	r3, #10
 80137ee:	d806      	bhi.n	80137fe <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 80137f0:	4b28      	ldr	r3, [pc, #160]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	3301      	adds	r3, #1
 80137f6:	b2da      	uxtb	r2, r3
 80137f8:	4b26      	ldr	r3, [pc, #152]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 80137fa:	701a      	strb	r2, [r3, #0]
 80137fc:	e002      	b.n	8013804 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80137fe:	4b25      	ldr	r3, [pc, #148]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 8013800:	2200      	movs	r2, #0
 8013802:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013804:	2301      	movs	r3, #1
 8013806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801380a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801380e:	2200      	movs	r2, #0
 8013810:	4619      	mov	r1, r3
 8013812:	4822      	ldr	r0, [pc, #136]	; (801389c <fm_menu_config_k_lin_5+0x164>)
 8013814:	f7fa feae 	bl	800e574 <_txe_queue_send>
        break;
 8013818:	e013      	b.n	8013842 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ESC:
            correct_password = 0;
 801381a:	4b1f      	ldr	r3, [pc, #124]	; (8013898 <fm_menu_config_k_lin_5+0x160>)
 801381c:	2200      	movs	r2, #0
 801381e:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 8013820:	4b1f      	ldr	r3, [pc, #124]	; (80138a0 <fm_menu_config_k_lin_5+0x168>)
 8013822:	2201      	movs	r2, #1
 8013824:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013826:	4b1f      	ldr	r3, [pc, #124]	; (80138a4 <fm_menu_config_k_lin_5+0x16c>)
 8013828:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801382a:	2301      	movs	r3, #1
 801382c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013830:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013834:	2200      	movs	r2, #0
 8013836:	4619      	mov	r1, r3
 8013838:	4818      	ldr	r0, [pc, #96]	; (801389c <fm_menu_config_k_lin_5+0x164>)
 801383a:	f7fa fe9b 	bl	800e574 <_txe_queue_send>
        break;
 801383e:	e000      	b.n	8013842 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013840:	bf00      	nop
    }

    previous_event = event_id;
 8013842:	4a19      	ldr	r2, [pc, #100]	; (80138a8 <fm_menu_config_k_lin_5+0x170>)
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_5\n";
 8013848:	4b18      	ldr	r3, [pc, #96]	; (80138ac <fm_menu_config_k_lin_5+0x174>)
 801384a:	f107 040c 	add.w	r4, r7, #12
 801384e:	461d      	mov	r5, r3
 8013850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013854:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013858:	c407      	stmia	r4!, {r0, r1, r2}
 801385a:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801385c:	f107 030c 	add.w	r3, r7, #12
 8013860:	211e      	movs	r1, #30
 8013862:	4618      	mov	r0, r3
 8013864:	f7fb faba 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013868:	4b0d      	ldr	r3, [pc, #52]	; (80138a0 <fm_menu_config_k_lin_5+0x168>)
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d108      	bne.n	8013882 <fm_menu_config_k_lin_5+0x14a>
    {
        digit_lin_modify = DIG_LIN_0;
 8013870:	4b08      	ldr	r3, [pc, #32]	; (8013894 <fm_menu_config_k_lin_5+0x15c>)
 8013872:	2200      	movs	r2, #0
 8013874:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013876:	4b06      	ldr	r3, [pc, #24]	; (8013890 <fm_menu_config_k_lin_5+0x158>)
 8013878:	2201      	movs	r2, #1
 801387a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801387c:	4b08      	ldr	r3, [pc, #32]	; (80138a0 <fm_menu_config_k_lin_5+0x168>)
 801387e:	2200      	movs	r2, #0
 8013880:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013884:	4618      	mov	r0, r3
 8013886:	3730      	adds	r7, #48	; 0x30
 8013888:	46bd      	mov	sp, r7
 801388a:	bdb0      	pop	{r4, r5, r7, pc}
 801388c:	08013739 	.word	0x08013739
 8013890:	20000146 	.word	0x20000146
 8013894:	20001dcd 	.word	0x20001dcd
 8013898:	20001dba 	.word	0x20001dba
 801389c:	20001388 	.word	0x20001388
 80138a0:	20001dce 	.word	0x20001dce
 80138a4:	08014775 	.word	0x08014775
 80138a8:	20001dbb 	.word	0x20001dbb
 80138ac:	08015a94 	.word	0x08015a94

080138b0 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80138b0:	b5b0      	push	{r4, r5, r7, lr}
 80138b2:	b08a      	sub	sp, #40	; 0x28
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	4603      	mov	r3, r0
 80138b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80138ba:	4b69      	ldr	r3, [pc, #420]	; (8013a60 <fm_menu_config_k_param+0x1b0>)
 80138bc:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 80138be:	4b69      	ldr	r3, [pc, #420]	; (8013a64 <fm_menu_config_k_param+0x1b4>)
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d104      	bne.n	80138d0 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 80138c6:	f7fc f926 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80138ca:	4b66      	ldr	r3, [pc, #408]	; (8013a64 <fm_menu_config_k_param+0x1b4>)
 80138cc:	2200      	movs	r2, #0
 80138ce:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 80138d0:	4b65      	ldr	r3, [pc, #404]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80138d2:	781a      	ldrb	r2, [r3, #0]
 80138d4:	79fb      	ldrb	r3, [r7, #7]
 80138d6:	4611      	mov	r1, r2
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fc fb1d 	bl	800ff18 <fm_lcd_k_factor>
    fm_lcd_refresh();
 80138de:	f7fc fca6 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	3b01      	subs	r3, #1
 80138e6:	2b04      	cmp	r3, #4
 80138e8:	f200 8094 	bhi.w	8013a14 <fm_menu_config_k_param+0x164>
 80138ec:	a201      	add	r2, pc, #4	; (adr r2, 80138f4 <fm_menu_config_k_param+0x44>)
 80138ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138f2:	bf00      	nop
 80138f4:	08013a15 	.word	0x08013a15
 80138f8:	08013909 	.word	0x08013909
 80138fc:	08013931 	.word	0x08013931
 8013900:	08013959 	.word	0x08013959
 8013904:	080139f5 	.word	0x080139f5
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013908:	4b58      	ldr	r3, [pc, #352]	; (8013a6c <fm_menu_config_k_param+0x1bc>)
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d004      	beq.n	801391a <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013910:	4b55      	ldr	r3, [pc, #340]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	4618      	mov	r0, r3
 8013916:	f7fb fc51 	bl	800f1bc <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801391a:	2301      	movs	r3, #1
 801391c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013920:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013924:	2200      	movs	r2, #0
 8013926:	4619      	mov	r1, r3
 8013928:	4851      	ldr	r0, [pc, #324]	; (8013a70 <fm_menu_config_k_param+0x1c0>)
 801392a:	f7fa fe23 	bl	800e574 <_txe_queue_send>
        break;
 801392e:	e072      	b.n	8013a16 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013930:	4b4e      	ldr	r3, [pc, #312]	; (8013a6c <fm_menu_config_k_param+0x1bc>)
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d004      	beq.n	8013942 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013938:	4b4b      	ldr	r3, [pc, #300]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f7fb fc7d 	bl	800f23c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013942:	2301      	movs	r3, #1
 8013944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013948:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801394c:	2200      	movs	r2, #0
 801394e:	4619      	mov	r1, r3
 8013950:	4847      	ldr	r0, [pc, #284]	; (8013a70 <fm_menu_config_k_param+0x1c0>)
 8013952:	f7fa fe0f 	bl	800e574 <_txe_queue_send>
        break;
 8013956:	e05e      	b.n	8013a16 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013958:	4b44      	ldr	r3, [pc, #272]	; (8013a6c <fm_menu_config_k_param+0x1bc>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d03e      	beq.n	80139de <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 8013960:	4b41      	ldr	r3, [pc, #260]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d103      	bne.n	8013970 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 8013968:	4b3f      	ldr	r3, [pc, #252]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 801396a:	2201      	movs	r2, #1
 801396c:	701a      	strb	r2, [r3, #0]
 801396e:	e036      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 8013970:	4b3d      	ldr	r3, [pc, #244]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d103      	bne.n	8013980 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 8013978:	4b3b      	ldr	r3, [pc, #236]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 801397a:	2202      	movs	r2, #2
 801397c:	701a      	strb	r2, [r3, #0]
 801397e:	e02e      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 8013980:	4b39      	ldr	r3, [pc, #228]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	2b02      	cmp	r3, #2
 8013986:	d103      	bne.n	8013990 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 8013988:	4b37      	ldr	r3, [pc, #220]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 801398a:	2203      	movs	r2, #3
 801398c:	701a      	strb	r2, [r3, #0]
 801398e:	e026      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 8013990:	4b35      	ldr	r3, [pc, #212]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b03      	cmp	r3, #3
 8013996:	d103      	bne.n	80139a0 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 8013998:	4b33      	ldr	r3, [pc, #204]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 801399a:	2204      	movs	r2, #4
 801399c:	701a      	strb	r2, [r3, #0]
 801399e:	e01e      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 80139a0:	4b31      	ldr	r3, [pc, #196]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2b04      	cmp	r3, #4
 80139a6:	d103      	bne.n	80139b0 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 80139a8:	4b2f      	ldr	r3, [pc, #188]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139aa:	2205      	movs	r2, #5
 80139ac:	701a      	strb	r2, [r3, #0]
 80139ae:	e016      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 80139b0:	4b2d      	ldr	r3, [pc, #180]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	2b05      	cmp	r3, #5
 80139b6:	d103      	bne.n	80139c0 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 80139b8:	4b2b      	ldr	r3, [pc, #172]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139ba:	2206      	movs	r2, #6
 80139bc:	701a      	strb	r2, [r3, #0]
 80139be:	e00e      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 80139c0:	4b29      	ldr	r3, [pc, #164]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	2b06      	cmp	r3, #6
 80139c6:	d103      	bne.n	80139d0 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 80139c8:	4b27      	ldr	r3, [pc, #156]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139ca:	2207      	movs	r2, #7
 80139cc:	701a      	strb	r2, [r3, #0]
 80139ce:	e006      	b.n	80139de <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 80139d0:	4b25      	ldr	r3, [pc, #148]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	2b07      	cmp	r3, #7
 80139d6:	d102      	bne.n	80139de <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 80139d8:	4b23      	ldr	r3, [pc, #140]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 80139da:	2200      	movs	r2, #0
 80139dc:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80139de:	2301      	movs	r3, #1
 80139e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80139e4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80139e8:	2200      	movs	r2, #0
 80139ea:	4619      	mov	r1, r3
 80139ec:	4820      	ldr	r0, [pc, #128]	; (8013a70 <fm_menu_config_k_param+0x1c0>)
 80139ee:	f7fa fdc1 	bl	800e574 <_txe_queue_send>
        break;
 80139f2:	e010      	b.n	8013a16 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80139f4:	4b1f      	ldr	r3, [pc, #124]	; (8013a74 <fm_menu_config_k_param+0x1c4>)
 80139f6:	2201      	movs	r2, #1
 80139f8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 80139fa:	4b1f      	ldr	r3, [pc, #124]	; (8013a78 <fm_menu_config_k_param+0x1c8>)
 80139fc:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 80139fe:	2301      	movs	r3, #1
 8013a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a04:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013a08:	2200      	movs	r2, #0
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	4818      	ldr	r0, [pc, #96]	; (8013a70 <fm_menu_config_k_param+0x1c0>)
 8013a0e:	f7fa fdb1 	bl	800e574 <_txe_queue_send>
        break;
 8013a12:	e000      	b.n	8013a16 <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013a14:	bf00      	nop
    }

    previous_event = event_id;
 8013a16:	4a19      	ldr	r2, [pc, #100]	; (8013a7c <fm_menu_config_k_param+0x1cc>)
 8013a18:	79fb      	ldrb	r3, [r7, #7]
 8013a1a:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 8013a1c:	4b18      	ldr	r3, [pc, #96]	; (8013a80 <fm_menu_config_k_param+0x1d0>)
 8013a1e:	f107 0408 	add.w	r4, r7, #8
 8013a22:	461d      	mov	r5, r3
 8013a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a2c:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013a30:	f107 0308 	add.w	r3, r7, #8
 8013a34:	2118      	movs	r1, #24
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fb f9d0 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013a3c:	4b0d      	ldr	r3, [pc, #52]	; (8013a74 <fm_menu_config_k_param+0x1c4>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d108      	bne.n	8013a56 <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 8013a44:	4b08      	ldr	r3, [pc, #32]	; (8013a68 <fm_menu_config_k_param+0x1b8>)
 8013a46:	2200      	movs	r2, #0
 8013a48:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013a4a:	4b06      	ldr	r3, [pc, #24]	; (8013a64 <fm_menu_config_k_param+0x1b4>)
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013a50:	4b08      	ldr	r3, [pc, #32]	; (8013a74 <fm_menu_config_k_param+0x1c4>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3728      	adds	r7, #40	; 0x28
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a60:	080138b1 	.word	0x080138b1
 8013a64:	20000147 	.word	0x20000147
 8013a68:	20001dcf 	.word	0x20001dcf
 8013a6c:	20001dba 	.word	0x20001dba
 8013a70:	20001388 	.word	0x20001388
 8013a74:	20001dd0 	.word	0x20001dd0
 8013a78:	08013169 	.word	0x08013169
 8013a7c:	20001dbb 	.word	0x20001dbb
 8013a80:	08015ab4 	.word	0x08015ab4

08013a84 <fm_menu_config_pass>:
 * regresa al menú de inicio donde se encienden todos los leds.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 8013a84:	b5b0      	push	{r4, r5, r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013a8e:	4ba8      	ldr	r3, [pc, #672]	; (8013d30 <fm_menu_config_pass+0x2ac>)
 8013a90:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013a92:	4ba8      	ldr	r3, [pc, #672]	; (8013d34 <fm_menu_config_pass+0x2b0>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d10a      	bne.n	8013ab0 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 8013a9a:	4ba7      	ldr	r3, [pc, #668]	; (8013d38 <fm_menu_config_pass+0x2b4>)
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013aa0:	4ba6      	ldr	r3, [pc, #664]	; (8013d3c <fm_menu_config_pass+0x2b8>)
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8013aa6:	f7fc f836 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8013aaa:	4ba2      	ldr	r3, [pc, #648]	; (8013d34 <fm_menu_config_pass+0x2b0>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	200a      	movs	r0, #10
 8013ab4:	f7fd fee0 	bl	8011878 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 8013ab8:	4ba1      	ldr	r3, [pc, #644]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d104      	bne.n	8013aca <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013ac0:	2100      	movs	r1, #0
 8013ac2:	200d      	movs	r0, #13
 8013ac4:	f7fd fed8 	bl	8011878 <lcd_set_symbol>
 8013ac8:	e010      	b.n	8013aec <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 8013aca:	4b9d      	ldr	r3, [pc, #628]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	d104      	bne.n	8013adc <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	200e      	movs	r0, #14
 8013ad6:	f7fd fecf 	bl	8011878 <lcd_set_symbol>
 8013ada:	e007      	b.n	8013aec <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013adc:	4b98      	ldr	r3, [pc, #608]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	2b03      	cmp	r3, #3
 8013ae2:	d103      	bne.n	8013aec <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	200f      	movs	r0, #15
 8013ae8:	f7fd fec6 	bl	8011878 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013aec:	f7fc fb9f 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 8013af0:	79fb      	ldrb	r3, [r7, #7]
 8013af2:	3b01      	subs	r3, #1
 8013af4:	2b04      	cmp	r3, #4
 8013af6:	f200 8085 	bhi.w	8013c04 <fm_menu_config_pass+0x180>
 8013afa:	a201      	add	r2, pc, #4	; (adr r2, 8013b00 <fm_menu_config_pass+0x7c>)
 8013afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b00:	08013c05 	.word	0x08013c05
 8013b04:	08013b15 	.word	0x08013b15
 8013b08:	08013b51 	.word	0x08013b51
 8013b0c:	08013b8d 	.word	0x08013b8d
 8013b10:	08013bc9 	.word	0x08013bc9
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013b14:	4b8a      	ldr	r3, [pc, #552]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	461a      	mov	r2, r3
 8013b1a:	4b8a      	ldr	r3, [pc, #552]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013b1c:	2101      	movs	r1, #1
 8013b1e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013b20:	4b87      	ldr	r3, [pc, #540]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d80f      	bhi.n	8013b48 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013b28:	2301      	movs	r3, #1
 8013b2a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b2c:	f107 0313 	add.w	r3, r7, #19
 8013b30:	2200      	movs	r2, #0
 8013b32:	4619      	mov	r1, r3
 8013b34:	4884      	ldr	r0, [pc, #528]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013b36:	f7fa fd1d 	bl	800e574 <_txe_queue_send>
                password_index++;
 8013b3a:	4b81      	ldr	r3, [pc, #516]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	b2da      	uxtb	r2, r3
 8013b42:	4b7f      	ldr	r3, [pc, #508]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b44:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013b46:	e05e      	b.n	8013c06 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b48:	4b80      	ldr	r3, [pc, #512]	; (8013d4c <fm_menu_config_pass+0x2c8>)
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	701a      	strb	r2, [r3, #0]
        break;
 8013b4e:	e05a      	b.n	8013c06 <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013b50:	4b7b      	ldr	r3, [pc, #492]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	461a      	mov	r2, r3
 8013b56:	4b7b      	ldr	r3, [pc, #492]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013b58:	2102      	movs	r1, #2
 8013b5a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013b5c:	4b78      	ldr	r3, [pc, #480]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	d80f      	bhi.n	8013b84 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013b64:	2301      	movs	r3, #1
 8013b66:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b68:	f107 0313 	add.w	r3, r7, #19
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	4619      	mov	r1, r3
 8013b70:	4875      	ldr	r0, [pc, #468]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013b72:	f7fa fcff 	bl	800e574 <_txe_queue_send>
                password_index++;
 8013b76:	4b72      	ldr	r3, [pc, #456]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	b2da      	uxtb	r2, r3
 8013b7e:	4b70      	ldr	r3, [pc, #448]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b80:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013b82:	e040      	b.n	8013c06 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013b84:	4b71      	ldr	r3, [pc, #452]	; (8013d4c <fm_menu_config_pass+0x2c8>)
 8013b86:	2201      	movs	r2, #1
 8013b88:	701a      	strb	r2, [r3, #0]
        break;
 8013b8a:	e03c      	b.n	8013c06 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013b8c:	4b6c      	ldr	r3, [pc, #432]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	461a      	mov	r2, r3
 8013b92:	4b6c      	ldr	r3, [pc, #432]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013b94:	2103      	movs	r1, #3
 8013b96:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013b98:	4b69      	ldr	r3, [pc, #420]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b02      	cmp	r3, #2
 8013b9e:	d80f      	bhi.n	8013bc0 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ba4:	f107 0313 	add.w	r3, r7, #19
 8013ba8:	2200      	movs	r2, #0
 8013baa:	4619      	mov	r1, r3
 8013bac:	4866      	ldr	r0, [pc, #408]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013bae:	f7fa fce1 	bl	800e574 <_txe_queue_send>
                password_index++;
 8013bb2:	4b63      	ldr	r3, [pc, #396]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	b2da      	uxtb	r2, r3
 8013bba:	4b61      	ldr	r3, [pc, #388]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bbc:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013bbe:	e022      	b.n	8013c06 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013bc0:	4b62      	ldr	r3, [pc, #392]	; (8013d4c <fm_menu_config_pass+0x2c8>)
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	701a      	strb	r2, [r3, #0]
        break;
 8013bc6:	e01e      	b.n	8013c06 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013bc8:	4b5d      	ldr	r3, [pc, #372]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	461a      	mov	r2, r3
 8013bce:	4b5d      	ldr	r3, [pc, #372]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013bd0:	2104      	movs	r1, #4
 8013bd2:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013bd4:	4b5a      	ldr	r3, [pc, #360]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b02      	cmp	r3, #2
 8013bda:	d80f      	bhi.n	8013bfc <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013be0:	f107 0313 	add.w	r3, r7, #19
 8013be4:	2200      	movs	r2, #0
 8013be6:	4619      	mov	r1, r3
 8013be8:	4857      	ldr	r0, [pc, #348]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013bea:	f7fa fcc3 	bl	800e574 <_txe_queue_send>
                password_index++;
 8013bee:	4b54      	ldr	r3, [pc, #336]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	4b52      	ldr	r3, [pc, #328]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013bf8:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013bfa:	e004      	b.n	8013c06 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013bfc:	4b53      	ldr	r3, [pc, #332]	; (8013d4c <fm_menu_config_pass+0x2c8>)
 8013bfe:	2201      	movs	r2, #1
 8013c00:	701a      	strb	r2, [r3, #0]
        break;
 8013c02:	e000      	b.n	8013c06 <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013c04:	bf00      	nop
    }

    previous_event = event_id;
 8013c06:	4a52      	ldr	r2, [pc, #328]	; (8013d50 <fm_menu_config_pass+0x2cc>)
 8013c08:	79fb      	ldrb	r3, [r7, #7]
 8013c0a:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 8013c0c:	4a51      	ldr	r2, [pc, #324]	; (8013d54 <fm_menu_config_pass+0x2d0>)
 8013c0e:	f107 0308 	add.w	r3, r7, #8
 8013c12:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c14:	c303      	stmia	r3!, {r0, r1}
 8013c16:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013c18:	f107 0308 	add.w	r3, r7, #8
 8013c1c:	210a      	movs	r1, #10
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fb f8dc 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013c24:	4b49      	ldr	r3, [pc, #292]	; (8013d4c <fm_menu_config_pass+0x2c8>)
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	f040 80c0 	bne.w	8013dae <fm_menu_config_pass+0x32a>
 8013c2e:	4b44      	ldr	r3, [pc, #272]	; (8013d40 <fm_menu_config_pass+0x2bc>)
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	f240 80bb 	bls.w	8013dae <fm_menu_config_pass+0x32a>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == PASS_DOWN && password[1] == PASS_UP
 8013c38:	4b42      	ldr	r3, [pc, #264]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d11d      	bne.n	8013c7c <fm_menu_config_pass+0x1f8>
 8013c40:	4b40      	ldr	r3, [pc, #256]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c42:	785b      	ldrb	r3, [r3, #1]
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d119      	bne.n	8013c7c <fm_menu_config_pass+0x1f8>
        && password[2] == PASS_UP
 8013c48:	4b3e      	ldr	r3, [pc, #248]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c4a:	789b      	ldrb	r3, [r3, #2]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d115      	bne.n	8013c7c <fm_menu_config_pass+0x1f8>
        && password[PASSWORD_LENGTH - 1] == PASS_ENTER)
 8013c50:	4b3c      	ldr	r3, [pc, #240]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c52:	78db      	ldrb	r3, [r3, #3]
 8013c54:	2b03      	cmp	r3, #3
 8013c56:	d111      	bne.n	8013c7c <fm_menu_config_pass+0x1f8>
        {
            correct_password = 1;
 8013c58:	4b38      	ldr	r3, [pc, #224]	; (8013d3c <fm_menu_config_pass+0x2b8>)
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013c5e:	4b3e      	ldr	r3, [pc, #248]	; (8013d58 <fm_menu_config_pass+0x2d4>)
 8013c60:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013c62:	2301      	movs	r3, #1
 8013c64:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c66:	f107 0313 	add.w	r3, r7, #19
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	4836      	ldr	r0, [pc, #216]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013c70:	f7fa fc80 	bl	800e574 <_txe_queue_send>

            password_try = 0;
 8013c74:	4b39      	ldr	r3, [pc, #228]	; (8013d5c <fm_menu_config_pass+0x2d8>)
 8013c76:	2200      	movs	r2, #0
 8013c78:	701a      	strb	r2, [r3, #0]
 8013c7a:	e083      	b.n	8013d84 <fm_menu_config_pass+0x300>
        }
        else if (password[0] == PASS_DOWN && password[1] == PASS_DOWN
 8013c7c:	4b31      	ldr	r3, [pc, #196]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b02      	cmp	r3, #2
 8013c82:	d139      	bne.n	8013cf8 <fm_menu_config_pass+0x274>
 8013c84:	4b2f      	ldr	r3, [pc, #188]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c86:	785b      	ldrb	r3, [r3, #1]
 8013c88:	2b02      	cmp	r3, #2
 8013c8a:	d135      	bne.n	8013cf8 <fm_menu_config_pass+0x274>
        && password[2] == PASS_UP && password[PASSWORD_LENGTH - 1] == PASS_UP)
 8013c8c:	4b2d      	ldr	r3, [pc, #180]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c8e:	789b      	ldrb	r3, [r3, #2]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d131      	bne.n	8013cf8 <fm_menu_config_pass+0x274>
 8013c94:	4b2b      	ldr	r3, [pc, #172]	; (8013d44 <fm_menu_config_pass+0x2c0>)
 8013c96:	78db      	ldrb	r3, [r3, #3]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d12d      	bne.n	8013cf8 <fm_menu_config_pass+0x274>
        {
            correct_password = 1;
 8013c9c:	4b27      	ldr	r3, [pc, #156]	; (8013d3c <fm_menu_config_pass+0x2b8>)
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013ca2:	4b2f      	ldr	r3, [pc, #188]	; (8013d60 <fm_menu_config_pass+0x2dc>)
 8013ca4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013caa:	f107 0313 	add.w	r3, r7, #19
 8013cae:	2200      	movs	r2, #0
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4825      	ldr	r0, [pc, #148]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013cb4:	f7fa fc5e 	bl	800e574 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013cb8:	f7fb f854 	bl	800ed64 <fm_calendar_get_day>
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	f7fb f86f 	bl	800eda0 <fm_calendar_get_month>
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	f7fb f880 	bl	800edc8 <fm_calendar_get_year>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	461a      	mov	r2, r3
 8013ccc:	4629      	mov	r1, r5
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f7fb fa22 	bl	800f118 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013cd4:	f7fb f850 	bl	800ed78 <fm_calendar_get_hour>
 8013cd8:	4604      	mov	r4, r0
 8013cda:	f7fb f857 	bl	800ed8c <fm_calendar_get_minute>
 8013cde:	4605      	mov	r5, r0
 8013ce0:	f7fb f868 	bl	800edb4 <fm_calendar_get_second>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	4629      	mov	r1, r5
 8013cea:	4620      	mov	r0, r4
 8013cec:	f7fb fcf0 	bl	800f6d0 <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013cf0:	4b1a      	ldr	r3, [pc, #104]	; (8013d5c <fm_menu_config_pass+0x2d8>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	701a      	strb	r2, [r3, #0]
 8013cf6:	e045      	b.n	8013d84 <fm_menu_config_pass+0x300>
        }
        else
        {
            correct_password = 0;
 8013cf8:	4b10      	ldr	r3, [pc, #64]	; (8013d3c <fm_menu_config_pass+0x2b8>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013cfe:	4b17      	ldr	r3, [pc, #92]	; (8013d5c <fm_menu_config_pass+0x2d8>)
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	3301      	adds	r3, #1
 8013d04:	b2da      	uxtb	r2, r3
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <fm_menu_config_pass+0x2d8>)
 8013d08:	701a      	strb	r2, [r3, #0]

            if (password_try < password_try_max)
 8013d0a:	4b14      	ldr	r3, [pc, #80]	; (8013d5c <fm_menu_config_pass+0x2d8>)
 8013d0c:	781a      	ldrb	r2, [r3, #0]
 8013d0e:	4b15      	ldr	r3, [pc, #84]	; (8013d64 <fm_menu_config_pass+0x2e0>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d228      	bcs.n	8013d68 <fm_menu_config_pass+0x2e4>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013d16:	4b06      	ldr	r3, [pc, #24]	; (8013d30 <fm_menu_config_pass+0x2ac>)
 8013d18:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d1e:	f107 0313 	add.w	r3, r7, #19
 8013d22:	2200      	movs	r2, #0
 8013d24:	4619      	mov	r1, r3
 8013d26:	4808      	ldr	r0, [pc, #32]	; (8013d48 <fm_menu_config_pass+0x2c4>)
 8013d28:	f7fa fc24 	bl	800e574 <_txe_queue_send>
 8013d2c:	e02a      	b.n	8013d84 <fm_menu_config_pass+0x300>
 8013d2e:	bf00      	nop
 8013d30:	08013a85 	.word	0x08013a85
 8013d34:	20000148 	.word	0x20000148
 8013d38:	20001dbc 	.word	0x20001dbc
 8013d3c:	20001dba 	.word	0x20001dba
 8013d40:	20001dd1 	.word	0x20001dd1
 8013d44:	20001dd4 	.word	0x20001dd4
 8013d48:	20001388 	.word	0x20001388
 8013d4c:	20001dd8 	.word	0x20001dd8
 8013d50:	20001dbb 	.word	0x20001dbb
 8013d54:	08015ae8 	.word	0x08015ae8
 8013d58:	080138b1 	.word	0x080138b1
 8013d5c:	20001dd9 	.word	0x20001dd9
 8013d60:	080140a9 	.word	0x080140a9
 8013d64:	08015cd0 	.word	0x08015cd0
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013d68:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <fm_menu_config_pass+0x334>)
 8013d6a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d70:	f107 0313 	add.w	r3, r7, #19
 8013d74:	2200      	movs	r2, #0
 8013d76:	4619      	mov	r1, r3
 8013d78:	4810      	ldr	r0, [pc, #64]	; (8013dbc <fm_menu_config_pass+0x338>)
 8013d7a:	f7fa fbfb 	bl	800e574 <_txe_queue_send>

                password_try = 0;
 8013d7e:	4b10      	ldr	r3, [pc, #64]	; (8013dc0 <fm_menu_config_pass+0x33c>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = PASS_0;
 8013d84:	4b0f      	ldr	r3, [pc, #60]	; (8013dc4 <fm_menu_config_pass+0x340>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	701a      	strb	r2, [r3, #0]
        password[0] = PASS_0;
 8013d8a:	4b0f      	ldr	r3, [pc, #60]	; (8013dc8 <fm_menu_config_pass+0x344>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	701a      	strb	r2, [r3, #0]
        password[1] = PASS_0;
 8013d90:	4b0d      	ldr	r3, [pc, #52]	; (8013dc8 <fm_menu_config_pass+0x344>)
 8013d92:	2200      	movs	r2, #0
 8013d94:	705a      	strb	r2, [r3, #1]
        password[2] = PASS_0;
 8013d96:	4b0c      	ldr	r3, [pc, #48]	; (8013dc8 <fm_menu_config_pass+0x344>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = PASS_0;
 8013d9c:	4b0a      	ldr	r3, [pc, #40]	; (8013dc8 <fm_menu_config_pass+0x344>)
 8013d9e:	2200      	movs	r2, #0
 8013da0:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013da2:	4b0a      	ldr	r3, [pc, #40]	; (8013dcc <fm_menu_config_pass+0x348>)
 8013da4:	2201      	movs	r2, #1
 8013da6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013da8:	4b09      	ldr	r3, [pc, #36]	; (8013dd0 <fm_menu_config_pass+0x34c>)
 8013daa:	2200      	movs	r2, #0
 8013dac:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013dae:	697b      	ldr	r3, [r7, #20]
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bdb0      	pop	{r4, r5, r7, pc}
 8013db8:	08014775 	.word	0x08014775
 8013dbc:	20001388 	.word	0x20001388
 8013dc0:	20001dd9 	.word	0x20001dd9
 8013dc4:	20001dd1 	.word	0x20001dd1
 8013dc8:	20001dd4 	.word	0x20001dd4
 8013dcc:	20000148 	.word	0x20000148
 8013dd0:	20001dd8 	.word	0x20001dd8

08013dd4 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013dd4:	b5b0      	push	{r4, r5, r7, lr}
 8013dd6:	b0d8      	sub	sp, #352	; 0x160
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	4602      	mov	r2, r0
 8013ddc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013de0:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013de4:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013de6:	4ba8      	ldr	r3, [pc, #672]	; (8014088 <fm_menu_config_units_tim+0x2b4>)
 8013de8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    fm_event_t event_now;

    if (new_entry == 1)
 8013dec:	4ba7      	ldr	r3, [pc, #668]	; (801408c <fm_menu_config_units_tim+0x2b8>)
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d104      	bne.n	8013dfe <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013df4:	f7fb fe8f 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8013df8:	4ba4      	ldr	r3, [pc, #656]	; (801408c <fm_menu_config_units_tim+0x2b8>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013dfe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e02:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fc fa81 	bl	8010310 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013e0e:	f7fc fa0e 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 8013e12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e16:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	2b04      	cmp	r3, #4
 8013e20:	f200 8103 	bhi.w	801402a <fm_menu_config_units_tim+0x256>
 8013e24:	a201      	add	r2, pc, #4	; (adr r2, 8013e2c <fm_menu_config_units_tim+0x58>)
 8013e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e2a:	bf00      	nop
 8013e2c:	0801402b 	.word	0x0801402b
 8013e30:	08013e41 	.word	0x08013e41
 8013e34:	08013ee3 	.word	0x08013ee3
 8013e38:	08013f71 	.word	0x08013f71
 8013e3c:	08014003 	.word	0x08014003
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013e40:	4b93      	ldr	r3, [pc, #588]	; (8014090 <fm_menu_config_units_tim+0x2bc>)
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d03e      	beq.n	8013ec6 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013e48:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7fb f8ff 	bl	800f054 <fm_factory_get_rate>
 8013e56:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013e5e:	7e5b      	ldrb	r3, [r3, #25]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d103      	bne.n	8013e6c <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013e64:	2001      	movs	r0, #1
 8013e66:	f7fb fc61 	bl	800f72c <fm_factory_modify_time_units>
 8013e6a:	e02a      	b.n	8013ec2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013e6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fb f8ed 	bl	800f054 <fm_factory_get_rate>
 8013e7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e82:	7e5b      	ldrb	r3, [r3, #25]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d103      	bne.n	8013e90 <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013e88:	2002      	movs	r0, #2
 8013e8a:	f7fb fc4f 	bl	800f72c <fm_factory_modify_time_units>
 8013e8e:	e018      	b.n	8013ec2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013e90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fb f8dd 	bl	800f054 <fm_factory_get_rate>
 8013e9a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	d103      	bne.n	8013eaa <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013ea2:	2003      	movs	r0, #3
 8013ea4:	f7fb fc42 	bl	800f72c <fm_factory_modify_time_units>
 8013ea8:	e00b      	b.n	8013ec2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013eaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fb f8d0 	bl	800f054 <fm_factory_get_rate>
 8013eb4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013eb8:	2b03      	cmp	r3, #3
 8013eba:	d102      	bne.n	8013ec2 <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	f7fb fc35 	bl	800f72c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013ec2:	f7fb fe28 	bl	800fb16 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013ec6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013eca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013ece:	2201      	movs	r2, #1
 8013ed0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ed2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	4619      	mov	r1, r3
 8013eda:	486e      	ldr	r0, [pc, #440]	; (8014094 <fm_menu_config_units_tim+0x2c0>)
 8013edc:	f7fa fb4a 	bl	800e574 <_txe_queue_send>
        break;
 8013ee0:	e0a4      	b.n	801402c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013ee2:	4b6b      	ldr	r3, [pc, #428]	; (8014090 <fm_menu_config_units_tim+0x2bc>)
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d034      	beq.n	8013f54 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013eea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fb f8b0 	bl	800f054 <fm_factory_get_rate>
 8013ef4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d103      	bne.n	8013f04 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013efc:	2003      	movs	r0, #3
 8013efe:	f7fb fc15 	bl	800f72c <fm_factory_modify_time_units>
 8013f02:	e025      	b.n	8013f50 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013f04:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fb f8a3 	bl	800f054 <fm_factory_get_rate>
 8013f0e:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d103      	bne.n	8013f1e <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013f16:	2002      	movs	r0, #2
 8013f18:	f7fb fc08 	bl	800f72c <fm_factory_modify_time_units>
 8013f1c:	e018      	b.n	8013f50 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013f1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7fb f896 	bl	800f054 <fm_factory_get_rate>
 8013f28:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013f2c:	2b02      	cmp	r3, #2
 8013f2e:	d103      	bne.n	8013f38 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013f30:	2001      	movs	r0, #1
 8013f32:	f7fb fbfb 	bl	800f72c <fm_factory_modify_time_units>
 8013f36:	e00b      	b.n	8013f50 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013f38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fb f889 	bl	800f054 <fm_factory_get_rate>
 8013f42:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d102      	bne.n	8013f50 <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8013f4a:	2000      	movs	r0, #0
 8013f4c:	f7fb fbee 	bl	800f72c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013f50:	f7fb fde1 	bl	800fb16 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013f54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f60:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013f64:	2200      	movs	r2, #0
 8013f66:	4619      	mov	r1, r3
 8013f68:	484a      	ldr	r0, [pc, #296]	; (8014094 <fm_menu_config_units_tim+0x2c0>)
 8013f6a:	f7fa fb03 	bl	800e574 <_txe_queue_send>
        break;
 8013f6e:	e05d      	b.n	801402c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013f70:	4b47      	ldr	r3, [pc, #284]	; (8014090 <fm_menu_config_units_tim+0x2bc>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d036      	beq.n	8013fe6 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013f78:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fb f8a7 	bl	800f0d0 <fm_factory_get_units_tim>
 8013f82:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d104      	bne.n	8013f94 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013f8a:	2101      	movs	r1, #1
 8013f8c:	2001      	movs	r0, #1
 8013f8e:	f7fb fb87 	bl	800f6a0 <fm_factory_modify_res_rate>
 8013f92:	e028      	b.n	8013fe6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8013f94:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fb f899 	bl	800f0d0 <fm_factory_get_units_tim>
 8013f9e:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d104      	bne.n	8013fb0 <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8013fa6:	2102      	movs	r1, #2
 8013fa8:	2002      	movs	r0, #2
 8013faa:	f7fb fb79 	bl	800f6a0 <fm_factory_modify_res_rate>
 8013fae:	e01a      	b.n	8013fe6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 8013fb0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fb f88b 	bl	800f0d0 <fm_factory_get_units_tim>
 8013fba:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8013fbe:	2b02      	cmp	r3, #2
 8013fc0:	d104      	bne.n	8013fcc <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 8013fc2:	2103      	movs	r1, #3
 8013fc4:	2003      	movs	r0, #3
 8013fc6:	f7fb fb6b 	bl	800f6a0 <fm_factory_modify_res_rate>
 8013fca:	e00c      	b.n	8013fe6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8013fcc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fb f87d 	bl	800f0d0 <fm_factory_get_units_tim>
 8013fd6:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8013fda:	2b03      	cmp	r3, #3
 8013fdc:	d103      	bne.n	8013fe6 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 8013fde:	2100      	movs	r1, #0
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	f7fb fb5d 	bl	800f6a0 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013fe6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013fea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013fee:	2201      	movs	r2, #1
 8013ff0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ff2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	4826      	ldr	r0, [pc, #152]	; (8014094 <fm_menu_config_units_tim+0x2c0>)
 8013ffc:	f7fa faba 	bl	800e574 <_txe_queue_send>
        break;
 8014000:	e014      	b.n	801402c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014002:	4b25      	ldr	r3, [pc, #148]	; (8014098 <fm_menu_config_units_tim+0x2c4>)
 8014004:	2201      	movs	r2, #1
 8014006:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8014008:	4b24      	ldr	r3, [pc, #144]	; (801409c <fm_menu_config_units_tim+0x2c8>)
 801400a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            event_now = EVENT_LCD_REFRESH;
 801400e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014012:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014016:	2201      	movs	r2, #1
 8014018:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801401a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801401e:	2200      	movs	r2, #0
 8014020:	4619      	mov	r1, r3
 8014022:	481c      	ldr	r0, [pc, #112]	; (8014094 <fm_menu_config_units_tim+0x2c0>)
 8014024:	f7fa faa6 	bl	800e574 <_txe_queue_send>
        break;
 8014028:	e000      	b.n	801402c <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801402a:	bf00      	nop
    }

    previous_event = event_id;
 801402c:	4a1c      	ldr	r2, [pc, #112]	; (80140a0 <fm_menu_config_units_tim+0x2cc>)
 801402e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014032:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 801403a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801403e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014042:	4a18      	ldr	r2, [pc, #96]	; (80140a4 <fm_menu_config_units_tim+0x2d0>)
 8014044:	461c      	mov	r4, r3
 8014046:	4615      	mov	r5, r2
 8014048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801404a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801404c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801404e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014058:	f107 0308 	add.w	r3, r7, #8
 801405c:	212c      	movs	r1, #44	; 0x2c
 801405e:	4618      	mov	r0, r3
 8014060:	f7fa febc 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014064:	4b0c      	ldr	r3, [pc, #48]	; (8014098 <fm_menu_config_units_tim+0x2c4>)
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	2b01      	cmp	r3, #1
 801406a:	d105      	bne.n	8014078 <fm_menu_config_units_tim+0x2a4>
    {
        new_entry = 1;
 801406c:	4b07      	ldr	r3, [pc, #28]	; (801408c <fm_menu_config_units_tim+0x2b8>)
 801406e:	2201      	movs	r2, #1
 8014070:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014072:	4b09      	ldr	r3, [pc, #36]	; (8014098 <fm_menu_config_units_tim+0x2c4>)
 8014074:	2200      	movs	r2, #0
 8014076:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014078:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 801407c:	4618      	mov	r0, r3
 801407e:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8014082:	46bd      	mov	sp, r7
 8014084:	bdb0      	pop	{r4, r5, r7, pc}
 8014086:	bf00      	nop
 8014088:	08013dd5 	.word	0x08013dd5
 801408c:	20000149 	.word	0x20000149
 8014090:	20001dba 	.word	0x20001dba
 8014094:	20001388 	.word	0x20001388
 8014098:	20001dda 	.word	0x20001dda
 801409c:	08012825 	.word	0x08012825
 80140a0:	20001dbb 	.word	0x20001dbb
 80140a4:	08015b08 	.word	0x08015b08

080140a8 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 80140a8:	b5b0      	push	{r4, r5, r7, lr}
 80140aa:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	4602      	mov	r2, r0
 80140b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140b6:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80140ba:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 80140bc:	4bc8      	ldr	r3, [pc, #800]	; (80143e0 <fm_menu_config_units_vol+0x338>)
 80140be:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    fm_event_t event_now;

    if (new_entry == 1)
 80140c2:	4bc8      	ldr	r3, [pc, #800]	; (80143e4 <fm_menu_config_units_vol+0x33c>)
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d104      	bne.n	80140d4 <fm_menu_config_units_vol+0x2c>
    {
        fm_lcd_clear();
 80140ca:	f7fb fd24 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80140ce:	4bc5      	ldr	r3, [pc, #788]	; (80143e4 <fm_menu_config_units_vol+0x33c>)
 80140d0:	2200      	movs	r2, #0
 80140d2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 80140d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140d8:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	4618      	mov	r0, r3
 80140e0:	f7fc f9b2 	bl	8010448 <fm_lcd_units_vol>
    fm_lcd_refresh();
 80140e4:	f7fc f8a3 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80140e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140ec:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	2b04      	cmp	r3, #4
 80140f6:	f200 817f 	bhi.w	80143f8 <fm_menu_config_units_vol+0x350>
 80140fa:	a201      	add	r2, pc, #4	; (adr r2, 8014100 <fm_menu_config_units_vol+0x58>)
 80140fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014100:	080143f9 	.word	0x080143f9
 8014104:	08014115 	.word	0x08014115
 8014108:	08014237 	.word	0x08014237
 801410c:	0801431d 	.word	0x0801431d
 8014110:	080143b7 	.word	0x080143b7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8014114:	4bb4      	ldr	r3, [pc, #720]	; (80143e8 <fm_menu_config_units_vol+0x340>)
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d07e      	beq.n	801421a <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 801411c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014120:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014124:	4618      	mov	r0, r3
 8014126:	f7fa fe75 	bl	800ee14 <fm_factory_get_acm>
 801412a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801412e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014132:	7e1b      	ldrb	r3, [r3, #24]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d103      	bne.n	8014140 <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 8014138:	2001      	movs	r0, #1
 801413a:	f7fb fb11 	bl	800f760 <fm_factory_modify_volume_units>
 801413e:	e06a      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014140:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014144:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014148:	4618      	mov	r0, r3
 801414a:	f7fa fe63 	bl	800ee14 <fm_factory_get_acm>
 801414e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014152:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014156:	7e1b      	ldrb	r3, [r3, #24]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d103      	bne.n	8014164 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 801415c:	2002      	movs	r0, #2
 801415e:	f7fb faff 	bl	800f760 <fm_factory_modify_volume_units>
 8014162:	e058      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014164:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014168:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801416c:	4618      	mov	r0, r3
 801416e:	f7fa fe51 	bl	800ee14 <fm_factory_get_acm>
 8014172:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014176:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801417a:	7e1b      	ldrb	r3, [r3, #24]
 801417c:	2b02      	cmp	r3, #2
 801417e:	d103      	bne.n	8014188 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 8014180:	2003      	movs	r0, #3
 8014182:	f7fb faed 	bl	800f760 <fm_factory_modify_volume_units>
 8014186:	e046      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014188:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801418c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8014190:	4618      	mov	r0, r3
 8014192:	f7fa fe3f 	bl	800ee14 <fm_factory_get_acm>
 8014196:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801419a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801419e:	7e1b      	ldrb	r3, [r3, #24]
 80141a0:	2b03      	cmp	r3, #3
 80141a2:	d103      	bne.n	80141ac <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 80141a4:	2004      	movs	r0, #4
 80141a6:	f7fb fadb 	bl	800f760 <fm_factory_modify_volume_units>
 80141aa:	e034      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 80141ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141b0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7fa fe2d 	bl	800ee14 <fm_factory_get_acm>
 80141ba:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80141c2:	7e1b      	ldrb	r3, [r3, #24]
 80141c4:	2b04      	cmp	r3, #4
 80141c6:	d103      	bne.n	80141d0 <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 80141c8:	2005      	movs	r0, #5
 80141ca:	f7fb fac9 	bl	800f760 <fm_factory_modify_volume_units>
 80141ce:	e022      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 80141d0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fa fe1b 	bl	800ee14 <fm_factory_get_acm>
 80141de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141e2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80141e6:	7e1b      	ldrb	r3, [r3, #24]
 80141e8:	2b05      	cmp	r3, #5
 80141ea:	d103      	bne.n	80141f4 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 80141ec:	2007      	movs	r0, #7
 80141ee:	f7fb fab7 	bl	800f760 <fm_factory_modify_volume_units>
 80141f2:	e010      	b.n	8014216 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 80141f4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fa fe09 	bl	800ee14 <fm_factory_get_acm>
 8014202:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014206:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801420a:	7e1b      	ldrb	r3, [r3, #24]
 801420c:	2b07      	cmp	r3, #7
 801420e:	d102      	bne.n	8014216 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 8014210:	2000      	movs	r0, #0
 8014212:	f7fb faa5 	bl	800f760 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8014216:	f7fb fc7e 	bl	800fb16 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 801421a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801421e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014222:	2201      	movs	r2, #1
 8014224:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014226:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801422a:	2200      	movs	r2, #0
 801422c:	4619      	mov	r1, r3
 801422e:	486f      	ldr	r0, [pc, #444]	; (80143ec <fm_menu_config_units_vol+0x344>)
 8014230:	f7fa f9a0 	bl	800e574 <_txe_queue_send>
        break;
 8014234:	e0e1      	b.n	80143fa <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8014236:	4b6c      	ldr	r3, [pc, #432]	; (80143e8 <fm_menu_config_units_vol+0x340>)
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d060      	beq.n	8014300 <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 801423e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014246:	4618      	mov	r0, r3
 8014248:	f7fa fde4 	bl	800ee14 <fm_factory_get_acm>
 801424c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014254:	7e1b      	ldrb	r3, [r3, #24]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d103      	bne.n	8014262 <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 801425a:	2007      	movs	r0, #7
 801425c:	f7fb fa80 	bl	800f760 <fm_factory_modify_volume_units>
 8014260:	e04c      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8014262:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014266:	4618      	mov	r0, r3
 8014268:	f7fa fdd4 	bl	800ee14 <fm_factory_get_acm>
 801426c:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8014270:	2b07      	cmp	r3, #7
 8014272:	d103      	bne.n	801427c <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 8014274:	2005      	movs	r0, #5
 8014276:	f7fb fa73 	bl	800f760 <fm_factory_modify_volume_units>
 801427a:	e03f      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 801427c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014280:	4618      	mov	r0, r3
 8014282:	f7fa fdc7 	bl	800ee14 <fm_factory_get_acm>
 8014286:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 801428a:	2b05      	cmp	r3, #5
 801428c:	d103      	bne.n	8014296 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 801428e:	2004      	movs	r0, #4
 8014290:	f7fb fa66 	bl	800f760 <fm_factory_modify_volume_units>
 8014294:	e032      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014296:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801429a:	4618      	mov	r0, r3
 801429c:	f7fa fdba 	bl	800ee14 <fm_factory_get_acm>
 80142a0:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 80142a4:	2b04      	cmp	r3, #4
 80142a6:	d103      	bne.n	80142b0 <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 80142a8:	2003      	movs	r0, #3
 80142aa:	f7fb fa59 	bl	800f760 <fm_factory_modify_volume_units>
 80142ae:	e025      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 80142b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fa fdad 	bl	800ee14 <fm_factory_get_acm>
 80142ba:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 80142be:	2b03      	cmp	r3, #3
 80142c0:	d103      	bne.n	80142ca <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 80142c2:	2002      	movs	r0, #2
 80142c4:	f7fb fa4c 	bl	800f760 <fm_factory_modify_volume_units>
 80142c8:	e018      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 80142ca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7fa fda0 	bl	800ee14 <fm_factory_get_acm>
 80142d4:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d103      	bne.n	80142e4 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 80142dc:	2001      	movs	r0, #1
 80142de:	f7fb fa3f 	bl	800f760 <fm_factory_modify_volume_units>
 80142e2:	e00b      	b.n	80142fc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 80142e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fa fd93 	bl	800ee14 <fm_factory_get_acm>
 80142ee:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d102      	bne.n	80142fc <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 80142f6:	2000      	movs	r0, #0
 80142f8:	f7fb fa32 	bl	800f760 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80142fc:	f7fb fc0b 	bl	800fb16 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014300:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014304:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014308:	2201      	movs	r2, #1
 801430a:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801430c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014310:	2200      	movs	r2, #0
 8014312:	4619      	mov	r1, r3
 8014314:	4835      	ldr	r0, [pc, #212]	; (80143ec <fm_menu_config_units_vol+0x344>)
 8014316:	f7fa f92d 	bl	800e574 <_txe_queue_send>
        break;
 801431a:	e06e      	b.n	80143fa <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801431c:	4b32      	ldr	r3, [pc, #200]	; (80143e8 <fm_menu_config_units_vol+0x340>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d03a      	beq.n	801439a <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 8014324:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8014328:	4618      	mov	r0, r3
 801432a:	f7fa fee3 	bl	800f0f4 <fm_factory_get_units_vol>
 801432e:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 8014332:	2b00      	cmp	r3, #0
 8014334:	d105      	bne.n	8014342 <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 8014336:	2201      	movs	r2, #1
 8014338:	2101      	movs	r1, #1
 801433a:	2001      	movs	r0, #1
 801433c:	f7fb f992 	bl	800f664 <fm_factory_modify_res_acm_ttl>
 8014340:	e02b      	b.n	801439a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 8014342:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8014346:	4618      	mov	r0, r3
 8014348:	f7fa fed4 	bl	800f0f4 <fm_factory_get_units_vol>
 801434c:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8014350:	2b01      	cmp	r3, #1
 8014352:	d105      	bne.n	8014360 <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8014354:	2202      	movs	r2, #2
 8014356:	2102      	movs	r1, #2
 8014358:	2002      	movs	r0, #2
 801435a:	f7fb f983 	bl	800f664 <fm_factory_modify_res_acm_ttl>
 801435e:	e01c      	b.n	801439a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8014360:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8014364:	4618      	mov	r0, r3
 8014366:	f7fa fec5 	bl	800f0f4 <fm_factory_get_units_vol>
 801436a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 801436e:	2b02      	cmp	r3, #2
 8014370:	d105      	bne.n	801437e <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 8014372:	2203      	movs	r2, #3
 8014374:	2103      	movs	r1, #3
 8014376:	2003      	movs	r0, #3
 8014378:	f7fb f974 	bl	800f664 <fm_factory_modify_res_acm_ttl>
 801437c:	e00d      	b.n	801439a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 801437e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8014382:	4618      	mov	r0, r3
 8014384:	f7fa feb6 	bl	800f0f4 <fm_factory_get_units_vol>
 8014388:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 801438c:	2b03      	cmp	r3, #3
 801438e:	d104      	bne.n	801439a <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 8014390:	2200      	movs	r2, #0
 8014392:	2100      	movs	r1, #0
 8014394:	2000      	movs	r0, #0
 8014396:	f7fb f965 	bl	800f664 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801439a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801439e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80143a2:	2201      	movs	r2, #1
 80143a4:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80143aa:	2200      	movs	r2, #0
 80143ac:	4619      	mov	r1, r3
 80143ae:	480f      	ldr	r0, [pc, #60]	; (80143ec <fm_menu_config_units_vol+0x344>)
 80143b0:	f7fa f8e0 	bl	800e574 <_txe_queue_send>
        break;
 80143b4:	e021      	b.n	80143fa <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80143b6:	4b0e      	ldr	r3, [pc, #56]	; (80143f0 <fm_menu_config_units_vol+0x348>)
 80143b8:	2201      	movs	r2, #1
 80143ba:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 80143bc:	4b0d      	ldr	r3, [pc, #52]	; (80143f4 <fm_menu_config_units_vol+0x34c>)
 80143be:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
            event_now = EVENT_LCD_REFRESH;
 80143c2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80143c6:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80143ca:	2201      	movs	r2, #1
 80143cc:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143ce:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80143d2:	2200      	movs	r2, #0
 80143d4:	4619      	mov	r1, r3
 80143d6:	4805      	ldr	r0, [pc, #20]	; (80143ec <fm_menu_config_units_vol+0x344>)
 80143d8:	f7fa f8cc 	bl	800e574 <_txe_queue_send>
        break;
 80143dc:	e00d      	b.n	80143fa <fm_menu_config_units_vol+0x352>
 80143de:	bf00      	nop
 80143e0:	080140a9 	.word	0x080140a9
 80143e4:	2000014a 	.word	0x2000014a
 80143e8:	20001dba 	.word	0x20001dba
 80143ec:	20001388 	.word	0x20001388
 80143f0:	20001ddb 	.word	0x20001ddb
 80143f4:	08013dd5 	.word	0x08013dd5
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80143f8:	bf00      	nop
    }

    previous_event = event_id;
 80143fa:	4a16      	ldr	r2, [pc, #88]	; (8014454 <fm_menu_config_units_vol+0x3ac>)
 80143fc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014400:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 8014408:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801440c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8014410:	4a11      	ldr	r2, [pc, #68]	; (8014458 <fm_menu_config_units_vol+0x3b0>)
 8014412:	461c      	mov	r4, r3
 8014414:	4615      	mov	r5, r2
 8014416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801441a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801441c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801441e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014422:	c407      	stmia	r4!, {r0, r1, r2}
 8014424:	7023      	strb	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014426:	f107 0308 	add.w	r3, r7, #8
 801442a:	212d      	movs	r1, #45	; 0x2d
 801442c:	4618      	mov	r0, r3
 801442e:	f7fa fcd5 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014432:	4b0a      	ldr	r3, [pc, #40]	; (801445c <fm_menu_config_units_vol+0x3b4>)
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d105      	bne.n	8014446 <fm_menu_config_units_vol+0x39e>
    {
        new_entry = 1;
 801443a:	4b09      	ldr	r3, [pc, #36]	; (8014460 <fm_menu_config_units_vol+0x3b8>)
 801443c:	2201      	movs	r2, #1
 801443e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014440:	4b06      	ldr	r3, [pc, #24]	; (801445c <fm_menu_config_units_vol+0x3b4>)
 8014442:	2200      	movs	r2, #0
 8014444:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014446:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 801444a:	4618      	mov	r0, r3
 801444c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8014450:	46bd      	mov	sp, r7
 8014452:	bdb0      	pop	{r4, r5, r7, pc}
 8014454:	20001dbb 	.word	0x20001dbb
 8014458:	08015b34 	.word	0x08015b34
 801445c:	20001ddb 	.word	0x20001ddb
 8014460:	2000014a 	.word	0x2000014a

08014464 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	4603      	mov	r3, r0
 801446c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801446e:	4b38      	ldr	r3, [pc, #224]	; (8014550 <fm_menu_show_acm_rate+0xec>)
 8014470:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014472:	4b38      	ldr	r3, [pc, #224]	; (8014554 <fm_menu_show_acm_rate+0xf0>)
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	2b01      	cmp	r3, #1
 8014478:	d104      	bne.n	8014484 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 801447a:	f7fb fb4c 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 801447e:	4b35      	ldr	r3, [pc, #212]	; (8014554 <fm_menu_show_acm_rate+0xf0>)
 8014480:	2200      	movs	r2, #0
 8014482:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8014484:	f7fb fa84 	bl	800f990 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 8014488:	f7fb fed1 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 801448c:	79fb      	ldrb	r3, [r7, #7]
 801448e:	3b01      	subs	r3, #1
 8014490:	2b04      	cmp	r3, #4
 8014492:	d841      	bhi.n	8014518 <fm_menu_show_acm_rate+0xb4>
 8014494:	a201      	add	r2, pc, #4	; (adr r2, 801449c <fm_menu_show_acm_rate+0x38>)
 8014496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801449a:	bf00      	nop
 801449c:	08014519 	.word	0x08014519
 80144a0:	080144b1 	.word	0x080144b1
 80144a4:	080144cf 	.word	0x080144cf
 80144a8:	080144ed 	.word	0x080144ed
 80144ac:	08014505 	.word	0x08014505
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80144b0:	4b29      	ldr	r3, [pc, #164]	; (8014558 <fm_menu_show_acm_rate+0xf4>)
 80144b2:	2201      	movs	r2, #1
 80144b4:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80144b6:	4b29      	ldr	r3, [pc, #164]	; (801455c <fm_menu_show_acm_rate+0xf8>)
 80144b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80144ba:	2301      	movs	r3, #1
 80144bc:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144be:	f107 0313 	add.w	r3, r7, #19
 80144c2:	2200      	movs	r2, #0
 80144c4:	4619      	mov	r1, r3
 80144c6:	4826      	ldr	r0, [pc, #152]	; (8014560 <fm_menu_show_acm_rate+0xfc>)
 80144c8:	f7fa f854 	bl	800e574 <_txe_queue_send>
        break;
 80144cc:	e025      	b.n	801451a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80144ce:	4b22      	ldr	r3, [pc, #136]	; (8014558 <fm_menu_show_acm_rate+0xf4>)
 80144d0:	2201      	movs	r2, #1
 80144d2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80144d4:	4b23      	ldr	r3, [pc, #140]	; (8014564 <fm_menu_show_acm_rate+0x100>)
 80144d6:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80144d8:	2301      	movs	r3, #1
 80144da:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144dc:	f107 0313 	add.w	r3, r7, #19
 80144e0:	2200      	movs	r2, #0
 80144e2:	4619      	mov	r1, r3
 80144e4:	481e      	ldr	r0, [pc, #120]	; (8014560 <fm_menu_show_acm_rate+0xfc>)
 80144e6:	f7fa f845 	bl	800e574 <_txe_queue_send>
        break;
 80144ea:	e016      	b.n	801451a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 80144ec:	f7fb f952 	bl	800f794 <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 80144f0:	2301      	movs	r3, #1
 80144f2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144f4:	f107 0313 	add.w	r3, r7, #19
 80144f8:	2200      	movs	r2, #0
 80144fa:	4619      	mov	r1, r3
 80144fc:	4818      	ldr	r0, [pc, #96]	; (8014560 <fm_menu_show_acm_rate+0xfc>)
 80144fe:	f7fa f839 	bl	800e574 <_txe_queue_send>
        break;
 8014502:	e00a      	b.n	801451a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014504:	2301      	movs	r3, #1
 8014506:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014508:	f107 0313 	add.w	r3, r7, #19
 801450c:	2200      	movs	r2, #0
 801450e:	4619      	mov	r1, r3
 8014510:	4813      	ldr	r0, [pc, #76]	; (8014560 <fm_menu_show_acm_rate+0xfc>)
 8014512:	f7fa f82f 	bl	800e574 <_txe_queue_send>
        break;
 8014516:	e000      	b.n	801451a <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014518:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 801451a:	4a13      	ldr	r2, [pc, #76]	; (8014568 <fm_menu_show_acm_rate+0x104>)
 801451c:	f107 0308 	add.w	r3, r7, #8
 8014520:	ca07      	ldmia	r2, {r0, r1, r2}
 8014522:	c303      	stmia	r3!, {r0, r1}
 8014524:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014526:	f107 0308 	add.w	r3, r7, #8
 801452a:	210a      	movs	r1, #10
 801452c:	4618      	mov	r0, r3
 801452e:	f7fa fc55 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014532:	4b09      	ldr	r3, [pc, #36]	; (8014558 <fm_menu_show_acm_rate+0xf4>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	2b01      	cmp	r3, #1
 8014538:	d105      	bne.n	8014546 <fm_menu_show_acm_rate+0xe2>
    {
        new_entry = 1;
 801453a:	4b06      	ldr	r3, [pc, #24]	; (8014554 <fm_menu_show_acm_rate+0xf0>)
 801453c:	2201      	movs	r2, #1
 801453e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014540:	4b05      	ldr	r3, [pc, #20]	; (8014558 <fm_menu_show_acm_rate+0xf4>)
 8014542:	2200      	movs	r2, #0
 8014544:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014546:	697b      	ldr	r3, [r7, #20]
}
 8014548:	4618      	mov	r0, r3
 801454a:	3718      	adds	r7, #24
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	08014465 	.word	0x08014465
 8014554:	2000014b 	.word	0x2000014b
 8014558:	20001ddc 	.word	0x20001ddc
 801455c:	080148ad 	.word	0x080148ad
 8014560:	20001388 	.word	0x20001388
 8014564:	0801456d 	.word	0x0801456d
 8014568:	08015b64 	.word	0x08015b64

0801456c <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	4603      	mov	r3, r0
 8014574:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014576:	4b37      	ldr	r3, [pc, #220]	; (8014654 <fm_menu_show_acm_temp+0xe8>)
 8014578:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801457a:	4b37      	ldr	r3, [pc, #220]	; (8014658 <fm_menu_show_acm_temp+0xec>)
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	2b01      	cmp	r3, #1
 8014580:	d104      	bne.n	801458c <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 8014582:	f7fb fac8 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 8014586:	4b34      	ldr	r3, [pc, #208]	; (8014658 <fm_menu_show_acm_temp+0xec>)
 8014588:	2200      	movs	r2, #0
 801458a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 801458c:	f7fb fa6b 	bl	800fa66 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 8014590:	f7fb fe4d 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 8014594:	79fb      	ldrb	r3, [r7, #7]
 8014596:	3b01      	subs	r3, #1
 8014598:	2b04      	cmp	r3, #4
 801459a:	d83f      	bhi.n	801461c <fm_menu_show_acm_temp+0xb0>
 801459c:	a201      	add	r2, pc, #4	; (adr r2, 80145a4 <fm_menu_show_acm_temp+0x38>)
 801459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a2:	bf00      	nop
 80145a4:	0801461d 	.word	0x0801461d
 80145a8:	080145b9 	.word	0x080145b9
 80145ac:	080145d7 	.word	0x080145d7
 80145b0:	080145f5 	.word	0x080145f5
 80145b4:	08014609 	.word	0x08014609
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80145b8:	4b28      	ldr	r3, [pc, #160]	; (801465c <fm_menu_show_acm_temp+0xf0>)
 80145ba:	2201      	movs	r2, #1
 80145bc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80145be:	4b28      	ldr	r3, [pc, #160]	; (8014660 <fm_menu_show_acm_temp+0xf4>)
 80145c0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80145c2:	2301      	movs	r3, #1
 80145c4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145c6:	f107 0313 	add.w	r3, r7, #19
 80145ca:	2200      	movs	r2, #0
 80145cc:	4619      	mov	r1, r3
 80145ce:	4825      	ldr	r0, [pc, #148]	; (8014664 <fm_menu_show_acm_temp+0xf8>)
 80145d0:	f7f9 ffd0 	bl	800e574 <_txe_queue_send>
        break;
 80145d4:	e023      	b.n	801461e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80145d6:	4b21      	ldr	r3, [pc, #132]	; (801465c <fm_menu_show_acm_temp+0xf0>)
 80145d8:	2201      	movs	r2, #1
 80145da:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80145dc:	4b22      	ldr	r3, [pc, #136]	; (8014668 <fm_menu_show_acm_temp+0xfc>)
 80145de:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80145e0:	2301      	movs	r3, #1
 80145e2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145e4:	f107 0313 	add.w	r3, r7, #19
 80145e8:	2200      	movs	r2, #0
 80145ea:	4619      	mov	r1, r3
 80145ec:	481d      	ldr	r0, [pc, #116]	; (8014664 <fm_menu_show_acm_temp+0xf8>)
 80145ee:	f7f9 ffc1 	bl	800e574 <_txe_queue_send>
        break;
 80145f2:	e014      	b.n	801461e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80145f4:	2301      	movs	r3, #1
 80145f6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145f8:	f107 0313 	add.w	r3, r7, #19
 80145fc:	2200      	movs	r2, #0
 80145fe:	4619      	mov	r1, r3
 8014600:	4818      	ldr	r0, [pc, #96]	; (8014664 <fm_menu_show_acm_temp+0xf8>)
 8014602:	f7f9 ffb7 	bl	800e574 <_txe_queue_send>
        break;
 8014606:	e00a      	b.n	801461e <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014608:	2301      	movs	r3, #1
 801460a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801460c:	f107 0313 	add.w	r3, r7, #19
 8014610:	2200      	movs	r2, #0
 8014612:	4619      	mov	r1, r3
 8014614:	4813      	ldr	r0, [pc, #76]	; (8014664 <fm_menu_show_acm_temp+0xf8>)
 8014616:	f7f9 ffad 	bl	800e574 <_txe_queue_send>
        break;
 801461a:	e000      	b.n	801461e <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801461c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 801461e:	4a13      	ldr	r2, [pc, #76]	; (801466c <fm_menu_show_acm_temp+0x100>)
 8014620:	f107 0308 	add.w	r3, r7, #8
 8014624:	ca07      	ldmia	r2, {r0, r1, r2}
 8014626:	c303      	stmia	r3!, {r0, r1}
 8014628:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801462a:	f107 0308 	add.w	r3, r7, #8
 801462e:	210a      	movs	r1, #10
 8014630:	4618      	mov	r0, r3
 8014632:	f7fa fbd3 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014636:	4b09      	ldr	r3, [pc, #36]	; (801465c <fm_menu_show_acm_temp+0xf0>)
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d105      	bne.n	801464a <fm_menu_show_acm_temp+0xde>
    {
        new_entry = 1;
 801463e:	4b06      	ldr	r3, [pc, #24]	; (8014658 <fm_menu_show_acm_temp+0xec>)
 8014640:	2201      	movs	r2, #1
 8014642:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014644:	4b05      	ldr	r3, [pc, #20]	; (801465c <fm_menu_show_acm_temp+0xf0>)
 8014646:	2200      	movs	r2, #0
 8014648:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801464a:	697b      	ldr	r3, [r7, #20]
}
 801464c:	4618      	mov	r0, r3
 801464e:	3718      	adds	r7, #24
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	0801456d 	.word	0x0801456d
 8014658:	2000014c 	.word	0x2000014c
 801465c:	20001ddd 	.word	0x20001ddd
 8014660:	08014465 	.word	0x08014465
 8014664:	20001388 	.word	0x20001388
 8014668:	08014671 	.word	0x08014671
 801466c:	08015b70 	.word	0x08015b70

08014670 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b086      	sub	sp, #24
 8014674:	af00      	add	r7, sp, #0
 8014676:	4603      	mov	r3, r0
 8014678:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 801467a:	4b38      	ldr	r3, [pc, #224]	; (801475c <fm_menu_show_date_hour+0xec>)
 801467c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801467e:	4b38      	ldr	r3, [pc, #224]	; (8014760 <fm_menu_show_date_hour+0xf0>)
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d104      	bne.n	8014690 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 8014686:	f7fb fa46 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 801468a:	4b35      	ldr	r3, [pc, #212]	; (8014760 <fm_menu_show_date_hour+0xf0>)
 801468c:	2200      	movs	r2, #0
 801468e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 8014690:	79fb      	ldrb	r3, [r7, #7]
 8014692:	2200      	movs	r2, #0
 8014694:	4619      	mov	r1, r3
 8014696:	2000      	movs	r0, #0
 8014698:	f7fb fa44 	bl	800fb24 <fm_lcd_date_hour>

    fm_lcd_refresh();
 801469c:	f7fb fdc7 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80146a0:	79fb      	ldrb	r3, [r7, #7]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	2b04      	cmp	r3, #4
 80146a6:	d83a      	bhi.n	801471e <fm_menu_show_date_hour+0xae>
 80146a8:	a201      	add	r2, pc, #4	; (adr r2, 80146b0 <fm_menu_show_date_hour+0x40>)
 80146aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ae:	bf00      	nop
 80146b0:	0801471f 	.word	0x0801471f
 80146b4:	080146c5 	.word	0x080146c5
 80146b8:	080146e3 	.word	0x080146e3
 80146bc:	080146f7 	.word	0x080146f7
 80146c0:	0801470b 	.word	0x0801470b
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80146c4:	4b27      	ldr	r3, [pc, #156]	; (8014764 <fm_menu_show_date_hour+0xf4>)
 80146c6:	2201      	movs	r2, #1
 80146c8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80146ca:	4b27      	ldr	r3, [pc, #156]	; (8014768 <fm_menu_show_date_hour+0xf8>)
 80146cc:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80146ce:	2301      	movs	r3, #1
 80146d0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146d2:	f107 0313 	add.w	r3, r7, #19
 80146d6:	2200      	movs	r2, #0
 80146d8:	4619      	mov	r1, r3
 80146da:	4824      	ldr	r0, [pc, #144]	; (801476c <fm_menu_show_date_hour+0xfc>)
 80146dc:	f7f9 ff4a 	bl	800e574 <_txe_queue_send>
        break;
 80146e0:	e01e      	b.n	8014720 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 80146e2:	2301      	movs	r3, #1
 80146e4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146e6:	f107 0313 	add.w	r3, r7, #19
 80146ea:	2200      	movs	r2, #0
 80146ec:	4619      	mov	r1, r3
 80146ee:	481f      	ldr	r0, [pc, #124]	; (801476c <fm_menu_show_date_hour+0xfc>)
 80146f0:	f7f9 ff40 	bl	800e574 <_txe_queue_send>
        break;
 80146f4:	e014      	b.n	8014720 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80146f6:	2301      	movs	r3, #1
 80146f8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146fa:	f107 0313 	add.w	r3, r7, #19
 80146fe:	2200      	movs	r2, #0
 8014700:	4619      	mov	r1, r3
 8014702:	481a      	ldr	r0, [pc, #104]	; (801476c <fm_menu_show_date_hour+0xfc>)
 8014704:	f7f9 ff36 	bl	800e574 <_txe_queue_send>
        break;
 8014708:	e00a      	b.n	8014720 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 801470a:	2301      	movs	r3, #1
 801470c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801470e:	f107 0313 	add.w	r3, r7, #19
 8014712:	2200      	movs	r2, #0
 8014714:	4619      	mov	r1, r3
 8014716:	4815      	ldr	r0, [pc, #84]	; (801476c <fm_menu_show_date_hour+0xfc>)
 8014718:	f7f9 ff2c 	bl	800e574 <_txe_queue_send>
        break;
 801471c:	e000      	b.n	8014720 <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801471e:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8014720:	4a13      	ldr	r2, [pc, #76]	; (8014770 <fm_menu_show_date_hour+0x100>)
 8014722:	f107 0308 	add.w	r3, r7, #8
 8014726:	ca07      	ldmia	r2, {r0, r1, r2}
 8014728:	c303      	stmia	r3!, {r0, r1}
 801472a:	801a      	strh	r2, [r3, #0]
 801472c:	3302      	adds	r3, #2
 801472e:	0c12      	lsrs	r2, r2, #16
 8014730:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 8014732:	f107 0308 	add.w	r3, r7, #8
 8014736:	210b      	movs	r1, #11
 8014738:	4618      	mov	r0, r3
 801473a:	f7fa fb4f 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801473e:	4b09      	ldr	r3, [pc, #36]	; (8014764 <fm_menu_show_date_hour+0xf4>)
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	2b01      	cmp	r3, #1
 8014744:	d105      	bne.n	8014752 <fm_menu_show_date_hour+0xe2>
    {
        new_entry = 1;
 8014746:	4b06      	ldr	r3, [pc, #24]	; (8014760 <fm_menu_show_date_hour+0xf0>)
 8014748:	2201      	movs	r2, #1
 801474a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801474c:	4b05      	ldr	r3, [pc, #20]	; (8014764 <fm_menu_show_date_hour+0xf4>)
 801474e:	2200      	movs	r2, #0
 8014750:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014752:	697b      	ldr	r3, [r7, #20]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3718      	adds	r7, #24
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	08014671 	.word	0x08014671
 8014760:	2000014d 	.word	0x2000014d
 8014764:	20001dde 	.word	0x20001dde
 8014768:	0801456d 	.word	0x0801456d
 801476c:	20001388 	.word	0x20001388
 8014770:	08015b7c 	.word	0x08015b7c

08014774 <fm_menu_show_init>:
 * encendiendo todos los segmentos y la backlight por 3 segundos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	4603      	mov	r3, r0
 801477c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 801477e:	231e      	movs	r3, #30
 8014780:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8014782:	4b42      	ldr	r3, [pc, #264]	; (801488c <fm_menu_show_init+0x118>)
 8014784:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014786:	4b42      	ldr	r3, [pc, #264]	; (8014890 <fm_menu_show_init+0x11c>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	2b01      	cmp	r3, #1
 801478c:	d10c      	bne.n	80147a8 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 801478e:	2200      	movs	r2, #0
 8014790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014794:	483f      	ldr	r0, [pc, #252]	; (8014894 <fm_menu_show_init+0x120>)
 8014796:	f7ef fe47 	bl	8004428 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 801479a:	f7fb fbb4 	bl	800ff06 <fm_lcd_init>
        fm_lcd_clear();
 801479e:	f7fb f9ba 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80147a2:	4b3b      	ldr	r3, [pc, #236]	; (8014890 <fm_menu_show_init+0x11c>)
 80147a4:	2200      	movs	r2, #0
 80147a6:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 80147a8:	20ff      	movs	r0, #255	; 0xff
 80147aa:	f7fe f81f 	bl	80127ec <pcf8553_write_all>

    switch (event_id)
 80147ae:	79fb      	ldrb	r3, [r7, #7]
 80147b0:	3b01      	subs	r3, #1
 80147b2:	2b04      	cmp	r3, #4
 80147b4:	d848      	bhi.n	8014848 <fm_menu_show_init+0xd4>
 80147b6:	a201      	add	r2, pc, #4	; (adr r2, 80147bc <fm_menu_show_init+0x48>)
 80147b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147bc:	080147f5 	.word	0x080147f5
 80147c0:	08014849 	.word	0x08014849
 80147c4:	08014849 	.word	0x08014849
 80147c8:	080147d1 	.word	0x080147d1
 80147cc:	08014849 	.word	0x08014849
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80147d0:	4831      	ldr	r0, [pc, #196]	; (8014898 <fm_menu_show_init+0x124>)
 80147d2:	f7f9 fe67 	bl	800e4a4 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80147d6:	4b31      	ldr	r3, [pc, #196]	; (801489c <fm_menu_show_init+0x128>)
 80147d8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80147da:	2301      	movs	r3, #1
 80147dc:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147de:	f107 0312 	add.w	r3, r7, #18
 80147e2:	2200      	movs	r2, #0
 80147e4:	4619      	mov	r1, r3
 80147e6:	482c      	ldr	r0, [pc, #176]	; (8014898 <fm_menu_show_init+0x124>)
 80147e8:	f7f9 fec4 	bl	800e574 <_txe_queue_send>
            new_exit = 1;
 80147ec:	4b2c      	ldr	r3, [pc, #176]	; (80148a0 <fm_menu_show_init+0x12c>)
 80147ee:	2201      	movs	r2, #1
 80147f0:	701a      	strb	r2, [r3, #0]
        break;
 80147f2:	e02a      	b.n	801484a <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 80147f4:	4b2b      	ldr	r3, [pc, #172]	; (80148a4 <fm_menu_show_init+0x130>)
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	7cfa      	ldrb	r2, [r7, #19]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d912      	bls.n	8014824 <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 80147fe:	2064      	movs	r0, #100	; 0x64
 8014800:	f7ed f93a 	bl	8001a78 <HAL_Delay>
                counter++;
 8014804:	4b27      	ldr	r3, [pc, #156]	; (80148a4 <fm_menu_show_init+0x130>)
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	3301      	adds	r3, #1
 801480a:	b2da      	uxtb	r2, r3
 801480c:	4b25      	ldr	r3, [pc, #148]	; (80148a4 <fm_menu_show_init+0x130>)
 801480e:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014810:	2301      	movs	r3, #1
 8014812:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014814:	f107 0312 	add.w	r3, r7, #18
 8014818:	2200      	movs	r2, #0
 801481a:	4619      	mov	r1, r3
 801481c:	481e      	ldr	r0, [pc, #120]	; (8014898 <fm_menu_show_init+0x124>)
 801481e:	f7f9 fea9 	bl	800e574 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014822:	e012      	b.n	801484a <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 8014824:	481c      	ldr	r0, [pc, #112]	; (8014898 <fm_menu_show_init+0x124>)
 8014826:	f7f9 fe3d 	bl	800e4a4 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801482a:	4b1c      	ldr	r3, [pc, #112]	; (801489c <fm_menu_show_init+0x128>)
 801482c:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801482e:	2301      	movs	r3, #1
 8014830:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014832:	f107 0312 	add.w	r3, r7, #18
 8014836:	2200      	movs	r2, #0
 8014838:	4619      	mov	r1, r3
 801483a:	4817      	ldr	r0, [pc, #92]	; (8014898 <fm_menu_show_init+0x124>)
 801483c:	f7f9 fe9a 	bl	800e574 <_txe_queue_send>
                new_exit = 1;
 8014840:	4b17      	ldr	r3, [pc, #92]	; (80148a0 <fm_menu_show_init+0x12c>)
 8014842:	2201      	movs	r2, #1
 8014844:	701a      	strb	r2, [r3, #0]
        break;
 8014846:	e000      	b.n	801484a <fm_menu_show_init+0xd6>
        default:
        break;
 8014848:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 801484a:	4a17      	ldr	r2, [pc, #92]	; (80148a8 <fm_menu_show_init+0x134>)
 801484c:	f107 030c 	add.w	r3, r7, #12
 8014850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014854:	6018      	str	r0, [r3, #0]
 8014856:	3304      	adds	r3, #4
 8014858:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801485a:	f107 030c 	add.w	r3, r7, #12
 801485e:	2106      	movs	r1, #6
 8014860:	4618      	mov	r0, r3
 8014862:	f7fa fabb 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014866:	4b0e      	ldr	r3, [pc, #56]	; (80148a0 <fm_menu_show_init+0x12c>)
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	2b01      	cmp	r3, #1
 801486c:	d108      	bne.n	8014880 <fm_menu_show_init+0x10c>
    {
        counter = 0;
 801486e:	4b0d      	ldr	r3, [pc, #52]	; (80148a4 <fm_menu_show_init+0x130>)
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014874:	4b06      	ldr	r3, [pc, #24]	; (8014890 <fm_menu_show_init+0x11c>)
 8014876:	2201      	movs	r2, #1
 8014878:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801487a:	4b09      	ldr	r3, [pc, #36]	; (80148a0 <fm_menu_show_init+0x12c>)
 801487c:	2200      	movs	r2, #0
 801487e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014880:	697b      	ldr	r3, [r7, #20]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3718      	adds	r7, #24
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	08014775 	.word	0x08014775
 8014890:	2000014e 	.word	0x2000014e
 8014894:	42020800 	.word	0x42020800
 8014898:	20001388 	.word	0x20001388
 801489c:	080149b1 	.word	0x080149b1
 80148a0:	20001ddf 	.word	0x20001ddf
 80148a4:	20001de0 	.word	0x20001de0
 80148a8:	08015b88 	.word	0x08015b88

080148ac <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b086      	sub	sp, #24
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	4603      	mov	r3, r0
 80148b4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80148b6:	4b37      	ldr	r3, [pc, #220]	; (8014994 <fm_menu_show_ttl_rate+0xe8>)
 80148b8:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80148ba:	4b37      	ldr	r3, [pc, #220]	; (8014998 <fm_menu_show_ttl_rate+0xec>)
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d104      	bne.n	80148cc <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 80148c2:	f7fb f928 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80148c6:	4b34      	ldr	r3, [pc, #208]	; (8014998 <fm_menu_show_ttl_rate+0xec>)
 80148c8:	2200      	movs	r2, #0
 80148ca:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 80148cc:	f7fb fcb5 	bl	801023a <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 80148d0:	f7fb fcad 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80148d4:	79fb      	ldrb	r3, [r7, #7]
 80148d6:	3b01      	subs	r3, #1
 80148d8:	2b04      	cmp	r3, #4
 80148da:	d83f      	bhi.n	801495c <fm_menu_show_ttl_rate+0xb0>
 80148dc:	a201      	add	r2, pc, #4	; (adr r2, 80148e4 <fm_menu_show_ttl_rate+0x38>)
 80148de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e2:	bf00      	nop
 80148e4:	0801495d 	.word	0x0801495d
 80148e8:	080148f9 	.word	0x080148f9
 80148ec:	0801490d 	.word	0x0801490d
 80148f0:	0801492b 	.word	0x0801492b
 80148f4:	0801493f 	.word	0x0801493f
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 80148f8:	2301      	movs	r3, #1
 80148fa:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80148fc:	f107 0313 	add.w	r3, r7, #19
 8014900:	2200      	movs	r2, #0
 8014902:	4619      	mov	r1, r3
 8014904:	4825      	ldr	r0, [pc, #148]	; (801499c <fm_menu_show_ttl_rate+0xf0>)
 8014906:	f7f9 fe35 	bl	800e574 <_txe_queue_send>
        break;
 801490a:	e028      	b.n	801495e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801490c:	4b24      	ldr	r3, [pc, #144]	; (80149a0 <fm_menu_show_ttl_rate+0xf4>)
 801490e:	2201      	movs	r2, #1
 8014910:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014912:	4b24      	ldr	r3, [pc, #144]	; (80149a4 <fm_menu_show_ttl_rate+0xf8>)
 8014914:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014916:	2301      	movs	r3, #1
 8014918:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801491a:	f107 0313 	add.w	r3, r7, #19
 801491e:	2200      	movs	r2, #0
 8014920:	4619      	mov	r1, r3
 8014922:	481e      	ldr	r0, [pc, #120]	; (801499c <fm_menu_show_ttl_rate+0xf0>)
 8014924:	f7f9 fe26 	bl	800e574 <_txe_queue_send>
        break;
 8014928:	e019      	b.n	801495e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801492a:	2301      	movs	r3, #1
 801492c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801492e:	f107 0313 	add.w	r3, r7, #19
 8014932:	2200      	movs	r2, #0
 8014934:	4619      	mov	r1, r3
 8014936:	4819      	ldr	r0, [pc, #100]	; (801499c <fm_menu_show_ttl_rate+0xf0>)
 8014938:	f7f9 fe1c 	bl	800e574 <_txe_queue_send>
        break;
 801493c:	e00f      	b.n	801495e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801493e:	4b18      	ldr	r3, [pc, #96]	; (80149a0 <fm_menu_show_ttl_rate+0xf4>)
 8014940:	2201      	movs	r2, #1
 8014942:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8014944:	4b18      	ldr	r3, [pc, #96]	; (80149a8 <fm_menu_show_ttl_rate+0xfc>)
 8014946:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014948:	2301      	movs	r3, #1
 801494a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801494c:	f107 0313 	add.w	r3, r7, #19
 8014950:	2200      	movs	r2, #0
 8014952:	4619      	mov	r1, r3
 8014954:	4811      	ldr	r0, [pc, #68]	; (801499c <fm_menu_show_ttl_rate+0xf0>)
 8014956:	f7f9 fe0d 	bl	800e574 <_txe_queue_send>
        break;
 801495a:	e000      	b.n	801495e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801495c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 801495e:	4a13      	ldr	r2, [pc, #76]	; (80149ac <fm_menu_show_ttl_rate+0x100>)
 8014960:	f107 0308 	add.w	r3, r7, #8
 8014964:	ca07      	ldmia	r2, {r0, r1, r2}
 8014966:	c303      	stmia	r3!, {r0, r1}
 8014968:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801496a:	f107 0308 	add.w	r3, r7, #8
 801496e:	210a      	movs	r1, #10
 8014970:	4618      	mov	r0, r3
 8014972:	f7fa fa33 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014976:	4b0a      	ldr	r3, [pc, #40]	; (80149a0 <fm_menu_show_ttl_rate+0xf4>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	2b01      	cmp	r3, #1
 801497c:	d105      	bne.n	801498a <fm_menu_show_ttl_rate+0xde>
    {
        new_entry = 1;
 801497e:	4b06      	ldr	r3, [pc, #24]	; (8014998 <fm_menu_show_ttl_rate+0xec>)
 8014980:	2201      	movs	r2, #1
 8014982:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014984:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <fm_menu_show_ttl_rate+0xf4>)
 8014986:	2200      	movs	r2, #0
 8014988:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801498a:	697b      	ldr	r3, [r7, #20]
}
 801498c:	4618      	mov	r0, r3
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	080148ad 	.word	0x080148ad
 8014998:	2000014f 	.word	0x2000014f
 801499c:	20001388 	.word	0x20001388
 80149a0:	20001de1 	.word	0x20001de1
 80149a4:	08014465 	.word	0x08014465
 80149a8:	08013a85 	.word	0x08013a85
 80149ac:	08015b90 	.word	0x08015b90

080149b0 <fm_menu_show_version>:
 * caudales.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	4603      	mov	r3, r0
 80149b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 80149ba:	231e      	movs	r3, #30
 80149bc:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80149be:	4b42      	ldr	r3, [pc, #264]	; (8014ac8 <fm_menu_show_version+0x118>)
 80149c0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80149c2:	4b42      	ldr	r3, [pc, #264]	; (8014acc <fm_menu_show_version+0x11c>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d104      	bne.n	80149d4 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 80149ca:	f7fb f8a4 	bl	800fb16 <fm_lcd_clear>
        new_entry = 0;
 80149ce:	4b3f      	ldr	r3, [pc, #252]	; (8014acc <fm_menu_show_version+0x11c>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 80149d4:	2105      	movs	r1, #5
 80149d6:	2004      	movs	r0, #4
 80149d8:	f7fb fdd6 	bl	8010588 <fm_lcd_version>
    fm_lcd_refresh();
 80149dc:	f7fb fc27 	bl	801022e <fm_lcd_refresh>

    switch (event_id)
 80149e0:	79fb      	ldrb	r3, [r7, #7]
 80149e2:	3b01      	subs	r3, #1
 80149e4:	2b04      	cmp	r3, #4
 80149e6:	d849      	bhi.n	8014a7c <fm_menu_show_version+0xcc>
 80149e8:	a201      	add	r2, pc, #4	; (adr r2, 80149f0 <fm_menu_show_version+0x40>)
 80149ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ee:	bf00      	nop
 80149f0:	08014a29 	.word	0x08014a29
 80149f4:	08014a7d 	.word	0x08014a7d
 80149f8:	08014a7d 	.word	0x08014a7d
 80149fc:	08014a05 	.word	0x08014a05
 8014a00:	08014a7d 	.word	0x08014a7d
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014a04:	4832      	ldr	r0, [pc, #200]	; (8014ad0 <fm_menu_show_version+0x120>)
 8014a06:	f7f9 fd4d 	bl	800e4a4 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014a0a:	4b32      	ldr	r3, [pc, #200]	; (8014ad4 <fm_menu_show_version+0x124>)
 8014a0c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a12:	f107 0312 	add.w	r3, r7, #18
 8014a16:	2200      	movs	r2, #0
 8014a18:	4619      	mov	r1, r3
 8014a1a:	482d      	ldr	r0, [pc, #180]	; (8014ad0 <fm_menu_show_version+0x120>)
 8014a1c:	f7f9 fdaa 	bl	800e574 <_txe_queue_send>
            new_exit = 1;
 8014a20:	4b2d      	ldr	r3, [pc, #180]	; (8014ad8 <fm_menu_show_version+0x128>)
 8014a22:	2201      	movs	r2, #1
 8014a24:	701a      	strb	r2, [r3, #0]
        break;
 8014a26:	e02a      	b.n	8014a7e <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014a28:	4b2c      	ldr	r3, [pc, #176]	; (8014adc <fm_menu_show_version+0x12c>)
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	7cfa      	ldrb	r2, [r7, #19]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d912      	bls.n	8014a58 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014a32:	2064      	movs	r0, #100	; 0x64
 8014a34:	f7ed f820 	bl	8001a78 <HAL_Delay>
                counter++;
 8014a38:	4b28      	ldr	r3, [pc, #160]	; (8014adc <fm_menu_show_version+0x12c>)
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	4b26      	ldr	r3, [pc, #152]	; (8014adc <fm_menu_show_version+0x12c>)
 8014a42:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014a44:	2301      	movs	r3, #1
 8014a46:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a48:	f107 0312 	add.w	r3, r7, #18
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	4619      	mov	r1, r3
 8014a50:	481f      	ldr	r0, [pc, #124]	; (8014ad0 <fm_menu_show_version+0x120>)
 8014a52:	f7f9 fd8f 	bl	800e574 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014a56:	e012      	b.n	8014a7e <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014a58:	481d      	ldr	r0, [pc, #116]	; (8014ad0 <fm_menu_show_version+0x120>)
 8014a5a:	f7f9 fd23 	bl	800e4a4 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014a5e:	4b1d      	ldr	r3, [pc, #116]	; (8014ad4 <fm_menu_show_version+0x124>)
 8014a60:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8014a62:	2301      	movs	r3, #1
 8014a64:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a66:	f107 0312 	add.w	r3, r7, #18
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4818      	ldr	r0, [pc, #96]	; (8014ad0 <fm_menu_show_version+0x120>)
 8014a70:	f7f9 fd80 	bl	800e574 <_txe_queue_send>
                new_exit = 1;
 8014a74:	4b18      	ldr	r3, [pc, #96]	; (8014ad8 <fm_menu_show_version+0x128>)
 8014a76:	2201      	movs	r2, #1
 8014a78:	701a      	strb	r2, [r3, #0]
        break;
 8014a7a:	e000      	b.n	8014a7e <fm_menu_show_version+0xce>
        default:
        break;
 8014a7c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 8014a7e:	4a18      	ldr	r2, [pc, #96]	; (8014ae0 <fm_menu_show_version+0x130>)
 8014a80:	f107 0308 	add.w	r3, r7, #8
 8014a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a86:	c303      	stmia	r3!, {r0, r1}
 8014a88:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014a8a:	f107 0308 	add.w	r3, r7, #8
 8014a8e:	2109      	movs	r1, #9
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7fa f9a3 	bl	800eddc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014a96:	4b10      	ldr	r3, [pc, #64]	; (8014ad8 <fm_menu_show_version+0x128>)
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	d10e      	bne.n	8014abc <fm_menu_show_version+0x10c>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014aa4:	480f      	ldr	r0, [pc, #60]	; (8014ae4 <fm_menu_show_version+0x134>)
 8014aa6:	f7ef fcbf 	bl	8004428 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 8014aaa:	4b0c      	ldr	r3, [pc, #48]	; (8014adc <fm_menu_show_version+0x12c>)
 8014aac:	2200      	movs	r2, #0
 8014aae:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014ab0:	4b06      	ldr	r3, [pc, #24]	; (8014acc <fm_menu_show_version+0x11c>)
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014ab6:	4b08      	ldr	r3, [pc, #32]	; (8014ad8 <fm_menu_show_version+0x128>)
 8014ab8:	2200      	movs	r2, #0
 8014aba:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014abc:	697b      	ldr	r3, [r7, #20]
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3718      	adds	r7, #24
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	080149b1 	.word	0x080149b1
 8014acc:	20000150 	.word	0x20000150
 8014ad0:	20001388 	.word	0x20001388
 8014ad4:	080148ad 	.word	0x080148ad
 8014ad8:	20001de2 	.word	0x20001de2
 8014adc:	20001de3 	.word	0x20001de3
 8014ae0:	08015b9c 	.word	0x08015b9c
 8014ae4:	42020800 	.word	0x42020800

08014ae8 <fm_temp_stm32_format>:
 * grados celcius.
 * @param None
 * @retval Temperatura interna del micro en grados celcius.
 */
int fm_temp_stm32_format()
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014aee:	f000 f82f 	bl	8014b50 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014af2:	4813      	ldr	r0, [pc, #76]	; (8014b40 <fm_temp_stm32_format+0x58>)
 8014af4:	f7ed ffae 	bl	8002a54 <HAL_ADC_GetValue>
 8014af8:	4603      	mov	r3, r0
 8014afa:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014afc:	88fb      	ldrh	r3, [r7, #6]
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014b04:	fb02 f303 	mul.w	r3, r2, r3
 8014b08:	461a      	mov	r2, r3
 8014b0a:	4b0e      	ldr	r3, [pc, #56]	; (8014b44 <fm_temp_stm32_format+0x5c>)
 8014b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8014b10:	099b      	lsrs	r3, r3, #6
 8014b12:	461a      	mov	r2, r3
 8014b14:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <fm_temp_stm32_format+0x60>)
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	1ad3      	subs	r3, r2, r3
 8014b1a:	2264      	movs	r2, #100	; 0x64
 8014b1c:	fb03 f202 	mul.w	r2, r3, r2
 8014b20:	4b0a      	ldr	r3, [pc, #40]	; (8014b4c <fm_temp_stm32_format+0x64>)
 8014b22:	881b      	ldrh	r3, [r3, #0]
 8014b24:	4619      	mov	r1, r3
 8014b26:	4b08      	ldr	r3, [pc, #32]	; (8014b48 <fm_temp_stm32_format+0x60>)
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	1acb      	subs	r3, r1, r3
 8014b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b30:	331e      	adds	r3, #30
 8014b32:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014b34:	683b      	ldr	r3, [r7, #0]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	200013c8 	.word	0x200013c8
 8014b44:	057619f1 	.word	0x057619f1
 8014b48:	0bfa0710 	.word	0x0bfa0710
 8014b4c:	0bfa0742 	.word	0x0bfa0742

08014b50 <fm_temp_stm32_get>:
 * @brief Función que lee el ADC 1 asociado al sensor de temperatura.
 * @param None
 * @retval None
 */
void fm_temp_stm32_get()
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014b56:	2364      	movs	r3, #100	; 0x64
 8014b58:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8014b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b5e:	2100      	movs	r1, #0
 8014b60:	4808      	ldr	r0, [pc, #32]	; (8014b84 <fm_temp_stm32_get+0x34>)
 8014b62:	f7ef f827 	bl	8003bb4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014b66:	4807      	ldr	r0, [pc, #28]	; (8014b84 <fm_temp_stm32_get+0x34>)
 8014b68:	f7ed fde6 	bl	8002738 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014b6c:	79fb      	ldrb	r3, [r7, #7]
 8014b6e:	4619      	mov	r1, r3
 8014b70:	4804      	ldr	r0, [pc, #16]	; (8014b84 <fm_temp_stm32_get+0x34>)
 8014b72:	f7ed fe89 	bl	8002888 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014b76:	4803      	ldr	r0, [pc, #12]	; (8014b84 <fm_temp_stm32_get+0x34>)
 8014b78:	f7ed fe52 	bl	8002820 <HAL_ADC_Stop>
}
 8014b7c:	bf00      	nop
 8014b7e:	3708      	adds	r7, #8
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	200013c8 	.word	0x200013c8

08014b88 <fm_version_get>:
 * @brief Esta función devuelve la versión actual del firmware.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b088      	sub	sp, #32
 8014b8c:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014b92:	4638      	mov	r0, r7
 8014b94:	2307      	movs	r3, #7
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	2302      	movs	r3, #2
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	4906      	ldr	r1, [pc, #24]	; (8014bb8 <fm_version_get+0x30>)
 8014b9e:	f000 f9bb 	bl	8014f18 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014ba2:	463b      	mov	r3, r7
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f000 f94d 	bl	8014e44 <atoi>
 8014baa:	4603      	mov	r3, r0
 8014bac:	617b      	str	r3, [r7, #20]

    return (version);
 8014bae:	697b      	ldr	r3, [r7, #20]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	08015ba8 	.word	0x08015ba8

08014bbc <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bbe:	b093      	sub	sp, #76	; 0x4c
 8014bc0:	af06      	add	r7, sp, #24
 8014bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014bc4:	4c1c      	ldr	r4, [pc, #112]	; (8014c38 <fmc_get_acm+0x7c>)
 8014bc6:	f107 0308 	add.w	r3, r7, #8
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7fa f922 	bl	800ee14 <fm_factory_get_acm>
 8014bd0:	4625      	mov	r5, r4
 8014bd2:	f107 0408 	add.w	r4, r7, #8
 8014bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014be2:	4b15      	ldr	r3, [pc, #84]	; (8014c38 <fmc_get_acm+0x7c>)
 8014be4:	607b      	str	r3, [r7, #4]
 8014be6:	f107 0c08 	add.w	ip, r7, #8
 8014bea:	4e13      	ldr	r6, [pc, #76]	; (8014c38 <fmc_get_acm+0x7c>)
 8014bec:	466d      	mov	r5, sp
 8014bee:	f106 0408 	add.w	r4, r6, #8
 8014bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8014bfe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c02:	4660      	mov	r0, ip
 8014c04:	f000 f8c0 	bl	8014d88 <fmc_totalizer_init>
 8014c08:	687d      	ldr	r5, [r7, #4]
 8014c0a:	f107 0408 	add.w	r4, r7, #8
 8014c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1c:	4a06      	ldr	r2, [pc, #24]	; (8014c38 <fmc_get_acm+0x7c>)
 8014c1e:	461c      	mov	r4, r3
 8014c20:	4615      	mov	r5, r2
 8014c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c30:	3734      	adds	r7, #52	; 0x34
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c36:	bf00      	nop
 8014c38:	20001de8 	.word	0x20001de8

08014c3c <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval Caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3e:	b093      	sub	sp, #76	; 0x4c
 8014c40:	af06      	add	r7, sp, #24
 8014c42:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014c44:	4c1c      	ldr	r4, [pc, #112]	; (8014cb8 <fmc_get_rate+0x7c>)
 8014c46:	f107 0308 	add.w	r3, r7, #8
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7fa fa02 	bl	800f054 <fm_factory_get_rate>
 8014c50:	4625      	mov	r5, r4
 8014c52:	f107 0408 	add.w	r4, r7, #8
 8014c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014c62:	4b15      	ldr	r3, [pc, #84]	; (8014cb8 <fmc_get_rate+0x7c>)
 8014c64:	607b      	str	r3, [r7, #4]
 8014c66:	f107 0c08 	add.w	ip, r7, #8
 8014c6a:	4e13      	ldr	r6, [pc, #76]	; (8014cb8 <fmc_get_rate+0x7c>)
 8014c6c:	466d      	mov	r5, sp
 8014c6e:	f106 0408 	add.w	r4, r6, #8
 8014c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c7e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c82:	4660      	mov	r0, ip
 8014c84:	f000 f880 	bl	8014d88 <fmc_totalizer_init>
 8014c88:	687d      	ldr	r5, [r7, #4]
 8014c8a:	f107 0408 	add.w	r4, r7, #8
 8014c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c9c:	4a06      	ldr	r2, [pc, #24]	; (8014cb8 <fmc_get_rate+0x7c>)
 8014c9e:	461c      	mov	r4, r3
 8014ca0:	4615      	mov	r5, r2
 8014ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ca6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cb0:	3734      	adds	r7, #52	; 0x34
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20001e08 	.word	0x20001e08

08014cbc <fmc_get_stm32_temp>:
 * @param  None
 * @retval Temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b088      	sub	sp, #32
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014cc4:	f7ff ff10 	bl	8014ae8 <fm_temp_stm32_format>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	4b0d      	ldr	r3, [pc, #52]	; (8014d04 <fmc_get_stm32_temp+0x48>)
 8014cce:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014cd0:	f107 0308 	add.w	r3, r7, #8
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7fa f9d3 	bl	800f080 <fm_factory_get_temp>
 8014cda:	7b3a      	ldrb	r2, [r7, #12]
 8014cdc:	4b09      	ldr	r3, [pc, #36]	; (8014d04 <fmc_get_stm32_temp+0x48>)
 8014cde:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014ce0:	f107 0314 	add.w	r3, r7, #20
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fa f9cb 	bl	800f080 <fm_factory_get_temp>
 8014cea:	7f3a      	ldrb	r2, [r7, #28]
 8014cec:	4b05      	ldr	r3, [pc, #20]	; (8014d04 <fmc_get_stm32_temp+0x48>)
 8014cee:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4a04      	ldr	r2, [pc, #16]	; (8014d04 <fmc_get_stm32_temp+0x48>)
 8014cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	3720      	adds	r7, #32
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	20001e48 	.word	0x20001e48

08014d08 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d0a:	b093      	sub	sp, #76	; 0x4c
 8014d0c:	af06      	add	r7, sp, #24
 8014d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014d10:	4c1c      	ldr	r4, [pc, #112]	; (8014d84 <fmc_get_ttl+0x7c>)
 8014d12:	f107 0308 	add.w	r3, r7, #8
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fa f9c4 	bl	800f0a4 <fm_factory_get_ttl>
 8014d1c:	4625      	mov	r5, r4
 8014d1e:	f107 0408 	add.w	r4, r7, #8
 8014d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014d2e:	4b15      	ldr	r3, [pc, #84]	; (8014d84 <fmc_get_ttl+0x7c>)
 8014d30:	607b      	str	r3, [r7, #4]
 8014d32:	f107 0c08 	add.w	ip, r7, #8
 8014d36:	4e13      	ldr	r6, [pc, #76]	; (8014d84 <fmc_get_ttl+0x7c>)
 8014d38:	466d      	mov	r5, sp
 8014d3a:	f106 0408 	add.w	r4, r6, #8
 8014d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8014d4a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d4e:	4660      	mov	r0, ip
 8014d50:	f000 f81a 	bl	8014d88 <fmc_totalizer_init>
 8014d54:	687d      	ldr	r5, [r7, #4]
 8014d56:	f107 0408 	add.w	r4, r7, #8
 8014d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d68:	4a06      	ldr	r2, [pc, #24]	; (8014d84 <fmc_get_ttl+0x7c>)
 8014d6a:	461c      	mov	r4, r3
 8014d6c:	4615      	mov	r5, r2
 8014d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d7c:	3734      	adds	r7, #52	; 0x34
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d82:	bf00      	nop
 8014d84:	20001e28 	.word	0x20001e28

08014d88 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014d88:	b082      	sub	sp, #8
 8014d8a:	b5b0      	push	{r4, r5, r7, lr}
 8014d8c:	b082      	sub	sp, #8
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
 8014d92:	f107 0118 	add.w	r1, r7, #24
 8014d96:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014d9a:	f107 0018 	add.w	r0, r7, #24
 8014d9e:	f000 f811 	bl	8014dc4 <fmc_totalizer_refresh>

    return (totalizer);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	461d      	mov	r5, r3
 8014da6:	f107 0418 	add.w	r4, r7, #24
 8014daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014db2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014dc0:	b002      	add	sp, #8
 8014dc2:	4770      	bx	lr

08014dc4 <fmc_totalizer_refresh>:
 * @param Puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014dc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014dce:	6879      	ldr	r1, [r7, #4]
 8014dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dd4:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014dd8:	6879      	ldr	r1, [r7, #4]
 8014dda:	7d09      	ldrb	r1, [r1, #20]
 8014ddc:	4608      	mov	r0, r1
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	7b09      	ldrb	r1, [r1, #12]
 8014de2:	4401      	add	r1, r0
 8014de4:	4816      	ldr	r0, [pc, #88]	; (8014e40 <fmc_totalizer_refresh+0x7c>)
 8014de6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014dea:	2000      	movs	r0, #0
 8014dec:	460c      	mov	r4, r1
 8014dee:	4605      	mov	r5, r0
 8014df0:	68f9      	ldr	r1, [r7, #12]
 8014df2:	fb04 f001 	mul.w	r0, r4, r1
 8014df6:	68b9      	ldr	r1, [r7, #8]
 8014df8:	fb05 f101 	mul.w	r1, r5, r1
 8014dfc:	4401      	add	r1, r0
 8014dfe:	68b8      	ldr	r0, [r7, #8]
 8014e00:	fba0 2304 	umull	r2, r3, r0, r4
 8014e04:	4419      	add	r1, r3
 8014e06:	460b      	mov	r3, r1
 8014e08:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014e0c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	2200      	movs	r2, #0
 8014e16:	4698      	mov	r8, r3
 8014e18:	4691      	mov	r9, r2
 8014e1a:	4642      	mov	r2, r8
 8014e1c:	464b      	mov	r3, r9
 8014e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014e22:	f7eb fb57 	bl	80004d4 <__aeabi_uldivmod>
 8014e26:	4602      	mov	r2, r0
 8014e28:	460b      	mov	r3, r1
 8014e2a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014e2e:	68ba      	ldr	r2, [r7, #8]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	609a      	str	r2, [r3, #8]

}
 8014e34:	bf00      	nop
 8014e36:	3710      	adds	r7, #16
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014e3e:	bf00      	nop
 8014e40:	08015cd4 	.word	0x08015cd4

08014e44 <atoi>:
 8014e44:	220a      	movs	r2, #10
 8014e46:	2100      	movs	r1, #0
 8014e48:	f000 b908 	b.w	801505c <strtol>

08014e4c <__errno>:
 8014e4c:	4b01      	ldr	r3, [pc, #4]	; (8014e54 <__errno+0x8>)
 8014e4e:	6818      	ldr	r0, [r3, #0]
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop
 8014e54:	20000154 	.word	0x20000154

08014e58 <__libc_init_array>:
 8014e58:	b570      	push	{r4, r5, r6, lr}
 8014e5a:	4d0d      	ldr	r5, [pc, #52]	; (8014e90 <__libc_init_array+0x38>)
 8014e5c:	2600      	movs	r6, #0
 8014e5e:	4c0d      	ldr	r4, [pc, #52]	; (8014e94 <__libc_init_array+0x3c>)
 8014e60:	1b64      	subs	r4, r4, r5
 8014e62:	10a4      	asrs	r4, r4, #2
 8014e64:	42a6      	cmp	r6, r4
 8014e66:	d109      	bne.n	8014e7c <__libc_init_array+0x24>
 8014e68:	4d0b      	ldr	r5, [pc, #44]	; (8014e98 <__libc_init_array+0x40>)
 8014e6a:	2600      	movs	r6, #0
 8014e6c:	4c0b      	ldr	r4, [pc, #44]	; (8014e9c <__libc_init_array+0x44>)
 8014e6e:	f000 fd5d 	bl	801592c <_init>
 8014e72:	1b64      	subs	r4, r4, r5
 8014e74:	10a4      	asrs	r4, r4, #2
 8014e76:	42a6      	cmp	r6, r4
 8014e78:	d105      	bne.n	8014e86 <__libc_init_array+0x2e>
 8014e7a:	bd70      	pop	{r4, r5, r6, pc}
 8014e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e80:	3601      	adds	r6, #1
 8014e82:	4798      	blx	r3
 8014e84:	e7ee      	b.n	8014e64 <__libc_init_array+0xc>
 8014e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e8a:	3601      	adds	r6, #1
 8014e8c:	4798      	blx	r3
 8014e8e:	e7f2      	b.n	8014e76 <__libc_init_array+0x1e>
 8014e90:	08015e2c 	.word	0x08015e2c
 8014e94:	08015e2c 	.word	0x08015e2c
 8014e98:	08015e2c 	.word	0x08015e2c
 8014e9c:	08015e30 	.word	0x08015e30

08014ea0 <memset>:
 8014ea0:	4402      	add	r2, r0
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d100      	bne.n	8014eaa <memset+0xa>
 8014ea8:	4770      	bx	lr
 8014eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8014eae:	e7f9      	b.n	8014ea4 <memset+0x4>

08014eb0 <sniprintf>:
 8014eb0:	b40c      	push	{r2, r3}
 8014eb2:	4b18      	ldr	r3, [pc, #96]	; (8014f14 <sniprintf+0x64>)
 8014eb4:	b530      	push	{r4, r5, lr}
 8014eb6:	1e0c      	subs	r4, r1, #0
 8014eb8:	b09d      	sub	sp, #116	; 0x74
 8014eba:	681d      	ldr	r5, [r3, #0]
 8014ebc:	da08      	bge.n	8014ed0 <sniprintf+0x20>
 8014ebe:	238b      	movs	r3, #139	; 0x8b
 8014ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec4:	602b      	str	r3, [r5, #0]
 8014ec6:	b01d      	add	sp, #116	; 0x74
 8014ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ecc:	b002      	add	sp, #8
 8014ece:	4770      	bx	lr
 8014ed0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014ed4:	9002      	str	r0, [sp, #8]
 8014ed6:	9006      	str	r0, [sp, #24]
 8014ed8:	a902      	add	r1, sp, #8
 8014eda:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014ede:	bf14      	ite	ne
 8014ee0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014ee4:	4623      	moveq	r3, r4
 8014ee6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ee8:	4628      	mov	r0, r5
 8014eea:	9304      	str	r3, [sp, #16]
 8014eec:	9307      	str	r3, [sp, #28]
 8014eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ef2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ef6:	ab21      	add	r3, sp, #132	; 0x84
 8014ef8:	9301      	str	r3, [sp, #4]
 8014efa:	f000 f915 	bl	8015128 <_svfiprintf_r>
 8014efe:	1c43      	adds	r3, r0, #1
 8014f00:	bfbc      	itt	lt
 8014f02:	238b      	movlt	r3, #139	; 0x8b
 8014f04:	602b      	strlt	r3, [r5, #0]
 8014f06:	2c00      	cmp	r4, #0
 8014f08:	d0dd      	beq.n	8014ec6 <sniprintf+0x16>
 8014f0a:	9b02      	ldr	r3, [sp, #8]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	701a      	strb	r2, [r3, #0]
 8014f10:	e7d9      	b.n	8014ec6 <sniprintf+0x16>
 8014f12:	bf00      	nop
 8014f14:	20000154 	.word	0x20000154

08014f18 <siprintf>:
 8014f18:	b40e      	push	{r1, r2, r3}
 8014f1a:	b500      	push	{lr}
 8014f1c:	b09c      	sub	sp, #112	; 0x70
 8014f1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f22:	ab1d      	add	r3, sp, #116	; 0x74
 8014f24:	9002      	str	r0, [sp, #8]
 8014f26:	9006      	str	r0, [sp, #24]
 8014f28:	9107      	str	r1, [sp, #28]
 8014f2a:	9104      	str	r1, [sp, #16]
 8014f2c:	4808      	ldr	r0, [pc, #32]	; (8014f50 <siprintf+0x38>)
 8014f2e:	4909      	ldr	r1, [pc, #36]	; (8014f54 <siprintf+0x3c>)
 8014f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f34:	9105      	str	r1, [sp, #20]
 8014f36:	a902      	add	r1, sp, #8
 8014f38:	6800      	ldr	r0, [r0, #0]
 8014f3a:	9301      	str	r3, [sp, #4]
 8014f3c:	f000 f8f4 	bl	8015128 <_svfiprintf_r>
 8014f40:	9b02      	ldr	r3, [sp, #8]
 8014f42:	2200      	movs	r2, #0
 8014f44:	701a      	strb	r2, [r3, #0]
 8014f46:	b01c      	add	sp, #112	; 0x70
 8014f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f4c:	b003      	add	sp, #12
 8014f4e:	4770      	bx	lr
 8014f50:	20000154 	.word	0x20000154
 8014f54:	ffff0208 	.word	0xffff0208

08014f58 <_strtol_l.constprop.0>:
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f5e:	d001      	beq.n	8014f64 <_strtol_l.constprop.0+0xc>
 8014f60:	2b24      	cmp	r3, #36	; 0x24
 8014f62:	d906      	bls.n	8014f72 <_strtol_l.constprop.0+0x1a>
 8014f64:	f7ff ff72 	bl	8014e4c <__errno>
 8014f68:	2316      	movs	r3, #22
 8014f6a:	6003      	str	r3, [r0, #0]
 8014f6c:	2000      	movs	r0, #0
 8014f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f72:	460d      	mov	r5, r1
 8014f74:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8015058 <_strtol_l.constprop.0+0x100>
 8014f78:	462e      	mov	r6, r5
 8014f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014f82:	f017 0708 	ands.w	r7, r7, #8
 8014f86:	d1f7      	bne.n	8014f78 <_strtol_l.constprop.0+0x20>
 8014f88:	2c2d      	cmp	r4, #45	; 0x2d
 8014f8a:	d132      	bne.n	8014ff2 <_strtol_l.constprop.0+0x9a>
 8014f8c:	782c      	ldrb	r4, [r5, #0]
 8014f8e:	2701      	movs	r7, #1
 8014f90:	1cb5      	adds	r5, r6, #2
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d05b      	beq.n	801504e <_strtol_l.constprop.0+0xf6>
 8014f96:	2b10      	cmp	r3, #16
 8014f98:	d109      	bne.n	8014fae <_strtol_l.constprop.0+0x56>
 8014f9a:	2c30      	cmp	r4, #48	; 0x30
 8014f9c:	d107      	bne.n	8014fae <_strtol_l.constprop.0+0x56>
 8014f9e:	782c      	ldrb	r4, [r5, #0]
 8014fa0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014fa4:	2c58      	cmp	r4, #88	; 0x58
 8014fa6:	d14d      	bne.n	8015044 <_strtol_l.constprop.0+0xec>
 8014fa8:	786c      	ldrb	r4, [r5, #1]
 8014faa:	2310      	movs	r3, #16
 8014fac:	3502      	adds	r5, #2
 8014fae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014fb2:	f04f 0c00 	mov.w	ip, #0
 8014fb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fba:	4666      	mov	r6, ip
 8014fbc:	fbb8 f9f3 	udiv	r9, r8, r3
 8014fc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8014fc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014fc8:	f1be 0f09 	cmp.w	lr, #9
 8014fcc:	d816      	bhi.n	8014ffc <_strtol_l.constprop.0+0xa4>
 8014fce:	4674      	mov	r4, lr
 8014fd0:	42a3      	cmp	r3, r4
 8014fd2:	dd24      	ble.n	801501e <_strtol_l.constprop.0+0xc6>
 8014fd4:	f1bc 0f00 	cmp.w	ip, #0
 8014fd8:	db1e      	blt.n	8015018 <_strtol_l.constprop.0+0xc0>
 8014fda:	45b1      	cmp	r9, r6
 8014fdc:	d31c      	bcc.n	8015018 <_strtol_l.constprop.0+0xc0>
 8014fde:	d101      	bne.n	8014fe4 <_strtol_l.constprop.0+0x8c>
 8014fe0:	45a2      	cmp	sl, r4
 8014fe2:	db19      	blt.n	8015018 <_strtol_l.constprop.0+0xc0>
 8014fe4:	fb06 4603 	mla	r6, r6, r3, r4
 8014fe8:	f04f 0c01 	mov.w	ip, #1
 8014fec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ff0:	e7e8      	b.n	8014fc4 <_strtol_l.constprop.0+0x6c>
 8014ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8014ff4:	bf04      	itt	eq
 8014ff6:	782c      	ldrbeq	r4, [r5, #0]
 8014ff8:	1cb5      	addeq	r5, r6, #2
 8014ffa:	e7ca      	b.n	8014f92 <_strtol_l.constprop.0+0x3a>
 8014ffc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015000:	f1be 0f19 	cmp.w	lr, #25
 8015004:	d801      	bhi.n	801500a <_strtol_l.constprop.0+0xb2>
 8015006:	3c37      	subs	r4, #55	; 0x37
 8015008:	e7e2      	b.n	8014fd0 <_strtol_l.constprop.0+0x78>
 801500a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801500e:	f1be 0f19 	cmp.w	lr, #25
 8015012:	d804      	bhi.n	801501e <_strtol_l.constprop.0+0xc6>
 8015014:	3c57      	subs	r4, #87	; 0x57
 8015016:	e7db      	b.n	8014fd0 <_strtol_l.constprop.0+0x78>
 8015018:	f04f 3cff 	mov.w	ip, #4294967295
 801501c:	e7e6      	b.n	8014fec <_strtol_l.constprop.0+0x94>
 801501e:	f1bc 0f00 	cmp.w	ip, #0
 8015022:	da05      	bge.n	8015030 <_strtol_l.constprop.0+0xd8>
 8015024:	2322      	movs	r3, #34	; 0x22
 8015026:	4646      	mov	r6, r8
 8015028:	6003      	str	r3, [r0, #0]
 801502a:	b942      	cbnz	r2, 801503e <_strtol_l.constprop.0+0xe6>
 801502c:	4630      	mov	r0, r6
 801502e:	e79e      	b.n	8014f6e <_strtol_l.constprop.0+0x16>
 8015030:	b107      	cbz	r7, 8015034 <_strtol_l.constprop.0+0xdc>
 8015032:	4276      	negs	r6, r6
 8015034:	2a00      	cmp	r2, #0
 8015036:	d0f9      	beq.n	801502c <_strtol_l.constprop.0+0xd4>
 8015038:	f1bc 0f00 	cmp.w	ip, #0
 801503c:	d000      	beq.n	8015040 <_strtol_l.constprop.0+0xe8>
 801503e:	1e69      	subs	r1, r5, #1
 8015040:	6011      	str	r1, [r2, #0]
 8015042:	e7f3      	b.n	801502c <_strtol_l.constprop.0+0xd4>
 8015044:	2430      	movs	r4, #48	; 0x30
 8015046:	2b00      	cmp	r3, #0
 8015048:	d1b1      	bne.n	8014fae <_strtol_l.constprop.0+0x56>
 801504a:	2308      	movs	r3, #8
 801504c:	e7af      	b.n	8014fae <_strtol_l.constprop.0+0x56>
 801504e:	2c30      	cmp	r4, #48	; 0x30
 8015050:	d0a5      	beq.n	8014f9e <_strtol_l.constprop.0+0x46>
 8015052:	230a      	movs	r3, #10
 8015054:	e7ab      	b.n	8014fae <_strtol_l.constprop.0+0x56>
 8015056:	bf00      	nop
 8015058:	08015cf1 	.word	0x08015cf1

0801505c <strtol>:
 801505c:	4613      	mov	r3, r2
 801505e:	460a      	mov	r2, r1
 8015060:	4601      	mov	r1, r0
 8015062:	4802      	ldr	r0, [pc, #8]	; (801506c <strtol+0x10>)
 8015064:	6800      	ldr	r0, [r0, #0]
 8015066:	f7ff bf77 	b.w	8014f58 <_strtol_l.constprop.0>
 801506a:	bf00      	nop
 801506c:	20000154 	.word	0x20000154

08015070 <__ssputs_r>:
 8015070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	688e      	ldr	r6, [r1, #8]
 8015076:	4682      	mov	sl, r0
 8015078:	460c      	mov	r4, r1
 801507a:	4690      	mov	r8, r2
 801507c:	429e      	cmp	r6, r3
 801507e:	461f      	mov	r7, r3
 8015080:	d838      	bhi.n	80150f4 <__ssputs_r+0x84>
 8015082:	898a      	ldrh	r2, [r1, #12]
 8015084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015088:	d032      	beq.n	80150f0 <__ssputs_r+0x80>
 801508a:	6825      	ldr	r5, [r4, #0]
 801508c:	3301      	adds	r3, #1
 801508e:	6909      	ldr	r1, [r1, #16]
 8015090:	eba5 0901 	sub.w	r9, r5, r1
 8015094:	6965      	ldr	r5, [r4, #20]
 8015096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801509a:	444b      	add	r3, r9
 801509c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80150a0:	106d      	asrs	r5, r5, #1
 80150a2:	429d      	cmp	r5, r3
 80150a4:	bf38      	it	cc
 80150a6:	461d      	movcc	r5, r3
 80150a8:	0553      	lsls	r3, r2, #21
 80150aa:	d531      	bpl.n	8015110 <__ssputs_r+0xa0>
 80150ac:	4629      	mov	r1, r5
 80150ae:	f000 fb73 	bl	8015798 <_malloc_r>
 80150b2:	4606      	mov	r6, r0
 80150b4:	b950      	cbnz	r0, 80150cc <__ssputs_r+0x5c>
 80150b6:	230c      	movs	r3, #12
 80150b8:	f04f 30ff 	mov.w	r0, #4294967295
 80150bc:	f8ca 3000 	str.w	r3, [sl]
 80150c0:	89a3      	ldrh	r3, [r4, #12]
 80150c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150c6:	81a3      	strh	r3, [r4, #12]
 80150c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150cc:	464a      	mov	r2, r9
 80150ce:	6921      	ldr	r1, [r4, #16]
 80150d0:	f000 face 	bl	8015670 <memcpy>
 80150d4:	89a3      	ldrh	r3, [r4, #12]
 80150d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150de:	81a3      	strh	r3, [r4, #12]
 80150e0:	6126      	str	r6, [r4, #16]
 80150e2:	444e      	add	r6, r9
 80150e4:	6165      	str	r5, [r4, #20]
 80150e6:	eba5 0509 	sub.w	r5, r5, r9
 80150ea:	6026      	str	r6, [r4, #0]
 80150ec:	463e      	mov	r6, r7
 80150ee:	60a5      	str	r5, [r4, #8]
 80150f0:	42be      	cmp	r6, r7
 80150f2:	d900      	bls.n	80150f6 <__ssputs_r+0x86>
 80150f4:	463e      	mov	r6, r7
 80150f6:	4632      	mov	r2, r6
 80150f8:	4641      	mov	r1, r8
 80150fa:	6820      	ldr	r0, [r4, #0]
 80150fc:	f000 fac5 	bl	801568a <memmove>
 8015100:	68a3      	ldr	r3, [r4, #8]
 8015102:	2000      	movs	r0, #0
 8015104:	1b9b      	subs	r3, r3, r6
 8015106:	60a3      	str	r3, [r4, #8]
 8015108:	6823      	ldr	r3, [r4, #0]
 801510a:	4433      	add	r3, r6
 801510c:	6023      	str	r3, [r4, #0]
 801510e:	e7db      	b.n	80150c8 <__ssputs_r+0x58>
 8015110:	462a      	mov	r2, r5
 8015112:	f000 fbb5 	bl	8015880 <_realloc_r>
 8015116:	4606      	mov	r6, r0
 8015118:	2800      	cmp	r0, #0
 801511a:	d1e1      	bne.n	80150e0 <__ssputs_r+0x70>
 801511c:	6921      	ldr	r1, [r4, #16]
 801511e:	4650      	mov	r0, sl
 8015120:	f000 face 	bl	80156c0 <_free_r>
 8015124:	e7c7      	b.n	80150b6 <__ssputs_r+0x46>
	...

08015128 <_svfiprintf_r>:
 8015128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801512c:	4698      	mov	r8, r3
 801512e:	898b      	ldrh	r3, [r1, #12]
 8015130:	b09d      	sub	sp, #116	; 0x74
 8015132:	4607      	mov	r7, r0
 8015134:	061b      	lsls	r3, r3, #24
 8015136:	460d      	mov	r5, r1
 8015138:	4614      	mov	r4, r2
 801513a:	d50e      	bpl.n	801515a <_svfiprintf_r+0x32>
 801513c:	690b      	ldr	r3, [r1, #16]
 801513e:	b963      	cbnz	r3, 801515a <_svfiprintf_r+0x32>
 8015140:	2140      	movs	r1, #64	; 0x40
 8015142:	f000 fb29 	bl	8015798 <_malloc_r>
 8015146:	6028      	str	r0, [r5, #0]
 8015148:	6128      	str	r0, [r5, #16]
 801514a:	b920      	cbnz	r0, 8015156 <_svfiprintf_r+0x2e>
 801514c:	230c      	movs	r3, #12
 801514e:	603b      	str	r3, [r7, #0]
 8015150:	f04f 30ff 	mov.w	r0, #4294967295
 8015154:	e0d1      	b.n	80152fa <_svfiprintf_r+0x1d2>
 8015156:	2340      	movs	r3, #64	; 0x40
 8015158:	616b      	str	r3, [r5, #20]
 801515a:	2300      	movs	r3, #0
 801515c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015160:	f04f 0901 	mov.w	r9, #1
 8015164:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8015314 <_svfiprintf_r+0x1ec>
 8015168:	9309      	str	r3, [sp, #36]	; 0x24
 801516a:	2320      	movs	r3, #32
 801516c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015170:	2330      	movs	r3, #48	; 0x30
 8015172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015176:	4623      	mov	r3, r4
 8015178:	469a      	mov	sl, r3
 801517a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801517e:	b10a      	cbz	r2, 8015184 <_svfiprintf_r+0x5c>
 8015180:	2a25      	cmp	r2, #37	; 0x25
 8015182:	d1f9      	bne.n	8015178 <_svfiprintf_r+0x50>
 8015184:	ebba 0b04 	subs.w	fp, sl, r4
 8015188:	d00b      	beq.n	80151a2 <_svfiprintf_r+0x7a>
 801518a:	465b      	mov	r3, fp
 801518c:	4622      	mov	r2, r4
 801518e:	4629      	mov	r1, r5
 8015190:	4638      	mov	r0, r7
 8015192:	f7ff ff6d 	bl	8015070 <__ssputs_r>
 8015196:	3001      	adds	r0, #1
 8015198:	f000 80aa 	beq.w	80152f0 <_svfiprintf_r+0x1c8>
 801519c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801519e:	445a      	add	r2, fp
 80151a0:	9209      	str	r2, [sp, #36]	; 0x24
 80151a2:	f89a 3000 	ldrb.w	r3, [sl]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	f000 80a2 	beq.w	80152f0 <_svfiprintf_r+0x1c8>
 80151ac:	2300      	movs	r3, #0
 80151ae:	f04f 32ff 	mov.w	r2, #4294967295
 80151b2:	f10a 0a01 	add.w	sl, sl, #1
 80151b6:	9304      	str	r3, [sp, #16]
 80151b8:	9307      	str	r3, [sp, #28]
 80151ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151be:	931a      	str	r3, [sp, #104]	; 0x68
 80151c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151c4:	4654      	mov	r4, sl
 80151c6:	2205      	movs	r2, #5
 80151c8:	4852      	ldr	r0, [pc, #328]	; (8015314 <_svfiprintf_r+0x1ec>)
 80151ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ce:	f000 fa41 	bl	8015654 <memchr>
 80151d2:	9a04      	ldr	r2, [sp, #16]
 80151d4:	b9d8      	cbnz	r0, 801520e <_svfiprintf_r+0xe6>
 80151d6:	06d0      	lsls	r0, r2, #27
 80151d8:	bf44      	itt	mi
 80151da:	2320      	movmi	r3, #32
 80151dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151e0:	0711      	lsls	r1, r2, #28
 80151e2:	bf44      	itt	mi
 80151e4:	232b      	movmi	r3, #43	; 0x2b
 80151e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151ea:	f89a 3000 	ldrb.w	r3, [sl]
 80151ee:	2b2a      	cmp	r3, #42	; 0x2a
 80151f0:	d015      	beq.n	801521e <_svfiprintf_r+0xf6>
 80151f2:	9a07      	ldr	r2, [sp, #28]
 80151f4:	4654      	mov	r4, sl
 80151f6:	2000      	movs	r0, #0
 80151f8:	f04f 0c0a 	mov.w	ip, #10
 80151fc:	4621      	mov	r1, r4
 80151fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015202:	3b30      	subs	r3, #48	; 0x30
 8015204:	2b09      	cmp	r3, #9
 8015206:	d94e      	bls.n	80152a6 <_svfiprintf_r+0x17e>
 8015208:	b1b0      	cbz	r0, 8015238 <_svfiprintf_r+0x110>
 801520a:	9207      	str	r2, [sp, #28]
 801520c:	e014      	b.n	8015238 <_svfiprintf_r+0x110>
 801520e:	eba0 0308 	sub.w	r3, r0, r8
 8015212:	46a2      	mov	sl, r4
 8015214:	fa09 f303 	lsl.w	r3, r9, r3
 8015218:	4313      	orrs	r3, r2
 801521a:	9304      	str	r3, [sp, #16]
 801521c:	e7d2      	b.n	80151c4 <_svfiprintf_r+0x9c>
 801521e:	9b03      	ldr	r3, [sp, #12]
 8015220:	1d19      	adds	r1, r3, #4
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	9103      	str	r1, [sp, #12]
 8015228:	bfbb      	ittet	lt
 801522a:	425b      	neglt	r3, r3
 801522c:	f042 0202 	orrlt.w	r2, r2, #2
 8015230:	9307      	strge	r3, [sp, #28]
 8015232:	9307      	strlt	r3, [sp, #28]
 8015234:	bfb8      	it	lt
 8015236:	9204      	strlt	r2, [sp, #16]
 8015238:	7823      	ldrb	r3, [r4, #0]
 801523a:	2b2e      	cmp	r3, #46	; 0x2e
 801523c:	d10c      	bne.n	8015258 <_svfiprintf_r+0x130>
 801523e:	7863      	ldrb	r3, [r4, #1]
 8015240:	2b2a      	cmp	r3, #42	; 0x2a
 8015242:	d135      	bne.n	80152b0 <_svfiprintf_r+0x188>
 8015244:	9b03      	ldr	r3, [sp, #12]
 8015246:	3402      	adds	r4, #2
 8015248:	1d1a      	adds	r2, r3, #4
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	2b00      	cmp	r3, #0
 801524e:	9203      	str	r2, [sp, #12]
 8015250:	bfb8      	it	lt
 8015252:	f04f 33ff 	movlt.w	r3, #4294967295
 8015256:	9305      	str	r3, [sp, #20]
 8015258:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015324 <_svfiprintf_r+0x1fc>
 801525c:	2203      	movs	r2, #3
 801525e:	7821      	ldrb	r1, [r4, #0]
 8015260:	4650      	mov	r0, sl
 8015262:	f000 f9f7 	bl	8015654 <memchr>
 8015266:	b140      	cbz	r0, 801527a <_svfiprintf_r+0x152>
 8015268:	2340      	movs	r3, #64	; 0x40
 801526a:	eba0 000a 	sub.w	r0, r0, sl
 801526e:	3401      	adds	r4, #1
 8015270:	fa03 f000 	lsl.w	r0, r3, r0
 8015274:	9b04      	ldr	r3, [sp, #16]
 8015276:	4303      	orrs	r3, r0
 8015278:	9304      	str	r3, [sp, #16]
 801527a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801527e:	2206      	movs	r2, #6
 8015280:	4825      	ldr	r0, [pc, #148]	; (8015318 <_svfiprintf_r+0x1f0>)
 8015282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015286:	f000 f9e5 	bl	8015654 <memchr>
 801528a:	2800      	cmp	r0, #0
 801528c:	d038      	beq.n	8015300 <_svfiprintf_r+0x1d8>
 801528e:	4b23      	ldr	r3, [pc, #140]	; (801531c <_svfiprintf_r+0x1f4>)
 8015290:	bb1b      	cbnz	r3, 80152da <_svfiprintf_r+0x1b2>
 8015292:	9b03      	ldr	r3, [sp, #12]
 8015294:	3307      	adds	r3, #7
 8015296:	f023 0307 	bic.w	r3, r3, #7
 801529a:	3308      	adds	r3, #8
 801529c:	9303      	str	r3, [sp, #12]
 801529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a0:	4433      	add	r3, r6
 80152a2:	9309      	str	r3, [sp, #36]	; 0x24
 80152a4:	e767      	b.n	8015176 <_svfiprintf_r+0x4e>
 80152a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80152aa:	460c      	mov	r4, r1
 80152ac:	2001      	movs	r0, #1
 80152ae:	e7a5      	b.n	80151fc <_svfiprintf_r+0xd4>
 80152b0:	2300      	movs	r3, #0
 80152b2:	3401      	adds	r4, #1
 80152b4:	f04f 0c0a 	mov.w	ip, #10
 80152b8:	4619      	mov	r1, r3
 80152ba:	9305      	str	r3, [sp, #20]
 80152bc:	4620      	mov	r0, r4
 80152be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152c2:	3a30      	subs	r2, #48	; 0x30
 80152c4:	2a09      	cmp	r2, #9
 80152c6:	d903      	bls.n	80152d0 <_svfiprintf_r+0x1a8>
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d0c5      	beq.n	8015258 <_svfiprintf_r+0x130>
 80152cc:	9105      	str	r1, [sp, #20]
 80152ce:	e7c3      	b.n	8015258 <_svfiprintf_r+0x130>
 80152d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80152d4:	4604      	mov	r4, r0
 80152d6:	2301      	movs	r3, #1
 80152d8:	e7f0      	b.n	80152bc <_svfiprintf_r+0x194>
 80152da:	ab03      	add	r3, sp, #12
 80152dc:	462a      	mov	r2, r5
 80152de:	a904      	add	r1, sp, #16
 80152e0:	4638      	mov	r0, r7
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	4b0e      	ldr	r3, [pc, #56]	; (8015320 <_svfiprintf_r+0x1f8>)
 80152e6:	e000      	b.n	80152ea <_svfiprintf_r+0x1c2>
 80152e8:	bf00      	nop
 80152ea:	1c42      	adds	r2, r0, #1
 80152ec:	4606      	mov	r6, r0
 80152ee:	d1d6      	bne.n	801529e <_svfiprintf_r+0x176>
 80152f0:	89ab      	ldrh	r3, [r5, #12]
 80152f2:	065b      	lsls	r3, r3, #25
 80152f4:	f53f af2c 	bmi.w	8015150 <_svfiprintf_r+0x28>
 80152f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152fa:	b01d      	add	sp, #116	; 0x74
 80152fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015300:	ab03      	add	r3, sp, #12
 8015302:	462a      	mov	r2, r5
 8015304:	a904      	add	r1, sp, #16
 8015306:	4638      	mov	r0, r7
 8015308:	9300      	str	r3, [sp, #0]
 801530a:	4b05      	ldr	r3, [pc, #20]	; (8015320 <_svfiprintf_r+0x1f8>)
 801530c:	f000 f87c 	bl	8015408 <_printf_i>
 8015310:	e7eb      	b.n	80152ea <_svfiprintf_r+0x1c2>
 8015312:	bf00      	nop
 8015314:	08015df1 	.word	0x08015df1
 8015318:	08015dfb 	.word	0x08015dfb
 801531c:	00000000 	.word	0x00000000
 8015320:	08015071 	.word	0x08015071
 8015324:	08015df7 	.word	0x08015df7

08015328 <_printf_common>:
 8015328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801532c:	4616      	mov	r6, r2
 801532e:	4699      	mov	r9, r3
 8015330:	688a      	ldr	r2, [r1, #8]
 8015332:	4607      	mov	r7, r0
 8015334:	690b      	ldr	r3, [r1, #16]
 8015336:	460c      	mov	r4, r1
 8015338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801533c:	4293      	cmp	r3, r2
 801533e:	bfb8      	it	lt
 8015340:	4613      	movlt	r3, r2
 8015342:	6033      	str	r3, [r6, #0]
 8015344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015348:	b10a      	cbz	r2, 801534e <_printf_common+0x26>
 801534a:	3301      	adds	r3, #1
 801534c:	6033      	str	r3, [r6, #0]
 801534e:	6823      	ldr	r3, [r4, #0]
 8015350:	0699      	lsls	r1, r3, #26
 8015352:	bf42      	ittt	mi
 8015354:	6833      	ldrmi	r3, [r6, #0]
 8015356:	3302      	addmi	r3, #2
 8015358:	6033      	strmi	r3, [r6, #0]
 801535a:	6825      	ldr	r5, [r4, #0]
 801535c:	f015 0506 	ands.w	r5, r5, #6
 8015360:	d106      	bne.n	8015370 <_printf_common+0x48>
 8015362:	f104 0a19 	add.w	sl, r4, #25
 8015366:	68e3      	ldr	r3, [r4, #12]
 8015368:	6832      	ldr	r2, [r6, #0]
 801536a:	1a9b      	subs	r3, r3, r2
 801536c:	42ab      	cmp	r3, r5
 801536e:	dc29      	bgt.n	80153c4 <_printf_common+0x9c>
 8015370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015374:	1e13      	subs	r3, r2, #0
 8015376:	6822      	ldr	r2, [r4, #0]
 8015378:	bf18      	it	ne
 801537a:	2301      	movne	r3, #1
 801537c:	0692      	lsls	r2, r2, #26
 801537e:	d42e      	bmi.n	80153de <_printf_common+0xb6>
 8015380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015384:	4649      	mov	r1, r9
 8015386:	4638      	mov	r0, r7
 8015388:	47c0      	blx	r8
 801538a:	3001      	adds	r0, #1
 801538c:	d021      	beq.n	80153d2 <_printf_common+0xaa>
 801538e:	6823      	ldr	r3, [r4, #0]
 8015390:	341a      	adds	r4, #26
 8015392:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8015396:	f003 0306 	and.w	r3, r3, #6
 801539a:	6832      	ldr	r2, [r6, #0]
 801539c:	2600      	movs	r6, #0
 801539e:	2b04      	cmp	r3, #4
 80153a0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80153a4:	bf08      	it	eq
 80153a6:	1aad      	subeq	r5, r5, r2
 80153a8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80153ac:	bf14      	ite	ne
 80153ae:	2500      	movne	r5, #0
 80153b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80153b4:	4293      	cmp	r3, r2
 80153b6:	bfc4      	itt	gt
 80153b8:	1a9b      	subgt	r3, r3, r2
 80153ba:	18ed      	addgt	r5, r5, r3
 80153bc:	42b5      	cmp	r5, r6
 80153be:	d11a      	bne.n	80153f6 <_printf_common+0xce>
 80153c0:	2000      	movs	r0, #0
 80153c2:	e008      	b.n	80153d6 <_printf_common+0xae>
 80153c4:	2301      	movs	r3, #1
 80153c6:	4652      	mov	r2, sl
 80153c8:	4649      	mov	r1, r9
 80153ca:	4638      	mov	r0, r7
 80153cc:	47c0      	blx	r8
 80153ce:	3001      	adds	r0, #1
 80153d0:	d103      	bne.n	80153da <_printf_common+0xb2>
 80153d2:	f04f 30ff 	mov.w	r0, #4294967295
 80153d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153da:	3501      	adds	r5, #1
 80153dc:	e7c3      	b.n	8015366 <_printf_common+0x3e>
 80153de:	18e1      	adds	r1, r4, r3
 80153e0:	1c5a      	adds	r2, r3, #1
 80153e2:	2030      	movs	r0, #48	; 0x30
 80153e4:	3302      	adds	r3, #2
 80153e6:	4422      	add	r2, r4
 80153e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153f4:	e7c4      	b.n	8015380 <_printf_common+0x58>
 80153f6:	2301      	movs	r3, #1
 80153f8:	4622      	mov	r2, r4
 80153fa:	4649      	mov	r1, r9
 80153fc:	4638      	mov	r0, r7
 80153fe:	47c0      	blx	r8
 8015400:	3001      	adds	r0, #1
 8015402:	d0e6      	beq.n	80153d2 <_printf_common+0xaa>
 8015404:	3601      	adds	r6, #1
 8015406:	e7d9      	b.n	80153bc <_printf_common+0x94>

08015408 <_printf_i>:
 8015408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801540c:	7e0f      	ldrb	r7, [r1, #24]
 801540e:	4691      	mov	r9, r2
 8015410:	4680      	mov	r8, r0
 8015412:	460c      	mov	r4, r1
 8015414:	2f78      	cmp	r7, #120	; 0x78
 8015416:	469a      	mov	sl, r3
 8015418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801541a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801541e:	d807      	bhi.n	8015430 <_printf_i+0x28>
 8015420:	2f62      	cmp	r7, #98	; 0x62
 8015422:	d80a      	bhi.n	801543a <_printf_i+0x32>
 8015424:	2f00      	cmp	r7, #0
 8015426:	f000 80d8 	beq.w	80155da <_printf_i+0x1d2>
 801542a:	2f58      	cmp	r7, #88	; 0x58
 801542c:	f000 80a3 	beq.w	8015576 <_printf_i+0x16e>
 8015430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015438:	e03a      	b.n	80154b0 <_printf_i+0xa8>
 801543a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801543e:	2b15      	cmp	r3, #21
 8015440:	d8f6      	bhi.n	8015430 <_printf_i+0x28>
 8015442:	a101      	add	r1, pc, #4	; (adr r1, 8015448 <_printf_i+0x40>)
 8015444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015448:	080154a1 	.word	0x080154a1
 801544c:	080154b5 	.word	0x080154b5
 8015450:	08015431 	.word	0x08015431
 8015454:	08015431 	.word	0x08015431
 8015458:	08015431 	.word	0x08015431
 801545c:	08015431 	.word	0x08015431
 8015460:	080154b5 	.word	0x080154b5
 8015464:	08015431 	.word	0x08015431
 8015468:	08015431 	.word	0x08015431
 801546c:	08015431 	.word	0x08015431
 8015470:	08015431 	.word	0x08015431
 8015474:	080155c1 	.word	0x080155c1
 8015478:	080154e5 	.word	0x080154e5
 801547c:	080155a3 	.word	0x080155a3
 8015480:	08015431 	.word	0x08015431
 8015484:	08015431 	.word	0x08015431
 8015488:	080155e3 	.word	0x080155e3
 801548c:	08015431 	.word	0x08015431
 8015490:	080154e5 	.word	0x080154e5
 8015494:	08015431 	.word	0x08015431
 8015498:	08015431 	.word	0x08015431
 801549c:	080155ab 	.word	0x080155ab
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	1d1a      	adds	r2, r3, #4
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	602a      	str	r2, [r5, #0]
 80154a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154b0:	2301      	movs	r3, #1
 80154b2:	e0a3      	b.n	80155fc <_printf_i+0x1f4>
 80154b4:	6820      	ldr	r0, [r4, #0]
 80154b6:	6829      	ldr	r1, [r5, #0]
 80154b8:	0606      	lsls	r6, r0, #24
 80154ba:	f101 0304 	add.w	r3, r1, #4
 80154be:	d50a      	bpl.n	80154d6 <_printf_i+0xce>
 80154c0:	680e      	ldr	r6, [r1, #0]
 80154c2:	602b      	str	r3, [r5, #0]
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	da03      	bge.n	80154d0 <_printf_i+0xc8>
 80154c8:	232d      	movs	r3, #45	; 0x2d
 80154ca:	4276      	negs	r6, r6
 80154cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154d0:	485e      	ldr	r0, [pc, #376]	; (801564c <_printf_i+0x244>)
 80154d2:	230a      	movs	r3, #10
 80154d4:	e019      	b.n	801550a <_printf_i+0x102>
 80154d6:	680e      	ldr	r6, [r1, #0]
 80154d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80154dc:	602b      	str	r3, [r5, #0]
 80154de:	bf18      	it	ne
 80154e0:	b236      	sxthne	r6, r6
 80154e2:	e7ef      	b.n	80154c4 <_printf_i+0xbc>
 80154e4:	682b      	ldr	r3, [r5, #0]
 80154e6:	6820      	ldr	r0, [r4, #0]
 80154e8:	1d19      	adds	r1, r3, #4
 80154ea:	6029      	str	r1, [r5, #0]
 80154ec:	0601      	lsls	r1, r0, #24
 80154ee:	d501      	bpl.n	80154f4 <_printf_i+0xec>
 80154f0:	681e      	ldr	r6, [r3, #0]
 80154f2:	e002      	b.n	80154fa <_printf_i+0xf2>
 80154f4:	0646      	lsls	r6, r0, #25
 80154f6:	d5fb      	bpl.n	80154f0 <_printf_i+0xe8>
 80154f8:	881e      	ldrh	r6, [r3, #0]
 80154fa:	2f6f      	cmp	r7, #111	; 0x6f
 80154fc:	4853      	ldr	r0, [pc, #332]	; (801564c <_printf_i+0x244>)
 80154fe:	bf0c      	ite	eq
 8015500:	2308      	moveq	r3, #8
 8015502:	230a      	movne	r3, #10
 8015504:	2100      	movs	r1, #0
 8015506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801550a:	6865      	ldr	r5, [r4, #4]
 801550c:	2d00      	cmp	r5, #0
 801550e:	60a5      	str	r5, [r4, #8]
 8015510:	bfa2      	ittt	ge
 8015512:	6821      	ldrge	r1, [r4, #0]
 8015514:	f021 0104 	bicge.w	r1, r1, #4
 8015518:	6021      	strge	r1, [r4, #0]
 801551a:	b90e      	cbnz	r6, 8015520 <_printf_i+0x118>
 801551c:	2d00      	cmp	r5, #0
 801551e:	d04d      	beq.n	80155bc <_printf_i+0x1b4>
 8015520:	4615      	mov	r5, r2
 8015522:	fbb6 f1f3 	udiv	r1, r6, r3
 8015526:	fb03 6711 	mls	r7, r3, r1, r6
 801552a:	5dc7      	ldrb	r7, [r0, r7]
 801552c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015530:	4637      	mov	r7, r6
 8015532:	460e      	mov	r6, r1
 8015534:	42bb      	cmp	r3, r7
 8015536:	d9f4      	bls.n	8015522 <_printf_i+0x11a>
 8015538:	2b08      	cmp	r3, #8
 801553a:	d10b      	bne.n	8015554 <_printf_i+0x14c>
 801553c:	6823      	ldr	r3, [r4, #0]
 801553e:	07de      	lsls	r6, r3, #31
 8015540:	d508      	bpl.n	8015554 <_printf_i+0x14c>
 8015542:	6923      	ldr	r3, [r4, #16]
 8015544:	6861      	ldr	r1, [r4, #4]
 8015546:	4299      	cmp	r1, r3
 8015548:	bfde      	ittt	le
 801554a:	2330      	movle	r3, #48	; 0x30
 801554c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015554:	1b52      	subs	r2, r2, r5
 8015556:	6122      	str	r2, [r4, #16]
 8015558:	464b      	mov	r3, r9
 801555a:	aa03      	add	r2, sp, #12
 801555c:	4621      	mov	r1, r4
 801555e:	4640      	mov	r0, r8
 8015560:	f8cd a000 	str.w	sl, [sp]
 8015564:	f7ff fee0 	bl	8015328 <_printf_common>
 8015568:	3001      	adds	r0, #1
 801556a:	d14c      	bne.n	8015606 <_printf_i+0x1fe>
 801556c:	f04f 30ff 	mov.w	r0, #4294967295
 8015570:	b004      	add	sp, #16
 8015572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015576:	4835      	ldr	r0, [pc, #212]	; (801564c <_printf_i+0x244>)
 8015578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801557c:	6829      	ldr	r1, [r5, #0]
 801557e:	6823      	ldr	r3, [r4, #0]
 8015580:	f851 6b04 	ldr.w	r6, [r1], #4
 8015584:	6029      	str	r1, [r5, #0]
 8015586:	061d      	lsls	r5, r3, #24
 8015588:	d514      	bpl.n	80155b4 <_printf_i+0x1ac>
 801558a:	07df      	lsls	r7, r3, #31
 801558c:	bf44      	itt	mi
 801558e:	f043 0320 	orrmi.w	r3, r3, #32
 8015592:	6023      	strmi	r3, [r4, #0]
 8015594:	b91e      	cbnz	r6, 801559e <_printf_i+0x196>
 8015596:	6823      	ldr	r3, [r4, #0]
 8015598:	f023 0320 	bic.w	r3, r3, #32
 801559c:	6023      	str	r3, [r4, #0]
 801559e:	2310      	movs	r3, #16
 80155a0:	e7b0      	b.n	8015504 <_printf_i+0xfc>
 80155a2:	6823      	ldr	r3, [r4, #0]
 80155a4:	f043 0320 	orr.w	r3, r3, #32
 80155a8:	6023      	str	r3, [r4, #0]
 80155aa:	2378      	movs	r3, #120	; 0x78
 80155ac:	4828      	ldr	r0, [pc, #160]	; (8015650 <_printf_i+0x248>)
 80155ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80155b2:	e7e3      	b.n	801557c <_printf_i+0x174>
 80155b4:	0659      	lsls	r1, r3, #25
 80155b6:	bf48      	it	mi
 80155b8:	b2b6      	uxthmi	r6, r6
 80155ba:	e7e6      	b.n	801558a <_printf_i+0x182>
 80155bc:	4615      	mov	r5, r2
 80155be:	e7bb      	b.n	8015538 <_printf_i+0x130>
 80155c0:	682b      	ldr	r3, [r5, #0]
 80155c2:	6826      	ldr	r6, [r4, #0]
 80155c4:	1d18      	adds	r0, r3, #4
 80155c6:	6961      	ldr	r1, [r4, #20]
 80155c8:	6028      	str	r0, [r5, #0]
 80155ca:	0635      	lsls	r5, r6, #24
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	d501      	bpl.n	80155d4 <_printf_i+0x1cc>
 80155d0:	6019      	str	r1, [r3, #0]
 80155d2:	e002      	b.n	80155da <_printf_i+0x1d2>
 80155d4:	0670      	lsls	r0, r6, #25
 80155d6:	d5fb      	bpl.n	80155d0 <_printf_i+0x1c8>
 80155d8:	8019      	strh	r1, [r3, #0]
 80155da:	2300      	movs	r3, #0
 80155dc:	4615      	mov	r5, r2
 80155de:	6123      	str	r3, [r4, #16]
 80155e0:	e7ba      	b.n	8015558 <_printf_i+0x150>
 80155e2:	682b      	ldr	r3, [r5, #0]
 80155e4:	2100      	movs	r1, #0
 80155e6:	1d1a      	adds	r2, r3, #4
 80155e8:	602a      	str	r2, [r5, #0]
 80155ea:	681d      	ldr	r5, [r3, #0]
 80155ec:	6862      	ldr	r2, [r4, #4]
 80155ee:	4628      	mov	r0, r5
 80155f0:	f000 f830 	bl	8015654 <memchr>
 80155f4:	b108      	cbz	r0, 80155fa <_printf_i+0x1f2>
 80155f6:	1b40      	subs	r0, r0, r5
 80155f8:	6060      	str	r0, [r4, #4]
 80155fa:	6863      	ldr	r3, [r4, #4]
 80155fc:	6123      	str	r3, [r4, #16]
 80155fe:	2300      	movs	r3, #0
 8015600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015604:	e7a8      	b.n	8015558 <_printf_i+0x150>
 8015606:	6923      	ldr	r3, [r4, #16]
 8015608:	462a      	mov	r2, r5
 801560a:	4649      	mov	r1, r9
 801560c:	4640      	mov	r0, r8
 801560e:	47d0      	blx	sl
 8015610:	3001      	adds	r0, #1
 8015612:	d0ab      	beq.n	801556c <_printf_i+0x164>
 8015614:	6823      	ldr	r3, [r4, #0]
 8015616:	079b      	lsls	r3, r3, #30
 8015618:	d413      	bmi.n	8015642 <_printf_i+0x23a>
 801561a:	68e0      	ldr	r0, [r4, #12]
 801561c:	9b03      	ldr	r3, [sp, #12]
 801561e:	4298      	cmp	r0, r3
 8015620:	bfb8      	it	lt
 8015622:	4618      	movlt	r0, r3
 8015624:	e7a4      	b.n	8015570 <_printf_i+0x168>
 8015626:	2301      	movs	r3, #1
 8015628:	4632      	mov	r2, r6
 801562a:	4649      	mov	r1, r9
 801562c:	4640      	mov	r0, r8
 801562e:	47d0      	blx	sl
 8015630:	3001      	adds	r0, #1
 8015632:	d09b      	beq.n	801556c <_printf_i+0x164>
 8015634:	3501      	adds	r5, #1
 8015636:	68e3      	ldr	r3, [r4, #12]
 8015638:	9903      	ldr	r1, [sp, #12]
 801563a:	1a5b      	subs	r3, r3, r1
 801563c:	42ab      	cmp	r3, r5
 801563e:	dcf2      	bgt.n	8015626 <_printf_i+0x21e>
 8015640:	e7eb      	b.n	801561a <_printf_i+0x212>
 8015642:	2500      	movs	r5, #0
 8015644:	f104 0619 	add.w	r6, r4, #25
 8015648:	e7f5      	b.n	8015636 <_printf_i+0x22e>
 801564a:	bf00      	nop
 801564c:	08015e02 	.word	0x08015e02
 8015650:	08015e13 	.word	0x08015e13

08015654 <memchr>:
 8015654:	b2c9      	uxtb	r1, r1
 8015656:	4402      	add	r2, r0
 8015658:	b510      	push	{r4, lr}
 801565a:	4290      	cmp	r0, r2
 801565c:	4603      	mov	r3, r0
 801565e:	d101      	bne.n	8015664 <memchr+0x10>
 8015660:	2300      	movs	r3, #0
 8015662:	e003      	b.n	801566c <memchr+0x18>
 8015664:	781c      	ldrb	r4, [r3, #0]
 8015666:	3001      	adds	r0, #1
 8015668:	428c      	cmp	r4, r1
 801566a:	d1f6      	bne.n	801565a <memchr+0x6>
 801566c:	4618      	mov	r0, r3
 801566e:	bd10      	pop	{r4, pc}

08015670 <memcpy>:
 8015670:	440a      	add	r2, r1
 8015672:	1e43      	subs	r3, r0, #1
 8015674:	4291      	cmp	r1, r2
 8015676:	d100      	bne.n	801567a <memcpy+0xa>
 8015678:	4770      	bx	lr
 801567a:	b510      	push	{r4, lr}
 801567c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015680:	4291      	cmp	r1, r2
 8015682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015686:	d1f9      	bne.n	801567c <memcpy+0xc>
 8015688:	bd10      	pop	{r4, pc}

0801568a <memmove>:
 801568a:	4288      	cmp	r0, r1
 801568c:	b510      	push	{r4, lr}
 801568e:	eb01 0402 	add.w	r4, r1, r2
 8015692:	d902      	bls.n	801569a <memmove+0x10>
 8015694:	4284      	cmp	r4, r0
 8015696:	4623      	mov	r3, r4
 8015698:	d807      	bhi.n	80156aa <memmove+0x20>
 801569a:	1e43      	subs	r3, r0, #1
 801569c:	42a1      	cmp	r1, r4
 801569e:	d008      	beq.n	80156b2 <memmove+0x28>
 80156a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156a8:	e7f8      	b.n	801569c <memmove+0x12>
 80156aa:	4402      	add	r2, r0
 80156ac:	4601      	mov	r1, r0
 80156ae:	428a      	cmp	r2, r1
 80156b0:	d100      	bne.n	80156b4 <memmove+0x2a>
 80156b2:	bd10      	pop	{r4, pc}
 80156b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80156bc:	e7f7      	b.n	80156ae <memmove+0x24>
	...

080156c0 <_free_r>:
 80156c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156c2:	2900      	cmp	r1, #0
 80156c4:	d043      	beq.n	801574e <_free_r+0x8e>
 80156c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156ca:	1f0c      	subs	r4, r1, #4
 80156cc:	9001      	str	r0, [sp, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	bfb8      	it	lt
 80156d2:	18e4      	addlt	r4, r4, r3
 80156d4:	f000 f914 	bl	8015900 <__malloc_lock>
 80156d8:	4a1e      	ldr	r2, [pc, #120]	; (8015754 <_free_r+0x94>)
 80156da:	9801      	ldr	r0, [sp, #4]
 80156dc:	6813      	ldr	r3, [r2, #0]
 80156de:	b933      	cbnz	r3, 80156ee <_free_r+0x2e>
 80156e0:	6063      	str	r3, [r4, #4]
 80156e2:	6014      	str	r4, [r2, #0]
 80156e4:	b003      	add	sp, #12
 80156e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156ea:	f000 b90f 	b.w	801590c <__malloc_unlock>
 80156ee:	42a3      	cmp	r3, r4
 80156f0:	d908      	bls.n	8015704 <_free_r+0x44>
 80156f2:	6825      	ldr	r5, [r4, #0]
 80156f4:	1961      	adds	r1, r4, r5
 80156f6:	428b      	cmp	r3, r1
 80156f8:	bf01      	itttt	eq
 80156fa:	6819      	ldreq	r1, [r3, #0]
 80156fc:	685b      	ldreq	r3, [r3, #4]
 80156fe:	1949      	addeq	r1, r1, r5
 8015700:	6021      	streq	r1, [r4, #0]
 8015702:	e7ed      	b.n	80156e0 <_free_r+0x20>
 8015704:	461a      	mov	r2, r3
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	b10b      	cbz	r3, 801570e <_free_r+0x4e>
 801570a:	42a3      	cmp	r3, r4
 801570c:	d9fa      	bls.n	8015704 <_free_r+0x44>
 801570e:	6811      	ldr	r1, [r2, #0]
 8015710:	1855      	adds	r5, r2, r1
 8015712:	42a5      	cmp	r5, r4
 8015714:	d10b      	bne.n	801572e <_free_r+0x6e>
 8015716:	6824      	ldr	r4, [r4, #0]
 8015718:	4421      	add	r1, r4
 801571a:	1854      	adds	r4, r2, r1
 801571c:	6011      	str	r1, [r2, #0]
 801571e:	42a3      	cmp	r3, r4
 8015720:	d1e0      	bne.n	80156e4 <_free_r+0x24>
 8015722:	681c      	ldr	r4, [r3, #0]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	4421      	add	r1, r4
 8015728:	6053      	str	r3, [r2, #4]
 801572a:	6011      	str	r1, [r2, #0]
 801572c:	e7da      	b.n	80156e4 <_free_r+0x24>
 801572e:	d902      	bls.n	8015736 <_free_r+0x76>
 8015730:	230c      	movs	r3, #12
 8015732:	6003      	str	r3, [r0, #0]
 8015734:	e7d6      	b.n	80156e4 <_free_r+0x24>
 8015736:	6825      	ldr	r5, [r4, #0]
 8015738:	1961      	adds	r1, r4, r5
 801573a:	428b      	cmp	r3, r1
 801573c:	bf02      	ittt	eq
 801573e:	6819      	ldreq	r1, [r3, #0]
 8015740:	685b      	ldreq	r3, [r3, #4]
 8015742:	1949      	addeq	r1, r1, r5
 8015744:	6063      	str	r3, [r4, #4]
 8015746:	bf08      	it	eq
 8015748:	6021      	streq	r1, [r4, #0]
 801574a:	6054      	str	r4, [r2, #4]
 801574c:	e7ca      	b.n	80156e4 <_free_r+0x24>
 801574e:	b003      	add	sp, #12
 8015750:	bd30      	pop	{r4, r5, pc}
 8015752:	bf00      	nop
 8015754:	20001e54 	.word	0x20001e54

08015758 <sbrk_aligned>:
 8015758:	b570      	push	{r4, r5, r6, lr}
 801575a:	4e0e      	ldr	r6, [pc, #56]	; (8015794 <sbrk_aligned+0x3c>)
 801575c:	460c      	mov	r4, r1
 801575e:	4605      	mov	r5, r0
 8015760:	6831      	ldr	r1, [r6, #0]
 8015762:	b911      	cbnz	r1, 801576a <sbrk_aligned+0x12>
 8015764:	f000 f8bc 	bl	80158e0 <_sbrk_r>
 8015768:	6030      	str	r0, [r6, #0]
 801576a:	4621      	mov	r1, r4
 801576c:	4628      	mov	r0, r5
 801576e:	f000 f8b7 	bl	80158e0 <_sbrk_r>
 8015772:	1c43      	adds	r3, r0, #1
 8015774:	d00a      	beq.n	801578c <sbrk_aligned+0x34>
 8015776:	1cc4      	adds	r4, r0, #3
 8015778:	f024 0403 	bic.w	r4, r4, #3
 801577c:	42a0      	cmp	r0, r4
 801577e:	d007      	beq.n	8015790 <sbrk_aligned+0x38>
 8015780:	1a21      	subs	r1, r4, r0
 8015782:	4628      	mov	r0, r5
 8015784:	f000 f8ac 	bl	80158e0 <_sbrk_r>
 8015788:	3001      	adds	r0, #1
 801578a:	d101      	bne.n	8015790 <sbrk_aligned+0x38>
 801578c:	f04f 34ff 	mov.w	r4, #4294967295
 8015790:	4620      	mov	r0, r4
 8015792:	bd70      	pop	{r4, r5, r6, pc}
 8015794:	20001e58 	.word	0x20001e58

08015798 <_malloc_r>:
 8015798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801579c:	1ccd      	adds	r5, r1, #3
 801579e:	4607      	mov	r7, r0
 80157a0:	f025 0503 	bic.w	r5, r5, #3
 80157a4:	3508      	adds	r5, #8
 80157a6:	2d0c      	cmp	r5, #12
 80157a8:	bf38      	it	cc
 80157aa:	250c      	movcc	r5, #12
 80157ac:	2d00      	cmp	r5, #0
 80157ae:	db01      	blt.n	80157b4 <_malloc_r+0x1c>
 80157b0:	42a9      	cmp	r1, r5
 80157b2:	d905      	bls.n	80157c0 <_malloc_r+0x28>
 80157b4:	230c      	movs	r3, #12
 80157b6:	2600      	movs	r6, #0
 80157b8:	603b      	str	r3, [r7, #0]
 80157ba:	4630      	mov	r0, r6
 80157bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c0:	4e2e      	ldr	r6, [pc, #184]	; (801587c <_malloc_r+0xe4>)
 80157c2:	f000 f89d 	bl	8015900 <__malloc_lock>
 80157c6:	6833      	ldr	r3, [r6, #0]
 80157c8:	461c      	mov	r4, r3
 80157ca:	bb34      	cbnz	r4, 801581a <_malloc_r+0x82>
 80157cc:	4629      	mov	r1, r5
 80157ce:	4638      	mov	r0, r7
 80157d0:	f7ff ffc2 	bl	8015758 <sbrk_aligned>
 80157d4:	1c43      	adds	r3, r0, #1
 80157d6:	4604      	mov	r4, r0
 80157d8:	d14d      	bne.n	8015876 <_malloc_r+0xde>
 80157da:	6834      	ldr	r4, [r6, #0]
 80157dc:	4626      	mov	r6, r4
 80157de:	2e00      	cmp	r6, #0
 80157e0:	d140      	bne.n	8015864 <_malloc_r+0xcc>
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	4631      	mov	r1, r6
 80157e6:	4638      	mov	r0, r7
 80157e8:	eb04 0803 	add.w	r8, r4, r3
 80157ec:	f000 f878 	bl	80158e0 <_sbrk_r>
 80157f0:	4580      	cmp	r8, r0
 80157f2:	d13a      	bne.n	801586a <_malloc_r+0xd2>
 80157f4:	6821      	ldr	r1, [r4, #0]
 80157f6:	3503      	adds	r5, #3
 80157f8:	4638      	mov	r0, r7
 80157fa:	1a6d      	subs	r5, r5, r1
 80157fc:	f025 0503 	bic.w	r5, r5, #3
 8015800:	3508      	adds	r5, #8
 8015802:	2d0c      	cmp	r5, #12
 8015804:	bf38      	it	cc
 8015806:	250c      	movcc	r5, #12
 8015808:	4629      	mov	r1, r5
 801580a:	f7ff ffa5 	bl	8015758 <sbrk_aligned>
 801580e:	3001      	adds	r0, #1
 8015810:	d02b      	beq.n	801586a <_malloc_r+0xd2>
 8015812:	6823      	ldr	r3, [r4, #0]
 8015814:	442b      	add	r3, r5
 8015816:	6023      	str	r3, [r4, #0]
 8015818:	e00e      	b.n	8015838 <_malloc_r+0xa0>
 801581a:	6822      	ldr	r2, [r4, #0]
 801581c:	1b52      	subs	r2, r2, r5
 801581e:	d41e      	bmi.n	801585e <_malloc_r+0xc6>
 8015820:	2a0b      	cmp	r2, #11
 8015822:	d916      	bls.n	8015852 <_malloc_r+0xba>
 8015824:	1961      	adds	r1, r4, r5
 8015826:	42a3      	cmp	r3, r4
 8015828:	6025      	str	r5, [r4, #0]
 801582a:	bf18      	it	ne
 801582c:	6059      	strne	r1, [r3, #4]
 801582e:	6863      	ldr	r3, [r4, #4]
 8015830:	bf08      	it	eq
 8015832:	6031      	streq	r1, [r6, #0]
 8015834:	5162      	str	r2, [r4, r5]
 8015836:	604b      	str	r3, [r1, #4]
 8015838:	f104 060b 	add.w	r6, r4, #11
 801583c:	4638      	mov	r0, r7
 801583e:	f000 f865 	bl	801590c <__malloc_unlock>
 8015842:	1d23      	adds	r3, r4, #4
 8015844:	f026 0607 	bic.w	r6, r6, #7
 8015848:	1af2      	subs	r2, r6, r3
 801584a:	d0b6      	beq.n	80157ba <_malloc_r+0x22>
 801584c:	1b9b      	subs	r3, r3, r6
 801584e:	50a3      	str	r3, [r4, r2]
 8015850:	e7b3      	b.n	80157ba <_malloc_r+0x22>
 8015852:	6862      	ldr	r2, [r4, #4]
 8015854:	42a3      	cmp	r3, r4
 8015856:	bf0c      	ite	eq
 8015858:	6032      	streq	r2, [r6, #0]
 801585a:	605a      	strne	r2, [r3, #4]
 801585c:	e7ec      	b.n	8015838 <_malloc_r+0xa0>
 801585e:	4623      	mov	r3, r4
 8015860:	6864      	ldr	r4, [r4, #4]
 8015862:	e7b2      	b.n	80157ca <_malloc_r+0x32>
 8015864:	4634      	mov	r4, r6
 8015866:	6876      	ldr	r6, [r6, #4]
 8015868:	e7b9      	b.n	80157de <_malloc_r+0x46>
 801586a:	230c      	movs	r3, #12
 801586c:	4638      	mov	r0, r7
 801586e:	603b      	str	r3, [r7, #0]
 8015870:	f000 f84c 	bl	801590c <__malloc_unlock>
 8015874:	e7a1      	b.n	80157ba <_malloc_r+0x22>
 8015876:	6025      	str	r5, [r4, #0]
 8015878:	e7de      	b.n	8015838 <_malloc_r+0xa0>
 801587a:	bf00      	nop
 801587c:	20001e54 	.word	0x20001e54

08015880 <_realloc_r>:
 8015880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015884:	4680      	mov	r8, r0
 8015886:	4614      	mov	r4, r2
 8015888:	460e      	mov	r6, r1
 801588a:	b921      	cbnz	r1, 8015896 <_realloc_r+0x16>
 801588c:	4611      	mov	r1, r2
 801588e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015892:	f7ff bf81 	b.w	8015798 <_malloc_r>
 8015896:	b92a      	cbnz	r2, 80158a4 <_realloc_r+0x24>
 8015898:	4625      	mov	r5, r4
 801589a:	f7ff ff11 	bl	80156c0 <_free_r>
 801589e:	4628      	mov	r0, r5
 80158a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158a4:	f000 f838 	bl	8015918 <_malloc_usable_size_r>
 80158a8:	4284      	cmp	r4, r0
 80158aa:	4607      	mov	r7, r0
 80158ac:	d802      	bhi.n	80158b4 <_realloc_r+0x34>
 80158ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80158b2:	d812      	bhi.n	80158da <_realloc_r+0x5a>
 80158b4:	4621      	mov	r1, r4
 80158b6:	4640      	mov	r0, r8
 80158b8:	f7ff ff6e 	bl	8015798 <_malloc_r>
 80158bc:	4605      	mov	r5, r0
 80158be:	2800      	cmp	r0, #0
 80158c0:	d0ed      	beq.n	801589e <_realloc_r+0x1e>
 80158c2:	42bc      	cmp	r4, r7
 80158c4:	4622      	mov	r2, r4
 80158c6:	4631      	mov	r1, r6
 80158c8:	bf28      	it	cs
 80158ca:	463a      	movcs	r2, r7
 80158cc:	f7ff fed0 	bl	8015670 <memcpy>
 80158d0:	4631      	mov	r1, r6
 80158d2:	4640      	mov	r0, r8
 80158d4:	f7ff fef4 	bl	80156c0 <_free_r>
 80158d8:	e7e1      	b.n	801589e <_realloc_r+0x1e>
 80158da:	4635      	mov	r5, r6
 80158dc:	e7df      	b.n	801589e <_realloc_r+0x1e>
	...

080158e0 <_sbrk_r>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	2300      	movs	r3, #0
 80158e4:	4d05      	ldr	r5, [pc, #20]	; (80158fc <_sbrk_r+0x1c>)
 80158e6:	4604      	mov	r4, r0
 80158e8:	4608      	mov	r0, r1
 80158ea:	602b      	str	r3, [r5, #0]
 80158ec:	f7eb ffde 	bl	80018ac <_sbrk>
 80158f0:	1c43      	adds	r3, r0, #1
 80158f2:	d102      	bne.n	80158fa <_sbrk_r+0x1a>
 80158f4:	682b      	ldr	r3, [r5, #0]
 80158f6:	b103      	cbz	r3, 80158fa <_sbrk_r+0x1a>
 80158f8:	6023      	str	r3, [r4, #0]
 80158fa:	bd38      	pop	{r3, r4, r5, pc}
 80158fc:	20001e5c 	.word	0x20001e5c

08015900 <__malloc_lock>:
 8015900:	4801      	ldr	r0, [pc, #4]	; (8015908 <__malloc_lock+0x8>)
 8015902:	f000 b811 	b.w	8015928 <__retarget_lock_acquire_recursive>
 8015906:	bf00      	nop
 8015908:	20001e60 	.word	0x20001e60

0801590c <__malloc_unlock>:
 801590c:	4801      	ldr	r0, [pc, #4]	; (8015914 <__malloc_unlock+0x8>)
 801590e:	f000 b80c 	b.w	801592a <__retarget_lock_release_recursive>
 8015912:	bf00      	nop
 8015914:	20001e60 	.word	0x20001e60

08015918 <_malloc_usable_size_r>:
 8015918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801591c:	1f18      	subs	r0, r3, #4
 801591e:	2b00      	cmp	r3, #0
 8015920:	bfbc      	itt	lt
 8015922:	580b      	ldrlt	r3, [r1, r0]
 8015924:	18c0      	addlt	r0, r0, r3
 8015926:	4770      	bx	lr

08015928 <__retarget_lock_acquire_recursive>:
 8015928:	4770      	bx	lr

0801592a <__retarget_lock_release_recursive>:
 801592a:	4770      	bx	lr

0801592c <_init>:
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592e:	bf00      	nop
 8015930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015932:	bc08      	pop	{r3}
 8015934:	469e      	mov	lr, r3
 8015936:	4770      	bx	lr

08015938 <_fini>:
 8015938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593a:	bf00      	nop
 801593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801593e:	bc08      	pop	{r3}
 8015940:	469e      	mov	lr, r3
 8015942:	4770      	bx	lr
